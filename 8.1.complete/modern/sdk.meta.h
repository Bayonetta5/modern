// Modern v1.25 - http://moderncpp.com
// Copyright (c) 2015 Kenny Kerr

#pragma once

namespace Modern { namespace Windows { namespace ApplicationModel {

struct ISuspendingDeferral;
struct ISuspendingOperation;
struct ISuspendingEventArgs;
struct IPackageId;
struct IPackage;
struct IPackage2;
struct IPackageStatics;
struct IDesignModeStatics;
struct SuspendingEventArgs;
struct SuspendingDeferral;
struct SuspendingOperation;
struct PackageId;
struct Package;
struct DesignMode;

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

struct ISplashScreen;
struct IActivatedEventArgs;
struct IApplicationViewActivatedEventArgs;
struct IPrelaunchActivatedEventArgs;
struct ILaunchActivatedEventArgs;
struct ISearchActivatedEventArgs;
struct ISearchActivatedEventArgsWithLinguisticDetails;
struct IShareTargetActivatedEventArgs;
struct IFileActivatedEventArgs;
struct IFileActivatedEventArgsWithNeighboringFiles;
struct IProtocolActivatedEventArgs;
struct IFileOpenPickerActivatedEventArgs;
struct IFileSavePickerActivatedEventArgs;
struct ICachedFileUpdaterActivatedEventArgs;
struct IContactPickerActivatedEventArgs;
struct IDeviceActivatedEventArgs;
struct IPrintTaskSettingsActivatedEventArgs;
struct ICameraSettingsActivatedEventArgs;
struct IAppointmentsProviderActivatedEventArgs;
struct IAppointmentsProviderAddAppointmentActivatedEventArgs;
struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
struct IAppointmentsProviderShowTimeFrameActivatedEventArgs;
struct IContactActivatedEventArgs;
struct IContactCallActivatedEventArgs;
struct IContactMessageActivatedEventArgs;
struct IContactMapActivatedEventArgs;
struct IContactPostActivatedEventArgs;
struct IContactVideoCallActivatedEventArgs;
struct IContactsProviderActivatedEventArgs;
struct IRestrictedLaunchActivatedEventArgs;
struct ILockScreenCallActivatedEventArgs;
struct SplashScreen;
struct LaunchActivatedEventArgs;
struct SearchActivatedEventArgs;
struct ShareTargetActivatedEventArgs;
struct FileActivatedEventArgs;
struct ProtocolActivatedEventArgs;
struct FileOpenPickerActivatedEventArgs;
struct FileSavePickerActivatedEventArgs;
struct CachedFileUpdaterActivatedEventArgs;
struct ContactPickerActivatedEventArgs;
struct DeviceActivatedEventArgs;
struct PrintTaskSettingsActivatedEventArgs;
struct CameraSettingsActivatedEventArgs;
struct AppointmentsProviderAddAppointmentActivatedEventArgs;
struct AppointmentsProviderReplaceAppointmentActivatedEventArgs;
struct AppointmentsProviderRemoveAppointmentActivatedEventArgs;
struct AppointmentsProviderShowTimeFrameActivatedEventArgs;
struct ContactCallActivatedEventArgs;
struct ContactMessageActivatedEventArgs;
struct ContactMapActivatedEventArgs;
struct ContactPostActivatedEventArgs;
struct ContactVideoCallActivatedEventArgs;
struct RestrictedLaunchActivatedEventArgs;
struct LockScreenCallActivatedEventArgs;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

struct IAppointmentManagerStatics;
struct IAppointmentParticipant;
struct IAppointmentInvitee;
struct IAppointmentRecurrence;
struct IAppointment;
struct Appointment;
struct AppointmentOrganizer;
struct AppointmentInvitee;
struct AppointmentRecurrence;
struct AppointmentManager;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

struct IAppointmentsProviderLaunchActionVerbsStatics;
struct IAddAppointmentOperation;
struct IReplaceAppointmentOperation;
struct IRemoveAppointmentOperation;
struct AppointmentsProviderLaunchActionVerbs;
struct AddAppointmentOperation;
struct ReplaceAppointmentOperation;
struct RemoveAppointmentOperation;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

struct IBackgroundTaskCanceledEventHandler;
struct IBackgroundTaskProgressEventHandler;
struct IBackgroundTaskCompletedEventHandler;
struct IAlarmApplicationManagerStatics;
struct IBackgroundExecutionManagerStatics;
struct IBackgroundTaskInstance;
struct IBackgroundWorkCostStatics;
struct IBackgroundTaskDeferral;
struct IBackgroundTaskInstance2;
struct IBackgroundTask;
struct IBackgroundTaskRegistration;
struct IBackgroundTaskRegistrationStatics;
struct IBackgroundTaskBuilder;
struct IBackgroundTrigger;
struct IBackgroundCondition;
struct IBackgroundTaskBuilder2;
struct IBackgroundTaskCompletedEventArgs;
struct IBackgroundTaskProgressEventArgs;
struct ISystemTrigger;
struct ISystemTriggerFactory;
struct ISystemCondition;
struct ISystemConditionFactory;
struct INetworkOperatorNotificationTrigger;
struct INetworkOperatorNotificationTriggerFactory;
struct ITimeTrigger;
struct ITimeTriggerFactory;
struct IMaintenanceTrigger;
struct IMaintenanceTriggerFactory;
struct IDeviceUseTrigger;
struct IDeviceServicingTrigger;
struct ILocationTrigger;
struct ILocationTriggerFactory;
struct INetworkOperatorHotspotAuthenticationTrigger;
struct IPushNotificationTriggerFactory;
struct AlarmApplicationManager;
struct BackgroundExecutionManager;
struct BackgroundTaskRegistration;
struct BackgroundTaskDeferral;
struct BackgroundTaskProgressEventArgs;
struct BackgroundTaskCompletedEventArgs;
struct BackgroundTaskBuilder;
struct BackgroundWorkCost;
struct SystemTrigger;
struct SystemCondition;
struct NetworkOperatorNotificationTrigger;
struct TimeTrigger;
struct MaintenanceTrigger;
struct DeviceUseTrigger;
struct DeviceServicingTrigger;
struct LocationTrigger;
struct NetworkOperatorHotspotAuthenticationTrigger;
struct PushNotificationTrigger;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

struct ILockScreenCallEndCallDeferral;
struct ILockScreenCallEndRequestedEventArgs;
struct ILockScreenCallUI;
struct LockScreenCallEndCallDeferral;
struct LockScreenCallUI;
struct LockScreenCallEndRequestedEventArgs;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

struct IContactManagerStatics;
struct IContactLaunchActionVerbsStatics;
struct IContactPicker;
struct IContactPicker2;
struct IContactSignificantOther;
struct IContactWebsite;
struct IContactEmail;
struct IContactPhone;
struct IContactAddress;
struct IContactConnectedServiceAccount;
struct IContactDate;
struct IContactName;
struct IContactJobInfo;
struct IContact;
struct IContact2;
struct IContactCardDelayedDataLoader;
struct ContactCardDelayedDataLoader;
struct ContactManager;
struct ContactLaunchActionVerbs;
struct Contact;
struct ContactPicker;
struct ContactSignificantOther;
struct ContactWebsite;
struct ContactEmail;
struct ContactPhone;
struct ContactAddress;
struct ContactConnectedServiceAccount;
struct ContactDate;
struct ContactJobInfo;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

struct IContactRemovedEventArgs;
struct IContactPickerUI;
struct IContactPickerUI2;
struct ContactRemovedEventArgs;
struct ContactPickerUI;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

struct IFrameworkView;
struct IFrameworkViewSource;
struct ICoreApplication;
struct ICoreApplicationUseCount;
struct ICoreApplicationExit;
struct ICoreImmersiveApplication;
struct ICoreImmersiveApplication2;
struct ICoreApplicationUnhandledError;
struct ICoreApplicationView;
struct ICoreApplicationView2;
struct IUnhandledErrorDetectedEventArgs;
struct IUnhandledError;
struct CoreApplication;
struct CoreApplicationView;
struct UnhandledErrorDetectedEventArgs;
struct UnhandledError;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

struct IDataProviderHandler;
struct IStandardDataFormatsStatics;
struct IStandardDataFormatsStatics2;
struct IDataPackagePropertySetView;
struct IDataPackagePropertySetView2;
struct IDataPackagePropertySet;
struct IDataPackagePropertySet2;
struct IDataProviderDeferral;
struct IDataProviderRequest;
struct IOperationCompletedEventArgs;
struct IDataPackageView;
struct IDataPackageView2;
struct IDataPackage;
struct IDataPackage2;
struct IHtmlFormatHelperStatics;
struct IClipboardStatics;
struct IDataRequestDeferral;
struct IDataRequest;
struct IDataRequestedEventArgs;
struct ITargetApplicationChosenEventArgs;
struct IDataTransferManager;
struct IDataTransferManagerStatics;
struct StandardDataFormats;
struct DataPackagePropertySetView;
struct DataPackagePropertySet;
struct DataProviderDeferral;
struct DataProviderRequest;
struct OperationCompletedEventArgs;
struct DataPackageView;
struct DataPackage;
struct HtmlFormatHelper;
struct Clipboard;
struct DataRequestDeferral;
struct DataRequest;
struct DataRequestedEventArgs;
struct TargetApplicationChosenEventArgs;
struct DataTransferManager;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

struct IQuickLink;
struct IShareOperation;
struct IShareOperation2;
struct QuickLink;
struct ShareOperation;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Infrastructure {

struct ISetWindowWithWindowFactory;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

struct IResourceLoader;
struct IResourceLoader2;
struct IResourceLoaderStatics2;
struct ResourceLoader;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

struct IResourceManager;
struct IResourceManagerStatics;
struct IResourceQualifier;
struct IResourceContext;
struct IResourceContextStatics2;
struct IResourceCandidate;
struct INamedResource;
struct IResourceMap;
struct ResourceMap;
struct ResourceContext;
struct ResourceManager;
struct ResourceQualifier;
struct ResourceCandidate;
struct NamedResource;
struct ResourceMapIterator;
struct ResourceMapMapView;
struct ResourceMapMapViewIterator;
struct ResourceQualifierObservableMap;
struct ResourceQualifierMapView;
struct ResourceQualifierVectorView;
struct ResourceCandidateVectorView;
struct ResourceContextLanguagesVectorView;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

struct IResourceIndexer;
struct IResourceIndexerFactory;
struct IResourceIndexerFactory2;
struct IIndexedResourceQualifier;
struct IIndexedResourceCandidate;
struct IndexedResourceCandidate;
struct ResourceIndexer;
struct IndexedResourceQualifier;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

struct ISearchPaneQueryLinguisticDetails;
struct ISearchPaneVisibilityChangedEventArgs;
struct ISearchPaneQueryChangedEventArgs;
struct ISearchPaneQuerySubmittedEventArgs;
struct ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails;
struct ISearchPaneResultSuggestionChosenEventArgs;
struct ISearchSuggestionCollection;
struct ISearchPaneSuggestionsRequestDeferral;
struct ISearchPaneSuggestionsRequest;
struct ISearchPaneSuggestionsRequestedEventArgs;
struct ILocalContentSuggestionSettings;
struct ISearchPaneStatics;
struct ISearchPaneStaticsWithHideThisApplication;
struct ISearchPane;
struct ISearchQueryLinguisticDetailsFactory;
struct ISearchQueryLinguisticDetails;
struct ISearchSuggestionsRequestDeferral;
struct ISearchSuggestionsRequest;
struct SearchPaneQueryLinguisticDetails;
struct SearchPaneVisibilityChangedEventArgs;
struct SearchPaneQueryChangedEventArgs;
struct SearchPaneQuerySubmittedEventArgs;
struct SearchPaneResultSuggestionChosenEventArgs;
struct SearchSuggestionCollection;
struct SearchPaneSuggestionsRequestDeferral;
struct SearchPaneSuggestionsRequest;
struct SearchPaneSuggestionsRequestedEventArgs;
struct LocalContentSuggestionSettings;
struct SearchPane;
struct SearchQueryLinguisticDetails;
struct SearchSuggestionsRequestDeferral;
struct SearchSuggestionsRequest;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

struct ILicenseChangedEventHandler;
struct ICurrentApp;
struct ICurrentAppWithConsumables;
struct ICurrentAppSimulator;
struct ICurrentAppSimulatorWithConsumables;
struct IPurchaseResults;
struct ILicenseInformation;
struct IProductLicense;
struct IListingInformation;
struct IProductListing;
struct IProductListingWithConsumables;
struct IUnfulfilledConsumable;
struct IProductPurchaseDisplayProperties;
struct IProductPurchaseDisplayPropertiesFactory;
struct LicenseInformation;
struct ListingInformation;
struct PurchaseResults;
struct ProductPurchaseDisplayProperties;
struct UnfulfilledConsumable;
struct ProductLicense;
struct ProductListing;
struct CurrentApp;
struct CurrentAppSimulator;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

struct IHtmlUtilities;
struct HtmlUtilities;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

struct IJsonValue;
struct IJsonValueStatics;
struct IJsonObject;
struct IJsonObjectWithDefaultValues;
struct IJsonObjectStatics;
struct IJsonArray;
struct IJsonArrayStatics;
struct IJsonErrorStatics2;
struct JsonArray;
struct JsonObject;
struct JsonValue;
struct JsonError;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

struct IPdfPageDimensions;
struct IPdfPageRenderOptions;
struct IPdfPage;
struct IPdfDocument;
struct IPdfDocumentStatics;
struct PdfPageRenderOptions;
struct PdfPageDimensions;
struct PdfPage;
struct PdfDocument;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

struct IWordSegmentsTokenizingHandler;
struct ISelectableWordSegmentsTokenizingHandler;
struct ISemanticTextQueryFactory;
struct ISemanticTextQuery;
struct IUnicodeCharactersStatics;
struct IAlternateWordForm;
struct ISelectableWordSegment;
struct IWordSegment;
struct IWordsSegmenter;
struct IWordsSegmenterFactory;
struct ISelectableWordsSegmenter;
struct ISelectableWordsSegmenterFactory;
struct SemanticTextQuery;
struct UnicodeCharacters;
struct AlternateWordForm;
struct WordSegment;
struct WordsSegmenter;
struct SelectableWordSegment;
struct SelectableWordsSegmenter;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

struct IXmlNodeSelector;
struct IXmlNodeSerializer;
struct IXmlNode;
struct IXmlDomImplementation;
struct IXmlDocumentType;
struct IXmlAttribute;
struct IXmlDocumentFragment;
struct IXmlElement;
struct IDtdNotation;
struct IDtdEntity;
struct IXmlEntityReference;
struct IXmlProcessingInstruction;
struct IXmlCharacterData;
struct IXmlComment;
struct IXmlText;
struct IXmlCDataSection;
struct IXmlDocument;
struct IXmlNamedNodeMap;
struct IXmlNodeList;
struct IXmlLoadSettings;
struct IXmlDocumentIO;
struct IXmlDocumentStatics;
struct XmlNodeList;
struct XmlNamedNodeMap;
struct XmlDocument;
struct XmlAttribute;
struct XmlDocumentType;
struct XmlDomImplementation;
struct XmlElement;
struct XmlDocumentFragment;
struct XmlText;
struct XmlComment;
struct XmlProcessingInstruction;
struct XmlEntityReference;
struct XmlCDataSection;
struct XmlLoadSettings;
struct DtdNotation;
struct DtdEntity;

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

struct IXsltProcessor;
struct IXsltProcessorFactory;
struct XsltProcessor;

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

struct IDeviceUseDetails;
struct IDeviceServicingDetails;
struct DeviceUseDetails;
struct DeviceServicingDetails;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

struct IKnownDeviceTypesStatics;
struct IIOControlCode;
struct IIOControlCodeFactory;
struct ICustomDeviceStatics;
struct ICustomDevice;
struct KnownDeviceTypes;
struct IOControlCode;
struct CustomDevice;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

struct IEnclosureLocation;
struct IDeviceInformationUpdate;
struct IDeviceWatcher;
struct IDeviceInformationStatics;
struct IDeviceInformation;
struct IDeviceAccessChangedEventArgs;
struct IDeviceAccessInformation;
struct IDeviceAccessInformationStatics;
struct DeviceThumbnail;
struct EnclosureLocation;
struct DeviceInformationUpdate;
struct DeviceInformationCollection;
struct DeviceWatcher;
struct DeviceInformation;
struct DeviceAccessChangedEventArgs;
struct DeviceAccessInformation;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

struct IPnpObjectUpdate;
struct IPnpObjectWatcher;
struct IPnpObjectStatics;
struct IPnpObject;
struct PnpObjectUpdate;
struct PnpObjectCollection;
struct PnpObjectWatcher;
struct PnpObject;

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

struct IGeoshape;
struct IGeopoint;
struct IGeopointFactory;
struct IGeocoordinateSatelliteData;
struct IGeocoordinate;
struct IGeocoordinateWithPositionData;
struct IGeocoordinateWithPoint;
struct ICivicAddress;
struct IGeoposition;
struct IPositionChangedEventArgs;
struct IStatusChangedEventArgs;
struct IGeolocator;
struct IGeolocatorWithScalarAccuracy;
struct IGeocircle;
struct IGeocircleFactory;
struct Geopoint;
struct GeocoordinateSatelliteData;
struct Geocoordinate;
struct CivicAddress;
struct Geoposition;
struct PositionChangedEventArgs;
struct StatusChangedEventArgs;
struct Geolocator;
struct Geocircle;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

struct IGeofenceFactory;
struct IGeofence;
struct IGeofenceStateChangeReport;
struct IGeofenceMonitorStatics;
struct IGeofenceMonitor;
struct Geofence;
struct GeofenceMonitor;
struct GeofenceStateChangeReport;

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

struct IHidDeviceStatics;
struct IHidBooleanControlDescription;
struct IHidNumericControlDescription;
struct IHidCollection;
struct IHidInputReport;
struct IHidOutputReport;
struct IHidFeatureReport;
struct IHidInputReportReceivedEventArgs;
struct IHidBooleanControl;
struct IHidNumericControl;
struct IHidDevice;
struct HidDevice;
struct HidInputReport;
struct HidFeatureReport;
struct HidOutputReport;
struct HidBooleanControlDescription;
struct HidNumericControlDescription;
struct HidInputReportReceivedEventArgs;
struct HidCollection;
struct HidBooleanControl;
struct HidNumericControl;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

struct IMouseCapabilities;
struct IKeyboardCapabilities;
struct ITouchCapabilities;
struct IPointerDeviceStatics;
struct IPointerDevice;
struct IMouseEventArgs;
struct IMouseDevice;
struct IMouseDeviceStatics;
struct PointerDevice;
struct MouseDevice;
struct MouseEventArgs;
struct MouseCapabilities;
struct KeyboardCapabilities;
struct TouchCapabilities;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

struct IUnifiedPosErrorData;
struct IBarcodeScannerStatusUpdatedEventArgs;
struct IBarcodeSymbologiesStatics;
struct IBarcodeScannerDataReceivedEventArgs;
struct IBarcodeScannerReport;
struct IBarcodeScannerErrorOccurredEventArgs;
struct IBarcodeScannerImagePreviewReceivedEventArgs;
struct IBarcodeScannerCapabilities;
struct IBarcodeScannerStatics;
struct IBarcodeScanner;
struct IMagneticStripeReaderEncryptionAlgorithmsStatics;
struct IMagneticStripeReaderCardTypesStatics;
struct IMagneticStripeReaderTrackData;
struct IMagneticStripeReaderReport;
struct IMagneticStripeReaderBankCardDataReceivedEventArgs;
struct IMagneticStripeReaderAamvaCardDataReceivedEventArgs;
struct IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
struct IMagneticStripeReaderErrorOccurredEventArgs;
struct IMagneticStripeReaderStatusUpdatedEventArgs;
struct IMagneticStripeReaderCapabilities;
struct IMagneticStripeReaderStatics;
struct IMagneticStripeReader;
struct IClaimedBarcodeScanner;
struct IClaimedMagneticStripeReader;
struct UnifiedPosErrorData;
struct BarcodeScannerStatusUpdatedEventArgs;
struct BarcodeSymbologies;
struct BarcodeScannerReport;
struct BarcodeScannerDataReceivedEventArgs;
struct BarcodeScannerErrorOccurredEventArgs;
struct BarcodeScannerImagePreviewReceivedEventArgs;
struct BarcodeScannerCapabilities;
struct BarcodeScanner;
struct ClaimedBarcodeScanner;
struct MagneticStripeReaderEncryptionAlgorithms;
struct MagneticStripeReaderCardTypes;
struct MagneticStripeReaderTrackData;
struct MagneticStripeReaderReport;
struct MagneticStripeReaderBankCardDataReceivedEventArgs;
struct MagneticStripeReaderAamvaCardDataReceivedEventArgs;
struct MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
struct MagneticStripeReaderErrorOccurredEventArgs;
struct MagneticStripeReaderStatusUpdatedEventArgs;
struct MagneticStripeReaderCapabilities;
struct ClaimedMagneticStripeReader;
struct MagneticStripeReader;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

struct IStorageDeviceStatics;
struct IServiceDeviceStatics;
struct StorageDevice;
struct ServiceDevice;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

struct IPrintTaskConfigurationSaveRequestedDeferral;
struct IPrintTaskConfigurationSaveRequest;
struct IPrintTaskConfigurationSaveRequestedEventArgs;
struct IPrintTaskConfiguration;
struct IPrintNotificationEventDetails;
struct IPrintExtensionContextStatic;
struct PrintTaskConfigurationSaveRequestedDeferral;
struct PrintTaskConfigurationSaveRequest;
struct PrintTaskConfigurationSaveRequestedEventArgs;
struct PrintTaskConfiguration;
struct PrintNotificationEventDetails;
struct PrintExtensionContext;

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

struct IAccelerometerStatics;
struct IAccelerometer;
struct IAccelerometerReading;
struct IAccelerometerReadingChangedEventArgs;
struct IAccelerometerShakenEventArgs;
struct IInclinometerStatics;
struct IInclinometer;
struct IInclinometerReading;
struct IInclinometerReadingYawAccuracy;
struct IInclinometerReadingChangedEventArgs;
struct IGyrometerStatics;
struct IGyrometer;
struct IGyrometerReading;
struct IGyrometerReadingChangedEventArgs;
struct ICompassStatics;
struct ICompass;
struct ICompassReading;
struct ICompassReadingHeadingAccuracy;
struct ICompassReadingChangedEventArgs;
struct ILightSensorStatics;
struct ILightSensor;
struct ILightSensorReading;
struct ILightSensorReadingChangedEventArgs;
struct ISensorRotationMatrix;
struct ISensorQuaternion;
struct IOrientationSensorStatics;
struct IOrientationSensor;
struct IOrientationSensorReading;
struct IOrientationSensorReadingYawAccuracy;
struct IOrientationSensorReadingChangedEventArgs;
struct ISimpleOrientationSensorStatics;
struct ISimpleOrientationSensor;
struct ISimpleOrientationSensorOrientationChangedEventArgs;
struct Accelerometer;
struct AccelerometerReading;
struct AccelerometerReadingChangedEventArgs;
struct AccelerometerShakenEventArgs;
struct Inclinometer;
struct InclinometerReading;
struct InclinometerReadingChangedEventArgs;
struct Gyrometer;
struct GyrometerReading;
struct GyrometerReadingChangedEventArgs;
struct Compass;
struct CompassReading;
struct CompassReadingChangedEventArgs;
struct LightSensor;
struct LightSensorReading;
struct LightSensorReadingChangedEventArgs;
struct SensorRotationMatrix;
struct SensorQuaternion;
struct OrientationSensor;
struct OrientationSensorReading;
struct OrientationSensorReadingChangedEventArgs;
struct SimpleOrientationSensor;
struct SimpleOrientationSensorOrientationChangedEventArgs;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

struct ISmartCardPinResetHandler;
struct ISmartCardReaderStatics;
struct ISmartCardReader;
struct ICardAddedEventArgs;
struct ICardRemovedEventArgs;
struct ISmartCard;
struct ISmartCardProvisioningStatics;
struct ISmartCardProvisioning;
struct ISmartCardPinResetRequest;
struct ISmartCardPinResetDeferral;
struct ISmartCardPinPolicy;
struct ISmartCardChallengeContext;
struct SmartCardReader;
struct SmartCard;
struct CardAddedEventArgs;
struct CardRemovedEventArgs;
struct SmartCardProvisioning;
struct SmartCardPinPolicy;
struct SmartCardChallengeContext;
struct SmartCardPinResetRequest;
struct SmartCardPinResetDeferral;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

struct ISmsMessageReceivedEventHandler;
struct ISmsDeviceStatusChangedEventHandler;
struct ISmsMessage;
struct ISmsBinaryMessage;
struct ISmsTextMessage;
struct ISmsTextMessageStatics;
struct ISmsDeviceMessageStore;
struct ISmsMessageReceivedEventArgs;
struct ISmsDeviceStatics;
struct ISmsDeviceStatics2;
struct ISmsDevice;
struct ISmsReceivedEventDetails;
struct ISmsReceivedEventDetails2;
struct SmsBinaryMessage;
struct SmsTextMessage;
struct DeleteSmsMessageOperation;
struct DeleteSmsMessagesOperation;
struct GetSmsMessageOperation;
struct GetSmsMessagesOperation;
struct SmsDeviceMessageStore;
struct SendSmsMessageOperation;
struct SmsMessageReceivedEventArgs;
struct SmsDevice;
struct GetSmsDeviceOperation;
struct SmsReceivedEventDetails;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

struct IUsbControlRequestType;
struct IUsbSetupPacketFactory;
struct IUsbSetupPacket;
struct IUsbDeviceClass;
struct IUsbDeviceClassesStatics;
struct IUsbDeviceClasses;
struct IUsbDeviceStatics;
struct IUsbDeviceDescriptor;
struct IUsbConfigurationDescriptor;
struct IUsbConfigurationDescriptorStatics;
struct IUsbInterfaceDescriptor;
struct IUsbInterfaceDescriptorStatics;
struct IUsbEndpointDescriptor;
struct IUsbEndpointDescriptorStatics;
struct IUsbDescriptor;
struct IUsbInterruptInEventArgs;
struct IUsbBulkInPipe;
struct IUsbInterruptInPipe;
struct IUsbBulkOutPipe;
struct IUsbInterruptOutPipe;
struct IUsbConfiguration;
struct IUsbInterface;
struct IUsbInterfaceSetting;
struct IUsbBulkInEndpointDescriptor;
struct IUsbInterruptInEndpointDescriptor;
struct IUsbBulkOutEndpointDescriptor;
struct IUsbInterruptOutEndpointDescriptor;
struct IUsbDevice;
struct UsbControlRequestType;
struct UsbSetupPacket;
struct UsbDeviceClass;
struct UsbDeviceClasses;
struct UsbDevice;
struct UsbInterface;
struct UsbDeviceDescriptor;
struct UsbConfiguration;
struct UsbDescriptor;
struct UsbConfigurationDescriptor;
struct UsbInterfaceDescriptor;
struct UsbBulkInEndpointDescriptor;
struct UsbInterruptInEndpointDescriptor;
struct UsbBulkOutEndpointDescriptor;
struct UsbInterruptOutEndpointDescriptor;
struct UsbEndpointDescriptor;
struct UsbInterruptInEventArgs;
struct UsbInterruptInPipe;
struct UsbBulkInPipe;
struct UsbBulkOutPipe;
struct UsbInterruptOutPipe;
struct UsbInterfaceSetting;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

struct IWiFiDirectDeviceStatics;
struct IWiFiDirectDevice;
struct WiFiDirectDevice;

}}}}

namespace Modern { namespace Windows { namespace Foundation {

struct IAsyncActionCompletedHandler;
struct IUriRuntimeClass;
struct IUriRuntimeClassWithAbsoluteCanonicalUri;
struct IUriEscapeStatics;
struct IUriRuntimeClassFactory;
struct IWwwFormUrlDecoderEntry;
struct IWwwFormUrlDecoderRuntimeClass;
struct IWwwFormUrlDecoderRuntimeClassFactory;
struct IGetActivationFactory;
struct IClosable;
struct IPropertyValue;
struct IPropertyValueStatics;
struct IStringable;
struct IAsyncAction;
struct WwwFormUrlDecoder;
struct Uri;
struct WwwFormUrlDecoderEntry;
struct PropertyValue;

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

struct IPropertySet;
struct PropertySet;

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

struct ITracingStatusChangedEventArgs;
struct IAsyncCausalityTracerStatics;
struct IErrorReportingSettings;
struct ILoggingChannel;
struct ILoggingChannelFactory;
struct ILoggingActivity;
struct ILoggingActivityFactory;
struct ILoggingSession;
struct ILoggingSessionFactory;
struct ILogFileGeneratedEventArgs;
struct IFileLoggingSession;
struct IFileLoggingSessionFactory;
struct TracingStatusChangedEventArgs;
struct AsyncCausalityTracer;
struct RuntimeBrokerErrorSettings;
struct LoggingChannel;
struct LoggingActivity;
struct LoggingSession;
struct LogFileGeneratedEventArgs;
struct FileLoggingSession;

}}}}

namespace Modern { namespace Windows { namespace Globalization {

struct IJapanesePhoneticAnalyzerStatics;
struct IJapanesePhoneme;
struct ICalendarIdentifiersStatics;
struct IClockIdentifiersStatics;
struct INumeralSystemIdentifiersStatics;
struct ICurrencyIdentifiersStatics;
struct IGeographicRegion;
struct IGeographicRegionFactory;
struct IGeographicRegionStatics;
struct ILanguage;
struct ILanguageExtensionSubtags;
struct ILanguageFactory;
struct ILanguageStatics;
struct ICalendar;
struct ICalendarFactory2;
struct ITimeZoneOnCalendar;
struct ICalendarFactory;
struct IApplicationLanguagesStatics;
struct JapanesePhoneme;
struct JapanesePhoneticAnalyzer;
struct CalendarIdentifiers;
struct ClockIdentifiers;
struct NumeralSystemIdentifiers;
struct CurrencyIdentifiers;
struct GeographicRegion;
struct Language;
struct Calendar;
struct ApplicationLanguages;

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

struct ICharacterGrouping;
struct ICharacterGroupings;
struct CharacterGrouping;
struct CharacterGroupings;

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

struct IDateTimeFormatter;
struct IDateTimeFormatterFactory;
struct IDateTimeFormatterStatics;
struct IDateTimeFormatter2;
struct DateTimeFormatter;

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

struct ILanguageFontGroup;
struct ILanguageFontGroupFactory;
struct ILanguageFont;
struct LanguageFont;
struct LanguageFontGroup;

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

struct INumberRounder;
struct ISignificantDigitsNumberRounder;
struct IIncrementNumberRounder;
struct INumberFormatter;
struct INumberFormatter2;
struct INumberParser;
struct INumberFormatterOptions;
struct ISignificantDigitsOption;
struct INumberRounderOption;
struct ISignedZeroOption;
struct IDecimalFormatterFactory;
struct IPercentFormatterFactory;
struct IPermilleFormatterFactory;
struct ICurrencyFormatterFactory;
struct ICurrencyFormatter;
struct ICurrencyFormatter2;
struct INumeralSystemTranslatorFactory;
struct INumeralSystemTranslator;
struct SignificantDigitsNumberRounder;
struct IncrementNumberRounder;
struct DecimalFormatter;
struct PercentFormatter;
struct PermilleFormatter;
struct CurrencyFormatter;
struct NumeralSystemTranslator;

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

struct IDisplayInformationStatics;
struct IDisplayInformation;
struct DisplayInformation;

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

struct IBitmapTransform;
struct IBitmapTypedValue;
struct IBitmapTypedValueFactory;
struct IBitmapPropertiesView;
struct IBitmapProperties;
struct IPixelDataProvider;
struct IBitmapFrame;
struct IBitmapCodecInformation;
struct IBitmapDecoderStatics;
struct IBitmapDecoder;
struct IBitmapEncoderStatics;
struct IBitmapEncoder;
struct BitmapTransform;
struct BitmapTypedValue;
struct BitmapPropertySet;
struct BitmapPropertiesView;
struct BitmapProperties;
struct PixelDataProvider;
struct ImageStream;
struct BitmapFrame;
struct BitmapCodecInformation;
struct BitmapDecoder;
struct BitmapEncoder;

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

struct IPrintTaskSourceRequestedHandler;
struct IPrintTaskOptionsCoreProperties;
struct IPrintTaskOptionsCoreUIConfiguration;
struct IPrintTaskOptionsCore;
struct IStandardPrintTaskOptionsStatic;
struct IPrintDocumentSource;
struct IPrintTaskProgressingEventArgs;
struct IPrintTaskCompletedEventArgs;
struct IPrintTask;
struct IPrintTaskTargetDeviceSupport;
struct IPrintTaskSourceRequestedDeferral;
struct IPrintTaskSourceRequestedArgs;
struct IPrintTaskRequestedDeferral;
struct IPrintTaskRequest;
struct IPrintTaskRequestedEventArgs;
struct IPrintManagerStatic;
struct IPrintManager;
struct PrintTaskOptions;
struct StandardPrintTaskOptions;
struct PrintTaskProgressingEventArgs;
struct PrintTaskCompletedEventArgs;
struct PrintTask;
struct PrintTaskSourceRequestedDeferral;
struct PrintTaskSourceRequestedArgs;
struct PrintTaskRequestedDeferral;
struct PrintTaskRequest;
struct PrintTaskRequestedEventArgs;
struct PrintManager;

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

struct IPrintOptionDetails;
struct IPrintNumberOptionDetails;
struct IPrintTextOptionDetails;
struct IPrintItemListOptionDetails;
struct IPrintCustomOptionDetails;
struct IPrintCustomTextOptionDetails;
struct IPrintCustomItemDetails;
struct IPrintCustomItemListOptionDetails;
struct IPrintTaskOptionChangedEventArgs;
struct IPrintTaskOptionDetails;
struct IPrintTaskOptionDetailsStatic;
struct PrintCopiesOptionDetails;
struct PrintMediaSizeOptionDetails;
struct PrintMediaTypeOptionDetails;
struct PrintOrientationOptionDetails;
struct PrintQualityOptionDetails;
struct PrintColorModeOptionDetails;
struct PrintDuplexOptionDetails;
struct PrintCollationOptionDetails;
struct PrintStapleOptionDetails;
struct PrintHolePunchOptionDetails;
struct PrintBindingOptionDetails;
struct PrintCustomTextOptionDetails;
struct PrintCustomItemDetails;
struct PrintCustomItemListOptionDetails;
struct PrintTaskOptionChangedEventArgs;
struct PrintTaskOptionDetails;

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

struct IApplicationDataManagerStatics;
struct IApplicationDataManager;
struct ApplicationDataManager;

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

struct IDeploymentResult;
struct IPackageUserInformation;
struct IPackageManager;
struct IPackageManager2;
struct DeploymentResult;
struct PackageUserInformation;
struct PackageManager;

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

struct IWorkplaceSettingsStatics;
struct WorkplaceSettings;

}}}}

namespace Modern { namespace Windows { namespace Media {

struct IMediaMarker;
struct IMediaMarkers;
struct IMediaMarkerTypesStatics;
struct IMusicDisplayProperties;
struct IVideoDisplayProperties;
struct IImageDisplayProperties;
struct ISystemMediaTransportControlsDisplayUpdater;
struct ISystemMediaTransportControlsButtonPressedEventArgs;
struct ISystemMediaTransportControlsPropertyChangedEventArgs;
struct ISystemMediaTransportControls;
struct ISystemMediaTransportControlsStatics;
struct IMediaExtension;
struct IMediaExtensionManager;
struct IVideoEffectsStatics;
struct MediaMarkerTypes;
struct MusicDisplayProperties;
struct VideoDisplayProperties;
struct ImageDisplayProperties;
struct SystemMediaTransportControlsDisplayUpdater;
struct SystemMediaTransportControlsButtonPressedEventArgs;
struct SystemMediaTransportControlsPropertyChangedEventArgs;
struct SystemMediaTransportControls;
struct MediaExtensionManager;
struct VideoEffects;

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

struct IMediaCaptureFailedEventHandler;
struct IRecordLimitationExceededEventHandler;
struct ICameraCaptureUIPhotoCaptureSettings;
struct ICameraCaptureUIVideoCaptureSettings;
struct ICameraCaptureUI;
struct ICameraOptionsUIStatics;
struct IMediaCaptureFailedEventArgs;
struct IMediaCaptureInitializationSettings;
struct IMediaCaptureInitializationSettings2;
struct IMediaCapture;
struct IMediaCapture2;
struct ILowLagPhotoCapture;
struct ILowLagMediaRecording;
struct ILowLagPhotoSequenceCapture;
struct IPhotoCapturedEventArgs;
struct ICapturedPhoto;
struct ICapturedFrame;
struct IMediaCaptureVideoPreview;
struct IMediaCaptureSettings;
struct IMediaCaptureSettings2;
struct CameraCaptureUIPhotoCaptureSettings;
struct CameraCaptureUIVideoCaptureSettings;
struct CameraCaptureUI;
struct CameraOptionsUI;
struct MediaCaptureFailedEventArgs;
struct MediaCapture;
struct MediaCaptureInitializationSettings;
struct MediaCaptureSettings;
struct LowLagMediaRecording;
struct LowLagPhotoCapture;
struct LowLagPhotoSequenceCapture;
struct CapturedPhoto;
struct PhotoCapturedEventArgs;
struct CapturedFrame;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

struct IRatedContentDescription;
struct IRatedContentDescriptionFactory;
struct IContentRestrictionsBrowsePolicy;
struct IRatedContentRestrictions;
struct IRatedContentRestrictionsFactory;
struct RatedContentDescription;
struct ContentRestrictionsBrowsePolicy;
struct RatedContentRestrictions;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

struct IMediaStreamDescriptor;
struct IAudioStreamDescriptor;
struct IAudioStreamDescriptorFactory;
struct IVideoStreamDescriptor;
struct IVideoStreamDescriptorFactory;
struct IMediaSource;
struct IMediaStreamSource;
struct IMediaStreamSourceFactory;
struct IMediaStreamSample;
struct IMediaStreamSampleStatics;
struct IMediaStreamSampleProtectionProperties;
struct IMediaStreamSourceClosedRequest;
struct IMediaStreamSourceClosedEventArgs;
struct IMediaStreamSourceStartingRequestDeferral;
struct IMediaStreamSourceStartingRequest;
struct IMediaStreamSourceStartingEventArgs;
struct IMediaStreamSourceSampleRequestDeferral;
struct IMediaStreamSourceSampleRequest;
struct IMediaStreamSourceSampleRequestedEventArgs;
struct IMediaStreamSourceSwitchStreamsRequestDeferral;
struct IMediaStreamSourceSwitchStreamsRequest;
struct IMediaStreamSourceSwitchStreamsRequestedEventArgs;
struct AudioStreamDescriptor;
struct VideoStreamDescriptor;
struct MediaStreamSource;
struct MediaStreamSourceClosedEventArgs;
struct MediaStreamSourceStartingEventArgs;
struct MediaStreamSourceSampleRequestedEventArgs;
struct MediaStreamSourceSwitchStreamsRequestedEventArgs;
struct MediaStreamSamplePropertySet;
struct MediaStreamSample;
struct MediaStreamSampleProtectionProperties;
struct MediaStreamSourceClosedRequest;
struct MediaStreamSourceStartingRequestDeferral;
struct MediaStreamSourceStartingRequest;
struct MediaStreamSourceSampleRequestDeferral;
struct MediaStreamSourceSampleRequest;
struct MediaStreamSourceSwitchStreamsRequestDeferral;
struct MediaStreamSourceSwitchStreamsRequest;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

struct ICallControlEventHandler;
struct IDialRequestedEventHandler;
struct IRedialRequestedEventHandler;
struct IKeypadPressedEventHandler;
struct IDialRequestedEventArgs;
struct IRedialRequestedEventArgs;
struct IKeypadPressedEventArgs;
struct ICallControl;
struct ICallControlStatics;
struct IDefaultAudioDeviceChangedEventArgs;
struct IMediaDeviceStatics;
struct ISceneModeControl;
struct ITorchControl;
struct IFlashControl;
struct IExposureCompensationControl;
struct IIsoSpeedControl;
struct IWhiteBalanceControl;
struct IExposureControl;
struct IFocusControl;
struct IRegionOfInterest;
struct IRegionsOfInterestControl;
struct IMediaDeviceController;
struct IAudioDeviceController;
struct IVideoDeviceController;
struct IAdvancedVideoCaptureDeviceController2;
struct IMediaDeviceControl;
struct IMediaDeviceControlCapabilities;
struct IAdvancedVideoCaptureDeviceController;
struct ILowLagPhotoSequenceControl;
struct ILowLagPhotoControl;
struct DialRequestedEventArgs;
struct RedialRequestedEventArgs;
struct KeypadPressedEventArgs;
struct CallControl;
struct DefaultAudioCaptureDeviceChangedEventArgs;
struct DefaultAudioRenderDeviceChangedEventArgs;
struct MediaDevice;
struct AudioDeviceController;
struct VideoDeviceController;
struct SceneModeControl;
struct TorchControl;
struct FlashControl;
struct ExposureCompensationControl;
struct IsoSpeedControl;
struct WhiteBalanceControl;
struct ExposureControl;
struct FocusControl;
struct RegionOfInterest;
struct RegionsOfInterestControl;
struct MediaDeviceControl;
struct LowLagPhotoSequenceControl;
struct LowLagPhotoControl;
struct MediaDeviceControlCapabilities;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

struct IAudioEffect;
struct IAudioEffectsManagerStatics;
struct IAudioRenderEffectsManager;
struct IAudioCaptureEffectsManager;
struct AudioEffect;
struct AudioRenderEffectsManager;
struct AudioCaptureEffectsManager;
struct AudioEffectsManager;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

struct IMediaRatio;
struct IMediaEncodingProperties;
struct IAudioEncodingProperties;
struct IAudioEncodingPropertiesWithFormatUserData;
struct IAudioEncodingPropertiesStatics;
struct IVideoEncodingProperties;
struct IMediaEncodingSubtypesStatics;
struct IH264ProfileIdsStatics;
struct IMpeg2ProfileIdsStatics;
struct IVideoEncodingProperties2;
struct IVideoEncodingPropertiesStatics;
struct IImageEncodingProperties;
struct IImageEncodingPropertiesStatics;
struct IImageEncodingPropertiesStatics2;
struct IContainerEncodingProperties;
struct IMediaEncodingProfileStatics;
struct IMediaEncodingProfileStatics2;
struct IMediaEncodingProfile;
struct MediaRatio;
struct MediaPropertySet;
struct AudioEncodingProperties;
struct MediaEncodingSubtypes;
struct H264ProfileIds;
struct Mpeg2ProfileIds;
struct VideoEncodingProperties;
struct ImageEncodingProperties;
struct ContainerEncodingProperties;
struct MediaEncodingProfile;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

struct ISourceChangeRequestedEventArgs;
struct IPlaybackRateChangeRequestedEventArgs;
struct ICurrentTimeChangeRequestedEventArgs;
struct IMuteChangeRequestedEventArgs;
struct IVolumeChangeRequestedEventArgs;
struct IPlayToReceiver;
struct IPlayToSource;
struct IPlayToSourceWithPreferredSourceUri;
struct IPlayToConnectionStateChangedEventArgs;
struct IPlayToConnectionTransferredEventArgs;
struct IPlayToConnectionErrorEventArgs;
struct IPlayToConnection;
struct IPlayToSourceSelectedEventArgs;
struct IPlayToSourceDeferral;
struct IPlayToSourceRequest;
struct IPlayToSourceRequestedEventArgs;
struct IPlayToManager;
struct IPlayToManagerStatics;
struct SourceChangeRequestedEventArgs;
struct PlaybackRateChangeRequestedEventArgs;
struct CurrentTimeChangeRequestedEventArgs;
struct MuteChangeRequestedEventArgs;
struct VolumeChangeRequestedEventArgs;
struct PlayToReceiver;
struct PlayToConnection;
struct PlayToSource;
struct PlayToConnectionStateChangedEventArgs;
struct PlayToConnectionTransferredEventArgs;
struct PlayToConnectionErrorEventArgs;
struct PlayToSourceSelectedEventArgs;
struct PlayToSourceDeferral;
struct PlayToSourceRequest;
struct PlayToSourceRequestedEventArgs;
struct PlayToManager;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

struct IPlaylist;
struct IPlaylistStatics;
struct Playlist;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

struct IServiceRequestedEventHandler;
struct IRebootNeededEventHandler;
struct IComponentLoadFailedEventHandler;
struct IMediaProtectionManager;
struct IMediaProtectionServiceCompletion;
struct IServiceRequestedEventArgs;
struct IMediaProtectionServiceRequest;
struct IComponentLoadFailedEventArgs;
struct IRevocationAndRenewalInformation;
struct IRevocationAndRenewalItem;
struct IComponentRenewalStatics;
struct MediaProtectionManager;
struct ServiceRequestedEventArgs;
struct ComponentLoadFailedEventArgs;
struct MediaProtectionServiceCompletion;
struct RevocationAndRenewalInformation;
struct RevocationAndRenewalItem;
struct ComponentRenewal;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

struct IVoiceInformation;
struct IInstalledVoicesStatic;
struct ISpeechSynthesisStream;
struct ISpeechSynthesizer;
struct VoiceInformation;
struct SpeechSynthesisStream;
struct SpeechSynthesizer;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

struct IDeviceControllerFinderHandler;
struct IConnectionStatusHandler;
struct IDeviceController;
struct IBasicDevice;
struct IActiveBasicDevice;
struct IDeviceIcon;
struct IActiveBasicDeviceStatics;
struct IDevicePair;
struct ITransportParametersUpdateHandler;
struct IRenderingParametersUpdateHandler;
struct IMediaRenderer;
struct IMediaRendererActionInformation;
struct ITransportParameters;
struct IMediaRendererFactory;
struct IStreamSelectorStatics;
struct BasicDevice;
struct ActiveBasicDevice;
struct DevicePair;
struct DeviceController;
struct MediaRenderer;
struct CreateMediaRendererOperation;
struct StreamSelector;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

struct IMediaTranscoder2;
struct IMediaTranscoder;
struct IPrepareTranscodeResult;
struct PrepareTranscodeResult;
struct MediaTranscoder;

}}}}

namespace Modern { namespace Windows { namespace Networking {

struct IHostNameStatics;
struct IHostName;
struct IHostNameFactory;
struct IEndpointPair;
struct IEndpointPairFactory;
struct EndpointPair;
struct HostName;

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

struct IBackgroundTransferBase;
struct IUnconstrainedTransferRequestResult;
struct IBackgroundDownloaderUserConsent;
struct IBackgroundUploaderUserConsent;
struct IBackgroundDownloader;
struct IBackgroundDownloader2;
struct IBackgroundUploader;
struct IBackgroundUploader2;
struct IBackgroundTransferOperation;
struct IBackgroundTransferOperationPriority;
struct IDownloadOperation;
struct IDownloadOperation2;
struct IUploadOperation;
struct IUploadOperation2;
struct IBackgroundDownloaderStaticMethods;
struct IBackgroundDownloaderStaticMethods2;
struct IBackgroundUploaderStaticMethods;
struct IBackgroundUploaderStaticMethods2;
struct IResponseInformation;
struct IBackgroundTransferErrorStaticMethods;
struct IBackgroundTransferContentPart;
struct IBackgroundTransferContentPartFactory;
struct IBackgroundTransferGroup;
struct IBackgroundTransferGroupStatics;
struct IContentPrefetcherTime;
struct IContentPrefetcher;
struct DownloadOperation;
struct UnconstrainedTransferRequestResult;
struct UploadOperation;
struct BackgroundTransferGroup;
struct BackgroundTransferContentPart;
struct ResponseInformation;
struct BackgroundDownloader;
struct BackgroundUploader;
struct BackgroundTransferError;
struct ContentPrefetcher;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

struct INetworkStatusChangedEventHandler;
struct IDataPlanUsage;
struct IDataPlanStatus;
struct IConnectionCost;
struct INetworkSecuritySettings;
struct IConnectionProfile;
struct IWwanConnectionProfileDetails;
struct IWlanConnectionProfileDetails;
struct IConnectivityInterval;
struct INetworkUsage;
struct IConnectionProfile2;
struct ILanIdentifierData;
struct ILanIdentifier;
struct INetworkInformationStatics;
struct IConnectionProfileFilter;
struct INetworkInformationStatics2;
struct INetworkItem;
struct INetworkAdapter;
struct IIPInformation;
struct IProxyConfiguration;
struct IConnectionSession;
struct IRoutePolicy;
struct IRoutePolicyFactory;
struct ICellularApnContext;
struct IConnectivityManagerStatics;
struct INetworkStateChangeEventDetails;
struct IPInformation;
struct DataPlanUsage;
struct ConnectionCost;
struct DataPlanStatus;
struct NetworkAdapter;
struct NetworkSecuritySettings;
struct WwanConnectionProfileDetails;
struct WlanConnectionProfileDetails;
struct NetworkUsage;
struct ConnectivityInterval;
struct LanIdentifierData;
struct ConnectionProfile;
struct LanIdentifier;
struct ProxyConfiguration;
struct ConnectionProfileFilter;
struct NetworkItem;
struct RoutePolicy;
struct CellularApnContext;
struct ConnectionSession;
struct NetworkInformation;
struct ConnectivityManager;
struct NetworkStateChangeEventDetails;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

struct IMobileBroadbandAccountStatics;
struct IMobileBroadbandAccount;
struct IMobileBroadbandAccount2;
struct IMobileBroadbandDeviceInformation;
struct IMobileBroadbandNetwork;
struct INetworkOperatorNotificationEventDetails;
struct INetworkOperatorTetheringEntitlementCheck;
struct INetworkOperatorTetheringAccessPointConfiguration;
struct INetworkOperatorTetheringOperationResult;
struct INetworkOperatorTetheringManagerStatics;
struct INetworkOperatorTetheringManager;
struct IMobileBroadbandAccountEventArgs;
struct IMobileBroadbandAccountUpdatedEventArgs;
struct IMobileBroadbandAccountWatcher;
struct IHotspotAuthenticationEventDetails;
struct IHotspotAuthenticationContextStatics;
struct IHotspotAuthenticationContext;
struct IHotspotCredentialsAuthenticationResult;
struct IHotspotAuthenticationContext2;
struct IProvisionFromXmlDocumentResults;
struct IProvisionedProfile;
struct IProvisioningAgent;
struct IProvisioningAgentStaticMethods;
struct IUssdMessage;
struct IUssdMessageFactory;
struct IUssdReply;
struct IUssdSession;
struct IUssdSessionStatics;
struct MobileBroadbandAccount;
struct MobileBroadbandNetwork;
struct MobileBroadbandDeviceInformation;
struct NetworkOperatorNotificationEventDetails;
struct NetworkOperatorTetheringAccessPointConfiguration;
struct NetworkOperatorTetheringOperationResult;
struct NetworkOperatorTetheringManager;
struct MobileBroadbandAccountEventArgs;
struct MobileBroadbandAccountUpdatedEventArgs;
struct MobileBroadbandAccountWatcher;
struct HotspotAuthenticationEventDetails;
struct HotspotAuthenticationContext;
struct HotspotCredentialsAuthenticationResult;
struct ProvisionFromXmlDocumentResults;
struct ProvisionedProfile;
struct ProvisioningAgent;
struct UssdMessage;
struct UssdReply;
struct UssdSession;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

struct IMessageReceivedHandler;
struct IMessageTransmittedHandler;
struct IDeviceArrivedEventHandler;
struct IDeviceDepartedEventHandler;
struct IProximityMessage;
struct IProximityDevice;
struct IProximityDeviceStatics;
struct ITriggeredConnectionStateChangedEventArgs;
struct IPeerInformation;
struct IPeerInformation3;
struct IConnectionRequestedEventArgs;
struct IPeerWatcher;
struct IPeerFinderStatics;
struct IPeerFinderStatics2;
struct ProximityMessage;
struct ProximityDevice;
struct TriggeredConnectionStateChangedEventArgs;
struct PeerInformation;
struct ConnectionRequestedEventArgs;
struct PeerWatcher;
struct PeerFinder;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

struct IPushNotificationChannelManagerStatics;
struct IPushNotificationChannel;
struct IPushNotificationReceivedEventArgs;
struct IRawNotification;
struct PushNotificationChannel;
struct PushNotificationReceivedEventArgs;
struct RawNotification;
struct PushNotificationChannelManager;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

struct IControlChannelTrigger;
struct IControlChannelTriggerFactory;
struct IControlChannelTriggerEventDetails;
struct IControlChannelTriggerResetEventDetails;
struct IDatagramSocketMessageReceivedEventArgs;
struct IMessageWebSocketMessageReceivedEventArgs;
struct IWebSocketClosedEventArgs;
struct IDatagramSocketInformation;
struct IDatagramSocketControl;
struct IDatagramSocketControl2;
struct IDatagramSocketStatics;
struct IDatagramSocket;
struct IDatagramSocket2;
struct IStreamSocketInformation;
struct IStreamSocketInformation2;
struct IStreamSocketControl;
struct IStreamSocketControl2;
struct IStreamSocket;
struct IStreamSocket2;
struct IStreamSocketListenerControl;
struct IStreamSocketListenerInformation;
struct IStreamSocketListenerConnectionReceivedEventArgs;
struct IStreamSocketListener;
struct IStreamSocketListener2;
struct IWebSocketControl;
struct IWebSocketInformation;
struct IWebSocket;
struct IMessageWebSocketControl;
struct IMessageWebSocket;
struct IStreamWebSocketControl;
struct IStreamWebSocket;
struct ISocketErrorStatics;
struct IWebSocketErrorStatics;
struct ControlChannelTrigger;
struct DatagramSocketControl;
struct DatagramSocketInformation;
struct DatagramSocket;
struct DatagramSocketMessageReceivedEventArgs;
struct StreamSocketControl;
struct StreamSocketInformation;
struct StreamSocket;
struct StreamSocketListenerControl;
struct StreamSocketListenerInformation;
struct StreamSocketListener;
struct StreamSocketListenerConnectionReceivedEventArgs;
struct WebSocketClosedEventArgs;
struct MessageWebSocketControl;
struct MessageWebSocketInformation;
struct MessageWebSocket;
struct MessageWebSocketMessageReceivedEventArgs;
struct StreamWebSocketControl;
struct StreamWebSocketInformation;
struct StreamWebSocket;
struct WebSocketKeepAlive;
struct SocketError;
struct WebSocketError;

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

struct IOnlineIdServiceTicketRequest;
struct IOnlineIdServiceTicketRequestFactory;
struct IOnlineIdServiceTicket;
struct IUserIdentity;
struct IOnlineIdAuthenticator;
struct OnlineIdServiceTicketRequest;
struct OnlineIdServiceTicket;
struct UserAuthenticationOperation;
struct SignOutUserOperation;
struct UserIdentity;
struct OnlineIdAuthenticator;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

struct IWebAuthenticationResult;
struct IWebAuthenticationBrokerStatics;
struct WebAuthenticationResult;
struct WebAuthenticationBroker;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

struct IPasswordCredential;
struct ICredentialFactory;
struct IPasswordVault;
struct IWebAccountProviderFactory;
struct IWebAccountFactory;
struct IWebAccountProvider;
struct IWebAccount;
struct PasswordCredential;
struct PasswordVault;
struct PasswordCredentialPropertyStore;
struct WebAccountProvider;
struct WebAccount;

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

struct IUserConsentVerifierStatics;
struct ICredentialPickerOptions;
struct ICredentialPickerStatics;
struct ICredentialPickerResults;
struct UserConsentVerifier;
struct CredentialPickerOptions;
struct CredentialPickerResults;
struct CredentialPicker;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

struct ICryptographicBufferStatics;
struct CryptographicBuffer;

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

struct ICertificateRequestProperties;
struct ICertificateRequestProperties2;
struct ICertificateEnrollmentManagerStatics;
struct ICertificateEnrollmentManagerStatics2;
struct IKeyAttestationHelperStatics;
struct ICertificateStoresStatics;
struct IUserCertificateEnrollmentManager;
struct ICertificateStore;
struct IKeyAlgorithmNamesStatics;
struct IKeyStorageProviderNamesStatics;
struct IChainBuildingParameters;
struct IChainValidationParameters;
struct ICertificateQuery;
struct ICertificateChain;
struct ICertificate;
struct ICertificateFactory;
struct ICmsTimestampInfo;
struct ICmsSignerInfo;
struct ICmsAttachedSignature;
struct ICmsAttachedSignatureFactory;
struct ICmsAttachedSignatureStatics;
struct ICmsDetachedSignature;
struct ICmsDetachedSignatureFactory;
struct ICmsDetachedSignatureStatics;
struct Certificate;
struct CertificateRequestProperties;
struct UserCertificateEnrollmentManager;
struct CertificateEnrollmentManager;
struct KeyAttestationHelper;
struct CertificateQuery;
struct CertificateStore;
struct CertificateStores;
struct KeyAlgorithmNames;
struct KeyStorageProviderNames;
struct ChainBuildingParameters;
struct ChainValidationParameters;
struct CertificateChain;
struct CmsTimestampInfo;
struct CmsSignerInfo;
struct CmsAttachedSignature;
struct CmsDetachedSignature;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

struct IKeyDerivationParameters;
struct IKeyDerivationParametersStatics;
struct ICryptographicKey;
struct IHashComputation;
struct IHashAlgorithmProvider;
struct IMacAlgorithmProvider;
struct IMacAlgorithmProvider2;
struct IKeyDerivationAlgorithmProvider;
struct ISymmetricKeyAlgorithmProvider;
struct IAsymmetricKeyAlgorithmProvider;
struct IPersistedKeyProviderStatics;
struct IEncryptedAndAuthenticatedData;
struct ICryptographicEngineStatics;
struct ICryptographicEngineStatics2;
struct IHashAlgorithmProviderStatics;
struct IMacAlgorithmProviderStatics;
struct IKeyDerivationAlgorithmProviderStatics;
struct ISymmetricKeyAlgorithmProviderStatics;
struct IAsymmetricKeyAlgorithmProviderStatics;
struct IHashAlgorithmNamesStatics;
struct IMacAlgorithmNamesStatics;
struct ISymmetricAlgorithmNamesStatics;
struct IAsymmetricAlgorithmNamesStatics;
struct IKeyDerivationAlgorithmNamesStatics;
struct KeyDerivationParameters;
struct CryptographicKey;
struct CryptographicHash;
struct PersistedKeyProvider;
struct EncryptedAndAuthenticatedData;
struct CryptographicEngine;
struct HashAlgorithmProvider;
struct MacAlgorithmProvider;
struct KeyDerivationAlgorithmProvider;
struct SymmetricKeyAlgorithmProvider;
struct AsymmetricKeyAlgorithmProvider;
struct HashAlgorithmNames;
struct MacAlgorithmNames;
struct SymmetricAlgorithmNames;
struct AsymmetricAlgorithmNames;
struct KeyDerivationAlgorithmNames;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

struct IDataProtectionProvider;
struct IDataProtectionProviderFactory;
struct DataProtectionProvider;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

struct IFileRevocationManagerStatics;
struct FileRevocationManager;

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

struct IEasClientDeviceInformation;
struct IEasClientSecurityPolicy;
struct IEasComplianceResults;
struct IEasComplianceResults2;
struct EasComplianceResults;
struct EasClientSecurityPolicy;
struct EasClientDeviceInformation;

}}}}

namespace Modern { namespace Windows { namespace Storage {

struct IStreamedFileDataRequestedHandler;
struct IApplicationDataSetVersionHandler;
struct IStorageLibraryStatics;
struct IStorageLibrary;
struct IKnownFoldersStatics;
struct IKnownFoldersPlaylistsStatics;
struct IKnownFoldersCameraRollStatics;
struct IKnownFoldersSavedPicturesStatics;
struct IDownloadsFolderStatics;
struct IStreamedFileDataRequest;
struct IStorageFileStatics;
struct IStorageItem;
struct IStorageFolder;
struct IStorageFile;
struct IStorageFolderStatics;
struct IStorageItem2;
struct IStorageItemProperties;
struct IStorageItemProperties2;
struct IStorageItemPropertiesWithProvider;
struct IStorageFilePropertiesWithAvailability;
struct IStorageProvider;
struct IStorageFolder2;
struct IFileIOStatics;
struct IPathIOStatics;
struct ICachedFileManagerStatics;
struct ISystemAudioProperties;
struct ISystemGPSProperties;
struct ISystemImageProperties;
struct ISystemMediaProperties;
struct ISystemMusicProperties;
struct ISystemPhotoProperties;
struct ISystemVideoProperties;
struct ISystemProperties;
struct IStorageStreamTransaction;
struct IApplicationDataStatics;
struct IApplicationData;
struct ISetVersionRequest;
struct ISetVersionDeferral;
struct IApplicationDataContainer;
struct StorageFile;
struct StorageFolder;
struct StorageLibrary;
struct KnownFolders;
struct DownloadsFolder;
struct StreamedFileDataRequest;
struct StorageStreamTransaction;
struct StorageProvider;
struct FileIO;
struct PathIO;
struct CachedFileManager;
struct SystemAudioProperties;
struct SystemGPSProperties;
struct SystemImageProperties;
struct SystemMediaProperties;
struct SystemMusicProperties;
struct SystemPhotoProperties;
struct SystemVideoProperties;
struct SystemProperties;
struct ApplicationData;
struct SetVersionRequest;
struct ApplicationDataContainer;
struct SetVersionDeferral;
struct ApplicationDataContainerSettings;
struct ApplicationDataCompositeValue;

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

struct IItemRemovedEventArgs;
struct IStorageItemAccessList;
struct IStorageItemMostRecentlyUsedList;
struct IStorageApplicationPermissionsStatics;
struct AccessListEntryView;
struct StorageItemMostRecentlyUsedList;
struct ItemRemovedEventArgs;
struct StorageItemAccessList;
struct StorageApplicationPermissions;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

struct IStorageItemInformation;
struct IFileInformationFactoryFactory;
struct IFileInformationFactory;
struct FileInformationFactory;
struct FileInformation;
struct FolderInformation;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

struct ICompressor;
struct IDecompressor;
struct ICompressorFactory;
struct IDecompressorFactory;
struct Compressor;
struct Decompressor;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

struct IThumbnailProperties;
struct IStorageItemExtraProperties;
struct IStorageItemContentProperties;
struct IMusicProperties;
struct IImageProperties;
struct IVideoProperties;
struct IDocumentProperties;
struct IBasicProperties;
struct StorageItemThumbnail;
struct MusicProperties;
struct VideoProperties;
struct ImageProperties;
struct DocumentProperties;
struct StorageItemContentProperties;
struct BasicProperties;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

struct IFileOpenPicker;
struct IFileSavePicker;
struct IFolderPicker;
struct FilePickerSelectedFilesArray;
struct FilePickerFileTypesOrderedMap;
struct FileExtensionVector;
struct FileOpenPicker;
struct FileSavePicker;
struct FolderPicker;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

struct IFileRemovedEventArgs;
struct IFileOpenPickerUI;
struct IPickerClosingEventArgs;
struct IPickerClosingOperation;
struct IPickerClosingDeferral;
struct IFileSavePickerUI;
struct ITargetFileRequestedEventArgs;
struct ITargetFileRequest;
struct ITargetFileRequestDeferral;
struct FileRemovedEventArgs;
struct FileOpenPickerUI;
struct PickerClosingEventArgs;
struct PickerClosingOperation;
struct PickerClosingDeferral;
struct FileSavePickerUI;
struct TargetFileRequestedEventArgs;
struct TargetFileRequest;
struct TargetFileRequestDeferral;

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

struct ICachedFileUpdaterUI;
struct IFileUpdateRequestedEventArgs;
struct IFileUpdateRequest;
struct IFileUpdateRequestDeferral;
struct ICachedFileUpdaterStatics;
struct CachedFileUpdaterUI;
struct FileUpdateRequestedEventArgs;
struct FileUpdateRequest;
struct FileUpdateRequestDeferral;
struct CachedFileUpdater;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

struct IContentIndexerStatics;
struct IIndexableContent;
struct IContentIndexer;
struct IValueAndLanguage;
struct IContentIndexerQueryOperations;
struct IContentIndexerQuery;
struct IQueryOptions;
struct IQueryOptionsWithProviderFilter;
struct IQueryOptionsFactory;
struct IStorageQueryResultBase;
struct IStorageFileQueryResult;
struct IStorageFileQueryResult2;
struct IStorageFolderQueryResult;
struct IStorageItemQueryResult;
struct IStorageFolderQueryOperations;
struct ContentIndexer;
struct ValueAndLanguage;
struct ContentIndexerQuery;
struct IndexableContent;
struct QueryOptions;
struct StorageFileQueryResult;
struct StorageFolderQueryResult;
struct StorageItemQueryResult;
struct SortEntryVector;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

struct IDataReader;
struct IDataReaderFactory;
struct IDataReaderStatics;
struct IDataWriter;
struct IDataWriterFactory;
struct IRandomAccessStreamStatics;
struct IBufferFactory;
struct IBuffer;
struct IContentTypeProvider;
struct IRandomAccessStreamReference;
struct IInputStreamReference;
struct IRandomAccessStreamReferenceStatics;
struct IInputStream;
struct IOutputStream;
struct IRandomAccessStream;
struct IRandomAccessStreamWithContentType;
struct DataReaderLoadOperation;
struct DataReader;
struct DataWriterStoreOperation;
struct DataWriter;
struct RandomAccessStream;
struct Buffer;
struct RandomAccessStreamReference;
struct FileRandomAccessStream;
struct FileInputStream;
struct FileOutputStream;
struct RandomAccessStreamOverStream;
struct InputStreamOverStream;
struct OutputStreamOverStream;
struct InMemoryRandomAccessStream;

}}}}

namespace Modern { namespace Windows { namespace System {

struct ILauncherUIOptions;
struct ILauncherOptions;
struct ILauncherViewOptions;
struct ILauncherStatics;
struct LauncherUIOptions;
struct LauncherOptions;
struct Launcher;

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

struct IDisplayRequest;
struct DisplayRequest;

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

struct IHardwareToken;
struct IHardwareIdentificationStatics;
struct HardwareToken;
struct HardwareIdentification;

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

struct ISmbiosInformationStatics;
struct SmbiosInformation;

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

struct IInteractiveSessionStatics;
struct InteractiveSession;

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

struct ITimerElapsedHandler;
struct ITimerDestroyedHandler;
struct IWorkItemHandler;
struct IThreadPoolStatics;
struct IThreadPoolTimer;
struct IThreadPoolTimerStatics;
struct ThreadPoolTimer;
struct ThreadPool;

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

struct ISignalHandler;
struct ISignalNotifierStatics;
struct IPreallocatedWorkItemFactory;
struct IPreallocatedWorkItem;
struct ISignalNotifier;
struct SignalNotifier;
struct PreallocatedWorkItem;

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

struct IAdvertisingManagerStatics;
struct IUserInformationStatics;
struct ILockScreenStatics;
struct ILockScreenImageFeedStatics;
struct IGlobalizationPreferencesStatics;
struct AdvertisingManager;
struct UserInformation;
struct LockScreen;
struct GlobalizationPreferences;

}}}}

namespace Modern { namespace Windows { namespace UI {

struct IColorHelper;
struct IColorHelperStatics;
struct IColors;
struct IColorsStatics;
struct ColorHelper;
struct Colors;

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

struct IWebAccountProviderCommandInvokedHandler;
struct IWebAccountCommandInvokedHandler;
struct ICredentialCommandCredentialDeletedHandler;
struct ISettingsCommandFactory;
struct ISettingsCommandStatics;
struct ISettingsPaneCommandsRequest;
struct ISettingsPaneCommandsRequestedEventArgs;
struct ISettingsPaneStatics;
struct ISettingsPane;
struct IWebAccountProviderCommandFactory;
struct IWebAccountCommandFactory;
struct ICredentialCommandFactory;
struct IWebAccountProviderCommand;
struct IWebAccountInvokedArgs;
struct IWebAccountCommand;
struct ICredentialCommand;
struct IAccountsSettingsPaneEventDeferral;
struct IAccountsSettingsPaneCommandsRequestedEventArgs;
struct IAccountsSettingsPaneStatics;
struct IAccountsSettingsPane;
struct SettingsCommand;
struct SettingsPaneCommandsRequest;
struct SettingsPaneCommandsRequestedEventArgs;
struct SettingsPane;
struct WebAccountProviderCommand;
struct WebAccountCommand;
struct WebAccountInvokedArgs;
struct CredentialCommand;
struct AccountsSettingsPaneEventDeferral;
struct AccountsSettingsPaneCommandsRequestedEventArgs;
struct AccountsSettingsPane;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

struct IDispatchedHandler;
struct IIdleDispatchedHandler;
struct ICoreWindowEventArgs;
struct IAutomationProviderRequestedEventArgs;
struct ICharacterReceivedEventArgs;
struct IInputEnabledEventArgs;
struct IKeyEventArgs;
struct IPointerEventArgs;
struct ITouchHitTestingEventArgs;
struct IWindowActivatedEventArgs;
struct IWindowSizeChangedEventArgs;
struct IVisibilityChangedEventArgs;
struct ICoreWindow;
struct ICoreWindowStatic;
struct IAcceleratorKeyEventArgs;
struct ICoreAcceleratorKeys;
struct ICoreDispatcher;
struct ICoreDispatcherWithTaskPriority;
struct IIdleDispatchedHandlerArgs;
struct ICoreCursor;
struct ICoreCursorFactory;
struct IInitializeWithCoreWindow;
struct ICoreWindowResizeManager;
struct ICoreWindowResizeManagerLayoutCapability;
struct ICoreWindowResizeManagerStatics;
struct ICoreInputSourceBase;
struct ICorePointerInputSource;
struct ICoreKeyboardInputSource;
struct ICoreComponentFocusable;
struct ICoreTouchHitTesting;
struct ICoreWindowPopupShowingEventArgs;
struct ICoreWindowDialog;
struct ICoreWindowDialogFactory;
struct ICoreWindowFlyout;
struct ICoreWindowFlyoutFactory;
struct ICoreWindowFactory;
struct CoreDispatcher;
struct CoreCursor;
struct CoreWindow;
struct WindowActivatedEventArgs;
struct AutomationProviderRequestedEventArgs;
struct CharacterReceivedEventArgs;
struct CoreWindowEventArgs;
struct InputEnabledEventArgs;
struct KeyEventArgs;
struct PointerEventArgs;
struct TouchHitTestingEventArgs;
struct WindowSizeChangedEventArgs;
struct VisibilityChangedEventArgs;
struct IdleDispatchedHandlerArgs;
struct AcceleratorKeyEventArgs;
struct CoreAcceleratorKeys;
struct CoreWindowResizeManager;
struct CoreIndependentInputSource;
struct CoreComponentInputSource;
struct CoreWindowPopupShowingEventArgs;
struct CoreWindowDialog;
struct CoreWindowFlyout;
struct ImmersiveCoreWindowFactory;
struct HostedCoreWindowFactory;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

struct IPropertyAnimation;
struct IScaleAnimation;
struct IOpacityAnimation;
struct IAnimationDescription;
struct IAnimationDescriptionFactory;
struct AnimationDescription;
struct PropertyAnimation;
struct ScaleAnimation;
struct TranslationAnimation;
struct OpacityAnimation;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

struct IEdgeGestureEventArgs;
struct IEdgeGestureStatics;
struct IEdgeGesture;
struct ITappedEventArgs;
struct IRightTappedEventArgs;
struct IHoldingEventArgs;
struct IDraggingEventArgs;
struct IManipulationStartedEventArgs;
struct IManipulationUpdatedEventArgs;
struct IManipulationInertiaStartingEventArgs;
struct IManipulationCompletedEventArgs;
struct ICrossSlidingEventArgs;
struct IMouseWheelParameters;
struct IGestureRecognizer;
struct IPointerPointStatics;
struct IPointerPointTransform;
struct IPointerPoint;
struct IPointerPointProperties;
struct IPointerVisualizationSettings;
struct IPointerVisualizationSettingsStatics;
struct EdgeGestureEventArgs;
struct EdgeGesture;
struct MouseWheelParameters;
struct GestureRecognizer;
struct TappedEventArgs;
struct RightTappedEventArgs;
struct HoldingEventArgs;
struct DraggingEventArgs;
struct ManipulationStartedEventArgs;
struct ManipulationUpdatedEventArgs;
struct ManipulationInertiaStartingEventArgs;
struct ManipulationCompletedEventArgs;
struct CrossSlidingEventArgs;
struct PointerPoint;
struct PointerPointProperties;
struct PointerVisualizationSettings;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

struct IInkDrawingAttributes;
struct IInkStrokeRenderingSegment;
struct IInkStroke;
struct IInkStrokeBuilder;
struct IInkRecognitionResult;
struct IInkStrokeContainer;
struct IInkRecognizer;
struct IInkRecognizerContainer;
struct IInkManager;
struct InkDrawingAttributes;
struct InkStrokeRenderingSegment;
struct InkStroke;
struct InkStrokeBuilder;
struct InkRecognitionResult;
struct InkStrokeContainer;
struct InkRecognizer;
struct InkRecognizerContainer;
struct InkManager;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

struct IToastDismissedEventArgs;
struct IToastFailedEventArgs;
struct IToastActivatedEventArgs;
struct ITileUpdateManagerStatics;
struct ITileUpdater;
struct ITileUpdater2;
struct IBadgeUpdateManagerStatics;
struct IBadgeUpdater;
struct IToastNotificationManagerStatics;
struct IToastNotifier;
struct ITileNotificationFactory;
struct ITileNotification;
struct IBadgeNotificationFactory;
struct IBadgeNotification;
struct IToastNotificationFactory;
struct IToastNotification;
struct IScheduledToastNotificationFactory;
struct IScheduledToastNotification;
struct IScheduledTileNotificationFactory;
struct IScheduledTileNotification;
struct TileUpdater;
struct TileNotification;
struct ScheduledTileNotification;
struct BadgeUpdater;
struct BadgeNotification;
struct ToastNotifier;
struct ToastNotification;
struct ScheduledToastNotification;
struct ToastDismissedEventArgs;
struct ToastFailedEventArgs;
struct TileUpdateManager;
struct BadgeUpdateManager;
struct ToastNotificationManager;
struct ToastActivatedEventArgs;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

struct IUICommandInvokedHandler;
struct IMessageDialog;
struct IMessageDialogFactory;
struct IUICommand;
struct IUICommandFactory;
struct IPopupMenu;
struct MessageDialog;
struct UICommand;
struct UICommandSeparator;
struct PopupMenu;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

struct ISecondaryTile;
struct ISecondaryTile2;
struct ISecondaryTileVisualElements;
struct ISecondaryTileFactory;
struct ISecondaryTileFactory2;
struct ISecondaryTileStatics;
struct IVisualElementsRequestedEventArgs;
struct IVisualElementsRequest;
struct IVisualElementsRequestDeferral;
struct SecondaryTileVisualElements;
struct SecondaryTile;
struct VisualElementsRequestedEventArgs;
struct VisualElementsRequest;
struct VisualElementsRequestDeferral;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

struct ITextConstantsStatics;
struct ITextDocument;
struct ITextRange;
struct ITextSelection;
struct ITextCharacterFormat;
struct ITextParagraphFormat;
struct IFontWeights;
struct IFontWeightsStatics;
struct TextConstants;
struct FontWeights;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

struct IApplicationViewSwitcherStatics;
struct IApplicationViewInteropStatics;
struct IApplicationViewStatics2;
struct IApplicationView;
struct IApplicationViewConsolidatedEventArgs;
struct IProjectionManagerStatics;
struct IInputPaneVisibilityEventArgs;
struct IInputPane;
struct IInputPaneStatics;
struct IAccessibilitySettings;
struct IUISettings;
struct ApplicationView;
struct ApplicationViewConsolidatedEventArgs;
struct ApplicationViewSwitcher;
struct ProjectionManager;
struct InputPaneVisibilityEventArgs;
struct InputPane;
struct AccessibilitySettings;
struct UISettings;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

struct IActivatedEventHandler;
struct IResumingEventHandler;
struct ISuspendingEventHandler;
struct INavigatedEventHandler;
struct IActivatedDeferral;
struct IActivatedOperation;
struct IActivatedEventArgsDeferral;
struct IWebUINavigatedEventArgs;
struct IWebUIBackgroundTaskInstance;
struct IWebUIBackgroundTaskInstanceStatics;
struct IWebUINavigatedDeferral;
struct IWebUINavigatedOperation;
struct IWebUIActivationStatics;
struct IHtmlPrintDocumentSource;
struct ActivatedDeferral;
struct ActivatedOperation;
struct WebUILaunchActivatedEventArgs;
struct WebUISearchActivatedEventArgs;
struct WebUIShareTargetActivatedEventArgs;
struct WebUIFileActivatedEventArgs;
struct WebUIProtocolActivatedEventArgs;
struct WebUIFileOpenPickerActivatedEventArgs;
struct WebUIFileSavePickerActivatedEventArgs;
struct WebUICachedFileUpdaterActivatedEventArgs;
struct WebUIContactPickerActivatedEventArgs;
struct WebUIDeviceActivatedEventArgs;
struct WebUIPrintTaskSettingsActivatedEventArgs;
struct WebUICameraSettingsActivatedEventArgs;
struct WebUIAppointmentsProviderAddAppointmentActivatedEventArgs;
struct WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs;
struct WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs;
struct WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs;
struct WebUIContactCallActivatedEventArgs;
struct WebUIContactMessageActivatedEventArgs;
struct WebUIContactMapActivatedEventArgs;
struct WebUIContactPostActivatedEventArgs;
struct WebUIContactVideoCallActivatedEventArgs;
struct WebUILockScreenCallActivatedEventArgs;
struct WebUIRestrictedLaunchActivatedEventArgs;
struct WebUINavigatedOperation;
struct SuspendingDeferral;
struct SuspendingOperation;
struct SuspendingEventArgs;
struct WebUIBackgroundTaskInstanceRuntimeClass;
struct WebUIBackgroundTaskInstance;
struct WebUINavigatedDeferral;
struct WebUINavigatedEventArgs;
struct WebUIApplication;
struct HtmlPrintDocumentSource;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml {

struct ICreateDefaultValueCallback;
struct IPropertyChangedCallback;
struct IApplicationInitializationCallback;
struct IBindingFailedEventHandler;
struct IDependencyPropertyChangedEventHandler;
struct IDragEventHandler;
struct IExceptionRoutedEventHandler;
struct IRoutedEventHandler;
struct ISizeChangedEventHandler;
struct ISuspendingEventHandler;
struct IUnhandledExceptionEventHandler;
struct IVisualStateChangedEventHandler;
struct IWindowActivatedEventHandler;
struct IWindowClosedEventHandler;
struct IWindowSizeChangedEventHandler;
struct IWindowVisibilityChangedEventHandler;
struct ICornerRadiusHelper;
struct ICornerRadiusHelperStatics;
struct IDurationHelper;
struct IDurationHelperStatics;
struct IGridLengthHelper;
struct IGridLengthHelperStatics;
struct IPointHelper;
struct IPointHelperStatics;
struct IRectHelper;
struct IRectHelperStatics;
struct ISizeHelper;
struct ISizeHelperStatics;
struct IThicknessHelper;
struct IThicknessHelperStatics;
struct IApplicationInitializationCallbackParams;
struct IBindingFailedEventArgs;
struct IDataContextChangedEventArgs;
struct IDataTemplate;
struct IDataTemplateFactory;
struct IDataTemplateKey;
struct IDataTemplateKeyFactory;
struct IDebugSettings;
struct IDebugSettings2;
struct IDependencyObject;
struct IDependencyObjectFactory;
struct IDependencyObjectCollectionFactory;
struct IDependencyProperty;
struct IDependencyPropertyStatics;
struct IDependencyPropertyChangedEventArgs;
struct IDispatcherTimer;
struct IDispatcherTimerFactory;
struct IDragEventArgs;
struct IEventTrigger;
struct IExceptionRoutedEventArgs;
struct IExceptionRoutedEventArgsFactory;
struct IApplication;
struct IApplicationOverrides;
struct IApplicationStatics;
struct IApplicationFactory;
struct IFrameworkElement;
struct IFrameworkElementOverrides;
struct IFrameworkElementStatics;
struct IFrameworkElementFactory;
struct IFrameworkElement2;
struct IFrameworkElementOverrides2;
struct IFrameworkElementStatics2;
struct IFrameworkTemplate;
struct IFrameworkTemplateFactory;
struct IFrameworkView;
struct IFrameworkViewSource;
struct IMediaFailedRoutedEventArgs;
struct IPropertyMetadata;
struct IPropertyMetadataStatics;
struct IPropertyMetadataFactory;
struct IPropertyPath;
struct IPropertyPathFactory;
struct IResourceDictionary;
struct IResourceDictionaryFactory;
struct IRoutedEvent;
struct IRoutedEventArgs;
struct IRoutedEventArgsFactory;
struct ISetter;
struct ISetterFactory;
struct ISetterBase;
struct ISetterBaseFactory;
struct ISetterBaseCollection;
struct ISizeChangedEventArgs;
struct IStyle;
struct IStyleFactory;
struct ITriggerAction;
struct ITriggerActionFactory;
struct ITriggerBase;
struct ITriggerBaseFactory;
struct IUIElement;
struct IUIElementOverrides;
struct IUIElementStatics;
struct IUIElementFactory;
struct IUIElement2;
struct IUIElementStatics2;
struct IUnhandledExceptionEventArgs;
struct IVisualState;
struct IVisualStateChangedEventArgs;
struct IVisualStateGroup;
struct IVisualStateManager;
struct IVisualStateManagerOverrides;
struct IVisualStateManagerProtected;
struct IVisualStateManagerStatics;
struct IVisualStateManagerFactory;
struct IVisualTransition;
struct IVisualTransitionFactory;
struct IWindow;
struct IWindowStatics;
struct IWindowCreatedEventArgs;
struct DependencyObject;
struct UIElement;
struct RoutedEventArgs;
struct DependencyProperty;
struct Window;
struct TriggerAction;
struct FrameworkElement;
struct PropertyPath;
struct DataTemplate;
struct DragEventArgs;
struct Style;
struct FrameworkTemplate;
struct DependencyPropertyChangedEventArgs;
struct ApplicationInitializationCallbackParams;
struct CornerRadiusHelper;
struct DurationHelper;
struct GridLengthHelper;
struct PointHelper;
struct RectHelper;
struct SizeHelper;
struct ThicknessHelper;
struct BindingFailedEventArgs;
struct UnhandledExceptionEventArgs;
struct VisualStateChangedEventArgs;
struct DataContextChangedEventArgs;
struct DataTemplateKey;
struct DebugSettings;
struct DependencyObjectCollection;
struct PropertyMetadata;
struct DispatcherTimer;
struct RoutedEvent;
struct TriggerActionCollection;
struct ExceptionRoutedEventArgs;
struct WindowCreatedEventArgs;
struct Application;
struct TriggerCollection;
struct FrameworkView;
struct FrameworkViewSource;
struct MediaFailedRoutedEventArgs;
struct ResourceDictionary;
struct SetterBase;
struct Setter;
struct SetterBaseCollection;
struct SizeChangedEventArgs;
struct TriggerBase;
struct EventTrigger;
struct VisualState;
struct VisualStateGroup;
struct VisualStateManager;
struct VisualTransition;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation {

struct IAutomationProperty;
struct IAutomationProperties;
struct IAutomationPropertiesStatics;
struct IAutomationPropertiesStatics2;
struct IAutomationElementIdentifiersStatics;
struct IAutomationElementIdentifiersStatics2;
struct IAutomationElementIdentifiers;
struct IAnnotationPatternIdentifiersStatics;
struct IAnnotationPatternIdentifiers;
struct IDockPatternIdentifiersStatics;
struct IDockPatternIdentifiers;
struct IDragPatternIdentifiersStatics;
struct IDragPatternIdentifiers;
struct IDropTargetPatternIdentifiersStatics;
struct IDropTargetPatternIdentifiers;
struct IExpandCollapsePatternIdentifiersStatics;
struct IExpandCollapsePatternIdentifiers;
struct IGridItemPatternIdentifiersStatics;
struct IGridItemPatternIdentifiers;
struct IGridPatternIdentifiersStatics;
struct IGridPatternIdentifiers;
struct IMultipleViewPatternIdentifiersStatics;
struct IMultipleViewPatternIdentifiers;
struct IRangeValuePatternIdentifiersStatics;
struct IRangeValuePatternIdentifiers;
struct IScrollPatternIdentifiersStatics;
struct IScrollPatternIdentifiers;
struct ISelectionItemPatternIdentifiersStatics;
struct ISelectionItemPatternIdentifiers;
struct ISelectionPatternIdentifiersStatics;
struct ISelectionPatternIdentifiers;
struct ITableItemPatternIdentifiersStatics;
struct ITableItemPatternIdentifiers;
struct ITablePatternIdentifiersStatics;
struct ITablePatternIdentifiers;
struct ITogglePatternIdentifiersStatics;
struct ITogglePatternIdentifiers;
struct ITransformPatternIdentifiersStatics;
struct ITransformPatternIdentifiers;
struct IValuePatternIdentifiersStatics;
struct IValuePatternIdentifiers;
struct IWindowPatternIdentifiersStatics;
struct IWindowPatternIdentifiers;
struct ITransformPattern2IdentifiersStatics;
struct ITransformPattern2Identifiers;
struct ISpreadsheetItemPatternIdentifiersStatics;
struct ISpreadsheetItemPatternIdentifiers;
struct IStylesPatternIdentifiersStatics;
struct IStylesPatternIdentifiers;
struct AutomationProperty;
struct AutomationProperties;
struct AutomationElementIdentifiers;
struct AnnotationPatternIdentifiers;
struct DockPatternIdentifiers;
struct DragPatternIdentifiers;
struct DropTargetPatternIdentifiers;
struct ExpandCollapsePatternIdentifiers;
struct GridItemPatternIdentifiers;
struct GridPatternIdentifiers;
struct MultipleViewPatternIdentifiers;
struct RangeValuePatternIdentifiers;
struct ScrollPatternIdentifiers;
struct SelectionItemPatternIdentifiers;
struct SelectionPatternIdentifiers;
struct TableItemPatternIdentifiers;
struct TablePatternIdentifiers;
struct TogglePatternIdentifiers;
struct TransformPatternIdentifiers;
struct ValuePatternIdentifiers;
struct WindowPatternIdentifiers;
struct TransformPattern2Identifiers;
struct SpreadsheetItemPatternIdentifiers;
struct StylesPatternIdentifiers;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation { namespace Peers {

struct IButtonAutomationPeer;
struct IButtonAutomationPeerFactory;
struct IButtonBaseAutomationPeer;
struct IButtonBaseAutomationPeerFactory;
struct ICaptureElementAutomationPeer;
struct ICaptureElementAutomationPeerFactory;
struct ICheckBoxAutomationPeer;
struct ICheckBoxAutomationPeerFactory;
struct IComboBoxAutomationPeer;
struct IComboBoxAutomationPeerFactory;
struct IComboBoxItemAutomationPeer;
struct IComboBoxItemAutomationPeerFactory;
struct IComboBoxItemDataAutomationPeer;
struct IComboBoxItemDataAutomationPeerFactory;
struct IFlipViewAutomationPeer;
struct IFlipViewAutomationPeerFactory;
struct IFlipViewItemAutomationPeer;
struct IFlipViewItemAutomationPeerFactory;
struct IFlipViewItemDataAutomationPeer;
struct IFlipViewItemDataAutomationPeerFactory;
struct IGridViewAutomationPeer;
struct IGridViewAutomationPeerFactory;
struct IGridViewItemAutomationPeer;
struct IGridViewItemAutomationPeerFactory;
struct IGridViewItemDataAutomationPeer;
struct IGridViewItemDataAutomationPeerFactory;
struct IGroupItemAutomationPeer;
struct IGroupItemAutomationPeerFactory;
struct IHyperlinkButtonAutomationPeer;
struct IHyperlinkButtonAutomationPeerFactory;
struct IImageAutomationPeer;
struct IImageAutomationPeerFactory;
struct IItemAutomationPeer;
struct IItemAutomationPeerFactory;
struct IItemsControlAutomationPeer;
struct IItemsControlAutomationPeerFactory;
struct IListBoxAutomationPeer;
struct IListBoxAutomationPeerFactory;
struct IListBoxItemAutomationPeer;
struct IListBoxItemAutomationPeerFactory;
struct IListBoxItemDataAutomationPeer;
struct IListBoxItemDataAutomationPeerFactory;
struct IListViewAutomationPeer;
struct IListViewAutomationPeerFactory;
struct IListViewBaseAutomationPeer;
struct IListViewBaseAutomationPeerFactory;
struct IListViewItemAutomationPeer;
struct IListViewItemAutomationPeerFactory;
struct IListViewItemDataAutomationPeer;
struct IListViewItemDataAutomationPeerFactory;
struct IMediaElementAutomationPeer;
struct IMediaElementAutomationPeerFactory;
struct IPasswordBoxAutomationPeer;
struct IPasswordBoxAutomationPeerFactory;
struct IProgressBarAutomationPeer;
struct IProgressBarAutomationPeerFactory;
struct IProgressRingAutomationPeer;
struct IProgressRingAutomationPeerFactory;
struct IRadioButtonAutomationPeer;
struct IRadioButtonAutomationPeerFactory;
struct IRangeBaseAutomationPeer;
struct IRangeBaseAutomationPeerFactory;
struct IRepeatButtonAutomationPeer;
struct IRepeatButtonAutomationPeerFactory;
struct IRichEditBoxAutomationPeer;
struct IRichEditBoxAutomationPeerFactory;
struct IRichTextBlockAutomationPeer;
struct IRichTextBlockAutomationPeerFactory;
struct IRichTextBlockOverflowAutomationPeer;
struct IRichTextBlockOverflowAutomationPeerFactory;
struct IScrollBarAutomationPeer;
struct IScrollBarAutomationPeerFactory;
struct IScrollViewerAutomationPeer;
struct IScrollViewerAutomationPeerFactory;
struct ISelectorAutomationPeer;
struct ISelectorAutomationPeerFactory;
struct ISelectorItemAutomationPeer;
struct ISelectorItemAutomationPeerFactory;
struct ISemanticZoomAutomationPeer;
struct ISemanticZoomAutomationPeerFactory;
struct ISettingsFlyoutAutomationPeer;
struct ISettingsFlyoutAutomationPeerFactory;
struct ISliderAutomationPeer;
struct ISliderAutomationPeerFactory;
struct ITextBlockAutomationPeer;
struct ITextBlockAutomationPeerFactory;
struct ITextBoxAutomationPeer;
struct ITextBoxAutomationPeerFactory;
struct IThumbAutomationPeer;
struct IThumbAutomationPeerFactory;
struct IToggleButtonAutomationPeer;
struct IToggleButtonAutomationPeerFactory;
struct IToggleSwitchAutomationPeer;
struct IToggleSwitchAutomationPeerFactory;
struct IAppBarAutomationPeer;
struct IAppBarAutomationPeerFactory;
struct IAppBarButtonAutomationPeer;
struct IAppBarButtonAutomationPeerFactory;
struct IAppBarToggleButtonAutomationPeer;
struct IAppBarToggleButtonAutomationPeerFactory;
struct IDatePickerAutomationPeer;
struct IDatePickerAutomationPeerFactory;
struct IFlyoutPresenterAutomationPeer;
struct IFlyoutPresenterAutomationPeerFactory;
struct IGridViewHeaderItemAutomationPeer;
struct IGridViewHeaderItemAutomationPeerFactory;
struct IHubAutomationPeer;
struct IHubAutomationPeerFactory;
struct IHubSectionAutomationPeer;
struct IHubSectionAutomationPeerFactory;
struct IListViewBaseHeaderItemAutomationPeer;
struct IListViewBaseHeaderItemAutomationPeerFactory;
struct IListViewHeaderItemAutomationPeer;
struct IListViewHeaderItemAutomationPeerFactory;
struct IMenuFlyoutItemAutomationPeer;
struct IMenuFlyoutItemAutomationPeerFactory;
struct IMenuFlyoutPresenterAutomationPeer;
struct IMenuFlyoutPresenterAutomationPeerFactory;
struct ISearchBoxAutomationPeer;
struct ISearchBoxAutomationPeerFactory;
struct ITimePickerAutomationPeer;
struct ITimePickerAutomationPeerFactory;
struct IToggleMenuFlyoutItemAutomationPeer;
struct IToggleMenuFlyoutItemAutomationPeerFactory;
struct IAutomationPeer;
struct IAutomationPeerOverrides;
struct IAutomationPeerProtected;
struct IAutomationPeerStatics;
struct IAutomationPeerFactory;
struct IAutomationPeer2;
struct IAutomationPeerOverrides2;
struct IFrameworkElementAutomationPeer;
struct IFrameworkElementAutomationPeerStatics;
struct IFrameworkElementAutomationPeerFactory;
struct AutomationPeer;
struct FrameworkElementAutomationPeer;
struct ButtonBaseAutomationPeer;
struct CaptureElementAutomationPeer;
struct ComboBoxItemAutomationPeer;
struct FlipViewItemAutomationPeer;
struct GridViewItemAutomationPeer;
struct GroupItemAutomationPeer;
struct ImageAutomationPeer;
struct ListBoxItemAutomationPeer;
struct ListViewItemAutomationPeer;
struct MediaElementAutomationPeer;
struct PasswordBoxAutomationPeer;
struct ProgressRingAutomationPeer;
struct RichEditBoxAutomationPeer;
struct RichTextBlockAutomationPeer;
struct RichTextBlockOverflowAutomationPeer;
struct SettingsFlyoutAutomationPeer;
struct TextBlockAutomationPeer;
struct TextBoxAutomationPeer;
struct ThumbAutomationPeer;
struct DatePickerAutomationPeer;
struct FlyoutPresenterAutomationPeer;
struct HubAutomationPeer;
struct HubSectionAutomationPeer;
struct ListViewBaseHeaderItemAutomationPeer;
struct GridViewHeaderItemAutomationPeer;
struct ListViewHeaderItemAutomationPeer;
struct SearchBoxAutomationPeer;
struct TimePickerAutomationPeer;
struct ButtonAutomationPeer;
struct HyperlinkButtonAutomationPeer;
struct RepeatButtonAutomationPeer;
struct AppBarButtonAutomationPeer;
struct MenuFlyoutItemAutomationPeer;
struct ItemsControlAutomationPeer;
struct MenuFlyoutPresenterAutomationPeer;
struct RangeBaseAutomationPeer;
struct ProgressBarAutomationPeer;
struct ScrollBarAutomationPeer;
struct SliderAutomationPeer;
struct ScrollViewerAutomationPeer;
struct SelectorAutomationPeer;
struct FlipViewAutomationPeer;
struct ListBoxAutomationPeer;
struct ListViewBaseAutomationPeer;
struct GridViewAutomationPeer;
struct ListViewAutomationPeer;
struct SemanticZoomAutomationPeer;
struct ToggleButtonAutomationPeer;
struct CheckBoxAutomationPeer;
struct RadioButtonAutomationPeer;
struct ToggleSwitchAutomationPeer;
struct AppBarAutomationPeer;
struct AppBarToggleButtonAutomationPeer;
struct ToggleMenuFlyoutItemAutomationPeer;
struct ComboBoxAutomationPeer;
struct ItemAutomationPeer;
struct SelectorItemAutomationPeer;
struct ComboBoxItemDataAutomationPeer;
struct FlipViewItemDataAutomationPeer;
struct GridViewItemDataAutomationPeer;
struct ListBoxItemDataAutomationPeer;
struct ListViewItemDataAutomationPeer;

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation { namespace Provider {

struct IAnnotationProvider;
struct IDockProvider;
struct IDragProvider;
struct IDropTargetProvider;
struct IExpandCollapseProvider;
struct IGridItemProvider;
struct IGridProvider;
struct IInvokeProvider;
struct IItemContainerProvider;
struct IMultipleViewProvider;
struct IObjectModelProvider;
struct IRangeValueProvider;
struct IIRawElementProviderSimple;
struct IScrollItemProvider;
struct IScrollProvider;
struct ISelectionItemProvider;
struct ISelectionProvider;
struct ISpreadsheetItemProvider;
struct ISpreadsheetProvider;
struct IStylesProvider;
struct ISynchronizedInputProvider;
struct ITableItemProvider;
struct ITableProvider;
struct ITextChildProvider;
struct ITextRangeProvider;
struct ITextProvider;
struct ITextProvider2;
struct ITextRangeProvider2;
struct IToggleProvider;
struct ITransformProvider;
struct ITransformProvider2;
struct IValueProvider;
struct IVirtualizedItemProvider;
struct IWindowProvider;
struct IRawElementProviderSimple;

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Controls {

struct IBackClickEventHandler;
struct ICleanUpVirtualizedItemEventHandler;
struct IContextMenuOpeningEventHandler;
struct IDragItemsStartingEventHandler;
struct IItemClickEventHandler;
struct INotifyEventHandler;
struct ISelectionChangedEventHandler;
struct ISemanticZoomViewChangedEventHandler;
struct ITextChangedEventHandler;
struct ITextControlPasteEventHandler;
struct IHubSectionHeaderClickEventHandler;
struct ISectionsInViewChangedEventHandler;
struct IWebViewNavigationFailedEventHandler;
struct IBackClickEventArgs;
struct IBorder;
struct IBorderStatics;
struct IButton;
struct IButtonFactory;
struct IButtonWithFlyout;
struct IButtonStaticsWithFlyout;
struct ICanvas;
struct ICanvasStatics;
struct ICanvasFactory;
struct ICaptureElement;
struct ICaptureElementStatics;
struct ICheckBox;
struct ICheckBoxFactory;
struct ICleanUpVirtualizedItemEventArgs;
struct IColumnDefinition;
struct IColumnDefinitionStatics;
struct IComboBox;
struct IComboBoxOverrides;
struct IComboBoxStatics;
struct IComboBoxFactory;
struct IComboBox2;
struct IComboBoxStatics2;
struct IComboBoxItem;
struct IComboBoxItemFactory;
struct IContainerContentChangingEventArgs;
struct IContentControl;
struct IContentControlOverrides;
struct IContentControlStatics;
struct IContentControlFactory;
struct IContentControl2;
struct IContentPresenter;
struct IContentPresenterOverrides;
struct IContentPresenterStatics;
struct IContentPresenterFactory;
struct IContentPresenter2;
struct IContentPresenterStatics2;
struct IContextMenuEventArgs;
struct IDataTemplateSelector;
struct IDataTemplateSelectorOverrides;
struct IDataTemplateSelectorFactory;
struct IDataTemplateSelector2;
struct IDataTemplateSelectorOverrides2;
struct IDatePicker;
struct IDatePickerStatics;
struct IDatePickerFactory;
struct IDatePickerValueChangedEventArgs;
struct IDragItemsStartingEventArgs;
struct IFlipView;
struct IFlipViewFactory;
struct IFlipView2;
struct IFlipViewStatics2;
struct IFlipViewItem;
struct IFlipViewItemFactory;
struct IGrid;
struct IGridStatics;
struct IGridFactory;
struct IGridView;
struct IGridViewFactory;
struct IGridViewItem;
struct IGridViewItemFactory;
struct IGroupItem;
struct IGroupItemFactory;
struct IGroupStyle;
struct IGroupStyleFactory;
struct IGroupStyle2;
struct IGroupStyleSelector;
struct IGroupStyleSelectorOverrides;
struct IGroupStyleSelectorFactory;
struct IHyperlinkButton;
struct IHyperlinkButtonStatics;
struct IHyperlinkButtonFactory;
struct IItemContainerMapping;
struct IImage;
struct IImageStatics;
struct INavigate;
struct ISemanticZoomInformation;
struct IItemClickEventArgs;
struct IItemContainerGenerator;
struct IItemsControl;
struct IItemsControlOverrides;
struct IItemsControlStatics;
struct IItemsControlFactory;
struct IItemsControl2;
struct IItemsPanelTemplate;
struct IItemsPresenter;
struct IItemsPresenterStatics;
struct IItemsPresenter2;
struct IItemsPresenterStatics2;
struct IListBox;
struct IListBoxStatics;
struct IListBoxFactory;
struct IListBoxItem;
struct IListBoxItemFactory;
struct IListView;
struct IListViewFactory;
struct IListViewBase;
struct IListViewBaseStatics;
struct IListViewBaseFactory;
struct IListViewBase2;
struct IListViewBaseStatics2;
struct IListViewItem;
struct IListViewItemFactory;
struct IMediaElement;
struct IMediaElementStatics;
struct IMediaElement2;
struct IMediaElementStatics2;
struct INotifyEventArgs;
struct INotifyEventArgs2;
struct IPanel;
struct IPanelStatics;
struct IPanelFactory;
struct IPasswordBox;
struct IPasswordBoxStatics;
struct IPasswordBox2;
struct IPasswordBoxStatics2;
struct IProgressBar;
struct IProgressBarStatics;
struct IProgressBarFactory;
struct IProgressRing;
struct IProgressRingStatics;
struct IRadioButton;
struct IRadioButtonStatics;
struct IRadioButtonFactory;
struct IRichEditBox;
struct IRichEditBoxStatics;
struct IRichEditBoxFactory;
struct IRichEditBox2;
struct IRichEditBoxStatics2;
struct IRichTextBlock;
struct IRichTextBlockStatics;
struct IRichTextBlock2;
struct IRichTextBlockStatics2;
struct IRichTextBlockOverflow;
struct IRichTextBlockOverflowStatics;
struct IRichTextBlockOverflow2;
struct IRichTextBlockOverflowStatics2;
struct IRowDefinition;
struct IRowDefinitionStatics;
struct IScrollContentPresenter;
struct IScrollViewer;
struct IScrollViewerStatics;
struct IScrollViewer2;
struct IScrollViewerStatics2;
struct IScrollViewerView;
struct IScrollViewerViewChangedEventArgs;
struct IScrollViewerViewChangingEventArgs;
struct ISelectionChangedEventArgs;
struct ISelectionChangedEventArgsFactory;
struct ISemanticZoom;
struct ISemanticZoomStatics;
struct ISemanticZoomLocation;
struct ISemanticZoomViewChangedEventArgs;
struct ISettingsFlyout;
struct ISettingsFlyoutStatics;
struct ISettingsFlyoutFactory;
struct ISlider;
struct ISliderStatics;
struct ISliderFactory;
struct ISlider2;
struct ISliderStatics2;
struct IStackPanel;
struct IStackPanelStatics;
struct IStackPanelFactory;
struct IStyleSelector;
struct IStyleSelectorOverrides;
struct IStyleSelectorFactory;
struct ITextBlock;
struct ITextBlockStatics;
struct ITextBlock2;
struct ITextBlockStatics2;
struct ITextBox;
struct ITextBoxStatics;
struct ITextBoxFactory;
struct ITextBox2;
struct ITextBoxStatics2;
struct ITextChangedEventArgs;
struct ITextControlPasteEventArgs;
struct IToggleSwitch;
struct IToggleSwitchOverrides;
struct IToggleSwitchStatics;
struct IToolTip;
struct IToolTipStatics;
struct IToolTipFactory;
struct IToolTipService;
struct IToolTipServiceStatics;
struct IUIElementCollection;
struct IUserControl;
struct IUserControlStatics;
struct IUserControlFactory;
struct IVariableSizedWrapGrid;
struct IVariableSizedWrapGridStatics;
struct IViewbox;
struct IViewboxStatics;
struct IVirtualizingPanel;
struct IVirtualizingPanelOverrides;
struct IVirtualizingPanelProtected;
struct IVirtualizingPanelFactory;
struct IVirtualizingStackPanel;
struct IVirtualizingStackPanelOverrides;
struct IVirtualizingStackPanelStatics;
struct IAppBar;
struct IAppBarOverrides;
struct IAppBarStatics;
struct IAppBarFactory;
struct IAppBarButton;
struct IAppBarButtonStatics;
struct IAppBarButtonFactory;
struct IAppBarSeparator;
struct IAppBarSeparatorStatics;
struct IAppBarSeparatorFactory;
struct IAppBarToggleButton;
struct IAppBarToggleButtonStatics;
struct IAppBarToggleButtonFactory;
struct IBitmapIcon;
struct IBitmapIconStatics;
struct IBitmapIconFactory;
struct ICommandBar;
struct ICommandBarElement;
struct ICommandBarStatics;
struct ICommandBarFactory;
struct IFlyout;
struct IFlyoutStatics;
struct IFlyoutFactory;
struct IFlyoutPresenter;
struct IFlyoutPresenterFactory;
struct IFontIcon;
struct IFontIconStatics;
struct IFontIconFactory;
struct IFrame;
struct IFrameStatics;
struct IFrameFactory;
struct IFrame2;
struct IFrameStatics2;
struct IGridViewHeaderItem;
struct IGridViewHeaderItemFactory;
struct IHub;
struct IHubStatics;
struct IHubFactory;
struct IHubSection;
struct IHubSectionStatics;
struct IHubSectionFactory;
struct IHubSectionHeaderClickEventArgs;
struct IIconElement;
struct IIconElementStatics;
struct IIconElementFactory;
struct IItemsStackPanel;
struct IItemsStackPanelStatics;
struct IItemsWrapGrid;
struct IItemsWrapGridStatics;
struct IListViewBaseHeaderItem;
struct IListViewBaseHeaderItemFactory;
struct IListViewHeaderItem;
struct IListViewHeaderItemFactory;
struct IMenuFlyout;
struct IMenuFlyoutStatics;
struct IMenuFlyoutFactory;
struct IMenuFlyoutItem;
struct IMenuFlyoutItemStatics;
struct IMenuFlyoutItemFactory;
struct IMenuFlyoutItemBase;
struct IMenuFlyoutItemBaseFactory;
struct IMenuFlyoutPresenter;
struct IMenuFlyoutPresenterFactory;
struct IMenuFlyoutSeparator;
struct IMenuFlyoutSeparatorFactory;
struct IPage;
struct IPageOverrides;
struct IPageStatics;
struct IPageFactory;
struct IPathIcon;
struct IPathIconStatics;
struct IPathIconFactory;
struct ISearchBox;
struct ISearchBoxStatics;
struct ISearchBoxFactory;
struct ISearchBoxQueryChangedEventArgs;
struct ISearchBoxQuerySubmittedEventArgs;
struct ISearchBoxResultSuggestionChosenEventArgs;
struct ISearchBoxSuggestionsRequestedEventArgs;
struct ISectionsInViewChangedEventArgs;
struct ISectionsInViewChangedEventArgsFactory;
struct ISwapChainBackgroundPanel;
struct ISwapChainBackgroundPanelFactory;
struct ISwapChainBackgroundPanel2;
struct ISwapChainPanel;
struct ISwapChainPanelStatics;
struct ISwapChainPanelFactory;
struct ISymbolIcon;
struct ISymbolIconStatics;
struct ISymbolIconFactory;
struct ITimePicker;
struct ITimePickerStatics;
struct ITimePickerFactory;
struct ITimePickerValueChangedEventArgs;
struct IToggleMenuFlyoutItem;
struct IToggleMenuFlyoutItemStatics;
struct IToggleMenuFlyoutItemFactory;
struct IWebView;
struct IWebViewStatics;
struct IWebView2;
struct IWebViewStatics2;
struct IWebViewBrush;
struct IWebViewBrushStatics;
struct IWebViewContentLoadingEventArgs;
struct IWebViewDOMContentLoadedEventArgs;
struct IWebViewLongRunningScriptDetectedEventArgs;
struct IWebViewNavigationCompletedEventArgs;
struct IWebViewNavigationFailedEventArgs;
struct IWebViewNavigationStartingEventArgs;
struct IWebViewUnviewableContentIdentifiedEventArgs;
struct IWrapGrid;
struct IWrapGridStatics;
struct IControl;
struct IControlOverrides;
struct IControlProtected;
struct IControlStatics;
struct IControlFactory;
struct IControlTemplate;
struct Control;
struct VirtualizingPanel;
struct ContentPresenter;
struct ContentControl;
struct ItemsControl;
struct BackClickEventArgs;
struct DragItemsStartingEventArgs;
struct NotifyEventArgs;
struct SemanticZoomViewChangedEventArgs;
struct TextControlPasteEventArgs;
struct ColumnDefinitionCollection;
struct ContainerContentChangingEventArgs;
struct DataTemplateSelector;
struct DatePickerValueChangedEventArgs;
struct RowDefinitionCollection;
struct StyleSelector;
struct GroupStyle;
struct GroupStyleSelector;
struct SemanticZoomLocation;
struct ItemCollection;
struct ItemContainerGenerator;
struct UIElementCollection;
struct ScrollViewerViewChangedEventArgs;
struct ScrollViewerViewChangingEventArgs;
struct ScrollViewerView;
struct ToolTipService;
struct HubSectionHeaderClickEventArgs;
struct SectionsInViewChangedEventArgs;
struct WebViewNavigationFailedEventArgs;
struct HubSectionCollection;
struct SearchBoxQueryChangedEventArgs;
struct SearchBoxSuggestionsRequestedEventArgs;
struct SearchBoxQuerySubmittedEventArgs;
struct SearchBoxResultSuggestionChosenEventArgs;
struct TimePickerValueChangedEventArgs;
struct WebViewNavigationStartingEventArgs;
struct WebViewContentLoadingEventArgs;
struct WebViewDOMContentLoadedEventArgs;
struct WebViewNavigationCompletedEventArgs;
struct WebViewLongRunningScriptDetectedEventArgs;
struct WebViewUnviewableContentIdentifiedEventArgs;
struct ColumnDefinition;
struct RowDefinition;
struct Flyout;
struct MenuFlyout;
struct CleanUpVirtualizedItemEventArgs;
struct ContextMenuEventArgs;
struct ItemClickEventArgs;
struct SelectionChangedEventArgs;
struct TextChangedEventArgs;
struct ItemsPanelTemplate;
struct Border;
struct CaptureElement;
struct Image;
struct Panel;
struct Canvas;
struct Grid;
struct ItemsPresenter;
struct MediaElement;
struct RichTextBlockOverflow;
struct RichTextBlock;
struct ScrollContentPresenter;
struct StackPanel;
struct TextBlock;
struct VariableSizedWrapGrid;
struct Viewbox;
struct VirtualizingStackPanel;
struct IconElement;
struct BitmapIcon;
struct FontIcon;
struct ItemsStackPanel;
struct ItemsWrapGrid;
struct PathIcon;
struct SwapChainBackgroundPanel;
struct SwapChainPanel;
struct SymbolIcon;
struct WebView;
struct WrapGrid;
struct WebViewBrush;
struct ComboBoxItem;
struct DatePicker;
struct FlipViewItem;
struct GridViewItem;
struct GroupItem;
struct SemanticZoom;
struct ListBoxItem;
struct ListViewItem;
struct PasswordBox;
struct ProgressRing;
struct RichEditBox;
struct ScrollViewer;
struct SettingsFlyout;
struct TextBox;
struct ToggleSwitch;
struct ToolTip;
struct UserControl;
struct Button;
struct HyperlinkButton;
struct ProgressBar;
struct Slider;
struct ComboBox;
struct ListViewBase;
struct FlipView;
struct GridView;
struct ListBox;
struct ListView;
struct CheckBox;
struct RadioButton;
struct AppBar;
struct AppBarButton;
struct AppBarSeparator;
struct AppBarToggleButton;
struct CommandBar;
struct FlyoutPresenter;
struct Frame;
struct HubSection;
struct Hub;
struct ListViewBaseHeaderItem;
struct GridViewHeaderItem;
struct ListViewHeaderItem;
struct MenuFlyoutItemBase;
struct MenuFlyoutItem;
struct MenuFlyoutPresenter;
struct MenuFlyoutSeparator;
struct Page;
struct SearchBox;
struct TimePicker;
struct ToggleMenuFlyoutItem;
struct ControlTemplate;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Controls { namespace Primitives {

struct IDragCompletedEventHandler;
struct IDragDeltaEventHandler;
struct IDragStartedEventHandler;
struct IItemsChangedEventHandler;
struct IRangeBaseValueChangedEventHandler;
struct IScrollEventHandler;
struct IButtonBase;
struct IButtonBaseStatics;
struct IButtonBaseFactory;
struct ICarouselPanel;
struct ICarouselPanelFactory;
struct IComboBoxTemplateSettings;
struct IDragCompletedEventArgs;
struct IDragCompletedEventArgsFactory;
struct IDragDeltaEventArgs;
struct IDragDeltaEventArgsFactory;
struct IDragStartedEventArgs;
struct IDragStartedEventArgsFactory;
struct IFlyoutBase;
struct IFlyoutBaseOverrides;
struct IFlyoutBaseStatics;
struct IFlyoutBaseFactory;
struct IGridViewItemTemplateSettings;
struct IScrollSnapPointsInfo;
struct IItemsChangedEventArgs;
struct IListViewItemTemplateSettings;
struct IOrientedVirtualizingPanel;
struct IOrientedVirtualizingPanelFactory;
struct IPopup;
struct IPopupStatics;
struct IProgressBarTemplateSettings;
struct IProgressRingTemplateSettings;
struct IRangeBase;
struct IRangeBaseOverrides;
struct IRangeBaseStatics;
struct IRangeBaseFactory;
struct IRangeBaseValueChangedEventArgs;
struct IRepeatButton;
struct IRepeatButtonStatics;
struct IScrollBar;
struct IScrollBarStatics;
struct IScrollEventArgs;
struct ISelector;
struct ISelectorStatics;
struct ISelectorFactory;
struct ISelectorItem;
struct ISelectorItemStatics;
struct ISelectorItemFactory;
struct ISettingsFlyoutTemplateSettings;
struct IThumb;
struct IThumbStatics;
struct ITickBar;
struct ITickBarStatics;
struct IToggleButton;
struct IToggleButtonOverrides;
struct IToggleButtonStatics;
struct IToggleButtonFactory;
struct IToggleSwitchTemplateSettings;
struct IToolTipTemplateSettings;
struct IGridViewItemPresenter;
struct IGridViewItemPresenterStatics;
struct IGridViewItemPresenterFactory;
struct IListViewItemPresenter;
struct IListViewItemPresenterStatics;
struct IListViewItemPresenterFactory;
struct IGeneratorPositionHelper;
struct IGeneratorPositionHelperStatics;
struct ILayoutInformation;
struct ILayoutInformationStatics;
struct Popup;
struct ItemsChangedEventArgs;
struct FlyoutBase;
struct ComboBoxTemplateSettings;
struct GridViewItemTemplateSettings;
struct ListViewItemTemplateSettings;
struct ProgressBarTemplateSettings;
struct ProgressRingTemplateSettings;
struct SettingsFlyoutTemplateSettings;
struct ToggleSwitchTemplateSettings;
struct ToolTipTemplateSettings;
struct GeneratorPositionHelper;
struct DragCompletedEventArgs;
struct DragDeltaEventArgs;
struct DragStartedEventArgs;
struct RangeBaseValueChangedEventArgs;
struct ScrollEventArgs;
struct CarouselPanel;
struct OrientedVirtualizingPanel;
struct TickBar;
struct GridViewItemPresenter;
struct ListViewItemPresenter;
struct SelectorItem;
struct ButtonBase;
struct RangeBase;
struct RepeatButton;
struct ScrollBar;
struct Selector;
struct Thumb;
struct ToggleButton;
struct LayoutInformation;

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Data {

struct ICurrentChangingEventHandler;
struct IPropertyChangedEventHandler;
struct IBinding;
struct IValueConverter;
struct IBindingFactory;
struct IBinding2;
struct IBindingBase;
struct IBindingBaseFactory;
struct IBindingExpression;
struct IBindingExpressionFactory;
struct IBindingExpressionBase;
struct IBindingExpressionBaseFactory;
struct ICollectionViewSource;
struct ICollectionView;
struct ICollectionViewSourceStatics;
struct ICurrentChangingEventArgs;
struct ICurrentChangingEventArgsFactory;
struct ICollectionViewGroup;
struct ICustomProperty;
struct ICustomPropertyProvider;
struct INotifyPropertyChanged;
struct IPropertyChangedEventArgs;
struct IPropertyChangedEventArgsFactory;
struct IRelativeSource;
struct IRelativeSourceFactory;
struct IBindingOperations;
struct IBindingOperationsStatics;
struct ISupportIncrementalLoading;
struct ICollectionViewFactory;
struct CurrentChangingEventArgs;
struct PropertyChangedEventArgs;
struct BindingBase;
struct Binding;
struct BindingExpressionBase;
struct BindingExpression;
struct CollectionViewSource;
struct RelativeSource;
struct BindingOperations;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Documents {

struct IBlock;
struct IBlockStatics;
struct IBlockFactory;
struct IBold;
struct IGlyphs;
struct IGlyphsStatics;
struct IInline;
struct IInlineFactory;
struct IInlineUIContainer;
struct IItalic;
struct ILineBreak;
struct IParagraph;
struct IParagraphStatics;
struct IRun;
struct IRunStatics;
struct ISpan;
struct ISpanFactory;
struct ITextElement;
struct ITextElementOverrides;
struct ITextElementStatics;
struct ITextElementFactory;
struct ITextPointer;
struct ITypography;
struct ITypographyStatics;
struct IUnderline;
struct IHyperlink;
struct IHyperlinkStatics;
struct IHyperlinkClickEventArgs;
struct BlockCollection;
struct InlineCollection;
struct TextPointer;
struct Typography;
struct TextElement;
struct Block;
struct Inline;
struct InlineUIContainer;
struct LineBreak;
struct Paragraph;
struct Run;
struct Span;
struct Bold;
struct Italic;
struct Underline;
struct Hyperlink;
struct HyperlinkClickEventArgs;
struct Glyphs;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Hosting {

struct IXamlUIPresenterHost;
struct IXamlUIPresenterHost2;
struct IXamlUIPresenter;
struct IXamlUIPresenterStatics;
struct IXamlUIPresenterStatics2;
struct XamlUIPresenter;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Input {

struct IDoubleTappedEventHandler;
struct IHoldingEventHandler;
struct IKeyEventHandler;
struct IManipulationCompletedEventHandler;
struct IManipulationDeltaEventHandler;
struct IManipulationInertiaStartingEventHandler;
struct IManipulationStartedEventHandler;
struct IManipulationStartingEventHandler;
struct IPointerEventHandler;
struct IRightTappedEventHandler;
struct ITappedEventHandler;
struct IDoubleTappedRoutedEventArgs;
struct IFocusManager;
struct IFocusManagerStatics;
struct IFocusManagerStatics2;
struct IHoldingRoutedEventArgs;
struct ICommand;
struct IInertiaExpansionBehavior;
struct IInertiaRotationBehavior;
struct IInertiaTranslationBehavior;
struct IInputScope;
struct IInputScopeName;
struct IInputScopeNameFactory;
struct IKeyRoutedEventArgs;
struct IManipulationCompletedRoutedEventArgs;
struct IManipulationDeltaRoutedEventArgs;
struct IManipulationInertiaStartingRoutedEventArgs;
struct IManipulationPivot;
struct IManipulationPivotFactory;
struct IManipulationStartedRoutedEventArgs;
struct IManipulationStartedRoutedEventArgsFactory;
struct IManipulationStartingRoutedEventArgs;
struct IPointer;
struct IPointerRoutedEventArgs;
struct IRightTappedRoutedEventArgs;
struct ITappedRoutedEventArgs;
struct Pointer;
struct DoubleTappedRoutedEventArgs;
struct FocusManager;
struct HoldingRoutedEventArgs;
struct InertiaExpansionBehavior;
struct InertiaRotationBehavior;
struct InertiaTranslationBehavior;
struct InputScope;
struct InputScopeName;
struct KeyRoutedEventArgs;
struct ManipulationCompletedRoutedEventArgs;
struct ManipulationDeltaRoutedEventArgs;
struct ManipulationInertiaStartingRoutedEventArgs;
struct ManipulationPivot;
struct ManipulationStartedRoutedEventArgs;
struct ManipulationStartingRoutedEventArgs;
struct PointerRoutedEventArgs;
struct RightTappedRoutedEventArgs;
struct TappedRoutedEventArgs;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Interop {

struct INotifyCollectionChangedEventHandler;
struct IBindableVectorChangedEventHandler;
struct IBindableIterable;
struct IBindableIterator;
struct IBindableVector;
struct IBindableVectorView;
struct INotifyCollectionChanged;
struct INotifyCollectionChangedEventArgs;
struct INotifyCollectionChangedEventArgsFactory;
struct IBindableObservableVector;
struct NotifyCollectionChangedEventArgs;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Markup {

struct IXamlReader;
struct IXamlReaderStatics;
struct IComponentConnector;
struct IXamlType;
struct IXamlMember;
struct IXamlMetadataProvider;
struct IXamlBinaryWriter;
struct IXamlBinaryWriterStatics;
struct XamlReader;
struct XamlBinaryWriter;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media {

struct IRateChangedRoutedEventHandler;
struct ITimelineMarkerRoutedEventHandler;
struct IMatrixHelper;
struct IMatrixHelperStatics;
struct IArcSegment;
struct IArcSegmentStatics;
struct IBezierSegment;
struct IBezierSegmentStatics;
struct IBitmapCache;
struct IBrush;
struct IBrushStatics;
struct IBrushFactory;
struct ICacheMode;
struct ICacheModeFactory;
struct ICompositeTransform;
struct ICompositeTransformStatics;
struct IEllipseGeometry;
struct IEllipseGeometryStatics;
struct IFontFamily;
struct IFontFamilyFactory;
struct IGeneralTransform;
struct IGeneralTransformOverrides;
struct IGeneralTransformFactory;
struct IGeometry;
struct IGeometryStatics;
struct IGeometryFactory;
struct IGeometryGroup;
struct IGeometryGroupStatics;
struct IGradientBrush;
struct IGradientBrushStatics;
struct IGradientBrushFactory;
struct IGradientStop;
struct IGradientStopStatics;
struct IImageBrush;
struct IImageBrushStatics;
struct IImageSource;
struct IImageSourceFactory;
struct ILinearGradientBrush;
struct ILinearGradientBrushStatics;
struct ILinearGradientBrushFactory;
struct ILineGeometry;
struct ILineGeometryStatics;
struct ILineSegment;
struct ILineSegmentStatics;
struct IMatrix3DProjection;
struct IMatrix3DProjectionStatics;
struct IMatrixTransform;
struct IMatrixTransformStatics;
struct IPathFigure;
struct IPathFigureStatics;
struct IPathGeometry;
struct IPathGeometryStatics;
struct IPathSegment;
struct IPathSegmentFactory;
struct IPlaneProjection;
struct IPlaneProjectionStatics;
struct IPolyBezierSegment;
struct IPolyBezierSegmentStatics;
struct IPolyLineSegment;
struct IPolyLineSegmentStatics;
struct IPolyQuadraticBezierSegment;
struct IPolyQuadraticBezierSegmentStatics;
struct IProjection;
struct IProjectionFactory;
struct IQuadraticBezierSegment;
struct IQuadraticBezierSegmentStatics;
struct IRateChangedRoutedEventArgs;
struct IRectangleGeometry;
struct IRectangleGeometryStatics;
struct IRenderingEventArgs;
struct IRotateTransform;
struct IRotateTransformStatics;
struct IScaleTransform;
struct IScaleTransformStatics;
struct ISkewTransform;
struct ISkewTransformStatics;
struct ISolidColorBrush;
struct ISolidColorBrushStatics;
struct ISolidColorBrushFactory;
struct ITileBrush;
struct ITileBrushStatics;
struct ITileBrushFactory;
struct ITimelineMarker;
struct ITimelineMarkerStatics;
struct ITimelineMarkerRoutedEventArgs;
struct ITransform;
struct ITransformFactory;
struct ITransformGroup;
struct ITransformGroupStatics;
struct ITranslateTransform;
struct ITranslateTransformStatics;
struct IVisualTreeHelper;
struct IVisualTreeHelperStatics;
struct IVisualTreeHelperStatics2;
struct ICompositionTarget;
struct ICompositionTargetStatics;
struct MatrixHelper;
struct Brush;
struct CacheMode;
struct BitmapCache;
struct DoubleCollection;
struct FontFamily;
struct GeneralTransform;
struct Geometry;
struct EllipseGeometry;
struct GeometryCollection;
struct GeometryGroup;
struct GradientStopCollection;
struct GradientBrush;
struct GradientStop;
struct ImageSource;
struct LinearGradientBrush;
struct LineGeometry;
struct PathSegmentCollection;
struct PathFigure;
struct PathFigureCollection;
struct PathGeometry;
struct PathSegment;
struct ArcSegment;
struct BezierSegment;
struct LineSegment;
struct PointCollection;
struct PolyBezierSegment;
struct PolyLineSegment;
struct PolyQuadraticBezierSegment;
struct Projection;
struct Matrix3DProjection;
struct PlaneProjection;
struct QuadraticBezierSegment;
struct RateChangedRoutedEventArgs;
struct RectangleGeometry;
struct RenderingEventArgs;
struct SolidColorBrush;
struct TileBrush;
struct ImageBrush;
struct TimelineMarker;
struct TimelineMarkerCollection;
struct TimelineMarkerRoutedEventArgs;
struct Transform;
struct CompositeTransform;
struct MatrixTransform;
struct RotateTransform;
struct ScaleTransform;
struct SkewTransform;
struct TransformCollection;
struct TransformGroup;
struct TranslateTransform;
struct VisualTreeHelper;
struct CompositionTarget;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Animation {

struct IKeyTimeHelper;
struct IKeyTimeHelperStatics;
struct IRepeatBehaviorHelper;
struct IRepeatBehaviorHelperStatics;
struct IAddDeleteThemeTransition;
struct IBackEase;
struct IBackEaseStatics;
struct IBeginStoryboard;
struct IBeginStoryboardStatics;
struct IBounceEase;
struct IBounceEaseStatics;
struct ICircleEase;
struct IColorAnimation;
struct IColorAnimationStatics;
struct IColorAnimationUsingKeyFrames;
struct IColorAnimationUsingKeyFramesStatics;
struct IColorKeyFrame;
struct IColorKeyFrameStatics;
struct IColorKeyFrameFactory;
struct IContentThemeTransition;
struct IContentThemeTransitionStatics;
struct ICubicEase;
struct IDiscreteColorKeyFrame;
struct IDiscreteDoubleKeyFrame;
struct IDiscreteObjectKeyFrame;
struct IDiscretePointKeyFrame;
struct IDoubleAnimation;
struct IDoubleAnimationStatics;
struct IDoubleAnimationUsingKeyFrames;
struct IDoubleAnimationUsingKeyFramesStatics;
struct IDoubleKeyFrame;
struct IDoubleKeyFrameStatics;
struct IDoubleKeyFrameFactory;
struct IDragItemThemeAnimation;
struct IDragItemThemeAnimationStatics;
struct IDragOverThemeAnimation;
struct IDragOverThemeAnimationStatics;
struct IDropTargetItemThemeAnimation;
struct IDropTargetItemThemeAnimationStatics;
struct IEasingColorKeyFrame;
struct IEasingColorKeyFrameStatics;
struct IEasingDoubleKeyFrame;
struct IEasingDoubleKeyFrameStatics;
struct IEasingFunctionBase;
struct IEasingFunctionBaseStatics;
struct IEasingFunctionBaseFactory;
struct IEasingPointKeyFrame;
struct IEasingPointKeyFrameStatics;
struct IEdgeUIThemeTransition;
struct IEdgeUIThemeTransitionStatics;
struct IElasticEase;
struct IElasticEaseStatics;
struct IEntranceThemeTransition;
struct IEntranceThemeTransitionStatics;
struct IExponentialEase;
struct IExponentialEaseStatics;
struct IFadeInThemeAnimation;
struct IFadeInThemeAnimationStatics;
struct IFadeOutThemeAnimation;
struct IFadeOutThemeAnimationStatics;
struct IKeySpline;
struct ILinearColorKeyFrame;
struct ILinearDoubleKeyFrame;
struct ILinearPointKeyFrame;
struct INavigationTransitionInfo;
struct INavigationTransitionInfoOverrides;
struct INavigationTransitionInfoFactory;
struct IObjectAnimationUsingKeyFrames;
struct IObjectAnimationUsingKeyFramesStatics;
struct IObjectKeyFrame;
struct IObjectKeyFrameStatics;
struct IObjectKeyFrameFactory;
struct IPaneThemeTransition;
struct IPaneThemeTransitionStatics;
struct IPointAnimation;
struct IPointAnimationStatics;
struct IPointAnimationUsingKeyFrames;
struct IPointAnimationUsingKeyFramesStatics;
struct IPointerDownThemeAnimation;
struct IPointerDownThemeAnimationStatics;
struct IPointerUpThemeAnimation;
struct IPointerUpThemeAnimationStatics;
struct IPointKeyFrame;
struct IPointKeyFrameStatics;
struct IPointKeyFrameFactory;
struct IPopInThemeAnimation;
struct IPopInThemeAnimationStatics;
struct IPopOutThemeAnimation;
struct IPopOutThemeAnimationStatics;
struct IPopupThemeTransition;
struct IPopupThemeTransitionStatics;
struct IPowerEase;
struct IPowerEaseStatics;
struct IQuadraticEase;
struct IQuarticEase;
struct IQuinticEase;
struct IReorderThemeTransition;
struct IRepositionThemeAnimation;
struct IRepositionThemeAnimationStatics;
struct IRepositionThemeTransition;
struct ISineEase;
struct ISplineColorKeyFrame;
struct ISplineColorKeyFrameStatics;
struct ISplineDoubleKeyFrame;
struct ISplineDoubleKeyFrameStatics;
struct ISplinePointKeyFrame;
struct ISplinePointKeyFrameStatics;
struct ISplitCloseThemeAnimation;
struct ISplitCloseThemeAnimationStatics;
struct ISplitOpenThemeAnimation;
struct ISplitOpenThemeAnimationStatics;
struct IStoryboard;
struct IStoryboardStatics;
struct ISwipeBackThemeAnimation;
struct ISwipeBackThemeAnimationStatics;
struct ISwipeHintThemeAnimation;
struct ISwipeHintThemeAnimationStatics;
struct ITimeline;
struct ITimelineStatics;
struct ITimelineFactory;
struct ITransition;
struct ITransitionFactory;
struct KeyTimeHelper;
struct RepeatBehaviorHelper;
struct TransitionCollection;
struct BeginStoryboard;
struct ColorKeyFrameCollection;
struct ColorKeyFrame;
struct DiscreteColorKeyFrame;
struct DoubleKeyFrameCollection;
struct DoubleKeyFrame;
struct DiscreteDoubleKeyFrame;
struct EasingColorKeyFrame;
struct EasingDoubleKeyFrame;
struct EasingFunctionBase;
struct BackEase;
struct BounceEase;
struct CircleEase;
struct CubicEase;
struct ElasticEase;
struct ExponentialEase;
struct KeySpline;
struct LinearColorKeyFrame;
struct LinearDoubleKeyFrame;
struct NavigationTransitionInfo;
struct ObjectKeyFrameCollection;
struct ObjectKeyFrame;
struct DiscreteObjectKeyFrame;
struct PointKeyFrameCollection;
struct PointKeyFrame;
struct DiscretePointKeyFrame;
struct EasingPointKeyFrame;
struct LinearPointKeyFrame;
struct PowerEase;
struct QuadraticEase;
struct QuarticEase;
struct QuinticEase;
struct SineEase;
struct SplineColorKeyFrame;
struct SplineDoubleKeyFrame;
struct SplinePointKeyFrame;
struct TimelineCollection;
struct Timeline;
struct Storyboard;
struct ColorAnimation;
struct ColorAnimationUsingKeyFrames;
struct DoubleAnimation;
struct DoubleAnimationUsingKeyFrames;
struct DragItemThemeAnimation;
struct DragOverThemeAnimation;
struct DropTargetItemThemeAnimation;
struct FadeInThemeAnimation;
struct FadeOutThemeAnimation;
struct ObjectAnimationUsingKeyFrames;
struct PointAnimation;
struct PointAnimationUsingKeyFrames;
struct PointerDownThemeAnimation;
struct PointerUpThemeAnimation;
struct PopInThemeAnimation;
struct PopOutThemeAnimation;
struct RepositionThemeAnimation;
struct SplitCloseThemeAnimation;
struct SplitOpenThemeAnimation;
struct SwipeBackThemeAnimation;
struct SwipeHintThemeAnimation;
struct Transition;
struct AddDeleteThemeTransition;
struct ContentThemeTransition;
struct EdgeUIThemeTransition;
struct EntranceThemeTransition;
struct PaneThemeTransition;
struct PopupThemeTransition;
struct ReorderThemeTransition;
struct RepositionThemeTransition;

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Imaging {

struct IDownloadProgressEventHandler;
struct IBitmapImage;
struct IBitmapImageStatics;
struct IBitmapImageFactory;
struct IBitmapImage2;
struct IBitmapImageStatics2;
struct IBitmapSource;
struct IBitmapSourceStatics;
struct IBitmapSourceFactory;
struct IDownloadProgressEventArgs;
struct IRenderTargetBitmap;
struct IRenderTargetBitmapStatics;
struct ISurfaceImageSource;
struct ISurfaceImageSourceFactory;
struct IVirtualSurfaceImageSource;
struct IVirtualSurfaceImageSourceFactory;
struct IWriteableBitmap;
struct IWriteableBitmapFactory;
struct DownloadProgressEventArgs;
struct BitmapSource;
struct BitmapImage;
struct RenderTargetBitmap;
struct SurfaceImageSource;
struct VirtualSurfaceImageSource;
struct WriteableBitmap;

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Media3D {

struct IMatrix3DHelper;
struct IMatrix3DHelperStatics;
struct Matrix3DHelper;

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Navigation {

struct ILoadCompletedEventHandler;
struct INavigatedEventHandler;
struct INavigatingCancelEventHandler;
struct INavigationFailedEventHandler;
struct INavigationStoppedEventHandler;
struct INavigatingCancelEventArgs;
struct INavigatingCancelEventArgs2;
struct INavigationEventArgs;
struct INavigationEventArgs2;
struct INavigationFailedEventArgs;
struct IPageStackEntry;
struct IPageStackEntryStatics;
struct IPageStackEntryFactory;
struct NavigationEventArgs;
struct NavigatingCancelEventArgs;
struct NavigationFailedEventArgs;
struct PageStackEntry;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Printing {

struct IAddPagesEventHandler;
struct IGetPreviewPageEventHandler;
struct IPaginateEventHandler;
struct IAddPagesEventArgs;
struct IGetPreviewPageEventArgs;
struct IPaginateEventArgs;
struct IPrintDocument;
struct IPrintDocumentStatics;
struct IPrintDocumentFactory;
struct AddPagesEventArgs;
struct GetPreviewPageEventArgs;
struct PaginateEventArgs;
struct PrintDocument;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Resources {

struct ICustomXamlResourceLoader;
struct ICustomXamlResourceLoaderOverrides;
struct ICustomXamlResourceLoaderStatics;
struct ICustomXamlResourceLoaderFactory;
struct CustomXamlResourceLoader;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Shapes {

struct IEllipse;
struct ILine;
struct ILineStatics;
struct IPath;
struct IPathStatics;
struct IPathFactory;
struct IPolygon;
struct IPolygonStatics;
struct IPolyline;
struct IPolylineStatics;
struct IRectangle;
struct IRectangleStatics;
struct IShape;
struct IShapeStatics;
struct IShapeFactory;
struct Shape;
struct Ellipse;
struct Line;
struct Path;
struct Polygon;
struct Polyline;
struct Rectangle;

}}}}}

namespace Modern { namespace Windows { namespace Web {

struct IUriToStreamResolver;
struct IWebErrorStatics;
struct WebError;

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

struct IResourceCollection;
struct IWorkspace;
struct IServiceDocument;
struct IAtomPubClient;
struct IAtomPubClientFactory;
struct ServiceDocument;
struct ResourceCollection;
struct Workspace;
struct AtomPubClient;

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

struct IHttpClientFactory;
struct IHttpClient;
struct IHttpContent;
struct IHttpCookieManager;
struct IHttpCookieFactory;
struct IHttpCookie;
struct IHttpMethodStatics;
struct IHttpMethodFactory;
struct IHttpMethod;
struct IHttpTransportInformation;
struct IHttpRequestMessageFactory;
struct IHttpRequestMessage;
struct IHttpResponseMessageFactory;
struct IHttpResponseMessage;
struct IHttpStringContentFactory;
struct IHttpBufferContentFactory;
struct IHttpStreamContentFactory;
struct IHttpFormUrlEncodedContentFactory;
struct IHttpMultipartContentFactory;
struct IHttpMultipartContent;
struct IHttpMultipartFormDataContentFactory;
struct IHttpMultipartFormDataContent;
struct HttpCookieManager;
struct HttpRequestMessage;
struct HttpResponseMessage;
struct HttpMethod;
struct HttpClient;
struct HttpCookie;
struct HttpCookieCollection;
struct HttpTransportInformation;
struct HttpStringContent;
struct HttpBufferContent;
struct HttpStreamContent;
struct HttpFormUrlEncodedContent;
struct HttpMultipartContent;
struct HttpMultipartFormDataContent;

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

struct IHttpFilter;
struct IHttpCacheControl;
struct IHttpBaseProtocolFilter;
struct HttpCacheControl;
struct HttpBaseProtocolFilter;

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

struct IHttpContentHeaderCollection;
struct IHttpRequestHeaderCollection;
struct IHttpResponseHeaderCollection;
struct IHttpCacheDirectiveHeaderValueCollection;
struct IHttpChallengeHeaderValueStatics;
struct IHttpChallengeHeaderValueFactory;
struct IHttpChallengeHeaderValue;
struct IHttpChallengeHeaderValueCollection;
struct IHttpCredentialsHeaderValueStatics;
struct IHttpCredentialsHeaderValueFactory;
struct IHttpCredentialsHeaderValue;
struct IHttpConnectionOptionHeaderValueStatics;
struct IHttpConnectionOptionHeaderValueFactory;
struct IHttpConnectionOptionHeaderValue;
struct IHttpConnectionOptionHeaderValueCollection;
struct IHttpContentCodingHeaderValueStatics;
struct IHttpContentCodingHeaderValueFactory;
struct IHttpContentCodingHeaderValue;
struct IHttpContentCodingHeaderValueCollection;
struct IHttpContentDispositionHeaderValueStatics;
struct IHttpContentDispositionHeaderValueFactory;
struct IHttpContentDispositionHeaderValue;
struct IHttpContentRangeHeaderValueStatics;
struct IHttpContentRangeHeaderValueFactory;
struct IHttpContentRangeHeaderValue;
struct IHttpCookiePairHeaderValueStatics;
struct IHttpCookiePairHeaderValueFactory;
struct IHttpCookiePairHeaderValue;
struct IHttpCookiePairHeaderValueCollection;
struct IHttpDateOrDeltaHeaderValueStatics;
struct IHttpDateOrDeltaHeaderValue;
struct IHttpExpectationHeaderValueStatics;
struct IHttpExpectationHeaderValueFactory;
struct IHttpExpectationHeaderValue;
struct IHttpExpectationHeaderValueCollection;
struct IHttpLanguageHeaderValueCollection;
struct IHttpLanguageRangeWithQualityHeaderValueStatics;
struct IHttpLanguageRangeWithQualityHeaderValueFactory;
struct IHttpLanguageRangeWithQualityHeaderValue;
struct IHttpLanguageRangeWithQualityHeaderValueCollection;
struct IHttpMediaTypeHeaderValueStatics;
struct IHttpMediaTypeHeaderValueFactory;
struct IHttpMediaTypeHeaderValue;
struct IHttpMediaTypeWithQualityHeaderValueStatics;
struct IHttpMediaTypeWithQualityHeaderValueFactory;
struct IHttpMediaTypeWithQualityHeaderValue;
struct IHttpMediaTypeWithQualityHeaderValueCollection;
struct IHttpMethodHeaderValueCollection;
struct IHttpNameValueHeaderValueStatics;
struct IHttpNameValueHeaderValueFactory;
struct IHttpNameValueHeaderValue;
struct IHttpProductHeaderValueStatics;
struct IHttpProductHeaderValueFactory;
struct IHttpProductHeaderValue;
struct IHttpProductInfoHeaderValueStatics;
struct IHttpProductInfoHeaderValueFactory;
struct IHttpProductInfoHeaderValue;
struct IHttpProductInfoHeaderValueCollection;
struct IHttpContentCodingWithQualityHeaderValueStatics;
struct IHttpContentCodingWithQualityHeaderValueFactory;
struct IHttpContentCodingWithQualityHeaderValue;
struct IHttpContentCodingWithQualityHeaderValueCollection;
struct IHttpTransferCodingHeaderValueStatics;
struct IHttpTransferCodingHeaderValueFactory;
struct IHttpTransferCodingHeaderValue;
struct IHttpTransferCodingHeaderValueCollection;
struct HttpContentHeaderCollection;
struct HttpRequestHeaderCollection;
struct HttpResponseHeaderCollection;
struct HttpContentDispositionHeaderValue;
struct HttpContentCodingHeaderValueCollection;
struct HttpLanguageHeaderValueCollection;
struct HttpContentRangeHeaderValue;
struct HttpMediaTypeHeaderValue;
struct HttpMediaTypeWithQualityHeaderValueCollection;
struct HttpContentCodingWithQualityHeaderValueCollection;
struct HttpLanguageRangeWithQualityHeaderValueCollection;
struct HttpCredentialsHeaderValue;
struct HttpCacheDirectiveHeaderValueCollection;
struct HttpConnectionOptionHeaderValueCollection;
struct HttpCookiePairHeaderValueCollection;
struct HttpExpectationHeaderValueCollection;
struct HttpTransferCodingHeaderValueCollection;
struct HttpProductInfoHeaderValueCollection;
struct HttpMethodHeaderValueCollection;
struct HttpChallengeHeaderValueCollection;
struct HttpDateOrDeltaHeaderValue;
struct HttpNameValueHeaderValue;
struct HttpChallengeHeaderValue;
struct HttpConnectionOptionHeaderValue;
struct HttpContentCodingHeaderValue;
struct HttpCookiePairHeaderValue;
struct HttpExpectationHeaderValue;
struct HttpLanguageRangeWithQualityHeaderValue;
struct HttpMediaTypeWithQualityHeaderValue;
struct HttpProductHeaderValue;
struct HttpProductInfoHeaderValue;
struct HttpContentCodingWithQualityHeaderValue;
struct HttpTransferCodingHeaderValue;

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

struct ISyndicationAttribute;
struct ISyndicationAttributeFactory;
struct ISyndicationNode;
struct ISyndicationNodeFactory;
struct ISyndicationGenerator;
struct ISyndicationGeneratorFactory;
struct ISyndicationText;
struct ISyndicationTextFactory;
struct ISyndicationContent;
struct ISyndicationContentFactory;
struct ISyndicationLink;
struct ISyndicationLinkFactory;
struct ISyndicationPerson;
struct ISyndicationPersonFactory;
struct ISyndicationCategory;
struct ISyndicationCategoryFactory;
struct ISyndicationItem;
struct ISyndicationItemFactory;
struct ISyndicationFeed;
struct ISyndicationFeedFactory;
struct ISyndicationClient;
struct ISyndicationClientFactory;
struct ISyndicationErrorStatics;
struct SyndicationAttribute;
struct SyndicationNode;
struct SyndicationGenerator;
struct SyndicationText;
struct SyndicationContent;
struct SyndicationLink;
struct SyndicationPerson;
struct SyndicationCategory;
struct SyndicationFeed;
struct SyndicationItem;
struct SyndicationClient;
struct SyndicationError;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel {

template <typename T>
struct impl_ISuspendingDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ISuspendingOperation
{
	Windows::ApplicationModel::SuspendingDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
struct impl_ISuspendingEventArgs
{
	Windows::ApplicationModel::SuspendingOperation SuspendingOperation() const;
};

template <typename T>
struct impl_IPackageId
{
	String Name() const;
	Windows::ApplicationModel::PackageVersion Version() const;
	Windows::System::ProcessorArchitecture Architecture() const;
	String ResourceId() const;
	String Publisher() const;
	String PublisherId() const;
	String FullName() const;
	String FamilyName() const;
};

template <typename T>
struct impl_IPackage
{
	Windows::ApplicationModel::PackageId Id() const;
	Windows::Storage::StorageFolder InstalledLocation() const;
	bool IsFramework() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Package> Dependencies() const;
};

template <typename T>
struct impl_IPackage2
{
	String DisplayName() const;
	String PublisherDisplayName() const;
	String Description() const;
	Windows::Foundation::Uri Logo() const;
	bool IsResourcePackage() const;
	bool IsBundle() const;
	bool IsDevelopmentMode() const;
};

template <typename T>
struct impl_IPackageStatics
{
	Windows::ApplicationModel::Package Current() const;
};

template <typename T>
struct impl_IDesignModeStatics
{
	bool DesignModeEnabled() const;
};

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

template <typename T>
struct impl_ISplashScreen
{
	Windows::Foundation::Rect ImageLocation() const;
	EventRegistrationToken Dismissed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Dismissed(F handler) const;
	void Dismissed(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IActivatedEventArgs
{
	Windows::ApplicationModel::Activation::ActivationKind Kind() const;
	Windows::ApplicationModel::Activation::ApplicationExecutionState PreviousExecutionState() const;
	Windows::ApplicationModel::Activation::SplashScreen SplashScreen() const;
};

template <typename T>
struct impl_IApplicationViewActivatedEventArgs
{
	int CurrentlyShownApplicationViewId() const;
};

template <typename T>
struct impl_IPrelaunchActivatedEventArgs
{
	bool PrelaunchActivated() const;
};

template <typename T>
struct impl_ILaunchActivatedEventArgs
{
	String Arguments() const;
	String TileId() const;
};

template <typename T>
struct impl_ISearchActivatedEventArgs
{
	String QueryText() const;
	String Language() const;
};

template <typename T>
struct impl_ISearchActivatedEventArgsWithLinguisticDetails
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
struct impl_IShareTargetActivatedEventArgs
{
	Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation ShareOperation() const;
};

template <typename T>
struct impl_IFileActivatedEventArgs
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem> Files() const;
	String Verb() const;
};

template <typename T>
struct impl_IFileActivatedEventArgsWithNeighboringFiles
{
	Windows::Storage::Search::StorageFileQueryResult NeighboringFilesQuery() const;
};

template <typename T>
struct impl_IProtocolActivatedEventArgs
{
	Windows::Foundation::Uri Uri() const;
};

template <typename T>
struct impl_IFileOpenPickerActivatedEventArgs
{
	Windows::Storage::Pickers::Provider::FileOpenPickerUI FileOpenPickerUI() const;
};

template <typename T>
struct impl_IFileSavePickerActivatedEventArgs
{
	Windows::Storage::Pickers::Provider::FileSavePickerUI FileSavePickerUI() const;
};

template <typename T>
struct impl_ICachedFileUpdaterActivatedEventArgs
{
	Windows::Storage::Provider::CachedFileUpdaterUI CachedFileUpdaterUI() const;
};

template <typename T>
struct impl_IContactPickerActivatedEventArgs
{
	Windows::ApplicationModel::Contacts::Provider::ContactPickerUI ContactPickerUI() const;
};

template <typename T>
struct impl_IDeviceActivatedEventArgs
{
	String DeviceInformationId() const;
	String Verb() const;
};

template <typename T>
struct impl_IPrintTaskSettingsActivatedEventArgs
{
	Windows::Devices::Printers::Extensions::PrintTaskConfiguration Configuration() const;
};

template <typename T>
struct impl_ICameraSettingsActivatedEventArgs
{
	IInspectable VideoDeviceController() const;
	IInspectable VideoDeviceExtension() const;
};

template <typename T>
struct impl_IAppointmentsProviderActivatedEventArgs
{
	String Verb() const;
};

template <typename T>
struct impl_IAppointmentsProviderAddAppointmentActivatedEventArgs
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation AddAppointmentOperation() const;
};

template <typename T>
struct impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation ReplaceAppointmentOperation() const;
};

template <typename T>
struct impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation RemoveAppointmentOperation() const;
};

template <typename T>
struct impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs
{
	Windows::Foundation::DateTime TimeToShow() const;
	Windows::Foundation::TimeSpan Duration() const;
};

template <typename T>
struct impl_IContactActivatedEventArgs
{
	String Verb() const;
};

template <typename T>
struct impl_IContactCallActivatedEventArgs
{
	String ServiceId() const;
	String ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactMessageActivatedEventArgs
{
	String ServiceId() const;
	String ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactMapActivatedEventArgs
{
	Windows::ApplicationModel::Contacts::ContactAddress Address() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactPostActivatedEventArgs
{
	String ServiceId() const;
	String ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactVideoCallActivatedEventArgs
{
	String ServiceId() const;
	String ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactsProviderActivatedEventArgs
{
	String Verb() const;
};

template <typename T>
struct impl_IRestrictedLaunchActivatedEventArgs
{
	IInspectable SharedContext() const;
};

template <typename T>
struct impl_ILockScreenCallActivatedEventArgs
{
	Windows::ApplicationModel::Calls::LockScreenCallUI CallUI() const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

template <typename T>
struct impl_IAppointmentManagerStatics
{
	Windows::Foundation::IAsyncOperation<String> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<String> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncAction ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration) const;
};

template <typename T>
struct impl_IAppointmentParticipant
{
	String DisplayName() const;
	void DisplayName(String const & value) const;
	template <unsigned S0> void DisplayName(wchar_t const (&value)[S0]) const;
	String Address() const;
	void Address(String const & value) const;
	template <unsigned S0> void Address(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IAppointmentInvitee
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantRole Role() const;
	void Role(Windows::ApplicationModel::Appointments::AppointmentParticipantRole value) const;
	Windows::ApplicationModel::Appointments::AppointmentParticipantResponse Response() const;
	void Response(Windows::ApplicationModel::Appointments::AppointmentParticipantResponse value) const;
};

template <typename T>
struct impl_IAppointmentRecurrence
{
	Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit Unit() const;
	void Unit(Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit value) const;
	Windows::Foundation::IReference<unsigned> Occurrences() const;
	void Occurrences(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Until() const;
	void Until(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	unsigned Interval() const;
	void Interval(unsigned value) const;
	Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek DaysOfWeek() const;
	void DaysOfWeek(Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek value) const;
	Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth WeekOfMonth() const;
	void WeekOfMonth(Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth value) const;
	unsigned Month() const;
	void Month(unsigned value) const;
	unsigned Day() const;
	void Day(unsigned value) const;
};

template <typename T>
struct impl_IAppointment
{
	Windows::Foundation::DateTime StartTime() const;
	void StartTime(Windows::Foundation::DateTime const & value) const;
	Windows::Foundation::TimeSpan Duration() const;
	void Duration(Windows::Foundation::TimeSpan const & value) const;
	String Location() const;
	void Location(String const & value) const;
	template <unsigned S0> void Location(wchar_t const (&value)[S0]) const;
	String Subject() const;
	void Subject(String const & value) const;
	template <unsigned S0> void Subject(wchar_t const (&value)[S0]) const;
	String Details() const;
	void Details(String const & value) const;
	template <unsigned S0> void Details(wchar_t const (&value)[S0]) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> Reminder() const;
	void Reminder(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::ApplicationModel::Appointments::AppointmentOrganizer Organizer() const;
	void Organizer(Windows::ApplicationModel::Appointments::AppointmentOrganizer const & value) const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee> Invitees() const;
	Windows::ApplicationModel::Appointments::AppointmentRecurrence Recurrence() const;
	void Recurrence(Windows::ApplicationModel::Appointments::AppointmentRecurrence const & value) const;
	Windows::ApplicationModel::Appointments::AppointmentBusyStatus BusyStatus() const;
	void BusyStatus(Windows::ApplicationModel::Appointments::AppointmentBusyStatus value) const;
	bool AllDay() const;
	void AllDay(bool value) const;
	Windows::ApplicationModel::Appointments::AppointmentSensitivity Sensitivity() const;
	void Sensitivity(Windows::ApplicationModel::Appointments::AppointmentSensitivity value) const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

template <typename T>
struct impl_IAppointmentsProviderLaunchActionVerbsStatics
{
	String AddAppointment() const;
	String ReplaceAppointment() const;
	String RemoveAppointment() const;
	String ShowTimeFrame() const;
};

template <typename T>
struct impl_IAddAppointmentOperation
{
	Windows::ApplicationModel::Appointments::Appointment AppointmentInformation() const;
	String SourcePackageFamilyName() const;
	void ReportCompleted(String const & itemId) const;
	template <unsigned S0> void ReportCompleted(wchar_t const (&itemId)[S0]) const;
	void ReportCanceled() const;
	void ReportError(String const & value) const;
	template <unsigned S0> void ReportError(wchar_t const (&value)[S0]) const;
	void DismissUI() const;
};

template <typename T>
struct impl_IReplaceAppointmentOperation
{
	String AppointmentId() const;
	Windows::ApplicationModel::Appointments::Appointment AppointmentInformation() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> InstanceStartDate() const;
	String SourcePackageFamilyName() const;
	void ReportCompleted(String const & itemId) const;
	template <unsigned S0> void ReportCompleted(wchar_t const (&itemId)[S0]) const;
	void ReportCanceled() const;
	void ReportError(String const & value) const;
	template <unsigned S0> void ReportError(wchar_t const (&value)[S0]) const;
	void DismissUI() const;
};

template <typename T>
struct impl_IRemoveAppointmentOperation
{
	String AppointmentId() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> InstanceStartDate() const;
	String SourcePackageFamilyName() const;
	void ReportCompleted() const;
	void ReportCanceled() const;
	void ReportError(String const & value) const;
	template <unsigned S0> void ReportError(wchar_t const (&value)[S0]) const;
	void DismissUI() const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

template <typename T>
struct impl_IBackgroundTaskCanceledEventHandler
{
	void Invoke(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & sender, Windows::ApplicationModel::Background::BackgroundTaskCancellationReason reason) const;
};

template <typename T>
struct impl_IBackgroundTaskProgressEventHandler
{
	void Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs const & args) const;
};

template <typename T>
struct impl_IBackgroundTaskCompletedEventHandler
{
	void Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs const & args) const;
};

template <typename T>
struct impl_IAlarmApplicationManagerStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::AlarmAccessStatus> RequestAccessAsync() const;
	Windows::ApplicationModel::Background::AlarmAccessStatus GetAccessStatus() const;
};

template <typename T>
struct impl_IBackgroundExecutionManagerStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(String const & applicationId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(wchar_t const (&applicationId)[S0]) const;
	void RemoveAccess() const;
	void RemoveAccess(String const & applicationId) const;
	template <unsigned S0> void RemoveAccess(wchar_t const (&applicationId)[S0]) const;
	Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus() const;
	Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(String const & applicationId) const;
	template <unsigned S0> Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(wchar_t const (&applicationId)[S0]) const;
};

template <typename T>
struct impl_IBackgroundTaskInstance
{
	GUID InstanceId() const;
	Windows::ApplicationModel::Background::BackgroundTaskRegistration Task() const;
	unsigned Progress() const;
	void Progress(unsigned value) const;
	IInspectable TriggerDetails() const;
	EventRegistrationToken Canceled(Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler const & cancelHandler) const;
	template <typename F> EventRegistrationToken Canceled(F cancelHandler) const;
	void Canceled(EventRegistrationToken cookie) const;
	unsigned SuspendedCount() const;
	Windows::ApplicationModel::Background::BackgroundTaskDeferral GetDeferral() const;
};

template <typename T>
struct impl_IBackgroundWorkCostStatics
{
	Windows::ApplicationModel::Background::BackgroundWorkCostValue CurrentBackgroundWorkCost() const;
};

template <typename T>
struct impl_IBackgroundTaskDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IBackgroundTaskInstance2
{
	unsigned GetThrottleCount(Windows::ApplicationModel::Background::BackgroundTaskThrottleCounter counter) const;
};

template <typename T>
struct impl_IBackgroundTask
{
	void Run(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & taskInstance) const;
};

template <typename T>
struct impl_IBackgroundTaskRegistration
{
	GUID TaskId() const;
	String Name() const;
	EventRegistrationToken Progress(Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Progress(F handler) const;
	void Progress(EventRegistrationToken cookie) const;
	EventRegistrationToken Completed(Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Completed(F handler) const;
	void Completed(EventRegistrationToken cookie) const;
	void Unregister(bool cancelTask) const;
};

template <typename T>
struct impl_IBackgroundTaskRegistrationStatics
{
	Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> AllTasks() const;
};

template <typename T>
struct impl_IBackgroundTaskBuilder
{
	void TaskEntryPoint(String const & value) const;
	template <unsigned S0> void TaskEntryPoint(wchar_t const (&value)[S0]) const;
	String TaskEntryPoint() const;
	void SetTrigger(Windows::ApplicationModel::Background::IBackgroundTrigger const & trigger) const;
	void AddCondition(Windows::ApplicationModel::Background::IBackgroundCondition const & condition) const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Name() const;
	Windows::ApplicationModel::Background::BackgroundTaskRegistration Register() const;
};

template <typename T>
struct impl_IBackgroundTrigger
{
};

template <typename T>
struct impl_IBackgroundCondition
{
};

template <typename T>
struct impl_IBackgroundTaskBuilder2
{
	void CancelOnConditionLoss(bool value) const;
	bool CancelOnConditionLoss() const;
};

template <typename T>
struct impl_IBackgroundTaskCompletedEventArgs
{
	GUID InstanceId() const;
	void CheckResult() const;
};

template <typename T>
struct impl_IBackgroundTaskProgressEventArgs
{
	GUID InstanceId() const;
	unsigned Progress() const;
};

template <typename T>
struct impl_ISystemTrigger
{
	bool OneShot() const;
	Windows::ApplicationModel::Background::SystemTriggerType TriggerType() const;
};

template <typename T>
struct impl_ISystemTriggerFactory
{
	Windows::ApplicationModel::Background::SystemTrigger Create(Windows::ApplicationModel::Background::SystemTriggerType triggerType, bool oneShot) const;
};

template <typename T>
struct impl_ISystemCondition
{
	Windows::ApplicationModel::Background::SystemConditionType ConditionType() const;
};

template <typename T>
struct impl_ISystemConditionFactory
{
	Windows::ApplicationModel::Background::SystemCondition Create(Windows::ApplicationModel::Background::SystemConditionType conditionType) const;
};

template <typename T>
struct impl_INetworkOperatorNotificationTrigger
{
	String NetworkAccountId() const;
};

template <typename T>
struct impl_INetworkOperatorNotificationTriggerFactory
{
	Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger Create(String const & networkAccountId) const;
	template <unsigned S0> Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger Create(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_ITimeTrigger
{
	unsigned FreshnessTime() const;
	bool OneShot() const;
};

template <typename T>
struct impl_ITimeTriggerFactory
{
	Windows::ApplicationModel::Background::TimeTrigger Create(unsigned freshnessTime, bool oneShot) const;
};

template <typename T>
struct impl_IMaintenanceTrigger
{
	unsigned FreshnessTime() const;
	bool OneShot() const;
};

template <typename T>
struct impl_IMaintenanceTriggerFactory
{
	Windows::ApplicationModel::Background::MaintenanceTrigger Create(unsigned freshnessTime, bool oneShot) const;
};

template <typename T>
struct impl_IDeviceUseTrigger
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(wchar_t const (&deviceId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(String const & deviceId, String const & arguments) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(wchar_t const (&deviceId)[S0], wchar_t const (&arguments)[S1]) const;
};

template <typename T>
struct impl_IDeviceServicingTrigger
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(String const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::TimeSpan const & expectedDuration) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(String const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration, String const & arguments) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::TimeSpan const & expectedDuration, wchar_t const (&arguments)[S1]) const;
};

template <typename T>
struct impl_ILocationTrigger
{
	Windows::ApplicationModel::Background::LocationTriggerType TriggerType() const;
};

template <typename T>
struct impl_ILocationTriggerFactory
{
	Windows::ApplicationModel::Background::LocationTrigger Create(Windows::ApplicationModel::Background::LocationTriggerType triggerType) const;
};

template <typename T>
struct impl_INetworkOperatorHotspotAuthenticationTrigger
{
};

template <typename T>
struct impl_IPushNotificationTriggerFactory
{
	Windows::ApplicationModel::Background::PushNotificationTrigger Create(String const & applicationId) const;
	template <unsigned S0> Windows::ApplicationModel::Background::PushNotificationTrigger Create(wchar_t const (&applicationId)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

template <typename T>
struct impl_ILockScreenCallEndCallDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ILockScreenCallEndRequestedEventArgs
{
	Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
struct impl_ILockScreenCallUI
{
	void Dismiss() const;
	EventRegistrationToken EndRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken EndRequested(F handler) const;
	void EndRequested(EventRegistrationToken token) const;
	EventRegistrationToken Closed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Closed(F handler) const;
	void Closed(EventRegistrationToken token) const;
	String CallTitle() const;
	void CallTitle(String const & value) const;
	template <unsigned S0> void CallTitle(wchar_t const (&value)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

template <typename T>
struct impl_IContactManagerStatics
{
	void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection) const;
	void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
};

template <typename T>
struct impl_IContactLaunchActionVerbsStatics
{
	String Call() const;
	String Message() const;
	String Map() const;
	String Post() const;
	String VideoCall() const;
};

template <typename T>
struct impl_IContactPicker
{
	String CommitButtonText() const;
	void CommitButtonText(String const & value) const;
	template <unsigned S0> void CommitButtonText(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactSelectionMode SelectionMode() const;
	void SelectionMode(Windows::ApplicationModel::Contacts::ContactSelectionMode value) const;
};

template <typename T>
struct impl_IContactPicker2
{
	Windows::Foundation::Collections::IVector<Modern::Windows::ApplicationModel::Contacts::ContactFieldType> DesiredFieldsWithContactFieldType() const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> PickContactAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Contact>> PickContactsAsync() const;
};

template <typename T>
struct impl_IContactSignificantOther
{
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactWebsite
{
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactEmail
{
	String Address() const;
	void Address(String const & value) const;
	template <unsigned S0> void Address(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactEmailKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactEmailKind value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactPhone
{
	String Number() const;
	void Number(String const & value) const;
	template <unsigned S0> void Number(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactPhoneKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactPhoneKind value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactAddress
{
	String StreetAddress() const;
	void StreetAddress(String const & value) const;
	template <unsigned S0> void StreetAddress(wchar_t const (&value)[S0]) const;
	String Locality() const;
	void Locality(String const & value) const;
	template <unsigned S0> void Locality(wchar_t const (&value)[S0]) const;
	String Region() const;
	void Region(String const & value) const;
	template <unsigned S0> void Region(wchar_t const (&value)[S0]) const;
	String Country() const;
	void Country(String const & value) const;
	template <unsigned S0> void Country(wchar_t const (&value)[S0]) const;
	String PostalCode() const;
	void PostalCode(String const & value) const;
	template <unsigned S0> void PostalCode(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactAddressKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactAddressKind value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactConnectedServiceAccount
{
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String ServiceName() const;
	void ServiceName(String const & value) const;
	template <unsigned S0> void ServiceName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactDate
{
	Windows::Foundation::IReference<unsigned> Day() const;
	void Day(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Foundation::IReference<unsigned> Month() const;
	void Month(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Foundation::IReference<int> Year() const;
	void Year(Windows::Foundation::IReference<int> const & value) const;
	Windows::ApplicationModel::Contacts::ContactDateKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactDateKind value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactName
{
	String FirstName() const;
	void FirstName(String const & value) const;
	template <unsigned S0> void FirstName(wchar_t const (&value)[S0]) const;
	String LastName() const;
	void LastName(String const & value) const;
	template <unsigned S0> void LastName(wchar_t const (&value)[S0]) const;
	String MiddleName() const;
	void MiddleName(String const & value) const;
	template <unsigned S0> void MiddleName(wchar_t const (&value)[S0]) const;
	String YomiGivenName() const;
	void YomiGivenName(String const & value) const;
	template <unsigned S0> void YomiGivenName(wchar_t const (&value)[S0]) const;
	String YomiFamilyName() const;
	void YomiFamilyName(String const & value) const;
	template <unsigned S0> void YomiFamilyName(wchar_t const (&value)[S0]) const;
	String HonorificNameSuffix() const;
	void HonorificNameSuffix(String const & value) const;
	template <unsigned S0> void HonorificNameSuffix(wchar_t const (&value)[S0]) const;
	String HonorificNamePrefix() const;
	void HonorificNamePrefix(String const & value) const;
	template <unsigned S0> void HonorificNamePrefix(wchar_t const (&value)[S0]) const;
	String DisplayName() const;
	String YomiDisplayName() const;
};

template <typename T>
struct impl_IContactJobInfo
{
	String CompanyName() const;
	void CompanyName(String const & value) const;
	template <unsigned S0> void CompanyName(wchar_t const (&value)[S0]) const;
	String CompanyYomiName() const;
	void CompanyYomiName(String const & value) const;
	template <unsigned S0> void CompanyYomiName(wchar_t const (&value)[S0]) const;
	String Department() const;
	void Department(String const & value) const;
	template <unsigned S0> void Department(wchar_t const (&value)[S0]) const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Manager() const;
	void Manager(String const & value) const;
	template <unsigned S0> void Manager(wchar_t const (&value)[S0]) const;
	String Office() const;
	void Office(String const & value) const;
	template <unsigned S0> void Office(wchar_t const (&value)[S0]) const;
	String CompanyAddress() const;
	void CompanyAddress(String const & value) const;
	template <unsigned S0> void CompanyAddress(wchar_t const (&value)[S0]) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContact
{
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
};

template <typename T>
struct impl_IContact2
{
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String Notes() const;
	void Notes(String const & value) const;
	template <unsigned S0> void Notes(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone> Phones() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail> Emails() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress> Addresses() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> ConnectedServiceAccounts() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactDate> ImportantDates() const;
	Windows::Foundation::Collections::IVector<String> DataSuppliers() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo> JobInfo() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactSignificantOther> SignificantOthers() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactWebsite> Websites() const;
	Windows::Foundation::Collections::IPropertySet ProviderProperties() const;
};

template <typename T>
struct impl_IContactCardDelayedDataLoader
{
	void SetData(Windows::ApplicationModel::Contacts::Contact const & contact) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

template <typename T>
struct impl_IContactRemovedEventArgs
{
	String Id() const;
};

template <typename T>
struct impl_IContactPickerUI
{
	void RemoveContact(String const & id) const;
	template <unsigned S0> void RemoveContact(wchar_t const (&id)[S0]) const;
	bool ContainsContact(String const & id) const;
	template <unsigned S0> bool ContainsContact(wchar_t const (&id)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactSelectionMode SelectionMode() const;
	EventRegistrationToken ContactRemoved(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ContactRemoved(F handler) const;
	void ContactRemoved(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IContactPickerUI2
{
	Windows::ApplicationModel::Contacts::Provider::AddContactResult AddContact(Windows::ApplicationModel::Contacts::Contact const & contact) const;
	Windows::Foundation::Collections::IVector<Modern::Windows::ApplicationModel::Contacts::ContactFieldType> DesiredFieldsWithContactFieldType() const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

template <typename T>
struct impl_IFrameworkView
{
	void Initialize(Windows::ApplicationModel::Core::CoreApplicationView const & applicationView) const;
	void SetWindow(Windows::UI::Core::CoreWindow const & window) const;
	void Load(String const & entryPoint) const;
	template <unsigned S0> void Load(wchar_t const (&entryPoint)[S0]) const;
	void Run() const;
	void Uninitialize() const;
};

template <typename T>
struct impl_IFrameworkViewSource
{
	Windows::ApplicationModel::Core::IFrameworkView CreateView() const;
};

template <typename T>
struct impl_ICoreApplication
{
	String Id() const;
	EventRegistrationToken Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Suspending(F handler) const;
	void Suspending(EventRegistrationToken token) const;
	EventRegistrationToken Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Resuming(F handler) const;
	void Resuming(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
	Windows::ApplicationModel::Core::CoreApplicationView GetCurrentView() const;
	void Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource) const;
	void RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback) const;
};

template <typename T>
struct impl_ICoreApplicationUseCount
{
	void IncrementApplicationUseCount() const;
	void DecrementApplicationUseCount() const;
};

template <typename T>
struct impl_ICoreApplicationExit
{
	void Exit() const;
	EventRegistrationToken Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Exiting(F handler) const;
	void Exiting(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICoreImmersiveApplication
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> Views() const;
	Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(String const & runtimeType, String const & entryPoint) const;
	template <unsigned S0, unsigned S1> Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(wchar_t const (&runtimeType)[S0], wchar_t const (&entryPoint)[S1]) const;
	Windows::ApplicationModel::Core::CoreApplicationView MainView() const;
};

template <typename T>
struct impl_ICoreImmersiveApplication2
{
	Windows::ApplicationModel::Core::CoreApplicationView CreateNewView() const;
};

template <typename T>
struct impl_ICoreApplicationUnhandledError
{
	EventRegistrationToken UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken UnhandledErrorDetected(F handler) const;
	void UnhandledErrorDetected(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICoreApplicationView
{
	Windows::UI::Core::CoreWindow CoreWindow() const;
	EventRegistrationToken Activated(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Activation::IActivatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Activated(F handler) const;
	void Activated(EventRegistrationToken token) const;
	bool IsMain() const;
	bool IsHosted() const;
};

template <typename T>
struct impl_ICoreApplicationView2
{
	Windows::UI::Core::CoreDispatcher Dispatcher() const;
};

template <typename T>
struct impl_IUnhandledErrorDetectedEventArgs
{
	Windows::ApplicationModel::Core::UnhandledError UnhandledError() const;
};

template <typename T>
struct impl_IUnhandledError
{
	bool Handled() const;
	void Propagate() const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

template <typename T>
struct impl_IDataProviderHandler
{
	void Invoke(Windows::ApplicationModel::DataTransfer::DataProviderRequest const & request) const;
};

template <typename T>
struct impl_IStandardDataFormatsStatics
{
	String Text() const;
	String Html() const;
	String Rtf() const;
	String Bitmap() const;
	String StorageItems() const;
};

template <typename T>
struct impl_IStandardDataFormatsStatics2
{
	String WebLink() const;
	String ApplicationLink() const;
};

template <typename T>
struct impl_IDataPackagePropertySetView
{
	String Title() const;
	String Description() const;
	Windows::Storage::Streams::RandomAccessStreamReference Thumbnail() const;
	Windows::Foundation::Collections::IVectorView<String> FileTypes() const;
	String ApplicationName() const;
	Windows::Foundation::Uri ApplicationListingUri() const;
};

template <typename T>
struct impl_IDataPackagePropertySetView2
{
	String PackageFamilyName() const;
	Windows::Foundation::Uri ContentSourceWebLink() const;
	Windows::Foundation::Uri ContentSourceApplicationLink() const;
	Windows::Storage::Streams::IRandomAccessStreamReference Square30x30Logo() const;
	Windows::UI::Color LogoBackgroundColor() const;
};

template <typename T>
struct impl_IDataPackagePropertySet
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::Foundation::Collections::IVector<String> FileTypes() const;
	String ApplicationName() const;
	void ApplicationName(String const & value) const;
	template <unsigned S0> void ApplicationName(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri ApplicationListingUri() const;
	void ApplicationListingUri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IDataPackagePropertySet2
{
	Windows::Foundation::Uri ContentSourceWebLink() const;
	void ContentSourceWebLink(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri ContentSourceApplicationLink() const;
	void ContentSourceApplicationLink(Windows::Foundation::Uri const & value) const;
	String PackageFamilyName() const;
	void PackageFamilyName(String const & value) const;
	template <unsigned S0> void PackageFamilyName(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Square30x30Logo() const;
	void Square30x30Logo(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::UI::Color LogoBackgroundColor() const;
	void LogoBackgroundColor(Windows::UI::Color const & value) const;
};

template <typename T>
struct impl_IDataProviderDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IDataProviderRequest
{
	String FormatId() const;
	Windows::Foundation::DateTime Deadline() const;
	Windows::ApplicationModel::DataTransfer::DataProviderDeferral GetDeferral() const;
	void SetData(IInspectable const & value) const;
};

template <typename T>
struct impl_IOperationCompletedEventArgs
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation Operation() const;
};

template <typename T>
struct impl_IDataPackageView
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView Properties() const;
	Windows::ApplicationModel::DataTransfer::DataPackageOperation RequestedOperation() const;
	void ReportOperationCompleted(Windows::ApplicationModel::DataTransfer::DataPackageOperation value) const;
	Windows::Foundation::Collections::IVectorView<String> AvailableFormats() const;
	bool Contains(String const & formatId) const;
	template <unsigned S0> bool Contains(wchar_t const (&formatId)[S0]) const;
	Windows::Foundation::IAsyncOperation<IInspectable> GetDataAsync(String const & formatId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<IInspectable> GetDataAsync(wchar_t const (&formatId)[S0]) const;
	Windows::Foundation::IAsyncOperation<String> GetTextAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetTextAsync(String const & formatId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> GetTextAsync(wchar_t const (&formatId)[S0]) const;
	Windows::Foundation::IAsyncOperation<String> GetHtmlFormatAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Storage::Streams::RandomAccessStreamReference>> GetResourceMapAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetRtfAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> GetBitmapAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetStorageItemsAsync() const;
};

template <typename T>
struct impl_IDataPackageView2
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetApplicationLinkAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetWebLinkAsync() const;
};

template <typename T>
struct impl_IDataPackage
{
	Windows::ApplicationModel::DataTransfer::DataPackageView GetView() const;
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet Properties() const;
	Windows::ApplicationModel::DataTransfer::DataPackageOperation RequestedOperation() const;
	void RequestedOperation(Windows::ApplicationModel::DataTransfer::DataPackageOperation value) const;
	EventRegistrationToken OperationCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken OperationCompleted(F handler) const;
	void OperationCompleted(EventRegistrationToken eventCookie) const;
	EventRegistrationToken Destroyed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Destroyed(F handler) const;
	void Destroyed(EventRegistrationToken eventCookie) const;
	void SetData(String const & formatId, IInspectable const & value) const;
	template <unsigned S0> void SetData(wchar_t const (&formatId)[S0], IInspectable const & value) const;
	void SetDataProvider(String const & formatId, Windows::ApplicationModel::DataTransfer::IDataProviderHandler const & delayRenderer) const;
	template <unsigned S0> void SetDataProvider(wchar_t const (&formatId)[S0], Windows::ApplicationModel::DataTransfer::IDataProviderHandler const & delayRenderer) const;
	template <typename F> void SetDataProvider(String const & formatId, F delayRenderer) const;
	template <unsigned S0, typename F> void SetDataProvider(wchar_t const (&formatId)[S0], F delayRenderer) const;
	void SetText(String const & value) const;
	template <unsigned S0> void SetText(wchar_t const (&value)[S0]) const;
	void SetHtmlFormat(String const & value) const;
	template <unsigned S0> void SetHtmlFormat(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IMap<String, Windows::Storage::Streams::RandomAccessStreamReference> ResourceMap() const;
	void SetRtf(String const & value) const;
	template <unsigned S0> void SetRtf(wchar_t const (&value)[S0]) const;
	void SetBitmap(Windows::Storage::Streams::RandomAccessStreamReference const & value) const;
	void SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value) const;
	void SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value, bool readOnly) const;
};

template <typename T>
struct impl_IDataPackage2
{
	void SetApplicationLink(Windows::Foundation::Uri const & value) const;
	void SetWebLink(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IHtmlFormatHelperStatics
{
	String GetStaticFragment(String const & htmlFormat) const;
	template <unsigned S0> String GetStaticFragment(wchar_t const (&htmlFormat)[S0]) const;
	String CreateHtmlFormat(String const & htmlFragment) const;
	template <unsigned S0> String CreateHtmlFormat(wchar_t const (&htmlFragment)[S0]) const;
};

template <typename T>
struct impl_IClipboardStatics
{
	Windows::ApplicationModel::DataTransfer::DataPackageView GetContent() const;
	void SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content) const;
	void Flush() const;
	void Clear() const;
	EventRegistrationToken ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const;
	template <typename F> EventRegistrationToken ContentChanged(F changeHandler) const;
	void ContentChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IDataRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IDataRequest
{
	Windows::ApplicationModel::DataTransfer::DataPackage Data() const;
	void Data(Windows::ApplicationModel::DataTransfer::DataPackage const & value) const;
	Windows::Foundation::DateTime Deadline() const;
	void FailWithDisplayText(String const & value) const;
	template <unsigned S0> void FailWithDisplayText(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::DataTransfer::DataRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_IDataRequestedEventArgs
{
	Windows::ApplicationModel::DataTransfer::DataRequest Request() const;
};

template <typename T>
struct impl_ITargetApplicationChosenEventArgs
{
	String ApplicationName() const;
};

template <typename T>
struct impl_IDataTransferManager
{
	EventRegistrationToken DataRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken DataRequested(F eventHandler) const;
	void DataRequested(EventRegistrationToken eventCookie) const;
	EventRegistrationToken TargetApplicationChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken TargetApplicationChosen(F eventHandler) const;
	void TargetApplicationChosen(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IDataTransferManagerStatics
{
	void ShowShareUI() const;
	Windows::ApplicationModel::DataTransfer::DataTransferManager GetForCurrentView() const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

template <typename T>
struct impl_IQuickLink
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::RandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const;
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> SupportedDataFormats() const;
	Windows::Foundation::Collections::IVector<String> SupportedFileTypes() const;
};

template <typename T>
struct impl_IShareOperation
{
	Windows::ApplicationModel::DataTransfer::DataPackageView Data() const;
	String QuickLinkId() const;
	void RemoveThisQuickLink() const;
	void ReportStarted() const;
	void ReportDataRetrieved() const;
	void ReportSubmittedBackgroundTask() const;
	void ReportCompleted(Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink const & quicklink) const;
	void ReportCompleted() const;
	void ReportError(String const & value) const;
	template <unsigned S0> void ReportError(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IShareOperation2
{
	void DismissUI() const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Infrastructure {

template <typename T>
struct impl_ISetWindowWithWindowFactory
{
	Windows::UI::Core::CoreWindow SetWindow(Windows::UI::Core::ICoreWindowFactory const & windowFactory) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

template <typename T>
struct impl_IResourceLoader
{
	String GetString(String const & resource) const;
	template <unsigned S0> String GetString(wchar_t const (&resource)[S0]) const;
};

template <typename T>
struct impl_IResourceLoader2
{
	String GetStringForUri(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_IResourceLoaderStatics2
{
	Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView() const;
	Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView(String const & name) const;
	template <unsigned S0> Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView(wchar_t const (&name)[S0]) const;
	Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse() const;
	Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse(String const & name) const;
	template <unsigned S0> Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse(wchar_t const (&name)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

template <typename T>
struct impl_IResourceManager
{
	Windows::ApplicationModel::Resources::Core::ResourceMap MainResourceMap() const;
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap> AllResourceMaps() const;
	void LoadPriFiles(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFile> const & files) const;
	void UnloadPriFiles(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFile> const & files) const;
};

template <typename T>
struct impl_IResourceManagerStatics
{
	Windows::ApplicationModel::Resources::Core::ResourceManager Current() const;
	bool IsResourceReference(String const & resourceReference) const;
	template <unsigned S0> bool IsResourceReference(wchar_t const (&resourceReference)[S0]) const;
};

template <typename T>
struct impl_IResourceQualifier
{
	String QualifierName() const;
	String QualifierValue() const;
	bool IsDefault() const;
	bool IsMatch() const;
	double Score() const;
};

template <typename T>
struct impl_IResourceContext
{
	Windows::Foundation::Collections::IObservableMap<String, String> QualifierValues() const;
	void Reset() const;
	void Reset(Windows::Foundation::Collections::IIterable<String> const & qualifierNames) const;
	void OverrideToMatch(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Resources::Core::ResourceQualifier> const & result) const;
	Windows::ApplicationModel::Resources::Core::ResourceContext Clone() const;
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	void Languages(Windows::Foundation::Collections::IVectorView<String> const & languages) const;
};

template <typename T>
struct impl_IResourceContextStatics2
{
	Windows::ApplicationModel::Resources::Core::ResourceContext GetForCurrentView() const;
	void SetGlobalQualifierValue(String const & key, String const & value) const;
	template <unsigned S0, unsigned S1> void SetGlobalQualifierValue(wchar_t const (&key)[S0], wchar_t const (&value)[S1]) const;
	void ResetGlobalQualifierValues() const;
	void ResetGlobalQualifierValues(Windows::Foundation::Collections::IIterable<String> const & qualifierNames) const;
	Windows::ApplicationModel::Resources::Core::ResourceContext GetForViewIndependentUse() const;
};

template <typename T>
struct impl_IResourceCandidate
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier> Qualifiers() const;
	bool IsMatch() const;
	bool IsMatchAsDefault() const;
	bool IsDefault() const;
	String ValueAsString() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetValueAsFileAsync() const;
	String GetQualifierValue(String const & qualifierName) const;
	template <unsigned S0> String GetQualifierValue(wchar_t const (&qualifierName)[S0]) const;
};

template <typename T>
struct impl_INamedResource
{
	Windows::Foundation::Uri Uri() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> Candidates() const;
	Windows::ApplicationModel::Resources::Core::ResourceCandidate Resolve(Windows::ApplicationModel::Resources::Core::ResourceContext const & resourceContext) const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> ResolveAll(Windows::ApplicationModel::Resources::Core::ResourceContext const & resourceContext) const;
};

template <typename T>
struct impl_IResourceMap
{
	Windows::Foundation::Uri Uri() const;
	Windows::ApplicationModel::Resources::Core::ResourceCandidate GetValue(String const & resource, Windows::ApplicationModel::Resources::Core::ResourceContext const & context) const;
	template <unsigned S0> Windows::ApplicationModel::Resources::Core::ResourceCandidate GetValue(wchar_t const (&resource)[S0], Windows::ApplicationModel::Resources::Core::ResourceContext const & context) const;
	Windows::ApplicationModel::Resources::Core::ResourceMap GetSubtree(String const & reference) const;
	template <unsigned S0> Windows::ApplicationModel::Resources::Core::ResourceMap GetSubtree(wchar_t const (&reference)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

template <typename T>
struct impl_IResourceIndexer
{
	Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate IndexFilePath(Windows::Foundation::Uri const & filePath) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate>> IndexFileContentsAsync(Windows::Foundation::Uri const & file) const;
};

template <typename T>
struct impl_IResourceIndexerFactory
{
	Windows::ApplicationModel::Resources::Management::ResourceIndexer CreateResourceIndexer(Windows::Foundation::Uri const & projectRoot) const;
};

template <typename T>
struct impl_IResourceIndexerFactory2
{
	Windows::ApplicationModel::Resources::Management::ResourceIndexer CreateResourceIndexerWithExtension(Windows::Foundation::Uri const & projectRoot, Windows::Foundation::Uri const & extensionDllPath) const;
};

template <typename T>
struct impl_IIndexedResourceQualifier
{
	String QualifierName() const;
	String QualifierValue() const;
};

template <typename T>
struct impl_IIndexedResourceCandidate
{
	Windows::ApplicationModel::Resources::Management::IndexedResourceType Type() const;
	Windows::Foundation::Uri Uri() const;
	Windows::Foundation::Collections::IMapView<String, String> Metadata() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier> Qualifiers() const;
	String ValueAsString() const;
	String GetQualifierValue(String const & qualifierName) const;
	template <unsigned S0> String GetQualifierValue(wchar_t const (&qualifierName)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

template <typename T>
struct impl_ISearchPaneQueryLinguisticDetails
{
	Windows::Foundation::Collections::IVectorView<String> QueryTextAlternatives() const;
	unsigned QueryTextCompositionStart() const;
	unsigned QueryTextCompositionLength() const;
};

template <typename T>
struct impl_ISearchPaneVisibilityChangedEventArgs
{
	bool Visible() const;
};

template <typename T>
struct impl_ISearchPaneQueryChangedEventArgs
{
	String QueryText() const;
	String Language() const;
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
struct impl_ISearchPaneQuerySubmittedEventArgs
{
	String QueryText() const;
	String Language() const;
};

template <typename T>
struct impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
struct impl_ISearchPaneResultSuggestionChosenEventArgs
{
	String Tag() const;
};

template <typename T>
struct impl_ISearchSuggestionCollection
{
	unsigned Size() const;
	void AppendQuerySuggestion(String const & text) const;
	template <unsigned S0> void AppendQuerySuggestion(wchar_t const (&text)[S0]) const;
	void AppendQuerySuggestions(Windows::Foundation::Collections::IIterable<String> const & suggestions) const;
	void AppendResultSuggestion(String const & text, String const & detailText, String const & tag, Windows::Storage::Streams::IRandomAccessStreamReference const & image, String const & imageAlternateText) const;
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> void AppendResultSuggestion(wchar_t const (&text)[S0], wchar_t const (&detailText)[S1], wchar_t const (&tag)[S2], Windows::Storage::Streams::IRandomAccessStreamReference const & image, wchar_t const (&imageAlternateText)[S3]) const;
	void AppendSearchSeparator(String const & label) const;
	template <unsigned S0> void AppendSearchSeparator(wchar_t const (&label)[S0]) const;
};

template <typename T>
struct impl_ISearchPaneSuggestionsRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ISearchPaneSuggestionsRequest
{
	bool IsCanceled() const;
	Windows::ApplicationModel::Search::SearchSuggestionCollection SearchSuggestionCollection() const;
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_ISearchPaneSuggestionsRequestedEventArgs
{
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest Request() const;
};

template <typename T>
struct impl_ILocalContentSuggestionSettings
{
	void Enabled(bool value) const;
	bool Enabled() const;
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFolder> Locations() const;
	void AqsFilter(String const & value) const;
	template <unsigned S0> void AqsFilter(wchar_t const (&value)[S0]) const;
	String AqsFilter() const;
	Windows::Foundation::Collections::IVector<String> PropertiesToMatch() const;
};

template <typename T>
struct impl_ISearchPaneStatics
{
	Windows::ApplicationModel::Search::SearchPane GetForCurrentView() const;
};

template <typename T>
struct impl_ISearchPaneStaticsWithHideThisApplication
{
	void HideThisApplication() const;
};

template <typename T>
struct impl_ISearchPane
{
	void SearchHistoryEnabled(bool value) const;
	bool SearchHistoryEnabled() const;
	void SearchHistoryContext(String const & value) const;
	template <unsigned S0> void SearchHistoryContext(wchar_t const (&value)[S0]) const;
	String SearchHistoryContext() const;
	void PlaceholderText(String const & value) const;
	template <unsigned S0> void PlaceholderText(wchar_t const (&value)[S0]) const;
	String PlaceholderText() const;
	String QueryText() const;
	String Language() const;
	bool Visible() const;
	EventRegistrationToken VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VisibilityChanged(F handler) const;
	void VisibilityChanged(EventRegistrationToken token) const;
	EventRegistrationToken QueryChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken QueryChanged(F handler) const;
	void QueryChanged(EventRegistrationToken token) const;
	EventRegistrationToken SuggestionsRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SuggestionsRequested(F handler) const;
	void SuggestionsRequested(EventRegistrationToken token) const;
	EventRegistrationToken QuerySubmitted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken QuerySubmitted(F handler) const;
	void QuerySubmitted(EventRegistrationToken token) const;
	EventRegistrationToken ResultSuggestionChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ResultSuggestionChosen(F handler) const;
	void ResultSuggestionChosen(EventRegistrationToken token) const;
	void SetLocalContentSuggestionSettings(Windows::ApplicationModel::Search::LocalContentSuggestionSettings const & settings) const;
	void Show() const;
	void Show(String const & query) const;
	template <unsigned S0> void Show(wchar_t const (&query)[S0]) const;
	void ShowOnKeyboardInput(bool value) const;
	bool ShowOnKeyboardInput() const;
	bool TrySetQueryText(String const & query) const;
	template <unsigned S0> bool TrySetQueryText(wchar_t const (&query)[S0]) const;
};

template <typename T>
struct impl_ISearchQueryLinguisticDetailsFactory
{
	Windows::ApplicationModel::Search::SearchQueryLinguisticDetails CreateInstance(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned queryTextCompositionStart, unsigned queryTextCompositionLength) const;
};

template <typename T>
struct impl_ISearchQueryLinguisticDetails
{
	Windows::Foundation::Collections::IVectorView<String> QueryTextAlternatives() const;
	unsigned QueryTextCompositionStart() const;
	unsigned QueryTextCompositionLength() const;
};

template <typename T>
struct impl_ISearchSuggestionsRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ISearchSuggestionsRequest
{
	bool IsCanceled() const;
	Windows::ApplicationModel::Search::SearchSuggestionCollection SearchSuggestionCollection() const;
	Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral GetDeferral() const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

template <typename T>
struct impl_ILicenseChangedEventHandler
{
	void Invoke() const;
};

template <typename T>
struct impl_ICurrentApp
{
	Windows::ApplicationModel::Store::LicenseInformation LicenseInformation() const;
	Windows::Foundation::Uri LinkUri() const;
	GUID AppId() const;
	Windows::Foundation::IAsyncOperation<String> RequestAppPurchaseAsync(bool includeReceipt) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> LoadListingInformationAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetAppReceiptAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(String const & productId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(wchar_t const (&productId)[S0]) const;
};

template <typename T>
struct impl_ICurrentAppWithConsumables
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(String const & productId, GUID transactionId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID transactionId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> GetUnfulfilledConsumablesAsync() const;
};

template <typename T>
struct impl_ICurrentAppSimulator
{
	Windows::ApplicationModel::Store::LicenseInformation LicenseInformation() const;
	Windows::Foundation::Uri LinkUri() const;
	GUID AppId() const;
	Windows::Foundation::IAsyncOperation<String> RequestAppPurchaseAsync(bool includeReceipt) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> LoadListingInformationAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetAppReceiptAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(String const & productId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(wchar_t const (&productId)[S0]) const;
	Windows::Foundation::IAsyncAction ReloadSimulatorAsync(Windows::Storage::StorageFile const & simulatorSettingsFile) const;
};

template <typename T>
struct impl_ICurrentAppSimulatorWithConsumables
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(String const & productId, GUID transactionId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID transactionId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> GetUnfulfilledConsumablesAsync() const;
};

template <typename T>
struct impl_IPurchaseResults
{
	Windows::ApplicationModel::Store::ProductPurchaseStatus Status() const;
	GUID TransactionId() const;
	String ReceiptXml() const;
	String OfferId() const;
};

template <typename T>
struct impl_ILicenseInformation
{
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductLicense> ProductLicenses() const;
	bool IsActive() const;
	bool IsTrial() const;
	Windows::Foundation::DateTime ExpirationDate() const;
	EventRegistrationToken LicenseChanged(Windows::ApplicationModel::Store::ILicenseChangedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken LicenseChanged(F handler) const;
	void LicenseChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IProductLicense
{
	String ProductId() const;
	bool IsActive() const;
	Windows::Foundation::DateTime ExpirationDate() const;
};

template <typename T>
struct impl_IListingInformation
{
	String CurrentMarket() const;
	String Description() const;
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductListing> ProductListings() const;
	String FormattedPrice() const;
	String Name() const;
	unsigned AgeRating() const;
};

template <typename T>
struct impl_IProductListing
{
	String ProductId() const;
	String FormattedPrice() const;
	String Name() const;
};

template <typename T>
struct impl_IProductListingWithConsumables
{
	Windows::ApplicationModel::Store::ProductType ProductType() const;
};

template <typename T>
struct impl_IUnfulfilledConsumable
{
	String ProductId() const;
	GUID TransactionId() const;
	String OfferId() const;
};

template <typename T>
struct impl_IProductPurchaseDisplayProperties
{
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri Image() const;
	void Image(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IProductPurchaseDisplayPropertiesFactory
{
	Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties CreateProductPurchaseDisplayProperties(String const & name) const;
	template <unsigned S0> Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties CreateProductPurchaseDisplayProperties(wchar_t const (&name)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

template <typename T>
struct impl_IHtmlUtilities
{
	String ConvertToText(String const & html) const;
	template <unsigned S0> String ConvertToText(wchar_t const (&html)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

template <typename T>
struct impl_IJsonValue
{
	Windows::Data::Json::JsonValueType ValueType() const;
	String Stringify() const;
	String GetString() const;
	double GetNumber() const;
	bool GetBoolean() const;
	Windows::Data::Json::JsonArray GetArray() const;
	Windows::Data::Json::JsonObject GetObject() const;
};

template <typename T>
struct impl_IJsonValueStatics
{
	Windows::Data::Json::JsonValue Parse(String const & input) const;
	template <unsigned S0> Windows::Data::Json::JsonValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Data::Json::JsonValue & result) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonValue & result) const;
	Windows::Data::Json::JsonValue CreateBooleanValue(bool input) const;
	Windows::Data::Json::JsonValue CreateNumberValue(double input) const;
	Windows::Data::Json::JsonValue CreateStringValue(String const & input) const;
	template <unsigned S0> Windows::Data::Json::JsonValue CreateStringValue(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IJsonObject
{
	Windows::Data::Json::JsonValue GetNamedValue(String const & name) const;
	template <unsigned S0> Windows::Data::Json::JsonValue GetNamedValue(wchar_t const (&name)[S0]) const;
	void SetNamedValue(String const & name, Windows::Data::Json::IJsonValue const & value) const;
	template <unsigned S0> void SetNamedValue(wchar_t const (&name)[S0], Windows::Data::Json::IJsonValue const & value) const;
	Windows::Data::Json::JsonObject GetNamedObject(String const & name) const;
	template <unsigned S0> Windows::Data::Json::JsonObject GetNamedObject(wchar_t const (&name)[S0]) const;
	Windows::Data::Json::JsonArray GetNamedArray(String const & name) const;
	template <unsigned S0> Windows::Data::Json::JsonArray GetNamedArray(wchar_t const (&name)[S0]) const;
	String GetNamedString(String const & name) const;
	template <unsigned S0> String GetNamedString(wchar_t const (&name)[S0]) const;
	double GetNamedNumber(String const & name) const;
	template <unsigned S0> double GetNamedNumber(wchar_t const (&name)[S0]) const;
	bool GetNamedBoolean(String const & name) const;
	template <unsigned S0> bool GetNamedBoolean(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_IJsonObjectWithDefaultValues
{
	Windows::Data::Json::JsonValue GetNamedValue(String const & name, Windows::Data::Json::JsonValue const & defaultValue) const;
	template <unsigned S0> Windows::Data::Json::JsonValue GetNamedValue(wchar_t const (&name)[S0], Windows::Data::Json::JsonValue const & defaultValue) const;
	Windows::Data::Json::JsonObject GetNamedObject(String const & name, Windows::Data::Json::JsonObject const & defaultValue) const;
	template <unsigned S0> Windows::Data::Json::JsonObject GetNamedObject(wchar_t const (&name)[S0], Windows::Data::Json::JsonObject const & defaultValue) const;
	String GetNamedString(String const & name, String const & defaultValue) const;
	template <unsigned S0, unsigned S1> String GetNamedString(wchar_t const (&name)[S0], wchar_t const (&defaultValue)[S1]) const;
	Windows::Data::Json::JsonArray GetNamedArray(String const & name, Windows::Data::Json::JsonArray const & defaultValue) const;
	template <unsigned S0> Windows::Data::Json::JsonArray GetNamedArray(wchar_t const (&name)[S0], Windows::Data::Json::JsonArray const & defaultValue) const;
	double GetNamedNumber(String const & name, double defaultValue) const;
	template <unsigned S0> double GetNamedNumber(wchar_t const (&name)[S0], double defaultValue) const;
	bool GetNamedBoolean(String const & name, bool defaultValue) const;
	template <unsigned S0> bool GetNamedBoolean(wchar_t const (&name)[S0], bool defaultValue) const;
};

template <typename T>
struct impl_IJsonObjectStatics
{
	Windows::Data::Json::JsonObject Parse(String const & input) const;
	template <unsigned S0> Windows::Data::Json::JsonObject Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Data::Json::JsonObject & result) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonObject & result) const;
};

template <typename T>
struct impl_IJsonArray
{
	Windows::Data::Json::JsonObject GetObjectAt(unsigned index) const;
	Windows::Data::Json::JsonArray GetArrayAt(unsigned index) const;
	String GetStringAt(unsigned index) const;
	double GetNumberAt(unsigned index) const;
	bool GetBooleanAt(unsigned index) const;
};

template <typename T>
struct impl_IJsonArrayStatics
{
	Windows::Data::Json::JsonArray Parse(String const & input) const;
	template <unsigned S0> Windows::Data::Json::JsonArray Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Data::Json::JsonArray & result) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonArray & result) const;
};

template <typename T>
struct impl_IJsonErrorStatics2
{
	Windows::Data::Json::JsonErrorStatus GetJsonStatus(int hresult) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

template <typename T>
struct impl_IPdfPageDimensions
{
	Windows::Foundation::Rect MediaBox() const;
	Windows::Foundation::Rect CropBox() const;
	Windows::Foundation::Rect BleedBox() const;
	Windows::Foundation::Rect TrimBox() const;
	Windows::Foundation::Rect ArtBox() const;
};

template <typename T>
struct impl_IPdfPageRenderOptions
{
	Windows::Foundation::Rect SourceRect() const;
	void SourceRect(Windows::Foundation::Rect const & value) const;
	unsigned DestinationWidth() const;
	void DestinationWidth(unsigned value) const;
	unsigned DestinationHeight() const;
	void DestinationHeight(unsigned value) const;
	Windows::UI::Color BackgroundColor() const;
	void BackgroundColor(Windows::UI::Color const & value) const;
	bool IsIgnoringHighContrast() const;
	void IsIgnoringHighContrast(bool value) const;
	GUID BitmapEncoderId() const;
	void BitmapEncoderId(GUID value) const;
};

template <typename T>
struct impl_IPdfPage
{
	Windows::Foundation::IAsyncAction RenderToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & outputStream) const;
	Windows::Foundation::IAsyncAction RenderToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & outputStream, Windows::Data::Pdf::PdfPageRenderOptions const & options) const;
	Windows::Foundation::IAsyncAction PreparePageAsync() const;
	unsigned Index() const;
	Windows::Foundation::Size Size() const;
	Windows::Data::Pdf::PdfPageDimensions Dimensions() const;
	Windows::Data::Pdf::PdfPageRotation Rotation() const;
	float PreferredZoom() const;
};

template <typename T>
struct impl_IPdfDocument
{
	Windows::Data::Pdf::PdfPage GetPage(unsigned pageIndex) const;
	unsigned PageCount() const;
	bool IsPasswordProtected() const;
};

template <typename T>
struct impl_IPdfDocumentStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, String const & password) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&password)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, String const & password) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, wchar_t const (&password)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

template <typename T>
struct impl_IWordSegmentsTokenizingHandler
{
	void Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & words) const;
};

template <typename T>
struct impl_ISelectableWordSegmentsTokenizingHandler
{
	void Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & words) const;
};

template <typename T>
struct impl_ISemanticTextQueryFactory
{
	Windows::Data::Text::SemanticTextQuery Create(String const & aqsFilter) const;
	template <unsigned S0> Windows::Data::Text::SemanticTextQuery Create(wchar_t const (&aqsFilter)[S0]) const;
	Windows::Data::Text::SemanticTextQuery CreateWithLanguage(String const & aqsFilter, String const & filterLanguage) const;
	template <unsigned S0, unsigned S1> Windows::Data::Text::SemanticTextQuery CreateWithLanguage(wchar_t const (&aqsFilter)[S0], wchar_t const (&filterLanguage)[S1]) const;
};

template <typename T>
struct impl_ISemanticTextQuery
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> Find(String const & content) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> Find(wchar_t const (&content)[S0]) const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> FindInProperty(String const & propertyContent, String const & propertyName) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> FindInProperty(wchar_t const (&propertyContent)[S0], wchar_t const (&propertyName)[S1]) const;
};

template <typename T>
struct impl_IUnicodeCharactersStatics
{
	unsigned GetCodepointFromSurrogatePair(unsigned highSurrogate, unsigned lowSurrogate) const;
	void GetSurrogatePairFromCodepoint(unsigned codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate) const;
	bool IsHighSurrogate(unsigned codepoint) const;
	bool IsLowSurrogate(unsigned codepoint) const;
	bool IsSupplementary(unsigned codepoint) const;
	bool IsNoncharacter(unsigned codepoint) const;
	bool IsWhitespace(unsigned codepoint) const;
	bool IsAlphabetic(unsigned codepoint) const;
	bool IsCased(unsigned codepoint) const;
	bool IsUppercase(unsigned codepoint) const;
	bool IsLowercase(unsigned codepoint) const;
	bool IsIdStart(unsigned codepoint) const;
	bool IsIdContinue(unsigned codepoint) const;
	bool IsGraphemeBase(unsigned codepoint) const;
	bool IsGraphemeExtend(unsigned codepoint) const;
	Windows::Data::Text::UnicodeNumericType GetNumericType(unsigned codepoint) const;
	Windows::Data::Text::UnicodeGeneralCategory GetGeneralCategory(unsigned codepoint) const;
};

template <typename T>
struct impl_IAlternateWordForm
{
	Windows::Data::Text::TextSegment SourceTextSegment() const;
	String AlternateText() const;
	Windows::Data::Text::AlternateNormalizationFormat NormalizationFormat() const;
};

template <typename T>
struct impl_ISelectableWordSegment
{
	String Text() const;
	Windows::Data::Text::TextSegment SourceTextSegment() const;
};

template <typename T>
struct impl_IWordSegment
{
	String Text() const;
	Windows::Data::Text::TextSegment SourceTextSegment() const;
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::AlternateWordForm> AlternateForms() const;
};

template <typename T>
struct impl_IWordsSegmenter
{
	String ResolvedLanguage() const;
	Windows::Data::Text::WordSegment GetTokenAt(String const & text, unsigned startIndex) const;
	template <unsigned S0> Windows::Data::Text::WordSegment GetTokenAt(wchar_t const (&text)[S0], unsigned startIndex) const;
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> GetTokens(String const & text) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> GetTokens(wchar_t const (&text)[S0]) const;
	void Tokenize(String const & text, unsigned startIndex, Windows::Data::Text::IWordSegmentsTokenizingHandler const & handler) const;
	template <unsigned S0> void Tokenize(wchar_t const (&text)[S0], unsigned startIndex, Windows::Data::Text::IWordSegmentsTokenizingHandler const & handler) const;
	template <typename F> void Tokenize(String const & text, unsigned startIndex, F handler) const;
	template <unsigned S0, typename F> void Tokenize(wchar_t const (&text)[S0], unsigned startIndex, F handler) const;
};

template <typename T>
struct impl_IWordsSegmenterFactory
{
	Windows::Data::Text::WordsSegmenter CreateWithLanguage(String const & language) const;
	template <unsigned S0> Windows::Data::Text::WordsSegmenter CreateWithLanguage(wchar_t const (&language)[S0]) const;
};

template <typename T>
struct impl_ISelectableWordsSegmenter
{
	String ResolvedLanguage() const;
	Windows::Data::Text::SelectableWordSegment GetTokenAt(String const & text, unsigned startIndex) const;
	template <unsigned S0> Windows::Data::Text::SelectableWordSegment GetTokenAt(wchar_t const (&text)[S0], unsigned startIndex) const;
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> GetTokens(String const & text) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> GetTokens(wchar_t const (&text)[S0]) const;
	void Tokenize(String const & text, unsigned startIndex, Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler const & handler) const;
	template <unsigned S0> void Tokenize(wchar_t const (&text)[S0], unsigned startIndex, Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler const & handler) const;
	template <typename F> void Tokenize(String const & text, unsigned startIndex, F handler) const;
	template <unsigned S0, typename F> void Tokenize(wchar_t const (&text)[S0], unsigned startIndex, F handler) const;
};

template <typename T>
struct impl_ISelectableWordsSegmenterFactory
{
	Windows::Data::Text::SelectableWordsSegmenter CreateWithLanguage(String const & language) const;
	template <unsigned S0> Windows::Data::Text::SelectableWordsSegmenter CreateWithLanguage(wchar_t const (&language)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

template <typename T>
struct impl_IXmlNodeSelector
{
	Windows::Data::Xml::Dom::IXmlNode SelectSingleNode(String const & xpath) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode SelectSingleNode(wchar_t const (&xpath)[S0]) const;
	Windows::Data::Xml::Dom::XmlNodeList SelectNodes(String const & xpath) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList SelectNodes(wchar_t const (&xpath)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode SelectSingleNodeNS(String const & xpath, IInspectable const & namespaces) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode SelectSingleNodeNS(wchar_t const (&xpath)[S0], IInspectable const & namespaces) const;
	Windows::Data::Xml::Dom::XmlNodeList SelectNodesNS(String const & xpath, IInspectable const & namespaces) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList SelectNodesNS(wchar_t const (&xpath)[S0], IInspectable const & namespaces) const;
};

template <typename T>
struct impl_IXmlNodeSerializer
{
	String GetXml() const;
	String InnerText() const;
	void InnerText(String const & value) const;
	template <unsigned S0> void InnerText(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IXmlNode
{
	IInspectable NodeValue() const;
	void NodeValue(IInspectable const & value) const;
	Windows::Data::Xml::Dom::NodeType NodeType() const;
	String NodeName() const;
	Windows::Data::Xml::Dom::IXmlNode ParentNode() const;
	Windows::Data::Xml::Dom::XmlNodeList ChildNodes() const;
	Windows::Data::Xml::Dom::IXmlNode FirstChild() const;
	Windows::Data::Xml::Dom::IXmlNode LastChild() const;
	Windows::Data::Xml::Dom::IXmlNode PreviousSibling() const;
	Windows::Data::Xml::Dom::IXmlNode NextSibling() const;
	Windows::Data::Xml::Dom::XmlNamedNodeMap Attributes() const;
	bool HasChildNodes() const;
	Windows::Data::Xml::Dom::XmlDocument OwnerDocument() const;
	Windows::Data::Xml::Dom::IXmlNode InsertBefore(Windows::Data::Xml::Dom::IXmlNode const & newChild, Windows::Data::Xml::Dom::IXmlNode const & referenceChild) const;
	Windows::Data::Xml::Dom::IXmlNode ReplaceChild(Windows::Data::Xml::Dom::IXmlNode const & newChild, Windows::Data::Xml::Dom::IXmlNode const & referenceChild) const;
	Windows::Data::Xml::Dom::IXmlNode RemoveChild(Windows::Data::Xml::Dom::IXmlNode const & childNode) const;
	Windows::Data::Xml::Dom::IXmlNode AppendChild(Windows::Data::Xml::Dom::IXmlNode const & newChild) const;
	Windows::Data::Xml::Dom::IXmlNode CloneNode(bool deep) const;
	IInspectable NamespaceUri() const;
	IInspectable LocalName() const;
	IInspectable Prefix() const;
	void Normalize() const;
	void Prefix(IInspectable const & value) const;
};

template <typename T>
struct impl_IXmlDomImplementation
{
	bool HasFeature(String const & feature, IInspectable const & version) const;
	template <unsigned S0> bool HasFeature(wchar_t const (&feature)[S0], IInspectable const & version) const;
};

template <typename T>
struct impl_IXmlDocumentType
{
	String Name() const;
	Windows::Data::Xml::Dom::XmlNamedNodeMap Entities() const;
	Windows::Data::Xml::Dom::XmlNamedNodeMap Notations() const;
};

template <typename T>
struct impl_IXmlAttribute
{
	String Name() const;
	bool Specified() const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IXmlDocumentFragment
{
};

template <typename T>
struct impl_IXmlElement
{
	String TagName() const;
	String GetAttribute(String const & attributeName) const;
	template <unsigned S0> String GetAttribute(wchar_t const (&attributeName)[S0]) const;
	void SetAttribute(String const & attributeName, String const & attributeValue) const;
	template <unsigned S0, unsigned S1> void SetAttribute(wchar_t const (&attributeName)[S0], wchar_t const (&attributeValue)[S1]) const;
	void RemoveAttribute(String const & attributeName) const;
	template <unsigned S0> void RemoveAttribute(wchar_t const (&attributeName)[S0]) const;
	Windows::Data::Xml::Dom::XmlAttribute GetAttributeNode(String const & attributeName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute GetAttributeNode(wchar_t const (&attributeName)[S0]) const;
	Windows::Data::Xml::Dom::XmlAttribute SetAttributeNode(Windows::Data::Xml::Dom::XmlAttribute const & newAttribute) const;
	Windows::Data::Xml::Dom::XmlAttribute RemoveAttributeNode(Windows::Data::Xml::Dom::XmlAttribute const & attributeNode) const;
	Windows::Data::Xml::Dom::XmlNodeList GetElementsByTagName(String const & tagName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList GetElementsByTagName(wchar_t const (&tagName)[S0]) const;
	void SetAttributeNS(IInspectable const & namespaceUri, String const & qualifiedName, String const & value) const;
	template <unsigned S0, unsigned S1> void SetAttributeNS(IInspectable const & namespaceUri, wchar_t const (&qualifiedName)[S0], wchar_t const (&value)[S1]) const;
	String GetAttributeNS(IInspectable const & namespaceUri, String const & localName) const;
	template <unsigned S0> String GetAttributeNS(IInspectable const & namespaceUri, wchar_t const (&localName)[S0]) const;
	void RemoveAttributeNS(IInspectable const & namespaceUri, String const & localName) const;
	template <unsigned S0> void RemoveAttributeNS(IInspectable const & namespaceUri, wchar_t const (&localName)[S0]) const;
	Windows::Data::Xml::Dom::XmlAttribute SetAttributeNodeNS(Windows::Data::Xml::Dom::XmlAttribute const & newAttribute) const;
	Windows::Data::Xml::Dom::XmlAttribute GetAttributeNodeNS(IInspectable const & namespaceUri, String const & localName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute GetAttributeNodeNS(IInspectable const & namespaceUri, wchar_t const (&localName)[S0]) const;
};

template <typename T>
struct impl_IDtdNotation
{
	IInspectable PublicId() const;
	IInspectable SystemId() const;
};

template <typename T>
struct impl_IDtdEntity
{
	IInspectable PublicId() const;
	IInspectable SystemId() const;
	IInspectable NotationName() const;
};

template <typename T>
struct impl_IXmlEntityReference
{
};

template <typename T>
struct impl_IXmlProcessingInstruction
{
	String Target() const;
	String Data() const;
	void Data(String const & value) const;
	template <unsigned S0> void Data(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IXmlCharacterData
{
	String Data() const;
	void Data(String const & value) const;
	template <unsigned S0> void Data(wchar_t const (&value)[S0]) const;
	unsigned Length() const;
	String SubstringData(unsigned offset, unsigned count) const;
	void AppendData(String const & data) const;
	template <unsigned S0> void AppendData(wchar_t const (&data)[S0]) const;
	void InsertData(unsigned offset, String const & data) const;
	template <unsigned S0> void InsertData(unsigned offset, wchar_t const (&data)[S0]) const;
	void DeleteData(unsigned offset, unsigned count) const;
	void ReplaceData(unsigned offset, unsigned count, String const & data) const;
	template <unsigned S0> void ReplaceData(unsigned offset, unsigned count, wchar_t const (&data)[S0]) const;
};

template <typename T>
struct impl_IXmlComment
{
};

template <typename T>
struct impl_IXmlText
{
	Windows::Data::Xml::Dom::IXmlText SplitText(unsigned offset) const;
};

template <typename T>
struct impl_IXmlCDataSection
{
};

template <typename T>
struct impl_IXmlDocument
{
	Windows::Data::Xml::Dom::XmlDocumentType Doctype() const;
	Windows::Data::Xml::Dom::XmlDomImplementation Implementation() const;
	Windows::Data::Xml::Dom::XmlElement DocumentElement() const;
	Windows::Data::Xml::Dom::XmlElement CreateElement(String const & tagName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlElement CreateElement(wchar_t const (&tagName)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocumentFragment CreateDocumentFragment() const;
	Windows::Data::Xml::Dom::XmlText CreateTextNode(String const & data) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlText CreateTextNode(wchar_t const (&data)[S0]) const;
	Windows::Data::Xml::Dom::XmlComment CreateComment(String const & data) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlComment CreateComment(wchar_t const (&data)[S0]) const;
	Windows::Data::Xml::Dom::XmlProcessingInstruction CreateProcessingInstruction(String const & target, String const & data) const;
	template <unsigned S0, unsigned S1> Windows::Data::Xml::Dom::XmlProcessingInstruction CreateProcessingInstruction(wchar_t const (&target)[S0], wchar_t const (&data)[S1]) const;
	Windows::Data::Xml::Dom::XmlAttribute CreateAttribute(String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute CreateAttribute(wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::XmlEntityReference CreateEntityReference(String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlEntityReference CreateEntityReference(wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::XmlNodeList GetElementsByTagName(String const & tagName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList GetElementsByTagName(wchar_t const (&tagName)[S0]) const;
	Windows::Data::Xml::Dom::XmlCDataSection CreateCDataSection(String const & data) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlCDataSection CreateCDataSection(wchar_t const (&data)[S0]) const;
	String DocumentUri() const;
	Windows::Data::Xml::Dom::XmlAttribute CreateAttributeNS(IInspectable const & namespaceUri, String const & qualifiedName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute CreateAttributeNS(IInspectable const & namespaceUri, wchar_t const (&qualifiedName)[S0]) const;
	Windows::Data::Xml::Dom::XmlElement CreateElementNS(IInspectable const & namespaceUri, String const & qualifiedName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlElement CreateElementNS(IInspectable const & namespaceUri, wchar_t const (&qualifiedName)[S0]) const;
	Windows::Data::Xml::Dom::XmlElement GetElementById(String const & elementId) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlElement GetElementById(wchar_t const (&elementId)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode ImportNode(Windows::Data::Xml::Dom::IXmlNode const & node, bool deep) const;
};

template <typename T>
struct impl_IXmlNamedNodeMap
{
	unsigned Length() const;
	Windows::Data::Xml::Dom::IXmlNode Item(unsigned index) const;
	Windows::Data::Xml::Dom::IXmlNode GetNamedItem(String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode GetNamedItem(wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode SetNamedItem(Windows::Data::Xml::Dom::IXmlNode const & node) const;
	Windows::Data::Xml::Dom::IXmlNode RemoveNamedItem(String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode RemoveNamedItem(wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode GetNamedItemNS(IInspectable const & namespaceUri, String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode GetNamedItemNS(IInspectable const & namespaceUri, wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode RemoveNamedItemNS(IInspectable const & namespaceUri, String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode RemoveNamedItemNS(IInspectable const & namespaceUri, wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode SetNamedItemNS(Windows::Data::Xml::Dom::IXmlNode const & node) const;
};

template <typename T>
struct impl_IXmlNodeList
{
	unsigned Length() const;
	Windows::Data::Xml::Dom::IXmlNode Item(unsigned index) const;
};

template <typename T>
struct impl_IXmlLoadSettings
{
	unsigned MaxElementDepth() const;
	void MaxElementDepth(unsigned value) const;
	bool ProhibitDtd() const;
	void ProhibitDtd(bool value) const;
	bool ResolveExternals() const;
	void ResolveExternals(bool value) const;
	bool ValidateOnParse() const;
	void ValidateOnParse(bool value) const;
	bool ElementContentWhiteSpace() const;
	void ElementContentWhiteSpace(bool value) const;
};

template <typename T>
struct impl_IXmlDocumentIO
{
	void LoadXml(String const & xml) const;
	template <unsigned S0> void LoadXml(wchar_t const (&xml)[S0]) const;
	void LoadXml(String const & xml, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const;
	template <unsigned S0> void LoadXml(wchar_t const (&xml)[S0], Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const;
	Windows::Foundation::IAsyncAction SaveToFileAsync(Windows::Storage::IStorageFile const & file) const;
};

template <typename T>
struct impl_IXmlDocumentStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromUriAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

template <typename T>
struct impl_IXsltProcessor
{
	String TransformToString(Windows::Data::Xml::Dom::IXmlNode const & inputNode) const;
};

template <typename T>
struct impl_IXsltProcessorFactory
{
	Windows::Data::Xml::Xsl::XsltProcessor CreateInstance(Windows::Data::Xml::Dom::XmlDocument const & document) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

template <typename T>
struct impl_IDeviceUseDetails
{
	String DeviceId() const;
	String Arguments() const;
};

template <typename T>
struct impl_IDeviceServicingDetails
{
	String DeviceId() const;
	String Arguments() const;
	Windows::Foundation::TimeSpan ExpectedDuration() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

template <typename T>
struct impl_IKnownDeviceTypesStatics
{
	unsigned short Unknown() const;
};

template <typename T>
struct impl_IIOControlCode
{
	Windows::Devices::Custom::IOControlAccessMode AccessMode() const;
	Windows::Devices::Custom::IOControlBufferingMethod BufferingMethod() const;
	unsigned short Function() const;
	unsigned short DeviceType() const;
	unsigned ControlCode() const;
};

template <typename T>
struct impl_IIOControlCodeFactory
{
	Windows::Devices::Custom::IOControlCode CreateIOControlCode(unsigned short deviceType, unsigned short function, Windows::Devices::Custom::IOControlAccessMode accessMode, Windows::Devices::Custom::IOControlBufferingMethod bufferingMethod) const;
};

template <typename T>
struct impl_ICustomDeviceStatics
{
	String GetDeviceSelector(GUID classGuid) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> FromIdAsync(String const & deviceId, Windows::Devices::Custom::DeviceAccessMode desiredAccess, Windows::Devices::Custom::DeviceSharingMode sharingMode) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Devices::Custom::DeviceAccessMode desiredAccess, Windows::Devices::Custom::DeviceSharingMode sharingMode) const;
};

template <typename T>
struct impl_ICustomDevice
{
	Windows::Storage::Streams::IInputStream InputStream() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncOperation<unsigned> SendIOControlAsync(Windows::Devices::Custom::IIOControlCode const & ioControlCode, Windows::Storage::Streams::IBuffer const & inputBuffer, Windows::Storage::Streams::IBuffer const & outputBuffer) const;
	Windows::Foundation::IAsyncOperation<bool> TrySendIOControlAsync(Windows::Devices::Custom::IIOControlCode const & ioControlCode, Windows::Storage::Streams::IBuffer const & inputBuffer, Windows::Storage::Streams::IBuffer const & outputBuffer) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

template <typename T>
struct impl_IEnclosureLocation
{
	bool InDock() const;
	bool InLid() const;
	Windows::Devices::Enumeration::Panel Panel() const;
};

template <typename T>
struct impl_IDeviceInformationUpdate
{
	String Id() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
};

template <typename T>
struct impl_IDeviceWatcher
{
	EventRegistrationToken Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformation> const & handler) const;
	template <typename F> EventRegistrationToken Added(F handler) const;
	void Added(EventRegistrationToken token) const;
	EventRegistrationToken Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const;
	template <typename F> EventRegistrationToken Updated(F handler) const;
	void Updated(EventRegistrationToken token) const;
	EventRegistrationToken Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const;
	template <typename F> EventRegistrationToken Removed(F handler) const;
	void Removed(EventRegistrationToken token) const;
	EventRegistrationToken EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken EnumerationCompleted(F handler) const;
	void EnumerationCompleted(EventRegistrationToken token) const;
	EventRegistrationToken Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Stopped(F handler) const;
	void Stopped(EventRegistrationToken token) const;
	Windows::Devices::Enumeration::DeviceWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
};

template <typename T>
struct impl_IDeviceInformationStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(wchar_t const (&deviceId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(String const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(String const & aqsFilter) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(wchar_t const (&aqsFilter)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher() const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(String const & aqsFilter) const;
	template <unsigned S0> Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(wchar_t const (&aqsFilter)[S0]) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	template <unsigned S0> Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
};

template <typename T>
struct impl_IDeviceInformation
{
	String Id() const;
	String Name() const;
	bool IsEnabled() const;
	bool IsDefault() const;
	Windows::Devices::Enumeration::EnclosureLocation EnclosureLocation() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
	void Update(Windows::Devices::Enumeration::DeviceInformationUpdate const & updateInfo) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> GetThumbnailAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> GetGlyphThumbnailAsync() const;
};

template <typename T>
struct impl_IDeviceAccessChangedEventArgs
{
	Windows::Devices::Enumeration::DeviceAccessStatus Status() const;
};

template <typename T>
struct impl_IDeviceAccessInformation
{
	EventRegistrationToken AccessChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceAccessInformation, Windows::Devices::Enumeration::DeviceAccessChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccessChanged(F handler) const;
	void AccessChanged(EventRegistrationToken cookie) const;
	Windows::Devices::Enumeration::DeviceAccessStatus CurrentStatus() const;
};

template <typename T>
struct impl_IDeviceAccessInformationStatics
{
	Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(String const & deviceId) const;
	template <unsigned S0> Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(wchar_t const (&deviceId)[S0]) const;
	Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClassId(GUID deviceClassId) const;
	Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

template <typename T>
struct impl_IPnpObjectUpdate
{
	Windows::Devices::Enumeration::Pnp::PnpObjectType Type() const;
	String Id() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
};

template <typename T>
struct impl_IPnpObjectWatcher
{
	EventRegistrationToken Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObject> const & handler) const;
	template <typename F> EventRegistrationToken Added(F handler) const;
	void Added(EventRegistrationToken token) const;
	EventRegistrationToken Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate> const & handler) const;
	template <typename F> EventRegistrationToken Updated(F handler) const;
	void Updated(EventRegistrationToken token) const;
	EventRegistrationToken Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate> const & handler) const;
	template <typename F> EventRegistrationToken Removed(F handler) const;
	void Removed(EventRegistrationToken token) const;
	EventRegistrationToken EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken EnumerationCompleted(F handler) const;
	void EnumerationCompleted(EventRegistrationToken token) const;
	EventRegistrationToken Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Stopped(F handler) const;
	void Stopped(EventRegistrationToken token) const;
	Windows::Devices::Enumeration::DeviceWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
};

template <typename T>
struct impl_IPnpObjectStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, String const & id, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, wchar_t const (&id)[S0], Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]) const;
	Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const;
	Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter) const;
	template <unsigned S0> Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]) const;
};

template <typename T>
struct impl_IPnpObject
{
	Windows::Devices::Enumeration::Pnp::PnpObjectType Type() const;
	String Id() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
	void Update(Windows::Devices::Enumeration::Pnp::PnpObjectUpdate const & updateInfo) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

template <typename T>
struct impl_IGeoshape
{
	Windows::Devices::Geolocation::GeoshapeType GeoshapeType() const;
	unsigned SpatialReferenceId() const;
	Windows::Devices::Geolocation::AltitudeReferenceSystem AltitudeReferenceSystem() const;
};

template <typename T>
struct impl_IGeopoint
{
	Windows::Devices::Geolocation::BasicGeoposition Position() const;
};

template <typename T>
struct impl_IGeopointFactory
{
	Windows::Devices::Geolocation::Geopoint Create(Windows::Devices::Geolocation::BasicGeoposition const & position) const;
	Windows::Devices::Geolocation::Geopoint CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem) const;
	Windows::Devices::Geolocation::Geopoint CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId) const;
};

template <typename T>
struct impl_IGeocoordinateSatelliteData
{
	Windows::Foundation::IReference<double> PositionDilutionOfPrecision() const;
	Windows::Foundation::IReference<double> HorizontalDilutionOfPrecision() const;
	Windows::Foundation::IReference<double> VerticalDilutionOfPrecision() const;
};

template <typename T>
struct impl_IGeocoordinate
{
	double Accuracy() const;
	Windows::Foundation::IReference<double> AltitudeAccuracy() const;
	Windows::Foundation::IReference<double> Heading() const;
	Windows::Foundation::IReference<double> Speed() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
struct impl_IGeocoordinateWithPositionData
{
	Windows::Devices::Geolocation::PositionSource PositionSource() const;
	Windows::Devices::Geolocation::GeocoordinateSatelliteData SatelliteData() const;
};

template <typename T>
struct impl_IGeocoordinateWithPoint
{
	Windows::Devices::Geolocation::Geopoint Point() const;
};

template <typename T>
struct impl_ICivicAddress
{
	String Country() const;
	String State() const;
	String City() const;
	String PostalCode() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
struct impl_IGeoposition
{
	Windows::Devices::Geolocation::Geocoordinate Coordinate() const;
	Windows::Devices::Geolocation::CivicAddress CivicAddress() const;
};

template <typename T>
struct impl_IPositionChangedEventArgs
{
	Windows::Devices::Geolocation::Geoposition Position() const;
};

template <typename T>
struct impl_IStatusChangedEventArgs
{
	Windows::Devices::Geolocation::PositionStatus Status() const;
};

template <typename T>
struct impl_IGeolocator
{
	Windows::Devices::Geolocation::PositionAccuracy DesiredAccuracy() const;
	void DesiredAccuracy(Windows::Devices::Geolocation::PositionAccuracy value) const;
	double MovementThreshold() const;
	void MovementThreshold(double value) const;
	unsigned ReportInterval() const;
	void ReportInterval(unsigned value) const;
	Windows::Devices::Geolocation::PositionStatus LocationStatus() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> GetGeopositionAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> GetGeopositionAsync(Windows::Foundation::TimeSpan const & maximumAge, Windows::Foundation::TimeSpan const & timeout) const;
	EventRegistrationToken PositionChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::PositionChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PositionChanged(F handler) const;
	void PositionChanged(EventRegistrationToken token) const;
	EventRegistrationToken StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::StatusChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken StatusChanged(F handler) const;
	void StatusChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IGeolocatorWithScalarAccuracy
{
	Windows::Foundation::IReference<unsigned> DesiredAccuracyInMeters() const;
	void DesiredAccuracyInMeters(Windows::Foundation::IReference<unsigned> const & value) const;
};

template <typename T>
struct impl_IGeocircle
{
	Windows::Devices::Geolocation::BasicGeoposition Center() const;
	double Radius() const;
};

template <typename T>
struct impl_IGeocircleFactory
{
	Windows::Devices::Geolocation::Geocircle Create(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius) const;
	Windows::Devices::Geolocation::Geocircle CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem) const;
	Windows::Devices::Geolocation::Geocircle CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

template <typename T>
struct impl_IGeofenceFactory
{
	Windows::Devices::Geolocation::Geofencing::Geofence Create(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape) const;
	template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence Create(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape) const;
	Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStates(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse) const;
	template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStates(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse) const;
	Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStatesAndDwellTime(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime) const;
	template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStatesAndDwellTime(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime) const;
	Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStatesDwellTimeStartTimeAndDuration(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const;
	template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStatesDwellTimeStartTimeAndDuration(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const;
};

template <typename T>
struct impl_IGeofence
{
	Windows::Foundation::DateTime StartTime() const;
	Windows::Foundation::TimeSpan Duration() const;
	Windows::Foundation::TimeSpan DwellTime() const;
	String Id() const;
	Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates MonitoredStates() const;
	Windows::Devices::Geolocation::IGeoshape Geoshape() const;
	bool SingleUse() const;
};

template <typename T>
struct impl_IGeofenceStateChangeReport
{
	Windows::Devices::Geolocation::Geofencing::GeofenceState NewState() const;
	Windows::Devices::Geolocation::Geofencing::Geofence Geofence() const;
	Windows::Devices::Geolocation::Geoposition Geoposition() const;
	Windows::Devices::Geolocation::Geofencing::GeofenceRemovalReason RemovalReason() const;
};

template <typename T>
struct impl_IGeofenceMonitorStatics
{
	Windows::Devices::Geolocation::Geofencing::GeofenceMonitor Current() const;
};

template <typename T>
struct impl_IGeofenceMonitor
{
	Windows::Devices::Geolocation::Geofencing::GeofenceMonitorStatus Status() const;
	Windows::Foundation::Collections::IVector<Windows::Devices::Geolocation::Geofencing::Geofence> Geofences() const;
	Windows::Devices::Geolocation::Geoposition LastKnownGeoposition() const;
	EventRegistrationToken GeofenceStateChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken GeofenceStateChanged(F eventHandler) const;
	void GeofenceStateChanged(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport> ReadReports() const;
	EventRegistrationToken StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken StatusChanged(F eventHandler) const;
	void StatusChanged(EventRegistrationToken token) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

template <typename T>
struct impl_IHidDeviceStatics
{
	String GetDeviceSelector(unsigned short usagePage, unsigned short usageId) const;
	String GetDeviceSelector(unsigned short usagePage, unsigned short usageId, unsigned short vendorId, unsigned short productId) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> FromIdAsync(String const & deviceId, Windows::Storage::FileAccessMode accessMode) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Storage::FileAccessMode accessMode) const;
};

template <typename T>
struct impl_IHidBooleanControlDescription
{
	unsigned Id() const;
	unsigned short ReportId() const;
	Windows::Devices::HumanInterfaceDevice::HidReportType ReportType() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> ParentCollections() const;
};

template <typename T>
struct impl_IHidNumericControlDescription
{
	unsigned Id() const;
	unsigned short ReportId() const;
	Windows::Devices::HumanInterfaceDevice::HidReportType ReportType() const;
	unsigned ReportSize() const;
	unsigned ReportCount() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	int LogicalMinimum() const;
	int LogicalMaximum() const;
	int PhysicalMinimum() const;
	int PhysicalMaximum() const;
	unsigned UnitExponent() const;
	unsigned Unit() const;
	bool IsAbsolute() const;
	bool HasNull() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> ParentCollections() const;
};

template <typename T>
struct impl_IHidCollection
{
	unsigned Id() const;
	Windows::Devices::HumanInterfaceDevice::HidCollectionType Type() const;
	unsigned UsagePage() const;
	unsigned UsageId() const;
};

template <typename T>
struct impl_IHidInputReport
{
	unsigned short Id() const;
	Windows::Storage::Streams::IBuffer Data() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> ActivatedBooleanControls() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> TransitionedBooleanControls() const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const;
};

template <typename T>
struct impl_IHidOutputReport
{
	unsigned short Id() const;
	Windows::Storage::Streams::IBuffer Data() const;
	void Data(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const;
};

template <typename T>
struct impl_IHidFeatureReport
{
	unsigned short Id() const;
	Windows::Storage::Streams::IBuffer Data() const;
	void Data(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const;
};

template <typename T>
struct impl_IHidInputReportReceivedEventArgs
{
	Windows::Devices::HumanInterfaceDevice::HidInputReport Report() const;
};

template <typename T>
struct impl_IHidBooleanControl
{
	unsigned Id() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	bool IsActive() const;
	void IsActive(bool value) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription ControlDescription() const;
};

template <typename T>
struct impl_IHidNumericControl
{
	unsigned Id() const;
	bool IsGrouped() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	long long Value() const;
	void Value(long long value) const;
	long long ScaledValue() const;
	void ScaledValue(long long value) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription ControlDescription() const;
};

template <typename T>
struct impl_IHidDevice
{
	unsigned short VendorId() const;
	unsigned short ProductId() const;
	unsigned short Version() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> GetInputReportAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> GetInputReportAsync(unsigned short reportId) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> GetFeatureReportAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> GetFeatureReportAsync(unsigned short reportId) const;
	Windows::Devices::HumanInterfaceDevice::HidOutputReport CreateOutputReport() const;
	Windows::Devices::HumanInterfaceDevice::HidOutputReport CreateOutputReport(unsigned short reportId) const;
	Windows::Devices::HumanInterfaceDevice::HidFeatureReport CreateFeatureReport() const;
	Windows::Devices::HumanInterfaceDevice::HidFeatureReport CreateFeatureReport(unsigned short reportId) const;
	Windows::Foundation::IAsyncOperation<unsigned> SendOutputReportAsync(Windows::Devices::HumanInterfaceDevice::HidOutputReport const & outputReport) const;
	Windows::Foundation::IAsyncOperation<unsigned> SendFeatureReportAsync(Windows::Devices::HumanInterfaceDevice::HidFeatureReport const & featureReport) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription> GetBooleanControlDescriptions(Windows::Devices::HumanInterfaceDevice::HidReportType reportType, unsigned short usagePage, unsigned short usageId) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription> GetNumericControlDescriptions(Windows::Devices::HumanInterfaceDevice::HidReportType reportType, unsigned short usagePage, unsigned short usageId) const;
	EventRegistrationToken InputReportReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::HumanInterfaceDevice::HidDevice, Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs> const & reportHandler) const;
	template <typename F> EventRegistrationToken InputReportReceived(F reportHandler) const;
	void InputReportReceived(EventRegistrationToken token) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

template <typename T>
struct impl_IMouseCapabilities
{
	int MousePresent() const;
	int VerticalWheelPresent() const;
	int HorizontalWheelPresent() const;
	int SwapButtons() const;
	unsigned NumberOfButtons() const;
};

template <typename T>
struct impl_IKeyboardCapabilities
{
	int KeyboardPresent() const;
};

template <typename T>
struct impl_ITouchCapabilities
{
	int TouchPresent() const;
	unsigned Contacts() const;
};

template <typename T>
struct impl_IPointerDeviceStatics
{
	Windows::Devices::Input::PointerDevice GetPointerDevice(unsigned pointerId) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> GetPointerDevices() const;
};

template <typename T>
struct impl_IPointerDevice
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	bool IsIntegrated() const;
	unsigned MaxContacts() const;
	Windows::Foundation::Rect PhysicalDeviceRect() const;
	Windows::Foundation::Rect ScreenRect() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Devices::Input::PointerDeviceUsage> SupportedUsages() const;
};

template <typename T>
struct impl_IMouseEventArgs
{
	Windows::Devices::Input::MouseDelta MouseDelta() const;
};

template <typename T>
struct impl_IMouseDevice
{
	EventRegistrationToken MouseMoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::Input::MouseDevice, Windows::Devices::Input::MouseEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken MouseMoved(F handler) const;
	void MouseMoved(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IMouseDeviceStatics
{
	Windows::Devices::Input::MouseDevice GetForCurrentView() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

template <typename T>
struct impl_IUnifiedPosErrorData
{
	String Message() const;
	Windows::Devices::PointOfService::UnifiedPosErrorSeverity Severity() const;
	Windows::Devices::PointOfService::UnifiedPosErrorReason Reason() const;
	unsigned ExtendedReason() const;
};

template <typename T>
struct impl_IBarcodeScannerStatusUpdatedEventArgs
{
	Windows::Devices::PointOfService::BarcodeScannerStatus Status() const;
	unsigned ExtendedStatus() const;
};

template <typename T>
struct impl_IBarcodeSymbologiesStatics
{
	unsigned Unknown() const;
	unsigned Ean8() const;
	unsigned Ean8Add2() const;
	unsigned Ean8Add5() const;
	unsigned Eanv() const;
	unsigned EanvAdd2() const;
	unsigned EanvAdd5() const;
	unsigned Ean13() const;
	unsigned Ean13Add2() const;
	unsigned Ean13Add5() const;
	unsigned Isbn() const;
	unsigned IsbnAdd5() const;
	unsigned Ismn() const;
	unsigned IsmnAdd2() const;
	unsigned IsmnAdd5() const;
	unsigned Issn() const;
	unsigned IssnAdd2() const;
	unsigned IssnAdd5() const;
	unsigned Ean99() const;
	unsigned Ean99Add2() const;
	unsigned Ean99Add5() const;
	unsigned Upca() const;
	unsigned UpcaAdd2() const;
	unsigned UpcaAdd5() const;
	unsigned Upce() const;
	unsigned UpceAdd2() const;
	unsigned UpceAdd5() const;
	unsigned UpcCoupon() const;
	unsigned TfStd() const;
	unsigned TfDis() const;
	unsigned TfInt() const;
	unsigned TfInd() const;
	unsigned TfMat() const;
	unsigned TfIata() const;
	unsigned Gs1DatabarType1() const;
	unsigned Gs1DatabarType2() const;
	unsigned Gs1DatabarType3() const;
	unsigned Code39() const;
	unsigned Code39Ex() const;
	unsigned Trioptic39() const;
	unsigned Code32() const;
	unsigned Pzn() const;
	unsigned Code93() const;
	unsigned Code93Ex() const;
	unsigned Code128() const;
	unsigned Gs1128() const;
	unsigned Gs1128Coupon() const;
	unsigned UccEan128() const;
	unsigned Sisac() const;
	unsigned Isbt() const;
	unsigned Codabar() const;
	unsigned Code11() const;
	unsigned Msi() const;
	unsigned Plessey() const;
	unsigned Telepen() const;
	unsigned Code16k() const;
	unsigned CodablockA() const;
	unsigned CodablockF() const;
	unsigned Codablock128() const;
	unsigned Code49() const;
	unsigned Aztec() const;
	unsigned DataCode() const;
	unsigned DataMatrix() const;
	unsigned HanXin() const;
	unsigned Maxicode() const;
	unsigned MicroPdf417() const;
	unsigned MicroQr() const;
	unsigned Pdf417() const;
	unsigned Qr() const;
	unsigned MsTag() const;
	unsigned Ccab() const;
	unsigned Ccc() const;
	unsigned Tlc39() const;
	unsigned AusPost() const;
	unsigned CanPost() const;
	unsigned ChinaPost() const;
	unsigned DutchKix() const;
	unsigned InfoMail() const;
	unsigned ItalianPost25() const;
	unsigned ItalianPost39() const;
	unsigned JapanPost() const;
	unsigned KoreanPost() const;
	unsigned SwedenPost() const;
	unsigned UkPost() const;
	unsigned UsIntelligent() const;
	unsigned UsIntelligentPkg() const;
	unsigned UsPlanet() const;
	unsigned UsPostNet() const;
	unsigned Us4StateFics() const;
	unsigned OcrA() const;
	unsigned OcrB() const;
	unsigned Micr() const;
	unsigned ExtendedBase() const;
	String GetName(unsigned scanDataType) const;
};

template <typename T>
struct impl_IBarcodeScannerDataReceivedEventArgs
{
	Windows::Devices::PointOfService::BarcodeScannerReport Report() const;
};

template <typename T>
struct impl_IBarcodeScannerReport
{
	unsigned ScanDataType() const;
	Windows::Storage::Streams::IBuffer ScanData() const;
	Windows::Storage::Streams::IBuffer ScanDataLabel() const;
};

template <typename T>
struct impl_IBarcodeScannerErrorOccurredEventArgs
{
	Windows::Devices::PointOfService::BarcodeScannerReport PartialInputData() const;
	bool IsRetriable() const;
	Windows::Devices::PointOfService::UnifiedPosErrorData ErrorData() const;
};

template <typename T>
struct impl_IBarcodeScannerImagePreviewReceivedEventArgs
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType Preview() const;
};

template <typename T>
struct impl_IBarcodeScannerCapabilities
{
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType PowerReportingType() const;
	bool IsStatisticsReportingSupported() const;
	bool IsStatisticsUpdatingSupported() const;
	bool IsImagePreviewSupported() const;
};

template <typename T>
struct impl_IBarcodeScannerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> GetDefaultAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
	String GetDeviceSelector() const;
};

template <typename T>
struct impl_IBarcodeScanner
{
	String DeviceId() const;
	Windows::Devices::PointOfService::BarcodeScannerCapabilities Capabilities() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedBarcodeScanner> ClaimScannerAsync() const;
	Windows::Foundation::IAsyncOperation<String> CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel level) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<unsigned>> GetSupportedSymbologiesAsync() const;
	Windows::Foundation::IAsyncOperation<bool> IsSymbologySupportedAsync(unsigned barcodeSymbology) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> RetrieveStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const;
	Windows::Foundation::Collections::IVectorView<String> GetSupportedProfiles() const;
	bool IsProfileSupported(String const & profile) const;
	template <unsigned S0> bool IsProfileSupported(wchar_t const (&profile)[S0]) const;
	EventRegistrationToken StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::BarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken StatusUpdated(F handler) const;
	void StatusUpdated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IMagneticStripeReaderEncryptionAlgorithmsStatics
{
	unsigned None() const;
	unsigned TripleDesDukpt() const;
	unsigned ExtendedBase() const;
};

template <typename T>
struct impl_IMagneticStripeReaderCardTypesStatics
{
	unsigned Unknown() const;
	unsigned Bank() const;
	unsigned Aamva() const;
	unsigned ExtendedBase() const;
};

template <typename T>
struct impl_IMagneticStripeReaderTrackData
{
	Windows::Storage::Streams::IBuffer Data() const;
	Windows::Storage::Streams::IBuffer DiscretionaryData() const;
	Windows::Storage::Streams::IBuffer EncryptedData() const;
};

template <typename T>
struct impl_IMagneticStripeReaderReport
{
	unsigned CardType() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData Track1() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData Track2() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData Track3() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData Track4() const;
	Windows::Foundation::Collections::IMapView<String, String> Properties() const;
	Windows::Storage::Streams::IBuffer CardAuthenticationData() const;
	unsigned CardAuthenticationDataLength() const;
	Windows::Storage::Streams::IBuffer AdditionalSecurityInformation() const;
};

template <typename T>
struct impl_IMagneticStripeReaderBankCardDataReceivedEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport Report() const;
	String AccountNumber() const;
	String ExpirationDate() const;
	String ServiceCode() const;
	String Title() const;
	String FirstName() const;
	String MiddleInitial() const;
	String Surname() const;
	String Suffix() const;
};

template <typename T>
struct impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport Report() const;
	String LicenseNumber() const;
	String ExpirationDate() const;
	String Restrictions() const;
	String Class() const;
	String Endorsements() const;
	String BirthDate() const;
	String FirstName() const;
	String Surname() const;
	String Suffix() const;
	String Gender() const;
	String HairColor() const;
	String EyeColor() const;
	String Height() const;
	String Weight() const;
	String Address() const;
	String City() const;
	String State() const;
	String PostalCode() const;
};

template <typename T>
struct impl_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport Report() const;
};

template <typename T>
struct impl_IMagneticStripeReaderErrorOccurredEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType Track1Status() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType Track2Status() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType Track3Status() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType Track4Status() const;
	Windows::Devices::PointOfService::UnifiedPosErrorData ErrorData() const;
	Windows::Devices::PointOfService::MagneticStripeReaderReport PartialInputData() const;
};

template <typename T>
struct impl_IMagneticStripeReaderStatusUpdatedEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderStatus Status() const;
	unsigned ExtendedStatus() const;
};

template <typename T>
struct impl_IMagneticStripeReaderCapabilities
{
	String CardAuthentication() const;
	unsigned SupportedEncryptionAlgorithms() const;
	Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationLevel AuthenticationLevel() const;
	bool IsIsoSupported() const;
	bool IsJisOneSupported() const;
	bool IsJisTwoSupported() const;
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType PowerReportingType() const;
	bool IsStatisticsReportingSupported() const;
	bool IsStatisticsUpdatingSupported() const;
	bool IsTrackDataMaskingSupported() const;
	bool IsTransmitSentinelsSupported() const;
};

template <typename T>
struct impl_IMagneticStripeReaderStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> GetDefaultAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
	String GetDeviceSelector() const;
};

template <typename T>
struct impl_IMagneticStripeReader
{
	String DeviceId() const;
	Windows::Devices::PointOfService::MagneticStripeReaderCapabilities Capabilities() const;
	Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationProtocol DeviceAuthenticationProtocol() const;
	Windows::Foundation::IAsyncOperation<String> CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel level) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> ClaimReaderAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> RetrieveStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const;
	Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType GetErrorReportingType() const;
	EventRegistrationToken StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::MagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken StatusUpdated(F handler) const;
	void StatusUpdated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IClaimedBarcodeScanner
{
	String DeviceId() const;
	bool IsEnabled() const;
	void IsDisabledOnDataReceived(bool value) const;
	bool IsDisabledOnDataReceived() const;
	void IsDecodeDataEnabled(bool value) const;
	bool IsDecodeDataEnabled() const;
	Windows::Foundation::IAsyncAction EnableAsync() const;
	Windows::Foundation::IAsyncAction DisableAsync() const;
	void RetainDevice() const;
	Windows::Foundation::IAsyncAction SetActiveSymbologiesAsync(Windows::Foundation::Collections::IIterable<unsigned> const & symbologies) const;
	Windows::Foundation::IAsyncAction ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const;
	Windows::Foundation::IAsyncAction UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const;
	Windows::Foundation::IAsyncAction SetActiveProfileAsync(String const & profile) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction SetActiveProfileAsync(wchar_t const (&profile)[S0]) const;
	EventRegistrationToken DataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken DataReceived(F handler) const;
	void DataReceived(EventRegistrationToken token) const;
	EventRegistrationToken TriggerPressed(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const;
	template <typename F> EventRegistrationToken TriggerPressed(F handler) const;
	void TriggerPressed(EventRegistrationToken token) const;
	EventRegistrationToken TriggerReleased(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const;
	template <typename F> EventRegistrationToken TriggerReleased(F handler) const;
	void TriggerReleased(EventRegistrationToken token) const;
	EventRegistrationToken ReleaseDeviceRequested(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const;
	template <typename F> EventRegistrationToken ReleaseDeviceRequested(F handler) const;
	void ReleaseDeviceRequested(EventRegistrationToken token) const;
	EventRegistrationToken ImagePreviewReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ImagePreviewReceived(F handler) const;
	void ImagePreviewReceived(EventRegistrationToken token) const;
	EventRegistrationToken ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ErrorOccurred(F handler) const;
	void ErrorOccurred(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IClaimedMagneticStripeReader
{
	String DeviceId() const;
	bool IsEnabled() const;
	void IsDisabledOnDataReceived(bool value) const;
	bool IsDisabledOnDataReceived() const;
	void IsDecodeDataEnabled(bool value) const;
	bool IsDecodeDataEnabled() const;
	bool IsDeviceAuthenticated() const;
	void DataEncryptionAlgorithm(unsigned value) const;
	unsigned DataEncryptionAlgorithm() const;
	void TracksToRead(Windows::Devices::PointOfService::MagneticStripeReaderTrackIds value) const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackIds TracksToRead() const;
	void IsTransmitSentinelsEnabled(bool value) const;
	bool IsTransmitSentinelsEnabled() const;
	Windows::Foundation::IAsyncAction EnableAsync() const;
	Windows::Foundation::IAsyncAction DisableAsync() const;
	void RetainDevice() const;
	void SetErrorReportingType(Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType value) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> RetrieveDeviceAuthenticationDataAsync() const;
	Windows::Foundation::IAsyncAction UpdateKeyAsync(String const & key, String const & keyName) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction UpdateKeyAsync(wchar_t const (&key)[S0], wchar_t const (&keyName)[S1]) const;
	Windows::Foundation::IAsyncAction ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const;
	Windows::Foundation::IAsyncAction UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const;
	EventRegistrationToken BankCardDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken BankCardDataReceived(F handler) const;
	void BankCardDataReceived(EventRegistrationToken token) const;
	EventRegistrationToken AamvaCardDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AamvaCardDataReceived(F handler) const;
	void AamvaCardDataReceived(EventRegistrationToken token) const;
	EventRegistrationToken VendorSpecificDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VendorSpecificDataReceived(F handler) const;
	void VendorSpecificDataReceived(EventRegistrationToken token) const;
	EventRegistrationToken ReleaseDeviceRequested(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> const & handler) const;
	template <typename F> EventRegistrationToken ReleaseDeviceRequested(F handler) const;
	void ReleaseDeviceRequested(EventRegistrationToken token) const;
	EventRegistrationToken ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ErrorOccurred(F handler) const;
	void ErrorOccurred(EventRegistrationToken token) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

template <typename T>
struct impl_IStorageDeviceStatics
{
	Windows::Storage::StorageFolder FromId(String const & deviceId) const;
	template <unsigned S0> Windows::Storage::StorageFolder FromId(wchar_t const (&deviceId)[S0]) const;
	String GetDeviceSelector() const;
};

template <typename T>
struct impl_IServiceDeviceStatics
{
	String GetDeviceSelector(Windows::Devices::Portable::ServiceDeviceType serviceType) const;
	String GetDeviceSelectorFromServiceId(GUID serviceId) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

template <typename T>
struct impl_IPrintTaskConfigurationSaveRequestedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IPrintTaskConfigurationSaveRequest
{
	void Cancel() const;
	void Save(IInspectable const & printerExtensionContext) const;
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
struct impl_IPrintTaskConfigurationSaveRequestedEventArgs
{
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest Request() const;
};

template <typename T>
struct impl_IPrintTaskConfiguration
{
	IInspectable PrinterExtensionContext() const;
	EventRegistrationToken SaveRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Printers::Extensions::PrintTaskConfiguration, Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken SaveRequested(F eventHandler) const;
	void SaveRequested(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IPrintNotificationEventDetails
{
	String PrinterName() const;
	String EventData() const;
	void EventData(String const & value) const;
	template <unsigned S0> void EventData(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IPrintExtensionContextStatic
{
	IInspectable FromDeviceId(String const & deviceId) const;
	template <unsigned S0> IInspectable FromDeviceId(wchar_t const (&deviceId)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

template <typename T>
struct impl_IAccelerometerStatics
{
	Windows::Devices::Sensors::Accelerometer GetDefault() const;
};

template <typename T>
struct impl_IAccelerometer
{
	Windows::Devices::Sensors::AccelerometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
	EventRegistrationToken Shaken(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerShakenEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Shaken(F handler) const;
	void Shaken(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IAccelerometerReading
{
	Windows::Foundation::DateTime Timestamp() const;
	double AccelerationX() const;
	double AccelerationY() const;
	double AccelerationZ() const;
};

template <typename T>
struct impl_IAccelerometerReadingChangedEventArgs
{
	Windows::Devices::Sensors::AccelerometerReading Reading() const;
};

template <typename T>
struct impl_IAccelerometerShakenEventArgs
{
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
struct impl_IInclinometerStatics
{
	Windows::Devices::Sensors::Inclinometer GetDefault() const;
};

template <typename T>
struct impl_IInclinometer
{
	Windows::Devices::Sensors::InclinometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Inclinometer, Windows::Devices::Sensors::InclinometerReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IInclinometerReading
{
	Windows::Foundation::DateTime Timestamp() const;
	float PitchDegrees() const;
	float RollDegrees() const;
	float YawDegrees() const;
};

template <typename T>
struct impl_IInclinometerReadingYawAccuracy
{
	Windows::Devices::Sensors::MagnetometerAccuracy YawAccuracy() const;
};

template <typename T>
struct impl_IInclinometerReadingChangedEventArgs
{
	Windows::Devices::Sensors::InclinometerReading Reading() const;
};

template <typename T>
struct impl_IGyrometerStatics
{
	Windows::Devices::Sensors::Gyrometer GetDefault() const;
};

template <typename T>
struct impl_IGyrometer
{
	Windows::Devices::Sensors::GyrometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Gyrometer, Windows::Devices::Sensors::GyrometerReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IGyrometerReading
{
	Windows::Foundation::DateTime Timestamp() const;
	double AngularVelocityX() const;
	double AngularVelocityY() const;
	double AngularVelocityZ() const;
};

template <typename T>
struct impl_IGyrometerReadingChangedEventArgs
{
	Windows::Devices::Sensors::GyrometerReading Reading() const;
};

template <typename T>
struct impl_ICompassStatics
{
	Windows::Devices::Sensors::Compass GetDefault() const;
};

template <typename T>
struct impl_ICompass
{
	Windows::Devices::Sensors::CompassReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Compass, Windows::Devices::Sensors::CompassReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICompassReading
{
	Windows::Foundation::DateTime Timestamp() const;
	double HeadingMagneticNorth() const;
	Windows::Foundation::IReference<double> HeadingTrueNorth() const;
};

template <typename T>
struct impl_ICompassReadingHeadingAccuracy
{
	Windows::Devices::Sensors::MagnetometerAccuracy HeadingAccuracy() const;
};

template <typename T>
struct impl_ICompassReadingChangedEventArgs
{
	Windows::Devices::Sensors::CompassReading Reading() const;
};

template <typename T>
struct impl_ILightSensorStatics
{
	Windows::Devices::Sensors::LightSensor GetDefault() const;
};

template <typename T>
struct impl_ILightSensor
{
	Windows::Devices::Sensors::LightSensorReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::LightSensor, Windows::Devices::Sensors::LightSensorReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ILightSensorReading
{
	Windows::Foundation::DateTime Timestamp() const;
	float IlluminanceInLux() const;
};

template <typename T>
struct impl_ILightSensorReadingChangedEventArgs
{
	Windows::Devices::Sensors::LightSensorReading Reading() const;
};

template <typename T>
struct impl_ISensorRotationMatrix
{
	float M11() const;
	float M12() const;
	float M13() const;
	float M21() const;
	float M22() const;
	float M23() const;
	float M31() const;
	float M32() const;
	float M33() const;
};

template <typename T>
struct impl_ISensorQuaternion
{
	float W() const;
	float X() const;
	float Y() const;
	float Z() const;
};

template <typename T>
struct impl_IOrientationSensorStatics
{
	Windows::Devices::Sensors::OrientationSensor GetDefault() const;
};

template <typename T>
struct impl_IOrientationSensor
{
	Windows::Devices::Sensors::OrientationSensorReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::OrientationSensor, Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IOrientationSensorReading
{
	Windows::Foundation::DateTime Timestamp() const;
	Windows::Devices::Sensors::SensorRotationMatrix RotationMatrix() const;
	Windows::Devices::Sensors::SensorQuaternion Quaternion() const;
};

template <typename T>
struct impl_IOrientationSensorReadingYawAccuracy
{
	Windows::Devices::Sensors::MagnetometerAccuracy YawAccuracy() const;
};

template <typename T>
struct impl_IOrientationSensorReadingChangedEventArgs
{
	Windows::Devices::Sensors::OrientationSensorReading Reading() const;
};

template <typename T>
struct impl_ISimpleOrientationSensorStatics
{
	Windows::Devices::Sensors::SimpleOrientationSensor GetDefault() const;
};

template <typename T>
struct impl_ISimpleOrientationSensor
{
	Windows::Devices::Sensors::SimpleOrientation GetCurrentOrientation() const;
	EventRegistrationToken OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::SimpleOrientationSensor, Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken OrientationChanged(F handler) const;
	void OrientationChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ISimpleOrientationSensorOrientationChangedEventArgs
{
	Windows::Foundation::DateTime Timestamp() const;
	Windows::Devices::Sensors::SimpleOrientation Orientation() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

template <typename T>
struct impl_ISmartCardPinResetHandler
{
	void Invoke(Windows::Devices::SmartCards::SmartCardProvisioning const & sender, Windows::Devices::SmartCards::SmartCardPinResetRequest const & request) const;
};

template <typename T>
struct impl_ISmartCardReaderStatics
{
	String GetDeviceSelector() const;
	String GetDeviceSelector(Windows::Devices::SmartCards::SmartCardReaderKind kind) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_ISmartCardReader
{
	String DeviceId() const;
	String Name() const;
	Windows::Devices::SmartCards::SmartCardReaderKind Kind() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Devices::SmartCards::SmartCardReaderStatus> GetStatusAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::SmartCards::SmartCard>> FindAllCardsAsync() const;
	EventRegistrationToken CardAdded(Windows::Foundation::ITypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardAddedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CardAdded(F handler) const;
	void CardAdded(EventRegistrationToken token) const;
	EventRegistrationToken CardRemoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardRemovedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CardRemoved(F handler) const;
	void CardRemoved(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICardAddedEventArgs
{
	Windows::Devices::SmartCards::SmartCard SmartCard() const;
};

template <typename T>
struct impl_ICardRemovedEventArgs
{
	Windows::Devices::SmartCards::SmartCard SmartCard() const;
};

template <typename T>
struct impl_ISmartCard
{
	Windows::Devices::SmartCards::SmartCardReader Reader() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Devices::SmartCards::SmartCardStatus> GetStatusAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GetAnswerToResetAsync() const;
};

template <typename T>
struct impl_ISmartCardProvisioningStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> FromSmartCardAsync(Windows::Devices::SmartCards::SmartCard const & card) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID cardId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID cardId) const;
	Windows::Foundation::IAsyncOperation<bool> RequestVirtualSmartCardDeletionAsync(Windows::Devices::SmartCards::SmartCard const & card) const;
};

template <typename T>
struct impl_ISmartCardProvisioning
{
	Windows::Devices::SmartCards::SmartCard SmartCard() const;
	Windows::Foundation::IAsyncOperation<GUID> GetIdAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetNameAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardChallengeContext> GetChallengeContextAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestPinChangeAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestPinResetAsync(Windows::Devices::SmartCards::ISmartCardPinResetHandler const & handler) const;
	template <typename F> Windows::Foundation::IAsyncOperation<bool> RequestPinResetAsync(F handler) const;
};

template <typename T>
struct impl_ISmartCardPinResetRequest
{
	Windows::Storage::Streams::IBuffer Challenge() const;
	Windows::Foundation::DateTime Deadline() const;
	Windows::Devices::SmartCards::SmartCardPinResetDeferral GetDeferral() const;
	void SetResponse(Windows::Storage::Streams::IBuffer const & response) const;
};

template <typename T>
struct impl_ISmartCardPinResetDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ISmartCardPinPolicy
{
	unsigned MinLength() const;
	void MinLength(unsigned value) const;
	unsigned MaxLength() const;
	void MaxLength(unsigned value) const;
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption UppercaseLetters() const;
	void UppercaseLetters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value) const;
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption LowercaseLetters() const;
	void LowercaseLetters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value) const;
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption Digits() const;
	void Digits(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value) const;
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption SpecialCharacters() const;
	void SpecialCharacters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value) const;
};

template <typename T>
struct impl_ISmartCardChallengeContext
{
	Windows::Storage::Streams::IBuffer Challenge() const;
	Windows::Foundation::IAsyncOperation<bool> VerifyResponseAsync(Windows::Storage::Streams::IBuffer const & response) const;
	Windows::Foundation::IAsyncAction ProvisionAsync(Windows::Storage::Streams::IBuffer const & response, bool formatCard) const;
	Windows::Foundation::IAsyncAction ProvisionAsync(Windows::Storage::Streams::IBuffer const & response, bool formatCard, GUID newCardId) const;
	Windows::Foundation::IAsyncAction ChangeAdministrativeKeyAsync(Windows::Storage::Streams::IBuffer const & response, Windows::Storage::Streams::IBuffer const & newAdministrativeKey) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

template <typename T>
struct impl_ISmsMessageReceivedEventHandler
{
	void Invoke(Windows::Devices::Sms::SmsDevice const & sender, Windows::Devices::Sms::SmsMessageReceivedEventArgs const & e) const;
};

template <typename T>
struct impl_ISmsDeviceStatusChangedEventHandler
{
	void Invoke(Windows::Devices::Sms::SmsDevice const & sender) const;
};

template <typename T>
struct impl_ISmsMessage
{
	unsigned Id() const;
	Windows::Devices::Sms::SmsMessageClass MessageClass() const;
};

template <typename T>
struct impl_ISmsBinaryMessage
{
	Windows::Devices::Sms::SmsDataFormat Format() const;
	void Format(Windows::Devices::Sms::SmsDataFormat value) const;
};

template <typename T>
struct impl_ISmsTextMessage
{
	Windows::Foundation::DateTime Timestamp() const;
	unsigned PartReferenceId() const;
	unsigned PartNumber() const;
	unsigned PartCount() const;
	String To() const;
	void To(String const & value) const;
	template <unsigned S0> void To(wchar_t const (&value)[S0]) const;
	String From() const;
	void From(String const & value) const;
	template <unsigned S0> void From(wchar_t const (&value)[S0]) const;
	String Body() const;
	void Body(String const & value) const;
	template <unsigned S0> void Body(wchar_t const (&value)[S0]) const;
	Windows::Devices::Sms::SmsEncoding Encoding() const;
	void Encoding(Windows::Devices::Sms::SmsEncoding value) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsBinaryMessage> ToBinaryMessages(Windows::Devices::Sms::SmsDataFormat format) const;
};

template <typename T>
struct impl_ISmsTextMessageStatics
{
	Windows::Devices::Sms::SmsTextMessage FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage) const;
};

template <typename T>
struct impl_ISmsDeviceMessageStore
{
	Windows::Foundation::IAsyncAction DeleteMessageAsync(unsigned messageId) const;
	Windows::Foundation::IAsyncAction DeleteMessagesAsync(Windows::Devices::Sms::SmsMessageFilter messageFilter) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage> GetMessageAsync(unsigned messageId) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int> GetMessagesAsync(Windows::Devices::Sms::SmsMessageFilter messageFilter) const;
	unsigned MaxMessages() const;
};

template <typename T>
struct impl_ISmsMessageReceivedEventArgs
{
	Windows::Devices::Sms::SmsTextMessage TextMessage() const;
	Windows::Devices::Sms::SmsBinaryMessage BinaryMessage() const;
};

template <typename T>
struct impl_ISmsDeviceStatics
{
	String GetDeviceSelector() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> GetDefaultAsync() const;
};

template <typename T>
struct impl_ISmsDeviceStatics2
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(String const & networkAccountId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_ISmsDevice
{
	Windows::Devices::Sms::SendSmsMessageOperation SendMessageAsync(Windows::Devices::Sms::ISmsMessage const & message) const;
	Windows::Devices::Sms::SmsEncodedLength CalculateLength(Windows::Devices::Sms::SmsTextMessage const & message) const;
	String AccountPhoneNumber() const;
	Windows::Devices::Sms::CellularClass CellularClass() const;
	Windows::Devices::Sms::SmsDeviceMessageStore MessageStore() const;
	Windows::Devices::Sms::SmsDeviceStatus DeviceStatus() const;
	EventRegistrationToken SmsMessageReceived(Windows::Devices::Sms::ISmsMessageReceivedEventHandler const & eventHandler) const;
	template <typename F> EventRegistrationToken SmsMessageReceived(F eventHandler) const;
	void SmsMessageReceived(EventRegistrationToken eventCookie) const;
	EventRegistrationToken SmsDeviceStatusChanged(Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler const & eventHandler) const;
	template <typename F> EventRegistrationToken SmsDeviceStatusChanged(F eventHandler) const;
	void SmsDeviceStatusChanged(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_ISmsReceivedEventDetails
{
	String DeviceId() const;
	unsigned MessageIndex() const;
};

template <typename T>
struct impl_ISmsReceivedEventDetails2
{
	Windows::Devices::Sms::SmsMessageClass MessageClass() const;
	Windows::Devices::Sms::SmsBinaryMessage BinaryMessage() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

template <typename T>
struct impl_IUsbControlRequestType
{
	Windows::Devices::Usb::UsbTransferDirection Direction() const;
	void Direction(Windows::Devices::Usb::UsbTransferDirection value) const;
	Windows::Devices::Usb::UsbControlTransferType ControlTransferType() const;
	void ControlTransferType(Windows::Devices::Usb::UsbControlTransferType value) const;
	Windows::Devices::Usb::UsbControlRecipient Recipient() const;
	void Recipient(Windows::Devices::Usb::UsbControlRecipient value) const;
	byte AsByte() const;
	void AsByte(byte value) const;
};

template <typename T>
struct impl_IUsbSetupPacketFactory
{
	Windows::Devices::Usb::UsbSetupPacket CreateWithEightByteBuffer(Windows::Storage::Streams::IBuffer const & eightByteBuffer) const;
};

template <typename T>
struct impl_IUsbSetupPacket
{
	Windows::Devices::Usb::UsbControlRequestType RequestType() const;
	void RequestType(Windows::Devices::Usb::UsbControlRequestType const & value) const;
	byte Request() const;
	void Request(byte value) const;
	unsigned Value() const;
	void Value(unsigned value) const;
	unsigned Index() const;
	void Index(unsigned value) const;
	unsigned Length() const;
	void Length(unsigned value) const;
};

template <typename T>
struct impl_IUsbDeviceClass
{
	byte ClassCode() const;
	void ClassCode(byte value) const;
	Windows::Foundation::IReference<byte> SubclassCode() const;
	void SubclassCode(Windows::Foundation::IReference<byte> const & value) const;
	Windows::Foundation::IReference<byte> ProtocolCode() const;
	void ProtocolCode(Windows::Foundation::IReference<byte> const & value) const;
};

template <typename T>
struct impl_IUsbDeviceClassesStatics
{
	Windows::Devices::Usb::UsbDeviceClass CdcControl() const;
	Windows::Devices::Usb::UsbDeviceClass Physical() const;
	Windows::Devices::Usb::UsbDeviceClass PersonalHealthcare() const;
	Windows::Devices::Usb::UsbDeviceClass ActiveSync() const;
	Windows::Devices::Usb::UsbDeviceClass PalmSync() const;
	Windows::Devices::Usb::UsbDeviceClass DeviceFirmwareUpdate() const;
	Windows::Devices::Usb::UsbDeviceClass Irda() const;
	Windows::Devices::Usb::UsbDeviceClass Measurement() const;
	Windows::Devices::Usb::UsbDeviceClass VendorSpecific() const;
};

template <typename T>
struct impl_IUsbDeviceClasses
{
};

template <typename T>
struct impl_IUsbDeviceStatics
{
	String GetDeviceSelector(unsigned vendorId, unsigned productId, GUID winUsbInterfaceClass) const;
	String GetDeviceSelector(GUID winUsbInterfaceClass) const;
	String GetDeviceSelector(unsigned vendorId, unsigned productId) const;
	String GetDeviceClassSelector(Windows::Devices::Usb::UsbDeviceClass const & usbClass) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_IUsbDeviceDescriptor
{
	unsigned BcdUsb() const;
	byte MaxPacketSize0() const;
	unsigned VendorId() const;
	unsigned ProductId() const;
	unsigned BcdDeviceRevision() const;
	byte NumberOfConfigurations() const;
};

template <typename T>
struct impl_IUsbConfigurationDescriptor
{
	byte ConfigurationValue() const;
	unsigned MaxPowerMilliamps() const;
	bool SelfPowered() const;
	bool RemoteWakeup() const;
};

template <typename T>
struct impl_IUsbConfigurationDescriptorStatics
{
	bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbConfigurationDescriptor & parsed) const;
	Windows::Devices::Usb::UsbConfigurationDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const;
};

template <typename T>
struct impl_IUsbInterfaceDescriptor
{
	byte ClassCode() const;
	byte SubclassCode() const;
	byte ProtocolCode() const;
	byte AlternateSettingNumber() const;
	byte InterfaceNumber() const;
};

template <typename T>
struct impl_IUsbInterfaceDescriptorStatics
{
	bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbInterfaceDescriptor & parsed) const;
	Windows::Devices::Usb::UsbInterfaceDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const;
};

template <typename T>
struct impl_IUsbEndpointDescriptor
{
	byte EndpointNumber() const;
	Windows::Devices::Usb::UsbTransferDirection Direction() const;
	Windows::Devices::Usb::UsbEndpointType EndpointType() const;
	Windows::Devices::Usb::UsbBulkInEndpointDescriptor AsBulkInEndpointDescriptor() const;
	Windows::Devices::Usb::UsbInterruptInEndpointDescriptor AsInterruptInEndpointDescriptor() const;
	Windows::Devices::Usb::UsbBulkOutEndpointDescriptor AsBulkOutEndpointDescriptor() const;
	Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor AsInterruptOutEndpointDescriptor() const;
};

template <typename T>
struct impl_IUsbEndpointDescriptorStatics
{
	bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbEndpointDescriptor & parsed) const;
	Windows::Devices::Usb::UsbEndpointDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const;
};

template <typename T>
struct impl_IUsbDescriptor
{
	byte Length() const;
	byte DescriptorType() const;
	void ReadDescriptorBuffer(Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
struct impl_IUsbInterruptInEventArgs
{
	Windows::Storage::Streams::IBuffer InterruptData() const;
};

template <typename T>
struct impl_IUsbBulkInPipe
{
	unsigned MaxTransferSizeBytes() const;
	Windows::Devices::Usb::UsbBulkInEndpointDescriptor EndpointDescriptor() const;
	Windows::Foundation::IAsyncAction ClearStallAsync() const;
	void ReadOptions(Windows::Devices::Usb::UsbReadOptions value) const;
	Windows::Devices::Usb::UsbReadOptions ReadOptions() const;
	void FlushBuffer() const;
	Windows::Storage::Streams::IInputStream InputStream() const;
};

template <typename T>
struct impl_IUsbInterruptInPipe
{
	Windows::Devices::Usb::UsbInterruptInEndpointDescriptor EndpointDescriptor() const;
	Windows::Foundation::IAsyncAction ClearStallAsync() const;
	EventRegistrationToken DataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Usb::UsbInterruptInPipe, Windows::Devices::Usb::UsbInterruptInEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken DataReceived(F handler) const;
	void DataReceived(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IUsbBulkOutPipe
{
	Windows::Devices::Usb::UsbBulkOutEndpointDescriptor EndpointDescriptor() const;
	Windows::Foundation::IAsyncAction ClearStallAsync() const;
	void WriteOptions(Windows::Devices::Usb::UsbWriteOptions value) const;
	Windows::Devices::Usb::UsbWriteOptions WriteOptions() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
};

template <typename T>
struct impl_IUsbInterruptOutPipe
{
	Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor EndpointDescriptor() const;
	Windows::Foundation::IAsyncAction ClearStallAsync() const;
	void WriteOptions(Windows::Devices::Usb::UsbWriteOptions value) const;
	Windows::Devices::Usb::UsbWriteOptions WriteOptions() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
};

template <typename T>
struct impl_IUsbConfiguration
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterface> UsbInterfaces() const;
	Windows::Devices::Usb::UsbConfigurationDescriptor ConfigurationDescriptor() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> Descriptors() const;
};

template <typename T>
struct impl_IUsbInterface
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInPipe> BulkInPipes() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInPipe> InterruptInPipes() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutPipe> BulkOutPipes() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutPipe> InterruptOutPipes() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterfaceSetting> InterfaceSettings() const;
	byte InterfaceNumber() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> Descriptors() const;
};

template <typename T>
struct impl_IUsbInterfaceSetting
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInEndpointDescriptor> BulkInEndpoints() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInEndpointDescriptor> InterruptInEndpoints() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutEndpointDescriptor> BulkOutEndpoints() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor> InterruptOutEndpoints() const;
	bool Selected() const;
	Windows::Foundation::IAsyncAction SelectSettingAsync() const;
	Windows::Devices::Usb::UsbInterfaceDescriptor InterfaceDescriptor() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> Descriptors() const;
};

template <typename T>
struct impl_IUsbBulkInEndpointDescriptor
{
	unsigned MaxPacketSize() const;
	byte EndpointNumber() const;
	Windows::Devices::Usb::UsbBulkInPipe Pipe() const;
};

template <typename T>
struct impl_IUsbInterruptInEndpointDescriptor
{
	unsigned MaxPacketSize() const;
	byte EndpointNumber() const;
	Windows::Foundation::TimeSpan Interval() const;
	Windows::Devices::Usb::UsbInterruptInPipe Pipe() const;
};

template <typename T>
struct impl_IUsbBulkOutEndpointDescriptor
{
	unsigned MaxPacketSize() const;
	byte EndpointNumber() const;
	Windows::Devices::Usb::UsbBulkOutPipe Pipe() const;
};

template <typename T>
struct impl_IUsbInterruptOutEndpointDescriptor
{
	unsigned MaxPacketSize() const;
	byte EndpointNumber() const;
	Windows::Foundation::TimeSpan Interval() const;
	Windows::Devices::Usb::UsbInterruptOutPipe Pipe() const;
};

template <typename T>
struct impl_IUsbDevice
{
	Windows::Foundation::IAsyncOperation<unsigned> SendControlOutTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket, Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Foundation::IAsyncOperation<unsigned> SendControlOutTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SendControlInTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket, Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SendControlInTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket) const;
	Windows::Devices::Usb::UsbInterface DefaultInterface() const;
	Windows::Devices::Usb::UsbDeviceDescriptor DeviceDescriptor() const;
	Windows::Devices::Usb::UsbConfiguration Configuration() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

template <typename T>
struct impl_IWiFiDirectDeviceStatics
{
	String GetDeviceSelector() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_IWiFiDirectDevice
{
	Windows::Devices::WiFiDirect::WiFiDirectConnectionStatus ConnectionStatus() const;
	String DeviceId() const;
	EventRegistrationToken ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectDevice, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken ConnectionStatusChanged(F handler) const;
	void ConnectionStatusChanged(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> GetConnectionEndpointPairs() const;
};

}}}}

namespace Modern { namespace Windows { namespace Foundation {

template <typename T>
struct impl_IAsyncActionCompletedHandler
{
	void Invoke(Windows::Foundation::IAsyncAction const & asyncInfo, AsyncStatus asyncStatus) const;
};

template <typename T>
struct impl_IUriRuntimeClass
{
	String AbsoluteUri() const;
	String DisplayUri() const;
	String Domain() const;
	String Extension() const;
	String Fragment() const;
	String Host() const;
	String Password() const;
	String Path() const;
	String Query() const;
	Windows::Foundation::WwwFormUrlDecoder QueryParsed() const;
	String RawUri() const;
	String SchemeName() const;
	String UserName() const;
	int Port() const;
	bool Suspicious() const;
	bool Equals(Windows::Foundation::Uri const & pUri) const;
	Windows::Foundation::Uri CombineUri(String const & relativeUri) const;
	template <unsigned S0> Windows::Foundation::Uri CombineUri(wchar_t const (&relativeUri)[S0]) const;
};

template <typename T>
struct impl_IUriRuntimeClassWithAbsoluteCanonicalUri
{
	String AbsoluteCanonicalUri() const;
	String DisplayIri() const;
};

template <typename T>
struct impl_IUriEscapeStatics
{
	String UnescapeComponent(String const & toUnescape) const;
	template <unsigned S0> String UnescapeComponent(wchar_t const (&toUnescape)[S0]) const;
	String EscapeComponent(String const & toEscape) const;
	template <unsigned S0> String EscapeComponent(wchar_t const (&toEscape)[S0]) const;
};

template <typename T>
struct impl_IUriRuntimeClassFactory
{
	Windows::Foundation::Uri CreateUri(String const & uri) const;
	template <unsigned S0> Windows::Foundation::Uri CreateUri(wchar_t const (&uri)[S0]) const;
	Windows::Foundation::Uri CreateUri(String const & baseUri, String const & relativeUri) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Uri CreateUri(wchar_t const (&baseUri)[S0], wchar_t const (&relativeUri)[S1]) const;
};

template <typename T>
struct impl_IWwwFormUrlDecoderEntry
{
	String Name() const;
	String Value() const;
};

template <typename T>
struct impl_IWwwFormUrlDecoderRuntimeClass
{
	String GetFirstValueByName(String const & name) const;
	template <unsigned S0> String GetFirstValueByName(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_IWwwFormUrlDecoderRuntimeClassFactory
{
	Windows::Foundation::WwwFormUrlDecoder CreateWwwFormUrlDecoder(String const & query) const;
	template <unsigned S0> Windows::Foundation::WwwFormUrlDecoder CreateWwwFormUrlDecoder(wchar_t const (&query)[S0]) const;
};

template <typename T>
struct impl_IGetActivationFactory
{
	IInspectable GetActivationFactory(String const & activatableClassId) const;
	template <unsigned S0> IInspectable GetActivationFactory(wchar_t const (&activatableClassId)[S0]) const;
};

template <typename T>
struct impl_IClosable
{
	void Close() const;
};

template <typename T>
struct impl_IPropertyValue
{
	Windows::Foundation::PropertyType Type() const;
	bool IsNumericScalar() const;
	byte GetUInt8() const;
	short GetInt16() const;
	unsigned short GetUInt16() const;
	int GetInt32() const;
	unsigned GetUInt32() const;
	long long GetInt64() const;
	unsigned long long GetUInt64() const;
	float GetSingle() const;
	double GetDouble() const;
	wchar_t GetChar16() const;
	bool GetBoolean() const;
	String GetString() const;
	GUID GetGuid() const;
	Windows::Foundation::DateTime GetDateTime() const;
	Windows::Foundation::TimeSpan GetTimeSpan() const;
	Windows::Foundation::Point GetPoint() const;
	Windows::Foundation::Size GetSize() const;
	Windows::Foundation::Rect GetRect() const;
};

template <typename T>
struct impl_IPropertyValueStatics
{
	IInspectable CreateEmpty() const;
	IInspectable CreateUInt8(byte value) const;
	IInspectable CreateInt16(short value) const;
	IInspectable CreateUInt16(unsigned short value) const;
	IInspectable CreateInt32(int value) const;
	IInspectable CreateUInt32(unsigned value) const;
	IInspectable CreateInt64(long long value) const;
	IInspectable CreateUInt64(unsigned long long value) const;
	IInspectable CreateSingle(float value) const;
	IInspectable CreateDouble(double value) const;
	IInspectable CreateChar16(wchar_t value) const;
	IInspectable CreateBoolean(bool value) const;
	IInspectable CreateString(String const & value) const;
	template <unsigned S0> IInspectable CreateString(wchar_t const (&value)[S0]) const;
	IInspectable CreateInspectable(IInspectable const & value) const;
	IInspectable CreateGuid(GUID value) const;
	IInspectable CreateDateTime(Windows::Foundation::DateTime const & value) const;
	IInspectable CreateTimeSpan(Windows::Foundation::TimeSpan const & value) const;
	IInspectable CreatePoint(Windows::Foundation::Point const & value) const;
	IInspectable CreateSize(Windows::Foundation::Size const & value) const;
	IInspectable CreateRect(Windows::Foundation::Rect const & value) const;
};

template <typename T>
struct impl_IStringable
{
	String ToString() const;
};

template <typename T>
struct impl_IAsyncAction
{
	void Completed(Windows::Foundation::IAsyncActionCompletedHandler const & handler) const;
	template <typename F> void Completed(F handler) const;
	Windows::Foundation::IAsyncActionCompletedHandler Completed() const;
	void GetResults() const;
};

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

template <typename T>
struct impl_IPropertySet
{
};

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

template <typename T>
struct impl_ITracingStatusChangedEventArgs
{
	bool Enabled() const;
	Windows::Foundation::Diagnostics::CausalityTraceLevel TraceLevel() const;
};

template <typename T>
struct impl_IAsyncCausalityTracerStatics
{
	void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, String const & operationName, unsigned long long relatedContext) const;
	template <unsigned S0> void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, wchar_t const (&operationName)[S0], unsigned long long relatedContext) const;
	void TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, AsyncStatus status) const;
	void TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalityRelation relation) const;
	void TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork work) const;
	void TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, Windows::Foundation::Diagnostics::CausalitySynchronousWork work) const;
	EventRegistrationToken TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TracingStatusChanged(F handler) const;
	void TracingStatusChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IErrorReportingSettings
{
	void SetErrorOptions(Windows::Foundation::Diagnostics::ErrorOptions value) const;
	Windows::Foundation::Diagnostics::ErrorOptions GetErrorOptions() const;
};

template <typename T>
struct impl_ILoggingChannel
{
	String Name() const;
	bool Enabled() const;
	Windows::Foundation::Diagnostics::LoggingLevel Level() const;
	void LogMessage(String const & eventString) const;
	template <unsigned S0> void LogMessage(wchar_t const (&eventString)[S0]) const;
	void LogMessage(String const & eventString, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	template <unsigned S0> void LogMessage(wchar_t const (&eventString)[S0], Windows::Foundation::Diagnostics::LoggingLevel level) const;
	void LogValuePair(String const & value1, int value2) const;
	template <unsigned S0> void LogValuePair(wchar_t const (&value1)[S0], int value2) const;
	void LogValuePair(String const & value1, int value2, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	template <unsigned S0> void LogValuePair(wchar_t const (&value1)[S0], int value2, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	EventRegistrationToken LoggingEnabled(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::ILoggingChannel, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken LoggingEnabled(F handler) const;
	void LoggingEnabled(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ILoggingChannelFactory
{
	Windows::Foundation::Diagnostics::LoggingChannel Create(String const & name) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::LoggingChannel Create(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_ILoggingActivity
{
	String Name() const;
	GUID Id() const;
};

template <typename T>
struct impl_ILoggingActivityFactory
{
	Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivity(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivity(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivityWithLevel(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivityWithLevel(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level) const;
};

template <typename T>
struct impl_ILoggingSession
{
	String Name() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveToFileAsync(Windows::Storage::IStorageFolder const & folder, String const & fileName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveToFileAsync(Windows::Storage::IStorageFolder const & folder, wchar_t const (&fileName)[S0]) const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel maxLevel) const;
	void RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
};

template <typename T>
struct impl_ILoggingSessionFactory
{
	Windows::Foundation::Diagnostics::LoggingSession Create(String const & name) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::LoggingSession Create(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_ILogFileGeneratedEventArgs
{
	Windows::Storage::StorageFile File() const;
};

template <typename T>
struct impl_IFileLoggingSession
{
	String Name() const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel maxLevel) const;
	void RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CloseAndSaveToFileAsync() const;
	EventRegistrationToken LogFileGenerated(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::IFileLoggingSession, Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken LogFileGenerated(F handler) const;
	void LogFileGenerated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IFileLoggingSessionFactory
{
	Windows::Foundation::Diagnostics::FileLoggingSession Create(String const & name) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::FileLoggingSession Create(wchar_t const (&name)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Globalization {

template <typename T>
struct impl_IJapanesePhoneticAnalyzerStatics
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(String const & input) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(wchar_t const (&input)[S0]) const;
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(String const & input, bool monoRuby) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(wchar_t const (&input)[S0], bool monoRuby) const;
};

template <typename T>
struct impl_IJapanesePhoneme
{
	String DisplayText() const;
	String YomiText() const;
	bool IsPhraseStart() const;
};

template <typename T>
struct impl_ICalendarIdentifiersStatics
{
	String Gregorian() const;
	String Hebrew() const;
	String Hijri() const;
	String Japanese() const;
	String Julian() const;
	String Korean() const;
	String Taiwan() const;
	String Thai() const;
	String UmAlQura() const;
};

template <typename T>
struct impl_IClockIdentifiersStatics
{
	String TwelveHour() const;
	String TwentyFourHour() const;
};

template <typename T>
struct impl_INumeralSystemIdentifiersStatics
{
	String Arab() const;
	String ArabExt() const;
	String Bali() const;
	String Beng() const;
	String Cham() const;
	String Deva() const;
	String FullWide() const;
	String Gujr() const;
	String Guru() const;
	String HaniDec() const;
	String Java() const;
	String Kali() const;
	String Khmr() const;
	String Knda() const;
	String Lana() const;
	String LanaTham() const;
	String Laoo() const;
	String Latn() const;
	String Lepc() const;
	String Limb() const;
	String Mlym() const;
	String Mong() const;
	String Mtei() const;
	String Mymr() const;
	String MymrShan() const;
	String Nkoo() const;
	String Olck() const;
	String Orya() const;
	String Saur() const;
	String Sund() const;
	String Talu() const;
	String TamlDec() const;
	String Telu() const;
	String Thai() const;
	String Tibt() const;
	String Vaii() const;
};

template <typename T>
struct impl_ICurrencyIdentifiersStatics
{
	String AED() const;
	String AFN() const;
	String ALL() const;
	String AMD() const;
	String ANG() const;
	String AOA() const;
	String ARS() const;
	String AUD() const;
	String AWG() const;
	String AZN() const;
	String BAM() const;
	String BBD() const;
	String BDT() const;
	String BGN() const;
	String BHD() const;
	String BIF() const;
	String BMD() const;
	String BND() const;
	String BOB() const;
	String BRL() const;
	String BSD() const;
	String BTN() const;
	String BWP() const;
	String BYR() const;
	String BZD() const;
	String CAD() const;
	String CDF() const;
	String CHF() const;
	String CLP() const;
	String CNY() const;
	String COP() const;
	String CRC() const;
	String CUP() const;
	String CVE() const;
	String CZK() const;
	String DJF() const;
	String DKK() const;
	String DOP() const;
	String DZD() const;
	String EGP() const;
	String ERN() const;
	String ETB() const;
	String EUR() const;
	String FJD() const;
	String FKP() const;
	String GBP() const;
	String GEL() const;
	String GHS() const;
	String GIP() const;
	String GMD() const;
	String GNF() const;
	String GTQ() const;
	String GYD() const;
	String HKD() const;
	String HNL() const;
	String HRK() const;
	String HTG() const;
	String HUF() const;
	String IDR() const;
	String ILS() const;
	String INR() const;
	String IQD() const;
	String IRR() const;
	String ISK() const;
	String JMD() const;
	String JOD() const;
	String JPY() const;
	String KES() const;
	String KGS() const;
	String KHR() const;
	String KMF() const;
	String KPW() const;
	String KRW() const;
	String KWD() const;
	String KYD() const;
	String KZT() const;
	String LAK() const;
	String LBP() const;
	String LKR() const;
	String LRD() const;
	String LSL() const;
	String LTL() const;
	String LVL() const;
	String LYD() const;
	String MAD() const;
	String MDL() const;
	String MGA() const;
	String MKD() const;
	String MMK() const;
	String MNT() const;
	String MOP() const;
	String MRO() const;
	String MUR() const;
	String MVR() const;
	String MWK() const;
	String MXN() const;
	String MYR() const;
	String MZN() const;
	String NAD() const;
	String NGN() const;
	String NIO() const;
	String NOK() const;
	String NPR() const;
	String NZD() const;
	String OMR() const;
	String PAB() const;
	String PEN() const;
	String PGK() const;
	String PHP() const;
	String PKR() const;
	String PLN() const;
	String PYG() const;
	String QAR() const;
	String RON() const;
	String RSD() const;
	String RUB() const;
	String RWF() const;
	String SAR() const;
	String SBD() const;
	String SCR() const;
	String SDG() const;
	String SEK() const;
	String SGD() const;
	String SHP() const;
	String SLL() const;
	String SOS() const;
	String SRD() const;
	String STD() const;
	String SYP() const;
	String SZL() const;
	String THB() const;
	String TJS() const;
	String TMT() const;
	String TND() const;
	String TOP() const;
	String TRY() const;
	String TTD() const;
	String TWD() const;
	String TZS() const;
	String UAH() const;
	String UGX() const;
	String USD() const;
	String UYU() const;
	String UZS() const;
	String VEF() const;
	String VND() const;
	String VUV() const;
	String WST() const;
	String XAF() const;
	String XCD() const;
	String XOF() const;
	String XPF() const;
	String XXX() const;
	String YER() const;
	String ZAR() const;
	String ZMW() const;
	String ZWL() const;
};

template <typename T>
struct impl_IGeographicRegion
{
	String Code() const;
	String CodeTwoLetter() const;
	String CodeThreeLetter() const;
	String CodeThreeDigit() const;
	String DisplayName() const;
	String NativeName() const;
	Windows::Foundation::Collections::IVectorView<String> CurrenciesInUse() const;
};

template <typename T>
struct impl_IGeographicRegionFactory
{
	Windows::Globalization::GeographicRegion CreateGeographicRegion(String const & geographicRegionCode) const;
	template <unsigned S0> Windows::Globalization::GeographicRegion CreateGeographicRegion(wchar_t const (&geographicRegionCode)[S0]) const;
};

template <typename T>
struct impl_IGeographicRegionStatics
{
	bool IsSupported(String const & geographicRegionCode) const;
	template <unsigned S0> bool IsSupported(wchar_t const (&geographicRegionCode)[S0]) const;
};

template <typename T>
struct impl_ILanguage
{
	String LanguageTag() const;
	String DisplayName() const;
	String NativeName() const;
	String Script() const;
};

template <typename T>
struct impl_ILanguageExtensionSubtags
{
	Windows::Foundation::Collections::IVectorView<String> GetExtensionSubtags(String const & singleton) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<String> GetExtensionSubtags(wchar_t const (&singleton)[S0]) const;
};

template <typename T>
struct impl_ILanguageFactory
{
	Windows::Globalization::Language CreateLanguage(String const & languageTag) const;
	template <unsigned S0> Windows::Globalization::Language CreateLanguage(wchar_t const (&languageTag)[S0]) const;
};

template <typename T>
struct impl_ILanguageStatics
{
	bool IsWellFormed(String const & languageTag) const;
	template <unsigned S0> bool IsWellFormed(wchar_t const (&languageTag)[S0]) const;
	String CurrentInputMethodLanguageTag() const;
};

template <typename T>
struct impl_ICalendar
{
	Windows::Globalization::Calendar Clone() const;
	void SetToMin() const;
	void SetToMax() const;
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String NumeralSystem() const;
	void NumeralSystem(String const & value) const;
	template <unsigned S0> void NumeralSystem(wchar_t const (&value)[S0]) const;
	String GetCalendarSystem() const;
	void ChangeCalendarSystem(String const & value) const;
	template <unsigned S0> void ChangeCalendarSystem(wchar_t const (&value)[S0]) const;
	String GetClock() const;
	void ChangeClock(String const & value) const;
	template <unsigned S0> void ChangeClock(wchar_t const (&value)[S0]) const;
	Windows::Foundation::DateTime GetDateTime() const;
	void SetDateTime(Windows::Foundation::DateTime const & value) const;
	void SetToNow() const;
	int FirstEra() const;
	int LastEra() const;
	int NumberOfEras() const;
	int Era() const;
	void Era(int value) const;
	void AddEras(int eras) const;
	String EraAsString() const;
	String EraAsString(int idealLength) const;
	int FirstYearInThisEra() const;
	int LastYearInThisEra() const;
	int NumberOfYearsInThisEra() const;
	int Year() const;
	void Year(int value) const;
	void AddYears(int years) const;
	String YearAsString() const;
	String YearAsTruncatedString(int remainingDigits) const;
	String YearAsPaddedString(int minDigits) const;
	int FirstMonthInThisYear() const;
	int LastMonthInThisYear() const;
	int NumberOfMonthsInThisYear() const;
	int Month() const;
	void Month(int value) const;
	void AddMonths(int months) const;
	String MonthAsString() const;
	String MonthAsString(int idealLength) const;
	String MonthAsSoloString() const;
	String MonthAsSoloString(int idealLength) const;
	String MonthAsNumericString() const;
	String MonthAsPaddedNumericString(int minDigits) const;
	void AddWeeks(int weeks) const;
	int FirstDayInThisMonth() const;
	int LastDayInThisMonth() const;
	int NumberOfDaysInThisMonth() const;
	int Day() const;
	void Day(int value) const;
	void AddDays(int days) const;
	String DayAsString() const;
	String DayAsPaddedString(int minDigits) const;
	Windows::Globalization::DayOfWeek DayOfWeek() const;
	String DayOfWeekAsString() const;
	String DayOfWeekAsString(int idealLength) const;
	String DayOfWeekAsSoloString() const;
	String DayOfWeekAsSoloString(int idealLength) const;
	int FirstPeriodInThisDay() const;
	int LastPeriodInThisDay() const;
	int NumberOfPeriodsInThisDay() const;
	int Period() const;
	void Period(int value) const;
	void AddPeriods(int periods) const;
	String PeriodAsString() const;
	String PeriodAsString(int idealLength) const;
	int FirstHourInThisPeriod() const;
	int LastHourInThisPeriod() const;
	int NumberOfHoursInThisPeriod() const;
	int Hour() const;
	void Hour(int value) const;
	void AddHours(int hours) const;
	String HourAsString() const;
	String HourAsPaddedString(int minDigits) const;
	int Minute() const;
	void Minute(int value) const;
	void AddMinutes(int minutes) const;
	String MinuteAsString() const;
	String MinuteAsPaddedString(int minDigits) const;
	int Second() const;
	void Second(int value) const;
	void AddSeconds(int seconds) const;
	String SecondAsString() const;
	String SecondAsPaddedString(int minDigits) const;
	int Nanosecond() const;
	void Nanosecond(int value) const;
	void AddNanoseconds(int nanoseconds) const;
	String NanosecondAsString() const;
	String NanosecondAsPaddedString(int minDigits) const;
	int Compare(Windows::Globalization::Calendar const & other) const;
	int CompareDateTime(Windows::Foundation::DateTime const & other) const;
	void CopyTo(Windows::Globalization::Calendar const & other) const;
	int FirstMinuteInThisHour() const;
	int LastMinuteInThisHour() const;
	int NumberOfMinutesInThisHour() const;
	int FirstSecondInThisMinute() const;
	int LastSecondInThisMinute() const;
	int NumberOfSecondsInThisMinute() const;
	String ResolvedLanguage() const;
	bool IsDaylightSavingTime() const;
};

template <typename T>
struct impl_ICalendarFactory2
{
	Windows::Globalization::Calendar CreateCalendarWithTimeZone(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock, String const & timeZoneId) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Globalization::Calendar CreateCalendarWithTimeZone(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1], wchar_t const (&timeZoneId)[S2]) const;
};

template <typename T>
struct impl_ITimeZoneOnCalendar
{
	String GetTimeZone() const;
	void ChangeTimeZone(String const & timeZoneId) const;
	template <unsigned S0> void ChangeTimeZone(wchar_t const (&timeZoneId)[S0]) const;
	String TimeZoneAsString() const;
	String TimeZoneAsString(int idealLength) const;
};

template <typename T>
struct impl_ICalendarFactory
{
	Windows::Globalization::Calendar CreateCalendarDefaultCalendarAndClock(Windows::Foundation::Collections::IIterable<String> const & languages) const;
	Windows::Globalization::Calendar CreateCalendar(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock) const;
	template <unsigned S0, unsigned S1> Windows::Globalization::Calendar CreateCalendar(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1]) const;
};

template <typename T>
struct impl_IApplicationLanguagesStatics
{
	String PrimaryLanguageOverride() const;
	void PrimaryLanguageOverride(String const & value) const;
	template <unsigned S0> void PrimaryLanguageOverride(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	Windows::Foundation::Collections::IVectorView<String> ManifestLanguages() const;
};

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

template <typename T>
struct impl_ICharacterGrouping
{
	String First() const;
	String Label() const;
};

template <typename T>
struct impl_ICharacterGroupings
{
	String Lookup(String const & text) const;
	template <unsigned S0> String Lookup(wchar_t const (&text)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

template <typename T>
struct impl_IDateTimeFormatter
{
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String GeographicRegion() const;
	String Calendar() const;
	String Clock() const;
	String NumeralSystem() const;
	void NumeralSystem(String const & value) const;
	template <unsigned S0> void NumeralSystem(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVectorView<String> Patterns() const;
	String Template() const;
	String Format(Windows::Foundation::DateTime const & value) const;
	Windows::Globalization::DateTimeFormatting::YearFormat IncludeYear() const;
	Windows::Globalization::DateTimeFormatting::MonthFormat IncludeMonth() const;
	Windows::Globalization::DateTimeFormatting::DayOfWeekFormat IncludeDayOfWeek() const;
	Windows::Globalization::DateTimeFormatting::DayFormat IncludeDay() const;
	Windows::Globalization::DateTimeFormatting::HourFormat IncludeHour() const;
	Windows::Globalization::DateTimeFormatting::MinuteFormat IncludeMinute() const;
	Windows::Globalization::DateTimeFormatting::SecondFormat IncludeSecond() const;
	String ResolvedLanguage() const;
	String ResolvedGeographicRegion() const;
};

template <typename T>
struct impl_IDateTimeFormatterFactory
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatter(String const & formatTemplate) const;
	template <unsigned S0> Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatter(wchar_t const (&formatTemplate)[S0]) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterLanguages(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages) const;
	template <unsigned S0> Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterLanguages(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterContext(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock) const;
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterContext(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1], wchar_t const (&calendar)[S2], wchar_t const (&clock)[S3]) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterDate(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterTime(Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterDateTimeLanguages(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterDateTimeContext(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterDateTimeContext(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0], wchar_t const (&calendar)[S1], wchar_t const (&clock)[S2]) const;
};

template <typename T>
struct impl_IDateTimeFormatterStatics
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter LongDate() const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter LongTime() const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter ShortDate() const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter ShortTime() const;
};

template <typename T>
struct impl_IDateTimeFormatter2
{
	String Format(Windows::Foundation::DateTime const & datetime, String const & timeZoneId) const;
	template <unsigned S0> String Format(Windows::Foundation::DateTime const & datetime, wchar_t const (&timeZoneId)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

template <typename T>
struct impl_ILanguageFontGroup
{
	Windows::Globalization::Fonts::LanguageFont UITextFont() const;
	Windows::Globalization::Fonts::LanguageFont UIHeadingFont() const;
	Windows::Globalization::Fonts::LanguageFont UITitleFont() const;
	Windows::Globalization::Fonts::LanguageFont UICaptionFont() const;
	Windows::Globalization::Fonts::LanguageFont UINotificationHeadingFont() const;
	Windows::Globalization::Fonts::LanguageFont TraditionalDocumentFont() const;
	Windows::Globalization::Fonts::LanguageFont ModernDocumentFont() const;
	Windows::Globalization::Fonts::LanguageFont DocumentHeadingFont() const;
	Windows::Globalization::Fonts::LanguageFont FixedWidthTextFont() const;
	Windows::Globalization::Fonts::LanguageFont DocumentAlternate1Font() const;
	Windows::Globalization::Fonts::LanguageFont DocumentAlternate2Font() const;
};

template <typename T>
struct impl_ILanguageFontGroupFactory
{
	Windows::Globalization::Fonts::LanguageFontGroup CreateLanguageFontGroup(String const & languageTag) const;
	template <unsigned S0> Windows::Globalization::Fonts::LanguageFontGroup CreateLanguageFontGroup(wchar_t const (&languageTag)[S0]) const;
};

template <typename T>
struct impl_ILanguageFont
{
	String FontFamily() const;
	Windows::UI::Text::FontWeight FontWeight() const;
	Windows::UI::Text::FontStretch FontStretch() const;
	Windows::UI::Text::FontStyle FontStyle() const;
	double ScaleFactor() const;
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

template <typename T>
struct impl_INumberRounder
{
	int RoundInt32(int value) const;
	unsigned RoundUInt32(unsigned value) const;
	long long RoundInt64(long long value) const;
	unsigned long long RoundUInt64(unsigned long long value) const;
	float RoundSingle(float value) const;
	double RoundDouble(double value) const;
};

template <typename T>
struct impl_ISignificantDigitsNumberRounder
{
	Windows::Globalization::NumberFormatting::RoundingAlgorithm RoundingAlgorithm() const;
	void RoundingAlgorithm(Windows::Globalization::NumberFormatting::RoundingAlgorithm value) const;
	unsigned SignificantDigits() const;
	void SignificantDigits(unsigned value) const;
};

template <typename T>
struct impl_IIncrementNumberRounder
{
	Windows::Globalization::NumberFormatting::RoundingAlgorithm RoundingAlgorithm() const;
	void RoundingAlgorithm(Windows::Globalization::NumberFormatting::RoundingAlgorithm value) const;
	double Increment() const;
	void Increment(double value) const;
};

template <typename T>
struct impl_INumberFormatter
{
	String Format(long long value) const;
	String Format(unsigned long long value) const;
	String Format(double value) const;
};

template <typename T>
struct impl_INumberFormatter2
{
	String FormatInt(long long value) const;
	String FormatUInt(unsigned long long value) const;
	String FormatDouble(double value) const;
};

template <typename T>
struct impl_INumberParser
{
	Windows::Foundation::IReference<long long> ParseInt(String const & text) const;
	template <unsigned S0> Windows::Foundation::IReference<long long> ParseInt(wchar_t const (&text)[S0]) const;
	Windows::Foundation::IReference<unsigned long long> ParseUInt(String const & text) const;
	template <unsigned S0> Windows::Foundation::IReference<unsigned long long> ParseUInt(wchar_t const (&text)[S0]) const;
	Windows::Foundation::IReference<double> ParseDouble(String const & text) const;
	template <unsigned S0> Windows::Foundation::IReference<double> ParseDouble(wchar_t const (&text)[S0]) const;
};

template <typename T>
struct impl_INumberFormatterOptions
{
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String GeographicRegion() const;
	int IntegerDigits() const;
	void IntegerDigits(int value) const;
	int FractionDigits() const;
	void FractionDigits(int value) const;
	bool IsGrouped() const;
	void IsGrouped(bool value) const;
	bool IsDecimalPointAlwaysDisplayed() const;
	void IsDecimalPointAlwaysDisplayed(bool value) const;
	String NumeralSystem() const;
	void NumeralSystem(String const & value) const;
	template <unsigned S0> void NumeralSystem(wchar_t const (&value)[S0]) const;
	String ResolvedLanguage() const;
	String ResolvedGeographicRegion() const;
};

template <typename T>
struct impl_ISignificantDigitsOption
{
	int SignificantDigits() const;
	void SignificantDigits(int value) const;
};

template <typename T>
struct impl_INumberRounderOption
{
	Windows::Globalization::NumberFormatting::INumberRounder NumberRounder() const;
	void NumberRounder(Windows::Globalization::NumberFormatting::INumberRounder const & value) const;
};

template <typename T>
struct impl_ISignedZeroOption
{
	bool IsZeroSigned() const;
	void IsZeroSigned(bool value) const;
};

template <typename T>
struct impl_IDecimalFormatterFactory
{
	Windows::Globalization::NumberFormatting::DecimalFormatter CreateDecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const;
	template <unsigned S0> Windows::Globalization::NumberFormatting::DecimalFormatter CreateDecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) const;
};

template <typename T>
struct impl_IPercentFormatterFactory
{
	Windows::Globalization::NumberFormatting::PercentFormatter CreatePercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const;
	template <unsigned S0> Windows::Globalization::NumberFormatting::PercentFormatter CreatePercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) const;
};

template <typename T>
struct impl_IPermilleFormatterFactory
{
	Windows::Globalization::NumberFormatting::PermilleFormatter CreatePermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const;
	template <unsigned S0> Windows::Globalization::NumberFormatting::PermilleFormatter CreatePermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) const;
};

template <typename T>
struct impl_ICurrencyFormatterFactory
{
	Windows::Globalization::NumberFormatting::CurrencyFormatter CreateCurrencyFormatterCode(String const & currencyCode) const;
	template <unsigned S0> Windows::Globalization::NumberFormatting::CurrencyFormatter CreateCurrencyFormatterCode(wchar_t const (&currencyCode)[S0]) const;
	Windows::Globalization::NumberFormatting::CurrencyFormatter CreateCurrencyFormatterCodeContext(String const & currencyCode, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const;
	template <unsigned S0, unsigned S1> Windows::Globalization::NumberFormatting::CurrencyFormatter CreateCurrencyFormatterCodeContext(wchar_t const (&currencyCode)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1]) const;
};

template <typename T>
struct impl_ICurrencyFormatter
{
	String Currency() const;
};

template <typename T>
struct impl_ICurrencyFormatter2
{
	Windows::Globalization::NumberFormatting::CurrencyFormatterMode Mode() const;
	void Mode(Windows::Globalization::NumberFormatting::CurrencyFormatterMode value) const;
	void ApplyRoundingForCurrency(Windows::Globalization::NumberFormatting::RoundingAlgorithm roundingAlgorithm) const;
};

template <typename T>
struct impl_INumeralSystemTranslatorFactory
{
	Windows::Globalization::NumberFormatting::NumeralSystemTranslator Create(Windows::Foundation::Collections::IIterable<String> const & languages) const;
};

template <typename T>
struct impl_INumeralSystemTranslator
{
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String ResolvedLanguage() const;
	String NumeralSystem() const;
	void NumeralSystem(String const & value) const;
	template <unsigned S0> void NumeralSystem(wchar_t const (&value)[S0]) const;
	String TranslateNumerals(String const & value) const;
	template <unsigned S0> String TranslateNumerals(wchar_t const (&value)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

template <typename T>
struct impl_IDisplayInformationStatics
{
	Windows::Graphics::Display::DisplayInformation GetForCurrentView() const;
	Windows::Graphics::Display::DisplayOrientations AutoRotationPreferences() const;
	void AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations value) const;
	EventRegistrationToken DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken DisplayContentsInvalidated(F handler) const;
	void DisplayContentsInvalidated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IDisplayInformation
{
	Windows::Graphics::Display::DisplayOrientations CurrentOrientation() const;
	Windows::Graphics::Display::DisplayOrientations NativeOrientation() const;
	EventRegistrationToken OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken OrientationChanged(F handler) const;
	void OrientationChanged(EventRegistrationToken token) const;
	Windows::Graphics::Display::ResolutionScale ResolutionScale() const;
	float LogicalDpi() const;
	float RawDpiX() const;
	float RawDpiY() const;
	EventRegistrationToken DpiChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken DpiChanged(F handler) const;
	void DpiChanged(EventRegistrationToken token) const;
	bool StereoEnabled() const;
	EventRegistrationToken StereoEnabledChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken StereoEnabledChanged(F handler) const;
	void StereoEnabledChanged(EventRegistrationToken token) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> GetColorProfileAsync() const;
	EventRegistrationToken ColorProfileChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken ColorProfileChanged(F handler) const;
	void ColorProfileChanged(EventRegistrationToken token) const;
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

template <typename T>
struct impl_IBitmapTransform
{
	unsigned ScaledWidth() const;
	void ScaledWidth(unsigned value) const;
	unsigned ScaledHeight() const;
	void ScaledHeight(unsigned value) const;
	Windows::Graphics::Imaging::BitmapInterpolationMode InterpolationMode() const;
	void InterpolationMode(Windows::Graphics::Imaging::BitmapInterpolationMode value) const;
	Windows::Graphics::Imaging::BitmapFlip Flip() const;
	void Flip(Windows::Graphics::Imaging::BitmapFlip value) const;
	Windows::Graphics::Imaging::BitmapRotation Rotation() const;
	void Rotation(Windows::Graphics::Imaging::BitmapRotation value) const;
	Windows::Graphics::Imaging::BitmapBounds Bounds() const;
	void Bounds(Windows::Graphics::Imaging::BitmapBounds const & value) const;
};

template <typename T>
struct impl_IBitmapTypedValue
{
	IInspectable Value() const;
	Windows::Foundation::PropertyType Type() const;
};

template <typename T>
struct impl_IBitmapTypedValueFactory
{
	Windows::Graphics::Imaging::BitmapTypedValue Create(IInspectable const & value, Windows::Foundation::PropertyType type) const;
};

template <typename T>
struct impl_IBitmapPropertiesView
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapPropertySet> GetPropertiesAsync(Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
};

template <typename T>
struct impl_IBitmapProperties
{
	Windows::Foundation::IAsyncAction SetPropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & propertiesToSet) const;
};

template <typename T>
struct impl_IPixelDataProvider
{
};

template <typename T>
struct impl_IBitmapFrame
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> GetThumbnailAsync() const;
	Windows::Graphics::Imaging::BitmapPropertiesView BitmapProperties() const;
	Windows::Graphics::Imaging::BitmapPixelFormat BitmapPixelFormat() const;
	Windows::Graphics::Imaging::BitmapAlphaMode BitmapAlphaMode() const;
	double DpiX() const;
	double DpiY() const;
	unsigned PixelWidth() const;
	unsigned PixelHeight() const;
	unsigned OrientedPixelWidth() const;
	unsigned OrientedPixelHeight() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> GetPixelDataAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> GetPixelDataAsync(Windows::Graphics::Imaging::BitmapPixelFormat pixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode alphaMode, Windows::Graphics::Imaging::BitmapTransform const & transform, Windows::Graphics::Imaging::ExifOrientationMode exifOrientationMode, Windows::Graphics::Imaging::ColorManagementMode colorManagementMode) const;
};

template <typename T>
struct impl_IBitmapCodecInformation
{
	GUID CodecId() const;
	Windows::Foundation::Collections::IVectorView<String> FileExtensions() const;
	String FriendlyName() const;
	Windows::Foundation::Collections::IVectorView<String> MimeTypes() const;
};

template <typename T>
struct impl_IBitmapDecoderStatics
{
	GUID BmpDecoderId() const;
	GUID JpegDecoderId() const;
	GUID PngDecoderId() const;
	GUID TiffDecoderId() const;
	GUID GifDecoderId() const;
	GUID JpegXRDecoderId() const;
	GUID IcoDecoderId() const;
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> GetDecoderInformationEnumerator() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> CreateAsync(Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> CreateAsync(GUID decoderId, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
};

template <typename T>
struct impl_IBitmapDecoder
{
	Windows::Graphics::Imaging::BitmapPropertiesView BitmapContainerProperties() const;
	Windows::Graphics::Imaging::BitmapCodecInformation DecoderInformation() const;
	unsigned FrameCount() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> GetPreviewAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapFrame> GetFrameAsync(unsigned frameIndex) const;
};

template <typename T>
struct impl_IBitmapEncoderStatics
{
	GUID BmpEncoderId() const;
	GUID JpegEncoderId() const;
	GUID PngEncoderId() const;
	GUID TiffEncoderId() const;
	GUID GifEncoderId() const;
	GUID JpegXREncoderId() const;
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> GetEncoderInformationEnumerator() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateAsync(GUID encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateAsync(GUID encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions) const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateForTranscodingAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder) const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateForInPlacePropertyEncodingAsync(Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder) const;
};

template <typename T>
struct impl_IBitmapEncoder
{
	Windows::Graphics::Imaging::BitmapCodecInformation EncoderInformation() const;
	Windows::Graphics::Imaging::BitmapProperties BitmapProperties() const;
	Windows::Graphics::Imaging::BitmapProperties BitmapContainerProperties() const;
	bool IsThumbnailGenerated() const;
	void IsThumbnailGenerated(bool value) const;
	unsigned GeneratedThumbnailWidth() const;
	void GeneratedThumbnailWidth(unsigned value) const;
	unsigned GeneratedThumbnailHeight() const;
	void GeneratedThumbnailHeight(unsigned value) const;
	Windows::Graphics::Imaging::BitmapTransform BitmapTransform() const;
	Windows::Foundation::IAsyncAction GoToNextFrameAsync() const;
	Windows::Foundation::IAsyncAction GoToNextFrameAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions) const;
	Windows::Foundation::IAsyncAction FlushAsync() const;
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

template <typename T>
struct impl_IPrintTaskSourceRequestedHandler
{
	void Invoke(Windows::Graphics::Printing::PrintTaskSourceRequestedArgs const & args) const;
};

template <typename T>
struct impl_IPrintTaskOptionsCoreProperties
{
	void MediaSize(Windows::Graphics::Printing::PrintMediaSize value) const;
	Windows::Graphics::Printing::PrintMediaSize MediaSize() const;
	void MediaType(Windows::Graphics::Printing::PrintMediaType value) const;
	Windows::Graphics::Printing::PrintMediaType MediaType() const;
	void Orientation(Windows::Graphics::Printing::PrintOrientation value) const;
	Windows::Graphics::Printing::PrintOrientation Orientation() const;
	void PrintQuality(Windows::Graphics::Printing::PrintQuality value) const;
	Windows::Graphics::Printing::PrintQuality PrintQuality() const;
	void ColorMode(Windows::Graphics::Printing::PrintColorMode value) const;
	Windows::Graphics::Printing::PrintColorMode ColorMode() const;
	void Duplex(Windows::Graphics::Printing::PrintDuplex value) const;
	Windows::Graphics::Printing::PrintDuplex Duplex() const;
	void Collation(Windows::Graphics::Printing::PrintCollation value) const;
	Windows::Graphics::Printing::PrintCollation Collation() const;
	void Staple(Windows::Graphics::Printing::PrintStaple value) const;
	Windows::Graphics::Printing::PrintStaple Staple() const;
	void HolePunch(Windows::Graphics::Printing::PrintHolePunch value) const;
	Windows::Graphics::Printing::PrintHolePunch HolePunch() const;
	void Binding(Windows::Graphics::Printing::PrintBinding value) const;
	Windows::Graphics::Printing::PrintBinding Binding() const;
	unsigned MinCopies() const;
	unsigned MaxCopies() const;
	void NumberOfCopies(unsigned value) const;
	unsigned NumberOfCopies() const;
};

template <typename T>
struct impl_IPrintTaskOptionsCoreUIConfiguration
{
	Windows::Foundation::Collections::IVector<String> DisplayedOptions() const;
};

template <typename T>
struct impl_IPrintTaskOptionsCore
{
	Windows::Graphics::Printing::PrintPageDescription GetPageDescription(unsigned jobPageNumber) const;
};

template <typename T>
struct impl_IStandardPrintTaskOptionsStatic
{
	String MediaSize() const;
	String MediaType() const;
	String Orientation() const;
	String PrintQuality() const;
	String ColorMode() const;
	String Duplex() const;
	String Collation() const;
	String Staple() const;
	String HolePunch() const;
	String Binding() const;
	String Copies() const;
	String NUp() const;
	String InputBin() const;
};

template <typename T>
struct impl_IPrintDocumentSource
{
};

template <typename T>
struct impl_IPrintTaskProgressingEventArgs
{
	unsigned DocumentPageCount() const;
};

template <typename T>
struct impl_IPrintTaskCompletedEventArgs
{
	Windows::Graphics::Printing::PrintTaskCompletion Completion() const;
};

template <typename T>
struct impl_IPrintTask
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet Properties() const;
	Windows::Graphics::Printing::IPrintDocumentSource Source() const;
	Windows::Graphics::Printing::PrintTaskOptions Options() const;
	EventRegistrationToken Previewing(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken Previewing(F eventHandler) const;
	void Previewing(EventRegistrationToken eventCookie) const;
	EventRegistrationToken Submitting(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken Submitting(F eventHandler) const;
	void Submitting(EventRegistrationToken eventCookie) const;
	EventRegistrationToken Progressing(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskProgressingEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken Progressing(F eventHandler) const;
	void Progressing(EventRegistrationToken eventCookie) const;
	EventRegistrationToken Completed(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskCompletedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken Completed(F eventHandler) const;
	void Completed(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IPrintTaskTargetDeviceSupport
{
	void IsPrinterTargetEnabled(bool value) const;
	bool IsPrinterTargetEnabled() const;
	void Is3DManufacturingTargetEnabled(bool value) const;
	bool Is3DManufacturingTargetEnabled() const;
};

template <typename T>
struct impl_IPrintTaskSourceRequestedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IPrintTaskSourceRequestedArgs
{
	Windows::Foundation::DateTime Deadline() const;
	void SetSource(Windows::Graphics::Printing::IPrintDocumentSource const & source) const;
	Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral GetDeferral() const;
};

template <typename T>
struct impl_IPrintTaskRequestedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IPrintTaskRequest
{
	Windows::Foundation::DateTime Deadline() const;
	Windows::Graphics::Printing::PrintTask CreatePrintTask(String const & title, Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler const & handler) const;
	template <unsigned S0> Windows::Graphics::Printing::PrintTask CreatePrintTask(wchar_t const (&title)[S0], Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler const & handler) const;
	template <typename F> Windows::Graphics::Printing::PrintTask CreatePrintTask(String const & title, F handler) const;
	template <unsigned S0, typename F> Windows::Graphics::Printing::PrintTask CreatePrintTask(wchar_t const (&title)[S0], F handler) const;
	Windows::Graphics::Printing::PrintTaskRequestedDeferral GetDeferral() const;
};

template <typename T>
struct impl_IPrintTaskRequestedEventArgs
{
	Windows::Graphics::Printing::PrintTaskRequest Request() const;
};

template <typename T>
struct impl_IPrintManagerStatic
{
	Windows::Graphics::Printing::PrintManager GetForCurrentView() const;
	Windows::Foundation::IAsyncOperation<bool> ShowPrintUIAsync() const;
};

template <typename T>
struct impl_IPrintManager
{
	EventRegistrationToken PrintTaskRequested(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintManager, Windows::Graphics::Printing::PrintTaskRequestedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken PrintTaskRequested(F eventHandler) const;
	void PrintTaskRequested(EventRegistrationToken eventCookie) const;
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

template <typename T>
struct impl_IPrintOptionDetails
{
	String OptionId() const;
	Windows::Graphics::Printing::OptionDetails::PrintOptionType OptionType() const;
	void ErrorText(String const & value) const;
	template <unsigned S0> void ErrorText(wchar_t const (&value)[S0]) const;
	String ErrorText() const;
	void State(Windows::Graphics::Printing::OptionDetails::PrintOptionStates value) const;
	Windows::Graphics::Printing::OptionDetails::PrintOptionStates State() const;
	IInspectable Value() const;
	bool TrySetValue(IInspectable const & value) const;
};

template <typename T>
struct impl_IPrintNumberOptionDetails
{
	unsigned MinValue() const;
	unsigned MaxValue() const;
};

template <typename T>
struct impl_IPrintTextOptionDetails
{
	unsigned MaxCharacters() const;
};

template <typename T>
struct impl_IPrintItemListOptionDetails
{
	Windows::Foundation::Collections::IVectorView<IInspectable> Items() const;
};

template <typename T>
struct impl_IPrintCustomOptionDetails
{
	void DisplayName(String const & value) const;
	template <unsigned S0> void DisplayName(wchar_t const (&value)[S0]) const;
	String DisplayName() const;
};

template <typename T>
struct impl_IPrintCustomTextOptionDetails
{
	void MaxCharacters(unsigned value) const;
	unsigned MaxCharacters() const;
};

template <typename T>
struct impl_IPrintCustomItemDetails
{
	String ItemId() const;
	void ItemDisplayName(String const & value) const;
	template <unsigned S0> void ItemDisplayName(wchar_t const (&value)[S0]) const;
	String ItemDisplayName() const;
};

template <typename T>
struct impl_IPrintCustomItemListOptionDetails
{
	void AddItem(String const & itemId, String const & displayName) const;
	template <unsigned S0, unsigned S1> void AddItem(wchar_t const (&itemId)[S0], wchar_t const (&displayName)[S1]) const;
};

template <typename T>
struct impl_IPrintTaskOptionChangedEventArgs
{
	IInspectable OptionId() const;
};

template <typename T>
struct impl_IPrintTaskOptionDetails
{
	Windows::Foundation::Collections::IMapView<String, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails> Options() const;
	Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails CreateItemListOption(String const & optionId, String const & displayName) const;
	template <unsigned S0, unsigned S1> Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails CreateItemListOption(wchar_t const (&optionId)[S0], wchar_t const (&displayName)[S1]) const;
	Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails CreateTextOption(String const & optionId, String const & displayName) const;
	template <unsigned S0, unsigned S1> Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails CreateTextOption(wchar_t const (&optionId)[S0], wchar_t const (&displayName)[S1]) const;
	EventRegistrationToken OptionChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken OptionChanged(F eventHandler) const;
	void OptionChanged(EventRegistrationToken eventCookie) const;
	EventRegistrationToken BeginValidation(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken BeginValidation(F eventHandler) const;
	void BeginValidation(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IPrintTaskOptionDetailsStatic
{
	Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails GetFromPrintTaskOptions(Windows::Graphics::Printing::PrintTaskOptions const & printTaskOptions) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

template <typename T>
struct impl_IApplicationDataManagerStatics
{
	Windows::Storage::ApplicationData CreateForPackageFamily(String const & packageFamilyName) const;
	template <unsigned S0> Windows::Storage::ApplicationData CreateForPackageFamily(wchar_t const (&packageFamilyName)[S0]) const;
};

template <typename T>
struct impl_IApplicationDataManager
{
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

template <typename T>
struct impl_IDeploymentResult
{
	String ErrorText() const;
	GUID ActivityId() const;
	HRESULT ExtendedErrorCode() const;
};

template <typename T>
struct impl_IPackageUserInformation
{
	String UserSecurityId() const;
	Windows::Management::Deployment::PackageInstallState InstallState() const;
};

template <typename T>
struct impl_IPackageManager
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> AddPackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> UpdatePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RemovePackageAsync(String const & packageFullName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RemovePackageAsync(wchar_t const (&packageFullName)[S0]) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> StagePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RegisterPackageAsync(Windows::Foundation::Uri const & manifestUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages() const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(String const & userSecurityId) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(wchar_t const (&userSecurityId)[S0]) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages(String const & packageName, String const & packagePublisher) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages(wchar_t const (&packageName)[S0], wchar_t const (&packagePublisher)[S1]) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(String const & userSecurityId, String const & packageName, String const & packagePublisher) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageName)[S1], wchar_t const (&packagePublisher)[S2]) const;
	Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> FindUsers(String const & packageFullName) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> FindUsers(wchar_t const (&packageFullName)[S0]) const;
	void SetPackageState(String const & packageFullName, Windows::Management::Deployment::PackageState packageState) const;
	template <unsigned S0> void SetPackageState(wchar_t const (&packageFullName)[S0], Windows::Management::Deployment::PackageState packageState) const;
	Windows::ApplicationModel::Package FindPackage(String const & packageFullName) const;
	template <unsigned S0> Windows::ApplicationModel::Package FindPackage(wchar_t const (&packageFullName)[S0]) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> CleanupPackageForUserAsync(String const & packageName, String const & userSecurityId) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> CleanupPackageForUserAsync(wchar_t const (&packageName)[S0], wchar_t const (&userSecurityId)[S1]) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages(String const & packageFamilyName) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages(wchar_t const (&packageFamilyName)[S0]) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(String const & userSecurityId, String const & packageFamilyName) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageFamilyName)[S1]) const;
	Windows::ApplicationModel::Package FindPackageForUser(String const & userSecurityId, String const & packageFullName) const;
	template <unsigned S0, unsigned S1> Windows::ApplicationModel::Package FindPackageForUser(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageFullName)[S1]) const;
};

template <typename T>
struct impl_IPackageManager2
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RemovePackageAsync(String const & packageFullName, Windows::Management::Deployment::RemovalOptions removalOptions) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RemovePackageAsync(wchar_t const (&packageFullName)[S0], Windows::Management::Deployment::RemovalOptions removalOptions) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> StagePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RegisterPackageByFullNameAsync(String const & mainPackageFullName, Windows::Foundation::Collections::IIterable<String> const & dependencyPackageFullNames, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RegisterPackageByFullNameAsync(wchar_t const (&mainPackageFullName)[S0], Windows::Foundation::Collections::IIterable<String> const & dependencyPackageFullNames, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(String const & userSecurityId, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(wchar_t const (&userSecurityId)[S0], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(String const & packageName, String const & packagePublisher, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(wchar_t const (&packageName)[S0], wchar_t const (&packagePublisher)[S1], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(String const & userSecurityId, String const & packageName, String const & packagePublisher, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageName)[S1], wchar_t const (&packagePublisher)[S2], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(String const & packageFamilyName, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(wchar_t const (&packageFamilyName)[S0], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(String const & userSecurityId, String const & packageFamilyName, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageFamilyName)[S1], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> StageUserDataAsync(String const & packageFullName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> StageUserDataAsync(wchar_t const (&packageFullName)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

template <typename T>
struct impl_IWorkplaceSettingsStatics
{
	bool IsMicrosoftAccountOptional() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media {

template <typename T>
struct impl_IMediaMarker
{
	Windows::Foundation::TimeSpan Time() const;
	String MediaMarkerType() const;
	String Text() const;
};

template <typename T>
struct impl_IMediaMarkers
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> Markers() const;
};

template <typename T>
struct impl_IMediaMarkerTypesStatics
{
	String Bookmark() const;
};

template <typename T>
struct impl_IMusicDisplayProperties
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String AlbumArtist() const;
	void AlbumArtist(String const & value) const;
	template <unsigned S0> void AlbumArtist(wchar_t const (&value)[S0]) const;
	String Artist() const;
	void Artist(String const & value) const;
	template <unsigned S0> void Artist(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IVideoDisplayProperties
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Subtitle() const;
	void Subtitle(String const & value) const;
	template <unsigned S0> void Subtitle(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IImageDisplayProperties
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Subtitle() const;
	void Subtitle(String const & value) const;
	template <unsigned S0> void Subtitle(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISystemMediaTransportControlsDisplayUpdater
{
	Windows::Media::MediaPlaybackType Type() const;
	void Type(Windows::Media::MediaPlaybackType value) const;
	String AppMediaId() const;
	void AppMediaId(String const & value) const;
	template <unsigned S0> void AppMediaId(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::RandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const;
	Windows::Media::MusicDisplayProperties MusicProperties() const;
	Windows::Media::VideoDisplayProperties VideoProperties() const;
	Windows::Media::ImageDisplayProperties ImageProperties() const;
	Windows::Foundation::IAsyncOperation<bool> CopyFromFileAsync(Windows::Media::MediaPlaybackType type, Windows::Storage::StorageFile const & source) const;
	void ClearAll() const;
	void Update() const;
};

template <typename T>
struct impl_ISystemMediaTransportControlsButtonPressedEventArgs
{
	Windows::Media::SystemMediaTransportControlsButton Button() const;
};

template <typename T>
struct impl_ISystemMediaTransportControlsPropertyChangedEventArgs
{
	Windows::Media::SystemMediaTransportControlsProperty Property() const;
};

template <typename T>
struct impl_ISystemMediaTransportControls
{
	Windows::Media::MediaPlaybackStatus PlaybackStatus() const;
	void PlaybackStatus(Windows::Media::MediaPlaybackStatus value) const;
	Windows::Media::SystemMediaTransportControlsDisplayUpdater DisplayUpdater() const;
	Windows::Media::SoundLevel SoundLevel() const;
	bool IsEnabled() const;
	void IsEnabled(bool value) const;
	bool IsPlayEnabled() const;
	void IsPlayEnabled(bool value) const;
	bool IsStopEnabled() const;
	void IsStopEnabled(bool value) const;
	bool IsPauseEnabled() const;
	void IsPauseEnabled(bool value) const;
	bool IsRecordEnabled() const;
	void IsRecordEnabled(bool value) const;
	bool IsFastForwardEnabled() const;
	void IsFastForwardEnabled(bool value) const;
	bool IsRewindEnabled() const;
	void IsRewindEnabled(bool value) const;
	bool IsPreviousEnabled() const;
	void IsPreviousEnabled(bool value) const;
	bool IsNextEnabled() const;
	void IsNextEnabled(bool value) const;
	bool IsChannelUpEnabled() const;
	void IsChannelUpEnabled(bool value) const;
	bool IsChannelDownEnabled() const;
	void IsChannelDownEnabled(bool value) const;
	EventRegistrationToken ButtonPressed(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ButtonPressed(F handler) const;
	void ButtonPressed(EventRegistrationToken token) const;
	EventRegistrationToken PropertyChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PropertyChanged(F handler) const;
	void PropertyChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ISystemMediaTransportControlsStatics
{
	Windows::Media::SystemMediaTransportControls GetForCurrentView() const;
};

template <typename T>
struct impl_IMediaExtension
{
	void SetProperties(Windows::Foundation::Collections::IPropertySet const & configuration) const;
};

template <typename T>
struct impl_IMediaExtensionManager
{
	void RegisterSchemeHandler(String const & activatableClassId, String const & scheme) const;
	template <unsigned S0, unsigned S1> void RegisterSchemeHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&scheme)[S1]) const;
	void RegisterSchemeHandler(String const & activatableClassId, String const & scheme, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0, unsigned S1> void RegisterSchemeHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&scheme)[S1], Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterByteStreamHandler(String const & activatableClassId, String const & fileExtension, String const & mimeType) const;
	template <unsigned S0, unsigned S1, unsigned S2> void RegisterByteStreamHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&fileExtension)[S1], wchar_t const (&mimeType)[S2]) const;
	void RegisterByteStreamHandler(String const & activatableClassId, String const & fileExtension, String const & mimeType, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0, unsigned S1, unsigned S2> void RegisterByteStreamHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&fileExtension)[S1], wchar_t const (&mimeType)[S2], Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterAudioDecoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype) const;
	template <unsigned S0> void RegisterAudioDecoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype) const;
	void RegisterAudioDecoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void RegisterAudioDecoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterAudioEncoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype) const;
	template <unsigned S0> void RegisterAudioEncoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype) const;
	void RegisterAudioEncoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void RegisterAudioEncoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterVideoDecoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype) const;
	template <unsigned S0> void RegisterVideoDecoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype) const;
	void RegisterVideoDecoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void RegisterVideoDecoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterVideoEncoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype) const;
	template <unsigned S0> void RegisterVideoEncoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype) const;
	void RegisterVideoEncoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void RegisterVideoEncoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
};

template <typename T>
struct impl_IVideoEffectsStatics
{
	String VideoStabilization() const;
};

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

template <typename T>
struct impl_IMediaCaptureFailedEventHandler
{
	void Invoke(Windows::Media::Capture::MediaCapture const & sender, Windows::Media::Capture::MediaCaptureFailedEventArgs const & errorEventArgs) const;
};

template <typename T>
struct impl_IRecordLimitationExceededEventHandler
{
	void Invoke(Windows::Media::Capture::MediaCapture const & sender) const;
};

template <typename T>
struct impl_ICameraCaptureUIPhotoCaptureSettings
{
	Windows::Media::Capture::CameraCaptureUIPhotoFormat Format() const;
	void Format(Windows::Media::Capture::CameraCaptureUIPhotoFormat value) const;
	Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution MaxResolution() const;
	void MaxResolution(Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution value) const;
	Windows::Foundation::Size CroppedSizeInPixels() const;
	void CroppedSizeInPixels(Windows::Foundation::Size const & value) const;
	Windows::Foundation::Size CroppedAspectRatio() const;
	void CroppedAspectRatio(Windows::Foundation::Size const & value) const;
	bool AllowCropping() const;
	void AllowCropping(bool value) const;
};

template <typename T>
struct impl_ICameraCaptureUIVideoCaptureSettings
{
	Windows::Media::Capture::CameraCaptureUIVideoFormat Format() const;
	void Format(Windows::Media::Capture::CameraCaptureUIVideoFormat value) const;
	Windows::Media::Capture::CameraCaptureUIMaxVideoResolution MaxResolution() const;
	void MaxResolution(Windows::Media::Capture::CameraCaptureUIMaxVideoResolution value) const;
	float MaxDurationInSeconds() const;
	void MaxDurationInSeconds(float value) const;
	bool AllowTrimming() const;
	void AllowTrimming(bool value) const;
};

template <typename T>
struct impl_ICameraCaptureUI
{
	Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings PhotoSettings() const;
	Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings VideoSettings() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CaptureFileAsync(Windows::Media::Capture::CameraCaptureUIMode mode) const;
};

template <typename T>
struct impl_ICameraOptionsUIStatics
{
	void Show(Windows::Media::Capture::MediaCapture const & mediaCapture) const;
};

template <typename T>
struct impl_IMediaCaptureFailedEventArgs
{
	String Message() const;
	unsigned Code() const;
};

template <typename T>
struct impl_IMediaCaptureInitializationSettings
{
	void AudioDeviceId(String const & value) const;
	template <unsigned S0> void AudioDeviceId(wchar_t const (&value)[S0]) const;
	String AudioDeviceId() const;
	void VideoDeviceId(String const & value) const;
	template <unsigned S0> void VideoDeviceId(wchar_t const (&value)[S0]) const;
	String VideoDeviceId() const;
	void StreamingCaptureMode(Windows::Media::Capture::StreamingCaptureMode value) const;
	Windows::Media::Capture::StreamingCaptureMode StreamingCaptureMode() const;
	void PhotoCaptureSource(Windows::Media::Capture::PhotoCaptureSource value) const;
	Windows::Media::Capture::PhotoCaptureSource PhotoCaptureSource() const;
};

template <typename T>
struct impl_IMediaCaptureInitializationSettings2
{
	void MediaCategory(Windows::Media::Capture::MediaCategory value) const;
	Windows::Media::Capture::MediaCategory MediaCategory() const;
	void AudioProcessing(Windows::Media::AudioProcessing value) const;
	Windows::Media::AudioProcessing AudioProcessing() const;
};

template <typename T>
struct impl_IMediaCapture
{
	Windows::Foundation::IAsyncAction InitializeAsync() const;
	Windows::Foundation::IAsyncAction InitializeAsync(Windows::Media::Capture::MediaCaptureInitializationSettings const & mediaCaptureInitializationSettings) const;
	Windows::Foundation::IAsyncAction StartRecordToStorageFileAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncAction StartRecordToStreamAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncAction StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const;
	Windows::Foundation::IAsyncAction StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, String const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, wchar_t const (&customSinkActivationId)[S0], Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	Windows::Foundation::IAsyncAction StopRecordAsync() const;
	Windows::Foundation::IAsyncAction CapturePhotoToStorageFileAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type, Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncAction CapturePhotoToStreamAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncAction AddEffectAsync(Windows::Media::Capture::MediaStreamType mediaStreamType, String const & effectActivationID, Windows::Foundation::Collections::IPropertySet const & effectSettings) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AddEffectAsync(Windows::Media::Capture::MediaStreamType mediaStreamType, wchar_t const (&effectActivationID)[S0], Windows::Foundation::Collections::IPropertySet const & effectSettings) const;
	Windows::Foundation::IAsyncAction ClearEffectsAsync(Windows::Media::Capture::MediaStreamType mediaStreamType) const;
	void SetEncoderProperty(Windows::Media::Capture::MediaStreamType mediaStreamType, GUID propertyId, IInspectable const & propertyValue) const;
	IInspectable GetEncoderProperty(Windows::Media::Capture::MediaStreamType mediaStreamType, GUID propertyId) const;
	EventRegistrationToken Failed(Windows::Media::Capture::IMediaCaptureFailedEventHandler const & errorEventHandler) const;
	template <typename F> EventRegistrationToken Failed(F errorEventHandler) const;
	void Failed(EventRegistrationToken eventCookie) const;
	EventRegistrationToken RecordLimitationExceeded(Windows::Media::Capture::IRecordLimitationExceededEventHandler const & recordLimitationExceededEventHandler) const;
	template <typename F> EventRegistrationToken RecordLimitationExceeded(F recordLimitationExceededEventHandler) const;
	void RecordLimitationExceeded(EventRegistrationToken eventCookie) const;
	Windows::Media::Capture::MediaCaptureSettings MediaCaptureSettings() const;
	Windows::Media::Devices::AudioDeviceController AudioDeviceController() const;
	Windows::Media::Devices::VideoDeviceController VideoDeviceController() const;
	void SetPreviewMirroring(bool value) const;
	bool GetPreviewMirroring() const;
	void SetPreviewRotation(Windows::Media::Capture::VideoRotation value) const;
	Windows::Media::Capture::VideoRotation GetPreviewRotation() const;
	void SetRecordRotation(Windows::Media::Capture::VideoRotation value) const;
	Windows::Media::Capture::VideoRotation GetRecordRotation() const;
};

template <typename T>
struct impl_IMediaCapture2
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToStorageFileAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToStreamAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, String const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, wchar_t const (&customSinkActivationId)[S0], Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoCapture> PrepareLowLagPhotoCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoSequenceCapture> PrepareLowLagPhotoSequenceCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type) const;
	Windows::Foundation::IAsyncAction SetEncodingPropertiesAsync(Windows::Media::Capture::MediaStreamType mediaStreamType, Windows::Media::MediaProperties::IMediaEncodingProperties const & mediaEncodingProperties, Windows::Media::MediaProperties::MediaPropertySet const & encoderProperties) const;
};

template <typename T>
struct impl_ILowLagPhotoCapture
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::CapturedPhoto> CaptureAsync() const;
	Windows::Foundation::IAsyncAction FinishAsync() const;
};

template <typename T>
struct impl_ILowLagMediaRecording
{
	Windows::Foundation::IAsyncAction StartAsync() const;
	Windows::Foundation::IAsyncAction StopAsync() const;
	Windows::Foundation::IAsyncAction FinishAsync() const;
};

template <typename T>
struct impl_ILowLagPhotoSequenceCapture
{
	Windows::Foundation::IAsyncAction StartAsync() const;
	Windows::Foundation::IAsyncAction StopAsync() const;
	Windows::Foundation::IAsyncAction FinishAsync() const;
	EventRegistrationToken PhotoCaptured(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::LowLagPhotoSequenceCapture, Windows::Media::Capture::PhotoCapturedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PhotoCaptured(F handler) const;
	void PhotoCaptured(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPhotoCapturedEventArgs
{
	Windows::Media::Capture::CapturedFrame Frame() const;
	Windows::Media::Capture::CapturedFrame Thumbnail() const;
	Windows::Foundation::TimeSpan CaptureTimeOffset() const;
};

template <typename T>
struct impl_ICapturedPhoto
{
	Windows::Media::Capture::CapturedFrame Frame() const;
	Windows::Media::Capture::CapturedFrame Thumbnail() const;
};

template <typename T>
struct impl_ICapturedFrame
{
	unsigned Width() const;
	unsigned Height() const;
};

template <typename T>
struct impl_IMediaCaptureVideoPreview
{
	Windows::Foundation::IAsyncAction StartPreviewAsync() const;
	Windows::Foundation::IAsyncAction StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const;
	Windows::Foundation::IAsyncAction StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, String const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, wchar_t const (&customSinkActivationId)[S0], Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	Windows::Foundation::IAsyncAction StopPreviewAsync() const;
};

template <typename T>
struct impl_IMediaCaptureSettings
{
	String AudioDeviceId() const;
	String VideoDeviceId() const;
	Windows::Media::Capture::StreamingCaptureMode StreamingCaptureMode() const;
	Windows::Media::Capture::PhotoCaptureSource PhotoCaptureSource() const;
	Windows::Media::Capture::VideoDeviceCharacteristic VideoDeviceCharacteristic() const;
};

template <typename T>
struct impl_IMediaCaptureSettings2
{
	bool ConcurrentRecordAndPhotoSupported() const;
	bool ConcurrentRecordAndPhotoSequenceSupported() const;
	bool CameraSoundRequiredForRegion() const;
	Windows::Foundation::IReference<unsigned> Horizontal35mmEquivalentFocalLength() const;
	Windows::Foundation::IReference<int> PitchOffsetDegrees() const;
	Windows::Foundation::IReference<unsigned> Vertical35mmEquivalentFocalLength() const;
	Windows::Media::Capture::MediaCategory MediaCategory() const;
	Windows::Media::AudioProcessing AudioProcessing() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

template <typename T>
struct impl_IRatedContentDescription
{
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Image() const;
	void Image(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::Media::ContentRestrictions::RatedContentCategory Category() const;
	void Category(Windows::Media::ContentRestrictions::RatedContentCategory value) const;
	Windows::Foundation::Collections::IVector<String> Ratings() const;
	void Ratings(Windows::Foundation::Collections::IVector<String> const & value) const;
};

template <typename T>
struct impl_IRatedContentDescriptionFactory
{
	Windows::Media::ContentRestrictions::RatedContentDescription Create(String const & id, String const & title, Windows::Media::ContentRestrictions::RatedContentCategory category) const;
	template <unsigned S0, unsigned S1> Windows::Media::ContentRestrictions::RatedContentDescription Create(wchar_t const (&id)[S0], wchar_t const (&title)[S1], Windows::Media::ContentRestrictions::RatedContentCategory category) const;
};

template <typename T>
struct impl_IContentRestrictionsBrowsePolicy
{
	String GeographicRegion() const;
	Windows::Foundation::IReference<unsigned> MaxBrowsableAgeRating() const;
	Windows::Foundation::IReference<unsigned> PreferredAgeRating() const;
};

template <typename T>
struct impl_IRatedContentRestrictions
{
	Windows::Foundation::IAsyncOperation<Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy> GetBrowsePolicyAsync() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Media::ContentRestrictions::ContentAccessRestrictionLevel> GetRestrictionLevelAsync(Windows::Media::ContentRestrictions::RatedContentDescription const & RatedContentDescription) const;
	Windows::Foundation::IAsyncOperation<bool> RequestContentAccessAsync(Windows::Media::ContentRestrictions::RatedContentDescription const & RatedContentDescription) const;
	EventRegistrationToken RestrictionsChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken RestrictionsChanged(F handler) const;
	void RestrictionsChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IRatedContentRestrictionsFactory
{
	Windows::Media::ContentRestrictions::RatedContentRestrictions CreateWithMaxAgeRating(unsigned maxAgeRating) const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

template <typename T>
struct impl_IMediaStreamDescriptor
{
	bool IsSelected() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Name() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	String Language() const;
};

template <typename T>
struct impl_IAudioStreamDescriptor
{
	Windows::Media::MediaProperties::AudioEncodingProperties EncodingProperties() const;
};

template <typename T>
struct impl_IAudioStreamDescriptorFactory
{
	Windows::Media::Core::AudioStreamDescriptor Create(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) const;
};

template <typename T>
struct impl_IVideoStreamDescriptor
{
	Windows::Media::MediaProperties::VideoEncodingProperties EncodingProperties() const;
};

template <typename T>
struct impl_IVideoStreamDescriptorFactory
{
	Windows::Media::Core::VideoStreamDescriptor Create(Windows::Media::MediaProperties::VideoEncodingProperties const & encodingProperties) const;
};

template <typename T>
struct impl_IMediaSource
{
};

template <typename T>
struct impl_IMediaStreamSource
{
	EventRegistrationToken Closed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceClosedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Closed(F handler) const;
	void Closed(EventRegistrationToken token) const;
	EventRegistrationToken Starting(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceStartingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Starting(F handler) const;
	void Starting(EventRegistrationToken token) const;
	EventRegistrationToken Paused(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Paused(F handler) const;
	void Paused(EventRegistrationToken token) const;
	EventRegistrationToken SampleRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SampleRequested(F handler) const;
	void SampleRequested(EventRegistrationToken token) const;
	EventRegistrationToken SwitchStreamsRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SwitchStreamsRequested(F handler) const;
	void SwitchStreamsRequested(EventRegistrationToken token) const;
	void NotifyError(Windows::Media::Core::MediaStreamSourceErrorStatus errorStatus) const;
	void AddStreamDescriptor(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) const;
	void MediaProtectionManager(Windows::Media::Protection::MediaProtectionManager const & value) const;
	Windows::Media::Protection::MediaProtectionManager MediaProtectionManager() const;
	void Duration(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan Duration() const;
	void CanSeek(bool value) const;
	bool CanSeek() const;
	void BufferTime(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan BufferTime() const;
	void SetBufferedRange(Windows::Foundation::TimeSpan const & startOffset, Windows::Foundation::TimeSpan const & endOffset) const;
	Windows::Storage::FileProperties::MusicProperties MusicProperties() const;
	Windows::Storage::FileProperties::VideoProperties VideoProperties() const;
	void Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
};

template <typename T>
struct impl_IMediaStreamSourceFactory
{
	Windows::Media::Core::MediaStreamSource CreateFromDescriptor(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) const;
	Windows::Media::Core::MediaStreamSource CreateFromDescriptors(Windows::Media::Core::IMediaStreamDescriptor const & descriptor, Windows::Media::Core::IMediaStreamDescriptor const & descriptor2) const;
};

template <typename T>
struct impl_IMediaStreamSample
{
	EventRegistrationToken Processed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSample, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Processed(F handler) const;
	void Processed(EventRegistrationToken token) const;
	Windows::Storage::Streams::Buffer Buffer() const;
	Windows::Foundation::TimeSpan Timestamp() const;
	Windows::Media::Core::MediaStreamSamplePropertySet ExtendedProperties() const;
	Windows::Media::Core::MediaStreamSampleProtectionProperties Protection() const;
	void DecodeTimestamp(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan DecodeTimestamp() const;
	void Duration(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan Duration() const;
	void KeyFrame(bool value) const;
	bool KeyFrame() const;
	void Discontinuous(bool value) const;
	bool Discontinuous() const;
};

template <typename T>
struct impl_IMediaStreamSampleStatics
{
	Windows::Media::Core::MediaStreamSample CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer, Windows::Foundation::TimeSpan const & timestamp) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, unsigned count, Windows::Foundation::TimeSpan const & timestamp) const;
};

template <typename T>
struct impl_IMediaStreamSampleProtectionProperties
{
};

template <typename T>
struct impl_IMediaStreamSourceClosedRequest
{
	Windows::Media::Core::MediaStreamSourceClosedReason Reason() const;
};

template <typename T>
struct impl_IMediaStreamSourceClosedEventArgs
{
	Windows::Media::Core::MediaStreamSourceClosedRequest Request() const;
};

template <typename T>
struct impl_IMediaStreamSourceStartingRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IMediaStreamSourceStartingRequest
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> StartPosition() const;
	Windows::Media::Core::MediaStreamSourceStartingRequestDeferral GetDeferral() const;
	void SetActualStartPosition(Windows::Foundation::TimeSpan const & position) const;
};

template <typename T>
struct impl_IMediaStreamSourceStartingEventArgs
{
	Windows::Media::Core::MediaStreamSourceStartingRequest Request() const;
};

template <typename T>
struct impl_IMediaStreamSourceSampleRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IMediaStreamSourceSampleRequest
{
	Windows::Media::Core::IMediaStreamDescriptor StreamDescriptor() const;
	Windows::Media::Core::MediaStreamSourceSampleRequestDeferral GetDeferral() const;
	void Sample(Windows::Media::Core::MediaStreamSample const & value) const;
	Windows::Media::Core::MediaStreamSample Sample() const;
	void ReportSampleProgress(unsigned progress) const;
};

template <typename T>
struct impl_IMediaStreamSourceSampleRequestedEventArgs
{
	Windows::Media::Core::MediaStreamSourceSampleRequest Request() const;
};

template <typename T>
struct impl_IMediaStreamSourceSwitchStreamsRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IMediaStreamSourceSwitchStreamsRequest
{
	Windows::Media::Core::IMediaStreamDescriptor OldStreamDescriptor() const;
	Windows::Media::Core::IMediaStreamDescriptor NewStreamDescriptor() const;
	Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_IMediaStreamSourceSwitchStreamsRequestedEventArgs
{
	Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest Request() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

template <typename T>
struct impl_ICallControlEventHandler
{
	void Invoke(Windows::Media::Devices::CallControl const & sender) const;
};

template <typename T>
struct impl_IDialRequestedEventHandler
{
	void Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::DialRequestedEventArgs const & e) const;
};

template <typename T>
struct impl_IRedialRequestedEventHandler
{
	void Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::RedialRequestedEventArgs const & e) const;
};

template <typename T>
struct impl_IKeypadPressedEventHandler
{
	void Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::KeypadPressedEventArgs const & e) const;
};

template <typename T>
struct impl_IDialRequestedEventArgs
{
	void Handled() const;
	IInspectable Contact() const;
};

template <typename T>
struct impl_IRedialRequestedEventArgs
{
	void Handled() const;
};

template <typename T>
struct impl_IKeypadPressedEventArgs
{
	Windows::Media::Devices::TelephonyKey TelephonyKey() const;
};

template <typename T>
struct impl_ICallControl
{
	unsigned long long IndicateNewIncomingCall(bool enableRinger, String const & callerId) const;
	template <unsigned S0> unsigned long long IndicateNewIncomingCall(bool enableRinger, wchar_t const (&callerId)[S0]) const;
	unsigned long long IndicateNewOutgoingCall() const;
	void IndicateActiveCall(unsigned long long callToken) const;
	void EndCall(unsigned long long callToken) const;
	bool HasRinger() const;
	EventRegistrationToken AnswerRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const;
	template <typename F> EventRegistrationToken AnswerRequested(F handler) const;
	void AnswerRequested(EventRegistrationToken token) const;
	EventRegistrationToken HangUpRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const;
	template <typename F> EventRegistrationToken HangUpRequested(F handler) const;
	void HangUpRequested(EventRegistrationToken token) const;
	EventRegistrationToken DialRequested(Windows::Media::Devices::IDialRequestedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken DialRequested(F handler) const;
	void DialRequested(EventRegistrationToken token) const;
	EventRegistrationToken RedialRequested(Windows::Media::Devices::IRedialRequestedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken RedialRequested(F handler) const;
	void RedialRequested(EventRegistrationToken token) const;
	EventRegistrationToken KeypadPressed(Windows::Media::Devices::IKeypadPressedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken KeypadPressed(F handler) const;
	void KeypadPressed(EventRegistrationToken token) const;
	EventRegistrationToken AudioTransferRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const;
	template <typename F> EventRegistrationToken AudioTransferRequested(F handler) const;
	void AudioTransferRequested(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICallControlStatics
{
	Windows::Media::Devices::CallControl GetDefault() const;
	Windows::Media::Devices::CallControl FromId(String const & deviceId) const;
	template <unsigned S0> Windows::Media::Devices::CallControl FromId(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_IDefaultAudioDeviceChangedEventArgs
{
	String Id() const;
	Windows::Media::Devices::AudioDeviceRole Role() const;
};

template <typename T>
struct impl_IMediaDeviceStatics
{
	String GetAudioCaptureSelector() const;
	String GetAudioRenderSelector() const;
	String GetVideoCaptureSelector() const;
	String GetDefaultAudioCaptureId(Windows::Media::Devices::AudioDeviceRole role) const;
	String GetDefaultAudioRenderId(Windows::Media::Devices::AudioDeviceRole role) const;
	EventRegistrationToken DefaultAudioCaptureDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken DefaultAudioCaptureDeviceChanged(F handler) const;
	void DefaultAudioCaptureDeviceChanged(EventRegistrationToken cookie) const;
	EventRegistrationToken DefaultAudioRenderDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken DefaultAudioRenderDeviceChanged(F handler) const;
	void DefaultAudioRenderDeviceChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ISceneModeControl
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::CaptureSceneMode> SupportedModes() const;
	Windows::Media::Devices::CaptureSceneMode Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(Windows::Media::Devices::CaptureSceneMode sceneMode) const;
};

template <typename T>
struct impl_ITorchControl
{
	bool Supported() const;
	bool PowerSupported() const;
	bool Enabled() const;
	void Enabled(bool value) const;
	float PowerPercent() const;
	void PowerPercent(float value) const;
};

template <typename T>
struct impl_IFlashControl
{
	bool Supported() const;
	bool PowerSupported() const;
	bool RedEyeReductionSupported() const;
	bool Enabled() const;
	void Enabled(bool value) const;
	bool Auto() const;
	void Auto(bool value) const;
	bool RedEyeReduction() const;
	void RedEyeReduction(bool value) const;
	float PowerPercent() const;
	void PowerPercent(float value) const;
};

template <typename T>
struct impl_IExposureCompensationControl
{
	bool Supported() const;
	float Min() const;
	float Max() const;
	float Step() const;
	float Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(float value) const;
};

template <typename T>
struct impl_IIsoSpeedControl
{
	bool Supported() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::IsoSpeedPreset> SupportedPresets() const;
	Windows::Media::Devices::IsoSpeedPreset Preset() const;
	Windows::Foundation::IAsyncAction SetPresetAsync(Windows::Media::Devices::IsoSpeedPreset preset) const;
};

template <typename T>
struct impl_IWhiteBalanceControl
{
	bool Supported() const;
	Windows::Media::Devices::ColorTemperaturePreset Preset() const;
	Windows::Foundation::IAsyncAction SetPresetAsync(Windows::Media::Devices::ColorTemperaturePreset preset) const;
	unsigned Min() const;
	unsigned Max() const;
	unsigned Step() const;
	unsigned Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(unsigned temperature) const;
};

template <typename T>
struct impl_IExposureControl
{
	bool Supported() const;
	bool Auto() const;
	Windows::Foundation::IAsyncAction SetAutoAsync(bool value) const;
	Windows::Foundation::TimeSpan Min() const;
	Windows::Foundation::TimeSpan Max() const;
	Windows::Foundation::TimeSpan Step() const;
	Windows::Foundation::TimeSpan Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(Windows::Foundation::TimeSpan const & shutterDuration) const;
};

template <typename T>
struct impl_IFocusControl
{
	bool Supported() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::FocusPreset> SupportedPresets() const;
	Windows::Media::Devices::FocusPreset Preset() const;
	Windows::Foundation::IAsyncAction SetPresetAsync(Windows::Media::Devices::FocusPreset preset) const;
	Windows::Foundation::IAsyncAction SetPresetAsync(Windows::Media::Devices::FocusPreset preset, bool completeBeforeFocus) const;
	unsigned Min() const;
	unsigned Max() const;
	unsigned Step() const;
	unsigned Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(unsigned focus) const;
	Windows::Foundation::IAsyncAction FocusAsync() const;
};

template <typename T>
struct impl_IRegionOfInterest
{
	bool AutoFocusEnabled() const;
	void AutoFocusEnabled(bool value) const;
	bool AutoWhiteBalanceEnabled() const;
	void AutoWhiteBalanceEnabled(bool value) const;
	bool AutoExposureEnabled() const;
	void AutoExposureEnabled(bool value) const;
	Windows::Foundation::Rect Bounds() const;
	void Bounds(Windows::Foundation::Rect const & value) const;
};

template <typename T>
struct impl_IRegionsOfInterestControl
{
	unsigned MaxRegions() const;
	Windows::Foundation::IAsyncAction SetRegionsAsync(Windows::Foundation::Collections::IIterable<Windows::Media::Devices::RegionOfInterest> const & regions) const;
	Windows::Foundation::IAsyncAction SetRegionsAsync(Windows::Foundation::Collections::IIterable<Windows::Media::Devices::RegionOfInterest> const & regions, bool lockValues) const;
	Windows::Foundation::IAsyncAction ClearRegionsAsync() const;
	bool AutoFocusSupported() const;
	bool AutoWhiteBalanceSupported() const;
	bool AutoExposureSupported() const;
};

template <typename T>
struct impl_IMediaDeviceController
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::IMediaEncodingProperties> GetAvailableMediaStreamProperties(Windows::Media::Capture::MediaStreamType mediaStreamType) const;
	Windows::Media::MediaProperties::IMediaEncodingProperties GetMediaStreamProperties(Windows::Media::Capture::MediaStreamType mediaStreamType) const;
	Windows::Foundation::IAsyncAction SetMediaStreamPropertiesAsync(Windows::Media::Capture::MediaStreamType mediaStreamType, Windows::Media::MediaProperties::IMediaEncodingProperties const & mediaEncodingProperties) const;
};

template <typename T>
struct impl_IAudioDeviceController
{
	void Muted(bool value) const;
	bool Muted() const;
	void VolumePercent(float value) const;
	float VolumePercent() const;
};

template <typename T>
struct impl_IVideoDeviceController
{
	Windows::Media::Devices::MediaDeviceControl Brightness() const;
	Windows::Media::Devices::MediaDeviceControl Contrast() const;
	Windows::Media::Devices::MediaDeviceControl Hue() const;
	Windows::Media::Devices::MediaDeviceControl WhiteBalance() const;
	Windows::Media::Devices::MediaDeviceControl BacklightCompensation() const;
	Windows::Media::Devices::MediaDeviceControl Pan() const;
	Windows::Media::Devices::MediaDeviceControl Tilt() const;
	Windows::Media::Devices::MediaDeviceControl Zoom() const;
	Windows::Media::Devices::MediaDeviceControl Roll() const;
	Windows::Media::Devices::MediaDeviceControl Exposure() const;
	Windows::Media::Devices::MediaDeviceControl Focus() const;
	bool TrySetPowerlineFrequency(Windows::Media::Capture::PowerlineFrequency value) const;
	bool TryGetPowerlineFrequency(Windows::Media::Capture::PowerlineFrequency & value) const;
};

template <typename T>
struct impl_IAdvancedVideoCaptureDeviceController2
{
	Windows::Media::Devices::LowLagPhotoSequenceControl LowLagPhotoSequence() const;
	Windows::Media::Devices::LowLagPhotoControl LowLagPhoto() const;
	Windows::Media::Devices::SceneModeControl SceneModeControl() const;
	Windows::Media::Devices::TorchControl TorchControl() const;
	Windows::Media::Devices::FlashControl FlashControl() const;
	Windows::Media::Devices::WhiteBalanceControl WhiteBalanceControl() const;
	Windows::Media::Devices::ExposureControl ExposureControl() const;
	Windows::Media::Devices::FocusControl FocusControl() const;
	Windows::Media::Devices::ExposureCompensationControl ExposureCompensationControl() const;
	Windows::Media::Devices::IsoSpeedControl IsoSpeedControl() const;
	Windows::Media::Devices::RegionsOfInterestControl RegionsOfInterestControl() const;
	Windows::Media::Devices::CaptureUse PrimaryUse() const;
	void PrimaryUse(Windows::Media::Devices::CaptureUse value) const;
};

template <typename T>
struct impl_IMediaDeviceControl
{
	Windows::Media::Devices::MediaDeviceControlCapabilities Capabilities() const;
	bool TryGetValue(double & value) const;
	bool TrySetValue(double value) const;
	bool TryGetAuto(bool & value) const;
	bool TrySetAuto(bool value) const;
};

template <typename T>
struct impl_IMediaDeviceControlCapabilities
{
	bool Supported() const;
	double Min() const;
	double Max() const;
	double Step() const;
	double Default() const;
	bool AutoModeSupported() const;
};

template <typename T>
struct impl_IAdvancedVideoCaptureDeviceController
{
	void SetDeviceProperty(String const & propertyId, IInspectable const & propertyValue) const;
	template <unsigned S0> void SetDeviceProperty(wchar_t const (&propertyId)[S0], IInspectable const & propertyValue) const;
	IInspectable GetDeviceProperty(String const & propertyId) const;
	template <unsigned S0> IInspectable GetDeviceProperty(wchar_t const (&propertyId)[S0]) const;
};

template <typename T>
struct impl_ILowLagPhotoSequenceControl
{
	bool Supported() const;
	unsigned MaxPastPhotos() const;
	float MaxPhotosPerSecond() const;
	unsigned PastPhotoLimit() const;
	void PastPhotoLimit(unsigned value) const;
	float PhotosPerSecondLimit() const;
	void PhotosPerSecondLimit(float value) const;
	Windows::Media::MediaProperties::MediaRatio GetHighestConcurrentFrameRate(Windows::Media::MediaProperties::IMediaEncodingProperties const & captureProperties) const;
	Windows::Media::MediaProperties::MediaRatio GetCurrentFrameRate() const;
	bool ThumbnailEnabled() const;
	void ThumbnailEnabled(bool value) const;
	Windows::Media::MediaProperties::MediaThumbnailFormat ThumbnailFormat() const;
	void ThumbnailFormat(Windows::Media::MediaProperties::MediaThumbnailFormat value) const;
	unsigned DesiredThumbnailSize() const;
	void DesiredThumbnailSize(unsigned value) const;
	unsigned HardwareAcceleratedThumbnailSupported() const;
};

template <typename T>
struct impl_ILowLagPhotoControl
{
	Windows::Media::MediaProperties::MediaRatio GetHighestConcurrentFrameRate(Windows::Media::MediaProperties::IMediaEncodingProperties const & captureProperties) const;
	Windows::Media::MediaProperties::MediaRatio GetCurrentFrameRate() const;
	bool ThumbnailEnabled() const;
	void ThumbnailEnabled(bool value) const;
	Windows::Media::MediaProperties::MediaThumbnailFormat ThumbnailFormat() const;
	void ThumbnailFormat(Windows::Media::MediaProperties::MediaThumbnailFormat value) const;
	unsigned DesiredThumbnailSize() const;
	void DesiredThumbnailSize(unsigned value) const;
	unsigned HardwareAcceleratedThumbnailSupported() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

template <typename T>
struct impl_IAudioEffect
{
	Windows::Media::Effects::AudioEffectType AudioEffectType() const;
};

template <typename T>
struct impl_IAudioEffectsManagerStatics
{
	Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory category) const;
	template <unsigned S0> Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory category) const;
	Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory category, Windows::Media::AudioProcessing mode) const;
	template <unsigned S0> Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory category, Windows::Media::AudioProcessing mode) const;
	Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory category) const;
	template <unsigned S0> Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory category) const;
	Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory category, Windows::Media::AudioProcessing mode) const;
	template <unsigned S0> Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory category, Windows::Media::AudioProcessing mode) const;
};

template <typename T>
struct impl_IAudioRenderEffectsManager
{
	EventRegistrationToken AudioRenderEffectsChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Effects::AudioRenderEffectsManager, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken AudioRenderEffectsChanged(F handler) const;
	void AudioRenderEffectsChanged(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> GetAudioRenderEffects() const;
};

template <typename T>
struct impl_IAudioCaptureEffectsManager
{
	EventRegistrationToken AudioCaptureEffectsChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Effects::AudioCaptureEffectsManager, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken AudioCaptureEffectsChanged(F handler) const;
	void AudioCaptureEffectsChanged(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> GetAudioCaptureEffects() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

template <typename T>
struct impl_IMediaRatio
{
	void Numerator(unsigned value) const;
	unsigned Numerator() const;
	void Denominator(unsigned value) const;
	unsigned Denominator() const;
};

template <typename T>
struct impl_IMediaEncodingProperties
{
	Windows::Media::MediaProperties::MediaPropertySet Properties() const;
	String Type() const;
	void Subtype(String const & value) const;
	template <unsigned S0> void Subtype(wchar_t const (&value)[S0]) const;
	String Subtype() const;
};

template <typename T>
struct impl_IAudioEncodingProperties
{
	void Bitrate(unsigned value) const;
	unsigned Bitrate() const;
	void ChannelCount(unsigned value) const;
	unsigned ChannelCount() const;
	void SampleRate(unsigned value) const;
	unsigned SampleRate() const;
	void BitsPerSample(unsigned value) const;
	unsigned BitsPerSample() const;
};

template <typename T>
struct impl_IAudioEncodingPropertiesWithFormatUserData
{
};

template <typename T>
struct impl_IAudioEncodingPropertiesStatics
{
	Windows::Media::MediaProperties::AudioEncodingProperties CreateAac(unsigned sampleRate, unsigned channelCount, unsigned bitrate) const;
	Windows::Media::MediaProperties::AudioEncodingProperties CreateAacAdts(unsigned sampleRate, unsigned channelCount, unsigned bitrate) const;
	Windows::Media::MediaProperties::AudioEncodingProperties CreateMp3(unsigned sampleRate, unsigned channelCount, unsigned bitrate) const;
	Windows::Media::MediaProperties::AudioEncodingProperties CreatePcm(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample) const;
	Windows::Media::MediaProperties::AudioEncodingProperties CreateWma(unsigned sampleRate, unsigned channelCount, unsigned bitrate) const;
};

template <typename T>
struct impl_IVideoEncodingProperties
{
	void Bitrate(unsigned value) const;
	unsigned Bitrate() const;
	void Width(unsigned value) const;
	unsigned Width() const;
	void Height(unsigned value) const;
	unsigned Height() const;
	Windows::Media::MediaProperties::MediaRatio FrameRate() const;
	Windows::Media::MediaProperties::MediaRatio PixelAspectRatio() const;
};

template <typename T>
struct impl_IMediaEncodingSubtypesStatics
{
	String Aac() const;
	String AacAdts() const;
	String Ac3() const;
	String AmrNb() const;
	String AmrWb() const;
	String Argb32() const;
	String Asf() const;
	String Avi() const;
	String Bgra8() const;
	String Bmp() const;
	String Eac3() const;
	String Float() const;
	String Gif() const;
	String H263() const;
	String H264() const;
	String H264Es() const;
	String Hevc() const;
	String HevcEs() const;
	String Iyuv() const;
	String Jpeg() const;
	String JpegXr() const;
	String Mjpg() const;
	String Mpeg() const;
	String Mpeg1() const;
	String Mpeg2() const;
	String Mp3() const;
	String Mpeg4() const;
	String Nv12() const;
	String Pcm() const;
	String Png() const;
	String Rgb24() const;
	String Rgb32() const;
	String Tiff() const;
	String Wave() const;
	String Wma8() const;
	String Wma9() const;
	String Wmv3() const;
	String Wvc1() const;
	String Yuy2() const;
	String Yv12() const;
};

template <typename T>
struct impl_IH264ProfileIdsStatics
{
	int ConstrainedBaseline() const;
	int Baseline() const;
	int Extended() const;
	int Main() const;
	int High() const;
	int High10() const;
	int High422() const;
	int High444() const;
	int StereoHigh() const;
	int MultiviewHigh() const;
};

template <typename T>
struct impl_IMpeg2ProfileIdsStatics
{
	int Simple() const;
	int Main() const;
	int SignalNoiseRatioScalable() const;
	int SpatiallyScalable() const;
	int High() const;
};

template <typename T>
struct impl_IVideoEncodingProperties2
{
	void ProfileId(int value) const;
	int ProfileId() const;
};

template <typename T>
struct impl_IVideoEncodingPropertiesStatics
{
	Windows::Media::MediaProperties::VideoEncodingProperties CreateH264() const;
	Windows::Media::MediaProperties::VideoEncodingProperties CreateMpeg2() const;
	Windows::Media::MediaProperties::VideoEncodingProperties CreateUncompressed(String const & subtype, unsigned width, unsigned height) const;
	template <unsigned S0> Windows::Media::MediaProperties::VideoEncodingProperties CreateUncompressed(wchar_t const (&subtype)[S0], unsigned width, unsigned height) const;
};

template <typename T>
struct impl_IImageEncodingProperties
{
	void Width(unsigned value) const;
	unsigned Width() const;
	void Height(unsigned value) const;
	unsigned Height() const;
};

template <typename T>
struct impl_IImageEncodingPropertiesStatics
{
	Windows::Media::MediaProperties::ImageEncodingProperties CreateJpeg() const;
	Windows::Media::MediaProperties::ImageEncodingProperties CreatePng() const;
	Windows::Media::MediaProperties::ImageEncodingProperties CreateJpegXR() const;
};

template <typename T>
struct impl_IImageEncodingPropertiesStatics2
{
	Windows::Media::MediaProperties::ImageEncodingProperties CreateUncompressed(Windows::Media::MediaProperties::MediaPixelFormat format) const;
	Windows::Media::MediaProperties::ImageEncodingProperties CreateBmp() const;
};

template <typename T>
struct impl_IContainerEncodingProperties
{
};

template <typename T>
struct impl_IMediaEncodingProfileStatics
{
	Windows::Media::MediaProperties::MediaEncodingProfile CreateM4a(Windows::Media::MediaProperties::AudioEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateMp3(Windows::Media::MediaProperties::AudioEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateWma(Windows::Media::MediaProperties::AudioEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateMp4(Windows::Media::MediaProperties::VideoEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateWmv(Windows::Media::MediaProperties::VideoEncodingQuality quality) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> CreateFromFileAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> CreateFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream) const;
};

template <typename T>
struct impl_IMediaEncodingProfileStatics2
{
	Windows::Media::MediaProperties::MediaEncodingProfile CreateWav(Windows::Media::MediaProperties::AudioEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateAvi(Windows::Media::MediaProperties::VideoEncodingQuality quality) const;
};

template <typename T>
struct impl_IMediaEncodingProfile
{
	void Audio(Windows::Media::MediaProperties::AudioEncodingProperties const & value) const;
	Windows::Media::MediaProperties::AudioEncodingProperties Audio() const;
	void Video(Windows::Media::MediaProperties::VideoEncodingProperties const & value) const;
	Windows::Media::MediaProperties::VideoEncodingProperties Video() const;
	void Container(Windows::Media::MediaProperties::ContainerEncodingProperties const & value) const;
	Windows::Media::MediaProperties::ContainerEncodingProperties Container() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

template <typename T>
struct impl_ISourceChangeRequestedEventArgs
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType Stream() const;
	String Title() const;
	String Author() const;
	String Album() const;
	String Genre() const;
	String Description() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Date() const;
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
	Windows::Foundation::IReference<unsigned> Rating() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
};

template <typename T>
struct impl_IPlaybackRateChangeRequestedEventArgs
{
	double Rate() const;
};

template <typename T>
struct impl_ICurrentTimeChangeRequestedEventArgs
{
	Windows::Foundation::TimeSpan Time() const;
};

template <typename T>
struct impl_IMuteChangeRequestedEventArgs
{
	bool Mute() const;
};

template <typename T>
struct impl_IVolumeChangeRequestedEventArgs
{
	double Volume() const;
};

template <typename T>
struct impl_IPlayToReceiver
{
	EventRegistrationToken PlayRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken PlayRequested(F handler) const;
	void PlayRequested(EventRegistrationToken token) const;
	EventRegistrationToken PauseRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken PauseRequested(F handler) const;
	void PauseRequested(EventRegistrationToken token) const;
	EventRegistrationToken SourceChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::SourceChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SourceChangeRequested(F handler) const;
	void SourceChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken PlaybackRateChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PlaybackRateChangeRequested(F handler) const;
	void PlaybackRateChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken CurrentTimeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CurrentTimeChangeRequested(F handler) const;
	void CurrentTimeChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken MuteChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::MuteChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken MuteChangeRequested(F handler) const;
	void MuteChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken VolumeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::VolumeChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VolumeChangeRequested(F handler) const;
	void VolumeChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken TimeUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken TimeUpdateRequested(F handler) const;
	void TimeUpdateRequested(EventRegistrationToken token) const;
	EventRegistrationToken StopRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken StopRequested(F handler) const;
	void StopRequested(EventRegistrationToken token) const;
	void NotifyVolumeChange(double volume, bool mute) const;
	void NotifyRateChange(double rate) const;
	void NotifyLoadedMetadata() const;
	void NotifyTimeUpdate(Windows::Foundation::TimeSpan const & currentTime) const;
	void NotifyDurationChange(Windows::Foundation::TimeSpan const & duration) const;
	void NotifySeeking() const;
	void NotifySeeked() const;
	void NotifyPaused() const;
	void NotifyPlaying() const;
	void NotifyEnded() const;
	void NotifyError() const;
	void NotifyStopped() const;
	String FriendlyName() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	void SupportsImage(bool value) const;
	bool SupportsImage() const;
	void SupportsAudio(bool value) const;
	bool SupportsAudio() const;
	void SupportsVideo(bool value) const;
	bool SupportsVideo() const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
	Windows::Foundation::IAsyncAction StartAsync() const;
	Windows::Foundation::IAsyncAction StopAsync() const;
};

template <typename T>
struct impl_IPlayToSource
{
	Windows::Media::PlayTo::PlayToConnection Connection() const;
	Windows::Media::PlayTo::PlayToSource Next() const;
	void Next(Windows::Media::PlayTo::PlayToSource const & value) const;
	void PlayNext() const;
};

template <typename T>
struct impl_IPlayToSourceWithPreferredSourceUri
{
	Windows::Foundation::Uri PreferredSourceUri() const;
	void PreferredSourceUri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IPlayToConnectionStateChangedEventArgs
{
	Windows::Media::PlayTo::PlayToConnectionState PreviousState() const;
	Windows::Media::PlayTo::PlayToConnectionState CurrentState() const;
};

template <typename T>
struct impl_IPlayToConnectionTransferredEventArgs
{
	Windows::Media::PlayTo::PlayToSource PreviousSource() const;
	Windows::Media::PlayTo::PlayToSource CurrentSource() const;
};

template <typename T>
struct impl_IPlayToConnectionErrorEventArgs
{
	Windows::Media::PlayTo::PlayToConnectionError Code() const;
	String Message() const;
};

template <typename T>
struct impl_IPlayToConnection
{
	Windows::Media::PlayTo::PlayToConnectionState State() const;
	EventRegistrationToken StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken StateChanged(F handler) const;
	void StateChanged(EventRegistrationToken token) const;
	EventRegistrationToken Transferred(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Transferred(F handler) const;
	void Transferred(EventRegistrationToken token) const;
	EventRegistrationToken Error(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionErrorEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Error(F handler) const;
	void Error(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPlayToSourceSelectedEventArgs
{
	String FriendlyName() const;
	Windows::Storage::Streams::IRandomAccessStreamWithContentType Icon() const;
	bool SupportsImage() const;
	bool SupportsAudio() const;
	bool SupportsVideo() const;
};

template <typename T>
struct impl_IPlayToSourceDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IPlayToSourceRequest
{
	Windows::Foundation::DateTime Deadline() const;
	void DisplayErrorString(String const & errorString) const;
	template <unsigned S0> void DisplayErrorString(wchar_t const (&errorString)[S0]) const;
	Windows::Media::PlayTo::PlayToSourceDeferral GetDeferral() const;
	void SetSource(Windows::Media::PlayTo::PlayToSource const & value) const;
};

template <typename T>
struct impl_IPlayToSourceRequestedEventArgs
{
	Windows::Media::PlayTo::PlayToSourceRequest SourceRequest() const;
};

template <typename T>
struct impl_IPlayToManager
{
	EventRegistrationToken SourceRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SourceRequested(F handler) const;
	void SourceRequested(EventRegistrationToken token) const;
	EventRegistrationToken SourceSelected(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceSelectedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SourceSelected(F handler) const;
	void SourceSelected(EventRegistrationToken token) const;
	void DefaultSourceSelection(bool value) const;
	bool DefaultSourceSelection() const;
};

template <typename T>
struct impl_IPlayToManagerStatics
{
	Windows::Media::PlayTo::PlayToManager GetForCurrentView() const;
	void ShowPlayToUI() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

template <typename T>
struct impl_IPlaylist
{
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFile> Files() const;
	Windows::Foundation::IAsyncAction SaveAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, String const & desiredName, Windows::Storage::NameCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, wchar_t const (&desiredName)[S0], Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, String const & desiredName, Windows::Storage::NameCollisionOption option, Windows::Media::Playlists::PlaylistFormat playlistFormat) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, wchar_t const (&desiredName)[S0], Windows::Storage::NameCollisionOption option, Windows::Media::Playlists::PlaylistFormat playlistFormat) const;
};

template <typename T>
struct impl_IPlaylistStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> LoadAsync(Windows::Storage::IStorageFile const & file) const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

template <typename T>
struct impl_IServiceRequestedEventHandler
{
	void Invoke(Windows::Media::Protection::MediaProtectionManager const & sender, Windows::Media::Protection::ServiceRequestedEventArgs const & e) const;
};

template <typename T>
struct impl_IRebootNeededEventHandler
{
	void Invoke(Windows::Media::Protection::MediaProtectionManager const & sender) const;
};

template <typename T>
struct impl_IComponentLoadFailedEventHandler
{
	void Invoke(Windows::Media::Protection::MediaProtectionManager const & sender, Windows::Media::Protection::ComponentLoadFailedEventArgs const & e) const;
};

template <typename T>
struct impl_IMediaProtectionManager
{
	EventRegistrationToken ServiceRequested(Windows::Media::Protection::IServiceRequestedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken ServiceRequested(F handler) const;
	void ServiceRequested(EventRegistrationToken cookie) const;
	EventRegistrationToken RebootNeeded(Windows::Media::Protection::IRebootNeededEventHandler const & handler) const;
	template <typename F> EventRegistrationToken RebootNeeded(F handler) const;
	void RebootNeeded(EventRegistrationToken cookie) const;
	EventRegistrationToken ComponentLoadFailed(Windows::Media::Protection::IComponentLoadFailedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken ComponentLoadFailed(F handler) const;
	void ComponentLoadFailed(EventRegistrationToken cookie) const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
};

template <typename T>
struct impl_IMediaProtectionServiceCompletion
{
	void Complete(bool success) const;
};

template <typename T>
struct impl_IServiceRequestedEventArgs
{
	Windows::Media::Protection::IMediaProtectionServiceRequest Request() const;
	Windows::Media::Protection::MediaProtectionServiceCompletion Completion() const;
};

template <typename T>
struct impl_IMediaProtectionServiceRequest
{
	GUID ProtectionSystem() const;
	GUID Type() const;
};

template <typename T>
struct impl_IComponentLoadFailedEventArgs
{
	Windows::Media::Protection::RevocationAndRenewalInformation Information() const;
	Windows::Media::Protection::MediaProtectionServiceCompletion Completion() const;
};

template <typename T>
struct impl_IRevocationAndRenewalInformation
{
	Windows::Foundation::Collections::IVector<Windows::Media::Protection::RevocationAndRenewalItem> Items() const;
};

template <typename T>
struct impl_IRevocationAndRenewalItem
{
	Windows::Media::Protection::RevocationAndRenewalReasons Reasons() const;
	String HeaderHash() const;
	String PublicKeyHash() const;
	String Name() const;
	String RenewalId() const;
};

template <typename T>
struct impl_IComponentRenewalStatics
{
	Windows::Foundation::IAsyncOperationWithProgress<Modern::Windows::Media::Protection::RenewalStatus, unsigned> RenewSystemComponentsAsync(Windows::Media::Protection::RevocationAndRenewalInformation const & information) const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

template <typename T>
struct impl_IVoiceInformation
{
	String DisplayName() const;
	String Id() const;
	String Language() const;
	String Description() const;
	Windows::Media::SpeechSynthesis::VoiceGender Gender() const;
};

template <typename T>
struct impl_IInstalledVoicesStatic
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> AllVoices() const;
	Windows::Media::SpeechSynthesis::VoiceInformation DefaultVoice() const;
};

template <typename T>
struct impl_ISpeechSynthesisStream
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> Markers() const;
};

template <typename T>
struct impl_ISpeechSynthesizer
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> SynthesizeTextToStreamAsync(String const & text) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> SynthesizeTextToStreamAsync(wchar_t const (&text)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> SynthesizeSsmlToStreamAsync(String const & Ssml) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> SynthesizeSsmlToStreamAsync(wchar_t const (&Ssml)[S0]) const;
	void Voice(Windows::Media::SpeechSynthesis::VoiceInformation const & value) const;
	Windows::Media::SpeechSynthesis::VoiceInformation Voice() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

template <typename T>
struct impl_IDeviceControllerFinderHandler
{
	void Invoke(Windows::Media::Streaming::IDeviceController const & sender, String const & uniqueDeviceName, Windows::Media::Streaming::IBasicDevice const & device) const;
	template <unsigned S0> void Invoke(Windows::Media::Streaming::IDeviceController const & sender, wchar_t const (&uniqueDeviceName)[S0], Windows::Media::Streaming::IBasicDevice const & device) const;
};

template <typename T>
struct impl_IConnectionStatusHandler
{
	void Invoke(Windows::Media::Streaming::IBasicDevice const & sender, Windows::Media::Streaming::ConnectionStatus arg) const;
};

template <typename T>
struct impl_IDeviceController
{
	Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IBasicDevice> CachedDevices() const;
	void AddDevice(String const & uniqueDeviceName) const;
	template <unsigned S0> void AddDevice(wchar_t const (&uniqueDeviceName)[S0]) const;
	void RemoveDevice(Windows::Media::Streaming::IBasicDevice const & device) const;
	EventRegistrationToken DeviceArrival(Windows::Media::Streaming::IDeviceControllerFinderHandler const & handler) const;
	template <typename F> EventRegistrationToken DeviceArrival(F handler) const;
	void DeviceArrival(EventRegistrationToken token) const;
	EventRegistrationToken DeviceDeparture(Windows::Media::Streaming::IDeviceControllerFinderHandler const & handler) const;
	template <typename F> EventRegistrationToken DeviceDeparture(F handler) const;
	void DeviceDeparture(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IBasicDevice
{
	String FriendlyName() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	String ManufacturerName() const;
	String ManufacturerUrl() const;
	String UniqueDeviceName() const;
	String ModelName() const;
	String ModelNumber() const;
	String ModelUrl() const;
	String Description() const;
	String SerialNumber() const;
	String PresentationUrl() const;
	Windows::Foundation::Collections::IVector<String> RemoteStreamingUrls() const;
	Windows::Foundation::Collections::IVector<String> PhysicalAddresses() const;
	Windows::Foundation::Collections::IVector<String> IpAddresses() const;
	bool CanWakeDevices() const;
	bool DiscoveredOnCurrentNetwork() const;
	Windows::Media::Streaming::DeviceTypes Type() const;
	Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IDeviceIcon> Icons() const;
	Windows::Media::Streaming::ConnectionStatus ConnectionStatus() const;
	EventRegistrationToken ConnectionStatusChanged(Windows::Media::Streaming::IConnectionStatusHandler const & handler) const;
	template <typename F> EventRegistrationToken ConnectionStatusChanged(F handler) const;
	void ConnectionStatusChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IActiveBasicDevice
{
	unsigned MaxVolume() const;
	bool IsMuteSupported() const;
	bool IsSetNextSourceSupported() const;
	bool IsAudioSupported() const;
	bool IsVideoSupported() const;
	bool IsImageSupported() const;
	bool IsSearchSupported() const;
	String GetCachedSinkProtocolInfo() const;
	void SetCachedSinkProtocolInfo(String const & value) const;
	template <unsigned S0> void SetCachedSinkProtocolInfo(wchar_t const (&value)[S0]) const;
	String GetCachedExtraSinkProtocolInfo() const;
	unsigned long long GetEffectiveBandwidth(bool transmitSpeed) const;
	unsigned long long GetCachedBitrateMeasurement(GUID physicalNetworkInterface) const;
	void SetCachedBitrateMeasurement(GUID physicalNetworkInterface, unsigned long long bitrate) const;
	GUID LogicalNetworkInterface() const;
	GUID PhysicalNetworkInterface() const;
	void NotifyStreamingStatus(bool fIsStreaming) const;
};

template <typename T>
struct impl_IDeviceIcon
{
	unsigned Width() const;
	unsigned Height() const;
	String ContentType() const;
	Windows::Storage::Streams::IRandomAccessStreamWithContentType Stream() const;
};

template <typename T>
struct impl_IActiveBasicDeviceStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> CreateBasicDeviceAsync(String const & deviceIdentifier, Windows::Media::Streaming::DeviceTypes type) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> CreateBasicDeviceAsync(wchar_t const (&deviceIdentifier)[S0], Windows::Media::Streaming::DeviceTypes type) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> CloneBasicDeviceAsync(Windows::Media::Streaming::IBasicDevice const & basicDevice) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> GetDevicesOnMatchingNetworkAsync(Windows::Media::Streaming::IActiveBasicDevice const & server, Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool optimizeForProxying, bool allowChangeRendererNetwork) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> CreateDevicesOnMatchingNetworkAsync(String const & serverUDN, Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool optimizeForProxying, bool allowChangeRendererNetwork) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> CreateDevicesOnMatchingNetworkAsync(wchar_t const (&serverUDN)[S0], Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool optimizeForProxying, bool allowChangeRendererNetwork) const;
};

template <typename T>
struct impl_IDevicePair
{
	Windows::Media::Streaming::ActiveBasicDevice Server() const;
	Windows::Media::Streaming::ActiveBasicDevice Renderer() const;
};

template <typename T>
struct impl_ITransportParametersUpdateHandler
{
	void Invoke(Windows::Media::Streaming::IMediaRenderer const & sender, Windows::Media::Streaming::ITransportParameters const & arg) const;
};

template <typename T>
struct impl_IRenderingParametersUpdateHandler
{
	void Invoke(Windows::Media::Streaming::IMediaRenderer const & sender, Windows::Media::Streaming::RenderingParameters const & arg) const;
};

template <typename T>
struct impl_IMediaRenderer
{
	bool IsAudioSupported() const;
	bool IsVideoSupported() const;
	bool IsImageSupported() const;
	Windows::Media::Streaming::IMediaRendererActionInformation ActionInformation() const;
	Windows::Foundation::IAsyncOperation<unsigned> SetSourceFromUriAsync(String const & URI) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<unsigned> SetSourceFromUriAsync(wchar_t const (&URI)[S0]) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetSourceFromStreamAsync(IInspectable const & stream) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetSourceFromMediaSourceAsync(IInspectable const & mediaSource) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetNextSourceFromUriAsync(String const & URI) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<unsigned> SetNextSourceFromUriAsync(wchar_t const (&URI)[S0]) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetNextSourceFromStreamAsync(IInspectable const & stream) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetNextSourceFromMediaSourceAsync(IInspectable const & mediaSource) const;
	Windows::Foundation::IAsyncAction PlayAsync() const;
	Windows::Foundation::IAsyncAction PlayAtSpeedAsync(Windows::Media::Streaming::PlaySpeed const & playSpeed) const;
	Windows::Foundation::IAsyncAction StopAsync() const;
	Windows::Foundation::IAsyncAction PauseAsync() const;
	Windows::Foundation::IAsyncOperation<bool> GetMuteAsync() const;
	Windows::Foundation::IAsyncAction SetMuteAsync(bool mute) const;
	Windows::Foundation::IAsyncOperation<unsigned> GetVolumeAsync() const;
	Windows::Foundation::IAsyncAction SetVolumeAsync(unsigned volume) const;
	Windows::Foundation::IAsyncAction SeekAsync(Windows::Foundation::TimeSpan const & target) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Media::Streaming::TransportInformation> GetTransportInformationAsync() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Media::Streaming::PositionInformation> GetPositionInformationAsync() const;
	EventRegistrationToken TransportParametersUpdate(Windows::Media::Streaming::ITransportParametersUpdateHandler const & handler) const;
	template <typename F> EventRegistrationToken TransportParametersUpdate(F handler) const;
	void TransportParametersUpdate(EventRegistrationToken token) const;
	EventRegistrationToken RenderingParametersUpdate(Windows::Media::Streaming::IRenderingParametersUpdateHandler const & handler) const;
	template <typename F> EventRegistrationToken RenderingParametersUpdate(F handler) const;
	void RenderingParametersUpdate(EventRegistrationToken token) const;
	Windows::Foundation::IAsyncAction NextAsync() const;
};

template <typename T>
struct impl_IMediaRendererActionInformation
{
	bool IsMuteAvailable() const;
	bool IsPauseAvailable() const;
	bool IsPlayAvailable() const;
	bool IsSeekAvailable() const;
	bool IsSetNextSourceAvailable() const;
	bool IsStopAvailable() const;
	bool IsVolumeAvailable() const;
	Windows::Foundation::Collections::IVector<Modern::Windows::Media::Streaming::PlaySpeed> PlaySpeeds() const;
};

template <typename T>
struct impl_ITransportParameters
{
	Windows::Media::Streaming::IMediaRendererActionInformation ActionInformation() const;
	Windows::Media::Streaming::TrackInformation TrackInformation() const;
	Windows::Media::Streaming::TransportInformation TransportInformation() const;
};

template <typename T>
struct impl_IMediaRendererFactory
{
	Windows::Media::Streaming::CreateMediaRendererOperation CreateMediaRendererAsync(String const & deviceIdentifier) const;
	template <unsigned S0> Windows::Media::Streaming::CreateMediaRendererOperation CreateMediaRendererAsync(wchar_t const (&deviceIdentifier)[S0]) const;
	Windows::Media::Streaming::CreateMediaRendererOperation CreateMediaRendererFromBasicDeviceAsync(Windows::Media::Streaming::IBasicDevice const & basicDevice) const;
};

template <typename T>
struct impl_IStreamSelectorStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> SelectBestStreamAsync(Windows::Storage::StorageFile const & storageFile, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> GetStreamPropertiesAsync(Windows::Storage::StorageFile const & storageFile, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> SelectBestStreamFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> GetStreamPropertiesFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

template <typename T>
struct impl_IMediaTranscoder2
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> PrepareMediaStreamSourceTranscodeAsync(Windows::Media::Core::IMediaSource const & source, Windows::Storage::Streams::IRandomAccessStream const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const;
	void VideoProcessingAlgorithm(Windows::Media::Transcoding::MediaVideoProcessingAlgorithm value) const;
	Windows::Media::Transcoding::MediaVideoProcessingAlgorithm VideoProcessingAlgorithm() const;
};

template <typename T>
struct impl_IMediaTranscoder
{
	void TrimStartTime(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan TrimStartTime() const;
	void TrimStopTime(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan TrimStopTime() const;
	void AlwaysReencode(bool value) const;
	bool AlwaysReencode() const;
	void HardwareAccelerationEnabled(bool value) const;
	bool HardwareAccelerationEnabled() const;
	void AddAudioEffect(String const & activatableClassId) const;
	template <unsigned S0> void AddAudioEffect(wchar_t const (&activatableClassId)[S0]) const;
	void AddAudioEffect(String const & activatableClassId, bool effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void AddAudioEffect(wchar_t const (&activatableClassId)[S0], bool effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void AddVideoEffect(String const & activatableClassId) const;
	template <unsigned S0> void AddVideoEffect(wchar_t const (&activatableClassId)[S0]) const;
	void AddVideoEffect(String const & activatableClassId, bool effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void AddVideoEffect(wchar_t const (&activatableClassId)[S0], bool effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void ClearEffects() const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> PrepareFileTranscodeAsync(Windows::Storage::IStorageFile const & source, Windows::Storage::IStorageFile const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> PrepareStreamTranscodeAsync(Windows::Storage::Streams::IRandomAccessStream const & source, Windows::Storage::Streams::IRandomAccessStream const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const;
};

template <typename T>
struct impl_IPrepareTranscodeResult
{
	bool CanTranscode() const;
	Windows::Media::Transcoding::TranscodeFailureReason FailureReason() const;
	Windows::Foundation::IAsyncActionWithProgress<double> TranscodeAsync() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking {

template <typename T>
struct impl_IHostNameStatics
{
	int Compare(String const & value1, String const & value2) const;
	template <unsigned S0, unsigned S1> int Compare(wchar_t const (&value1)[S0], wchar_t const (&value2)[S1]) const;
};

template <typename T>
struct impl_IHostName
{
	Windows::Networking::Connectivity::IPInformation IPInformation() const;
	String RawName() const;
	String DisplayName() const;
	String CanonicalName() const;
	Windows::Networking::HostNameType Type() const;
	bool IsEqual(Windows::Networking::HostName const & hostName) const;
};

template <typename T>
struct impl_IHostNameFactory
{
	Windows::Networking::HostName CreateHostName(String const & hostName) const;
	template <unsigned S0> Windows::Networking::HostName CreateHostName(wchar_t const (&hostName)[S0]) const;
};

template <typename T>
struct impl_IEndpointPair
{
	Windows::Networking::HostName LocalHostName() const;
	void LocalHostName(Windows::Networking::HostName const & value) const;
	String LocalServiceName() const;
	void LocalServiceName(String const & value) const;
	template <unsigned S0> void LocalServiceName(wchar_t const (&value)[S0]) const;
	Windows::Networking::HostName RemoteHostName() const;
	void RemoteHostName(Windows::Networking::HostName const & value) const;
	String RemoteServiceName() const;
	void RemoteServiceName(String const & value) const;
	template <unsigned S0> void RemoteServiceName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IEndpointPairFactory
{
	Windows::Networking::EndpointPair CreateEndpointPair(Windows::Networking::HostName const & localHostName, String const & localServiceName, Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0, unsigned S1> Windows::Networking::EndpointPair CreateEndpointPair(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0], Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S1]) const;
};

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

template <typename T>
struct impl_IBackgroundTransferBase
{
	void SetRequestHeader(String const & headerName, String const & headerValue) const;
	template <unsigned S0, unsigned S1> void SetRequestHeader(wchar_t const (&headerName)[S0], wchar_t const (&headerValue)[S1]) const;
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & credential) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & credential) const;
	String Method() const;
	void Method(String const & value) const;
	template <unsigned S0> void Method(wchar_t const (&value)[S0]) const;
	Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy CostPolicy() const;
	void CostPolicy(Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy value) const;
};

template <typename T>
struct impl_IUnconstrainedTransferRequestResult
{
	bool IsUnconstrained() const;
};

template <typename T>
struct impl_IBackgroundDownloaderUserConsent
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> RequestUnconstrainedDownloadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::DownloadOperation> const & operations) const;
};

template <typename T>
struct impl_IBackgroundUploaderUserConsent
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> RequestUnconstrainedUploadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::UploadOperation> const & operations) const;
};

template <typename T>
struct impl_IBackgroundDownloader
{
	Windows::Networking::BackgroundTransfer::DownloadOperation CreateDownload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile) const;
	Windows::Networking::BackgroundTransfer::DownloadOperation CreateDownload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile, Windows::Storage::IStorageFile const & requestBodyFile) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::DownloadOperation> CreateDownloadAsync(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile, Windows::Storage::Streams::IInputStream const & requestBodyStream) const;
};

template <typename T>
struct impl_IBackgroundDownloader2
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup TransferGroup() const;
	void TransferGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & value) const;
	Windows::UI::Notifications::ToastNotification SuccessToastNotification() const;
	void SuccessToastNotification(Windows::UI::Notifications::ToastNotification const & value) const;
	Windows::UI::Notifications::ToastNotification FailureToastNotification() const;
	void FailureToastNotification(Windows::UI::Notifications::ToastNotification const & value) const;
	Windows::UI::Notifications::TileNotification SuccessTileNotification() const;
	void SuccessTileNotification(Windows::UI::Notifications::TileNotification const & value) const;
	Windows::UI::Notifications::TileNotification FailureTileNotification() const;
	void FailureTileNotification(Windows::UI::Notifications::TileNotification const & value) const;
};

template <typename T>
struct impl_IBackgroundUploader
{
	Windows::Networking::BackgroundTransfer::UploadOperation CreateUpload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & sourceFile) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadFromStreamAsync(Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IInputStream const & sourceStream) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, String const & subType) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, wchar_t const (&subType)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, String const & subType, String const & boundary) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, wchar_t const (&subType)[S0], wchar_t const (&boundary)[S1]) const;
};

template <typename T>
struct impl_IBackgroundUploader2
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup TransferGroup() const;
	void TransferGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & value) const;
	Windows::UI::Notifications::ToastNotification SuccessToastNotification() const;
	void SuccessToastNotification(Windows::UI::Notifications::ToastNotification const & value) const;
	Windows::UI::Notifications::ToastNotification FailureToastNotification() const;
	void FailureToastNotification(Windows::UI::Notifications::ToastNotification const & value) const;
	Windows::UI::Notifications::TileNotification SuccessTileNotification() const;
	void SuccessTileNotification(Windows::UI::Notifications::TileNotification const & value) const;
	Windows::UI::Notifications::TileNotification FailureTileNotification() const;
	void FailureTileNotification(Windows::UI::Notifications::TileNotification const & value) const;
};

template <typename T>
struct impl_IBackgroundTransferOperation
{
	GUID Guid() const;
	Windows::Foundation::Uri RequestedUri() const;
	String Method() const;
	Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy CostPolicy() const;
	void CostPolicy(Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy value) const;
	Windows::Storage::Streams::IInputStream GetResultStreamAt(unsigned long long position) const;
	Windows::Networking::BackgroundTransfer::ResponseInformation GetResponseInformation() const;
};

template <typename T>
struct impl_IBackgroundTransferOperationPriority
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferPriority Priority() const;
	void Priority(Windows::Networking::BackgroundTransfer::BackgroundTransferPriority value) const;
};

template <typename T>
struct impl_IDownloadOperation
{
	Windows::Storage::IStorageFile ResultFile() const;
	Windows::Networking::BackgroundTransfer::BackgroundDownloadProgress Progress() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> StartAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> AttachAsync() const;
	void Pause() const;
	void Resume() const;
};

template <typename T>
struct impl_IDownloadOperation2
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup TransferGroup() const;
};

template <typename T>
struct impl_IUploadOperation
{
	Windows::Storage::IStorageFile SourceFile() const;
	Windows::Networking::BackgroundTransfer::BackgroundUploadProgress Progress() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> StartAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> AttachAsync() const;
};

template <typename T>
struct impl_IUploadOperation2
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup TransferGroup() const;
};

template <typename T>
struct impl_IBackgroundDownloaderStaticMethods
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> GetCurrentDownloadsAsync() const;
};

template <typename T>
struct impl_IBackgroundDownloaderStaticMethods2
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> GetCurrentDownloadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group) const;
};

template <typename T>
struct impl_IBackgroundUploaderStaticMethods
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> GetCurrentUploadsAsync() const;
};

template <typename T>
struct impl_IBackgroundUploaderStaticMethods2
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> GetCurrentUploadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group) const;
};

template <typename T>
struct impl_IResponseInformation
{
	bool IsResumable() const;
	Windows::Foundation::Uri ActualUri() const;
	unsigned StatusCode() const;
	Windows::Foundation::Collections::IMapView<String, String> Headers() const;
};

template <typename T>
struct impl_IBackgroundTransferErrorStaticMethods
{
	Windows::Web::WebErrorStatus GetStatus(int hresult) const;
};

template <typename T>
struct impl_IBackgroundTransferContentPart
{
	void SetHeader(String const & headerName, String const & headerValue) const;
	template <unsigned S0, unsigned S1> void SetHeader(wchar_t const (&headerName)[S0], wchar_t const (&headerValue)[S1]) const;
	void SetText(String const & value) const;
	template <unsigned S0> void SetText(wchar_t const (&value)[S0]) const;
	void SetFile(Windows::Storage::IStorageFile const & value) const;
};

template <typename T>
struct impl_IBackgroundTransferContentPartFactory
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart CreateWithName(String const & name) const;
	template <unsigned S0> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart CreateWithName(wchar_t const (&name)[S0]) const;
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart CreateWithNameAndFileName(String const & name, String const & fileName) const;
	template <unsigned S0, unsigned S1> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart CreateWithNameAndFileName(wchar_t const (&name)[S0], wchar_t const (&fileName)[S1]) const;
};

template <typename T>
struct impl_IBackgroundTransferGroup
{
	String Name() const;
	Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior TransferBehavior() const;
	void TransferBehavior(Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior value) const;
};

template <typename T>
struct impl_IBackgroundTransferGroupStatics
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup CreateGroup(String const & name) const;
	template <unsigned S0> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup CreateGroup(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_IContentPrefetcherTime
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> LastSuccessfulPrefetchTime() const;
};

template <typename T>
struct impl_IContentPrefetcher
{
	Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> ContentUris() const;
	void IndirectContentUri(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri IndirectContentUri() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

template <typename T>
struct impl_INetworkStatusChangedEventHandler
{
	void Invoke(IInspectable const & sender) const;
};

template <typename T>
struct impl_IDataPlanUsage
{
	unsigned MegabytesUsed() const;
	Windows::Foundation::DateTime LastSyncTime() const;
};

template <typename T>
struct impl_IDataPlanStatus
{
	Windows::Networking::Connectivity::DataPlanUsage DataPlanUsage() const;
	Windows::Foundation::IReference<unsigned> DataLimitInMegabytes() const;
	Windows::Foundation::IReference<unsigned long long> InboundBitsPerSecond() const;
	Windows::Foundation::IReference<unsigned long long> OutboundBitsPerSecond() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> NextBillingCycle() const;
	Windows::Foundation::IReference<unsigned> MaxTransferSizeInMegabytes() const;
};

template <typename T>
struct impl_IConnectionCost
{
	Windows::Networking::Connectivity::NetworkCostType NetworkCostType() const;
	bool Roaming() const;
	bool OverDataLimit() const;
	bool ApproachingDataLimit() const;
};

template <typename T>
struct impl_INetworkSecuritySettings
{
	Windows::Networking::Connectivity::NetworkAuthenticationType NetworkAuthenticationType() const;
	Windows::Networking::Connectivity::NetworkEncryptionType NetworkEncryptionType() const;
};

template <typename T>
struct impl_IConnectionProfile
{
	String ProfileName() const;
	Windows::Networking::Connectivity::NetworkConnectivityLevel GetNetworkConnectivityLevel() const;
	Windows::Foundation::Collections::IVectorView<String> GetNetworkNames() const;
	Windows::Networking::Connectivity::ConnectionCost GetConnectionCost() const;
	Windows::Networking::Connectivity::DataPlanStatus GetDataPlanStatus() const;
	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Networking::Connectivity::NetworkSecuritySettings NetworkSecuritySettings() const;
};

template <typename T>
struct impl_IWwanConnectionProfileDetails
{
	String HomeProviderId() const;
	String AccessPointName() const;
	Windows::Networking::Connectivity::WwanNetworkRegistrationState GetNetworkRegistrationState() const;
	Windows::Networking::Connectivity::WwanDataClass GetCurrentDataClass() const;
};

template <typename T>
struct impl_IWlanConnectionProfileDetails
{
	String GetConnectedSsid() const;
};

template <typename T>
struct impl_IConnectivityInterval
{
	Windows::Foundation::DateTime StartTime() const;
	Windows::Foundation::TimeSpan ConnectionDuration() const;
};

template <typename T>
struct impl_INetworkUsage
{
	unsigned long long BytesSent() const;
	unsigned long long BytesReceived() const;
	Windows::Foundation::TimeSpan ConnectionDuration() const;
};

template <typename T>
struct impl_IConnectionProfile2
{
	bool IsWwanConnectionProfile() const;
	bool IsWlanConnectionProfile() const;
	Windows::Networking::Connectivity::WwanConnectionProfileDetails WwanConnectionProfileDetails() const;
	Windows::Networking::Connectivity::WlanConnectionProfileDetails WlanConnectionProfileDetails() const;
	Windows::Foundation::IReference<GUID> ServiceProviderGuid() const;
	Windows::Foundation::IReference<byte> GetSignalBars() const;
	Windows::Networking::Connectivity::DomainConnectivityLevel GetDomainConnectivityLevel() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage>> GetNetworkUsageAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::DataUsageGranularity granularity, Windows::Networking::Connectivity::NetworkUsageStates const & states) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval>> GetConnectivityIntervalsAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::NetworkUsageStates const & states) const;
};

template <typename T>
struct impl_ILanIdentifierData
{
	unsigned Type() const;
	Windows::Foundation::Collections::IVectorView<byte> Value() const;
};

template <typename T>
struct impl_ILanIdentifier
{
	Windows::Networking::Connectivity::LanIdentifierData InfrastructureId() const;
	Windows::Networking::Connectivity::LanIdentifierData PortId() const;
	GUID NetworkAdapterId() const;
};

template <typename T>
struct impl_INetworkInformationStatics
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> GetConnectionProfiles() const;
	Windows::Networking::Connectivity::ConnectionProfile GetInternetConnectionProfile() const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> GetLanIdentifiers() const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> GetHostNames() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions sortOptions) const;
	EventRegistrationToken NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler) const;
	template <typename F> EventRegistrationToken NetworkStatusChanged(F networkStatusHandler) const;
	void NetworkStatusChanged(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IConnectionProfileFilter
{
	void IsConnected(bool value) const;
	bool IsConnected() const;
	void IsWwanConnectionProfile(bool value) const;
	bool IsWwanConnectionProfile() const;
	void IsWlanConnectionProfile(bool value) const;
	bool IsWlanConnectionProfile() const;
	void NetworkCostType(Windows::Networking::Connectivity::NetworkCostType value) const;
	Windows::Networking::Connectivity::NetworkCostType NetworkCostType() const;
	void ServiceProviderGuid(Windows::Foundation::IReference<GUID> const & value) const;
	Windows::Foundation::IReference<GUID> ServiceProviderGuid() const;
};

template <typename T>
struct impl_INetworkInformationStatics2
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter) const;
};

template <typename T>
struct impl_INetworkItem
{
	GUID NetworkId() const;
	Windows::Networking::Connectivity::NetworkTypes GetNetworkTypes() const;
};

template <typename T>
struct impl_INetworkAdapter
{
	unsigned long long OutboundMaxBitsPerSecond() const;
	unsigned long long InboundMaxBitsPerSecond() const;
	unsigned IanaInterfaceType() const;
	Windows::Networking::Connectivity::NetworkItem NetworkItem() const;
	GUID NetworkAdapterId() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile> GetConnectedProfileAsync() const;
};

template <typename T>
struct impl_IIPInformation
{
	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Foundation::IReference<byte> PrefixLength() const;
};

template <typename T>
struct impl_IProxyConfiguration
{
	Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> ProxyUris() const;
	bool CanConnectDirectly() const;
};

template <typename T>
struct impl_IConnectionSession
{
	Windows::Networking::Connectivity::ConnectionProfile ConnectionProfile() const;
};

template <typename T>
struct impl_IRoutePolicy
{
	Windows::Networking::Connectivity::ConnectionProfile ConnectionProfile() const;
	Windows::Networking::HostName HostName() const;
	Windows::Networking::DomainNameType HostNameType() const;
};

template <typename T>
struct impl_IRoutePolicyFactory
{
	Windows::Networking::Connectivity::RoutePolicy CreateRoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType type) const;
};

template <typename T>
struct impl_ICellularApnContext
{
	String ProviderId() const;
	void ProviderId(String const & value) const;
	template <unsigned S0> void ProviderId(wchar_t const (&value)[S0]) const;
	String AccessPointName() const;
	void AccessPointName(String const & value) const;
	template <unsigned S0> void AccessPointName(wchar_t const (&value)[S0]) const;
	String UserName() const;
	void UserName(String const & value) const;
	template <unsigned S0> void UserName(wchar_t const (&value)[S0]) const;
	String Password() const;
	void Password(String const & value) const;
	template <unsigned S0> void Password(wchar_t const (&value)[S0]) const;
	bool IsCompressionEnabled() const;
	void IsCompressionEnabled(bool value) const;
	Windows::Networking::Connectivity::CellularApnAuthenticationType AuthenticationType() const;
	void AuthenticationType(Windows::Networking::Connectivity::CellularApnAuthenticationType value) const;
};

template <typename T>
struct impl_IConnectivityManagerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext) const;
	void AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const;
	void RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const;
};

template <typename T>
struct impl_INetworkStateChangeEventDetails
{
	bool HasNewInternetConnectionProfile() const;
	bool HasNewConnectionCost() const;
	bool HasNewNetworkConnectivityLevel() const;
	bool HasNewDomainConnectivityLevel() const;
	bool HasNewHostNameList() const;
	bool HasNewWwanRegistrationState() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

template <typename T>
struct impl_IMobileBroadbandAccountStatics
{
	Windows::Foundation::Collections::IVectorView<String> AvailableNetworkAccountIds() const;
	Windows::Networking::NetworkOperators::MobileBroadbandAccount CreateFromNetworkAccountId(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::MobileBroadbandAccount CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_IMobileBroadbandAccount
{
	String NetworkAccountId() const;
	GUID ServiceProviderGuid() const;
	String ServiceProviderName() const;
	Windows::Networking::NetworkOperators::MobileBroadbandNetwork CurrentNetwork() const;
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation CurrentDeviceInformation() const;
};

template <typename T>
struct impl_IMobileBroadbandAccount2
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> GetConnectionProfiles() const;
};

template <typename T>
struct impl_IMobileBroadbandDeviceInformation
{
	Windows::Networking::NetworkOperators::NetworkDeviceStatus NetworkDeviceStatus() const;
	String Manufacturer() const;
	String Model() const;
	String FirmwareInformation() const;
	Windows::Devices::Sms::CellularClass CellularClass() const;
	Windows::Networking::NetworkOperators::DataClasses DataClasses() const;
	String CustomDataClass() const;
	String MobileEquipmentId() const;
	Windows::Foundation::Collections::IVectorView<String> TelephoneNumbers() const;
	String SubscriberId() const;
	String SimIccId() const;
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceType DeviceType() const;
	String DeviceId() const;
	Windows::Networking::NetworkOperators::MobileBroadbandRadioState CurrentRadioState() const;
};

template <typename T>
struct impl_IMobileBroadbandNetwork
{
	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Networking::NetworkOperators::NetworkRegistrationState NetworkRegistrationState() const;
	unsigned RegistrationNetworkError() const;
	unsigned PacketAttachNetworkError() const;
	unsigned ActivationNetworkError() const;
	String AccessPointName() const;
	Windows::Networking::NetworkOperators::DataClasses RegisteredDataClass() const;
	String RegisteredProviderId() const;
	String RegisteredProviderName() const;
	void ShowConnectionUI() const;
};

template <typename T>
struct impl_INetworkOperatorNotificationEventDetails
{
	Windows::Networking::NetworkOperators::NetworkOperatorEventMessageType NotificationType() const;
	String NetworkAccountId() const;
	byte EncodingType() const;
	String Message() const;
	String RuleId() const;
	Windows::Devices::Sms::ISmsMessage SmsMessage() const;
};

template <typename T>
struct impl_INetworkOperatorTetheringEntitlementCheck
{
	void AuthorizeTethering(bool allow, String const & entitlementFailureReason) const;
	template <unsigned S0> void AuthorizeTethering(bool allow, wchar_t const (&entitlementFailureReason)[S0]) const;
};

template <typename T>
struct impl_INetworkOperatorTetheringAccessPointConfiguration
{
	String Ssid() const;
	void Ssid(String const & value) const;
	template <unsigned S0> void Ssid(wchar_t const (&value)[S0]) const;
	String Passphrase() const;
	void Passphrase(String const & value) const;
	template <unsigned S0> void Passphrase(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_INetworkOperatorTetheringOperationResult
{
	Windows::Networking::NetworkOperators::TetheringOperationStatus Status() const;
	String AdditionalErrorMessage() const;
};

template <typename T>
struct impl_INetworkOperatorTetheringManagerStatics
{
	Windows::Networking::NetworkOperators::TetheringCapability GetTetheringCapability(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::TetheringCapability GetTetheringCapability(wchar_t const (&networkAccountId)[S0]) const;
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager CreateFromNetworkAccountId(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_INetworkOperatorTetheringManager
{
	unsigned MaxClientCount() const;
	unsigned ClientCount() const;
	Windows::Networking::NetworkOperators::TetheringOperationalState TetheringOperationalState() const;
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration GetCurrentAccessPointConfiguration() const;
	Windows::Foundation::IAsyncAction ConfigureAccessPointAsync(Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration const & configuration) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> StartTetheringAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> StopTetheringAsync() const;
};

template <typename T>
struct impl_IMobileBroadbandAccountEventArgs
{
	String NetworkAccountId() const;
};

template <typename T>
struct impl_IMobileBroadbandAccountUpdatedEventArgs
{
	String NetworkAccountId() const;
	bool HasDeviceInformationChanged() const;
	bool HasNetworkChanged() const;
};

template <typename T>
struct impl_IMobileBroadbandAccountWatcher
{
	EventRegistrationToken AccountAdded(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccountAdded(F handler) const;
	void AccountAdded(EventRegistrationToken cookie) const;
	EventRegistrationToken AccountUpdated(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccountUpdated(F handler) const;
	void AccountUpdated(EventRegistrationToken cookie) const;
	EventRegistrationToken AccountRemoved(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccountRemoved(F handler) const;
	void AccountRemoved(EventRegistrationToken cookie) const;
	EventRegistrationToken EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken EnumerationCompleted(F handler) const;
	void EnumerationCompleted(EventRegistrationToken cookie) const;
	EventRegistrationToken Stopped(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Stopped(F handler) const;
	void Stopped(EventRegistrationToken cookie) const;
	Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
};

template <typename T>
struct impl_IHotspotAuthenticationEventDetails
{
	String EventToken() const;
};

template <typename T>
struct impl_IHotspotAuthenticationContextStatics
{
	bool TryGetAuthenticationContext(String const & evenToken, Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context) const;
	template <unsigned S0> bool TryGetAuthenticationContext(wchar_t const (&evenToken)[S0], Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context) const;
};

template <typename T>
struct impl_IHotspotAuthenticationContext
{
	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Foundation::Uri RedirectMessageUrl() const;
	Windows::Data::Xml::Dom::XmlDocument RedirectMessageXml() const;
	Windows::Foundation::Uri AuthenticationUrl() const;
	void IssueCredentials(String const & userName, String const & password, String const & extraParameters, bool markAsManualConnectOnFailure) const;
	template <unsigned S0, unsigned S1, unsigned S2> void IssueCredentials(wchar_t const (&userName)[S0], wchar_t const (&password)[S1], wchar_t const (&extraParameters)[S2], bool markAsManualConnectOnFailure) const;
	void AbortAuthentication(bool markAsManual) const;
	void SkipAuthentication() const;
	void TriggerAttentionRequired(String const & packageRelativeApplicationId, String const & applicationParameters) const;
	template <unsigned S0, unsigned S1> void TriggerAttentionRequired(wchar_t const (&packageRelativeApplicationId)[S0], wchar_t const (&applicationParameters)[S1]) const;
};

template <typename T>
struct impl_IHotspotCredentialsAuthenticationResult
{
	bool HasNetworkErrorOccurred() const;
	Windows::Networking::NetworkOperators::HotspotAuthenticationResponseCode ResponseCode() const;
	Windows::Foundation::Uri LogoffUrl() const;
	Windows::Data::Xml::Dom::XmlDocument AuthenticationReplyXml() const;
};

template <typename T>
struct impl_IHotspotAuthenticationContext2
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> IssueCredentialsAsync(String const & userName, String const & password, String const & extraParameters, bool markAsManualConnectOnFailure) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> IssueCredentialsAsync(wchar_t const (&userName)[S0], wchar_t const (&password)[S1], wchar_t const (&extraParameters)[S2], bool markAsManualConnectOnFailure) const;
};

template <typename T>
struct impl_IProvisionFromXmlDocumentResults
{
	bool AllElementsProvisioned() const;
	String ProvisionResultsXml() const;
};

template <typename T>
struct impl_IProvisionedProfile
{
	void UpdateCost(Windows::Networking::Connectivity::NetworkCostType value) const;
	void UpdateUsage(Windows::Networking::NetworkOperators::ProfileUsage const & value) const;
};

template <typename T>
struct impl_IProvisioningAgent
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> ProvisionFromXmlDocumentAsync(String const & provisioningXmlDocument) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> ProvisionFromXmlDocumentAsync(wchar_t const (&provisioningXmlDocument)[S0]) const;
	Windows::Networking::NetworkOperators::ProvisionedProfile GetProvisionedProfile(Windows::Networking::NetworkOperators::ProfileMediaType mediaType, String const & profileName) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::ProvisionedProfile GetProvisionedProfile(Windows::Networking::NetworkOperators::ProfileMediaType mediaType, wchar_t const (&profileName)[S0]) const;
};

template <typename T>
struct impl_IProvisioningAgentStaticMethods
{
	Windows::Networking::NetworkOperators::ProvisioningAgent CreateFromNetworkAccountId(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::ProvisioningAgent CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_IUssdMessage
{
	byte DataCodingScheme() const;
	void DataCodingScheme(byte value) const;
	String PayloadAsText() const;
	void PayloadAsText(String const & value) const;
	template <unsigned S0> void PayloadAsText(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IUssdMessageFactory
{
	Windows::Networking::NetworkOperators::UssdMessage CreateMessage(String const & messageText) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::UssdMessage CreateMessage(wchar_t const (&messageText)[S0]) const;
};

template <typename T>
struct impl_IUssdReply
{
	Windows::Networking::NetworkOperators::UssdResultCode ResultCode() const;
	Windows::Networking::NetworkOperators::UssdMessage Message() const;
};

template <typename T>
struct impl_IUssdSession
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::UssdReply> SendMessageAndGetReplyAsync(Windows::Networking::NetworkOperators::UssdMessage const & message) const;
	void Close() const;
};

template <typename T>
struct impl_IUssdSessionStatics
{
	Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkAccountId(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const;
	Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkInterfaceId(String const & networkInterfaceId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkInterfaceId(wchar_t const (&networkInterfaceId)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

template <typename T>
struct impl_IMessageReceivedHandler
{
	void Invoke(Windows::Networking::Proximity::ProximityDevice const & sender, Windows::Networking::Proximity::ProximityMessage const & message) const;
};

template <typename T>
struct impl_IMessageTransmittedHandler
{
	void Invoke(Windows::Networking::Proximity::ProximityDevice const & sender, long long messageId) const;
};

template <typename T>
struct impl_IDeviceArrivedEventHandler
{
	void Invoke(Windows::Networking::Proximity::ProximityDevice const & sender) const;
};

template <typename T>
struct impl_IDeviceDepartedEventHandler
{
	void Invoke(Windows::Networking::Proximity::ProximityDevice const & sender) const;
};

template <typename T>
struct impl_IProximityMessage
{
	String MessageType() const;
	long long SubscriptionId() const;
	Windows::Storage::Streams::IBuffer Data() const;
	String DataAsString() const;
};

template <typename T>
struct impl_IProximityDevice
{
	long long SubscribeForMessage(String const & messageType, Windows::Networking::Proximity::IMessageReceivedHandler const & messageReceivedHandler) const;
	template <unsigned S0> long long SubscribeForMessage(wchar_t const (&messageType)[S0], Windows::Networking::Proximity::IMessageReceivedHandler const & messageReceivedHandler) const;
	template <typename F> long long SubscribeForMessage(String const & messageType, F messageReceivedHandler) const;
	template <unsigned S0, typename F> long long SubscribeForMessage(wchar_t const (&messageType)[S0], F messageReceivedHandler) const;
	long long PublishMessage(String const & messageType, String const & message) const;
	template <unsigned S0, unsigned S1> long long PublishMessage(wchar_t const (&messageType)[S0], wchar_t const (&message)[S1]) const;
	long long PublishMessage(String const & messageType, String const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <unsigned S0, unsigned S1> long long PublishMessage(wchar_t const (&messageType)[S0], wchar_t const (&message)[S1], Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <typename F> long long PublishMessage(String const & messageType, String const & message, F messageTransmittedHandler) const;
	template <unsigned S0, unsigned S1, typename F> long long PublishMessage(wchar_t const (&messageType)[S0], wchar_t const (&message)[S1], F messageTransmittedHandler) const;
	long long PublishBinaryMessage(String const & messageType, Windows::Storage::Streams::IBuffer const & message) const;
	template <unsigned S0> long long PublishBinaryMessage(wchar_t const (&messageType)[S0], Windows::Storage::Streams::IBuffer const & message) const;
	long long PublishBinaryMessage(String const & messageType, Windows::Storage::Streams::IBuffer const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <unsigned S0> long long PublishBinaryMessage(wchar_t const (&messageType)[S0], Windows::Storage::Streams::IBuffer const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <typename F> long long PublishBinaryMessage(String const & messageType, Windows::Storage::Streams::IBuffer const & message, F messageTransmittedHandler) const;
	template <unsigned S0, typename F> long long PublishBinaryMessage(wchar_t const (&messageType)[S0], Windows::Storage::Streams::IBuffer const & message, F messageTransmittedHandler) const;
	long long PublishUriMessage(Windows::Foundation::Uri const & message) const;
	long long PublishUriMessage(Windows::Foundation::Uri const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <typename F> long long PublishUriMessage(Windows::Foundation::Uri const & message, F messageTransmittedHandler) const;
	void StopSubscribingForMessage(long long subscriptionId) const;
	void StopPublishingMessage(long long messageId) const;
	EventRegistrationToken DeviceArrived(Windows::Networking::Proximity::IDeviceArrivedEventHandler const & arrivedHandler) const;
	template <typename F> EventRegistrationToken DeviceArrived(F arrivedHandler) const;
	void DeviceArrived(EventRegistrationToken cookie) const;
	EventRegistrationToken DeviceDeparted(Windows::Networking::Proximity::IDeviceDepartedEventHandler const & departedHandler) const;
	template <typename F> EventRegistrationToken DeviceDeparted(F departedHandler) const;
	void DeviceDeparted(EventRegistrationToken cookie) const;
	unsigned MaxMessageBytes() const;
	unsigned long long BitsPerSecond() const;
	String DeviceId() const;
};

template <typename T>
struct impl_IProximityDeviceStatics
{
	String GetDeviceSelector() const;
	Windows::Networking::Proximity::ProximityDevice GetDefault() const;
	Windows::Networking::Proximity::ProximityDevice FromId(String const & deviceId) const;
	template <unsigned S0> Windows::Networking::Proximity::ProximityDevice FromId(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_ITriggeredConnectionStateChangedEventArgs
{
	Windows::Networking::Proximity::TriggeredConnectState State() const;
	unsigned Id() const;
	Windows::Networking::Sockets::StreamSocket Socket() const;
};

template <typename T>
struct impl_IPeerInformation
{
	String DisplayName() const;
};

template <typename T>
struct impl_IPeerInformation3
{
	String Id() const;
	Windows::Storage::Streams::IBuffer DiscoveryData() const;
};

template <typename T>
struct impl_IConnectionRequestedEventArgs
{
	Windows::Networking::Proximity::PeerInformation PeerInformation() const;
};

template <typename T>
struct impl_IPeerWatcher
{
	EventRegistrationToken Added(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const;
	template <typename F> EventRegistrationToken Added(F handler) const;
	void Added(EventRegistrationToken token) const;
	EventRegistrationToken Removed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const;
	template <typename F> EventRegistrationToken Removed(F handler) const;
	void Removed(EventRegistrationToken token) const;
	EventRegistrationToken Updated(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const;
	template <typename F> EventRegistrationToken Updated(F handler) const;
	void Updated(EventRegistrationToken token) const;
	EventRegistrationToken EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken EnumerationCompleted(F handler) const;
	void EnumerationCompleted(EventRegistrationToken token) const;
	EventRegistrationToken Stopped(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Stopped(F handler) const;
	void Stopped(EventRegistrationToken token) const;
	Windows::Networking::Proximity::PeerWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
};

template <typename T>
struct impl_IPeerFinderStatics
{
	bool AllowBluetooth() const;
	void AllowBluetooth(bool value) const;
	bool AllowInfrastructure() const;
	void AllowInfrastructure(bool value) const;
	bool AllowWiFiDirect() const;
	void AllowWiFiDirect(bool value) const;
	String DisplayName() const;
	void DisplayName(String const & value) const;
	template <unsigned S0> void DisplayName(wchar_t const (&value)[S0]) const;
	Windows::Networking::Proximity::PeerDiscoveryTypes SupportedDiscoveryTypes() const;
	Windows::Foundation::Collections::IMap<String, String> AlternateIdentities() const;
	void Start() const;
	void Start(String const & peerMessage) const;
	template <unsigned S0> void Start(wchar_t const (&peerMessage)[S0]) const;
	void Stop() const;
	EventRegistrationToken TriggeredConnectionStateChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TriggeredConnectionStateChanged(F handler) const;
	void TriggeredConnectionStateChanged(EventRegistrationToken cookie) const;
	EventRegistrationToken ConnectionRequested(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ConnectionRequested(F handler) const;
	void ConnectionRequested(EventRegistrationToken cookie) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> FindAllPeersAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> ConnectAsync(Windows::Networking::Proximity::PeerInformation const & peerInformation) const;
};

template <typename T>
struct impl_IPeerFinderStatics2
{
	Windows::Networking::Proximity::PeerRole Role() const;
	void Role(Windows::Networking::Proximity::PeerRole value) const;
	Windows::Storage::Streams::IBuffer DiscoveryData() const;
	void DiscoveryData(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Networking::Proximity::PeerWatcher CreateWatcher() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

template <typename T>
struct impl_IPushNotificationChannelManagerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(String const & applicationId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(wchar_t const (&applicationId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(String const & tileId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(wchar_t const (&tileId)[S0]) const;
};

template <typename T>
struct impl_IPushNotificationChannel
{
	String Uri() const;
	Windows::Foundation::DateTime ExpirationTime() const;
	void Close() const;
	EventRegistrationToken PushNotificationReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::PushNotifications::PushNotificationChannel, Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PushNotificationReceived(F handler) const;
	void PushNotificationReceived(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPushNotificationReceivedEventArgs
{
	void Cancel(bool value) const;
	bool Cancel() const;
	Windows::Networking::PushNotifications::PushNotificationType NotificationType() const;
	Windows::UI::Notifications::ToastNotification ToastNotification() const;
	Windows::UI::Notifications::TileNotification TileNotification() const;
	Windows::UI::Notifications::BadgeNotification BadgeNotification() const;
	Windows::Networking::PushNotifications::RawNotification RawNotification() const;
};

template <typename T>
struct impl_IRawNotification
{
	String Content() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

template <typename T>
struct impl_IControlChannelTrigger
{
	String ControlChannelTriggerId() const;
	unsigned ServerKeepAliveIntervalInMinutes() const;
	void ServerKeepAliveIntervalInMinutes(unsigned value) const;
	unsigned CurrentKeepAliveIntervalInMinutes() const;
	IInspectable TransportObject() const;
	Windows::ApplicationModel::Background::IBackgroundTrigger KeepAliveTrigger() const;
	Windows::ApplicationModel::Background::IBackgroundTrigger PushNotificationTrigger() const;
	void UsingTransport(IInspectable const & transport) const;
	Windows::Networking::Sockets::ControlChannelTriggerStatus WaitForPushEnabled() const;
	void DecreaseNetworkKeepAliveInterval() const;
	void FlushTransport() const;
};

template <typename T>
struct impl_IControlChannelTriggerFactory
{
	Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTrigger(String const & channelId, unsigned serverKeepAliveIntervalInMinutes) const;
	template <unsigned S0> Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned serverKeepAliveIntervalInMinutes) const;
	Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTrigger(String const & channelId, unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType) const;
	template <unsigned S0> Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType) const;
};

template <typename T>
struct impl_IControlChannelTriggerEventDetails
{
	Windows::Networking::Sockets::ControlChannelTrigger ControlChannelTrigger() const;
};

template <typename T>
struct impl_IControlChannelTriggerResetEventDetails
{
	Windows::Networking::Sockets::ControlChannelTriggerResetReason ResetReason() const;
	bool HardwareSlotReset() const;
	bool SoftwareSlotReset() const;
};

template <typename T>
struct impl_IDatagramSocketMessageReceivedEventArgs
{
	Windows::Networking::HostName RemoteAddress() const;
	String RemotePort() const;
	Windows::Networking::HostName LocalAddress() const;
	Windows::Storage::Streams::DataReader GetDataReader() const;
	Windows::Storage::Streams::IInputStream GetDataStream() const;
};

template <typename T>
struct impl_IMessageWebSocketMessageReceivedEventArgs
{
	Windows::Networking::Sockets::SocketMessageType MessageType() const;
	Windows::Storage::Streams::DataReader GetDataReader() const;
	Windows::Storage::Streams::IInputStream GetDataStream() const;
};

template <typename T>
struct impl_IWebSocketClosedEventArgs
{
	unsigned short Code() const;
	String Reason() const;
};

template <typename T>
struct impl_IDatagramSocketInformation
{
	Windows::Networking::HostName LocalAddress() const;
	String LocalPort() const;
	Windows::Networking::HostName RemoteAddress() const;
	String RemotePort() const;
};

template <typename T>
struct impl_IDatagramSocketControl
{
	Windows::Networking::Sockets::SocketQualityOfService QualityOfService() const;
	void QualityOfService(Windows::Networking::Sockets::SocketQualityOfService value) const;
	byte OutboundUnicastHopLimit() const;
	void OutboundUnicastHopLimit(byte value) const;
};

template <typename T>
struct impl_IDatagramSocketControl2
{
	unsigned InboundBufferSizeInBytes() const;
	void InboundBufferSizeInBytes(unsigned value) const;
	bool DontFragment() const;
	void DontFragment(bool value) const;
};

template <typename T>
struct impl_IDatagramSocketStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::HostNameSortOptions sortOptions) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::HostNameSortOptions sortOptions) const;
};

template <typename T>
struct impl_IDatagramSocket
{
	Windows::Networking::Sockets::DatagramSocketControl Control() const;
	Windows::Networking::Sockets::DatagramSocketInformation Information() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const;
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0]) const;
	Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, String const & localServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0]) const;
	void JoinMulticastGroup(Windows::Networking::HostName const & host) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> GetOutputStreamAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> GetOutputStreamAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> GetOutputStreamAsync(Windows::Networking::EndpointPair const & endpointPair) const;
	EventRegistrationToken MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::DatagramSocket, Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken MessageReceived(F eventHandler) const;
	void MessageReceived(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IDatagramSocket2
{
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0], Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
};

template <typename T>
struct impl_IStreamSocketInformation
{
	Windows::Networking::HostName LocalAddress() const;
	String LocalPort() const;
	Windows::Networking::HostName RemoteHostName() const;
	Windows::Networking::HostName RemoteAddress() const;
	String RemoteServiceName() const;
	String RemotePort() const;
	Windows::Networking::Sockets::RoundTripTimeStatistics RoundTripTimeStatistics() const;
	Windows::Networking::Sockets::BandwidthStatistics BandwidthStatistics() const;
	Windows::Networking::Sockets::SocketProtectionLevel ProtectionLevel() const;
	Windows::Storage::Streams::IBuffer SessionKey() const;
};

template <typename T>
struct impl_IStreamSocketInformation2
{
	Windows::Networking::Sockets::SocketSslErrorSeverity ServerCertificateErrorSeverity() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> ServerCertificateErrors() const;
	Windows::Security::Cryptography::Certificates::Certificate ServerCertificate() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> ServerIntermediateCertificates() const;
};

template <typename T>
struct impl_IStreamSocketControl
{
	bool NoDelay() const;
	void NoDelay(bool value) const;
	bool KeepAlive() const;
	void KeepAlive(bool value) const;
	unsigned OutboundBufferSizeInBytes() const;
	void OutboundBufferSizeInBytes(unsigned value) const;
	Windows::Networking::Sockets::SocketQualityOfService QualityOfService() const;
	void QualityOfService(Windows::Networking::Sockets::SocketQualityOfService value) const;
	byte OutboundUnicastHopLimit() const;
	void OutboundUnicastHopLimit(byte value) const;
};

template <typename T>
struct impl_IStreamSocketControl2
{
	Windows::Foundation::Collections::IVector<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> IgnorableServerCertificateErrors() const;
};

template <typename T>
struct impl_IStreamSocket
{
	Windows::Networking::Sockets::StreamSocketControl Control() const;
	Windows::Networking::Sockets::StreamSocketInformation Information() const;
	Windows::Storage::Streams::IInputStream InputStream() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::EndpointPair const & endpointPair, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	Windows::Foundation::IAsyncAction UpgradeToSslAsync(Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::HostName const & validationHostName) const;
};

template <typename T>
struct impl_IStreamSocket2
{
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
};

template <typename T>
struct impl_IStreamSocketListenerControl
{
	Windows::Networking::Sockets::SocketQualityOfService QualityOfService() const;
	void QualityOfService(Windows::Networking::Sockets::SocketQualityOfService value) const;
};

template <typename T>
struct impl_IStreamSocketListenerInformation
{
	String LocalPort() const;
};

template <typename T>
struct impl_IStreamSocketListenerConnectionReceivedEventArgs
{
	Windows::Networking::Sockets::StreamSocket Socket() const;
};

template <typename T>
struct impl_IStreamSocketListener
{
	Windows::Networking::Sockets::StreamSocketListenerControl Control() const;
	Windows::Networking::Sockets::StreamSocketListenerInformation Information() const;
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0]) const;
	Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, String const & localServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0]) const;
	EventRegistrationToken ConnectionReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::StreamSocketListener, Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken ConnectionReceived(F eventHandler) const;
	void ConnectionReceived(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IStreamSocketListener2
{
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
};

template <typename T>
struct impl_IWebSocketControl
{
	unsigned OutboundBufferSizeInBytes() const;
	void OutboundBufferSizeInBytes(unsigned value) const;
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Foundation::Collections::IVector<String> SupportedProtocols() const;
};

template <typename T>
struct impl_IWebSocketInformation
{
	Windows::Networking::HostName LocalAddress() const;
	Windows::Networking::Sockets::BandwidthStatistics BandwidthStatistics() const;
	String Protocol() const;
};

template <typename T>
struct impl_IWebSocket
{
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Foundation::Uri const & uri) const;
	void SetRequestHeader(String const & headerName, String const & headerValue) const;
	template <unsigned S0, unsigned S1> void SetRequestHeader(wchar_t const (&headerName)[S0], wchar_t const (&headerValue)[S1]) const;
	EventRegistrationToken Closed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::IWebSocket, Windows::Networking::Sockets::WebSocketClosedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken Closed(F eventHandler) const;
	void Closed(EventRegistrationToken eventCookie) const;
	void Close(unsigned short code, String const & reason) const;
	template <unsigned S0> void Close(unsigned short code, wchar_t const (&reason)[S0]) const;
};

template <typename T>
struct impl_IMessageWebSocketControl
{
	unsigned MaxMessageSize() const;
	void MaxMessageSize(unsigned value) const;
	Windows::Networking::Sockets::SocketMessageType MessageType() const;
	void MessageType(Windows::Networking::Sockets::SocketMessageType value) const;
};

template <typename T>
struct impl_IMessageWebSocket
{
	Windows::Networking::Sockets::MessageWebSocketControl Control() const;
	Windows::Networking::Sockets::MessageWebSocketInformation Information() const;
	EventRegistrationToken MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::MessageWebSocket, Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken MessageReceived(F eventHandler) const;
	void MessageReceived(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IStreamWebSocketControl
{
	bool NoDelay() const;
	void NoDelay(bool value) const;
};

template <typename T>
struct impl_IStreamWebSocket
{
	Windows::Networking::Sockets::StreamWebSocketControl Control() const;
	Windows::Networking::Sockets::StreamWebSocketInformation Information() const;
	Windows::Storage::Streams::IInputStream InputStream() const;
};

template <typename T>
struct impl_ISocketErrorStatics
{
	Windows::Networking::Sockets::SocketErrorStatus GetStatus(int hresult) const;
};

template <typename T>
struct impl_IWebSocketErrorStatics
{
	Windows::Web::WebErrorStatus GetStatus(int hresult) const;
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

template <typename T>
struct impl_IOnlineIdServiceTicketRequest
{
	String Service() const;
	String Policy() const;
};

template <typename T>
struct impl_IOnlineIdServiceTicketRequestFactory
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest CreateOnlineIdServiceTicketRequest(String const & service, String const & policy) const;
	template <unsigned S0, unsigned S1> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest CreateOnlineIdServiceTicketRequest(wchar_t const (&service)[S0], wchar_t const (&policy)[S1]) const;
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest CreateOnlineIdServiceTicketRequest(String const & service) const;
	template <unsigned S0> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest CreateOnlineIdServiceTicketRequest(wchar_t const (&service)[S0]) const;
};

template <typename T>
struct impl_IOnlineIdServiceTicket
{
	String Value() const;
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest Request() const;
	int ErrorCode() const;
};

template <typename T>
struct impl_IUserIdentity
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket> Tickets() const;
	String Id() const;
	String SafeCustomerId() const;
	String SignInName() const;
	String FirstName() const;
	String LastName() const;
	bool IsBetaAccount() const;
	bool IsConfirmedPC() const;
};

template <typename T>
struct impl_IOnlineIdAuthenticator
{
	Windows::Security::Authentication::OnlineId::UserAuthenticationOperation AuthenticateUserAsync(Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest const & request) const;
	Windows::Security::Authentication::OnlineId::UserAuthenticationOperation AuthenticateUserAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest> const & requests, Windows::Security::Authentication::OnlineId::CredentialPromptType credentialPromptType) const;
	Windows::Security::Authentication::OnlineId::SignOutUserOperation SignOutUserAsync() const;
	void ApplicationId(GUID value) const;
	GUID ApplicationId() const;
	bool CanSignOut() const;
	String AuthenticatedSafeCustomerId() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

template <typename T>
struct impl_IWebAuthenticationResult
{
	String ResponseData() const;
	Windows::Security::Authentication::Web::WebAuthenticationStatus ResponseStatus() const;
	unsigned ResponseErrorDetail() const;
};

template <typename T>
struct impl_IWebAuthenticationBrokerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri) const;
	Windows::Foundation::Uri GetCurrentApplicationCallbackUri() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

template <typename T>
struct impl_IPasswordCredential
{
	String Resource() const;
	void Resource(String const & resource) const;
	template <unsigned S0> void Resource(wchar_t const (&resource)[S0]) const;
	String UserName() const;
	void UserName(String const & userName) const;
	template <unsigned S0> void UserName(wchar_t const (&userName)[S0]) const;
	String Password() const;
	void Password(String const & password) const;
	template <unsigned S0> void Password(wchar_t const (&password)[S0]) const;
	void RetrievePassword() const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
};

template <typename T>
struct impl_ICredentialFactory
{
	Windows::Security::Credentials::PasswordCredential CreatePasswordCredential(String const & resource, String const & userName, String const & password) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Security::Credentials::PasswordCredential CreatePasswordCredential(wchar_t const (&resource)[S0], wchar_t const (&userName)[S1], wchar_t const (&password)[S2]) const;
};

template <typename T>
struct impl_IPasswordVault
{
	void Add(Windows::Security::Credentials::PasswordCredential const & credential) const;
	void Remove(Windows::Security::Credentials::PasswordCredential const & credential) const;
	Windows::Security::Credentials::PasswordCredential Retrieve(String const & resource, String const & userName) const;
	template <unsigned S0, unsigned S1> Windows::Security::Credentials::PasswordCredential Retrieve(wchar_t const (&resource)[S0], wchar_t const (&userName)[S1]) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByResource(String const & resource) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByResource(wchar_t const (&resource)[S0]) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByUserName(String const & userName) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByUserName(wchar_t const (&userName)[S0]) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> RetrieveAll() const;
};

template <typename T>
struct impl_IWebAccountProviderFactory
{
	Windows::Security::Credentials::WebAccountProvider CreateWebAccountProvider(String const & id, String const & displayName, Windows::Foundation::Uri const & iconUri) const;
	template <unsigned S0, unsigned S1> Windows::Security::Credentials::WebAccountProvider CreateWebAccountProvider(wchar_t const (&id)[S0], wchar_t const (&displayName)[S1], Windows::Foundation::Uri const & iconUri) const;
};

template <typename T>
struct impl_IWebAccountFactory
{
	Windows::Security::Credentials::WebAccount CreateWebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, String const & userName, Windows::Security::Credentials::WebAccountState state) const;
	template <unsigned S0> Windows::Security::Credentials::WebAccount CreateWebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, wchar_t const (&userName)[S0], Windows::Security::Credentials::WebAccountState state) const;
};

template <typename T>
struct impl_IWebAccountProvider
{
	String Id() const;
	String DisplayName() const;
	Windows::Foundation::Uri IconUri() const;
};

template <typename T>
struct impl_IWebAccount
{
	Windows::Security::Credentials::WebAccountProvider WebAccountProvider() const;
	String UserName() const;
	Windows::Security::Credentials::WebAccountState State() const;
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

template <typename T>
struct impl_IUserConsentVerifierStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> CheckAvailabilityAsync() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> RequestVerificationAsync(String const & message) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> RequestVerificationAsync(wchar_t const (&message)[S0]) const;
};

template <typename T>
struct impl_ICredentialPickerOptions
{
	void Caption(String const & value) const;
	template <unsigned S0> void Caption(wchar_t const (&value)[S0]) const;
	String Caption() const;
	void Message(String const & value) const;
	template <unsigned S0> void Message(wchar_t const (&value)[S0]) const;
	String Message() const;
	void ErrorCode(unsigned value) const;
	unsigned ErrorCode() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
	String TargetName() const;
	void AuthenticationProtocol(Windows::Security::Credentials::UI::AuthenticationProtocol value) const;
	Windows::Security::Credentials::UI::AuthenticationProtocol AuthenticationProtocol() const;
	void CustomAuthenticationProtocol(String const & value) const;
	template <unsigned S0> void CustomAuthenticationProtocol(wchar_t const (&value)[S0]) const;
	String CustomAuthenticationProtocol() const;
	void PreviousCredential(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Storage::Streams::IBuffer PreviousCredential() const;
	void AlwaysDisplayDialog(bool value) const;
	bool AlwaysDisplayDialog() const;
	void CallerSavesCredential(bool value) const;
	bool CallerSavesCredential() const;
	void CredentialSaveOption(Windows::Security::Credentials::UI::CredentialSaveOption value) const;
	Windows::Security::Credentials::UI::CredentialSaveOption CredentialSaveOption() const;
};

template <typename T>
struct impl_ICredentialPickerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(Windows::Security::Credentials::UI::CredentialPickerOptions const & options) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(String const & targetName, String const & message) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1]) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(String const & targetName, String const & message, String const & caption) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1], wchar_t const (&caption)[S2]) const;
};

template <typename T>
struct impl_ICredentialPickerResults
{
	unsigned ErrorCode() const;
	Windows::Security::Credentials::UI::CredentialSaveOption CredentialSaveOption() const;
	bool CredentialSaved() const;
	Windows::Storage::Streams::IBuffer Credential() const;
	String CredentialDomainName() const;
	String CredentialUserName() const;
	String CredentialPassword() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

template <typename T>
struct impl_ICryptographicBufferStatics
{
	bool Compare(Windows::Storage::Streams::IBuffer const & object1, Windows::Storage::Streams::IBuffer const & object2) const;
	Windows::Storage::Streams::IBuffer GenerateRandom(unsigned length) const;
	unsigned GenerateRandomNumber() const;
	Windows::Storage::Streams::IBuffer DecodeFromHexString(String const & value) const;
	template <unsigned S0> Windows::Storage::Streams::IBuffer DecodeFromHexString(wchar_t const (&value)[S0]) const;
	String EncodeToHexString(Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Storage::Streams::IBuffer DecodeFromBase64String(String const & value) const;
	template <unsigned S0> Windows::Storage::Streams::IBuffer DecodeFromBase64String(wchar_t const (&value)[S0]) const;
	String EncodeToBase64String(Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Storage::Streams::IBuffer ConvertStringToBinary(String const & value, Windows::Security::Cryptography::BinaryStringEncoding encoding) const;
	template <unsigned S0> Windows::Storage::Streams::IBuffer ConvertStringToBinary(wchar_t const (&value)[S0], Windows::Security::Cryptography::BinaryStringEncoding encoding) const;
	String ConvertBinaryToString(Windows::Security::Cryptography::BinaryStringEncoding encoding, Windows::Storage::Streams::IBuffer const & buffer) const;
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

template <typename T>
struct impl_ICertificateRequestProperties
{
	String Subject() const;
	void Subject(String const & value) const;
	template <unsigned S0> void Subject(wchar_t const (&value)[S0]) const;
	String KeyAlgorithmName() const;
	void KeyAlgorithmName(String const & value) const;
	template <unsigned S0> void KeyAlgorithmName(wchar_t const (&value)[S0]) const;
	unsigned KeySize() const;
	void KeySize(unsigned value) const;
	String FriendlyName() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	String HashAlgorithmName() const;
	void HashAlgorithmName(String const & value) const;
	template <unsigned S0> void HashAlgorithmName(wchar_t const (&value)[S0]) const;
	Windows::Security::Cryptography::Certificates::ExportOption Exportable() const;
	void Exportable(Windows::Security::Cryptography::Certificates::ExportOption value) const;
	Windows::Security::Cryptography::Certificates::EnrollKeyUsages KeyUsages() const;
	void KeyUsages(Windows::Security::Cryptography::Certificates::EnrollKeyUsages value) const;
	Windows::Security::Cryptography::Certificates::KeyProtectionLevel KeyProtectionLevel() const;
	void KeyProtectionLevel(Windows::Security::Cryptography::Certificates::KeyProtectionLevel value) const;
	String KeyStorageProviderName() const;
	void KeyStorageProviderName(String const & value) const;
	template <unsigned S0> void KeyStorageProviderName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ICertificateRequestProperties2
{
	String SmartcardReaderName() const;
	void SmartcardReaderName(String const & value) const;
	template <unsigned S0> void SmartcardReaderName(wchar_t const (&value)[S0]) const;
	Windows::Security::Cryptography::Certificates::Certificate SigningCertificate() const;
	void SigningCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
	Windows::Security::Cryptography::Certificates::Certificate AttestationCredentialCertificate() const;
	void AttestationCredentialCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
};

template <typename T>
struct impl_ICertificateEnrollmentManagerStatics
{
	Windows::Foundation::IAsyncOperation<String> CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const;
	Windows::Foundation::IAsyncAction InstallCertificateAsync(String const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction InstallCertificateAsync(wchar_t const (&certificate)[S0], Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2]) const;
};

template <typename T>
struct impl_ICertificateEnrollmentManagerStatics2
{
	Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager UserCertificateEnrollmentManager() const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName, String const & keyStorageProvider) const;
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2], wchar_t const (&keyStorageProvider)[S3]) const;
};

template <typename T>
struct impl_IKeyAttestationHelperStatics
{
	Windows::Foundation::IAsyncOperation<String> DecryptTpmAttestationCredentialAsync(String const & credential) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> DecryptTpmAttestationCredentialAsync(wchar_t const (&credential)[S0]) const;
	String GetTpmAttestationCredentialId(String const & credential) const;
	template <unsigned S0> String GetTpmAttestationCredentialId(wchar_t const (&credential)[S0]) const;
};

template <typename T>
struct impl_ICertificateStoresStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query) const;
	Windows::Security::Cryptography::Certificates::CertificateStore TrustedRootCertificationAuthorities() const;
	Windows::Security::Cryptography::Certificates::CertificateStore IntermediateCertificationAuthorities() const;
	Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(String const & storeName) const;
	template <unsigned S0> Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(wchar_t const (&storeName)[S0]) const;
};

template <typename T>
struct impl_IUserCertificateEnrollmentManager
{
	Windows::Foundation::IAsyncOperation<String> CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const;
	Windows::Foundation::IAsyncAction InstallCertificateAsync(String const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction InstallCertificateAsync(wchar_t const (&certificate)[S0], Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2]) const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName, String const & keyStorageProvider) const;
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2], wchar_t const (&keyStorageProvider)[S3]) const;
};

template <typename T>
struct impl_ICertificateStore
{
	void Add(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const;
	void Delete(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const;
};

template <typename T>
struct impl_IKeyAlgorithmNamesStatics
{
	String Rsa() const;
	String Dsa() const;
	String Ecdh256() const;
	String Ecdh384() const;
	String Ecdh521() const;
	String Ecdsa256() const;
	String Ecdsa384() const;
	String Ecdsa521() const;
};

template <typename T>
struct impl_IKeyStorageProviderNamesStatics
{
	String SoftwareKeyStorageProvider() const;
	String SmartcardKeyStorageProvider() const;
	String PlatformKeyStorageProvider() const;
};

template <typename T>
struct impl_IChainBuildingParameters
{
	Windows::Foundation::Collections::IVector<String> EnhancedKeyUsages() const;
	Windows::Foundation::DateTime ValidationTimestamp() const;
	void ValidationTimestamp(Windows::Foundation::DateTime const & value) const;
	bool RevocationCheckEnabled() const;
	void RevocationCheckEnabled(bool value) const;
	bool NetworkRetrievalEnabled() const;
	void NetworkRetrievalEnabled(bool value) const;
	bool AuthorityInformationAccessEnabled() const;
	void AuthorityInformationAccessEnabled(bool value) const;
	bool CurrentTimeValidationEnabled() const;
	void CurrentTimeValidationEnabled(bool value) const;
	Windows::Foundation::Collections::IVector<Windows::Security::Cryptography::Certificates::Certificate> ExclusiveTrustRoots() const;
};

template <typename T>
struct impl_IChainValidationParameters
{
	Windows::Security::Cryptography::Certificates::CertificateChainPolicy CertificateChainPolicy() const;
	void CertificateChainPolicy(Windows::Security::Cryptography::Certificates::CertificateChainPolicy value) const;
	Windows::Networking::HostName ServerDnsName() const;
	void ServerDnsName(Windows::Networking::HostName const & value) const;
};

template <typename T>
struct impl_ICertificateQuery
{
	Windows::Foundation::Collections::IVector<String> EnhancedKeyUsages() const;
	String IssuerName() const;
	void IssuerName(String const & value) const;
	template <unsigned S0> void IssuerName(wchar_t const (&value)[S0]) const;
	String FriendlyName() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	bool HardwareOnly() const;
	void HardwareOnly(bool value) const;
};

template <typename T>
struct impl_ICertificateChain
{
	Windows::Security::Cryptography::Certificates::ChainValidationResult Validate() const;
	Windows::Security::Cryptography::Certificates::ChainValidationResult Validate(Windows::Security::Cryptography::Certificates::ChainValidationParameters const & parameter) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> GetCertificates(bool includeRoot) const;
};

template <typename T>
struct impl_ICertificate
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates, Windows::Security::Cryptography::Certificates::ChainBuildingParameters const & parameters) const;
	Windows::Storage::Streams::IBuffer GetCertificateBlob() const;
	String Subject() const;
	String Issuer() const;
	bool HasPrivateKey() const;
	bool IsStronglyProtected() const;
	Windows::Foundation::DateTime ValidFrom() const;
	Windows::Foundation::DateTime ValidTo() const;
	Windows::Foundation::Collections::IVectorView<String> EnhancedKeyUsages() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	String FriendlyName() const;
};

template <typename T>
struct impl_ICertificateFactory
{
	Windows::Security::Cryptography::Certificates::Certificate CreateCertificate(Windows::Storage::Streams::IBuffer const & certBlob) const;
};

template <typename T>
struct impl_ICmsTimestampInfo
{
	Windows::Security::Cryptography::Certificates::Certificate SigningCertificate() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> Certificates() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
struct impl_ICmsSignerInfo
{
	Windows::Security::Cryptography::Certificates::Certificate Certificate() const;
	void Certificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
	String HashAlgorithmName() const;
	void HashAlgorithmName(String const & value) const;
	template <unsigned S0> void HashAlgorithmName(wchar_t const (&value)[S0]) const;
	Windows::Security::Cryptography::Certificates::CmsTimestampInfo TimestampInfo() const;
};

template <typename T>
struct impl_ICmsAttachedSignature
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> Certificates() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> Signers() const;
	Windows::Security::Cryptography::Certificates::SignatureValidationResult VerifySignature() const;
};

template <typename T>
struct impl_ICmsAttachedSignatureFactory
{
	Windows::Security::Cryptography::Certificates::CmsAttachedSignature CreateCmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const;
};

template <typename T>
struct impl_ICmsAttachedSignatureStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const;
};

template <typename T>
struct impl_ICmsDetachedSignature
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> Certificates() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> Signers() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Cryptography::Certificates::SignatureValidationResult> VerifySignatureAsync(Windows::Storage::Streams::IInputStream const & data) const;
};

template <typename T>
struct impl_ICmsDetachedSignatureFactory
{
	Windows::Security::Cryptography::Certificates::CmsDetachedSignature CreateCmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const;
};

template <typename T>
struct impl_ICmsDetachedSignatureStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

template <typename T>
struct impl_IKeyDerivationParameters
{
	Windows::Storage::Streams::IBuffer KdfGenericBinary() const;
	void KdfGenericBinary(Windows::Storage::Streams::IBuffer const & value) const;
	unsigned IterationCount() const;
};

template <typename T>
struct impl_IKeyDerivationParametersStatics
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned iterationCount) const;
	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context) const;
	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo) const;
};

template <typename T>
struct impl_ICryptographicKey
{
	unsigned KeySize() const;
	Windows::Storage::Streams::IBuffer Export() const;
	Windows::Storage::Streams::IBuffer Export(Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType BlobType) const;
	Windows::Storage::Streams::IBuffer ExportPublicKey() const;
	Windows::Storage::Streams::IBuffer ExportPublicKey(Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType BlobType) const;
};

template <typename T>
struct impl_IHashComputation
{
	void Append(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Storage::Streams::IBuffer GetValueAndReset() const;
};

template <typename T>
struct impl_IHashAlgorithmProvider
{
	String AlgorithmName() const;
	unsigned HashLength() const;
	Windows::Storage::Streams::IBuffer HashData(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Security::Cryptography::Core::CryptographicHash CreateHash() const;
};

template <typename T>
struct impl_IMacAlgorithmProvider
{
	String AlgorithmName() const;
	unsigned MacLength() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
struct impl_IMacAlgorithmProvider2
{
	Windows::Security::Cryptography::Core::CryptographicHash CreateHash(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
struct impl_IKeyDerivationAlgorithmProvider
{
	String AlgorithmName() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
struct impl_ISymmetricKeyAlgorithmProvider
{
	String AlgorithmName() const;
	unsigned BlockLength() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateSymmetricKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
struct impl_IAsymmetricKeyAlgorithmProvider
{
	String AlgorithmName() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateKeyPair(unsigned keySize) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType BlobType) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType BlobType) const;
};

template <typename T>
struct impl_IPersistedKeyProviderStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
	Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
};

template <typename T>
struct impl_IEncryptedAndAuthenticatedData
{
	Windows::Storage::Streams::IBuffer EncryptedData() const;
	Windows::Storage::Streams::IBuffer AuthenticationTag() const;
};

template <typename T>
struct impl_ICryptographicEngineStatics
{
	Windows::Storage::Streams::IBuffer Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const;
	Windows::Storage::Streams::IBuffer Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const;
	Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData) const;
	Windows::Storage::Streams::IBuffer DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData) const;
	Windows::Storage::Streams::IBuffer Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
	bool VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const;
	Windows::Storage::Streams::IBuffer DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned desiredKeySize) const;
};

template <typename T>
struct impl_ICryptographicEngineStatics2
{
	Windows::Storage::Streams::IBuffer SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
	bool VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
};

template <typename T>
struct impl_IHashAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_IMacAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_IKeyDerivationAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_ISymmetricKeyAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_IAsymmetricKeyAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_IHashAlgorithmNamesStatics
{
	String Md5() const;
	String Sha1() const;
	String Sha256() const;
	String Sha384() const;
	String Sha512() const;
};

template <typename T>
struct impl_IMacAlgorithmNamesStatics
{
	String HmacMd5() const;
	String HmacSha1() const;
	String HmacSha256() const;
	String HmacSha384() const;
	String HmacSha512() const;
	String AesCmac() const;
};

template <typename T>
struct impl_ISymmetricAlgorithmNamesStatics
{
	String DesCbc() const;
	String DesEcb() const;
	String TripleDesCbc() const;
	String TripleDesEcb() const;
	String Rc2Cbc() const;
	String Rc2Ecb() const;
	String AesCbc() const;
	String AesEcb() const;
	String AesGcm() const;
	String AesCcm() const;
	String AesCbcPkcs7() const;
	String AesEcbPkcs7() const;
	String DesCbcPkcs7() const;
	String DesEcbPkcs7() const;
	String TripleDesCbcPkcs7() const;
	String TripleDesEcbPkcs7() const;
	String Rc2CbcPkcs7() const;
	String Rc2EcbPkcs7() const;
	String Rc4() const;
};

template <typename T>
struct impl_IAsymmetricAlgorithmNamesStatics
{
	String RsaPkcs1() const;
	String RsaOaepSha1() const;
	String RsaOaepSha256() const;
	String RsaOaepSha384() const;
	String RsaOaepSha512() const;
	String EcdsaP256Sha256() const;
	String EcdsaP384Sha384() const;
	String EcdsaP521Sha512() const;
	String DsaSha1() const;
	String DsaSha256() const;
	String RsaSignPkcs1Sha1() const;
	String RsaSignPkcs1Sha256() const;
	String RsaSignPkcs1Sha384() const;
	String RsaSignPkcs1Sha512() const;
	String RsaSignPssSha1() const;
	String RsaSignPssSha256() const;
	String RsaSignPssSha384() const;
	String RsaSignPssSha512() const;
};

template <typename T>
struct impl_IKeyDerivationAlgorithmNamesStatics
{
	String Pbkdf2Md5() const;
	String Pbkdf2Sha1() const;
	String Pbkdf2Sha256() const;
	String Pbkdf2Sha384() const;
	String Pbkdf2Sha512() const;
	String Sp800108CtrHmacMd5() const;
	String Sp800108CtrHmacSha1() const;
	String Sp800108CtrHmacSha256() const;
	String Sp800108CtrHmacSha384() const;
	String Sp800108CtrHmacSha512() const;
	String Sp80056aConcatMd5() const;
	String Sp80056aConcatSha1() const;
	String Sp80056aConcatSha256() const;
	String Sp80056aConcatSha384() const;
	String Sp80056aConcatSha512() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

template <typename T>
struct impl_IDataProtectionProvider
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ProtectAsync(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> UnprotectAsync(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Foundation::IAsyncAction ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & src, Windows::Storage::Streams::IOutputStream const & dest) const;
	Windows::Foundation::IAsyncAction UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & src, Windows::Storage::Streams::IOutputStream const & dest) const;
};

template <typename T>
struct impl_IDataProtectionProviderFactory
{
	Windows::Security::Cryptography::DataProtection::DataProtectionProvider CreateOverloadExplicit(String const & protectionDescriptor) const;
	template <unsigned S0> Windows::Security::Cryptography::DataProtection::DataProtectionProvider CreateOverloadExplicit(wchar_t const (&protectionDescriptor)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

template <typename T>
struct impl_IFileRevocationManagerStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, String const & enterpriseIdentity) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, wchar_t const (&enterpriseIdentity)[S0]) const;
	Windows::Foundation::IAsyncOperation<bool> CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem) const;
	void Revoke(String const & enterpriseIdentity) const;
	template <unsigned S0> void Revoke(wchar_t const (&enterpriseIdentity)[S0]) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> GetStatusAsync(Windows::Storage::IStorageItem const & storageItem) const;
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

template <typename T>
struct impl_IEasClientDeviceInformation
{
	GUID Id() const;
	String OperatingSystem() const;
	String FriendlyName() const;
	String SystemManufacturer() const;
	String SystemProductName() const;
	String SystemSku() const;
};

template <typename T>
struct impl_IEasClientSecurityPolicy
{
	bool RequireEncryption() const;
	void RequireEncryption(bool value) const;
	byte MinPasswordLength() const;
	void MinPasswordLength(byte value) const;
	bool DisallowConvenienceLogon() const;
	void DisallowConvenienceLogon(bool value) const;
	byte MinPasswordComplexCharacters() const;
	void MinPasswordComplexCharacters(byte value) const;
	Windows::Foundation::TimeSpan PasswordExpiration() const;
	void PasswordExpiration(Windows::Foundation::TimeSpan const & value) const;
	unsigned PasswordHistory() const;
	void PasswordHistory(unsigned value) const;
	byte MaxPasswordFailedAttempts() const;
	void MaxPasswordFailedAttempts(byte value) const;
	Windows::Foundation::TimeSpan MaxInactivityTimeLock() const;
	void MaxInactivityTimeLock(Windows::Foundation::TimeSpan const & value) const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults CheckCompliance() const;
	Windows::Foundation::IAsyncOperation<Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults> ApplyAsync() const;
};

template <typename T>
struct impl_IEasComplianceResults
{
	bool Compliant() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasRequireEncryptionResult RequireEncryptionResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordLengthResult MinPasswordLengthResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasDisallowConvenienceLogonResult DisallowConvenienceLogonResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordComplexCharactersResult MinPasswordComplexCharactersResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordExpirationResult PasswordExpirationResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordHistoryResult PasswordHistoryResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasMaxPasswordFailedAttemptsResult MaxPasswordFailedAttemptsResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasMaxInactivityTimeLockResult MaxInactivityTimeLockResult() const;
};

template <typename T>
struct impl_IEasComplianceResults2
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasEncryptionProviderType EncryptionProviderType() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage {

template <typename T>
struct impl_IStreamedFileDataRequestedHandler
{
	void Invoke(Windows::Storage::StreamedFileDataRequest const & stream) const;
};

template <typename T>
struct impl_IApplicationDataSetVersionHandler
{
	void Invoke(Windows::Storage::SetVersionRequest const & setVersionRequest) const;
};

template <typename T>
struct impl_IStorageLibraryStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> GetLibraryAsync(Windows::Storage::KnownLibraryId libraryId) const;
};

template <typename T>
struct impl_IStorageLibrary
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> RequestAddFolderAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestRemoveFolderAsync(Windows::Storage::StorageFolder const & folder) const;
	Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder> Folders() const;
	Windows::Storage::StorageFolder SaveFolder() const;
	EventRegistrationToken DefinitionChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::StorageLibrary, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken DefinitionChanged(F handler) const;
	void DefinitionChanged(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IKnownFoldersStatics
{
	Windows::Storage::StorageFolder MusicLibrary() const;
	Windows::Storage::StorageFolder PicturesLibrary() const;
	Windows::Storage::StorageFolder VideosLibrary() const;
	Windows::Storage::StorageFolder DocumentsLibrary() const;
	Windows::Storage::StorageFolder HomeGroup() const;
	Windows::Storage::StorageFolder RemovableDevices() const;
	Windows::Storage::StorageFolder MediaServerDevices() const;
};

template <typename T>
struct impl_IKnownFoldersPlaylistsStatics
{
	Windows::Storage::StorageFolder Playlists() const;
};

template <typename T>
struct impl_IKnownFoldersCameraRollStatics
{
	Windows::Storage::StorageFolder CameraRoll() const;
};

template <typename T>
struct impl_IKnownFoldersSavedPicturesStatics
{
	Windows::Storage::StorageFolder SavedPictures() const;
};

template <typename T>
struct impl_IDownloadsFolderStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName, Windows::Storage::CreationCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName, Windows::Storage::CreationCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption option) const;
};

template <typename T>
struct impl_IStreamedFileDataRequest
{
	void FailAndClose(Windows::Storage::StreamedFileFailureMode failureMode) const;
};

template <typename T>
struct impl_IStorageFileStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(String const & path) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(wchar_t const (&path)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(String const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(String const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <unsigned S0, typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(String const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
};

template <typename T>
struct impl_IStorageItem
{
	Windows::Foundation::IAsyncAction RenameAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction RenameAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncAction RenameAsync(String const & desiredName, Windows::Storage::NameCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction RenameAsync(wchar_t const (&desiredName)[S0], Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncAction DeleteAsync() const;
	Windows::Foundation::IAsyncAction DeleteAsync(Windows::Storage::StorageDeleteOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::BasicProperties> GetBasicPropertiesAsync() const;
	String Name() const;
	String Path() const;
	Windows::Storage::FileAttributes Attributes() const;
	Windows::Foundation::DateTime DateCreated() const;
	bool IsOfType(Windows::Storage::StorageItemTypes type) const;
};

template <typename T>
struct impl_IStorageFolder
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName, Windows::Storage::CreationCollisionOption options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName, Windows::Storage::CreationCollisionOption options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(String const & name) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(wchar_t const (&name)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(String const & name) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(wchar_t const (&name)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(String const & name) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(wchar_t const (&name)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync() const;
};

template <typename T>
struct impl_IStorageFile
{
	String FileType() const;
	String ContentType() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> OpenAsync(Windows::Storage::FileAccessMode accessMode) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> OpenTransactedWriteAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName, Windows::Storage::NameCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0], Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncAction CopyAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const;
	Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder) const;
	Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0]) const;
	Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName, Windows::Storage::NameCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0], Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncAction MoveAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const;
};

template <typename T>
struct impl_IStorageFolderStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(String const & path) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(wchar_t const (&path)[S0]) const;
};

template <typename T>
struct impl_IStorageItem2
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetParentAsync() const;
	bool IsEqual(Windows::Storage::IStorageItem const & item) const;
};

template <typename T>
struct impl_IStorageItemProperties
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize, Windows::Storage::FileProperties::ThumbnailOptions options) const;
	String DisplayName() const;
	String DisplayType() const;
	String FolderRelativeId() const;
	Windows::Storage::FileProperties::StorageItemContentProperties Properties() const;
};

template <typename T>
struct impl_IStorageItemProperties2
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize, Windows::Storage::FileProperties::ThumbnailOptions options) const;
};

template <typename T>
struct impl_IStorageItemPropertiesWithProvider
{
	Windows::Storage::StorageProvider Provider() const;
};

template <typename T>
struct impl_IStorageFilePropertiesWithAvailability
{
	bool IsAvailable() const;
};

template <typename T>
struct impl_IStorageProvider
{
	String Id() const;
	String DisplayName() const;
};

template <typename T>
struct impl_IStorageFolder2
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> TryGetItemAsync(String const & name) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> TryGetItemAsync(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_IFileIOStatics
{
	Windows::Foundation::IAsyncOperation<String> ReadTextAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<String> ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncAction WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
struct impl_IPathIOStatics
{
	Windows::Foundation::IAsyncOperation<String> ReadTextAsync(String const & absolutePath) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ReadTextAsync(wchar_t const (&absolutePath)[S0]) const;
	Windows::Foundation::IAsyncOperation<String> ReadTextAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ReadTextAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(String const & absolutePath, String const & contents) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(String const & absolutePath, String const & contents) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(String const & absolutePath) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(wchar_t const (&absolutePath)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(String const & absolutePath) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(wchar_t const (&absolutePath)[S0]) const;
	Windows::Foundation::IAsyncAction WriteBufferAsync(String const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteBufferAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
struct impl_ICachedFileManagerStatics
{
	void DeferUpdates(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Provider::FileUpdateStatus> CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file) const;
};

template <typename T>
struct impl_ISystemAudioProperties
{
	String EncodingBitrate() const;
};

template <typename T>
struct impl_ISystemGPSProperties
{
	String LatitudeDecimal() const;
	String LongitudeDecimal() const;
};

template <typename T>
struct impl_ISystemImageProperties
{
	String HorizontalSize() const;
	String VerticalSize() const;
};

template <typename T>
struct impl_ISystemMediaProperties
{
	String Duration() const;
	String Producer() const;
	String Publisher() const;
	String SubTitle() const;
	String Writer() const;
	String Year() const;
};

template <typename T>
struct impl_ISystemMusicProperties
{
	String AlbumArtist() const;
	String AlbumTitle() const;
	String Artist() const;
	String Composer() const;
	String Conductor() const;
	String DisplayArtist() const;
	String Genre() const;
	String TrackNumber() const;
};

template <typename T>
struct impl_ISystemPhotoProperties
{
	String CameraManufacturer() const;
	String CameraModel() const;
	String DateTaken() const;
	String Orientation() const;
	String PeopleNames() const;
};

template <typename T>
struct impl_ISystemVideoProperties
{
	String Director() const;
	String FrameHeight() const;
	String FrameWidth() const;
	String Orientation() const;
	String TotalBitrate() const;
};

template <typename T>
struct impl_ISystemProperties
{
	String Author() const;
	String Comment() const;
	String ItemNameDisplay() const;
	String Keywords() const;
	String Rating() const;
	String Title() const;
	Windows::Storage::SystemAudioProperties Audio() const;
	Windows::Storage::SystemGPSProperties GPS() const;
	Windows::Storage::SystemMediaProperties Media() const;
	Windows::Storage::SystemMusicProperties Music() const;
	Windows::Storage::SystemPhotoProperties Photo() const;
	Windows::Storage::SystemVideoProperties Video() const;
	Windows::Storage::SystemImageProperties Image() const;
};

template <typename T>
struct impl_IStorageStreamTransaction
{
	Windows::Storage::Streams::IRandomAccessStream Stream() const;
	Windows::Foundation::IAsyncAction CommitAsync() const;
};

template <typename T>
struct impl_IApplicationDataStatics
{
	Windows::Storage::ApplicationData Current() const;
};

template <typename T>
struct impl_IApplicationData
{
	unsigned Version() const;
	Windows::Foundation::IAsyncAction SetVersionAsync(unsigned desiredVersion, Windows::Storage::IApplicationDataSetVersionHandler const & handler) const;
	template <typename F> Windows::Foundation::IAsyncAction SetVersionAsync(unsigned desiredVersion, F handler) const;
	Windows::Foundation::IAsyncAction ClearAsync() const;
	Windows::Foundation::IAsyncAction ClearAsync(Windows::Storage::ApplicationDataLocality locality) const;
	Windows::Storage::ApplicationDataContainer LocalSettings() const;
	Windows::Storage::ApplicationDataContainer RoamingSettings() const;
	Windows::Storage::StorageFolder LocalFolder() const;
	Windows::Storage::StorageFolder RoamingFolder() const;
	Windows::Storage::StorageFolder TemporaryFolder() const;
	EventRegistrationToken DataChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::ApplicationData, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken DataChanged(F handler) const;
	void DataChanged(EventRegistrationToken token) const;
	void SignalDataChanged() const;
	unsigned long long RoamingStorageQuota() const;
};

template <typename T>
struct impl_ISetVersionRequest
{
	unsigned CurrentVersion() const;
	unsigned DesiredVersion() const;
	Windows::Storage::SetVersionDeferral GetDeferral() const;
};

template <typename T>
struct impl_ISetVersionDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IApplicationDataContainer
{
	String Name() const;
	Windows::Storage::ApplicationDataLocality Locality() const;
	Windows::Foundation::Collections::IPropertySet Values() const;
	Windows::Foundation::Collections::IMapView<String, Windows::Storage::ApplicationDataContainer> Containers() const;
	Windows::Storage::ApplicationDataContainer CreateContainer(String const & name, Windows::Storage::ApplicationDataCreateDisposition disposition) const;
	template <unsigned S0> Windows::Storage::ApplicationDataContainer CreateContainer(wchar_t const (&name)[S0], Windows::Storage::ApplicationDataCreateDisposition disposition) const;
	void DeleteContainer(String const & name) const;
	template <unsigned S0> void DeleteContainer(wchar_t const (&name)[S0]) const;
};

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

template <typename T>
struct impl_IItemRemovedEventArgs
{
	Windows::Storage::AccessCache::AccessListEntry RemovedEntry() const;
};

template <typename T>
struct impl_IStorageItemAccessList
{
	String Add(Windows::Storage::IStorageItem const & file) const;
	String Add(Windows::Storage::IStorageItem const & file, String const & metadata) const;
	template <unsigned S0> String Add(Windows::Storage::IStorageItem const & file, wchar_t const (&metadata)[S0]) const;
	void AddOrReplace(String const & token, Windows::Storage::IStorageItem const & file) const;
	template <unsigned S0> void AddOrReplace(wchar_t const (&token)[S0], Windows::Storage::IStorageItem const & file) const;
	void AddOrReplace(String const & token, Windows::Storage::IStorageItem const & file, String const & metadata) const;
	template <unsigned S0, unsigned S1> void AddOrReplace(wchar_t const (&token)[S0], Windows::Storage::IStorageItem const & file, wchar_t const (&metadata)[S1]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(String const & token) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(wchar_t const (&token)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(String const & token) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(wchar_t const (&token)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(String const & token) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(wchar_t const (&token)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(String const & token, Windows::Storage::AccessCache::AccessCacheOptions options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(wchar_t const (&token)[S0], Windows::Storage::AccessCache::AccessCacheOptions options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(String const & token, Windows::Storage::AccessCache::AccessCacheOptions options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(wchar_t const (&token)[S0], Windows::Storage::AccessCache::AccessCacheOptions options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(String const & token, Windows::Storage::AccessCache::AccessCacheOptions options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(wchar_t const (&token)[S0], Windows::Storage::AccessCache::AccessCacheOptions options) const;
	void Remove(String const & token) const;
	template <unsigned S0> void Remove(wchar_t const (&token)[S0]) const;
	bool ContainsItem(String const & token) const;
	template <unsigned S0> bool ContainsItem(wchar_t const (&token)[S0]) const;
	void Clear() const;
	bool CheckAccess(Windows::Storage::IStorageItem const & file) const;
	Windows::Storage::AccessCache::AccessListEntryView Entries() const;
	unsigned MaximumItemsAllowed() const;
};

template <typename T>
struct impl_IStorageItemMostRecentlyUsedList
{
	EventRegistrationToken ItemRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList, Windows::Storage::AccessCache::ItemRemovedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ItemRemoved(F handler) const;
	void ItemRemoved(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IStorageApplicationPermissionsStatics
{
	Windows::Storage::AccessCache::StorageItemAccessList FutureAccessList() const;
	Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList MostRecentlyUsedList() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

template <typename T>
struct impl_IStorageItemInformation
{
	Windows::Storage::FileProperties::MusicProperties MusicProperties() const;
	Windows::Storage::FileProperties::VideoProperties VideoProperties() const;
	Windows::Storage::FileProperties::ImageProperties ImageProperties() const;
	Windows::Storage::FileProperties::DocumentProperties DocumentProperties() const;
	Windows::Storage::FileProperties::BasicProperties BasicProperties() const;
	Windows::Storage::FileProperties::StorageItemThumbnail Thumbnail() const;
	EventRegistrationToken ThumbnailUpdated(Windows::Foundation::ITypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable> const & changedHandler) const;
	template <typename F> EventRegistrationToken ThumbnailUpdated(F changedHandler) const;
	void ThumbnailUpdated(EventRegistrationToken eventCookie) const;
	EventRegistrationToken PropertiesUpdated(Windows::Foundation::ITypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable> const & changedHandler) const;
	template <typename F> EventRegistrationToken PropertiesUpdated(F changedHandler) const;
	void PropertiesUpdated(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IFileInformationFactoryFactory
{
	Windows::Storage::BulkAccess::FileInformationFactory CreateWithMode(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode) const;
	Windows::Storage::BulkAccess::FileInformationFactory CreateWithModeAndSize(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize) const;
	Windows::Storage::BulkAccess::FileInformationFactory CreateWithModeAndSizeAndOptions(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions thumbnailOptions) const;
	Windows::Storage::BulkAccess::FileInformationFactory CreateWithModeAndSizeAndOptionsAndFlags(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions thumbnailOptions, bool delayLoad) const;
};

template <typename T>
struct impl_IFileInformationFactory
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> GetItemsAsync(unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> GetItemsAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> GetFilesAsync(unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> GetFilesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> GetFoldersAsync(unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> GetFoldersAsync() const;
	IInspectable GetVirtualizedItemsVector() const;
	IInspectable GetVirtualizedFilesVector() const;
	IInspectable GetVirtualizedFoldersVector() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

template <typename T>
struct impl_ICompressor
{
	Windows::Foundation::IAsyncOperation<bool> FinishAsync() const;
	Windows::Storage::Streams::IOutputStream DetachStream() const;
};

template <typename T>
struct impl_IDecompressor
{
	Windows::Storage::Streams::IInputStream DetachStream() const;
};

template <typename T>
struct impl_ICompressorFactory
{
	Windows::Storage::Compression::Compressor CreateCompressor(Windows::Storage::Streams::IOutputStream const & underlyingStream) const;
	Windows::Storage::Compression::Compressor CreateCompressorEx(Windows::Storage::Streams::IOutputStream const & underlyingStream, Windows::Storage::Compression::CompressAlgorithm algorithm, unsigned blockSize) const;
};

template <typename T>
struct impl_IDecompressorFactory
{
	Windows::Storage::Compression::Decompressor CreateDecompressor(Windows::Storage::Streams::IInputStream const & underlyingStream) const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

template <typename T>
struct impl_IThumbnailProperties
{
	unsigned OriginalWidth() const;
	unsigned OriginalHeight() const;
	bool ReturnedSmallerCachedSize() const;
	Windows::Storage::FileProperties::ThumbnailType Type() const;
};

template <typename T>
struct impl_IStorageItemExtraProperties
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<String, IInspectable>> RetrievePropertiesAsync(Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
	Windows::Foundation::IAsyncAction SavePropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>> const & propertiesToSave) const;
	Windows::Foundation::IAsyncAction SavePropertiesAsync() const;
};

template <typename T>
struct impl_IStorageItemContentProperties
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::MusicProperties> GetMusicPropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::VideoProperties> GetVideoPropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::ImageProperties> GetImagePropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::DocumentProperties> GetDocumentPropertiesAsync() const;
};

template <typename T>
struct impl_IMusicProperties
{
	String Album() const;
	void Album(String const & value) const;
	template <unsigned S0> void Album(wchar_t const (&value)[S0]) const;
	String Artist() const;
	void Artist(String const & value) const;
	template <unsigned S0> void Artist(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Genre() const;
	unsigned TrackNumber() const;
	void TrackNumber(unsigned value) const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	unsigned Rating() const;
	void Rating(unsigned value) const;
	Windows::Foundation::TimeSpan Duration() const;
	unsigned Bitrate() const;
	String AlbumArtist() const;
	void AlbumArtist(String const & value) const;
	template <unsigned S0> void AlbumArtist(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Composers() const;
	Windows::Foundation::Collections::IVector<String> Conductors() const;
	String Subtitle() const;
	void Subtitle(String const & value) const;
	template <unsigned S0> void Subtitle(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Producers() const;
	String Publisher() const;
	void Publisher(String const & value) const;
	template <unsigned S0> void Publisher(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Writers() const;
	unsigned Year() const;
	void Year(unsigned value) const;
};

template <typename T>
struct impl_IImageProperties
{
	unsigned Rating() const;
	void Rating(unsigned value) const;
	Windows::Foundation::Collections::IVector<String> Keywords() const;
	Windows::Foundation::DateTime DateTaken() const;
	void DateTaken(Windows::Foundation::DateTime const & value) const;
	unsigned Width() const;
	unsigned Height() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::IReference<double> Latitude() const;
	Windows::Foundation::IReference<double> Longitude() const;
	String CameraManufacturer() const;
	void CameraManufacturer(String const & value) const;
	template <unsigned S0> void CameraManufacturer(wchar_t const (&value)[S0]) const;
	String CameraModel() const;
	void CameraModel(String const & value) const;
	template <unsigned S0> void CameraModel(wchar_t const (&value)[S0]) const;
	Windows::Storage::FileProperties::PhotoOrientation Orientation() const;
	Windows::Foundation::Collections::IVectorView<String> PeopleNames() const;
};

template <typename T>
struct impl_IVideoProperties
{
	unsigned Rating() const;
	void Rating(unsigned value) const;
	Windows::Foundation::Collections::IVector<String> Keywords() const;
	unsigned Width() const;
	unsigned Height() const;
	Windows::Foundation::TimeSpan Duration() const;
	Windows::Foundation::IReference<double> Latitude() const;
	Windows::Foundation::IReference<double> Longitude() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Subtitle() const;
	void Subtitle(String const & value) const;
	template <unsigned S0> void Subtitle(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Producers() const;
	String Publisher() const;
	void Publisher(String const & value) const;
	template <unsigned S0> void Publisher(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Writers() const;
	unsigned Year() const;
	void Year(unsigned value) const;
	unsigned Bitrate() const;
	Windows::Foundation::Collections::IVector<String> Directors() const;
	Windows::Storage::FileProperties::VideoOrientation Orientation() const;
};

template <typename T>
struct impl_IDocumentProperties
{
	Windows::Foundation::Collections::IVector<String> Author() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Keywords() const;
	String Comment() const;
	void Comment(String const & value) const;
	template <unsigned S0> void Comment(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IBasicProperties
{
	unsigned long long Size() const;
	Windows::Foundation::DateTime DateModified() const;
	Windows::Foundation::DateTime ItemDate() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

template <typename T>
struct impl_IFileOpenPicker
{
	Windows::Storage::Pickers::PickerViewMode ViewMode() const;
	void ViewMode(Windows::Storage::Pickers::PickerViewMode value) const;
	String SettingsIdentifier() const;
	void SettingsIdentifier(String const & value) const;
	template <unsigned S0> void SettingsIdentifier(wchar_t const (&value)[S0]) const;
	Windows::Storage::Pickers::PickerLocationId SuggestedStartLocation() const;
	void SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId value) const;
	String CommitButtonText() const;
	void CommitButtonText(String const & value) const;
	template <unsigned S0> void CommitButtonText(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> FileTypeFilter() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> PickSingleFileAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> PickMultipleFilesAsync() const;
};

template <typename T>
struct impl_IFileSavePicker
{
	String SettingsIdentifier() const;
	void SettingsIdentifier(String const & value) const;
	template <unsigned S0> void SettingsIdentifier(wchar_t const (&value)[S0]) const;
	Windows::Storage::Pickers::PickerLocationId SuggestedStartLocation() const;
	void SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId value) const;
	String CommitButtonText() const;
	void CommitButtonText(String const & value) const;
	template <unsigned S0> void CommitButtonText(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>> FileTypeChoices() const;
	String DefaultFileExtension() const;
	void DefaultFileExtension(String const & value) const;
	template <unsigned S0> void DefaultFileExtension(wchar_t const (&value)[S0]) const;
	Windows::Storage::StorageFile SuggestedSaveFile() const;
	void SuggestedSaveFile(Windows::Storage::StorageFile const & value) const;
	String SuggestedFileName() const;
	void SuggestedFileName(String const & value) const;
	template <unsigned S0> void SuggestedFileName(wchar_t const (&value)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> PickSaveFileAsync() const;
};

template <typename T>
struct impl_IFolderPicker
{
	Windows::Storage::Pickers::PickerViewMode ViewMode() const;
	void ViewMode(Windows::Storage::Pickers::PickerViewMode value) const;
	String SettingsIdentifier() const;
	void SettingsIdentifier(String const & value) const;
	template <unsigned S0> void SettingsIdentifier(wchar_t const (&value)[S0]) const;
	Windows::Storage::Pickers::PickerLocationId SuggestedStartLocation() const;
	void SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId value) const;
	String CommitButtonText() const;
	void CommitButtonText(String const & value) const;
	template <unsigned S0> void CommitButtonText(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> FileTypeFilter() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> PickSingleFolderAsync() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

template <typename T>
struct impl_IFileRemovedEventArgs
{
	String Id() const;
};

template <typename T>
struct impl_IFileOpenPickerUI
{
	Windows::Storage::Pickers::Provider::AddFileResult AddFile(String const & id, Windows::Storage::IStorageFile const & file) const;
	template <unsigned S0> Windows::Storage::Pickers::Provider::AddFileResult AddFile(wchar_t const (&id)[S0], Windows::Storage::IStorageFile const & file) const;
	void RemoveFile(String const & id) const;
	template <unsigned S0> void RemoveFile(wchar_t const (&id)[S0]) const;
	bool ContainsFile(String const & id) const;
	template <unsigned S0> bool ContainsFile(wchar_t const (&id)[S0]) const;
	bool CanAddFile(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::Collections::IVectorView<String> AllowedFileTypes() const;
	Windows::Storage::Pickers::Provider::FileSelectionMode SelectionMode() const;
	String SettingsIdentifier() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	EventRegistrationToken FileRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::FileRemovedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken FileRemoved(F handler) const;
	void FileRemoved(EventRegistrationToken token) const;
	EventRegistrationToken Closing(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::PickerClosingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Closing(F handler) const;
	void Closing(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPickerClosingEventArgs
{
	Windows::Storage::Pickers::Provider::PickerClosingOperation ClosingOperation() const;
	bool IsCanceled() const;
};

template <typename T>
struct impl_IPickerClosingOperation
{
	Windows::Storage::Pickers::Provider::PickerClosingDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
struct impl_IPickerClosingDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IFileSavePickerUI
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVectorView<String> AllowedFileTypes() const;
	String SettingsIdentifier() const;
	String FileName() const;
	Windows::Storage::Pickers::Provider::SetFileNameResult TrySetFileName(String const & value) const;
	template <unsigned S0> Windows::Storage::Pickers::Provider::SetFileNameResult TrySetFileName(wchar_t const (&value)[S0]) const;
	EventRegistrationToken FileNameChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken FileNameChanged(F handler) const;
	void FileNameChanged(EventRegistrationToken token) const;
	EventRegistrationToken TargetFileRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TargetFileRequested(F handler) const;
	void TargetFileRequested(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ITargetFileRequestedEventArgs
{
	Windows::Storage::Pickers::Provider::TargetFileRequest Request() const;
};

template <typename T>
struct impl_ITargetFileRequest
{
	Windows::Storage::IStorageFile TargetFile() const;
	void TargetFile(Windows::Storage::IStorageFile const & value) const;
	Windows::Storage::Pickers::Provider::TargetFileRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_ITargetFileRequestDeferral
{
	void Complete() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

template <typename T>
struct impl_ICachedFileUpdaterUI
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Storage::Provider::CachedFileTarget UpdateTarget() const;
	EventRegistrationToken FileUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, Windows::Storage::Provider::FileUpdateRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken FileUpdateRequested(F handler) const;
	void FileUpdateRequested(EventRegistrationToken token) const;
	EventRegistrationToken UIRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken UIRequested(F handler) const;
	void UIRequested(EventRegistrationToken token) const;
	Windows::Storage::Provider::UIStatus UIStatus() const;
};

template <typename T>
struct impl_IFileUpdateRequestedEventArgs
{
	Windows::Storage::Provider::FileUpdateRequest Request() const;
};

template <typename T>
struct impl_IFileUpdateRequest
{
	String ContentId() const;
	Windows::Storage::StorageFile File() const;
	Windows::Storage::Provider::FileUpdateStatus Status() const;
	void Status(Windows::Storage::Provider::FileUpdateStatus value) const;
	Windows::Storage::Provider::FileUpdateRequestDeferral GetDeferral() const;
	void UpdateLocalFile(Windows::Storage::IStorageFile const & value) const;
};

template <typename T>
struct impl_IFileUpdateRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ICachedFileUpdaterStatics
{
	void SetUpdateInformation(Windows::Storage::IStorageFile const & file, String const & contentId, Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options) const;
	template <unsigned S0> void SetUpdateInformation(Windows::Storage::IStorageFile const & file, wchar_t const (&contentId)[S0], Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options) const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

template <typename T>
struct impl_IContentIndexerStatics
{
	Windows::Storage::Search::ContentIndexer GetIndexer(String const & indexName) const;
	template <unsigned S0> Windows::Storage::Search::ContentIndexer GetIndexer(wchar_t const (&indexName)[S0]) const;
	Windows::Storage::Search::ContentIndexer GetIndexer() const;
};

template <typename T>
struct impl_IIndexableContent
{
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IMap<String, IInspectable> Properties() const;
	Windows::Storage::Streams::IRandomAccessStream Stream() const;
	void Stream(Windows::Storage::Streams::IRandomAccessStream const & value) const;
	String StreamContentType() const;
	void StreamContentType(String const & value) const;
	template <unsigned S0> void StreamContentType(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContentIndexer
{
	Windows::Foundation::IAsyncAction AddAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const;
	Windows::Foundation::IAsyncAction UpdateAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const;
	Windows::Foundation::IAsyncAction DeleteAsync(String const & contentId) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction DeleteAsync(wchar_t const (&contentId)[S0]) const;
	Windows::Foundation::IAsyncAction DeleteMultipleAsync(Windows::Foundation::Collections::IIterable<String> const & contentIds) const;
	Windows::Foundation::IAsyncAction DeleteAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> RetrievePropertiesAsync(String const & contentId, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> RetrievePropertiesAsync(wchar_t const (&contentId)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
	unsigned long long Revision() const;
};

template <typename T>
struct impl_IValueAndLanguage
{
	String Language() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	IInspectable Value() const;
	void Value(IInspectable const & value) const;
};

template <typename T>
struct impl_IContentIndexerQueryOperations
{
	Windows::Storage::Search::ContentIndexerQuery CreateQuery(String const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder, String const & searchFilterLanguage) const;
	template <unsigned S0, unsigned S1> Windows::Storage::Search::ContentIndexerQuery CreateQuery(wchar_t const (&searchFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder, wchar_t const (&searchFilterLanguage)[S1]) const;
	Windows::Storage::Search::ContentIndexerQuery CreateQuery(String const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder) const;
	template <unsigned S0> Windows::Storage::Search::ContentIndexerQuery CreateQuery(wchar_t const (&searchFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder) const;
	Windows::Storage::Search::ContentIndexerQuery CreateQuery(String const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
	template <unsigned S0> Windows::Storage::Search::ContentIndexerQuery CreateQuery(wchar_t const (&searchFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
};

template <typename T>
struct impl_IContentIndexerQuery
{
	Windows::Foundation::IAsyncOperation<unsigned> GetCountAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> GetPropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> GetPropertiesAsync(unsigned startIndex, unsigned maxItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> GetAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> GetAsync(unsigned startIndex, unsigned maxItems) const;
	Windows::Storage::StorageFolder QueryFolder() const;
};

template <typename T>
struct impl_IQueryOptions
{
	Windows::Foundation::Collections::IVector<String> FileTypeFilter() const;
	Windows::Storage::Search::FolderDepth FolderDepth() const;
	void FolderDepth(Windows::Storage::Search::FolderDepth value) const;
	String ApplicationSearchFilter() const;
	void ApplicationSearchFilter(String const & value) const;
	template <unsigned S0> void ApplicationSearchFilter(wchar_t const (&value)[S0]) const;
	String UserSearchFilter() const;
	void UserSearchFilter(String const & value) const;
	template <unsigned S0> void UserSearchFilter(wchar_t const (&value)[S0]) const;
	String Language() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	Windows::Storage::Search::IndexerOption IndexerOption() const;
	void IndexerOption(Windows::Storage::Search::IndexerOption value) const;
	Windows::Foundation::Collections::IVector<Modern::Windows::Storage::Search::SortEntry> SortOrder() const;
	String GroupPropertyName() const;
	Windows::Storage::Search::DateStackOption DateStackOption() const;
	String SaveToString() const;
	void LoadFromString(String const & value) const;
	template <unsigned S0> void LoadFromString(wchar_t const (&value)[S0]) const;
	void SetThumbnailPrefetch(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize, Windows::Storage::FileProperties::ThumbnailOptions options) const;
	void SetPropertyPrefetch(Windows::Storage::FileProperties::PropertyPrefetchOptions options, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
};

template <typename T>
struct impl_IQueryOptionsWithProviderFilter
{
	Windows::Foundation::Collections::IVector<String> StorageProviderIdFilter() const;
};

template <typename T>
struct impl_IQueryOptionsFactory
{
	Windows::Storage::Search::QueryOptions CreateCommonFileQuery(Windows::Storage::Search::CommonFileQuery query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter) const;
	Windows::Storage::Search::QueryOptions CreateCommonFolderQuery(Windows::Storage::Search::CommonFolderQuery query) const;
};

template <typename T>
struct impl_IStorageQueryResultBase
{
	Windows::Foundation::IAsyncOperation<unsigned> GetItemCountAsync() const;
	Windows::Storage::StorageFolder Folder() const;
	EventRegistrationToken ContentsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken ContentsChanged(F handler) const;
	void ContentsChanged(EventRegistrationToken eventCookie) const;
	EventRegistrationToken OptionsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & changedHandler) const;
	template <typename F> EventRegistrationToken OptionsChanged(F changedHandler) const;
	void OptionsChanged(EventRegistrationToken eventCookie) const;
	Windows::Foundation::IAsyncOperation<unsigned> FindStartIndexAsync(IInspectable const & value) const;
	Windows::Storage::Search::QueryOptions GetCurrentQueryOptions() const;
	void ApplyNewQueryOptions(Windows::Storage::Search::QueryOptions const & newQueryOptions) const;
};

template <typename T>
struct impl_IStorageFileQueryResult
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync(unsigned startIndex, unsigned maxNumberOfItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync() const;
};

template <typename T>
struct impl_IStorageFileQueryResult2
{
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment>> GetMatchingPropertiesWithRanges(Windows::Storage::StorageFile const & file) const;
};

template <typename T>
struct impl_IStorageFolderQueryResult
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync(unsigned startIndex, unsigned maxNumberOfItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync() const;
};

template <typename T>
struct impl_IStorageItemQueryResult
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync(unsigned startIndex, unsigned maxNumberOfItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync() const;
};

template <typename T>
struct impl_IStorageFolderQueryOperations
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Search::IndexedState> GetIndexedStateAsync() const;
	Windows::Storage::Search::StorageFileQueryResult CreateFileQuery() const;
	Windows::Storage::Search::StorageFileQueryResult CreateFileQuery(Windows::Storage::Search::CommonFileQuery query) const;
	Windows::Storage::Search::StorageFileQueryResult CreateFileQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	Windows::Storage::Search::StorageFolderQueryResult CreateFolderQuery() const;
	Windows::Storage::Search::StorageFolderQueryResult CreateFolderQuery(Windows::Storage::Search::CommonFolderQuery query) const;
	Windows::Storage::Search::StorageFolderQueryResult CreateFolderQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	Windows::Storage::Search::StorageItemQueryResult CreateItemQuery() const;
	Windows::Storage::Search::StorageItemQueryResult CreateItemQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync(Windows::Storage::Search::CommonFileQuery query, unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync(Windows::Storage::Search::CommonFileQuery query) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery query, unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery query) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync(unsigned startIndex, unsigned maxItemsToRetrieve) const;
	bool AreQueryOptionsSupported(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	bool IsCommonFolderQuerySupported(Windows::Storage::Search::CommonFolderQuery query) const;
	bool IsCommonFileQuerySupported(Windows::Storage::Search::CommonFileQuery query) const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

template <typename T>
struct impl_IDataReader
{
	unsigned UnconsumedBufferLength() const;
	Windows::Storage::Streams::UnicodeEncoding UnicodeEncoding() const;
	void UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding value) const;
	Windows::Storage::Streams::ByteOrder ByteOrder() const;
	void ByteOrder(Windows::Storage::Streams::ByteOrder value) const;
	Windows::Storage::Streams::InputStreamOptions InputStreamOptions() const;
	void InputStreamOptions(Windows::Storage::Streams::InputStreamOptions value) const;
	byte ReadByte() const;
	Windows::Storage::Streams::IBuffer ReadBuffer(unsigned length) const;
	bool ReadBoolean() const;
	GUID ReadGuid() const;
	short ReadInt16() const;
	int ReadInt32() const;
	long long ReadInt64() const;
	unsigned short ReadUInt16() const;
	unsigned ReadUInt32() const;
	unsigned long long ReadUInt64() const;
	float ReadSingle() const;
	double ReadDouble() const;
	String ReadString(unsigned codeUnitCount) const;
	Windows::Foundation::DateTime ReadDateTime() const;
	Windows::Foundation::TimeSpan ReadTimeSpan() const;
	Windows::Storage::Streams::DataReaderLoadOperation LoadAsync(unsigned count) const;
	Windows::Storage::Streams::IBuffer DetachBuffer() const;
	Windows::Storage::Streams::IInputStream DetachStream() const;
};

template <typename T>
struct impl_IDataReaderFactory
{
	Windows::Storage::Streams::DataReader CreateDataReader(Windows::Storage::Streams::IInputStream const & inputStream) const;
};

template <typename T>
struct impl_IDataReaderStatics
{
	Windows::Storage::Streams::DataReader FromBuffer(Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
struct impl_IDataWriter
{
	unsigned UnstoredBufferLength() const;
	Windows::Storage::Streams::UnicodeEncoding UnicodeEncoding() const;
	void UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding value) const;
	Windows::Storage::Streams::ByteOrder ByteOrder() const;
	void ByteOrder(Windows::Storage::Streams::ByteOrder value) const;
	void WriteByte(byte value) const;
	void WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer) const;
	void WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer, unsigned start, unsigned count) const;
	void WriteBoolean(bool value) const;
	void WriteGuid(GUID value) const;
	void WriteInt16(short value) const;
	void WriteInt32(int value) const;
	void WriteInt64(long long value) const;
	void WriteUInt16(unsigned short value) const;
	void WriteUInt32(unsigned value) const;
	void WriteUInt64(unsigned long long value) const;
	void WriteSingle(float value) const;
	void WriteDouble(double value) const;
	void WriteDateTime(Windows::Foundation::DateTime const & value) const;
	void WriteTimeSpan(Windows::Foundation::TimeSpan const & value) const;
	unsigned WriteString(String const & value) const;
	template <unsigned S0> unsigned WriteString(wchar_t const (&value)[S0]) const;
	unsigned MeasureString(String const & value) const;
	template <unsigned S0> unsigned MeasureString(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::DataWriterStoreOperation StoreAsync() const;
	Windows::Foundation::IAsyncOperation<bool> FlushAsync() const;
	Windows::Storage::Streams::IBuffer DetachBuffer() const;
	Windows::Storage::Streams::IOutputStream DetachStream() const;
};

template <typename T>
struct impl_IDataWriterFactory
{
	Windows::Storage::Streams::DataWriter CreateDataWriter(Windows::Storage::Streams::IOutputStream const & outputStream) const;
};

template <typename T>
struct impl_IRandomAccessStreamStatics
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long bytesToCopy) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const;
};

template <typename T>
struct impl_IBufferFactory
{
	Windows::Storage::Streams::Buffer Create(unsigned capacity) const;
};

template <typename T>
struct impl_IBuffer
{
	unsigned Capacity() const;
	unsigned Length() const;
	void Length(unsigned value) const;
};

template <typename T>
struct impl_IContentTypeProvider
{
	String ContentType() const;
};

template <typename T>
struct impl_IRandomAccessStreamReference
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> OpenReadAsync() const;
};

template <typename T>
struct impl_IInputStreamReference
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> OpenSequentialReadAsync() const;
};

template <typename T>
struct impl_IRandomAccessStreamReferenceStatics
{
	Windows::Storage::Streams::RandomAccessStreamReference CreateFromFile(Windows::Storage::IStorageFile const & file) const;
	Windows::Storage::Streams::RandomAccessStreamReference CreateFromUri(Windows::Foundation::Uri const & uri) const;
	Windows::Storage::Streams::RandomAccessStreamReference CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream) const;
};

template <typename T>
struct impl_IInputStream
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned> ReadAsync(Windows::Storage::Streams::IBuffer const & buffer, unsigned count, Windows::Storage::Streams::InputStreamOptions options) const;
};

template <typename T>
struct impl_IOutputStream
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> WriteAsync(Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Foundation::IAsyncOperation<bool> FlushAsync() const;
};

template <typename T>
struct impl_IRandomAccessStream
{
	unsigned long long Size() const;
	void Size(unsigned long long value) const;
	Windows::Storage::Streams::IInputStream GetInputStreamAt(unsigned long long position) const;
	Windows::Storage::Streams::IOutputStream GetOutputStreamAt(unsigned long long position) const;
	unsigned long long Position() const;
	void Seek(unsigned long long position) const;
	Windows::Storage::Streams::IRandomAccessStream CloneStream() const;
	bool CanRead() const;
	bool CanWrite() const;
};

template <typename T>
struct impl_IRandomAccessStreamWithContentType
{
};

}}}}

namespace Modern { namespace Windows { namespace System {

template <typename T>
struct impl_ILauncherUIOptions
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::Point> InvocationPoint() const;
	void InvocationPoint(Windows::Foundation::IReference<Modern::Windows::Foundation::Point> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::Rect> SelectionRect() const;
	void SelectionRect(Windows::Foundation::IReference<Modern::Windows::Foundation::Rect> const & value) const;
	Windows::UI::Popups::Placement PreferredPlacement() const;
	void PreferredPlacement(Windows::UI::Popups::Placement value) const;
};

template <typename T>
struct impl_ILauncherOptions
{
	bool TreatAsUntrusted() const;
	void TreatAsUntrusted(bool value) const;
	bool DisplayApplicationPicker() const;
	void DisplayApplicationPicker(bool value) const;
	Windows::System::LauncherUIOptions UI() const;
	String PreferredApplicationPackageFamilyName() const;
	void PreferredApplicationPackageFamilyName(String const & value) const;
	template <unsigned S0> void PreferredApplicationPackageFamilyName(wchar_t const (&value)[S0]) const;
	String PreferredApplicationDisplayName() const;
	void PreferredApplicationDisplayName(String const & value) const;
	template <unsigned S0> void PreferredApplicationDisplayName(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri FallbackUri() const;
	void FallbackUri(Windows::Foundation::Uri const & value) const;
	String ContentType() const;
	void ContentType(String const & value) const;
	template <unsigned S0> void ContentType(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ILauncherViewOptions
{
	Windows::UI::ViewManagement::ViewSizePreference DesiredRemainingView() const;
	void DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference value) const;
};

template <typename T>
struct impl_ILauncherStatics
{
	Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options) const;
};

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

template <typename T>
struct impl_IDisplayRequest
{
	void RequestActive() const;
	void RequestRelease() const;
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

template <typename T>
struct impl_IHardwareToken
{
	Windows::Storage::Streams::IBuffer Id() const;
	Windows::Storage::Streams::IBuffer Signature() const;
	Windows::Storage::Streams::IBuffer Certificate() const;
};

template <typename T>
struct impl_IHardwareIdentificationStatics
{
	Windows::System::Profile::HardwareToken GetPackageSpecificToken(Windows::Storage::Streams::IBuffer const & nonce) const;
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

template <typename T>
struct impl_ISmbiosInformationStatics
{
	String SerialNumber() const;
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

template <typename T>
struct impl_IInteractiveSessionStatics
{
	bool IsRemote() const;
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

template <typename T>
struct impl_ITimerElapsedHandler
{
	void Invoke(Windows::System::Threading::ThreadPoolTimer const & timer) const;
};

template <typename T>
struct impl_ITimerDestroyedHandler
{
	void Invoke(Windows::System::Threading::ThreadPoolTimer const & timer) const;
};

template <typename T>
struct impl_IWorkItemHandler
{
	void Invoke(Windows::Foundation::IAsyncAction const & operation) const;
};

template <typename T>
struct impl_IThreadPoolStatics
{
	Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler) const;
	template <typename F> Windows::Foundation::IAsyncAction RunAsync(F handler) const;
	Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority) const;
	template <typename F> Windows::Foundation::IAsyncAction RunAsync(F handler, Windows::System::Threading::WorkItemPriority priority) const;
	Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options) const;
	template <typename F> Windows::Foundation::IAsyncAction RunAsync(F handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options) const;
};

template <typename T>
struct impl_IThreadPoolTimer
{
	Windows::Foundation::TimeSpan Period() const;
	Windows::Foundation::TimeSpan Delay() const;
	void Cancel() const;
};

template <typename T>
struct impl_IThreadPoolTimerStatics
{
	Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period) const;
	template <typename F> Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period) const;
	Windows::System::Threading::ThreadPoolTimer CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay) const;
	template <typename F> Windows::System::Threading::ThreadPoolTimer CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay) const;
	Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period, Windows::System::Threading::ITimerDestroyedHandler const & destroyed) const;
	template <typename F> Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period, F destroyed) const;
	Windows::System::Threading::ThreadPoolTimer CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay, Windows::System::Threading::ITimerDestroyedHandler const & destroyed) const;
	template <typename F> Windows::System::Threading::ThreadPoolTimer CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay, F destroyed) const;
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

template <typename T>
struct impl_ISignalHandler
{
	void Invoke(Windows::System::Threading::Core::SignalNotifier const & signalNotifier, bool timedOut) const;
};

template <typename T>
struct impl_ISignalNotifierStatics
{
	Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler) const;
	template <unsigned S0> Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler) const;
	template <typename F> Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, F handler) const;
	template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], F handler) const;
	Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <unsigned S0> Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <typename F> Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout) const;
	Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler) const;
	template <unsigned S0> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler) const;
	template <typename F> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, F handler) const;
	template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], F handler) const;
	Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <unsigned S0> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <typename F> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout) const;
};

template <typename T>
struct impl_IPreallocatedWorkItemFactory
{
	Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItem(Windows::System::Threading::IWorkItemHandler const & handler) const;
	template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItem(F handler) const;
	Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItemWithPriority(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority) const;
	template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItemWithPriority(F handler, Windows::System::Threading::WorkItemPriority priority) const;
	Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItemWithPriorityAndOptions(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options) const;
	template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItemWithPriorityAndOptions(F handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options) const;
};

template <typename T>
struct impl_IPreallocatedWorkItem
{
	Windows::Foundation::IAsyncAction RunAsync() const;
};

template <typename T>
struct impl_ISignalNotifier
{
	void Enable() const;
	void Terminate() const;
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

template <typename T>
struct impl_IAdvertisingManagerStatics
{
	String AdvertisingId() const;
};

template <typename T>
struct impl_IUserInformationStatics
{
	bool AccountPictureChangeEnabled() const;
	bool NameAccessAllowed() const;
	Windows::Storage::IStorageFile GetAccountPicture(Windows::System::UserProfile::AccountPictureKind kind) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPictureAsync(Windows::Storage::IStorageFile const & image) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPicturesAsync(Windows::Storage::IStorageFile const & smallImage, Windows::Storage::IStorageFile const & largeImage, Windows::Storage::IStorageFile const & video) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPictureFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & image) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPicturesFromStreamsAsync(Windows::Storage::Streams::IRandomAccessStream const & smallImage, Windows::Storage::Streams::IRandomAccessStream const & largeImage, Windows::Storage::Streams::IRandomAccessStream const & video) const;
	EventRegistrationToken AccountPictureChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const;
	template <typename F> EventRegistrationToken AccountPictureChanged(F changeHandler) const;
	void AccountPictureChanged(EventRegistrationToken token) const;
	Windows::Foundation::IAsyncOperation<String> GetDisplayNameAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetFirstNameAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetLastNameAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetPrincipalNameAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetSessionInitiationProtocolUriAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetDomainNameAsync() const;
};

template <typename T>
struct impl_ILockScreenStatics
{
	Windows::Foundation::Uri OriginalImageFile() const;
	Windows::Storage::Streams::IRandomAccessStream GetImageStream() const;
	Windows::Foundation::IAsyncAction SetImageFileAsync(Windows::Storage::IStorageFile const & value) const;
	Windows::Foundation::IAsyncAction SetImageStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & value) const;
};

template <typename T>
struct impl_ILockScreenImageFeedStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetImageFeedResult> RequestSetImageFeedAsync(Windows::Foundation::Uri const & syndicationFeedUri) const;
	bool TryRemoveImageFeed() const;
};

template <typename T>
struct impl_IGlobalizationPreferencesStatics
{
	Windows::Foundation::Collections::IVectorView<String> Calendars() const;
	Windows::Foundation::Collections::IVectorView<String> Clocks() const;
	Windows::Foundation::Collections::IVectorView<String> Currencies() const;
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String HomeGeographicRegion() const;
	Windows::Globalization::DayOfWeek WeekStartsOn() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI {

template <typename T>
struct impl_IColorHelper
{
};

template <typename T>
struct impl_IColorHelperStatics
{
	Windows::UI::Color FromArgb(byte a, byte r, byte g, byte b) const;
};

template <typename T>
struct impl_IColors
{
};

template <typename T>
struct impl_IColorsStatics
{
	Windows::UI::Color AliceBlue() const;
	Windows::UI::Color AntiqueWhite() const;
	Windows::UI::Color Aqua() const;
	Windows::UI::Color Aquamarine() const;
	Windows::UI::Color Azure() const;
	Windows::UI::Color Beige() const;
	Windows::UI::Color Bisque() const;
	Windows::UI::Color Black() const;
	Windows::UI::Color BlanchedAlmond() const;
	Windows::UI::Color Blue() const;
	Windows::UI::Color BlueViolet() const;
	Windows::UI::Color Brown() const;
	Windows::UI::Color BurlyWood() const;
	Windows::UI::Color CadetBlue() const;
	Windows::UI::Color Chartreuse() const;
	Windows::UI::Color Chocolate() const;
	Windows::UI::Color Coral() const;
	Windows::UI::Color CornflowerBlue() const;
	Windows::UI::Color Cornsilk() const;
	Windows::UI::Color Crimson() const;
	Windows::UI::Color Cyan() const;
	Windows::UI::Color DarkBlue() const;
	Windows::UI::Color DarkCyan() const;
	Windows::UI::Color DarkGoldenrod() const;
	Windows::UI::Color DarkGray() const;
	Windows::UI::Color DarkGreen() const;
	Windows::UI::Color DarkKhaki() const;
	Windows::UI::Color DarkMagenta() const;
	Windows::UI::Color DarkOliveGreen() const;
	Windows::UI::Color DarkOrange() const;
	Windows::UI::Color DarkOrchid() const;
	Windows::UI::Color DarkRed() const;
	Windows::UI::Color DarkSalmon() const;
	Windows::UI::Color DarkSeaGreen() const;
	Windows::UI::Color DarkSlateBlue() const;
	Windows::UI::Color DarkSlateGray() const;
	Windows::UI::Color DarkTurquoise() const;
	Windows::UI::Color DarkViolet() const;
	Windows::UI::Color DeepPink() const;
	Windows::UI::Color DeepSkyBlue() const;
	Windows::UI::Color DimGray() const;
	Windows::UI::Color DodgerBlue() const;
	Windows::UI::Color Firebrick() const;
	Windows::UI::Color FloralWhite() const;
	Windows::UI::Color ForestGreen() const;
	Windows::UI::Color Fuchsia() const;
	Windows::UI::Color Gainsboro() const;
	Windows::UI::Color GhostWhite() const;
	Windows::UI::Color Gold() const;
	Windows::UI::Color Goldenrod() const;
	Windows::UI::Color Gray() const;
	Windows::UI::Color Green() const;
	Windows::UI::Color GreenYellow() const;
	Windows::UI::Color Honeydew() const;
	Windows::UI::Color HotPink() const;
	Windows::UI::Color IndianRed() const;
	Windows::UI::Color Indigo() const;
	Windows::UI::Color Ivory() const;
	Windows::UI::Color Khaki() const;
	Windows::UI::Color Lavender() const;
	Windows::UI::Color LavenderBlush() const;
	Windows::UI::Color LawnGreen() const;
	Windows::UI::Color LemonChiffon() const;
	Windows::UI::Color LightBlue() const;
	Windows::UI::Color LightCoral() const;
	Windows::UI::Color LightCyan() const;
	Windows::UI::Color LightGoldenrodYellow() const;
	Windows::UI::Color LightGreen() const;
	Windows::UI::Color LightGray() const;
	Windows::UI::Color LightPink() const;
	Windows::UI::Color LightSalmon() const;
	Windows::UI::Color LightSeaGreen() const;
	Windows::UI::Color LightSkyBlue() const;
	Windows::UI::Color LightSlateGray() const;
	Windows::UI::Color LightSteelBlue() const;
	Windows::UI::Color LightYellow() const;
	Windows::UI::Color Lime() const;
	Windows::UI::Color LimeGreen() const;
	Windows::UI::Color Linen() const;
	Windows::UI::Color Magenta() const;
	Windows::UI::Color Maroon() const;
	Windows::UI::Color MediumAquamarine() const;
	Windows::UI::Color MediumBlue() const;
	Windows::UI::Color MediumOrchid() const;
	Windows::UI::Color MediumPurple() const;
	Windows::UI::Color MediumSeaGreen() const;
	Windows::UI::Color MediumSlateBlue() const;
	Windows::UI::Color MediumSpringGreen() const;
	Windows::UI::Color MediumTurquoise() const;
	Windows::UI::Color MediumVioletRed() const;
	Windows::UI::Color MidnightBlue() const;
	Windows::UI::Color MintCream() const;
	Windows::UI::Color MistyRose() const;
	Windows::UI::Color Moccasin() const;
	Windows::UI::Color NavajoWhite() const;
	Windows::UI::Color Navy() const;
	Windows::UI::Color OldLace() const;
	Windows::UI::Color Olive() const;
	Windows::UI::Color OliveDrab() const;
	Windows::UI::Color Orange() const;
	Windows::UI::Color OrangeRed() const;
	Windows::UI::Color Orchid() const;
	Windows::UI::Color PaleGoldenrod() const;
	Windows::UI::Color PaleGreen() const;
	Windows::UI::Color PaleTurquoise() const;
	Windows::UI::Color PaleVioletRed() const;
	Windows::UI::Color PapayaWhip() const;
	Windows::UI::Color PeachPuff() const;
	Windows::UI::Color Peru() const;
	Windows::UI::Color Pink() const;
	Windows::UI::Color Plum() const;
	Windows::UI::Color PowderBlue() const;
	Windows::UI::Color Purple() const;
	Windows::UI::Color Red() const;
	Windows::UI::Color RosyBrown() const;
	Windows::UI::Color RoyalBlue() const;
	Windows::UI::Color SaddleBrown() const;
	Windows::UI::Color Salmon() const;
	Windows::UI::Color SandyBrown() const;
	Windows::UI::Color SeaGreen() const;
	Windows::UI::Color SeaShell() const;
	Windows::UI::Color Sienna() const;
	Windows::UI::Color Silver() const;
	Windows::UI::Color SkyBlue() const;
	Windows::UI::Color SlateBlue() const;
	Windows::UI::Color SlateGray() const;
	Windows::UI::Color Snow() const;
	Windows::UI::Color SpringGreen() const;
	Windows::UI::Color SteelBlue() const;
	Windows::UI::Color Tan() const;
	Windows::UI::Color Teal() const;
	Windows::UI::Color Thistle() const;
	Windows::UI::Color Tomato() const;
	Windows::UI::Color Transparent() const;
	Windows::UI::Color Turquoise() const;
	Windows::UI::Color Violet() const;
	Windows::UI::Color Wheat() const;
	Windows::UI::Color White() const;
	Windows::UI::Color WhiteSmoke() const;
	Windows::UI::Color Yellow() const;
	Windows::UI::Color YellowGreen() const;
};

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

template <typename T>
struct impl_IWebAccountProviderCommandInvokedHandler
{
	void Invoke(Windows::UI::ApplicationSettings::WebAccountProviderCommand const & command) const;
};

template <typename T>
struct impl_IWebAccountCommandInvokedHandler
{
	void Invoke(Windows::UI::ApplicationSettings::WebAccountCommand const & command, Windows::UI::ApplicationSettings::WebAccountInvokedArgs const & args) const;
};

template <typename T>
struct impl_ICredentialCommandCredentialDeletedHandler
{
	void Invoke(Windows::UI::ApplicationSettings::CredentialCommand const & command) const;
};

template <typename T>
struct impl_ISettingsCommandFactory
{
	Windows::UI::ApplicationSettings::SettingsCommand Create(IInspectable const & settingsCommandId, String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & handler) const;
	template <unsigned S0> Windows::UI::ApplicationSettings::SettingsCommand Create(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & handler) const;
	template <typename F> Windows::UI::ApplicationSettings::SettingsCommand Create(IInspectable const & settingsCommandId, String const & label, F handler) const;
	template <unsigned S0, typename F> Windows::UI::ApplicationSettings::SettingsCommand Create(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], F handler) const;
};

template <typename T>
struct impl_ISettingsCommandStatics
{
	Windows::UI::ApplicationSettings::SettingsCommand AccountsCommand() const;
};

template <typename T>
struct impl_ISettingsPaneCommandsRequest
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> ApplicationCommands() const;
};

template <typename T>
struct impl_ISettingsPaneCommandsRequestedEventArgs
{
	Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest Request() const;
};

template <typename T>
struct impl_ISettingsPaneStatics
{
	Windows::UI::ApplicationSettings::SettingsPane GetForCurrentView() const;
	void Show() const;
	Windows::UI::ApplicationSettings::SettingsEdgeLocation Edge() const;
};

template <typename T>
struct impl_ISettingsPane
{
	EventRegistrationToken CommandsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::ApplicationSettings::SettingsPane, Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CommandsRequested(F handler) const;
	void CommandsRequested(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IWebAccountProviderCommandFactory
{
	Windows::UI::ApplicationSettings::WebAccountProviderCommand CreateWebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler const & invoked) const;
	template <typename F> Windows::UI::ApplicationSettings::WebAccountProviderCommand CreateWebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, F invoked) const;
};

template <typename T>
struct impl_IWebAccountCommandFactory
{
	Windows::UI::ApplicationSettings::WebAccountCommand CreateWebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler const & invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions actions) const;
	template <typename F> Windows::UI::ApplicationSettings::WebAccountCommand CreateWebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, F invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions actions) const;
};

template <typename T>
struct impl_ICredentialCommandFactory
{
	Windows::UI::ApplicationSettings::CredentialCommand CreateCredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential) const;
	Windows::UI::ApplicationSettings::CredentialCommand CreateCredentialCommandWithHandler(Windows::Security::Credentials::PasswordCredential const & passwordCredential, Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler const & deleted) const;
	template <typename F> Windows::UI::ApplicationSettings::CredentialCommand CreateCredentialCommandWithHandler(Windows::Security::Credentials::PasswordCredential const & passwordCredential, F deleted) const;
};

template <typename T>
struct impl_IWebAccountProviderCommand
{
	Windows::Security::Credentials::WebAccountProvider WebAccountProvider() const;
	Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler Invoked() const;
};

template <typename T>
struct impl_IWebAccountInvokedArgs
{
	Windows::UI::ApplicationSettings::WebAccountAction Action() const;
};

template <typename T>
struct impl_IWebAccountCommand
{
	Windows::Security::Credentials::WebAccount WebAccount() const;
	Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler Invoked() const;
	Windows::UI::ApplicationSettings::SupportedWebAccountActions Actions() const;
};

template <typename T>
struct impl_ICredentialCommand
{
	Windows::Security::Credentials::PasswordCredential PasswordCredential() const;
	Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler CredentialDeleted() const;
};

template <typename T>
struct impl_IAccountsSettingsPaneEventDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IAccountsSettingsPaneCommandsRequestedEventArgs
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountProviderCommand> WebAccountProviderCommands() const;
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountCommand> WebAccountCommands() const;
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::CredentialCommand> CredentialCommands() const;
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> Commands() const;
	String HeaderText() const;
	void HeaderText(String const & value) const;
	template <unsigned S0> void HeaderText(wchar_t const (&value)[S0]) const;
	Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral GetDeferral() const;
};

template <typename T>
struct impl_IAccountsSettingsPaneStatics
{
	Windows::UI::ApplicationSettings::AccountsSettingsPane GetForCurrentView() const;
	void Show() const;
};

template <typename T>
struct impl_IAccountsSettingsPane
{
	EventRegistrationToken AccountCommandsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::ApplicationSettings::AccountsSettingsPane, Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccountCommandsRequested(F handler) const;
	void AccountCommandsRequested(EventRegistrationToken cookie) const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

template <typename T>
struct impl_IDispatchedHandler
{
	void Invoke() const;
};

template <typename T>
struct impl_IIdleDispatchedHandler
{
	void Invoke(Windows::UI::Core::IdleDispatchedHandlerArgs const & e) const;
};

template <typename T>
struct impl_ICoreWindowEventArgs
{
	bool Handled() const;
	void Handled(bool value) const;
};

template <typename T>
struct impl_IAutomationProviderRequestedEventArgs
{
	IInspectable AutomationProvider() const;
	void AutomationProvider(IInspectable const & value) const;
};

template <typename T>
struct impl_ICharacterReceivedEventArgs
{
	unsigned KeyCode() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
};

template <typename T>
struct impl_IInputEnabledEventArgs
{
	bool InputEnabled() const;
};

template <typename T>
struct impl_IKeyEventArgs
{
	Windows::System::VirtualKey VirtualKey() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
};

template <typename T>
struct impl_IPointerEventArgs
{
	Windows::UI::Input::PointerPoint CurrentPoint() const;
	Windows::System::VirtualKeyModifiers KeyModifiers() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints() const;
};

template <typename T>
struct impl_ITouchHitTestingEventArgs
{
	Windows::UI::Core::CoreProximityEvaluation ProximityEvaluation() const;
	void ProximityEvaluation(Windows::UI::Core::CoreProximityEvaluation const & value) const;
	Windows::Foundation::Point Point() const;
	Windows::Foundation::Rect BoundingBox() const;
	Windows::UI::Core::CoreProximityEvaluation EvaluateProximity(Windows::Foundation::Rect const & controlBoundingBox) const;
};

template <typename T>
struct impl_IWindowActivatedEventArgs
{
	Windows::UI::Core::CoreWindowActivationState WindowActivationState() const;
};

template <typename T>
struct impl_IWindowSizeChangedEventArgs
{
	Windows::Foundation::Size Size() const;
};

template <typename T>
struct impl_IVisibilityChangedEventArgs
{
	bool Visible() const;
};

template <typename T>
struct impl_ICoreWindow
{
	IInspectable AutomationHostProvider() const;
	Windows::Foundation::Rect Bounds() const;
	Windows::Foundation::Collections::IPropertySet CustomProperties() const;
	Windows::UI::Core::CoreDispatcher Dispatcher() const;
	Windows::UI::Core::CoreWindowFlowDirection FlowDirection() const;
	void FlowDirection(Windows::UI::Core::CoreWindowFlowDirection value) const;
	bool IsInputEnabled() const;
	void IsInputEnabled(bool value) const;
	Windows::UI::Core::CoreCursor PointerCursor() const;
	void PointerCursor(Windows::UI::Core::CoreCursor const & value) const;
	Windows::Foundation::Point PointerPosition() const;
	bool Visible() const;
	void Activate() const;
	void Close() const;
	Windows::UI::Core::CoreVirtualKeyStates GetAsyncKeyState(Windows::System::VirtualKey virtualKey) const;
	Windows::UI::Core::CoreVirtualKeyStates GetKeyState(Windows::System::VirtualKey virtualKey) const;
	void ReleasePointerCapture() const;
	void SetPointerCapture() const;
	EventRegistrationToken Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowActivatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Activated(F handler) const;
	void Activated(EventRegistrationToken cookie) const;
	EventRegistrationToken AutomationProviderRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::AutomationProviderRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AutomationProviderRequested(F handler) const;
	void AutomationProviderRequested(EventRegistrationToken cookie) const;
	EventRegistrationToken CharacterReceived(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CharacterReceived(F handler) const;
	void CharacterReceived(EventRegistrationToken cookie) const;
	EventRegistrationToken Closed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Closed(F handler) const;
	void Closed(EventRegistrationToken cookie) const;
	EventRegistrationToken InputEnabled(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::InputEnabledEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken InputEnabled(F handler) const;
	void InputEnabled(EventRegistrationToken cookie) const;
	EventRegistrationToken KeyDown(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken KeyDown(F handler) const;
	void KeyDown(EventRegistrationToken cookie) const;
	EventRegistrationToken KeyUp(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken KeyUp(F handler) const;
	void KeyUp(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerCaptureLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerCaptureLost(F handler) const;
	void PointerCaptureLost(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerEntered(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerEntered(F handler) const;
	void PointerEntered(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerExited(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerExited(F handler) const;
	void PointerExited(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerMoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerMoved(F handler) const;
	void PointerMoved(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerPressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerPressed(F handler) const;
	void PointerPressed(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerReleased(F handler) const;
	void PointerReleased(EventRegistrationToken cookie) const;
	EventRegistrationToken TouchHitTesting(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TouchHitTesting(F handler) const;
	void TouchHitTesting(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerWheelChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerWheelChanged(F handler) const;
	void PointerWheelChanged(EventRegistrationToken cookie) const;
	EventRegistrationToken SizeChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowSizeChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SizeChanged(F handler) const;
	void SizeChanged(EventRegistrationToken cookie) const;
	EventRegistrationToken VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::VisibilityChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VisibilityChanged(F handler) const;
	void VisibilityChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreWindowStatic
{
	Windows::UI::Core::CoreWindow GetForCurrentThread() const;
};

template <typename T>
struct impl_IAcceleratorKeyEventArgs
{
	Windows::UI::Core::CoreAcceleratorKeyEventType EventType() const;
	Windows::System::VirtualKey VirtualKey() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
};

template <typename T>
struct impl_ICoreAcceleratorKeys
{
	EventRegistrationToken AcceleratorKeyActivated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreDispatcher, Windows::UI::Core::AcceleratorKeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AcceleratorKeyActivated(F handler) const;
	void AcceleratorKeyActivated(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreDispatcher
{
	bool HasThreadAccess() const;
	void ProcessEvents(Windows::UI::Core::CoreProcessEventsOption options) const;
	Windows::Foundation::IAsyncAction RunAsync(Windows::UI::Core::CoreDispatcherPriority priority, Windows::UI::Core::IDispatchedHandler const & agileCallback) const;
	template <typename F> Windows::Foundation::IAsyncAction RunAsync(Windows::UI::Core::CoreDispatcherPriority priority, F agileCallback) const;
	Windows::Foundation::IAsyncAction RunIdleAsync(Windows::UI::Core::IIdleDispatchedHandler const & agileCallback) const;
	template <typename F> Windows::Foundation::IAsyncAction RunIdleAsync(F agileCallback) const;
};

template <typename T>
struct impl_ICoreDispatcherWithTaskPriority
{
	Windows::UI::Core::CoreDispatcherPriority CurrentPriority() const;
	void CurrentPriority(Windows::UI::Core::CoreDispatcherPriority value) const;
	bool ShouldYield() const;
	bool ShouldYield(Windows::UI::Core::CoreDispatcherPriority priority) const;
	void StopProcessEvents() const;
};

template <typename T>
struct impl_IIdleDispatchedHandlerArgs
{
	bool IsDispatcherIdle() const;
};

template <typename T>
struct impl_ICoreCursor
{
	unsigned Id() const;
	Windows::UI::Core::CoreCursorType Type() const;
};

template <typename T>
struct impl_ICoreCursorFactory
{
	Windows::UI::Core::CoreCursor CreateCursor(Windows::UI::Core::CoreCursorType type, unsigned id) const;
};

template <typename T>
struct impl_IInitializeWithCoreWindow
{
	void Initialize(Windows::UI::Core::CoreWindow const & window) const;
};

template <typename T>
struct impl_ICoreWindowResizeManager
{
	void NotifyLayoutCompleted() const;
};

template <typename T>
struct impl_ICoreWindowResizeManagerLayoutCapability
{
	void ShouldWaitForLayoutCompletion(bool value) const;
	bool ShouldWaitForLayoutCompletion() const;
};

template <typename T>
struct impl_ICoreWindowResizeManagerStatics
{
	Windows::UI::Core::CoreWindowResizeManager GetForCurrentView() const;
};

template <typename T>
struct impl_ICoreInputSourceBase
{
	Windows::UI::Core::CoreDispatcher Dispatcher() const;
	bool IsInputEnabled() const;
	void IsInputEnabled(bool value) const;
	EventRegistrationToken InputEnabled(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::InputEnabledEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken InputEnabled(F handler) const;
	void InputEnabled(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICorePointerInputSource
{
	void ReleasePointerCapture() const;
	void SetPointerCapture() const;
	bool HasCapture() const;
	Windows::Foundation::Point PointerPosition() const;
	Windows::UI::Core::CoreCursor PointerCursor() const;
	void PointerCursor(Windows::UI::Core::CoreCursor const & value) const;
	EventRegistrationToken PointerCaptureLost(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerCaptureLost(F handler) const;
	void PointerCaptureLost(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerEntered(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerEntered(F handler) const;
	void PointerEntered(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerExited(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerExited(F handler) const;
	void PointerExited(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerMoved(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerMoved(F handler) const;
	void PointerMoved(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerPressed(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerPressed(F handler) const;
	void PointerPressed(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerReleased(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerReleased(F handler) const;
	void PointerReleased(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerWheelChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerWheelChanged(F handler) const;
	void PointerWheelChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreKeyboardInputSource
{
	Windows::UI::Core::CoreVirtualKeyStates GetCurrentKeyState(Windows::System::VirtualKey virtualKey) const;
	EventRegistrationToken CharacterReceived(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CharacterReceived(F handler) const;
	void CharacterReceived(EventRegistrationToken cookie) const;
	EventRegistrationToken KeyDown(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken KeyDown(F handler) const;
	void KeyDown(EventRegistrationToken cookie) const;
	EventRegistrationToken KeyUp(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken KeyUp(F handler) const;
	void KeyUp(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreComponentFocusable
{
	bool HasFocus() const;
	EventRegistrationToken GotFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken GotFocus(F handler) const;
	void GotFocus(EventRegistrationToken cookie) const;
	EventRegistrationToken LostFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken LostFocus(F handler) const;
	void LostFocus(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreTouchHitTesting
{
	EventRegistrationToken TouchHitTesting(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TouchHitTesting(F handler) const;
	void TouchHitTesting(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreWindowPopupShowingEventArgs
{
	void SetDesiredSize(Windows::Foundation::Size const & value) const;
};

template <typename T>
struct impl_ICoreWindowDialog
{
	EventRegistrationToken Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Showing(F handler) const;
	void Showing(EventRegistrationToken cookie) const;
	Windows::Foundation::Size MaxSize() const;
	Windows::Foundation::Size MinSize() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	int IsInteractionDelayed() const;
	void IsInteractionDelayed(int value) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	unsigned DefaultCommandIndex() const;
	void DefaultCommandIndex(unsigned value) const;
	unsigned CancelCommandIndex() const;
	void CancelCommandIndex(unsigned value) const;
	Windows::UI::Popups::IUICommandInvokedHandler BackButtonCommand() const;
	void BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const;
	template <typename F> void BackButtonCommand(F value) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync() const;
};

template <typename T>
struct impl_ICoreWindowDialogFactory
{
	Windows::UI::Core::CoreWindowDialog CreateWithTitle(String const & title) const;
	template <unsigned S0> Windows::UI::Core::CoreWindowDialog CreateWithTitle(wchar_t const (&title)[S0]) const;
};

template <typename T>
struct impl_ICoreWindowFlyout
{
	EventRegistrationToken Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Showing(F handler) const;
	void Showing(EventRegistrationToken cookie) const;
	Windows::Foundation::Size MaxSize() const;
	Windows::Foundation::Size MinSize() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	int IsInteractionDelayed() const;
	void IsInteractionDelayed(int value) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	unsigned DefaultCommandIndex() const;
	void DefaultCommandIndex(unsigned value) const;
	Windows::UI::Popups::IUICommandInvokedHandler BackButtonCommand() const;
	void BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const;
	template <typename F> void BackButtonCommand(F value) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync() const;
};

template <typename T>
struct impl_ICoreWindowFlyoutFactory
{
	Windows::UI::Core::CoreWindowFlyout Create(Windows::Foundation::Point const & position) const;
	Windows::UI::Core::CoreWindowFlyout CreateWithTitle(Windows::Foundation::Point const & position, String const & title) const;
	template <unsigned S0> Windows::UI::Core::CoreWindowFlyout CreateWithTitle(Windows::Foundation::Point const & position, wchar_t const (&title)[S0]) const;
};

template <typename T>
struct impl_ICoreWindowFactory
{
	Windows::UI::Core::CoreWindow CreateCoreWindow(String const & windowTitle) const;
	template <unsigned S0> Windows::UI::Core::CoreWindow CreateCoreWindow(wchar_t const (&windowTitle)[S0]) const;
	bool WindowReuseAllowed() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

template <typename T>
struct impl_IPropertyAnimation
{
	Windows::UI::Core::AnimationMetrics::PropertyAnimationType Type() const;
	Windows::Foundation::TimeSpan Delay() const;
	Windows::Foundation::TimeSpan Duration() const;
	Windows::Foundation::Point Control1() const;
	Windows::Foundation::Point Control2() const;
};

template <typename T>
struct impl_IScaleAnimation
{
	Windows::Foundation::IReference<float> InitialScaleX() const;
	Windows::Foundation::IReference<float> InitialScaleY() const;
	float FinalScaleX() const;
	float FinalScaleY() const;
	Windows::Foundation::Point NormalizedOrigin() const;
};

template <typename T>
struct impl_IOpacityAnimation
{
	Windows::Foundation::IReference<float> InitialOpacity() const;
	float FinalOpacity() const;
};

template <typename T>
struct impl_IAnimationDescription
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Core::AnimationMetrics::IPropertyAnimation> Animations() const;
	Windows::Foundation::TimeSpan StaggerDelay() const;
	float StaggerDelayFactor() const;
	Windows::Foundation::TimeSpan DelayLimit() const;
	int ZOrder() const;
};

template <typename T>
struct impl_IAnimationDescriptionFactory
{
	Windows::UI::Core::AnimationMetrics::AnimationDescription CreateInstance(Windows::UI::Core::AnimationMetrics::AnimationEffect effect, Windows::UI::Core::AnimationMetrics::AnimationEffectTarget target) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

template <typename T>
struct impl_IEdgeGestureEventArgs
{
	Windows::UI::Input::EdgeGestureKind Kind() const;
};

template <typename T>
struct impl_IEdgeGestureStatics
{
	Windows::UI::Input::EdgeGesture GetForCurrentView() const;
};

template <typename T>
struct impl_IEdgeGesture
{
	EventRegistrationToken Starting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Starting(F handler) const;
	void Starting(EventRegistrationToken token) const;
	EventRegistrationToken Completed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Completed(F handler) const;
	void Completed(EventRegistrationToken token) const;
	EventRegistrationToken Canceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Canceled(F handler) const;
	void Canceled(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ITappedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	unsigned TapCount() const;
};

template <typename T>
struct impl_IRightTappedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
};

template <typename T>
struct impl_IHoldingEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::HoldingState HoldingState() const;
};

template <typename T>
struct impl_IDraggingEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::DraggingState DraggingState() const;
};

template <typename T>
struct impl_IManipulationStartedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
};

template <typename T>
struct impl_IManipulationUpdatedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Delta() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
struct impl_IManipulationInertiaStartingEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Delta() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
struct impl_IManipulationCompletedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
struct impl_ICrossSlidingEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::CrossSlidingState CrossSlidingState() const;
};

template <typename T>
struct impl_IMouseWheelParameters
{
	Windows::Foundation::Point CharTranslation() const;
	void CharTranslation(Windows::Foundation::Point const & value) const;
	float DeltaScale() const;
	void DeltaScale(float value) const;
	float DeltaRotationAngle() const;
	void DeltaRotationAngle(float value) const;
	Windows::Foundation::Point PageTranslation() const;
	void PageTranslation(Windows::Foundation::Point const & value) const;
};

template <typename T>
struct impl_IGestureRecognizer
{
	Windows::UI::Input::GestureSettings GestureSettings() const;
	void GestureSettings(Windows::UI::Input::GestureSettings value) const;
	bool IsInertial() const;
	bool IsActive() const;
	bool ShowGestureFeedback() const;
	void ShowGestureFeedback(bool value) const;
	Windows::Foundation::Point PivotCenter() const;
	void PivotCenter(Windows::Foundation::Point const & value) const;
	float PivotRadius() const;
	void PivotRadius(float value) const;
	float InertiaTranslationDeceleration() const;
	void InertiaTranslationDeceleration(float value) const;
	float InertiaRotationDeceleration() const;
	void InertiaRotationDeceleration(float value) const;
	float InertiaExpansionDeceleration() const;
	void InertiaExpansionDeceleration(float value) const;
	float InertiaTranslationDisplacement() const;
	void InertiaTranslationDisplacement(float value) const;
	float InertiaRotationAngle() const;
	void InertiaRotationAngle(float value) const;
	float InertiaExpansion() const;
	void InertiaExpansion(float value) const;
	bool ManipulationExact() const;
	void ManipulationExact(bool value) const;
	Windows::UI::Input::CrossSlideThresholds CrossSlideThresholds() const;
	void CrossSlideThresholds(Windows::UI::Input::CrossSlideThresholds const & value) const;
	bool CrossSlideHorizontally() const;
	void CrossSlideHorizontally(bool value) const;
	bool CrossSlideExact() const;
	void CrossSlideExact(bool value) const;
	bool AutoProcessInertia() const;
	void AutoProcessInertia(bool value) const;
	Windows::UI::Input::MouseWheelParameters MouseWheelParameters() const;
	bool CanBeDoubleTap(Windows::UI::Input::PointerPoint const & value) const;
	void ProcessDownEvent(Windows::UI::Input::PointerPoint const & value) const;
	void ProcessMoveEvents(Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> const & value) const;
	void ProcessUpEvent(Windows::UI::Input::PointerPoint const & value) const;
	void ProcessMouseWheelEvent(Windows::UI::Input::PointerPoint const & value, bool isShiftKeyDown, bool isControlKeyDown) const;
	void ProcessInertia() const;
	void CompleteGesture() const;
	EventRegistrationToken Tapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::TappedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Tapped(F handler) const;
	void Tapped(EventRegistrationToken cookie) const;
	EventRegistrationToken RightTapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::RightTappedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken RightTapped(F handler) const;
	void RightTapped(EventRegistrationToken cookie) const;
	EventRegistrationToken Holding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::HoldingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Holding(F handler) const;
	void Holding(EventRegistrationToken cookie) const;
	EventRegistrationToken Dragging(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::DraggingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Dragging(F handler) const;
	void Dragging(EventRegistrationToken cookie) const;
	EventRegistrationToken ManipulationStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationStartedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ManipulationStarted(F handler) const;
	void ManipulationStarted(EventRegistrationToken cookie) const;
	EventRegistrationToken ManipulationUpdated(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationUpdatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ManipulationUpdated(F handler) const;
	void ManipulationUpdated(EventRegistrationToken cookie) const;
	EventRegistrationToken ManipulationInertiaStarting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationInertiaStartingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ManipulationInertiaStarting(F handler) const;
	void ManipulationInertiaStarting(EventRegistrationToken cookie) const;
	EventRegistrationToken ManipulationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationCompletedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ManipulationCompleted(F handler) const;
	void ManipulationCompleted(EventRegistrationToken cookie) const;
	EventRegistrationToken CrossSliding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::CrossSlidingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CrossSliding(F handler) const;
	void CrossSliding(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IPointerPointStatics
{
	Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId) const;
	Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const;
};

template <typename T>
struct impl_IPointerPointTransform
{
	Windows::UI::Input::IPointerPointTransform Inverse() const;
	bool TryTransform(Windows::Foundation::Point const & inPoint, Windows::Foundation::Point & outPoint) const;
	Windows::Foundation::Rect TransformBounds(Windows::Foundation::Rect const & rect) const;
};

template <typename T>
struct impl_IPointerPoint
{
	Windows::Devices::Input::PointerDevice PointerDevice() const;
	Windows::Foundation::Point Position() const;
	Windows::Foundation::Point RawPosition() const;
	unsigned PointerId() const;
	unsigned FrameId() const;
	unsigned long long Timestamp() const;
	bool IsInContact() const;
	Windows::UI::Input::PointerPointProperties Properties() const;
};

template <typename T>
struct impl_IPointerPointProperties
{
	float Pressure() const;
	bool IsInverted() const;
	bool IsEraser() const;
	float Orientation() const;
	float XTilt() const;
	float YTilt() const;
	float Twist() const;
	Windows::Foundation::Rect ContactRect() const;
	Windows::Foundation::Rect ContactRectRaw() const;
	bool TouchConfidence() const;
	bool IsLeftButtonPressed() const;
	bool IsRightButtonPressed() const;
	bool IsMiddleButtonPressed() const;
	int MouseWheelDelta() const;
	bool IsHorizontalMouseWheel() const;
	bool IsPrimary() const;
	bool IsInRange() const;
	bool IsCanceled() const;
	bool IsBarrelButtonPressed() const;
	bool IsXButton1Pressed() const;
	bool IsXButton2Pressed() const;
	Windows::UI::Input::PointerUpdateKind PointerUpdateKind() const;
	bool HasUsage(unsigned usagePage, unsigned usageId) const;
	int GetUsageValue(unsigned usagePage, unsigned usageId) const;
};

template <typename T>
struct impl_IPointerVisualizationSettings
{
	void IsContactFeedbackEnabled(bool value) const;
	bool IsContactFeedbackEnabled() const;
	void IsBarrelButtonFeedbackEnabled(bool value) const;
	bool IsBarrelButtonFeedbackEnabled() const;
};

template <typename T>
struct impl_IPointerVisualizationSettingsStatics
{
	Windows::UI::Input::PointerVisualizationSettings GetForCurrentView() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

template <typename T>
struct impl_IInkDrawingAttributes
{
	Windows::UI::Color Color() const;
	void Color(Windows::UI::Color const & value) const;
	Windows::UI::Input::Inking::PenTipShape PenTip() const;
	void PenTip(Windows::UI::Input::Inking::PenTipShape value) const;
	Windows::Foundation::Size Size() const;
	void Size(Windows::Foundation::Size const & value) const;
	bool IgnorePressure() const;
	void IgnorePressure(bool value) const;
	bool FitToCurve() const;
	void FitToCurve(bool value) const;
};

template <typename T>
struct impl_IInkStrokeRenderingSegment
{
	Windows::Foundation::Point Position() const;
	Windows::Foundation::Point BezierControlPoint1() const;
	Windows::Foundation::Point BezierControlPoint2() const;
	float Pressure() const;
	float TiltX() const;
	float TiltY() const;
	float Twist() const;
};

template <typename T>
struct impl_IInkStroke
{
	Windows::UI::Input::Inking::InkDrawingAttributes DrawingAttributes() const;
	void DrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & value) const;
	Windows::Foundation::Rect BoundingRect() const;
	bool Selected() const;
	void Selected(bool value) const;
	bool Recognized() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStrokeRenderingSegment> GetRenderingSegments() const;
	Windows::UI::Input::Inking::InkStroke Clone() const;
};

template <typename T>
struct impl_IInkStrokeBuilder
{
	void BeginStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::UI::Input::PointerPoint AppendToStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::UI::Input::Inking::InkStroke EndStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::UI::Input::Inking::InkStroke CreateStroke(Windows::Foundation::Collections::IIterable<Modern::Windows::Foundation::Point> const & points) const;
	void SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const;
};

template <typename T>
struct impl_IInkRecognitionResult
{
	Windows::Foundation::Rect BoundingRect() const;
	Windows::Foundation::Collections::IVectorView<String> GetTextCandidates() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> GetStrokes() const;
};

template <typename T>
struct impl_IInkStrokeContainer
{
	Windows::Foundation::Rect BoundingRect() const;
	void AddStroke(Windows::UI::Input::Inking::InkStroke const & stroke) const;
	Windows::Foundation::Rect DeleteSelected() const;
	Windows::Foundation::Rect MoveSelected(Windows::Foundation::Point const & translation) const;
	Windows::Foundation::Rect SelectWithPolyLine(Windows::Foundation::Collections::IIterable<Modern::Windows::Foundation::Point> const & polyline) const;
	Windows::Foundation::Rect SelectWithLine(Windows::Foundation::Point const & from, Windows::Foundation::Point const & to) const;
	void CopySelectedToClipboard() const;
	Windows::Foundation::Rect PasteFromClipboard(Windows::Foundation::Point const & position) const;
	bool CanPasteFromClipboard() const;
	Windows::Foundation::IAsyncActionWithProgress<unsigned long long> LoadAsync(Windows::Storage::Streams::IInputStream const & inputStream) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> SaveAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const;
	void UpdateRecognitionResults(Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> const & recognitionResults) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> GetStrokes() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> GetRecognitionResults() const;
};

template <typename T>
struct impl_IInkRecognizer
{
	String Name() const;
};

template <typename T>
struct impl_IInkRecognizerContainer
{
	void SetDefaultRecognizer(Windows::UI::Input::Inking::InkRecognizer const & recognizer) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> RecognizeAsync(Windows::UI::Input::Inking::InkStrokeContainer const & strokeCollection, Windows::UI::Input::Inking::InkRecognitionTarget recognitionTarget) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognizer> GetRecognizers() const;
};

template <typename T>
struct impl_IInkManager
{
	Windows::UI::Input::Inking::InkManipulationMode Mode() const;
	void Mode(Windows::UI::Input::Inking::InkManipulationMode value) const;
	void ProcessPointerDown(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	IInspectable ProcessPointerUpdate(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::Foundation::Rect ProcessPointerUp(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	void SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> RecognizeAsync(Windows::UI::Input::Inking::InkRecognitionTarget recognitionTarget) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

template <typename T>
struct impl_IToastDismissedEventArgs
{
	Windows::UI::Notifications::ToastDismissalReason Reason() const;
};

template <typename T>
struct impl_IToastFailedEventArgs
{
	HRESULT ErrorCode() const;
};

template <typename T>
struct impl_IToastActivatedEventArgs
{
	String Arguments() const;
};

template <typename T>
struct impl_ITileUpdateManagerStatics
{
	Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication() const;
	Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication(String const & applicationId) const;
	template <unsigned S0> Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication(wchar_t const (&applicationId)[S0]) const;
	Windows::UI::Notifications::TileUpdater CreateTileUpdaterForSecondaryTile(String const & tileId) const;
	template <unsigned S0> Windows::UI::Notifications::TileUpdater CreateTileUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::TileTemplateType type) const;
};

template <typename T>
struct impl_ITileUpdater
{
	void Update(Windows::UI::Notifications::TileNotification const & notification) const;
	void Clear() const;
	void EnableNotificationQueue(bool enable) const;
	Windows::UI::Notifications::NotificationSetting Setting() const;
	void AddToSchedule(Windows::UI::Notifications::ScheduledTileNotification const & scheduledTile) const;
	void RemoveFromSchedule(Windows::UI::Notifications::ScheduledTileNotification const & scheduledTile) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledTileNotification> GetScheduledTileNotifications() const;
	void StartPeriodicUpdate(Windows::Foundation::Uri const & tileContent, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StartPeriodicUpdate(Windows::Foundation::Uri const & tileContent, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StopPeriodicUpdate() const;
	void StartPeriodicUpdateBatch(Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & tileContents, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StartPeriodicUpdateBatch(Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & tileContents, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
};

template <typename T>
struct impl_ITileUpdater2
{
	void EnableNotificationQueueForSquare150x150(bool enable) const;
	void EnableNotificationQueueForWide310x150(bool enable) const;
	void EnableNotificationQueueForSquare310x310(bool enable) const;
};

template <typename T>
struct impl_IBadgeUpdateManagerStatics
{
	Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication() const;
	Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication(String const & applicationId) const;
	template <unsigned S0> Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication(wchar_t const (&applicationId)[S0]) const;
	Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForSecondaryTile(String const & tileId) const;
	template <unsigned S0> Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::BadgeTemplateType type) const;
};

template <typename T>
struct impl_IBadgeUpdater
{
	void Update(Windows::UI::Notifications::BadgeNotification const & notification) const;
	void Clear() const;
	void StartPeriodicUpdate(Windows::Foundation::Uri const & badgeContent, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StartPeriodicUpdate(Windows::Foundation::Uri const & badgeContent, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StopPeriodicUpdate() const;
};

template <typename T>
struct impl_IToastNotificationManagerStatics
{
	Windows::UI::Notifications::ToastNotifier CreateToastNotifier() const;
	Windows::UI::Notifications::ToastNotifier CreateToastNotifier(String const & applicationId) const;
	template <unsigned S0> Windows::UI::Notifications::ToastNotifier CreateToastNotifier(wchar_t const (&applicationId)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::ToastTemplateType type) const;
};

template <typename T>
struct impl_IToastNotifier
{
	void Show(Windows::UI::Notifications::ToastNotification const & notification) const;
	void Hide(Windows::UI::Notifications::ToastNotification const & notification) const;
	Windows::UI::Notifications::NotificationSetting Setting() const;
	void AddToSchedule(Windows::UI::Notifications::ScheduledToastNotification const & scheduledToast) const;
	void RemoveFromSchedule(Windows::UI::Notifications::ScheduledToastNotification const & scheduledToast) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledToastNotification> GetScheduledToastNotifications() const;
};

template <typename T>
struct impl_ITileNotificationFactory
{
	Windows::UI::Notifications::TileNotification CreateTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const;
};

template <typename T>
struct impl_ITileNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	void ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> ExpirationTime() const;
	void Tag(String const & value) const;
	template <unsigned S0> void Tag(wchar_t const (&value)[S0]) const;
	String Tag() const;
};

template <typename T>
struct impl_IBadgeNotificationFactory
{
	Windows::UI::Notifications::BadgeNotification CreateBadgeNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const;
};

template <typename T>
struct impl_IBadgeNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	void ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> ExpirationTime() const;
};

template <typename T>
struct impl_IToastNotificationFactory
{
	Windows::UI::Notifications::ToastNotification CreateToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const;
};

template <typename T>
struct impl_IToastNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	void ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> ExpirationTime() const;
	EventRegistrationToken Dismissed(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastDismissedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Dismissed(F handler) const;
	void Dismissed(EventRegistrationToken cookie) const;
	EventRegistrationToken Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Activated(F handler) const;
	void Activated(EventRegistrationToken cookie) const;
	EventRegistrationToken Failed(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastFailedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Failed(F handler) const;
	void Failed(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IScheduledToastNotificationFactory
{
	Windows::UI::Notifications::ScheduledToastNotification CreateScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) const;
	Windows::UI::Notifications::ScheduledToastNotification CreateScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime, Windows::Foundation::TimeSpan const & snoozeInterval, unsigned maximumSnoozeCount) const;
};

template <typename T>
struct impl_IScheduledToastNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	Windows::Foundation::DateTime DeliveryTime() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> SnoozeInterval() const;
	unsigned MaximumSnoozeCount() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String Id() const;
};

template <typename T>
struct impl_IScheduledTileNotificationFactory
{
	Windows::UI::Notifications::ScheduledTileNotification CreateScheduledTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) const;
};

template <typename T>
struct impl_IScheduledTileNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	Windows::Foundation::DateTime DeliveryTime() const;
	void ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> ExpirationTime() const;
	void Tag(String const & value) const;
	template <unsigned S0> void Tag(wchar_t const (&value)[S0]) const;
	String Tag() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String Id() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

template <typename T>
struct impl_IUICommandInvokedHandler
{
	void Invoke(Windows::UI::Popups::IUICommand const & command) const;
};

template <typename T>
struct impl_IMessageDialog
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	unsigned DefaultCommandIndex() const;
	void DefaultCommandIndex(unsigned value) const;
	unsigned CancelCommandIndex() const;
	void CancelCommandIndex(unsigned value) const;
	String Content() const;
	void Content(String const & value) const;
	template <unsigned S0> void Content(wchar_t const (&value)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync() const;
	Windows::UI::Popups::MessageDialogOptions Options() const;
	void Options(Windows::UI::Popups::MessageDialogOptions value) const;
};

template <typename T>
struct impl_IMessageDialogFactory
{
	Windows::UI::Popups::MessageDialog Create(String const & content) const;
	template <unsigned S0> Windows::UI::Popups::MessageDialog Create(wchar_t const (&content)[S0]) const;
	Windows::UI::Popups::MessageDialog CreateWithTitle(String const & content, String const & title) const;
	template <unsigned S0, unsigned S1> Windows::UI::Popups::MessageDialog CreateWithTitle(wchar_t const (&content)[S0], wchar_t const (&title)[S1]) const;
};

template <typename T>
struct impl_IUICommand
{
	String Label() const;
	void Label(String const & value) const;
	template <unsigned S0> void Label(wchar_t const (&value)[S0]) const;
	Windows::UI::Popups::IUICommandInvokedHandler Invoked() const;
	void Invoked(Windows::UI::Popups::IUICommandInvokedHandler const & value) const;
	template <typename F> void Invoked(F value) const;
	IInspectable Id() const;
	void Id(IInspectable const & value) const;
};

template <typename T>
struct impl_IUICommandFactory
{
	Windows::UI::Popups::UICommand Create(String const & label) const;
	template <unsigned S0> Windows::UI::Popups::UICommand Create(wchar_t const (&label)[S0]) const;
	Windows::UI::Popups::UICommand CreateWithHandler(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action) const;
	template <unsigned S0> Windows::UI::Popups::UICommand CreateWithHandler(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action) const;
	template <typename F> Windows::UI::Popups::UICommand CreateWithHandler(String const & label, F action) const;
	template <unsigned S0, typename F> Windows::UI::Popups::UICommand CreateWithHandler(wchar_t const (&label)[S0], F action) const;
	Windows::UI::Popups::UICommand CreateWithHandlerAndId(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) const;
	template <unsigned S0> Windows::UI::Popups::UICommand CreateWithHandlerAndId(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) const;
	template <typename F> Windows::UI::Popups::UICommand CreateWithHandlerAndId(String const & label, F action, IInspectable const & commandId) const;
	template <unsigned S0, typename F> Windows::UI::Popups::UICommand CreateWithHandlerAndId(wchar_t const (&label)[S0], F action, IInspectable const & commandId) const;
};

template <typename T>
struct impl_IPopupMenu
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync(Windows::Foundation::Point const & invocationPoint) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowForSelectionAsync(Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

template <typename T>
struct impl_ISecondaryTile
{
	void TileId(String const & value) const;
	template <unsigned S0> void TileId(wchar_t const (&value)[S0]) const;
	String TileId() const;
	void Arguments(String const & value) const;
	template <unsigned S0> void Arguments(wchar_t const (&value)[S0]) const;
	String Arguments() const;
	void DisplayName(String const & value) const;
	template <unsigned S0> void DisplayName(wchar_t const (&value)[S0]) const;
	String DisplayName() const;
	void LockScreenBadgeLogo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri LockScreenBadgeLogo() const;
	void LockScreenDisplayBadgeAndTileText(bool value) const;
	bool LockScreenDisplayBadgeAndTileText() const;
	Windows::Foundation::IAsyncOperation<bool> RequestCreateAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestCreateAsync(Windows::Foundation::Point const & invocationPoint) const;
	Windows::Foundation::IAsyncOperation<bool> RequestCreateForSelectionAsync(Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<bool> RequestCreateForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<bool> RequestDeleteAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestDeleteAsync(Windows::Foundation::Point const & invocationPoint) const;
	Windows::Foundation::IAsyncOperation<bool> RequestDeleteForSelectionAsync(Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<bool> RequestDeleteForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<bool> UpdateAsync() const;
};

template <typename T>
struct impl_ISecondaryTile2
{
	void PhoneticName(String const & value) const;
	template <unsigned S0> void PhoneticName(wchar_t const (&value)[S0]) const;
	String PhoneticName() const;
	Windows::UI::StartScreen::SecondaryTileVisualElements VisualElements() const;
	void RoamingEnabled(bool value) const;
	bool RoamingEnabled() const;
	EventRegistrationToken VisualElementsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::StartScreen::SecondaryTile, Windows::UI::StartScreen::VisualElementsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VisualElementsRequested(F handler) const;
	void VisualElementsRequested(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ISecondaryTileVisualElements
{
	void Square30x30Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Square30x30Logo() const;
	void Square70x70Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Square70x70Logo() const;
	void Square150x150Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Square150x150Logo() const;
	void Wide310x150Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Wide310x150Logo() const;
	void Square310x310Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Square310x310Logo() const;
	void ForegroundText(Windows::UI::StartScreen::ForegroundText value) const;
	Windows::UI::StartScreen::ForegroundText ForegroundText() const;
	void BackgroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Color BackgroundColor() const;
	void ShowNameOnSquare150x150Logo(bool value) const;
	bool ShowNameOnSquare150x150Logo() const;
	void ShowNameOnWide310x150Logo(bool value) const;
	bool ShowNameOnWide310x150Logo() const;
	void ShowNameOnSquare310x310Logo(bool value) const;
	bool ShowNameOnSquare310x310Logo() const;
};

template <typename T>
struct impl_ISecondaryTileFactory
{
	Windows::UI::StartScreen::SecondaryTile CreateWithId(String const & tileId) const;
	template <unsigned S0> Windows::UI::StartScreen::SecondaryTile CreateWithId(wchar_t const (&tileId)[S0]) const;
};

template <typename T>
struct impl_ISecondaryTileFactory2
{
	Windows::UI::StartScreen::SecondaryTile CreateMinimalTile(String const & tileId, String const & displayName, String const & arguments, Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize desiredSize) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::UI::StartScreen::SecondaryTile CreateMinimalTile(wchar_t const (&tileId)[S0], wchar_t const (&displayName)[S1], wchar_t const (&arguments)[S2], Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize desiredSize) const;
};

template <typename T>
struct impl_ISecondaryTileStatics
{
	bool Exists(String const & tileId) const;
	template <unsigned S0> bool Exists(wchar_t const (&tileId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync(String const & applicationId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync(wchar_t const (&applicationId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllForPackageAsync() const;
};

template <typename T>
struct impl_IVisualElementsRequestedEventArgs
{
	Windows::UI::StartScreen::VisualElementsRequest Request() const;
};

template <typename T>
struct impl_IVisualElementsRequest
{
	Windows::UI::StartScreen::SecondaryTileVisualElements VisualElements() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTileVisualElements> AlternateVisualElements() const;
	Windows::Foundation::DateTime Deadline() const;
	Windows::UI::StartScreen::VisualElementsRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_IVisualElementsRequestDeferral
{
	void Complete() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

template <typename T>
struct impl_ITextConstantsStatics
{
	Windows::UI::Color AutoColor() const;
	int MinUnitCount() const;
	int MaxUnitCount() const;
	Windows::UI::Color UndefinedColor() const;
	float UndefinedFloatValue() const;
	int UndefinedInt32Value() const;
	Windows::UI::Text::FontStretch UndefinedFontStretch() const;
	Windows::UI::Text::FontStyle UndefinedFontStyle() const;
};

template <typename T>
struct impl_ITextDocument
{
	Windows::UI::Text::CaretType CaretType() const;
	void CaretType(Windows::UI::Text::CaretType value) const;
	float DefaultTabStop() const;
	void DefaultTabStop(float value) const;
	Windows::UI::Text::ITextSelection Selection() const;
	unsigned UndoLimit() const;
	void UndoLimit(unsigned value) const;
	bool CanCopy() const;
	bool CanPaste() const;
	bool CanRedo() const;
	bool CanUndo() const;
	int ApplyDisplayUpdates() const;
	int BatchDisplayUpdates() const;
	void BeginUndoGroup() const;
	void EndUndoGroup() const;
	Windows::UI::Text::ITextCharacterFormat GetDefaultCharacterFormat() const;
	Windows::UI::Text::ITextParagraphFormat GetDefaultParagraphFormat() const;
	Windows::UI::Text::ITextRange GetRange(int startPosition, int endPosition) const;
	Windows::UI::Text::ITextRange GetRangeFromPoint(Windows::Foundation::Point const & point, Windows::UI::Text::PointOptions options) const;
	void GetText(Windows::UI::Text::TextGetOptions options, String & value) const;
	void LoadFromStream(Windows::UI::Text::TextSetOptions options, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	void Redo() const;
	void SaveToStream(Windows::UI::Text::TextGetOptions options, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	void SetDefaultCharacterFormat(Windows::UI::Text::ITextCharacterFormat const & value) const;
	void SetDefaultParagraphFormat(Windows::UI::Text::ITextParagraphFormat const & value) const;
	void SetText(Windows::UI::Text::TextSetOptions options, String const & value) const;
	template <unsigned S0> void SetText(Windows::UI::Text::TextSetOptions options, wchar_t const (&value)[S0]) const;
	void Undo() const;
};

template <typename T>
struct impl_ITextRange
{
	wchar_t Character() const;
	void Character(wchar_t value) const;
	Windows::UI::Text::ITextCharacterFormat CharacterFormat() const;
	void CharacterFormat(Windows::UI::Text::ITextCharacterFormat const & value) const;
	Windows::UI::Text::ITextRange FormattedText() const;
	void FormattedText(Windows::UI::Text::ITextRange const & value) const;
	int EndPosition() const;
	void EndPosition(int value) const;
	Windows::UI::Text::RangeGravity Gravity() const;
	void Gravity(Windows::UI::Text::RangeGravity value) const;
	int Length() const;
	String Link() const;
	void Link(String const & value) const;
	template <unsigned S0> void Link(wchar_t const (&value)[S0]) const;
	Windows::UI::Text::ITextParagraphFormat ParagraphFormat() const;
	void ParagraphFormat(Windows::UI::Text::ITextParagraphFormat const & value) const;
	int StartPosition() const;
	void StartPosition(int value) const;
	int StoryLength() const;
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	bool CanPaste(int format) const;
	void ChangeCase(Windows::UI::Text::LetterCase value) const;
	void Collapse(bool value) const;
	void Copy() const;
	void Cut() const;
	int Delete(Windows::UI::Text::TextRangeUnit unit, int count) const;
	int EndOf(Windows::UI::Text::TextRangeUnit unit, bool extend) const;
	int Expand(Windows::UI::Text::TextRangeUnit unit) const;
	int FindText(String const & value, int scanLength, Windows::UI::Text::FindOptions options) const;
	template <unsigned S0> int FindText(wchar_t const (&value)[S0], int scanLength, Windows::UI::Text::FindOptions options) const;
	void GetCharacterUtf32(unsigned & value, int offset) const;
	Windows::UI::Text::ITextRange GetClone() const;
	int GetIndex(Windows::UI::Text::TextRangeUnit unit) const;
	void GetPoint(Windows::UI::Text::HorizontalCharacterAlignment horizontalAlign, Windows::UI::Text::VerticalCharacterAlignment verticalAlign, Windows::UI::Text::PointOptions options, Windows::Foundation::Point & point) const;
	void GetRect(Windows::UI::Text::PointOptions options, Windows::Foundation::Rect & rect, int & hit) const;
	void GetText(Windows::UI::Text::TextGetOptions options, String & value) const;
	void GetTextViaStream(Windows::UI::Text::TextGetOptions options, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	bool InRange(Windows::UI::Text::ITextRange const & range) const;
	void InsertImage(int width, int height, int ascent, Windows::UI::Text::VerticalCharacterAlignment verticalAlign, String const & alternateText, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	template <unsigned S0> void InsertImage(int width, int height, int ascent, Windows::UI::Text::VerticalCharacterAlignment verticalAlign, wchar_t const (&alternateText)[S0], Windows::Storage::Streams::IRandomAccessStream const & value) const;
	bool InStory(Windows::UI::Text::ITextRange const & range) const;
	bool IsEqual(Windows::UI::Text::ITextRange const & range) const;
	int Move(Windows::UI::Text::TextRangeUnit unit, int count) const;
	int MoveEnd(Windows::UI::Text::TextRangeUnit unit, int count) const;
	int MoveStart(Windows::UI::Text::TextRangeUnit unit, int count) const;
	void Paste(int format) const;
	void ScrollIntoView(Windows::UI::Text::PointOptions value) const;
	void MatchSelection() const;
	void SetIndex(Windows::UI::Text::TextRangeUnit unit, int index, bool extend) const;
	void SetPoint(Windows::Foundation::Point const & point, Windows::UI::Text::PointOptions options, bool extend) const;
	void SetRange(int startPosition, int endPosition) const;
	void SetText(Windows::UI::Text::TextSetOptions options, String const & value) const;
	template <unsigned S0> void SetText(Windows::UI::Text::TextSetOptions options, wchar_t const (&value)[S0]) const;
	void SetTextViaStream(Windows::UI::Text::TextSetOptions options, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	int StartOf(Windows::UI::Text::TextRangeUnit unit, bool extend) const;
};

template <typename T>
struct impl_ITextSelection
{
	Windows::UI::Text::SelectionOptions Options() const;
	void Options(Windows::UI::Text::SelectionOptions value) const;
	Windows::UI::Text::SelectionType Type() const;
	int EndKey(Windows::UI::Text::TextRangeUnit unit, bool extend) const;
	int HomeKey(Windows::UI::Text::TextRangeUnit unit, bool extend) const;
	int MoveDown(Windows::UI::Text::TextRangeUnit unit, int count, bool extend) const;
	int MoveLeft(Windows::UI::Text::TextRangeUnit unit, int count, bool extend) const;
	int MoveRight(Windows::UI::Text::TextRangeUnit unit, int count, bool extend) const;
	int MoveUp(Windows::UI::Text::TextRangeUnit unit, int count, bool extend) const;
	void TypeText(String const & value) const;
	template <unsigned S0> void TypeText(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ITextCharacterFormat
{
	Windows::UI::Text::FormatEffect AllCaps() const;
	void AllCaps(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Color BackgroundColor() const;
	void BackgroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Text::FormatEffect Bold() const;
	void Bold(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FontStretch FontStretch() const;
	void FontStretch(Windows::UI::Text::FontStretch value) const;
	Windows::UI::Text::FontStyle FontStyle() const;
	void FontStyle(Windows::UI::Text::FontStyle value) const;
	Windows::UI::Color ForegroundColor() const;
	void ForegroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Text::FormatEffect Hidden() const;
	void Hidden(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect Italic() const;
	void Italic(Windows::UI::Text::FormatEffect value) const;
	float Kerning() const;
	void Kerning(float value) const;
	String LanguageTag() const;
	void LanguageTag(String const & value) const;
	template <unsigned S0> void LanguageTag(wchar_t const (&value)[S0]) const;
	Windows::UI::Text::LinkType LinkType() const;
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	Windows::UI::Text::FormatEffect Outline() const;
	void Outline(Windows::UI::Text::FormatEffect value) const;
	float Position() const;
	void Position(float value) const;
	Windows::UI::Text::FormatEffect ProtectedText() const;
	void ProtectedText(Windows::UI::Text::FormatEffect value) const;
	float Size() const;
	void Size(float value) const;
	Windows::UI::Text::FormatEffect SmallCaps() const;
	void SmallCaps(Windows::UI::Text::FormatEffect value) const;
	float Spacing() const;
	void Spacing(float value) const;
	Windows::UI::Text::FormatEffect Strikethrough() const;
	void Strikethrough(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect Subscript() const;
	void Subscript(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect Superscript() const;
	void Superscript(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::TextScript TextScript() const;
	void TextScript(Windows::UI::Text::TextScript value) const;
	Windows::UI::Text::UnderlineType Underline() const;
	void Underline(Windows::UI::Text::UnderlineType value) const;
	int Weight() const;
	void Weight(int value) const;
	void SetClone(Windows::UI::Text::ITextCharacterFormat const & value) const;
	Windows::UI::Text::ITextCharacterFormat GetClone() const;
	bool IsEqual(Windows::UI::Text::ITextCharacterFormat const & format) const;
};

template <typename T>
struct impl_ITextParagraphFormat
{
	Windows::UI::Text::ParagraphAlignment Alignment() const;
	void Alignment(Windows::UI::Text::ParagraphAlignment value) const;
	float FirstLineIndent() const;
	Windows::UI::Text::FormatEffect KeepTogether() const;
	void KeepTogether(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect KeepWithNext() const;
	void KeepWithNext(Windows::UI::Text::FormatEffect value) const;
	float LeftIndent() const;
	float LineSpacing() const;
	Windows::UI::Text::LineSpacingRule LineSpacingRule() const;
	Windows::UI::Text::MarkerAlignment ListAlignment() const;
	void ListAlignment(Windows::UI::Text::MarkerAlignment value) const;
	int ListLevelIndex() const;
	void ListLevelIndex(int value) const;
	int ListStart() const;
	void ListStart(int value) const;
	Windows::UI::Text::MarkerStyle ListStyle() const;
	void ListStyle(Windows::UI::Text::MarkerStyle value) const;
	float ListTab() const;
	void ListTab(float value) const;
	Windows::UI::Text::MarkerType ListType() const;
	void ListType(Windows::UI::Text::MarkerType value) const;
	Windows::UI::Text::FormatEffect NoLineNumber() const;
	void NoLineNumber(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect PageBreakBefore() const;
	void PageBreakBefore(Windows::UI::Text::FormatEffect value) const;
	float RightIndent() const;
	void RightIndent(float value) const;
	Windows::UI::Text::FormatEffect RightToLeft() const;
	void RightToLeft(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::ParagraphStyle Style() const;
	void Style(Windows::UI::Text::ParagraphStyle value) const;
	float SpaceAfter() const;
	void SpaceAfter(float value) const;
	float SpaceBefore() const;
	void SpaceBefore(float value) const;
	Windows::UI::Text::FormatEffect WidowControl() const;
	void WidowControl(Windows::UI::Text::FormatEffect value) const;
	int TabCount() const;
	void AddTab(float position, Windows::UI::Text::TabAlignment align, Windows::UI::Text::TabLeader leader) const;
	void ClearAllTabs() const;
	void DeleteTab(float position) const;
	Windows::UI::Text::ITextParagraphFormat GetClone() const;
	void GetTab(int index, float & position, Windows::UI::Text::TabAlignment & align, Windows::UI::Text::TabLeader & leader) const;
	bool IsEqual(Windows::UI::Text::ITextParagraphFormat const & format) const;
	void SetClone(Windows::UI::Text::ITextParagraphFormat const & format) const;
	void SetIndents(float start, float left, float right) const;
	void SetLineSpacing(Windows::UI::Text::LineSpacingRule rule, float spacing) const;
};

template <typename T>
struct impl_IFontWeights
{
};

template <typename T>
struct impl_IFontWeightsStatics
{
	Windows::UI::Text::FontWeight Black() const;
	Windows::UI::Text::FontWeight Bold() const;
	Windows::UI::Text::FontWeight ExtraBlack() const;
	Windows::UI::Text::FontWeight ExtraBold() const;
	Windows::UI::Text::FontWeight ExtraLight() const;
	Windows::UI::Text::FontWeight Light() const;
	Windows::UI::Text::FontWeight Medium() const;
	Windows::UI::Text::FontWeight Normal() const;
	Windows::UI::Text::FontWeight SemiBold() const;
	Windows::UI::Text::FontWeight SemiLight() const;
	Windows::UI::Text::FontWeight Thin() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

template <typename T>
struct impl_IApplicationViewSwitcherStatics
{
	void DisableShowingMainViewOnActivation() const;
	Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId) const;
	Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference) const;
	Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference, int anchorViewId, Windows::UI::ViewManagement::ViewSizePreference anchorSizePreference) const;
	Windows::Foundation::IAsyncAction SwitchAsync(int viewId) const;
	Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId) const;
	Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options) const;
	Windows::Foundation::IAsyncOperation<bool> PrepareForCustomAnimatedSwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options) const;
};

template <typename T>
struct impl_IApplicationViewInteropStatics
{
	int GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window) const;
};

template <typename T>
struct impl_IApplicationViewStatics2
{
	Windows::UI::ViewManagement::ApplicationView GetForCurrentView() const;
	bool TerminateAppOnFinalViewClose() const;
	void TerminateAppOnFinalViewClose(bool value) const;
};

template <typename T>
struct impl_IApplicationView
{
	Windows::UI::ViewManagement::ApplicationViewOrientation Orientation() const;
	bool AdjacentToLeftDisplayEdge() const;
	bool AdjacentToRightDisplayEdge() const;
	bool IsFullScreen() const;
	bool IsOnLockScreen() const;
	bool IsScreenCaptureEnabled() const;
	void IsScreenCaptureEnabled(bool value) const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Title() const;
	int Id() const;
	EventRegistrationToken Consolidated(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::ApplicationView, Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Consolidated(F handler) const;
	void Consolidated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IApplicationViewConsolidatedEventArgs
{
	bool IsUserInitiated() const;
};

template <typename T>
struct impl_IProjectionManagerStatics
{
	Windows::Foundation::IAsyncAction StartProjectingAsync(int projectionViewId, int anchorViewId) const;
	Windows::Foundation::IAsyncAction SwapDisplaysForViewsAsync(int projectionViewId, int anchorViewId) const;
	Windows::Foundation::IAsyncAction StopProjectingAsync(int projectionViewId, int anchorViewId) const;
	bool ProjectionDisplayAvailable() const;
	EventRegistrationToken ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken ProjectionDisplayAvailableChanged(F handler) const;
	void ProjectionDisplayAvailableChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IInputPaneVisibilityEventArgs
{
	Windows::Foundation::Rect OccludedRect() const;
	void EnsuredFocusedElementInView(bool value) const;
	bool EnsuredFocusedElementInView() const;
};

template <typename T>
struct impl_IInputPane
{
	EventRegistrationToken Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Showing(F handler) const;
	void Showing(EventRegistrationToken token) const;
	EventRegistrationToken Hiding(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Hiding(F handler) const;
	void Hiding(EventRegistrationToken token) const;
	Windows::Foundation::Rect OccludedRect() const;
};

template <typename T>
struct impl_IInputPaneStatics
{
	Windows::UI::ViewManagement::InputPane GetForCurrentView() const;
};

template <typename T>
struct impl_IAccessibilitySettings
{
	bool HighContrast() const;
	String HighContrastScheme() const;
	EventRegistrationToken HighContrastChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::AccessibilitySettings, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken HighContrastChanged(F handler) const;
	void HighContrastChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IUISettings
{
	Windows::UI::ViewManagement::HandPreference HandPreference() const;
	Windows::Foundation::Size CursorSize() const;
	Windows::Foundation::Size ScrollBarSize() const;
	Windows::Foundation::Size ScrollBarArrowSize() const;
	Windows::Foundation::Size ScrollBarThumbBoxSize() const;
	unsigned MessageDuration() const;
	bool AnimationsEnabled() const;
	bool CaretBrowsingEnabled() const;
	unsigned CaretBlinkRate() const;
	unsigned CaretWidth() const;
	unsigned DoubleClickTime() const;
	unsigned MouseHoverTime() const;
	Windows::UI::Color UIElementColor(Windows::UI::ViewManagement::UIElementType desiredElement) const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

template <typename T>
struct impl_IActivatedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::ApplicationModel::Activation::IActivatedEventArgs const & eventArgs) const;
};

template <typename T>
struct impl_IResumingEventHandler
{
	void Invoke(IInspectable const & sender) const;
};

template <typename T>
struct impl_ISuspendingEventHandler
{
	void Invoke(IInspectable const & sender, Windows::ApplicationModel::ISuspendingEventArgs const & e) const;
};

template <typename T>
struct impl_INavigatedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::WebUI::IWebUINavigatedEventArgs const & e) const;
};

template <typename T>
struct impl_IActivatedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IActivatedOperation
{
	Windows::UI::WebUI::ActivatedDeferral GetDeferral() const;
};

template <typename T>
struct impl_IActivatedEventArgsDeferral
{
	Windows::UI::WebUI::ActivatedOperation ActivatedOperation() const;
};

template <typename T>
struct impl_IWebUINavigatedEventArgs
{
	Windows::UI::WebUI::WebUINavigatedOperation NavigatedOperation() const;
};

template <typename T>
struct impl_IWebUIBackgroundTaskInstance
{
	bool Succeeded() const;
	void Succeeded(bool succeeded) const;
};

template <typename T>
struct impl_IWebUIBackgroundTaskInstanceStatics
{
	Windows::UI::WebUI::IWebUIBackgroundTaskInstance Current() const;
};

template <typename T>
struct impl_IWebUINavigatedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IWebUINavigatedOperation
{
	Windows::UI::WebUI::WebUINavigatedDeferral GetDeferral() const;
};

template <typename T>
struct impl_IWebUIActivationStatics
{
	EventRegistrationToken Activated(Windows::UI::WebUI::IActivatedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Activated(F handler) const;
	void Activated(EventRegistrationToken token) const;
	EventRegistrationToken Suspending(Windows::UI::WebUI::ISuspendingEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Suspending(F handler) const;
	void Suspending(EventRegistrationToken token) const;
	EventRegistrationToken Resuming(Windows::UI::WebUI::IResumingEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Resuming(F handler) const;
	void Resuming(EventRegistrationToken token) const;
	EventRegistrationToken Navigated(Windows::UI::WebUI::INavigatedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Navigated(F handler) const;
	void Navigated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IHtmlPrintDocumentSource
{
	Windows::UI::WebUI::PrintContent Content() const;
	void Content(Windows::UI::WebUI::PrintContent value) const;
	float LeftMargin() const;
	void LeftMargin(float value) const;
	float TopMargin() const;
	void TopMargin(float value) const;
	float RightMargin() const;
	void RightMargin(float value) const;
	float BottomMargin() const;
	void BottomMargin(float value) const;
	bool EnableHeaderFooter() const;
	void EnableHeaderFooter(bool value) const;
	bool ShrinkToFit() const;
	void ShrinkToFit(bool value) const;
	float PercentScale() const;
	void PercentScale(float scalePercent) const;
	String PageRange() const;
	bool TrySetPageRange(String const & strPageRange) const;
	template <unsigned S0> bool TrySetPageRange(wchar_t const (&strPageRange)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml {

template <typename T>
struct impl_ICreateDefaultValueCallback
{
	IInspectable Invoke() const;
};

template <typename T>
struct impl_IPropertyChangedCallback
{
	void Invoke(Windows::UI::Xaml::DependencyObject const & d, Windows::UI::Xaml::DependencyPropertyChangedEventArgs const & e) const;
};

template <typename T>
struct impl_IApplicationInitializationCallback
{
	void Invoke(Windows::UI::Xaml::ApplicationInitializationCallbackParams const & p) const;
};

template <typename T>
struct impl_IBindingFailedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::BindingFailedEventArgs const & e) const;
};

template <typename T>
struct impl_IDependencyPropertyChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::DependencyPropertyChangedEventArgs const & e) const;
};

template <typename T>
struct impl_IDragEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::DragEventArgs const & e) const;
};

template <typename T>
struct impl_IExceptionRoutedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::ExceptionRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IRoutedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::RoutedEventArgs const & e) const;
};

template <typename T>
struct impl_ISizeChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::SizeChangedEventArgs const & e) const;
};

template <typename T>
struct impl_ISuspendingEventHandler
{
	void Invoke(IInspectable const & sender, Windows::ApplicationModel::SuspendingEventArgs const & e) const;
};

template <typename T>
struct impl_IUnhandledExceptionEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::UnhandledExceptionEventArgs const & e) const;
};

template <typename T>
struct impl_IVisualStateChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::VisualStateChangedEventArgs const & e) const;
};

template <typename T>
struct impl_IWindowActivatedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Core::WindowActivatedEventArgs const & e) const;
};

template <typename T>
struct impl_IWindowClosedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Core::CoreWindowEventArgs const & e) const;
};

template <typename T>
struct impl_IWindowSizeChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Core::WindowSizeChangedEventArgs const & e) const;
};

template <typename T>
struct impl_IWindowVisibilityChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Core::VisibilityChangedEventArgs const & e) const;
};

template <typename T>
struct impl_ICornerRadiusHelper
{
};

template <typename T>
struct impl_ICornerRadiusHelperStatics
{
	Windows::UI::Xaml::CornerRadius FromRadii(double topLeft, double topRight, double bottomRight, double bottomLeft) const;
	Windows::UI::Xaml::CornerRadius FromUniformRadius(double uniformRadius) const;
};

template <typename T>
struct impl_IDurationHelper
{
};

template <typename T>
struct impl_IDurationHelperStatics
{
	Windows::UI::Xaml::Duration Automatic() const;
	Windows::UI::Xaml::Duration Forever() const;
	int Compare(Windows::UI::Xaml::Duration const & duration1, Windows::UI::Xaml::Duration const & duration2) const;
	Windows::UI::Xaml::Duration FromTimeSpan(Windows::Foundation::TimeSpan const & timeSpan) const;
	bool GetHasTimeSpan(Windows::UI::Xaml::Duration const & target) const;
	Windows::UI::Xaml::Duration Add(Windows::UI::Xaml::Duration const & target, Windows::UI::Xaml::Duration const & duration) const;
	bool Equals(Windows::UI::Xaml::Duration const & target, Windows::UI::Xaml::Duration const & value) const;
	Windows::UI::Xaml::Duration Subtract(Windows::UI::Xaml::Duration const & target, Windows::UI::Xaml::Duration const & duration) const;
};

template <typename T>
struct impl_IGridLengthHelper
{
};

template <typename T>
struct impl_IGridLengthHelperStatics
{
	Windows::UI::Xaml::GridLength Auto() const;
	Windows::UI::Xaml::GridLength FromPixels(double pixels) const;
	Windows::UI::Xaml::GridLength FromValueAndType(double value, Windows::UI::Xaml::GridUnitType type) const;
	bool GetIsAbsolute(Windows::UI::Xaml::GridLength const & target) const;
	bool GetIsAuto(Windows::UI::Xaml::GridLength const & target) const;
	bool GetIsStar(Windows::UI::Xaml::GridLength const & target) const;
	bool Equals(Windows::UI::Xaml::GridLength const & target, Windows::UI::Xaml::GridLength const & value) const;
};

template <typename T>
struct impl_IPointHelper
{
};

template <typename T>
struct impl_IPointHelperStatics
{
	Windows::Foundation::Point FromCoordinates(float x, float y) const;
};

template <typename T>
struct impl_IRectHelper
{
};

template <typename T>
struct impl_IRectHelperStatics
{
	Windows::Foundation::Rect Empty() const;
	Windows::Foundation::Rect FromCoordinatesAndDimensions(float x, float y, float width, float height) const;
	Windows::Foundation::Rect FromPoints(Windows::Foundation::Point const & point1, Windows::Foundation::Point const & point2) const;
	Windows::Foundation::Rect FromLocationAndSize(Windows::Foundation::Point const & location, Windows::Foundation::Size const & size) const;
	bool GetIsEmpty(Windows::Foundation::Rect const & target) const;
	float GetBottom(Windows::Foundation::Rect const & target) const;
	float GetLeft(Windows::Foundation::Rect const & target) const;
	float GetRight(Windows::Foundation::Rect const & target) const;
	float GetTop(Windows::Foundation::Rect const & target) const;
	bool Contains(Windows::Foundation::Rect const & target, Windows::Foundation::Point const & point) const;
	bool Equals(Windows::Foundation::Rect const & target, Windows::Foundation::Rect const & value) const;
	Windows::Foundation::Rect Intersect(Windows::Foundation::Rect const & target, Windows::Foundation::Rect const & rect) const;
	Windows::Foundation::Rect Union(Windows::Foundation::Rect const & target, Windows::Foundation::Point const & point) const;
	Windows::Foundation::Rect Union(Windows::Foundation::Rect const & target, Windows::Foundation::Rect const & rect) const;
};

template <typename T>
struct impl_ISizeHelper
{
};

template <typename T>
struct impl_ISizeHelperStatics
{
	Windows::Foundation::Size Empty() const;
	Windows::Foundation::Size FromDimensions(float width, float height) const;
	bool GetIsEmpty(Windows::Foundation::Size const & target) const;
	bool Equals(Windows::Foundation::Size const & target, Windows::Foundation::Size const & value) const;
};

template <typename T>
struct impl_IThicknessHelper
{
};

template <typename T>
struct impl_IThicknessHelperStatics
{
	Windows::UI::Xaml::Thickness FromLengths(double left, double top, double right, double bottom) const;
	Windows::UI::Xaml::Thickness FromUniformLength(double uniformLength) const;
};

template <typename T>
struct impl_IApplicationInitializationCallbackParams
{
};

template <typename T>
struct impl_IBindingFailedEventArgs
{
	String Message() const;
};

template <typename T>
struct impl_IDataContextChangedEventArgs
{
	IInspectable NewValue() const;
	bool Handled() const;
	void Handled(bool value) const;
};

template <typename T>
struct impl_IDataTemplate
{
	Windows::UI::Xaml::DependencyObject LoadContent() const;
};

template <typename T>
struct impl_IDataTemplateFactory
{
	Windows::UI::Xaml::DataTemplate CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDataTemplateKey
{
	IInspectable DataType() const;
	void DataType(IInspectable const & value) const;
};

template <typename T>
struct impl_IDataTemplateKeyFactory
{
	Windows::UI::Xaml::DataTemplateKey CreateInstance(IInspectable const & outer, IInspectable & inner) const;
	Windows::UI::Xaml::DataTemplateKey CreateInstanceWithType(IInspectable const & dataType, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDebugSettings
{
	bool EnableFrameRateCounter() const;
	void EnableFrameRateCounter(bool value) const;
	bool IsBindingTracingEnabled() const;
	void IsBindingTracingEnabled(bool value) const;
	bool IsOverdrawHeatMapEnabled() const;
	void IsOverdrawHeatMapEnabled(bool value) const;
	EventRegistrationToken BindingFailed(Windows::UI::Xaml::IBindingFailedEventHandler const & value) const;
	template <typename F> EventRegistrationToken BindingFailed(F value) const;
	void BindingFailed(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IDebugSettings2
{
	bool EnableRedrawRegions() const;
	void EnableRedrawRegions(bool value) const;
};

template <typename T>
struct impl_IDependencyObject
{
	IInspectable GetValue(Windows::UI::Xaml::DependencyProperty const & dp) const;
	void SetValue(Windows::UI::Xaml::DependencyProperty const & dp, IInspectable const & value) const;
	void ClearValue(Windows::UI::Xaml::DependencyProperty const & dp) const;
	IInspectable ReadLocalValue(Windows::UI::Xaml::DependencyProperty const & dp) const;
	IInspectable GetAnimationBaseValue(Windows::UI::Xaml::DependencyProperty const & dp) const;
	Windows::UI::Core::CoreDispatcher Dispatcher() const;
};

template <typename T>
struct impl_IDependencyObjectFactory
{
	Windows::UI::Xaml::DependencyObject CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDependencyObjectCollectionFactory
{
	Windows::UI::Xaml::DependencyObjectCollection CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDependencyProperty
{
	Windows::UI::Xaml::PropertyMetadata GetMetadata(Windows::UI::Xaml::Interop::TypeName const & forType) const;
};

template <typename T>
struct impl_IDependencyPropertyStatics
{
	IInspectable UnsetValue() const;
	Windows::UI::Xaml::DependencyProperty Register(String const & name, Windows::UI::Xaml::Interop::TypeName const & propertyType, Windows::UI::Xaml::Interop::TypeName const & ownerType, Windows::UI::Xaml::PropertyMetadata const & typeMetadata) const;
	template <unsigned S0> Windows::UI::Xaml::DependencyProperty Register(wchar_t const (&name)[S0], Windows::UI::Xaml::Interop::TypeName const & propertyType, Windows::UI::Xaml::Interop::TypeName const & ownerType, Windows::UI::Xaml::PropertyMetadata const & typeMetadata) const;
	Windows::UI::Xaml::DependencyProperty RegisterAttached(String const & name, Windows::UI::Xaml::Interop::TypeName const & propertyType, Windows::UI::Xaml::Interop::TypeName const & ownerType, Windows::UI::Xaml::PropertyMetadata const & defaultMetadata) const;
	template <unsigned S0> Windows::UI::Xaml::DependencyProperty RegisterAttached(wchar_t const (&name)[S0], Windows::UI::Xaml::Interop::TypeName const & propertyType, Windows::UI::Xaml::Interop::TypeName const & ownerType, Windows::UI::Xaml::PropertyMetadata const & defaultMetadata) const;
};

template <typename T>
struct impl_IDependencyPropertyChangedEventArgs
{
	Windows::UI::Xaml::DependencyProperty Property() const;
	IInspectable OldValue() const;
	IInspectable NewValue() const;
};

template <typename T>
struct impl_IDispatcherTimer
{
	Windows::Foundation::TimeSpan Interval() const;
	void Interval(Windows::Foundation::TimeSpan const & value) const;
	bool IsEnabled() const;
	EventRegistrationToken Tick(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Tick(F value) const;
	void Tick(EventRegistrationToken token) const;
	void Start() const;
	void Stop() const;
};

template <typename T>
struct impl_IDispatcherTimerFactory
{
	Windows::UI::Xaml::DispatcherTimer CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDragEventArgs
{
	bool Handled() const;
	void Handled(bool value) const;
	Windows::ApplicationModel::DataTransfer::DataPackage Data() const;
	void Data(Windows::ApplicationModel::DataTransfer::DataPackage const & value) const;
	Windows::Foundation::Point GetPosition(Windows::UI::Xaml::UIElement const & relativeTo) const;
};

template <typename T>
struct impl_IEventTrigger
{
	Windows::UI::Xaml::RoutedEvent RoutedEvent() const;
	void RoutedEvent(Windows::UI::Xaml::RoutedEvent const & value) const;
	Windows::UI::Xaml::TriggerActionCollection Actions() const;
};

template <typename T>
struct impl_IExceptionRoutedEventArgs
{
	String ErrorMessage() const;
};

template <typename T>
struct impl_IExceptionRoutedEventArgsFactory
{
};

template <typename T>
struct impl_IApplication
{
	Windows::UI::Xaml::ResourceDictionary Resources() const;
	void Resources(Windows::UI::Xaml::ResourceDictionary const & value) const;
	Windows::UI::Xaml::DebugSettings DebugSettings() const;
	Windows::UI::Xaml::ApplicationTheme RequestedTheme() const;
	void RequestedTheme(Windows::UI::Xaml::ApplicationTheme value) const;
	EventRegistrationToken UnhandledException(Windows::UI::Xaml::IUnhandledExceptionEventHandler const & value) const;
	template <typename F> EventRegistrationToken UnhandledException(F value) const;
	void UnhandledException(EventRegistrationToken token) const;
	EventRegistrationToken Suspending(Windows::UI::Xaml::ISuspendingEventHandler const & value) const;
	template <typename F> EventRegistrationToken Suspending(F value) const;
	void Suspending(EventRegistrationToken token) const;
	EventRegistrationToken Resuming(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Resuming(F value) const;
	void Resuming(EventRegistrationToken token) const;
	void Exit() const;
};

template <typename T>
struct impl_IApplicationOverrides
{
	void OnActivated(Windows::ApplicationModel::Activation::IActivatedEventArgs const & args) const;
	void OnLaunched(Windows::ApplicationModel::Activation::LaunchActivatedEventArgs const & args) const;
	void OnFileActivated(Windows::ApplicationModel::Activation::FileActivatedEventArgs const & args) const;
	void OnSearchActivated(Windows::ApplicationModel::Activation::SearchActivatedEventArgs const & args) const;
	void OnShareTargetActivated(Windows::ApplicationModel::Activation::ShareTargetActivatedEventArgs const & args) const;
	void OnFileOpenPickerActivated(Windows::ApplicationModel::Activation::FileOpenPickerActivatedEventArgs const & args) const;
	void OnFileSavePickerActivated(Windows::ApplicationModel::Activation::FileSavePickerActivatedEventArgs const & args) const;
	void OnCachedFileUpdaterActivated(Windows::ApplicationModel::Activation::CachedFileUpdaterActivatedEventArgs const & args) const;
	void OnWindowCreated(Windows::UI::Xaml::WindowCreatedEventArgs const & args) const;
};

template <typename T>
struct impl_IApplicationStatics
{
	Windows::UI::Xaml::Application Current() const;
	void Start(Windows::UI::Xaml::IApplicationInitializationCallback const & callback) const;
	template <typename F> void Start(F callback) const;
	void LoadComponent(IInspectable const & component, Windows::Foundation::Uri const & resourceLocator) const;
	void LoadComponent(IInspectable const & component, Windows::Foundation::Uri const & resourceLocator, Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation componentResourceLocation) const;
};

template <typename T>
struct impl_IApplicationFactory
{
	Windows::UI::Xaml::Application CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFrameworkElement
{
	Windows::UI::Xaml::TriggerCollection Triggers() const;
	Windows::UI::Xaml::ResourceDictionary Resources() const;
	void Resources(Windows::UI::Xaml::ResourceDictionary const & value) const;
	IInspectable Tag() const;
	void Tag(IInspectable const & value) const;
	String Language() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	double ActualWidth() const;
	double ActualHeight() const;
	double Width() const;
	void Width(double value) const;
	double Height() const;
	void Height(double value) const;
	double MinWidth() const;
	void MinWidth(double value) const;
	double MaxWidth() const;
	void MaxWidth(double value) const;
	double MinHeight() const;
	void MinHeight(double value) const;
	double MaxHeight() const;
	void MaxHeight(double value) const;
	Windows::UI::Xaml::HorizontalAlignment HorizontalAlignment() const;
	void HorizontalAlignment(Windows::UI::Xaml::HorizontalAlignment value) const;
	Windows::UI::Xaml::VerticalAlignment VerticalAlignment() const;
	void VerticalAlignment(Windows::UI::Xaml::VerticalAlignment value) const;
	Windows::UI::Xaml::Thickness Margin() const;
	void Margin(Windows::UI::Xaml::Thickness const & value) const;
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri BaseUri() const;
	IInspectable DataContext() const;
	void DataContext(IInspectable const & value) const;
	Windows::UI::Xaml::Style Style() const;
	void Style(Windows::UI::Xaml::Style const & value) const;
	Windows::UI::Xaml::DependencyObject Parent() const;
	Windows::UI::Xaml::FlowDirection FlowDirection() const;
	void FlowDirection(Windows::UI::Xaml::FlowDirection value) const;
	EventRegistrationToken Loaded(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Loaded(F value) const;
	void Loaded(EventRegistrationToken token) const;
	EventRegistrationToken Unloaded(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Unloaded(F value) const;
	void Unloaded(EventRegistrationToken token) const;
	EventRegistrationToken SizeChanged(Windows::UI::Xaml::ISizeChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken SizeChanged(F value) const;
	void SizeChanged(EventRegistrationToken token) const;
	EventRegistrationToken LayoutUpdated(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken LayoutUpdated(F value) const;
	void LayoutUpdated(EventRegistrationToken token) const;
	IInspectable FindName(String const & name) const;
	template <unsigned S0> IInspectable FindName(wchar_t const (&name)[S0]) const;
	void SetBinding(Windows::UI::Xaml::DependencyProperty const & dp, Windows::UI::Xaml::Data::BindingBase const & binding) const;
};

template <typename T>
struct impl_IFrameworkElementOverrides
{
	Windows::Foundation::Size MeasureOverride(Windows::Foundation::Size const & availableSize) const;
	Windows::Foundation::Size ArrangeOverride(Windows::Foundation::Size const & finalSize) const;
	void OnApplyTemplate() const;
};

template <typename T>
struct impl_IFrameworkElementStatics
{
	Windows::UI::Xaml::DependencyProperty TagProperty() const;
	Windows::UI::Xaml::DependencyProperty LanguageProperty() const;
	Windows::UI::Xaml::DependencyProperty ActualWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty ActualHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty WidthProperty() const;
	Windows::UI::Xaml::DependencyProperty HeightProperty() const;
	Windows::UI::Xaml::DependencyProperty MinWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty MinHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty MarginProperty() const;
	Windows::UI::Xaml::DependencyProperty NameProperty() const;
	Windows::UI::Xaml::DependencyProperty DataContextProperty() const;
	Windows::UI::Xaml::DependencyProperty StyleProperty() const;
	Windows::UI::Xaml::DependencyProperty FlowDirectionProperty() const;
};

template <typename T>
struct impl_IFrameworkElementFactory
{
	Windows::UI::Xaml::FrameworkElement CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFrameworkElement2
{
	Windows::UI::Xaml::ElementTheme RequestedTheme() const;
	void RequestedTheme(Windows::UI::Xaml::ElementTheme value) const;
	EventRegistrationToken DataContextChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::DataContextChangedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken DataContextChanged(F value) const;
	void DataContextChanged(EventRegistrationToken token) const;
	Windows::UI::Xaml::Data::BindingExpression GetBindingExpression(Windows::UI::Xaml::DependencyProperty const & dp) const;
};

template <typename T>
struct impl_IFrameworkElementOverrides2
{
	bool GoToElementStateCore(String const & stateName, bool useTransitions) const;
	template <unsigned S0> bool GoToElementStateCore(wchar_t const (&stateName)[S0], bool useTransitions) const;
};

template <typename T>
struct impl_IFrameworkElementStatics2
{
	Windows::UI::Xaml::DependencyProperty RequestedThemeProperty() const;
};

template <typename T>
struct impl_IFrameworkTemplate
{
};

template <typename T>
struct impl_IFrameworkTemplateFactory
{
	Windows::UI::Xaml::FrameworkTemplate CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFrameworkView
{
};

template <typename T>
struct impl_IFrameworkViewSource
{
};

template <typename T>
struct impl_IMediaFailedRoutedEventArgs
{
	String ErrorTrace() const;
};

template <typename T>
struct impl_IPropertyMetadata
{
	IInspectable DefaultValue() const;
	Windows::UI::Xaml::ICreateDefaultValueCallback CreateDefaultValueCallback() const;
};

template <typename T>
struct impl_IPropertyMetadataStatics
{
	Windows::UI::Xaml::PropertyMetadata Create(IInspectable const & defaultValue) const;
	Windows::UI::Xaml::PropertyMetadata Create(IInspectable const & defaultValue, Windows::UI::Xaml::IPropertyChangedCallback const & propertyChangedCallback) const;
	template <typename F> Windows::UI::Xaml::PropertyMetadata Create(IInspectable const & defaultValue, F propertyChangedCallback) const;
	Windows::UI::Xaml::PropertyMetadata Create(Windows::UI::Xaml::ICreateDefaultValueCallback const & createDefaultValueCallback) const;
	template <typename F> Windows::UI::Xaml::PropertyMetadata Create(F createDefaultValueCallback) const;
	Windows::UI::Xaml::PropertyMetadata Create(Windows::UI::Xaml::ICreateDefaultValueCallback const & createDefaultValueCallback, Windows::UI::Xaml::IPropertyChangedCallback const & propertyChangedCallback) const;
	template <typename F> Windows::UI::Xaml::PropertyMetadata Create(F createDefaultValueCallback, F propertyChangedCallback) const;
};

template <typename T>
struct impl_IPropertyMetadataFactory
{
	Windows::UI::Xaml::PropertyMetadata CreateInstanceWithDefaultValue(IInspectable const & defaultValue, IInspectable const & outer, IInspectable & inner) const;
	Windows::UI::Xaml::PropertyMetadata CreateInstanceWithDefaultValueAndCallback(IInspectable const & defaultValue, Windows::UI::Xaml::IPropertyChangedCallback const & propertyChangedCallback, IInspectable const & outer, IInspectable & inner) const;
	template <typename F> Windows::UI::Xaml::PropertyMetadata CreateInstanceWithDefaultValueAndCallback(IInspectable const & defaultValue, F propertyChangedCallback, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IPropertyPath
{
	String Path() const;
};

template <typename T>
struct impl_IPropertyPathFactory
{
	Windows::UI::Xaml::PropertyPath CreateInstance(String const & path) const;
	template <unsigned S0> Windows::UI::Xaml::PropertyPath CreateInstance(wchar_t const (&path)[S0]) const;
};

template <typename T>
struct impl_IResourceDictionary
{
	Windows::Foundation::Uri Source() const;
	void Source(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::ResourceDictionary> MergedDictionaries() const;
	Windows::Foundation::Collections::IMap<IInspectable, IInspectable> ThemeDictionaries() const;
};

template <typename T>
struct impl_IResourceDictionaryFactory
{
	Windows::UI::Xaml::ResourceDictionary CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRoutedEvent
{
};

template <typename T>
struct impl_IRoutedEventArgs
{
	IInspectable OriginalSource() const;
};

template <typename T>
struct impl_IRoutedEventArgsFactory
{
	Windows::UI::Xaml::RoutedEventArgs CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISetter
{
	Windows::UI::Xaml::DependencyProperty Property() const;
	void Property(Windows::UI::Xaml::DependencyProperty const & value) const;
	IInspectable Value() const;
	void Value(IInspectable const & value) const;
};

template <typename T>
struct impl_ISetterFactory
{
	Windows::UI::Xaml::Setter CreateInstance(Windows::UI::Xaml::DependencyProperty const & targetProperty, IInspectable const & value) const;
};

template <typename T>
struct impl_ISetterBase
{
	bool IsSealed() const;
};

template <typename T>
struct impl_ISetterBaseFactory
{
};

template <typename T>
struct impl_ISetterBaseCollection
{
	bool IsSealed() const;
};

template <typename T>
struct impl_ISizeChangedEventArgs
{
	Windows::Foundation::Size PreviousSize() const;
	Windows::Foundation::Size NewSize() const;
};

template <typename T>
struct impl_IStyle
{
	bool IsSealed() const;
	Windows::UI::Xaml::SetterBaseCollection Setters() const;
	Windows::UI::Xaml::Interop::TypeName TargetType() const;
	void TargetType(Windows::UI::Xaml::Interop::TypeName const & value) const;
	Windows::UI::Xaml::Style BasedOn() const;
	void BasedOn(Windows::UI::Xaml::Style const & value) const;
	void Seal() const;
};

template <typename T>
struct impl_IStyleFactory
{
	Windows::UI::Xaml::Style CreateInstance(Windows::UI::Xaml::Interop::TypeName const & targetType) const;
};

template <typename T>
struct impl_ITriggerAction
{
};

template <typename T>
struct impl_ITriggerActionFactory
{
};

template <typename T>
struct impl_ITriggerBase
{
};

template <typename T>
struct impl_ITriggerBaseFactory
{
};

template <typename T>
struct impl_IUIElement
{
	Windows::Foundation::Size DesiredSize() const;
	bool AllowDrop() const;
	void AllowDrop(bool value) const;
	double Opacity() const;
	void Opacity(double value) const;
	Windows::UI::Xaml::Media::RectangleGeometry Clip() const;
	void Clip(Windows::UI::Xaml::Media::RectangleGeometry const & value) const;
	Windows::UI::Xaml::Media::Transform RenderTransform() const;
	void RenderTransform(Windows::UI::Xaml::Media::Transform const & value) const;
	Windows::UI::Xaml::Media::Projection Projection() const;
	void Projection(Windows::UI::Xaml::Media::Projection const & value) const;
	Windows::Foundation::Point RenderTransformOrigin() const;
	void RenderTransformOrigin(Windows::Foundation::Point const & value) const;
	bool IsHitTestVisible() const;
	void IsHitTestVisible(bool value) const;
	Windows::UI::Xaml::Visibility Visibility() const;
	void Visibility(Windows::UI::Xaml::Visibility value) const;
	Windows::Foundation::Size RenderSize() const;
	bool UseLayoutRounding() const;
	void UseLayoutRounding(bool value) const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection Transitions() const;
	void Transitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
	Windows::UI::Xaml::Media::CacheMode CacheMode() const;
	void CacheMode(Windows::UI::Xaml::Media::CacheMode const & value) const;
	bool IsTapEnabled() const;
	void IsTapEnabled(bool value) const;
	bool IsDoubleTapEnabled() const;
	void IsDoubleTapEnabled(bool value) const;
	bool IsRightTapEnabled() const;
	void IsRightTapEnabled(bool value) const;
	bool IsHoldingEnabled() const;
	void IsHoldingEnabled(bool value) const;
	Windows::UI::Xaml::Input::ManipulationModes ManipulationMode() const;
	void ManipulationMode(Windows::UI::Xaml::Input::ManipulationModes value) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Input::Pointer> PointerCaptures() const;
	EventRegistrationToken KeyUp(Windows::UI::Xaml::Input::IKeyEventHandler const & value) const;
	template <typename F> EventRegistrationToken KeyUp(F value) const;
	void KeyUp(EventRegistrationToken token) const;
	EventRegistrationToken KeyDown(Windows::UI::Xaml::Input::IKeyEventHandler const & value) const;
	template <typename F> EventRegistrationToken KeyDown(F value) const;
	void KeyDown(EventRegistrationToken token) const;
	EventRegistrationToken GotFocus(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken GotFocus(F value) const;
	void GotFocus(EventRegistrationToken token) const;
	EventRegistrationToken LostFocus(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken LostFocus(F value) const;
	void LostFocus(EventRegistrationToken token) const;
	EventRegistrationToken DragEnter(Windows::UI::Xaml::IDragEventHandler const & value) const;
	template <typename F> EventRegistrationToken DragEnter(F value) const;
	void DragEnter(EventRegistrationToken token) const;
	EventRegistrationToken DragLeave(Windows::UI::Xaml::IDragEventHandler const & value) const;
	template <typename F> EventRegistrationToken DragLeave(F value) const;
	void DragLeave(EventRegistrationToken token) const;
	EventRegistrationToken DragOver(Windows::UI::Xaml::IDragEventHandler const & value) const;
	template <typename F> EventRegistrationToken DragOver(F value) const;
	void DragOver(EventRegistrationToken token) const;
	EventRegistrationToken Drop(Windows::UI::Xaml::IDragEventHandler const & value) const;
	template <typename F> EventRegistrationToken Drop(F value) const;
	void Drop(EventRegistrationToken token) const;
	EventRegistrationToken PointerPressed(Windows::UI::Xaml::Input::IPointerEventHandler const & value) const;
	template <typename F> EventRegistrationToken PointerPressed(F value) const;
	void PointerPressed(EventRegistrationToken token) const;
	EventRegistrationToken PointerMoved(Windows::UI::Xaml::Input::IPointerEventHandler const & value) const;
	template <typename F> EventRegistrationToken PointerMoved(F value) const;
	void PointerMoved(EventRegistrationToken token) const;
	EventRegistrationToken PointerReleased(Windows::UI::Xaml::Input::IPointerEventHandler const & value) const;
	template <typename F> EventRegistrationToken PointerReleased(F value) const;
	void PointerReleased(EventRegistrationToken token) const;
	EventRegistrationToken PointerEntered(Windows::UI::Xaml::Input::IPointerEventHandler const & value) const;
	template <typename F> EventRegistrationToken PointerEntered(F value) const;
	void PointerEntered(EventRegistrationToken token) const;
	EventRegistrationToken PointerExited(Windows::UI::Xaml::Input::IPointerEventHandler const & value) const;
	template <typename F> EventRegistrationToken PointerExited(F value) const;
	void PointerExited(EventRegistrationToken token) const;
	EventRegistrationToken PointerCaptureLost(Windows::UI::Xaml::Input::IPointerEventHandler const & value) const;
	template <typename F> EventRegistrationToken PointerCaptureLost(F value) const;
	void PointerCaptureLost(EventRegistrationToken token) const;
	EventRegistrationToken PointerCanceled(Windows::UI::Xaml::Input::IPointerEventHandler const & value) const;
	template <typename F> EventRegistrationToken PointerCanceled(F value) const;
	void PointerCanceled(EventRegistrationToken token) const;
	EventRegistrationToken PointerWheelChanged(Windows::UI::Xaml::Input::IPointerEventHandler const & value) const;
	template <typename F> EventRegistrationToken PointerWheelChanged(F value) const;
	void PointerWheelChanged(EventRegistrationToken token) const;
	EventRegistrationToken Tapped(Windows::UI::Xaml::Input::ITappedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Tapped(F value) const;
	void Tapped(EventRegistrationToken token) const;
	EventRegistrationToken DoubleTapped(Windows::UI::Xaml::Input::IDoubleTappedEventHandler const & value) const;
	template <typename F> EventRegistrationToken DoubleTapped(F value) const;
	void DoubleTapped(EventRegistrationToken token) const;
	EventRegistrationToken Holding(Windows::UI::Xaml::Input::IHoldingEventHandler const & value) const;
	template <typename F> EventRegistrationToken Holding(F value) const;
	void Holding(EventRegistrationToken token) const;
	EventRegistrationToken RightTapped(Windows::UI::Xaml::Input::IRightTappedEventHandler const & value) const;
	template <typename F> EventRegistrationToken RightTapped(F value) const;
	void RightTapped(EventRegistrationToken token) const;
	EventRegistrationToken ManipulationStarting(Windows::UI::Xaml::Input::IManipulationStartingEventHandler const & value) const;
	template <typename F> EventRegistrationToken ManipulationStarting(F value) const;
	void ManipulationStarting(EventRegistrationToken token) const;
	EventRegistrationToken ManipulationInertiaStarting(Windows::UI::Xaml::Input::IManipulationInertiaStartingEventHandler const & value) const;
	template <typename F> EventRegistrationToken ManipulationInertiaStarting(F value) const;
	void ManipulationInertiaStarting(EventRegistrationToken token) const;
	EventRegistrationToken ManipulationStarted(Windows::UI::Xaml::Input::IManipulationStartedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ManipulationStarted(F value) const;
	void ManipulationStarted(EventRegistrationToken token) const;
	EventRegistrationToken ManipulationDelta(Windows::UI::Xaml::Input::IManipulationDeltaEventHandler const & value) const;
	template <typename F> EventRegistrationToken ManipulationDelta(F value) const;
	void ManipulationDelta(EventRegistrationToken token) const;
	EventRegistrationToken ManipulationCompleted(Windows::UI::Xaml::Input::IManipulationCompletedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ManipulationCompleted(F value) const;
	void ManipulationCompleted(EventRegistrationToken token) const;
	void Measure(Windows::Foundation::Size const & availableSize) const;
	void Arrange(Windows::Foundation::Rect const & finalRect) const;
	bool CapturePointer(Windows::UI::Xaml::Input::Pointer const & value) const;
	void ReleasePointerCapture(Windows::UI::Xaml::Input::Pointer const & value) const;
	void ReleasePointerCaptures() const;
	void AddHandler(Windows::UI::Xaml::RoutedEvent const & routedEvent, IInspectable const & handler, bool handledEventsToo) const;
	void RemoveHandler(Windows::UI::Xaml::RoutedEvent const & routedEvent, IInspectable const & handler) const;
	Windows::UI::Xaml::Media::GeneralTransform TransformToVisual(Windows::UI::Xaml::UIElement const & visual) const;
	void InvalidateMeasure() const;
	void InvalidateArrange() const;
	void UpdateLayout() const;
};

template <typename T>
struct impl_IUIElementOverrides
{
	Windows::UI::Xaml::Automation::Peers::AutomationPeer OnCreateAutomationPeer() const;
	void OnDisconnectVisualChildren() const;
	Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IIterable<Modern::Windows::Foundation::Point>> FindSubElementsForTouchTargeting(Windows::Foundation::Point const & point, Windows::Foundation::Rect const & boundingRect) const;
};

template <typename T>
struct impl_IUIElementStatics
{
	Windows::UI::Xaml::RoutedEvent KeyDownEvent() const;
	Windows::UI::Xaml::RoutedEvent KeyUpEvent() const;
	Windows::UI::Xaml::RoutedEvent PointerEnteredEvent() const;
	Windows::UI::Xaml::RoutedEvent PointerPressedEvent() const;
	Windows::UI::Xaml::RoutedEvent PointerMovedEvent() const;
	Windows::UI::Xaml::RoutedEvent PointerReleasedEvent() const;
	Windows::UI::Xaml::RoutedEvent PointerExitedEvent() const;
	Windows::UI::Xaml::RoutedEvent PointerCaptureLostEvent() const;
	Windows::UI::Xaml::RoutedEvent PointerCanceledEvent() const;
	Windows::UI::Xaml::RoutedEvent PointerWheelChangedEvent() const;
	Windows::UI::Xaml::RoutedEvent TappedEvent() const;
	Windows::UI::Xaml::RoutedEvent DoubleTappedEvent() const;
	Windows::UI::Xaml::RoutedEvent HoldingEvent() const;
	Windows::UI::Xaml::RoutedEvent RightTappedEvent() const;
	Windows::UI::Xaml::RoutedEvent ManipulationStartingEvent() const;
	Windows::UI::Xaml::RoutedEvent ManipulationInertiaStartingEvent() const;
	Windows::UI::Xaml::RoutedEvent ManipulationStartedEvent() const;
	Windows::UI::Xaml::RoutedEvent ManipulationDeltaEvent() const;
	Windows::UI::Xaml::RoutedEvent ManipulationCompletedEvent() const;
	Windows::UI::Xaml::RoutedEvent DragEnterEvent() const;
	Windows::UI::Xaml::RoutedEvent DragLeaveEvent() const;
	Windows::UI::Xaml::RoutedEvent DragOverEvent() const;
	Windows::UI::Xaml::RoutedEvent DropEvent() const;
	Windows::UI::Xaml::DependencyProperty AllowDropProperty() const;
	Windows::UI::Xaml::DependencyProperty OpacityProperty() const;
	Windows::UI::Xaml::DependencyProperty ClipProperty() const;
	Windows::UI::Xaml::DependencyProperty RenderTransformProperty() const;
	Windows::UI::Xaml::DependencyProperty ProjectionProperty() const;
	Windows::UI::Xaml::DependencyProperty RenderTransformOriginProperty() const;
	Windows::UI::Xaml::DependencyProperty IsHitTestVisibleProperty() const;
	Windows::UI::Xaml::DependencyProperty VisibilityProperty() const;
	Windows::UI::Xaml::DependencyProperty UseLayoutRoundingProperty() const;
	Windows::UI::Xaml::DependencyProperty TransitionsProperty() const;
	Windows::UI::Xaml::DependencyProperty CacheModeProperty() const;
	Windows::UI::Xaml::DependencyProperty IsTapEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty IsDoubleTapEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty IsRightTapEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty IsHoldingEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty ManipulationModeProperty() const;
	Windows::UI::Xaml::DependencyProperty PointerCapturesProperty() const;
};

template <typename T>
struct impl_IUIElementFactory
{
};

template <typename T>
struct impl_IUIElement2
{
	Windows::UI::Xaml::Media::ElementCompositeMode CompositeMode() const;
	void CompositeMode(Windows::UI::Xaml::Media::ElementCompositeMode value) const;
	bool CancelDirectManipulations() const;
};

template <typename T>
struct impl_IUIElementStatics2
{
	Windows::UI::Xaml::DependencyProperty CompositeModeProperty() const;
};

template <typename T>
struct impl_IUnhandledExceptionEventArgs
{
	HRESULT Exception() const;
	String Message() const;
	bool Handled() const;
	void Handled(bool value) const;
};

template <typename T>
struct impl_IVisualState
{
	String Name() const;
	Windows::UI::Xaml::Media::Animation::Storyboard Storyboard() const;
	void Storyboard(Windows::UI::Xaml::Media::Animation::Storyboard const & value) const;
};

template <typename T>
struct impl_IVisualStateChangedEventArgs
{
	Windows::UI::Xaml::VisualState OldState() const;
	void OldState(Windows::UI::Xaml::VisualState const & value) const;
	Windows::UI::Xaml::VisualState NewState() const;
	void NewState(Windows::UI::Xaml::VisualState const & value) const;
	Windows::UI::Xaml::Controls::Control Control() const;
	void Control(Windows::UI::Xaml::Controls::Control const & value) const;
};

template <typename T>
struct impl_IVisualStateGroup
{
	String Name() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::VisualTransition> Transitions() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::VisualState> States() const;
	Windows::UI::Xaml::VisualState CurrentState() const;
	EventRegistrationToken CurrentStateChanged(Windows::UI::Xaml::IVisualStateChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken CurrentStateChanged(F value) const;
	void CurrentStateChanged(EventRegistrationToken token) const;
	EventRegistrationToken CurrentStateChanging(Windows::UI::Xaml::IVisualStateChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken CurrentStateChanging(F value) const;
	void CurrentStateChanging(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IVisualStateManager
{
};

template <typename T>
struct impl_IVisualStateManagerOverrides
{
	bool GoToStateCore(Windows::UI::Xaml::Controls::Control const & control, Windows::UI::Xaml::FrameworkElement const & templateRoot, String const & stateName, Windows::UI::Xaml::VisualStateGroup const & group, Windows::UI::Xaml::VisualState const & state, bool useTransitions) const;
	template <unsigned S0> bool GoToStateCore(Windows::UI::Xaml::Controls::Control const & control, Windows::UI::Xaml::FrameworkElement const & templateRoot, wchar_t const (&stateName)[S0], Windows::UI::Xaml::VisualStateGroup const & group, Windows::UI::Xaml::VisualState const & state, bool useTransitions) const;
};

template <typename T>
struct impl_IVisualStateManagerProtected
{
	void RaiseCurrentStateChanging(Windows::UI::Xaml::VisualStateGroup const & stateGroup, Windows::UI::Xaml::VisualState const & oldState, Windows::UI::Xaml::VisualState const & newState, Windows::UI::Xaml::Controls::Control const & control) const;
	void RaiseCurrentStateChanged(Windows::UI::Xaml::VisualStateGroup const & stateGroup, Windows::UI::Xaml::VisualState const & oldState, Windows::UI::Xaml::VisualState const & newState, Windows::UI::Xaml::Controls::Control const & control) const;
};

template <typename T>
struct impl_IVisualStateManagerStatics
{
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::VisualStateGroup> GetVisualStateGroups(Windows::UI::Xaml::FrameworkElement const & obj) const;
	Windows::UI::Xaml::DependencyProperty CustomVisualStateManagerProperty() const;
	Windows::UI::Xaml::VisualStateManager GetCustomVisualStateManager(Windows::UI::Xaml::FrameworkElement const & obj) const;
	void SetCustomVisualStateManager(Windows::UI::Xaml::FrameworkElement const & obj, Windows::UI::Xaml::VisualStateManager const & value) const;
	bool GoToState(Windows::UI::Xaml::Controls::Control const & control, String const & stateName, bool useTransitions) const;
	template <unsigned S0> bool GoToState(Windows::UI::Xaml::Controls::Control const & control, wchar_t const (&stateName)[S0], bool useTransitions) const;
};

template <typename T>
struct impl_IVisualStateManagerFactory
{
	Windows::UI::Xaml::VisualStateManager CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IVisualTransition
{
	Windows::UI::Xaml::Duration GeneratedDuration() const;
	void GeneratedDuration(Windows::UI::Xaml::Duration const & value) const;
	Windows::UI::Xaml::Media::Animation::EasingFunctionBase GeneratedEasingFunction() const;
	void GeneratedEasingFunction(Windows::UI::Xaml::Media::Animation::EasingFunctionBase const & value) const;
	String To() const;
	void To(String const & value) const;
	template <unsigned S0> void To(wchar_t const (&value)[S0]) const;
	String From() const;
	void From(String const & value) const;
	template <unsigned S0> void From(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Media::Animation::Storyboard Storyboard() const;
	void Storyboard(Windows::UI::Xaml::Media::Animation::Storyboard const & value) const;
};

template <typename T>
struct impl_IVisualTransitionFactory
{
	Windows::UI::Xaml::VisualTransition CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IWindow
{
	Windows::Foundation::Rect Bounds() const;
	bool Visible() const;
	Windows::UI::Xaml::UIElement Content() const;
	void Content(Windows::UI::Xaml::UIElement const & value) const;
	Windows::UI::Core::CoreWindow CoreWindow() const;
	Windows::UI::Core::CoreDispatcher Dispatcher() const;
	EventRegistrationToken Activated(Windows::UI::Xaml::IWindowActivatedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Activated(F value) const;
	void Activated(EventRegistrationToken token) const;
	EventRegistrationToken Closed(Windows::UI::Xaml::IWindowClosedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Closed(F value) const;
	void Closed(EventRegistrationToken token) const;
	EventRegistrationToken SizeChanged(Windows::UI::Xaml::IWindowSizeChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken SizeChanged(F value) const;
	void SizeChanged(EventRegistrationToken token) const;
	EventRegistrationToken VisibilityChanged(Windows::UI::Xaml::IWindowVisibilityChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken VisibilityChanged(F value) const;
	void VisibilityChanged(EventRegistrationToken token) const;
	void Activate() const;
	void Close() const;
};

template <typename T>
struct impl_IWindowStatics
{
	Windows::UI::Xaml::Window Current() const;
};

template <typename T>
struct impl_IWindowCreatedEventArgs
{
	Windows::UI::Xaml::Window Window() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation {

template <typename T>
struct impl_IAutomationProperty
{
};

template <typename T>
struct impl_IAutomationProperties
{
};

template <typename T>
struct impl_IAutomationPropertiesStatics
{
	Windows::UI::Xaml::DependencyProperty AcceleratorKeyProperty() const;
	String GetAcceleratorKey(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetAcceleratorKey(Windows::UI::Xaml::DependencyObject const & element, String const & value) const;
	template <unsigned S0> void SetAcceleratorKey(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyProperty AccessKeyProperty() const;
	String GetAccessKey(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetAccessKey(Windows::UI::Xaml::DependencyObject const & element, String const & value) const;
	template <unsigned S0> void SetAccessKey(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyProperty AutomationIdProperty() const;
	String GetAutomationId(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetAutomationId(Windows::UI::Xaml::DependencyObject const & element, String const & value) const;
	template <unsigned S0> void SetAutomationId(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyProperty HelpTextProperty() const;
	String GetHelpText(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetHelpText(Windows::UI::Xaml::DependencyObject const & element, String const & value) const;
	template <unsigned S0> void SetHelpText(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyProperty IsRequiredForFormProperty() const;
	bool GetIsRequiredForForm(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetIsRequiredForForm(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty ItemStatusProperty() const;
	String GetItemStatus(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetItemStatus(Windows::UI::Xaml::DependencyObject const & element, String const & value) const;
	template <unsigned S0> void SetItemStatus(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyProperty ItemTypeProperty() const;
	String GetItemType(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetItemType(Windows::UI::Xaml::DependencyObject const & element, String const & value) const;
	template <unsigned S0> void SetItemType(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyProperty LabeledByProperty() const;
	Windows::UI::Xaml::UIElement GetLabeledBy(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetLabeledBy(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::UIElement const & value) const;
	Windows::UI::Xaml::DependencyProperty NameProperty() const;
	String GetName(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetName(Windows::UI::Xaml::DependencyObject const & element, String const & value) const;
	template <unsigned S0> void SetName(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyProperty LiveSettingProperty() const;
	Windows::UI::Xaml::Automation::Peers::AutomationLiveSetting GetLiveSetting(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetLiveSetting(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Automation::Peers::AutomationLiveSetting value) const;
};

template <typename T>
struct impl_IAutomationPropertiesStatics2
{
	Windows::UI::Xaml::DependencyProperty AccessibilityViewProperty() const;
	Windows::UI::Xaml::Automation::Peers::AccessibilityView GetAccessibilityView(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetAccessibilityView(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Automation::Peers::AccessibilityView value) const;
	Windows::UI::Xaml::DependencyProperty ControlledPeersProperty() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement> GetControlledPeers(Windows::UI::Xaml::DependencyObject const & element) const;
};

template <typename T>
struct impl_IAutomationElementIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty AcceleratorKeyProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty AccessKeyProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty AutomationIdProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty BoundingRectangleProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ClassNameProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ClickablePointProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ControlTypeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty HasKeyboardFocusProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty HelpTextProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsContentElementProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsControlElementProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsEnabledProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsKeyboardFocusableProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsOffscreenProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsPasswordProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsRequiredForFormProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ItemStatusProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ItemTypeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty LabeledByProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty LocalizedControlTypeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty NameProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty OrientationProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty LiveSettingProperty() const;
};

template <typename T>
struct impl_IAutomationElementIdentifiersStatics2
{
	Windows::UI::Xaml::Automation::AutomationProperty ControlledPeersProperty() const;
};

template <typename T>
struct impl_IAutomationElementIdentifiers
{
};

template <typename T>
struct impl_IAnnotationPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty AnnotationTypeIdProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty AnnotationTypeNameProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty AuthorProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty DateTimeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty TargetProperty() const;
};

template <typename T>
struct impl_IAnnotationPatternIdentifiers
{
};

template <typename T>
struct impl_IDockPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty DockPositionProperty() const;
};

template <typename T>
struct impl_IDockPatternIdentifiers
{
};

template <typename T>
struct impl_IDragPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty DropEffectProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty DropEffectsProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty GrabbedItemsProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsGrabbedProperty() const;
};

template <typename T>
struct impl_IDragPatternIdentifiers
{
};

template <typename T>
struct impl_IDropTargetPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty DropTargetEffectProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty DropTargetEffectsProperty() const;
};

template <typename T>
struct impl_IDropTargetPatternIdentifiers
{
};

template <typename T>
struct impl_IExpandCollapsePatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty ExpandCollapseStateProperty() const;
};

template <typename T>
struct impl_IExpandCollapsePatternIdentifiers
{
};

template <typename T>
struct impl_IGridItemPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty ColumnProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ColumnSpanProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ContainingGridProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty RowProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty RowSpanProperty() const;
};

template <typename T>
struct impl_IGridItemPatternIdentifiers
{
};

template <typename T>
struct impl_IGridPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty ColumnCountProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty RowCountProperty() const;
};

template <typename T>
struct impl_IGridPatternIdentifiers
{
};

template <typename T>
struct impl_IMultipleViewPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty CurrentViewProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty SupportedViewsProperty() const;
};

template <typename T>
struct impl_IMultipleViewPatternIdentifiers
{
};

template <typename T>
struct impl_IRangeValuePatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty IsReadOnlyProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty LargeChangeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty MaximumProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty MinimumProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty SmallChangeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ValueProperty() const;
};

template <typename T>
struct impl_IRangeValuePatternIdentifiers
{
};

template <typename T>
struct impl_IScrollPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty HorizontallyScrollableProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty HorizontalScrollPercentProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty HorizontalViewSizeProperty() const;
	double NoScroll() const;
	Windows::UI::Xaml::Automation::AutomationProperty VerticallyScrollableProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty VerticalScrollPercentProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty VerticalViewSizeProperty() const;
};

template <typename T>
struct impl_IScrollPatternIdentifiers
{
};

template <typename T>
struct impl_ISelectionItemPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty IsSelectedProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty SelectionContainerProperty() const;
};

template <typename T>
struct impl_ISelectionItemPatternIdentifiers
{
};

template <typename T>
struct impl_ISelectionPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty CanSelectMultipleProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsSelectionRequiredProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty SelectionProperty() const;
};

template <typename T>
struct impl_ISelectionPatternIdentifiers
{
};

template <typename T>
struct impl_ITableItemPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty ColumnHeaderItemsProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty RowHeaderItemsProperty() const;
};

template <typename T>
struct impl_ITableItemPatternIdentifiers
{
};

template <typename T>
struct impl_ITablePatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty ColumnHeadersProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty RowHeadersProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty RowOrColumnMajorProperty() const;
};

template <typename T>
struct impl_ITablePatternIdentifiers
{
};

template <typename T>
struct impl_ITogglePatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty ToggleStateProperty() const;
};

template <typename T>
struct impl_ITogglePatternIdentifiers
{
};

template <typename T>
struct impl_ITransformPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty CanMoveProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty CanResizeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty CanRotateProperty() const;
};

template <typename T>
struct impl_ITransformPatternIdentifiers
{
};

template <typename T>
struct impl_IValuePatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty IsReadOnlyProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ValueProperty() const;
};

template <typename T>
struct impl_IValuePatternIdentifiers
{
};

template <typename T>
struct impl_IWindowPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty CanMaximizeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty CanMinimizeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsModalProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty IsTopmostProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty WindowInteractionStateProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty WindowVisualStateProperty() const;
};

template <typename T>
struct impl_IWindowPatternIdentifiers
{
};

template <typename T>
struct impl_ITransformPattern2IdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty CanZoomProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ZoomLevelProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty MaxZoomProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty MinZoomProperty() const;
};

template <typename T>
struct impl_ITransformPattern2Identifiers
{
};

template <typename T>
struct impl_ISpreadsheetItemPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty FormulaProperty() const;
};

template <typename T>
struct impl_ISpreadsheetItemPatternIdentifiers
{
};

template <typename T>
struct impl_IStylesPatternIdentifiersStatics
{
	Windows::UI::Xaml::Automation::AutomationProperty ExtendedPropertiesProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty FillColorProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty FillPatternColorProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty FillPatternStyleProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty ShapeProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty StyleIdProperty() const;
	Windows::UI::Xaml::Automation::AutomationProperty StyleNameProperty() const;
};

template <typename T>
struct impl_IStylesPatternIdentifiers
{
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation { namespace Peers {

template <typename T>
struct impl_IButtonAutomationPeer
{
};

template <typename T>
struct impl_IButtonAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ButtonAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Button const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IButtonBaseAutomationPeer
{
};

template <typename T>
struct impl_IButtonBaseAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Primitives::ButtonBase const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ICaptureElementAutomationPeer
{
};

template <typename T>
struct impl_ICaptureElementAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::CaptureElementAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::CaptureElement const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ICheckBoxAutomationPeer
{
};

template <typename T>
struct impl_ICheckBoxAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::CheckBoxAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::CheckBox const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IComboBoxAutomationPeer
{
};

template <typename T>
struct impl_IComboBoxAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ComboBoxAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ComboBox const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IComboBoxItemAutomationPeer
{
};

template <typename T>
struct impl_IComboBoxItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ComboBoxItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ComboBoxItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IComboBoxItemDataAutomationPeer
{
};

template <typename T>
struct impl_IComboBoxItemDataAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ComboBoxItemDataAutomationPeer CreateInstanceWithParentAndItem(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::ComboBoxAutomationPeer const & parent, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFlipViewAutomationPeer
{
};

template <typename T>
struct impl_IFlipViewAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::FlipViewAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::FlipView const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFlipViewItemAutomationPeer
{
};

template <typename T>
struct impl_IFlipViewItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::FlipViewItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::FlipViewItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFlipViewItemDataAutomationPeer
{
};

template <typename T>
struct impl_IFlipViewItemDataAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::FlipViewItemDataAutomationPeer CreateInstanceWithParentAndItem(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::FlipViewAutomationPeer const & parent, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGridViewAutomationPeer
{
};

template <typename T>
struct impl_IGridViewAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::GridViewAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::GridView const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGridViewItemAutomationPeer
{
};

template <typename T>
struct impl_IGridViewItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::GridViewItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::GridViewItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGridViewItemDataAutomationPeer
{
};

template <typename T>
struct impl_IGridViewItemDataAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::GridViewItemDataAutomationPeer CreateInstanceWithParentAndItem(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::GridViewAutomationPeer const & parent, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGroupItemAutomationPeer
{
};

template <typename T>
struct impl_IGroupItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::GroupItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::GroupItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IHyperlinkButtonAutomationPeer
{
};

template <typename T>
struct impl_IHyperlinkButtonAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::HyperlinkButtonAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::HyperlinkButton const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IImageAutomationPeer
{
};

template <typename T>
struct impl_IImageAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ImageAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Image const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IItemAutomationPeer
{
	IInspectable Item() const;
	Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer ItemsControlAutomationPeer() const;
};

template <typename T>
struct impl_IItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer CreateInstanceWithParentAndItem(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer const & parent, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IItemsControlAutomationPeer
{
};

template <typename T>
struct impl_IItemsControlAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ItemsControl const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListBoxAutomationPeer
{
};

template <typename T>
struct impl_IListBoxAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ListBoxAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ListBox const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListBoxItemAutomationPeer
{
};

template <typename T>
struct impl_IListBoxItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ListBoxItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ListBoxItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListBoxItemDataAutomationPeer
{
};

template <typename T>
struct impl_IListBoxItemDataAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ListBoxItemDataAutomationPeer CreateInstanceWithParentAndItem(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::ListBoxAutomationPeer const & parent, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListViewAutomationPeer
{
};

template <typename T>
struct impl_IListViewAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ListViewAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ListView const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListViewBaseAutomationPeer
{
};

template <typename T>
struct impl_IListViewBaseAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ListViewBase const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListViewItemAutomationPeer
{
};

template <typename T>
struct impl_IListViewItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ListViewItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListViewItemDataAutomationPeer
{
};

template <typename T>
struct impl_IListViewItemDataAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ListViewItemDataAutomationPeer CreateInstanceWithParentAndItem(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer const & parent, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IMediaElementAutomationPeer
{
};

template <typename T>
struct impl_IMediaElementAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::MediaElementAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::MediaElement const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IPasswordBoxAutomationPeer
{
};

template <typename T>
struct impl_IPasswordBoxAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::PasswordBoxAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::PasswordBox const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IProgressBarAutomationPeer
{
};

template <typename T>
struct impl_IProgressBarAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ProgressBarAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ProgressBar const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IProgressRingAutomationPeer
{
};

template <typename T>
struct impl_IProgressRingAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ProgressRingAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ProgressRing const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRadioButtonAutomationPeer
{
};

template <typename T>
struct impl_IRadioButtonAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::RadioButtonAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::RadioButton const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRangeBaseAutomationPeer
{
};

template <typename T>
struct impl_IRangeBaseAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Primitives::RangeBase const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRepeatButtonAutomationPeer
{
};

template <typename T>
struct impl_IRepeatButtonAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::RepeatButtonAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Primitives::RepeatButton const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRichEditBoxAutomationPeer
{
};

template <typename T>
struct impl_IRichEditBoxAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::RichEditBoxAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::RichEditBox const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRichTextBlockAutomationPeer
{
};

template <typename T>
struct impl_IRichTextBlockAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::RichTextBlockAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::RichTextBlock const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRichTextBlockOverflowAutomationPeer
{
};

template <typename T>
struct impl_IRichTextBlockOverflowAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::RichTextBlockOverflowAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::RichTextBlockOverflow const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IScrollBarAutomationPeer
{
};

template <typename T>
struct impl_IScrollBarAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ScrollBarAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Primitives::ScrollBar const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IScrollViewerAutomationPeer
{
};

template <typename T>
struct impl_IScrollViewerAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ScrollViewerAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ScrollViewer const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISelectorAutomationPeer
{
};

template <typename T>
struct impl_ISelectorAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Primitives::Selector const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISelectorItemAutomationPeer
{
};

template <typename T>
struct impl_ISelectorItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer CreateInstanceWithParentAndItem(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer const & parent, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISemanticZoomAutomationPeer
{
};

template <typename T>
struct impl_ISemanticZoomAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::SemanticZoomAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::SemanticZoom const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISettingsFlyoutAutomationPeer
{
};

template <typename T>
struct impl_ISettingsFlyoutAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::SettingsFlyoutAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::SettingsFlyout const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISliderAutomationPeer
{
};

template <typename T>
struct impl_ISliderAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::SliderAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Slider const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ITextBlockAutomationPeer
{
};

template <typename T>
struct impl_ITextBlockAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::TextBlockAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::TextBlock const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ITextBoxAutomationPeer
{
};

template <typename T>
struct impl_ITextBoxAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::TextBoxAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::TextBox const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IThumbAutomationPeer
{
};

template <typename T>
struct impl_IThumbAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ThumbAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Primitives::Thumb const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IToggleButtonAutomationPeer
{
};

template <typename T>
struct impl_IToggleButtonAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Primitives::ToggleButton const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IToggleSwitchAutomationPeer
{
};

template <typename T>
struct impl_IToggleSwitchAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ToggleSwitchAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ToggleSwitch const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IAppBarAutomationPeer
{
};

template <typename T>
struct impl_IAppBarAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::AppBarAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::AppBar const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IAppBarButtonAutomationPeer
{
};

template <typename T>
struct impl_IAppBarButtonAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::AppBarButtonAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::AppBarButton const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IAppBarToggleButtonAutomationPeer
{
};

template <typename T>
struct impl_IAppBarToggleButtonAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::AppBarToggleButtonAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::AppBarToggleButton const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDatePickerAutomationPeer
{
};

template <typename T>
struct impl_IDatePickerAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::DatePickerAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::DatePicker const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFlyoutPresenterAutomationPeer
{
};

template <typename T>
struct impl_IFlyoutPresenterAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::FlyoutPresenterAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::FlyoutPresenter const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGridViewHeaderItemAutomationPeer
{
};

template <typename T>
struct impl_IGridViewHeaderItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::GridViewHeaderItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::GridViewHeaderItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IHubAutomationPeer
{
};

template <typename T>
struct impl_IHubAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::HubAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::Hub const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IHubSectionAutomationPeer
{
};

template <typename T>
struct impl_IHubSectionAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::HubSectionAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::HubSection const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListViewBaseHeaderItemAutomationPeer
{
};

template <typename T>
struct impl_IListViewBaseHeaderItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ListViewBaseHeaderItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ListViewBaseHeaderItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListViewHeaderItemAutomationPeer
{
};

template <typename T>
struct impl_IListViewHeaderItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ListViewHeaderItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ListViewHeaderItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IMenuFlyoutItemAutomationPeer
{
};

template <typename T>
struct impl_IMenuFlyoutItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::MenuFlyoutItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::MenuFlyoutItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IMenuFlyoutPresenterAutomationPeer
{
};

template <typename T>
struct impl_IMenuFlyoutPresenterAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::MenuFlyoutPresenterAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::MenuFlyoutPresenter const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISearchBoxAutomationPeer
{
};

template <typename T>
struct impl_ISearchBoxAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::SearchBoxAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::SearchBox const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ITimePickerAutomationPeer
{
};

template <typename T>
struct impl_ITimePickerAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::TimePickerAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::TimePicker const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IToggleMenuFlyoutItemAutomationPeer
{
};

template <typename T>
struct impl_IToggleMenuFlyoutItemAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::ToggleMenuFlyoutItemAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem const & owner, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IAutomationPeer
{
	Windows::UI::Xaml::Automation::Peers::AutomationPeer EventsSource() const;
	void EventsSource(Windows::UI::Xaml::Automation::Peers::AutomationPeer const & value) const;
	IInspectable GetPattern(Windows::UI::Xaml::Automation::Peers::PatternInterface patternInterface) const;
	void RaiseAutomationEvent(Windows::UI::Xaml::Automation::Peers::AutomationEvents eventId) const;
	void RaisePropertyChangedEvent(Windows::UI::Xaml::Automation::AutomationProperty const & automationProperty, IInspectable const & oldValue, IInspectable const & newValue) const;
	String GetAcceleratorKey() const;
	String GetAccessKey() const;
	Windows::UI::Xaml::Automation::Peers::AutomationControlType GetAutomationControlType() const;
	String GetAutomationId() const;
	Windows::Foundation::Rect GetBoundingRectangle() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Automation::Peers::AutomationPeer> GetChildren() const;
	String GetClassName() const;
	Windows::Foundation::Point GetClickablePoint() const;
	String GetHelpText() const;
	String GetItemStatus() const;
	String GetItemType() const;
	Windows::UI::Xaml::Automation::Peers::AutomationPeer GetLabeledBy() const;
	String GetLocalizedControlType() const;
	String GetName() const;
	Windows::UI::Xaml::Automation::Peers::AutomationOrientation GetOrientation() const;
	bool HasKeyboardFocus() const;
	bool IsContentElement() const;
	bool IsControlElement() const;
	bool IsEnabled() const;
	bool IsKeyboardFocusable() const;
	bool IsOffscreen() const;
	bool IsPassword() const;
	bool IsRequiredForForm() const;
	void SetFocus() const;
	Windows::UI::Xaml::Automation::Peers::AutomationPeer GetParent() const;
	void InvalidatePeer() const;
	Windows::UI::Xaml::Automation::Peers::AutomationPeer GetPeerFromPoint(Windows::Foundation::Point const & point) const;
	Windows::UI::Xaml::Automation::Peers::AutomationLiveSetting GetLiveSetting() const;
};

template <typename T>
struct impl_IAutomationPeerOverrides
{
	IInspectable GetPatternCore(Windows::UI::Xaml::Automation::Peers::PatternInterface patternInterface) const;
	String GetAcceleratorKeyCore() const;
	String GetAccessKeyCore() const;
	Windows::UI::Xaml::Automation::Peers::AutomationControlType GetAutomationControlTypeCore() const;
	String GetAutomationIdCore() const;
	Windows::Foundation::Rect GetBoundingRectangleCore() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Automation::Peers::AutomationPeer> GetChildrenCore() const;
	String GetClassNameCore() const;
	Windows::Foundation::Point GetClickablePointCore() const;
	String GetHelpTextCore() const;
	String GetItemStatusCore() const;
	String GetItemTypeCore() const;
	Windows::UI::Xaml::Automation::Peers::AutomationPeer GetLabeledByCore() const;
	String GetLocalizedControlTypeCore() const;
	String GetNameCore() const;
	Windows::UI::Xaml::Automation::Peers::AutomationOrientation GetOrientationCore() const;
	bool HasKeyboardFocusCore() const;
	bool IsContentElementCore() const;
	bool IsControlElementCore() const;
	bool IsEnabledCore() const;
	bool IsKeyboardFocusableCore() const;
	bool IsOffscreenCore() const;
	bool IsPasswordCore() const;
	bool IsRequiredForFormCore() const;
	void SetFocusCore() const;
	Windows::UI::Xaml::Automation::Peers::AutomationPeer GetPeerFromPointCore(Windows::Foundation::Point const & point) const;
	Windows::UI::Xaml::Automation::Peers::AutomationLiveSetting GetLiveSettingCore() const;
};

template <typename T>
struct impl_IAutomationPeerProtected
{
	Windows::UI::Xaml::Automation::Peers::AutomationPeer PeerFromProvider(Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple const & provider) const;
	Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple ProviderFromPeer(Windows::UI::Xaml::Automation::Peers::AutomationPeer const & peer) const;
};

template <typename T>
struct impl_IAutomationPeerStatics
{
	bool ListenerExists(Windows::UI::Xaml::Automation::Peers::AutomationEvents eventId) const;
};

template <typename T>
struct impl_IAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::AutomationPeer CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IAutomationPeer2
{
	void ShowContextMenu() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Automation::Peers::AutomationPeer> GetControlledPeers() const;
};

template <typename T>
struct impl_IAutomationPeerOverrides2
{
	void ShowContextMenuCore() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Automation::Peers::AutomationPeer> GetControlledPeersCore() const;
};

template <typename T>
struct impl_IFrameworkElementAutomationPeer
{
	Windows::UI::Xaml::UIElement Owner() const;
};

template <typename T>
struct impl_IFrameworkElementAutomationPeerStatics
{
	Windows::UI::Xaml::Automation::Peers::AutomationPeer FromElement(Windows::UI::Xaml::UIElement const & element) const;
	Windows::UI::Xaml::Automation::Peers::AutomationPeer CreatePeerForElement(Windows::UI::Xaml::UIElement const & element) const;
};

template <typename T>
struct impl_IFrameworkElementAutomationPeerFactory
{
	Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer CreateInstanceWithOwner(Windows::UI::Xaml::FrameworkElement const & owner, IInspectable const & outer, IInspectable & inner) const;
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation { namespace Provider {

template <typename T>
struct impl_IAnnotationProvider
{
	int AnnotationTypeId() const;
	String AnnotationTypeName() const;
	String Author() const;
	String DateTime() const;
	Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple Target() const;
};

template <typename T>
struct impl_IDockProvider
{
	Windows::UI::Xaml::Automation::DockPosition DockPosition() const;
	void SetDockPosition(Windows::UI::Xaml::Automation::DockPosition dockPosition) const;
};

template <typename T>
struct impl_IDragProvider
{
	bool IsGrabbed() const;
	String DropEffect() const;
};

template <typename T>
struct impl_IDropTargetProvider
{
	String DropEffect() const;
};

template <typename T>
struct impl_IExpandCollapseProvider
{
	Windows::UI::Xaml::Automation::ExpandCollapseState ExpandCollapseState() const;
	void Collapse() const;
	void Expand() const;
};

template <typename T>
struct impl_IGridItemProvider
{
	int Column() const;
	int ColumnSpan() const;
	Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple ContainingGrid() const;
	int Row() const;
	int RowSpan() const;
};

template <typename T>
struct impl_IGridProvider
{
	int ColumnCount() const;
	int RowCount() const;
	Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple GetItem(int row, int column) const;
};

template <typename T>
struct impl_IInvokeProvider
{
	void Invoke() const;
};

template <typename T>
struct impl_IItemContainerProvider
{
	Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple FindItemByProperty(Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple const & startAfter, Windows::UI::Xaml::Automation::AutomationProperty const & automationProperty, IInspectable const & value) const;
};

template <typename T>
struct impl_IMultipleViewProvider
{
	int CurrentView() const;
	String GetViewName(int viewId) const;
	void SetCurrentView(int viewId) const;
};

template <typename T>
struct impl_IObjectModelProvider
{
	IInspectable GetUnderlyingObjectModel() const;
};

template <typename T>
struct impl_IRangeValueProvider
{
	bool IsReadOnly() const;
	double LargeChange() const;
	double Maximum() const;
	double Minimum() const;
	double SmallChange() const;
	double Value() const;
	void SetValue(double value) const;
};

template <typename T>
struct impl_IIRawElementProviderSimple
{
};

template <typename T>
struct impl_IScrollItemProvider
{
	void ScrollIntoView() const;
};

template <typename T>
struct impl_IScrollProvider
{
	bool HorizontallyScrollable() const;
	double HorizontalScrollPercent() const;
	double HorizontalViewSize() const;
	bool VerticallyScrollable() const;
	double VerticalScrollPercent() const;
	double VerticalViewSize() const;
	void Scroll(Windows::UI::Xaml::Automation::ScrollAmount horizontalAmount, Windows::UI::Xaml::Automation::ScrollAmount verticalAmount) const;
	void SetScrollPercent(double horizontalPercent, double verticalPercent) const;
};

template <typename T>
struct impl_ISelectionItemProvider
{
	bool IsSelected() const;
	Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple SelectionContainer() const;
	void AddToSelection() const;
	void RemoveFromSelection() const;
	void Select() const;
};

template <typename T>
struct impl_ISelectionProvider
{
	bool CanSelectMultiple() const;
	bool IsSelectionRequired() const;
};

template <typename T>
struct impl_ISpreadsheetItemProvider
{
	String Formula() const;
};

template <typename T>
struct impl_ISpreadsheetProvider
{
	Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple GetItemByName(String const & name) const;
	template <unsigned S0> Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple GetItemByName(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_IStylesProvider
{
	String ExtendedProperties() const;
	Windows::UI::Color FillColor() const;
	Windows::UI::Color FillPatternColor() const;
	String FillPatternStyle() const;
	String Shape() const;
	int StyleId() const;
	String StyleName() const;
};

template <typename T>
struct impl_ISynchronizedInputProvider
{
	void Cancel() const;
	void StartListening(Windows::UI::Xaml::Automation::SynchronizedInputType inputType) const;
};

template <typename T>
struct impl_ITableItemProvider
{
};

template <typename T>
struct impl_ITableProvider
{
	Windows::UI::Xaml::Automation::RowOrColumnMajor RowOrColumnMajor() const;
};

template <typename T>
struct impl_ITextChildProvider
{
	Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple TextContainer() const;
	Windows::UI::Xaml::Automation::Provider::ITextRangeProvider TextRange() const;
};

template <typename T>
struct impl_ITextRangeProvider
{
	Windows::UI::Xaml::Automation::Provider::ITextRangeProvider Clone() const;
	bool Compare(Windows::UI::Xaml::Automation::Provider::ITextRangeProvider const & textRangeProvider) const;
	int CompareEndpoints(Windows::UI::Xaml::Automation::Text::TextPatternRangeEndpoint endpoint, Windows::UI::Xaml::Automation::Provider::ITextRangeProvider const & textRangeProvider, Windows::UI::Xaml::Automation::Text::TextPatternRangeEndpoint targetEndpoint) const;
	void ExpandToEnclosingUnit(Windows::UI::Xaml::Automation::Text::TextUnit unit) const;
	Windows::UI::Xaml::Automation::Provider::ITextRangeProvider FindAttribute(int attributeId, IInspectable const & value, bool backward) const;
	Windows::UI::Xaml::Automation::Provider::ITextRangeProvider FindText(String const & text, bool backward, bool ignoreCase) const;
	template <unsigned S0> Windows::UI::Xaml::Automation::Provider::ITextRangeProvider FindText(wchar_t const (&text)[S0], bool backward, bool ignoreCase) const;
	IInspectable GetAttributeValue(int attributeId) const;
	Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple GetEnclosingElement() const;
	String GetText(int maxLength) const;
	int Move(Windows::UI::Xaml::Automation::Text::TextUnit unit, int count) const;
	int MoveEndpointByUnit(Windows::UI::Xaml::Automation::Text::TextPatternRangeEndpoint endpoint, Windows::UI::Xaml::Automation::Text::TextUnit unit, int count) const;
	void MoveEndpointByRange(Windows::UI::Xaml::Automation::Text::TextPatternRangeEndpoint endpoint, Windows::UI::Xaml::Automation::Provider::ITextRangeProvider const & textRangeProvider, Windows::UI::Xaml::Automation::Text::TextPatternRangeEndpoint targetEndpoint) const;
	void Select() const;
	void AddToSelection() const;
	void RemoveFromSelection() const;
	void ScrollIntoView(bool alignToTop) const;
};

template <typename T>
struct impl_ITextProvider
{
	Windows::UI::Xaml::Automation::Provider::ITextRangeProvider DocumentRange() const;
	Windows::UI::Xaml::Automation::SupportedTextSelection SupportedTextSelection() const;
	Windows::UI::Xaml::Automation::Provider::ITextRangeProvider RangeFromChild(Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple const & childElement) const;
	Windows::UI::Xaml::Automation::Provider::ITextRangeProvider RangeFromPoint(Windows::Foundation::Point const & screenLocation) const;
};

template <typename T>
struct impl_ITextProvider2
{
	Windows::UI::Xaml::Automation::Provider::ITextRangeProvider RangeFromAnnotation(Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple const & annotationElement) const;
	Windows::UI::Xaml::Automation::Provider::ITextRangeProvider GetCaretRange(bool & isActive) const;
};

template <typename T>
struct impl_ITextRangeProvider2
{
	void ShowContextMenu() const;
};

template <typename T>
struct impl_IToggleProvider
{
	Windows::UI::Xaml::Automation::ToggleState ToggleState() const;
	void Toggle() const;
};

template <typename T>
struct impl_ITransformProvider
{
	bool CanMove() const;
	bool CanResize() const;
	bool CanRotate() const;
	void Move(double x, double y) const;
	void Resize(double width, double height) const;
	void Rotate(double degrees) const;
};

template <typename T>
struct impl_ITransformProvider2
{
	bool CanZoom() const;
	double ZoomLevel() const;
	double MaxZoom() const;
	double MinZoom() const;
	void Zoom(double zoom) const;
	void ZoomByUnit(Windows::UI::Xaml::Automation::ZoomUnit zoomUnit) const;
};

template <typename T>
struct impl_IValueProvider
{
	bool IsReadOnly() const;
	String Value() const;
	void SetValue(String const & value) const;
	template <unsigned S0> void SetValue(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IVirtualizedItemProvider
{
	void Realize() const;
};

template <typename T>
struct impl_IWindowProvider
{
	bool IsModal() const;
	bool IsTopmost() const;
	bool Maximizable() const;
	bool Minimizable() const;
	Windows::UI::Xaml::Automation::WindowInteractionState InteractionState() const;
	Windows::UI::Xaml::Automation::WindowVisualState VisualState() const;
	void Close() const;
	void SetVisualState(Windows::UI::Xaml::Automation::WindowVisualState state) const;
	bool WaitForInputIdle(int milliseconds) const;
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Controls {

template <typename T>
struct impl_IBackClickEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::BackClickEventArgs const & e) const;
};

template <typename T>
struct impl_ICleanUpVirtualizedItemEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs const & e) const;
};

template <typename T>
struct impl_IContextMenuOpeningEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::ContextMenuEventArgs const & e) const;
};

template <typename T>
struct impl_IDragItemsStartingEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::DragItemsStartingEventArgs const & e) const;
};

template <typename T>
struct impl_IItemClickEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::ItemClickEventArgs const & e) const;
};

template <typename T>
struct impl_INotifyEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::NotifyEventArgs const & e) const;
};

template <typename T>
struct impl_ISelectionChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::SelectionChangedEventArgs const & e) const;
};

template <typename T>
struct impl_ISemanticZoomViewChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs const & e) const;
};

template <typename T>
struct impl_ITextChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::TextChangedEventArgs const & e) const;
};

template <typename T>
struct impl_ITextControlPasteEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::TextControlPasteEventArgs const & e) const;
};

template <typename T>
struct impl_IHubSectionHeaderClickEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs const & e) const;
};

template <typename T>
struct impl_ISectionsInViewChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs const & e) const;
};

template <typename T>
struct impl_IWebViewNavigationFailedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs const & e) const;
};

template <typename T>
struct impl_IBackClickEventArgs
{
	bool Handled() const;
	void Handled(bool value) const;
};

template <typename T>
struct impl_IBorder
{
	Windows::UI::Xaml::Media::Brush BorderBrush() const;
	void BorderBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Thickness BorderThickness() const;
	void BorderThickness(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::Media::Brush Background() const;
	void Background(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::CornerRadius CornerRadius() const;
	void CornerRadius(Windows::UI::Xaml::CornerRadius const & value) const;
	Windows::UI::Xaml::Thickness Padding() const;
	void Padding(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::UIElement Child() const;
	void Child(Windows::UI::Xaml::UIElement const & value) const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection ChildTransitions() const;
	void ChildTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
};

template <typename T>
struct impl_IBorderStatics
{
	Windows::UI::Xaml::DependencyProperty BorderBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty BorderThicknessProperty() const;
	Windows::UI::Xaml::DependencyProperty BackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty CornerRadiusProperty() const;
	Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
	Windows::UI::Xaml::DependencyProperty ChildTransitionsProperty() const;
};

template <typename T>
struct impl_IButton
{
};

template <typename T>
struct impl_IButtonFactory
{
	Windows::UI::Xaml::Controls::Button CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IButtonWithFlyout
{
	Windows::UI::Xaml::Controls::Primitives::FlyoutBase Flyout() const;
	void Flyout(Windows::UI::Xaml::Controls::Primitives::FlyoutBase const & value) const;
};

template <typename T>
struct impl_IButtonStaticsWithFlyout
{
	Windows::UI::Xaml::DependencyProperty FlyoutProperty() const;
};

template <typename T>
struct impl_ICanvas
{
};

template <typename T>
struct impl_ICanvasStatics
{
	Windows::UI::Xaml::DependencyProperty LeftProperty() const;
	double GetLeft(Windows::UI::Xaml::UIElement const & element) const;
	void SetLeft(Windows::UI::Xaml::UIElement const & element, double length) const;
	Windows::UI::Xaml::DependencyProperty TopProperty() const;
	double GetTop(Windows::UI::Xaml::UIElement const & element) const;
	void SetTop(Windows::UI::Xaml::UIElement const & element, double length) const;
	Windows::UI::Xaml::DependencyProperty ZIndexProperty() const;
	int GetZIndex(Windows::UI::Xaml::UIElement const & element) const;
	void SetZIndex(Windows::UI::Xaml::UIElement const & element, int value) const;
};

template <typename T>
struct impl_ICanvasFactory
{
	Windows::UI::Xaml::Controls::Canvas CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ICaptureElement
{
	Windows::Media::Capture::MediaCapture Source() const;
	void Source(Windows::Media::Capture::MediaCapture const & value) const;
	Windows::UI::Xaml::Media::Stretch Stretch() const;
	void Stretch(Windows::UI::Xaml::Media::Stretch value) const;
};

template <typename T>
struct impl_ICaptureElementStatics
{
	Windows::UI::Xaml::DependencyProperty SourceProperty() const;
	Windows::UI::Xaml::DependencyProperty StretchProperty() const;
};

template <typename T>
struct impl_ICheckBox
{
};

template <typename T>
struct impl_ICheckBoxFactory
{
	Windows::UI::Xaml::Controls::CheckBox CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ICleanUpVirtualizedItemEventArgs
{
	IInspectable Value() const;
	Windows::UI::Xaml::UIElement UIElement() const;
	bool Cancel() const;
	void Cancel(bool value) const;
};

template <typename T>
struct impl_IColumnDefinition
{
	Windows::UI::Xaml::GridLength Width() const;
	void Width(Windows::UI::Xaml::GridLength const & value) const;
	double MaxWidth() const;
	void MaxWidth(double value) const;
	double MinWidth() const;
	void MinWidth(double value) const;
	double ActualWidth() const;
};

template <typename T>
struct impl_IColumnDefinitionStatics
{
	Windows::UI::Xaml::DependencyProperty WidthProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty MinWidthProperty() const;
};

template <typename T>
struct impl_IComboBox
{
	bool IsDropDownOpen() const;
	void IsDropDownOpen(bool value) const;
	bool IsEditable() const;
	bool IsSelectionBoxHighlighted() const;
	double MaxDropDownHeight() const;
	void MaxDropDownHeight(double value) const;
	IInspectable SelectionBoxItem() const;
	Windows::UI::Xaml::DataTemplate SelectionBoxItemTemplate() const;
	Windows::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings TemplateSettings() const;
	EventRegistrationToken DropDownClosed(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken DropDownClosed(F value) const;
	void DropDownClosed(EventRegistrationToken token) const;
	EventRegistrationToken DropDownOpened(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken DropDownOpened(F value) const;
	void DropDownOpened(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IComboBoxOverrides
{
	void OnDropDownClosed(IInspectable const & e) const;
	void OnDropDownOpened(IInspectable const & e) const;
};

template <typename T>
struct impl_IComboBoxStatics
{
	Windows::UI::Xaml::DependencyProperty IsDropDownOpenProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxDropDownHeightProperty() const;
};

template <typename T>
struct impl_IComboBoxFactory
{
	Windows::UI::Xaml::Controls::ComboBox CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IComboBox2
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	String PlaceholderText() const;
	void PlaceholderText(String const & value) const;
	template <unsigned S0> void PlaceholderText(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IComboBoxStatics2
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
};

template <typename T>
struct impl_IComboBoxItem
{
};

template <typename T>
struct impl_IComboBoxItemFactory
{
	Windows::UI::Xaml::Controls::ComboBoxItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IContainerContentChangingEventArgs
{
	Windows::UI::Xaml::Controls::Primitives::SelectorItem ItemContainer() const;
	bool InRecycleQueue() const;
	int ItemIndex() const;
	IInspectable Item() const;
	unsigned Phase() const;
	bool Handled() const;
	void Handled(bool value) const;
	void RegisterUpdateCallback(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const & callback) const;
	template <typename F> void RegisterUpdateCallback(F callback) const;
	void RegisterUpdateCallback(unsigned callbackPhase, Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const & callback) const;
	template <typename F> void RegisterUpdateCallback(unsigned callbackPhase, F callback) const;
};

template <typename T>
struct impl_IContentControl
{
	IInspectable Content() const;
	void Content(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate ContentTemplate() const;
	void ContentTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Controls::DataTemplateSelector ContentTemplateSelector() const;
	void ContentTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const & value) const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection ContentTransitions() const;
	void ContentTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
};

template <typename T>
struct impl_IContentControlOverrides
{
	void OnContentChanged(IInspectable const & oldContent, IInspectable const & newContent) const;
	void OnContentTemplateChanged(Windows::UI::Xaml::DataTemplate const & oldContentTemplate, Windows::UI::Xaml::DataTemplate const & newContentTemplate) const;
	void OnContentTemplateSelectorChanged(Windows::UI::Xaml::Controls::DataTemplateSelector const & oldContentTemplateSelector, Windows::UI::Xaml::Controls::DataTemplateSelector const & newContentTemplateSelector) const;
};

template <typename T>
struct impl_IContentControlStatics
{
	Windows::UI::Xaml::DependencyProperty ContentProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTemplateSelectorProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTransitionsProperty() const;
};

template <typename T>
struct impl_IContentControlFactory
{
	Windows::UI::Xaml::Controls::ContentControl CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IContentControl2
{
	Windows::UI::Xaml::UIElement ContentTemplateRoot() const;
};

template <typename T>
struct impl_IContentPresenter
{
	IInspectable Content() const;
	void Content(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate ContentTemplate() const;
	void ContentTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Controls::DataTemplateSelector ContentTemplateSelector() const;
	void ContentTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const & value) const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection ContentTransitions() const;
	void ContentTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
	double FontSize() const;
	void FontSize(double value) const;
	Windows::UI::Xaml::Media::FontFamily FontFamily() const;
	void FontFamily(Windows::UI::Xaml::Media::FontFamily const & value) const;
	Windows::UI::Text::FontWeight FontWeight() const;
	void FontWeight(Windows::UI::Text::FontWeight const & value) const;
	Windows::UI::Text::FontStyle FontStyle() const;
	void FontStyle(Windows::UI::Text::FontStyle value) const;
	Windows::UI::Text::FontStretch FontStretch() const;
	void FontStretch(Windows::UI::Text::FontStretch value) const;
	int CharacterSpacing() const;
	void CharacterSpacing(int value) const;
	Windows::UI::Xaml::Media::Brush Foreground() const;
	void Foreground(Windows::UI::Xaml::Media::Brush const & value) const;
};

template <typename T>
struct impl_IContentPresenterOverrides
{
	void OnContentTemplateChanged(Windows::UI::Xaml::DataTemplate const & oldContentTemplate, Windows::UI::Xaml::DataTemplate const & newContentTemplate) const;
	void OnContentTemplateSelectorChanged(Windows::UI::Xaml::Controls::DataTemplateSelector const & oldContentTemplateSelector, Windows::UI::Xaml::Controls::DataTemplateSelector const & newContentTemplateSelector) const;
};

template <typename T>
struct impl_IContentPresenterStatics
{
	Windows::UI::Xaml::DependencyProperty ContentProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTemplateSelectorProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTransitionsProperty() const;
	Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
	Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStretchProperty() const;
	Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty() const;
	Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
};

template <typename T>
struct impl_IContentPresenterFactory
{
	Windows::UI::Xaml::Controls::ContentPresenter CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IContentPresenter2
{
	Windows::UI::Xaml::OpticalMarginAlignment OpticalMarginAlignment() const;
	void OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) const;
	Windows::UI::Xaml::TextLineBounds TextLineBounds() const;
	void TextLineBounds(Windows::UI::Xaml::TextLineBounds value) const;
};

template <typename T>
struct impl_IContentPresenterStatics2
{
	Windows::UI::Xaml::DependencyProperty OpticalMarginAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty TextLineBoundsProperty() const;
};

template <typename T>
struct impl_IContextMenuEventArgs
{
	bool Handled() const;
	void Handled(bool value) const;
	double CursorLeft() const;
	double CursorTop() const;
};

template <typename T>
struct impl_IDataTemplateSelector
{
	Windows::UI::Xaml::DataTemplate SelectTemplate(IInspectable const & item, Windows::UI::Xaml::DependencyObject const & container) const;
};

template <typename T>
struct impl_IDataTemplateSelectorOverrides
{
	Windows::UI::Xaml::DataTemplate SelectTemplateCore(IInspectable const & item, Windows::UI::Xaml::DependencyObject const & container) const;
};

template <typename T>
struct impl_IDataTemplateSelectorFactory
{
	Windows::UI::Xaml::Controls::DataTemplateSelector CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDataTemplateSelector2
{
	Windows::UI::Xaml::DataTemplate SelectTemplate(IInspectable const & item) const;
};

template <typename T>
struct impl_IDataTemplateSelectorOverrides2
{
	Windows::UI::Xaml::DataTemplate SelectTemplateCore(IInspectable const & item) const;
};

template <typename T>
struct impl_IDatePicker
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	String CalendarIdentifier() const;
	void CalendarIdentifier(String const & value) const;
	template <unsigned S0> void CalendarIdentifier(wchar_t const (&value)[S0]) const;
	Windows::Foundation::DateTime Date() const;
	void Date(Windows::Foundation::DateTime const & value) const;
	bool DayVisible() const;
	void DayVisible(bool value) const;
	bool MonthVisible() const;
	void MonthVisible(bool value) const;
	bool YearVisible() const;
	void YearVisible(bool value) const;
	String DayFormat() const;
	void DayFormat(String const & value) const;
	template <unsigned S0> void DayFormat(wchar_t const (&value)[S0]) const;
	String MonthFormat() const;
	void MonthFormat(String const & value) const;
	template <unsigned S0> void MonthFormat(wchar_t const (&value)[S0]) const;
	String YearFormat() const;
	void YearFormat(String const & value) const;
	template <unsigned S0> void YearFormat(wchar_t const (&value)[S0]) const;
	Windows::Foundation::DateTime MinYear() const;
	void MinYear(Windows::Foundation::DateTime const & value) const;
	Windows::Foundation::DateTime MaxYear() const;
	void MaxYear(Windows::Foundation::DateTime const & value) const;
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
	EventRegistrationToken DateChanged(Windows::Foundation::IEventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken DateChanged(F value) const;
	void DateChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IDatePickerStatics
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty CalendarIdentifierProperty() const;
	Windows::UI::Xaml::DependencyProperty DateProperty() const;
	Windows::UI::Xaml::DependencyProperty DayVisibleProperty() const;
	Windows::UI::Xaml::DependencyProperty MonthVisibleProperty() const;
	Windows::UI::Xaml::DependencyProperty YearVisibleProperty() const;
	Windows::UI::Xaml::DependencyProperty DayFormatProperty() const;
	Windows::UI::Xaml::DependencyProperty MonthFormatProperty() const;
	Windows::UI::Xaml::DependencyProperty YearFormatProperty() const;
	Windows::UI::Xaml::DependencyProperty MinYearProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxYearProperty() const;
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
};

template <typename T>
struct impl_IDatePickerFactory
{
	Windows::UI::Xaml::Controls::DatePicker CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDatePickerValueChangedEventArgs
{
	Windows::Foundation::DateTime OldDate() const;
	Windows::Foundation::DateTime NewDate() const;
};

template <typename T>
struct impl_IDragItemsStartingEventArgs
{
	bool Cancel() const;
	void Cancel(bool value) const;
	Windows::Foundation::Collections::IVector<IInspectable> Items() const;
	Windows::ApplicationModel::DataTransfer::DataPackage Data() const;
};

template <typename T>
struct impl_IFlipView
{
};

template <typename T>
struct impl_IFlipViewFactory
{
	Windows::UI::Xaml::Controls::FlipView CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFlipView2
{
	bool UseTouchAnimationsForAllNavigation() const;
	void UseTouchAnimationsForAllNavigation(bool value) const;
};

template <typename T>
struct impl_IFlipViewStatics2
{
	Windows::UI::Xaml::DependencyProperty UseTouchAnimationsForAllNavigationProperty() const;
};

template <typename T>
struct impl_IFlipViewItem
{
};

template <typename T>
struct impl_IFlipViewItemFactory
{
	Windows::UI::Xaml::Controls::FlipViewItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGrid
{
	Windows::UI::Xaml::Controls::RowDefinitionCollection RowDefinitions() const;
	Windows::UI::Xaml::Controls::ColumnDefinitionCollection ColumnDefinitions() const;
};

template <typename T>
struct impl_IGridStatics
{
	Windows::UI::Xaml::DependencyProperty RowProperty() const;
	int GetRow(Windows::UI::Xaml::FrameworkElement const & element) const;
	void SetRow(Windows::UI::Xaml::FrameworkElement const & element, int value) const;
	Windows::UI::Xaml::DependencyProperty ColumnProperty() const;
	int GetColumn(Windows::UI::Xaml::FrameworkElement const & element) const;
	void SetColumn(Windows::UI::Xaml::FrameworkElement const & element, int value) const;
	Windows::UI::Xaml::DependencyProperty RowSpanProperty() const;
	int GetRowSpan(Windows::UI::Xaml::FrameworkElement const & element) const;
	void SetRowSpan(Windows::UI::Xaml::FrameworkElement const & element, int value) const;
	Windows::UI::Xaml::DependencyProperty ColumnSpanProperty() const;
	int GetColumnSpan(Windows::UI::Xaml::FrameworkElement const & element) const;
	void SetColumnSpan(Windows::UI::Xaml::FrameworkElement const & element, int value) const;
};

template <typename T>
struct impl_IGridFactory
{
	Windows::UI::Xaml::Controls::Grid CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGridView
{
};

template <typename T>
struct impl_IGridViewFactory
{
	Windows::UI::Xaml::Controls::GridView CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGridViewItem
{
	Windows::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings TemplateSettings() const;
};

template <typename T>
struct impl_IGridViewItemFactory
{
	Windows::UI::Xaml::Controls::GridViewItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGroupItem
{
};

template <typename T>
struct impl_IGroupItemFactory
{
	Windows::UI::Xaml::Controls::GroupItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGroupStyle
{
	Windows::UI::Xaml::Controls::ItemsPanelTemplate Panel() const;
	void Panel(Windows::UI::Xaml::Controls::ItemsPanelTemplate const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Controls::DataTemplateSelector HeaderTemplateSelector() const;
	void HeaderTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const & value) const;
	bool HidesIfEmpty() const;
	void HidesIfEmpty(bool value) const;
};

template <typename T>
struct impl_IGroupStyleFactory
{
	Windows::UI::Xaml::Controls::GroupStyle CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGroupStyle2
{
	Windows::UI::Xaml::Style HeaderContainerStyle() const;
	void HeaderContainerStyle(Windows::UI::Xaml::Style const & value) const;
};

template <typename T>
struct impl_IGroupStyleSelector
{
	Windows::UI::Xaml::Controls::GroupStyle SelectGroupStyle(IInspectable const & group, unsigned level) const;
};

template <typename T>
struct impl_IGroupStyleSelectorOverrides
{
	Windows::UI::Xaml::Controls::GroupStyle SelectGroupStyleCore(IInspectable const & group, unsigned level) const;
};

template <typename T>
struct impl_IGroupStyleSelectorFactory
{
	Windows::UI::Xaml::Controls::GroupStyleSelector CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IHyperlinkButton
{
	Windows::Foundation::Uri NavigateUri() const;
	void NavigateUri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IHyperlinkButtonStatics
{
	Windows::UI::Xaml::DependencyProperty NavigateUriProperty() const;
};

template <typename T>
struct impl_IHyperlinkButtonFactory
{
	Windows::UI::Xaml::Controls::HyperlinkButton CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IItemContainerMapping
{
	IInspectable ItemFromContainer(Windows::UI::Xaml::DependencyObject const & container) const;
	Windows::UI::Xaml::DependencyObject ContainerFromItem(IInspectable const & item) const;
	int IndexFromContainer(Windows::UI::Xaml::DependencyObject const & container) const;
	Windows::UI::Xaml::DependencyObject ContainerFromIndex(int index) const;
};

template <typename T>
struct impl_IImage
{
	Windows::UI::Xaml::Media::ImageSource Source() const;
	void Source(Windows::UI::Xaml::Media::ImageSource const & value) const;
	Windows::UI::Xaml::Media::Stretch Stretch() const;
	void Stretch(Windows::UI::Xaml::Media::Stretch value) const;
	Windows::UI::Xaml::Thickness NineGrid() const;
	void NineGrid(Windows::UI::Xaml::Thickness const & value) const;
	Windows::Media::PlayTo::PlayToSource PlayToSource() const;
	EventRegistrationToken ImageFailed(Windows::UI::Xaml::IExceptionRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ImageFailed(F value) const;
	void ImageFailed(EventRegistrationToken token) const;
	EventRegistrationToken ImageOpened(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ImageOpened(F value) const;
	void ImageOpened(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IImageStatics
{
	Windows::UI::Xaml::DependencyProperty SourceProperty() const;
	Windows::UI::Xaml::DependencyProperty StretchProperty() const;
	Windows::UI::Xaml::DependencyProperty NineGridProperty() const;
	Windows::UI::Xaml::DependencyProperty PlayToSourceProperty() const;
};

template <typename T>
struct impl_INavigate
{
	bool Navigate(Windows::UI::Xaml::Interop::TypeName const & sourcePageType) const;
};

template <typename T>
struct impl_ISemanticZoomInformation
{
	Windows::UI::Xaml::Controls::SemanticZoom SemanticZoomOwner() const;
	void SemanticZoomOwner(Windows::UI::Xaml::Controls::SemanticZoom const & value) const;
	bool IsActiveView() const;
	void IsActiveView(bool value) const;
	bool IsZoomedInView() const;
	void IsZoomedInView(bool value) const;
	void InitializeViewChange() const;
	void CompleteViewChange() const;
	void MakeVisible(Windows::UI::Xaml::Controls::SemanticZoomLocation const & item) const;
	void StartViewChangeFrom(Windows::UI::Xaml::Controls::SemanticZoomLocation const & source, Windows::UI::Xaml::Controls::SemanticZoomLocation const & destination) const;
	void StartViewChangeTo(Windows::UI::Xaml::Controls::SemanticZoomLocation const & source, Windows::UI::Xaml::Controls::SemanticZoomLocation const & destination) const;
	void CompleteViewChangeFrom(Windows::UI::Xaml::Controls::SemanticZoomLocation const & source, Windows::UI::Xaml::Controls::SemanticZoomLocation const & destination) const;
	void CompleteViewChangeTo(Windows::UI::Xaml::Controls::SemanticZoomLocation const & source, Windows::UI::Xaml::Controls::SemanticZoomLocation const & destination) const;
};

template <typename T>
struct impl_IItemClickEventArgs
{
	IInspectable ClickedItem() const;
};

template <typename T>
struct impl_IItemContainerGenerator
{
	EventRegistrationToken ItemsChanged(Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ItemsChanged(F value) const;
	void ItemsChanged(EventRegistrationToken token) const;
	Windows::UI::Xaml::Controls::ItemContainerGenerator GetItemContainerGeneratorForPanel(Windows::UI::Xaml::Controls::Panel const & panel) const;
	void StartAt(Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const & position, Windows::UI::Xaml::Controls::Primitives::GeneratorDirection direction, bool allowStartAtRealizedItem) const;
	void Stop() const;
	Windows::UI::Xaml::DependencyObject GenerateNext(bool & isNewlyRealized) const;
	void PrepareItemContainer(Windows::UI::Xaml::DependencyObject const & container) const;
	void RemoveAll() const;
	void Remove(Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const & position, int count) const;
	Windows::UI::Xaml::Controls::Primitives::GeneratorPosition GeneratorPositionFromIndex(int itemIndex) const;
	int IndexFromGeneratorPosition(Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const & position) const;
	void Recycle(Windows::UI::Xaml::Controls::Primitives::GeneratorPosition const & position, int count) const;
};

template <typename T>
struct impl_IItemsControl
{
	IInspectable ItemsSource() const;
	void ItemsSource(IInspectable const & value) const;
	Windows::UI::Xaml::Controls::ItemCollection Items() const;
	Windows::UI::Xaml::DataTemplate ItemTemplate() const;
	void ItemTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Controls::DataTemplateSelector ItemTemplateSelector() const;
	void ItemTemplateSelector(Windows::UI::Xaml::Controls::DataTemplateSelector const & value) const;
	Windows::UI::Xaml::Controls::ItemsPanelTemplate ItemsPanel() const;
	void ItemsPanel(Windows::UI::Xaml::Controls::ItemsPanelTemplate const & value) const;
	String DisplayMemberPath() const;
	void DisplayMemberPath(String const & value) const;
	template <unsigned S0> void DisplayMemberPath(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Style ItemContainerStyle() const;
	void ItemContainerStyle(Windows::UI::Xaml::Style const & value) const;
	Windows::UI::Xaml::Controls::StyleSelector ItemContainerStyleSelector() const;
	void ItemContainerStyleSelector(Windows::UI::Xaml::Controls::StyleSelector const & value) const;
	Windows::UI::Xaml::Controls::ItemContainerGenerator ItemContainerGenerator() const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection ItemContainerTransitions() const;
	void ItemContainerTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
	Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::GroupStyle> GroupStyle() const;
	Windows::UI::Xaml::Controls::GroupStyleSelector GroupStyleSelector() const;
	void GroupStyleSelector(Windows::UI::Xaml::Controls::GroupStyleSelector const & value) const;
	bool IsGrouping() const;
};

template <typename T>
struct impl_IItemsControlOverrides
{
	bool IsItemItsOwnContainerOverride(IInspectable const & item) const;
	Windows::UI::Xaml::DependencyObject GetContainerForItemOverride() const;
	void ClearContainerForItemOverride(Windows::UI::Xaml::DependencyObject const & element, IInspectable const & item) const;
	void PrepareContainerForItemOverride(Windows::UI::Xaml::DependencyObject const & element, IInspectable const & item) const;
	void OnItemsChanged(IInspectable const & e) const;
	void OnItemContainerStyleChanged(Windows::UI::Xaml::Style const & oldItemContainerStyle, Windows::UI::Xaml::Style const & newItemContainerStyle) const;
	void OnItemContainerStyleSelectorChanged(Windows::UI::Xaml::Controls::StyleSelector const & oldItemContainerStyleSelector, Windows::UI::Xaml::Controls::StyleSelector const & newItemContainerStyleSelector) const;
	void OnItemTemplateChanged(Windows::UI::Xaml::DataTemplate const & oldItemTemplate, Windows::UI::Xaml::DataTemplate const & newItemTemplate) const;
	void OnItemTemplateSelectorChanged(Windows::UI::Xaml::Controls::DataTemplateSelector const & oldItemTemplateSelector, Windows::UI::Xaml::Controls::DataTemplateSelector const & newItemTemplateSelector) const;
	void OnGroupStyleSelectorChanged(Windows::UI::Xaml::Controls::GroupStyleSelector const & oldGroupStyleSelector, Windows::UI::Xaml::Controls::GroupStyleSelector const & newGroupStyleSelector) const;
};

template <typename T>
struct impl_IItemsControlStatics
{
	Windows::UI::Xaml::DependencyProperty ItemsSourceProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemTemplateSelectorProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemsPanelProperty() const;
	Windows::UI::Xaml::DependencyProperty DisplayMemberPathProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemContainerStyleProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemContainerStyleSelectorProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemContainerTransitionsProperty() const;
	Windows::UI::Xaml::DependencyProperty GroupStyleSelectorProperty() const;
	Windows::UI::Xaml::DependencyProperty IsGroupingProperty() const;
	Windows::UI::Xaml::Controls::ItemsControl GetItemsOwner(Windows::UI::Xaml::DependencyObject const & element) const;
	Windows::UI::Xaml::Controls::ItemsControl ItemsControlFromItemContainer(Windows::UI::Xaml::DependencyObject const & container) const;
};

template <typename T>
struct impl_IItemsControlFactory
{
	Windows::UI::Xaml::Controls::ItemsControl CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IItemsControl2
{
	Windows::UI::Xaml::Controls::Panel ItemsPanelRoot() const;
};

template <typename T>
struct impl_IItemsPanelTemplate
{
};

template <typename T>
struct impl_IItemsPresenter
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection HeaderTransitions() const;
	void HeaderTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
	Windows::UI::Xaml::Thickness Padding() const;
	void Padding(Windows::UI::Xaml::Thickness const & value) const;
};

template <typename T>
struct impl_IItemsPresenterStatics
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTransitionsProperty() const;
	Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
};

template <typename T>
struct impl_IItemsPresenter2
{
	IInspectable Footer() const;
	void Footer(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate FooterTemplate() const;
	void FooterTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection FooterTransitions() const;
	void FooterTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
};

template <typename T>
struct impl_IItemsPresenterStatics2
{
	Windows::UI::Xaml::DependencyProperty FooterProperty() const;
	Windows::UI::Xaml::DependencyProperty FooterTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty FooterTransitionsProperty() const;
};

template <typename T>
struct impl_IListBox
{
	Windows::Foundation::Collections::IVector<IInspectable> SelectedItems() const;
	Windows::UI::Xaml::Controls::SelectionMode SelectionMode() const;
	void SelectionMode(Windows::UI::Xaml::Controls::SelectionMode value) const;
	void ScrollIntoView(IInspectable const & item) const;
	void SelectAll() const;
};

template <typename T>
struct impl_IListBoxStatics
{
	Windows::UI::Xaml::DependencyProperty SelectionModeProperty() const;
};

template <typename T>
struct impl_IListBoxFactory
{
	Windows::UI::Xaml::Controls::ListBox CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListBoxItem
{
};

template <typename T>
struct impl_IListBoxItemFactory
{
	Windows::UI::Xaml::Controls::ListBoxItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListView
{
};

template <typename T>
struct impl_IListViewFactory
{
	Windows::UI::Xaml::Controls::ListView CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListViewBase
{
	Windows::Foundation::Collections::IVector<IInspectable> SelectedItems() const;
	Windows::UI::Xaml::Controls::ListViewSelectionMode SelectionMode() const;
	void SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode value) const;
	bool IsSwipeEnabled() const;
	void IsSwipeEnabled(bool value) const;
	bool CanDragItems() const;
	void CanDragItems(bool value) const;
	bool CanReorderItems() const;
	void CanReorderItems(bool value) const;
	bool IsItemClickEnabled() const;
	void IsItemClickEnabled(bool value) const;
	double DataFetchSize() const;
	void DataFetchSize(double value) const;
	double IncrementalLoadingThreshold() const;
	void IncrementalLoadingThreshold(double value) const;
	Windows::UI::Xaml::Controls::IncrementalLoadingTrigger IncrementalLoadingTrigger() const;
	void IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger value) const;
	EventRegistrationToken ItemClick(Windows::UI::Xaml::Controls::IItemClickEventHandler const & value) const;
	template <typename F> EventRegistrationToken ItemClick(F value) const;
	void ItemClick(EventRegistrationToken token) const;
	EventRegistrationToken DragItemsStarting(Windows::UI::Xaml::Controls::IDragItemsStartingEventHandler const & value) const;
	template <typename F> EventRegistrationToken DragItemsStarting(F value) const;
	void DragItemsStarting(EventRegistrationToken token) const;
	void ScrollIntoView(IInspectable const & item) const;
	void SelectAll() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::UI::Xaml::Data::LoadMoreItemsResult> LoadMoreItemsAsync() const;
	void ScrollIntoView(IInspectable const & item, Windows::UI::Xaml::Controls::ScrollIntoViewAlignment alignment) const;
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection HeaderTransitions() const;
	void HeaderTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
};

template <typename T>
struct impl_IListViewBaseStatics
{
	Windows::UI::Xaml::DependencyProperty SelectionModeProperty() const;
	Windows::UI::Xaml::DependencyProperty IsSwipeEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty CanDragItemsProperty() const;
	Windows::UI::Xaml::DependencyProperty CanReorderItemsProperty() const;
	Windows::UI::Xaml::DependencyProperty IsItemClickEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty DataFetchSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty IncrementalLoadingThresholdProperty() const;
	Windows::UI::Xaml::DependencyProperty IncrementalLoadingTriggerProperty() const;
	Windows::UI::Xaml::DependencyProperty SemanticZoomOwnerProperty() const;
	Windows::UI::Xaml::DependencyProperty IsActiveViewProperty() const;
	Windows::UI::Xaml::DependencyProperty IsZoomedInViewProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTransitionsProperty() const;
};

template <typename T>
struct impl_IListViewBaseFactory
{
	Windows::UI::Xaml::Controls::ListViewBase CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListViewBase2
{
	bool ShowsScrollingPlaceholders() const;
	void ShowsScrollingPlaceholders(bool value) const;
	EventRegistrationToken ContainerContentChanging(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> const & value) const;
	template <typename F> EventRegistrationToken ContainerContentChanging(F value) const;
	void ContainerContentChanging(EventRegistrationToken token) const;
	void SetDesiredContainerUpdateDuration(Windows::Foundation::TimeSpan const & duration) const;
	IInspectable Footer() const;
	void Footer(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate FooterTemplate() const;
	void FooterTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection FooterTransitions() const;
	void FooterTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
};

template <typename T>
struct impl_IListViewBaseStatics2
{
	Windows::UI::Xaml::DependencyProperty ShowsScrollingPlaceholdersProperty() const;
	Windows::UI::Xaml::DependencyProperty FooterProperty() const;
	Windows::UI::Xaml::DependencyProperty FooterTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty FooterTransitionsProperty() const;
};

template <typename T>
struct impl_IListViewItem
{
	Windows::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings TemplateSettings() const;
};

template <typename T>
struct impl_IListViewItemFactory
{
	Windows::UI::Xaml::Controls::ListViewItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IMediaElement
{
	Windows::UI::Xaml::Media::ImageSource PosterSource() const;
	void PosterSource(Windows::UI::Xaml::Media::ImageSource const & value) const;
	Windows::Foundation::Uri Source() const;
	void Source(Windows::Foundation::Uri const & value) const;
	bool IsMuted() const;
	void IsMuted(bool value) const;
	bool IsAudioOnly() const;
	bool AutoPlay() const;
	void AutoPlay(bool value) const;
	double Volume() const;
	void Volume(double value) const;
	double Balance() const;
	void Balance(double value) const;
	int NaturalVideoHeight() const;
	int NaturalVideoWidth() const;
	Windows::UI::Xaml::Duration NaturalDuration() const;
	Windows::Foundation::TimeSpan Position() const;
	void Position(Windows::Foundation::TimeSpan const & value) const;
	double DownloadProgress() const;
	double BufferingProgress() const;
	double DownloadProgressOffset() const;
	Windows::UI::Xaml::Media::MediaElementState CurrentState() const;
	Windows::UI::Xaml::Media::TimelineMarkerCollection Markers() const;
	bool CanSeek() const;
	bool CanPause() const;
	int AudioStreamCount() const;
	Windows::Foundation::IReference<int> AudioStreamIndex() const;
	void AudioStreamIndex(Windows::Foundation::IReference<int> const & value) const;
	double PlaybackRate() const;
	void PlaybackRate(double value) const;
	bool IsLooping() const;
	void IsLooping(bool value) const;
	Windows::Media::PlayTo::PlayToSource PlayToSource() const;
	double DefaultPlaybackRate() const;
	void DefaultPlaybackRate(double value) const;
	int AspectRatioWidth() const;
	int AspectRatioHeight() const;
	bool RealTimePlayback() const;
	void RealTimePlayback(bool value) const;
	Windows::UI::Xaml::Media::AudioCategory AudioCategory() const;
	void AudioCategory(Windows::UI::Xaml::Media::AudioCategory value) const;
	Windows::UI::Xaml::Media::AudioDeviceType AudioDeviceType() const;
	void AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType value) const;
	Windows::Media::Protection::MediaProtectionManager ProtectionManager() const;
	void ProtectionManager(Windows::Media::Protection::MediaProtectionManager const & value) const;
	Windows::UI::Xaml::Media::Stereo3DVideoPackingMode Stereo3DVideoPackingMode() const;
	void Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value) const;
	Windows::UI::Xaml::Media::Stereo3DVideoRenderMode Stereo3DVideoRenderMode() const;
	void Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode value) const;
	bool IsStereo3DVideo() const;
	EventRegistrationToken MediaOpened(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken MediaOpened(F value) const;
	void MediaOpened(EventRegistrationToken token) const;
	EventRegistrationToken MediaEnded(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken MediaEnded(F value) const;
	void MediaEnded(EventRegistrationToken token) const;
	EventRegistrationToken MediaFailed(Windows::UI::Xaml::IExceptionRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken MediaFailed(F value) const;
	void MediaFailed(EventRegistrationToken token) const;
	EventRegistrationToken DownloadProgressChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken DownloadProgressChanged(F value) const;
	void DownloadProgressChanged(EventRegistrationToken token) const;
	EventRegistrationToken BufferingProgressChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken BufferingProgressChanged(F value) const;
	void BufferingProgressChanged(EventRegistrationToken token) const;
	EventRegistrationToken CurrentStateChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken CurrentStateChanged(F value) const;
	void CurrentStateChanged(EventRegistrationToken token) const;
	EventRegistrationToken MarkerReached(Windows::UI::Xaml::Media::ITimelineMarkerRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken MarkerReached(F value) const;
	void MarkerReached(EventRegistrationToken token) const;
	EventRegistrationToken RateChanged(Windows::UI::Xaml::Media::IRateChangedRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken RateChanged(F value) const;
	void RateChanged(EventRegistrationToken token) const;
	EventRegistrationToken VolumeChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken VolumeChanged(F value) const;
	void VolumeChanged(EventRegistrationToken token) const;
	EventRegistrationToken SeekCompleted(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken SeekCompleted(F value) const;
	void SeekCompleted(EventRegistrationToken token) const;
	void Stop() const;
	void Play() const;
	void Pause() const;
	Windows::UI::Xaml::Media::MediaCanPlayResponse CanPlayType(String const & type) const;
	template <unsigned S0> Windows::UI::Xaml::Media::MediaCanPlayResponse CanPlayType(wchar_t const (&type)[S0]) const;
	void SetSource(Windows::Storage::Streams::IRandomAccessStream const & stream, String const & mimeType) const;
	template <unsigned S0> void SetSource(Windows::Storage::Streams::IRandomAccessStream const & stream, wchar_t const (&mimeType)[S0]) const;
	String GetAudioStreamLanguage(Windows::Foundation::IReference<int> const & index) const;
	void AddAudioEffect(String const & effectID, bool effectOptional, Windows::Foundation::Collections::IPropertySet const & effectConfiguration) const;
	template <unsigned S0> void AddAudioEffect(wchar_t const (&effectID)[S0], bool effectOptional, Windows::Foundation::Collections::IPropertySet const & effectConfiguration) const;
	void AddVideoEffect(String const & effectID, bool effectOptional, Windows::Foundation::Collections::IPropertySet const & effectConfiguration) const;
	template <unsigned S0> void AddVideoEffect(wchar_t const (&effectID)[S0], bool effectOptional, Windows::Foundation::Collections::IPropertySet const & effectConfiguration) const;
	void RemoveAllEffects() const;
	Windows::UI::Xaml::Media::Stereo3DVideoPackingMode ActualStereo3DVideoPackingMode() const;
};

template <typename T>
struct impl_IMediaElementStatics
{
	Windows::UI::Xaml::DependencyProperty PosterSourceProperty() const;
	Windows::UI::Xaml::DependencyProperty SourceProperty() const;
	Windows::UI::Xaml::DependencyProperty IsMutedProperty() const;
	Windows::UI::Xaml::DependencyProperty IsAudioOnlyProperty() const;
	Windows::UI::Xaml::DependencyProperty AutoPlayProperty() const;
	Windows::UI::Xaml::DependencyProperty VolumeProperty() const;
	Windows::UI::Xaml::DependencyProperty BalanceProperty() const;
	Windows::UI::Xaml::DependencyProperty NaturalVideoHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty NaturalVideoWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty NaturalDurationProperty() const;
	Windows::UI::Xaml::DependencyProperty PositionProperty() const;
	Windows::UI::Xaml::DependencyProperty DownloadProgressProperty() const;
	Windows::UI::Xaml::DependencyProperty BufferingProgressProperty() const;
	Windows::UI::Xaml::DependencyProperty DownloadProgressOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty CurrentStateProperty() const;
	Windows::UI::Xaml::DependencyProperty CanSeekProperty() const;
	Windows::UI::Xaml::DependencyProperty CanPauseProperty() const;
	Windows::UI::Xaml::DependencyProperty AudioStreamCountProperty() const;
	Windows::UI::Xaml::DependencyProperty AudioStreamIndexProperty() const;
	Windows::UI::Xaml::DependencyProperty PlaybackRateProperty() const;
	Windows::UI::Xaml::DependencyProperty IsLoopingProperty() const;
	Windows::UI::Xaml::DependencyProperty PlayToSourceProperty() const;
	Windows::UI::Xaml::DependencyProperty DefaultPlaybackRateProperty() const;
	Windows::UI::Xaml::DependencyProperty AspectRatioWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty AspectRatioHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty RealTimePlaybackProperty() const;
	Windows::UI::Xaml::DependencyProperty AudioCategoryProperty() const;
	Windows::UI::Xaml::DependencyProperty AudioDeviceTypeProperty() const;
	Windows::UI::Xaml::DependencyProperty ProtectionManagerProperty() const;
	Windows::UI::Xaml::DependencyProperty Stereo3DVideoPackingModeProperty() const;
	Windows::UI::Xaml::DependencyProperty Stereo3DVideoRenderModeProperty() const;
	Windows::UI::Xaml::DependencyProperty IsStereo3DVideoProperty() const;
	Windows::UI::Xaml::DependencyProperty ActualStereo3DVideoPackingModeProperty() const;
};

template <typename T>
struct impl_IMediaElement2
{
	bool AreTransportControlsEnabled() const;
	void AreTransportControlsEnabled(bool value) const;
	Windows::UI::Xaml::Media::Stretch Stretch() const;
	void Stretch(Windows::UI::Xaml::Media::Stretch value) const;
	bool IsFullWindow() const;
	void IsFullWindow(bool value) const;
	void SetMediaStreamSource(Windows::Media::Core::IMediaSource const & source) const;
	Windows::Foundation::Uri PlayToPreferredSourceUri() const;
	void PlayToPreferredSourceUri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IMediaElementStatics2
{
	Windows::UI::Xaml::DependencyProperty AreTransportControlsEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty StretchProperty() const;
	Windows::UI::Xaml::DependencyProperty IsFullWindowProperty() const;
	Windows::UI::Xaml::DependencyProperty PlayToPreferredSourceUriProperty() const;
};

template <typename T>
struct impl_INotifyEventArgs
{
	String Value() const;
};

template <typename T>
struct impl_INotifyEventArgs2
{
	Windows::Foundation::Uri CallingUri() const;
};

template <typename T>
struct impl_IPanel
{
	Windows::UI::Xaml::Controls::UIElementCollection Children() const;
	Windows::UI::Xaml::Media::Brush Background() const;
	void Background(Windows::UI::Xaml::Media::Brush const & value) const;
	bool IsItemsHost() const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection ChildrenTransitions() const;
	void ChildrenTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
};

template <typename T>
struct impl_IPanelStatics
{
	Windows::UI::Xaml::DependencyProperty BackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty IsItemsHostProperty() const;
	Windows::UI::Xaml::DependencyProperty ChildrenTransitionsProperty() const;
};

template <typename T>
struct impl_IPanelFactory
{
	Windows::UI::Xaml::Controls::Panel CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IPasswordBox
{
	String Password() const;
	void Password(String const & value) const;
	template <unsigned S0> void Password(wchar_t const (&value)[S0]) const;
	String PasswordChar() const;
	void PasswordChar(String const & value) const;
	template <unsigned S0> void PasswordChar(wchar_t const (&value)[S0]) const;
	bool IsPasswordRevealButtonEnabled() const;
	void IsPasswordRevealButtonEnabled(bool value) const;
	int MaxLength() const;
	void MaxLength(int value) const;
	EventRegistrationToken PasswordChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken PasswordChanged(F value) const;
	void PasswordChanged(EventRegistrationToken token) const;
	EventRegistrationToken ContextMenuOpening(Windows::UI::Xaml::Controls::IContextMenuOpeningEventHandler const & value) const;
	template <typename F> EventRegistrationToken ContextMenuOpening(F value) const;
	void ContextMenuOpening(EventRegistrationToken token) const;
	void SelectAll() const;
};

template <typename T>
struct impl_IPasswordBoxStatics
{
	Windows::UI::Xaml::DependencyProperty PasswordProperty() const;
	Windows::UI::Xaml::DependencyProperty PasswordCharProperty() const;
	Windows::UI::Xaml::DependencyProperty IsPasswordRevealButtonEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxLengthProperty() const;
};

template <typename T>
struct impl_IPasswordBox2
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	String PlaceholderText() const;
	void PlaceholderText(String const & value) const;
	template <unsigned S0> void PlaceholderText(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
	void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const & value) const;
	bool PreventKeyboardDisplayOnProgrammaticFocus() const;
	void PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
	EventRegistrationToken Paste(Windows::UI::Xaml::Controls::ITextControlPasteEventHandler const & value) const;
	template <typename F> EventRegistrationToken Paste(F value) const;
	void Paste(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPasswordBoxStatics2
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
	Windows::UI::Xaml::DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
};

template <typename T>
struct impl_IProgressBar
{
	bool IsIndeterminate() const;
	void IsIndeterminate(bool value) const;
	bool ShowError() const;
	void ShowError(bool value) const;
	bool ShowPaused() const;
	void ShowPaused(bool value) const;
	Windows::UI::Xaml::Controls::Primitives::ProgressBarTemplateSettings TemplateSettings() const;
};

template <typename T>
struct impl_IProgressBarStatics
{
	Windows::UI::Xaml::DependencyProperty IsIndeterminateProperty() const;
	Windows::UI::Xaml::DependencyProperty ShowErrorProperty() const;
	Windows::UI::Xaml::DependencyProperty ShowPausedProperty() const;
};

template <typename T>
struct impl_IProgressBarFactory
{
	Windows::UI::Xaml::Controls::ProgressBar CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IProgressRing
{
	bool IsActive() const;
	void IsActive(bool value) const;
	Windows::UI::Xaml::Controls::Primitives::ProgressRingTemplateSettings TemplateSettings() const;
};

template <typename T>
struct impl_IProgressRingStatics
{
	Windows::UI::Xaml::DependencyProperty IsActiveProperty() const;
};

template <typename T>
struct impl_IRadioButton
{
	String GroupName() const;
	void GroupName(String const & value) const;
	template <unsigned S0> void GroupName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IRadioButtonStatics
{
	Windows::UI::Xaml::DependencyProperty GroupNameProperty() const;
};

template <typename T>
struct impl_IRadioButtonFactory
{
	Windows::UI::Xaml::Controls::RadioButton CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRichEditBox
{
	bool IsReadOnly() const;
	void IsReadOnly(bool value) const;
	bool AcceptsReturn() const;
	void AcceptsReturn(bool value) const;
	Windows::UI::Xaml::TextAlignment TextAlignment() const;
	void TextAlignment(Windows::UI::Xaml::TextAlignment value) const;
	Windows::UI::Xaml::TextWrapping TextWrapping() const;
	void TextWrapping(Windows::UI::Xaml::TextWrapping value) const;
	bool IsSpellCheckEnabled() const;
	void IsSpellCheckEnabled(bool value) const;
	bool IsTextPredictionEnabled() const;
	void IsTextPredictionEnabled(bool value) const;
	Windows::UI::Text::ITextDocument Document() const;
	Windows::UI::Xaml::Input::InputScope InputScope() const;
	void InputScope(Windows::UI::Xaml::Input::InputScope const & value) const;
	EventRegistrationToken TextChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken TextChanged(F value) const;
	void TextChanged(EventRegistrationToken token) const;
	EventRegistrationToken SelectionChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken SelectionChanged(F value) const;
	void SelectionChanged(EventRegistrationToken token) const;
	EventRegistrationToken ContextMenuOpening(Windows::UI::Xaml::Controls::IContextMenuOpeningEventHandler const & value) const;
	template <typename F> EventRegistrationToken ContextMenuOpening(F value) const;
	void ContextMenuOpening(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IRichEditBoxStatics
{
	Windows::UI::Xaml::DependencyProperty IsReadOnlyProperty() const;
	Windows::UI::Xaml::DependencyProperty AcceptsReturnProperty() const;
	Windows::UI::Xaml::DependencyProperty TextAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty TextWrappingProperty() const;
	Windows::UI::Xaml::DependencyProperty IsSpellCheckEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty IsTextPredictionEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty InputScopeProperty() const;
};

template <typename T>
struct impl_IRichEditBoxFactory
{
	Windows::UI::Xaml::Controls::RichEditBox CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRichEditBox2
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	String PlaceholderText() const;
	void PlaceholderText(String const & value) const;
	template <unsigned S0> void PlaceholderText(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
	void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const & value) const;
	bool PreventKeyboardDisplayOnProgrammaticFocus() const;
	void PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
	bool IsColorFontEnabled() const;
	void IsColorFontEnabled(bool value) const;
	EventRegistrationToken Paste(Windows::UI::Xaml::Controls::ITextControlPasteEventHandler const & value) const;
	template <typename F> EventRegistrationToken Paste(F value) const;
	void Paste(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IRichEditBoxStatics2
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
	Windows::UI::Xaml::DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
	Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty() const;
};

template <typename T>
struct impl_IRichTextBlock
{
	double FontSize() const;
	void FontSize(double value) const;
	Windows::UI::Xaml::Media::FontFamily FontFamily() const;
	void FontFamily(Windows::UI::Xaml::Media::FontFamily const & value) const;
	Windows::UI::Text::FontWeight FontWeight() const;
	void FontWeight(Windows::UI::Text::FontWeight const & value) const;
	Windows::UI::Text::FontStyle FontStyle() const;
	void FontStyle(Windows::UI::Text::FontStyle value) const;
	Windows::UI::Text::FontStretch FontStretch() const;
	void FontStretch(Windows::UI::Text::FontStretch value) const;
	Windows::UI::Xaml::Media::Brush Foreground() const;
	void Foreground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::TextWrapping TextWrapping() const;
	void TextWrapping(Windows::UI::Xaml::TextWrapping value) const;
	Windows::UI::Xaml::TextTrimming TextTrimming() const;
	void TextTrimming(Windows::UI::Xaml::TextTrimming value) const;
	Windows::UI::Xaml::TextAlignment TextAlignment() const;
	void TextAlignment(Windows::UI::Xaml::TextAlignment value) const;
	Windows::UI::Xaml::Documents::BlockCollection Blocks() const;
	Windows::UI::Xaml::Thickness Padding() const;
	void Padding(Windows::UI::Xaml::Thickness const & value) const;
	double LineHeight() const;
	void LineHeight(double value) const;
	Windows::UI::Xaml::LineStackingStrategy LineStackingStrategy() const;
	void LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) const;
	int CharacterSpacing() const;
	void CharacterSpacing(int value) const;
	Windows::UI::Xaml::Controls::RichTextBlockOverflow OverflowContentTarget() const;
	void OverflowContentTarget(Windows::UI::Xaml::Controls::RichTextBlockOverflow const & value) const;
	bool IsTextSelectionEnabled() const;
	void IsTextSelectionEnabled(bool value) const;
	bool HasOverflowContent() const;
	String SelectedText() const;
	Windows::UI::Xaml::Documents::TextPointer ContentStart() const;
	Windows::UI::Xaml::Documents::TextPointer ContentEnd() const;
	Windows::UI::Xaml::Documents::TextPointer SelectionStart() const;
	Windows::UI::Xaml::Documents::TextPointer SelectionEnd() const;
	double BaselineOffset() const;
	EventRegistrationToken SelectionChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken SelectionChanged(F value) const;
	void SelectionChanged(EventRegistrationToken token) const;
	EventRegistrationToken ContextMenuOpening(Windows::UI::Xaml::Controls::IContextMenuOpeningEventHandler const & value) const;
	template <typename F> EventRegistrationToken ContextMenuOpening(F value) const;
	void ContextMenuOpening(EventRegistrationToken token) const;
	void SelectAll() const;
	void Select(Windows::UI::Xaml::Documents::TextPointer const & start, Windows::UI::Xaml::Documents::TextPointer const & end) const;
	Windows::UI::Xaml::Documents::TextPointer GetPositionFromPoint(Windows::Foundation::Point const & point) const;
	bool Focus(Windows::UI::Xaml::FocusState value) const;
	double TextIndent() const;
	void TextIndent(double value) const;
};

template <typename T>
struct impl_IRichTextBlockStatics
{
	Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
	Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStretchProperty() const;
	Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
	Windows::UI::Xaml::DependencyProperty TextWrappingProperty() const;
	Windows::UI::Xaml::DependencyProperty TextTrimmingProperty() const;
	Windows::UI::Xaml::DependencyProperty TextAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
	Windows::UI::Xaml::DependencyProperty LineHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty LineStackingStrategyProperty() const;
	Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty() const;
	Windows::UI::Xaml::DependencyProperty OverflowContentTargetProperty() const;
	Windows::UI::Xaml::DependencyProperty IsTextSelectionEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty HasOverflowContentProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedTextProperty() const;
	Windows::UI::Xaml::DependencyProperty TextIndentProperty() const;
};

template <typename T>
struct impl_IRichTextBlock2
{
	int MaxLines() const;
	void MaxLines(int value) const;
	Windows::UI::Xaml::TextLineBounds TextLineBounds() const;
	void TextLineBounds(Windows::UI::Xaml::TextLineBounds value) const;
	Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
	void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const & value) const;
	Windows::UI::Xaml::OpticalMarginAlignment OpticalMarginAlignment() const;
	void OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) const;
	bool IsColorFontEnabled() const;
	void IsColorFontEnabled(bool value) const;
	Windows::UI::Xaml::TextReadingOrder TextReadingOrder() const;
	void TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const;
};

template <typename T>
struct impl_IRichTextBlockStatics2
{
	Windows::UI::Xaml::DependencyProperty MaxLinesProperty() const;
	Windows::UI::Xaml::DependencyProperty TextLineBoundsProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
	Windows::UI::Xaml::DependencyProperty OpticalMarginAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty TextReadingOrderProperty() const;
};

template <typename T>
struct impl_IRichTextBlockOverflow
{
	Windows::UI::Xaml::Controls::RichTextBlockOverflow OverflowContentTarget() const;
	void OverflowContentTarget(Windows::UI::Xaml::Controls::RichTextBlockOverflow const & value) const;
	Windows::UI::Xaml::Thickness Padding() const;
	void Padding(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::Controls::RichTextBlock ContentSource() const;
	bool HasOverflowContent() const;
	Windows::UI::Xaml::Documents::TextPointer ContentStart() const;
	Windows::UI::Xaml::Documents::TextPointer ContentEnd() const;
	double BaselineOffset() const;
	Windows::UI::Xaml::Documents::TextPointer GetPositionFromPoint(Windows::Foundation::Point const & point) const;
	bool Focus(Windows::UI::Xaml::FocusState value) const;
};

template <typename T>
struct impl_IRichTextBlockOverflowStatics
{
	Windows::UI::Xaml::DependencyProperty OverflowContentTargetProperty() const;
	Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
	Windows::UI::Xaml::DependencyProperty HasOverflowContentProperty() const;
};

template <typename T>
struct impl_IRichTextBlockOverflow2
{
	int MaxLines() const;
	void MaxLines(int value) const;
};

template <typename T>
struct impl_IRichTextBlockOverflowStatics2
{
	Windows::UI::Xaml::DependencyProperty MaxLinesProperty() const;
};

template <typename T>
struct impl_IRowDefinition
{
	Windows::UI::Xaml::GridLength Height() const;
	void Height(Windows::UI::Xaml::GridLength const & value) const;
	double MaxHeight() const;
	void MaxHeight(double value) const;
	double MinHeight() const;
	void MinHeight(double value) const;
	double ActualHeight() const;
};

template <typename T>
struct impl_IRowDefinitionStatics
{
	Windows::UI::Xaml::DependencyProperty HeightProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty MinHeightProperty() const;
};

template <typename T>
struct impl_IScrollContentPresenter
{
	bool CanVerticallyScroll() const;
	void CanVerticallyScroll(bool value) const;
	bool CanHorizontallyScroll() const;
	void CanHorizontallyScroll(bool value) const;
	double ExtentWidth() const;
	double ExtentHeight() const;
	double ViewportWidth() const;
	double ViewportHeight() const;
	double HorizontalOffset() const;
	double VerticalOffset() const;
	IInspectable ScrollOwner() const;
	void ScrollOwner(IInspectable const & value) const;
	void LineUp() const;
	void LineDown() const;
	void LineLeft() const;
	void LineRight() const;
	void PageUp() const;
	void PageDown() const;
	void PageLeft() const;
	void PageRight() const;
	void MouseWheelUp() const;
	void MouseWheelDown() const;
	void MouseWheelLeft() const;
	void MouseWheelRight() const;
	void SetHorizontalOffset(double offset) const;
	void SetVerticalOffset(double offset) const;
	Windows::Foundation::Rect MakeVisible(Windows::UI::Xaml::UIElement const & visual, Windows::Foundation::Rect const & rectangle) const;
};

template <typename T>
struct impl_IScrollViewer
{
	Windows::UI::Xaml::Controls::ScrollBarVisibility HorizontalScrollBarVisibility() const;
	void HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) const;
	Windows::UI::Xaml::Controls::ScrollBarVisibility VerticalScrollBarVisibility() const;
	void VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) const;
	bool IsHorizontalRailEnabled() const;
	void IsHorizontalRailEnabled(bool value) const;
	bool IsVerticalRailEnabled() const;
	void IsVerticalRailEnabled(bool value) const;
	bool IsHorizontalScrollChainingEnabled() const;
	void IsHorizontalScrollChainingEnabled(bool value) const;
	bool IsVerticalScrollChainingEnabled() const;
	void IsVerticalScrollChainingEnabled(bool value) const;
	bool IsZoomChainingEnabled() const;
	void IsZoomChainingEnabled(bool value) const;
	bool IsScrollInertiaEnabled() const;
	void IsScrollInertiaEnabled(bool value) const;
	bool IsZoomInertiaEnabled() const;
	void IsZoomInertiaEnabled(bool value) const;
	Windows::UI::Xaml::Controls::ScrollMode HorizontalScrollMode() const;
	void HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) const;
	Windows::UI::Xaml::Controls::ScrollMode VerticalScrollMode() const;
	void VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) const;
	Windows::UI::Xaml::Controls::ZoomMode ZoomMode() const;
	void ZoomMode(Windows::UI::Xaml::Controls::ZoomMode value) const;
	Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment HorizontalSnapPointsAlignment() const;
	void HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) const;
	Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment VerticalSnapPointsAlignment() const;
	void VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) const;
	Windows::UI::Xaml::Controls::SnapPointsType HorizontalSnapPointsType() const;
	void HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) const;
	Windows::UI::Xaml::Controls::SnapPointsType VerticalSnapPointsType() const;
	void VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) const;
	Windows::UI::Xaml::Controls::SnapPointsType ZoomSnapPointsType() const;
	void ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) const;
	double HorizontalOffset() const;
	double ViewportWidth() const;
	double ScrollableWidth() const;
	Windows::UI::Xaml::Visibility ComputedHorizontalScrollBarVisibility() const;
	double ExtentWidth() const;
	double VerticalOffset() const;
	double ViewportHeight() const;
	double ScrollableHeight() const;
	Windows::UI::Xaml::Visibility ComputedVerticalScrollBarVisibility() const;
	double ExtentHeight() const;
	float MinZoomFactor() const;
	void MinZoomFactor(float value) const;
	float MaxZoomFactor() const;
	void MaxZoomFactor(float value) const;
	float ZoomFactor() const;
	Windows::Foundation::Collections::IVector<float> ZoomSnapPoints() const;
	EventRegistrationToken ViewChanged(Windows::Foundation::IEventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken ViewChanged(F value) const;
	void ViewChanged(EventRegistrationToken token) const;
	void InvalidateScrollInfo() const;
	bool IsDeferredScrollingEnabled() const;
	void IsDeferredScrollingEnabled(bool value) const;
	bool BringIntoViewOnFocusChange() const;
	void BringIntoViewOnFocusChange(bool value) const;
};

template <typename T>
struct impl_IScrollViewerStatics
{
	Windows::UI::Xaml::DependencyProperty HorizontalSnapPointsAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalSnapPointsAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalSnapPointsTypeProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalSnapPointsTypeProperty() const;
	Windows::UI::Xaml::DependencyProperty ZoomSnapPointsTypeProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty ViewportWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty ScrollableWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty ComputedHorizontalScrollBarVisibilityProperty() const;
	Windows::UI::Xaml::DependencyProperty ExtentWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty ViewportHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty ScrollableHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty ComputedVerticalScrollBarVisibilityProperty() const;
	Windows::UI::Xaml::DependencyProperty ExtentHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty MinZoomFactorProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxZoomFactorProperty() const;
	Windows::UI::Xaml::DependencyProperty ZoomFactorProperty() const;
	Windows::UI::Xaml::DependencyProperty ZoomSnapPointsProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalScrollBarVisibilityProperty() const;
	Windows::UI::Xaml::Controls::ScrollBarVisibility GetHorizontalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetHorizontalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility) const;
	Windows::UI::Xaml::DependencyProperty VerticalScrollBarVisibilityProperty() const;
	Windows::UI::Xaml::Controls::ScrollBarVisibility GetVerticalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetVerticalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility) const;
	Windows::UI::Xaml::DependencyProperty IsHorizontalRailEnabledProperty() const;
	bool GetIsHorizontalRailEnabled(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetIsHorizontalRailEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isHorizontalRailEnabled) const;
	Windows::UI::Xaml::DependencyProperty IsVerticalRailEnabledProperty() const;
	bool GetIsVerticalRailEnabled(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetIsVerticalRailEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isVerticalRailEnabled) const;
	Windows::UI::Xaml::DependencyProperty IsHorizontalScrollChainingEnabledProperty() const;
	bool GetIsHorizontalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetIsHorizontalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isHorizontalScrollChainingEnabled) const;
	Windows::UI::Xaml::DependencyProperty IsVerticalScrollChainingEnabledProperty() const;
	bool GetIsVerticalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetIsVerticalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isVerticalScrollChainingEnabled) const;
	Windows::UI::Xaml::DependencyProperty IsZoomChainingEnabledProperty() const;
	bool GetIsZoomChainingEnabled(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetIsZoomChainingEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isZoomChainingEnabled) const;
	Windows::UI::Xaml::DependencyProperty IsScrollInertiaEnabledProperty() const;
	bool GetIsScrollInertiaEnabled(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetIsScrollInertiaEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isScrollInertiaEnabled) const;
	Windows::UI::Xaml::DependencyProperty IsZoomInertiaEnabledProperty() const;
	bool GetIsZoomInertiaEnabled(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetIsZoomInertiaEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isZoomInertiaEnabled) const;
	Windows::UI::Xaml::DependencyProperty HorizontalScrollModeProperty() const;
	Windows::UI::Xaml::Controls::ScrollMode GetHorizontalScrollMode(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetHorizontalScrollMode(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode) const;
	Windows::UI::Xaml::DependencyProperty VerticalScrollModeProperty() const;
	Windows::UI::Xaml::Controls::ScrollMode GetVerticalScrollMode(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetVerticalScrollMode(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode) const;
	Windows::UI::Xaml::DependencyProperty ZoomModeProperty() const;
	Windows::UI::Xaml::Controls::ZoomMode GetZoomMode(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetZoomMode(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ZoomMode zoomMode) const;
	Windows::UI::Xaml::DependencyProperty IsDeferredScrollingEnabledProperty() const;
	bool GetIsDeferredScrollingEnabled(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetIsDeferredScrollingEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isDeferredScrollingEnabled) const;
	Windows::UI::Xaml::DependencyProperty BringIntoViewOnFocusChangeProperty() const;
	bool GetBringIntoViewOnFocusChange(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetBringIntoViewOnFocusChange(Windows::UI::Xaml::DependencyObject const & element, bool bringIntoViewOnFocusChange) const;
};

template <typename T>
struct impl_IScrollViewer2
{
	Windows::UI::Xaml::UIElement TopLeftHeader() const;
	void TopLeftHeader(Windows::UI::Xaml::UIElement const & value) const;
	Windows::UI::Xaml::UIElement LeftHeader() const;
	void LeftHeader(Windows::UI::Xaml::UIElement const & value) const;
	Windows::UI::Xaml::UIElement TopHeader() const;
	void TopHeader(Windows::UI::Xaml::UIElement const & value) const;
	EventRegistrationToken ViewChanging(Windows::Foundation::IEventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> const & value) const;
	template <typename F> EventRegistrationToken ViewChanging(F value) const;
	void ViewChanging(EventRegistrationToken token) const;
	bool ChangeView(Windows::Foundation::IReference<double> const & horizontalOffset, Windows::Foundation::IReference<double> const & verticalOffset, Windows::Foundation::IReference<float> const & zoomFactor) const;
	bool ChangeView(Windows::Foundation::IReference<double> const & horizontalOffset, Windows::Foundation::IReference<double> const & verticalOffset, Windows::Foundation::IReference<float> const & zoomFactor, bool disableAnimation) const;
};

template <typename T>
struct impl_IScrollViewerStatics2
{
	Windows::UI::Xaml::DependencyProperty TopLeftHeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty LeftHeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty TopHeaderProperty() const;
};

template <typename T>
struct impl_IScrollViewerView
{
	double HorizontalOffset() const;
	double VerticalOffset() const;
	float ZoomFactor() const;
};

template <typename T>
struct impl_IScrollViewerViewChangedEventArgs
{
	bool IsIntermediate() const;
};

template <typename T>
struct impl_IScrollViewerViewChangingEventArgs
{
	Windows::UI::Xaml::Controls::ScrollViewerView NextView() const;
	Windows::UI::Xaml::Controls::ScrollViewerView FinalView() const;
	bool IsInertial() const;
};

template <typename T>
struct impl_ISelectionChangedEventArgs
{
	Windows::Foundation::Collections::IVector<IInspectable> AddedItems() const;
	Windows::Foundation::Collections::IVector<IInspectable> RemovedItems() const;
};

template <typename T>
struct impl_ISelectionChangedEventArgsFactory
{
	Windows::UI::Xaml::Controls::SelectionChangedEventArgs CreateInstanceWithRemovedItemsAndAddedItems(Windows::Foundation::Collections::IVector<IInspectable> const & removedItems, Windows::Foundation::Collections::IVector<IInspectable> const & addedItems, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISemanticZoom
{
	Windows::UI::Xaml::Controls::ISemanticZoomInformation ZoomedInView() const;
	void ZoomedInView(Windows::UI::Xaml::Controls::ISemanticZoomInformation const & value) const;
	Windows::UI::Xaml::Controls::ISemanticZoomInformation ZoomedOutView() const;
	void ZoomedOutView(Windows::UI::Xaml::Controls::ISemanticZoomInformation const & value) const;
	bool IsZoomedInViewActive() const;
	void IsZoomedInViewActive(bool value) const;
	bool CanChangeViews() const;
	void CanChangeViews(bool value) const;
	EventRegistrationToken ViewChangeStarted(Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ViewChangeStarted(F value) const;
	void ViewChangeStarted(EventRegistrationToken token) const;
	EventRegistrationToken ViewChangeCompleted(Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ViewChangeCompleted(F value) const;
	void ViewChangeCompleted(EventRegistrationToken token) const;
	void ToggleActiveView() const;
	bool IsZoomOutButtonEnabled() const;
	void IsZoomOutButtonEnabled(bool value) const;
};

template <typename T>
struct impl_ISemanticZoomStatics
{
	Windows::UI::Xaml::DependencyProperty ZoomedInViewProperty() const;
	Windows::UI::Xaml::DependencyProperty ZoomedOutViewProperty() const;
	Windows::UI::Xaml::DependencyProperty IsZoomedInViewActiveProperty() const;
	Windows::UI::Xaml::DependencyProperty CanChangeViewsProperty() const;
	Windows::UI::Xaml::DependencyProperty IsZoomOutButtonEnabledProperty() const;
};

template <typename T>
struct impl_ISemanticZoomLocation
{
	IInspectable Item() const;
	void Item(IInspectable const & value) const;
	Windows::Foundation::Rect Bounds() const;
	void Bounds(Windows::Foundation::Rect const & value) const;
};

template <typename T>
struct impl_ISemanticZoomViewChangedEventArgs
{
	bool IsSourceZoomedInView() const;
	void IsSourceZoomedInView(bool value) const;
	Windows::UI::Xaml::Controls::SemanticZoomLocation SourceItem() const;
	void SourceItem(Windows::UI::Xaml::Controls::SemanticZoomLocation const & value) const;
	Windows::UI::Xaml::Controls::SemanticZoomLocation DestinationItem() const;
	void DestinationItem(Windows::UI::Xaml::Controls::SemanticZoomLocation const & value) const;
};

template <typename T>
struct impl_ISettingsFlyout
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Media::Brush HeaderBackground() const;
	void HeaderBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush HeaderForeground() const;
	void HeaderForeground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::ImageSource IconSource() const;
	void IconSource(Windows::UI::Xaml::Media::ImageSource const & value) const;
	Windows::UI::Xaml::Controls::Primitives::SettingsFlyoutTemplateSettings TemplateSettings() const;
	EventRegistrationToken BackClick(Windows::UI::Xaml::Controls::IBackClickEventHandler const & value) const;
	template <typename F> EventRegistrationToken BackClick(F value) const;
	void BackClick(EventRegistrationToken token) const;
	void Show() const;
	void ShowIndependent() const;
	void Hide() const;
};

template <typename T>
struct impl_ISettingsFlyoutStatics
{
	Windows::UI::Xaml::DependencyProperty TitleProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderForegroundProperty() const;
	Windows::UI::Xaml::DependencyProperty IconSourceProperty() const;
};

template <typename T>
struct impl_ISettingsFlyoutFactory
{
	Windows::UI::Xaml::Controls::SettingsFlyout CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISlider
{
	double IntermediateValue() const;
	void IntermediateValue(double value) const;
	double StepFrequency() const;
	void StepFrequency(double value) const;
	Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo SnapsTo() const;
	void SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo value) const;
	double TickFrequency() const;
	void TickFrequency(double value) const;
	Windows::UI::Xaml::Controls::Primitives::TickPlacement TickPlacement() const;
	void TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement value) const;
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
	bool IsDirectionReversed() const;
	void IsDirectionReversed(bool value) const;
	bool IsThumbToolTipEnabled() const;
	void IsThumbToolTipEnabled(bool value) const;
	Windows::UI::Xaml::Data::IValueConverter ThumbToolTipValueConverter() const;
	void ThumbToolTipValueConverter(Windows::UI::Xaml::Data::IValueConverter const & value) const;
};

template <typename T>
struct impl_ISliderStatics
{
	Windows::UI::Xaml::DependencyProperty IntermediateValueProperty() const;
	Windows::UI::Xaml::DependencyProperty StepFrequencyProperty() const;
	Windows::UI::Xaml::DependencyProperty SnapsToProperty() const;
	Windows::UI::Xaml::DependencyProperty TickFrequencyProperty() const;
	Windows::UI::Xaml::DependencyProperty TickPlacementProperty() const;
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
	Windows::UI::Xaml::DependencyProperty IsDirectionReversedProperty() const;
	Windows::UI::Xaml::DependencyProperty IsThumbToolTipEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty ThumbToolTipValueConverterProperty() const;
};

template <typename T>
struct impl_ISliderFactory
{
	Windows::UI::Xaml::Controls::Slider CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISlider2
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
};

template <typename T>
struct impl_ISliderStatics2
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
};

template <typename T>
struct impl_IStackPanel
{
	bool AreScrollSnapPointsRegular() const;
	void AreScrollSnapPointsRegular(bool value) const;
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
};

template <typename T>
struct impl_IStackPanelStatics
{
	Windows::UI::Xaml::DependencyProperty AreScrollSnapPointsRegularProperty() const;
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
};

template <typename T>
struct impl_IStackPanelFactory
{
	Windows::UI::Xaml::Controls::StackPanel CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IStyleSelector
{
	Windows::UI::Xaml::Style SelectStyle(IInspectable const & item, Windows::UI::Xaml::DependencyObject const & container) const;
};

template <typename T>
struct impl_IStyleSelectorOverrides
{
	Windows::UI::Xaml::Style SelectStyleCore(IInspectable const & item, Windows::UI::Xaml::DependencyObject const & container) const;
};

template <typename T>
struct impl_IStyleSelectorFactory
{
	Windows::UI::Xaml::Controls::StyleSelector CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ITextBlock
{
	double FontSize() const;
	void FontSize(double value) const;
	Windows::UI::Xaml::Media::FontFamily FontFamily() const;
	void FontFamily(Windows::UI::Xaml::Media::FontFamily const & value) const;
	Windows::UI::Text::FontWeight FontWeight() const;
	void FontWeight(Windows::UI::Text::FontWeight const & value) const;
	Windows::UI::Text::FontStyle FontStyle() const;
	void FontStyle(Windows::UI::Text::FontStyle value) const;
	Windows::UI::Text::FontStretch FontStretch() const;
	void FontStretch(Windows::UI::Text::FontStretch value) const;
	int CharacterSpacing() const;
	void CharacterSpacing(int value) const;
	Windows::UI::Xaml::Media::Brush Foreground() const;
	void Foreground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::TextWrapping TextWrapping() const;
	void TextWrapping(Windows::UI::Xaml::TextWrapping value) const;
	Windows::UI::Xaml::TextTrimming TextTrimming() const;
	void TextTrimming(Windows::UI::Xaml::TextTrimming value) const;
	Windows::UI::Xaml::TextAlignment TextAlignment() const;
	void TextAlignment(Windows::UI::Xaml::TextAlignment value) const;
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Documents::InlineCollection Inlines() const;
	Windows::UI::Xaml::Thickness Padding() const;
	void Padding(Windows::UI::Xaml::Thickness const & value) const;
	double LineHeight() const;
	void LineHeight(double value) const;
	Windows::UI::Xaml::LineStackingStrategy LineStackingStrategy() const;
	void LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) const;
	bool IsTextSelectionEnabled() const;
	void IsTextSelectionEnabled(bool value) const;
	String SelectedText() const;
	Windows::UI::Xaml::Documents::TextPointer ContentStart() const;
	Windows::UI::Xaml::Documents::TextPointer ContentEnd() const;
	Windows::UI::Xaml::Documents::TextPointer SelectionStart() const;
	Windows::UI::Xaml::Documents::TextPointer SelectionEnd() const;
	double BaselineOffset() const;
	EventRegistrationToken SelectionChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken SelectionChanged(F value) const;
	void SelectionChanged(EventRegistrationToken token) const;
	EventRegistrationToken ContextMenuOpening(Windows::UI::Xaml::Controls::IContextMenuOpeningEventHandler const & value) const;
	template <typename F> EventRegistrationToken ContextMenuOpening(F value) const;
	void ContextMenuOpening(EventRegistrationToken token) const;
	void SelectAll() const;
	void Select(Windows::UI::Xaml::Documents::TextPointer const & start, Windows::UI::Xaml::Documents::TextPointer const & end) const;
	bool Focus(Windows::UI::Xaml::FocusState value) const;
};

template <typename T>
struct impl_ITextBlockStatics
{
	Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
	Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStretchProperty() const;
	Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty() const;
	Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
	Windows::UI::Xaml::DependencyProperty TextWrappingProperty() const;
	Windows::UI::Xaml::DependencyProperty TextTrimmingProperty() const;
	Windows::UI::Xaml::DependencyProperty TextAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty TextProperty() const;
	Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
	Windows::UI::Xaml::DependencyProperty LineHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty LineStackingStrategyProperty() const;
	Windows::UI::Xaml::DependencyProperty IsTextSelectionEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedTextProperty() const;
};

template <typename T>
struct impl_ITextBlock2
{
	Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
	void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const & value) const;
	int MaxLines() const;
	void MaxLines(int value) const;
	Windows::UI::Xaml::TextLineBounds TextLineBounds() const;
	void TextLineBounds(Windows::UI::Xaml::TextLineBounds value) const;
	Windows::UI::Xaml::OpticalMarginAlignment OpticalMarginAlignment() const;
	void OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) const;
	bool IsColorFontEnabled() const;
	void IsColorFontEnabled(bool value) const;
	Windows::UI::Xaml::TextReadingOrder TextReadingOrder() const;
	void TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const;
};

template <typename T>
struct impl_ITextBlockStatics2
{
	Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxLinesProperty() const;
	Windows::UI::Xaml::DependencyProperty TextLineBoundsProperty() const;
	Windows::UI::Xaml::DependencyProperty OpticalMarginAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty TextReadingOrderProperty() const;
};

template <typename T>
struct impl_ITextBox
{
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	String SelectedText() const;
	void SelectedText(String const & value) const;
	template <unsigned S0> void SelectedText(wchar_t const (&value)[S0]) const;
	int SelectionLength() const;
	void SelectionLength(int value) const;
	int SelectionStart() const;
	void SelectionStart(int value) const;
	int MaxLength() const;
	void MaxLength(int value) const;
	bool IsReadOnly() const;
	void IsReadOnly(bool value) const;
	bool AcceptsReturn() const;
	void AcceptsReturn(bool value) const;
	Windows::UI::Xaml::TextAlignment TextAlignment() const;
	void TextAlignment(Windows::UI::Xaml::TextAlignment value) const;
	Windows::UI::Xaml::TextWrapping TextWrapping() const;
	void TextWrapping(Windows::UI::Xaml::TextWrapping value) const;
	bool IsSpellCheckEnabled() const;
	void IsSpellCheckEnabled(bool value) const;
	bool IsTextPredictionEnabled() const;
	void IsTextPredictionEnabled(bool value) const;
	Windows::UI::Xaml::Input::InputScope InputScope() const;
	void InputScope(Windows::UI::Xaml::Input::InputScope const & value) const;
	EventRegistrationToken TextChanged(Windows::UI::Xaml::Controls::ITextChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken TextChanged(F value) const;
	void TextChanged(EventRegistrationToken token) const;
	EventRegistrationToken SelectionChanged(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken SelectionChanged(F value) const;
	void SelectionChanged(EventRegistrationToken token) const;
	EventRegistrationToken ContextMenuOpening(Windows::UI::Xaml::Controls::IContextMenuOpeningEventHandler const & value) const;
	template <typename F> EventRegistrationToken ContextMenuOpening(F value) const;
	void ContextMenuOpening(EventRegistrationToken token) const;
	void Select(int start, int length) const;
	void SelectAll() const;
	Windows::Foundation::Rect GetRectFromCharacterIndex(int charIndex, bool trailingEdge) const;
};

template <typename T>
struct impl_ITextBoxStatics
{
	Windows::UI::Xaml::DependencyProperty TextProperty() const;
	Windows::UI::Xaml::DependencyProperty MaxLengthProperty() const;
	Windows::UI::Xaml::DependencyProperty IsReadOnlyProperty() const;
	Windows::UI::Xaml::DependencyProperty AcceptsReturnProperty() const;
	Windows::UI::Xaml::DependencyProperty TextAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty TextWrappingProperty() const;
	Windows::UI::Xaml::DependencyProperty IsSpellCheckEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty IsTextPredictionEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty InputScopeProperty() const;
};

template <typename T>
struct impl_ITextBoxFactory
{
	Windows::UI::Xaml::Controls::TextBox CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ITextBox2
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	String PlaceholderText() const;
	void PlaceholderText(String const & value) const;
	template <unsigned S0> void PlaceholderText(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Media::SolidColorBrush SelectionHighlightColor() const;
	void SelectionHighlightColor(Windows::UI::Xaml::Media::SolidColorBrush const & value) const;
	bool PreventKeyboardDisplayOnProgrammaticFocus() const;
	void PreventKeyboardDisplayOnProgrammaticFocus(bool value) const;
	bool IsColorFontEnabled() const;
	void IsColorFontEnabled(bool value) const;
	EventRegistrationToken Paste(Windows::UI::Xaml::Controls::ITextControlPasteEventHandler const & value) const;
	template <typename F> EventRegistrationToken Paste(F value) const;
	void Paste(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ITextBoxStatics2
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty() const;
	Windows::UI::Xaml::DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty() const;
	Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty() const;
};

template <typename T>
struct impl_ITextChangedEventArgs
{
};

template <typename T>
struct impl_ITextControlPasteEventArgs
{
	bool Handled() const;
	void Handled(bool value) const;
};

template <typename T>
struct impl_IToggleSwitch
{
	bool IsOn() const;
	void IsOn(bool value) const;
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	IInspectable OnContent() const;
	void OnContent(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate OnContentTemplate() const;
	void OnContentTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	IInspectable OffContent() const;
	void OffContent(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate OffContentTemplate() const;
	void OffContentTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings TemplateSettings() const;
	EventRegistrationToken Toggled(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Toggled(F value) const;
	void Toggled(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IToggleSwitchOverrides
{
	void OnToggled() const;
	void OnOnContentChanged(IInspectable const & oldContent, IInspectable const & newContent) const;
	void OnOffContentChanged(IInspectable const & oldContent, IInspectable const & newContent) const;
	void OnHeaderChanged(IInspectable const & oldContent, IInspectable const & newContent) const;
};

template <typename T>
struct impl_IToggleSwitchStatics
{
	Windows::UI::Xaml::DependencyProperty IsOnProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty OnContentProperty() const;
	Windows::UI::Xaml::DependencyProperty OnContentTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty OffContentProperty() const;
	Windows::UI::Xaml::DependencyProperty OffContentTemplateProperty() const;
};

template <typename T>
struct impl_IToolTip
{
	double HorizontalOffset() const;
	void HorizontalOffset(double value) const;
	bool IsOpen() const;
	void IsOpen(bool value) const;
	Windows::UI::Xaml::Controls::Primitives::PlacementMode Placement() const;
	void Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode value) const;
	Windows::UI::Xaml::UIElement PlacementTarget() const;
	void PlacementTarget(Windows::UI::Xaml::UIElement const & value) const;
	double VerticalOffset() const;
	void VerticalOffset(double value) const;
	Windows::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings TemplateSettings() const;
	EventRegistrationToken Closed(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Closed(F value) const;
	void Closed(EventRegistrationToken token) const;
	EventRegistrationToken Opened(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Opened(F value) const;
	void Opened(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IToolTipStatics
{
	Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty IsOpenProperty() const;
	Windows::UI::Xaml::DependencyProperty PlacementProperty() const;
	Windows::UI::Xaml::DependencyProperty PlacementTargetProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty() const;
};

template <typename T>
struct impl_IToolTipFactory
{
	Windows::UI::Xaml::Controls::ToolTip CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IToolTipService
{
};

template <typename T>
struct impl_IToolTipServiceStatics
{
	Windows::UI::Xaml::DependencyProperty PlacementProperty() const;
	Windows::UI::Xaml::Controls::Primitives::PlacementMode GetPlacement(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetPlacement(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::Primitives::PlacementMode value) const;
	Windows::UI::Xaml::DependencyProperty PlacementTargetProperty() const;
	Windows::UI::Xaml::UIElement GetPlacementTarget(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetPlacementTarget(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::UIElement const & value) const;
	Windows::UI::Xaml::DependencyProperty ToolTipProperty() const;
	IInspectable GetToolTip(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetToolTip(Windows::UI::Xaml::DependencyObject const & element, IInspectable const & value) const;
};

template <typename T>
struct impl_IUIElementCollection
{
	void Move(unsigned oldIndex, unsigned newIndex) const;
};

template <typename T>
struct impl_IUserControl
{
	Windows::UI::Xaml::UIElement Content() const;
	void Content(Windows::UI::Xaml::UIElement const & value) const;
};

template <typename T>
struct impl_IUserControlStatics
{
	Windows::UI::Xaml::DependencyProperty ContentProperty() const;
};

template <typename T>
struct impl_IUserControlFactory
{
	Windows::UI::Xaml::Controls::UserControl CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IVariableSizedWrapGrid
{
	double ItemHeight() const;
	void ItemHeight(double value) const;
	double ItemWidth() const;
	void ItemWidth(double value) const;
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
	Windows::UI::Xaml::HorizontalAlignment HorizontalChildrenAlignment() const;
	void HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) const;
	Windows::UI::Xaml::VerticalAlignment VerticalChildrenAlignment() const;
	void VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) const;
	int MaximumRowsOrColumns() const;
	void MaximumRowsOrColumns(int value) const;
};

template <typename T>
struct impl_IVariableSizedWrapGridStatics
{
	Windows::UI::Xaml::DependencyProperty ItemHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalChildrenAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalChildrenAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty MaximumRowsOrColumnsProperty() const;
	Windows::UI::Xaml::DependencyProperty RowSpanProperty() const;
	int GetRowSpan(Windows::UI::Xaml::UIElement const & element) const;
	void SetRowSpan(Windows::UI::Xaml::UIElement const & element, int value) const;
	Windows::UI::Xaml::DependencyProperty ColumnSpanProperty() const;
	int GetColumnSpan(Windows::UI::Xaml::UIElement const & element) const;
	void SetColumnSpan(Windows::UI::Xaml::UIElement const & element, int value) const;
};

template <typename T>
struct impl_IViewbox
{
	Windows::UI::Xaml::UIElement Child() const;
	void Child(Windows::UI::Xaml::UIElement const & value) const;
	Windows::UI::Xaml::Media::Stretch Stretch() const;
	void Stretch(Windows::UI::Xaml::Media::Stretch value) const;
	Windows::UI::Xaml::Controls::StretchDirection StretchDirection() const;
	void StretchDirection(Windows::UI::Xaml::Controls::StretchDirection value) const;
};

template <typename T>
struct impl_IViewboxStatics
{
	Windows::UI::Xaml::DependencyProperty StretchProperty() const;
	Windows::UI::Xaml::DependencyProperty StretchDirectionProperty() const;
};

template <typename T>
struct impl_IVirtualizingPanel
{
	Windows::UI::Xaml::Controls::ItemContainerGenerator ItemContainerGenerator() const;
};

template <typename T>
struct impl_IVirtualizingPanelOverrides
{
	void OnItemsChanged(IInspectable const & sender, Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs const & args) const;
	void OnClearChildren() const;
	void BringIndexIntoView(int index) const;
};

template <typename T>
struct impl_IVirtualizingPanelProtected
{
	void AddInternalChild(Windows::UI::Xaml::UIElement const & child) const;
	void InsertInternalChild(int index, Windows::UI::Xaml::UIElement const & child) const;
	void RemoveInternalChildRange(int index, int range) const;
};

template <typename T>
struct impl_IVirtualizingPanelFactory
{
};

template <typename T>
struct impl_IVirtualizingStackPanel
{
	bool AreScrollSnapPointsRegular() const;
	void AreScrollSnapPointsRegular(bool value) const;
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
	EventRegistrationToken CleanUpVirtualizedItemEvent(Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventHandler const & value) const;
	template <typename F> EventRegistrationToken CleanUpVirtualizedItemEvent(F value) const;
	void CleanUpVirtualizedItemEvent(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IVirtualizingStackPanelOverrides
{
	void OnCleanUpVirtualizedItem(Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs const & e) const;
};

template <typename T>
struct impl_IVirtualizingStackPanelStatics
{
	Windows::UI::Xaml::DependencyProperty AreScrollSnapPointsRegularProperty() const;
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
	Windows::UI::Xaml::DependencyProperty VirtualizationModeProperty() const;
	Windows::UI::Xaml::Controls::VirtualizationMode GetVirtualizationMode(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetVirtualizationMode(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::VirtualizationMode value) const;
	Windows::UI::Xaml::DependencyProperty IsVirtualizingProperty() const;
	bool GetIsVirtualizing(Windows::UI::Xaml::DependencyObject const & o) const;
};

template <typename T>
struct impl_IAppBar
{
	bool IsOpen() const;
	void IsOpen(bool value) const;
	bool IsSticky() const;
	void IsSticky(bool value) const;
	EventRegistrationToken Opened(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Opened(F value) const;
	void Opened(EventRegistrationToken token) const;
	EventRegistrationToken Closed(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Closed(F value) const;
	void Closed(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IAppBarOverrides
{
	void OnClosed(IInspectable const & e) const;
	void OnOpened(IInspectable const & e) const;
};

template <typename T>
struct impl_IAppBarStatics
{
	Windows::UI::Xaml::DependencyProperty IsOpenProperty() const;
	Windows::UI::Xaml::DependencyProperty IsStickyProperty() const;
};

template <typename T>
struct impl_IAppBarFactory
{
	Windows::UI::Xaml::Controls::AppBar CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IAppBarButton
{
	String Label() const;
	void Label(String const & value) const;
	template <unsigned S0> void Label(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Controls::IconElement Icon() const;
	void Icon(Windows::UI::Xaml::Controls::IconElement const & value) const;
};

template <typename T>
struct impl_IAppBarButtonStatics
{
	Windows::UI::Xaml::DependencyProperty LabelProperty() const;
	Windows::UI::Xaml::DependencyProperty IconProperty() const;
	Windows::UI::Xaml::DependencyProperty IsCompactProperty() const;
};

template <typename T>
struct impl_IAppBarButtonFactory
{
	Windows::UI::Xaml::Controls::AppBarButton CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IAppBarSeparator
{
};

template <typename T>
struct impl_IAppBarSeparatorStatics
{
	Windows::UI::Xaml::DependencyProperty IsCompactProperty() const;
};

template <typename T>
struct impl_IAppBarSeparatorFactory
{
	Windows::UI::Xaml::Controls::AppBarSeparator CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IAppBarToggleButton
{
	String Label() const;
	void Label(String const & value) const;
	template <unsigned S0> void Label(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Controls::IconElement Icon() const;
	void Icon(Windows::UI::Xaml::Controls::IconElement const & value) const;
};

template <typename T>
struct impl_IAppBarToggleButtonStatics
{
	Windows::UI::Xaml::DependencyProperty LabelProperty() const;
	Windows::UI::Xaml::DependencyProperty IconProperty() const;
	Windows::UI::Xaml::DependencyProperty IsCompactProperty() const;
};

template <typename T>
struct impl_IAppBarToggleButtonFactory
{
	Windows::UI::Xaml::Controls::AppBarToggleButton CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IBitmapIcon
{
	Windows::Foundation::Uri UriSource() const;
	void UriSource(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IBitmapIconStatics
{
	Windows::UI::Xaml::DependencyProperty UriSourceProperty() const;
};

template <typename T>
struct impl_IBitmapIconFactory
{
	Windows::UI::Xaml::Controls::BitmapIcon CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ICommandBar
{
	Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> PrimaryCommands() const;
	Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> SecondaryCommands() const;
};

template <typename T>
struct impl_ICommandBarElement
{
	bool IsCompact() const;
	void IsCompact(bool value) const;
};

template <typename T>
struct impl_ICommandBarStatics
{
	Windows::UI::Xaml::DependencyProperty PrimaryCommandsProperty() const;
	Windows::UI::Xaml::DependencyProperty SecondaryCommandsProperty() const;
};

template <typename T>
struct impl_ICommandBarFactory
{
	Windows::UI::Xaml::Controls::CommandBar CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFlyout
{
	Windows::UI::Xaml::UIElement Content() const;
	void Content(Windows::UI::Xaml::UIElement const & value) const;
	Windows::UI::Xaml::Style FlyoutPresenterStyle() const;
	void FlyoutPresenterStyle(Windows::UI::Xaml::Style const & value) const;
};

template <typename T>
struct impl_IFlyoutStatics
{
	Windows::UI::Xaml::DependencyProperty ContentProperty() const;
	Windows::UI::Xaml::DependencyProperty FlyoutPresenterStyleProperty() const;
};

template <typename T>
struct impl_IFlyoutFactory
{
	Windows::UI::Xaml::Controls::Flyout CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFlyoutPresenter
{
};

template <typename T>
struct impl_IFlyoutPresenterFactory
{
	Windows::UI::Xaml::Controls::FlyoutPresenter CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFontIcon
{
	String Glyph() const;
	void Glyph(String const & value) const;
	template <unsigned S0> void Glyph(wchar_t const (&value)[S0]) const;
	double FontSize() const;
	void FontSize(double value) const;
	Windows::UI::Xaml::Media::FontFamily FontFamily() const;
	void FontFamily(Windows::UI::Xaml::Media::FontFamily const & value) const;
	Windows::UI::Text::FontWeight FontWeight() const;
	void FontWeight(Windows::UI::Text::FontWeight const & value) const;
	Windows::UI::Text::FontStyle FontStyle() const;
	void FontStyle(Windows::UI::Text::FontStyle value) const;
};

template <typename T>
struct impl_IFontIconStatics
{
	Windows::UI::Xaml::DependencyProperty GlyphProperty() const;
	Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
	Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
};

template <typename T>
struct impl_IFontIconFactory
{
	Windows::UI::Xaml::Controls::FontIcon CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFrame
{
	int CacheSize() const;
	void CacheSize(int value) const;
	bool CanGoBack() const;
	bool CanGoForward() const;
	Windows::UI::Xaml::Interop::TypeName CurrentSourcePageType() const;
	Windows::UI::Xaml::Interop::TypeName SourcePageType() const;
	void SourcePageType(Windows::UI::Xaml::Interop::TypeName const & value) const;
	int BackStackDepth() const;
	EventRegistrationToken Navigated(Windows::UI::Xaml::Navigation::INavigatedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Navigated(F value) const;
	void Navigated(EventRegistrationToken token) const;
	EventRegistrationToken Navigating(Windows::UI::Xaml::Navigation::INavigatingCancelEventHandler const & value) const;
	template <typename F> EventRegistrationToken Navigating(F value) const;
	void Navigating(EventRegistrationToken token) const;
	EventRegistrationToken NavigationFailed(Windows::UI::Xaml::Navigation::INavigationFailedEventHandler const & value) const;
	template <typename F> EventRegistrationToken NavigationFailed(F value) const;
	void NavigationFailed(EventRegistrationToken token) const;
	EventRegistrationToken NavigationStopped(Windows::UI::Xaml::Navigation::INavigationStoppedEventHandler const & value) const;
	template <typename F> EventRegistrationToken NavigationStopped(F value) const;
	void NavigationStopped(EventRegistrationToken token) const;
	void GoBack() const;
	void GoForward() const;
	bool Navigate(Windows::UI::Xaml::Interop::TypeName const & sourcePageType, IInspectable const & parameter) const;
	String GetNavigationState() const;
	void SetNavigationState(String const & navigationState) const;
	template <unsigned S0> void SetNavigationState(wchar_t const (&navigationState)[S0]) const;
};

template <typename T>
struct impl_IFrameStatics
{
	Windows::UI::Xaml::DependencyProperty CacheSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty CanGoBackProperty() const;
	Windows::UI::Xaml::DependencyProperty CanGoForwardProperty() const;
	Windows::UI::Xaml::DependencyProperty CurrentSourcePageTypeProperty() const;
	Windows::UI::Xaml::DependencyProperty SourcePageTypeProperty() const;
	Windows::UI::Xaml::DependencyProperty BackStackDepthProperty() const;
};

template <typename T>
struct impl_IFrameFactory
{
	Windows::UI::Xaml::Controls::Frame CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFrame2
{
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> BackStack() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> ForwardStack() const;
	bool Navigate(Windows::UI::Xaml::Interop::TypeName const & sourcePageType, IInspectable const & parameter, Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo const & infoOverride) const;
};

template <typename T>
struct impl_IFrameStatics2
{
	Windows::UI::Xaml::DependencyProperty BackStackProperty() const;
	Windows::UI::Xaml::DependencyProperty ForwardStackProperty() const;
};

template <typename T>
struct impl_IGridViewHeaderItem
{
};

template <typename T>
struct impl_IGridViewHeaderItemFactory
{
	Windows::UI::Xaml::Controls::GridViewHeaderItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IHub
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
	int DefaultSectionIndex() const;
	void DefaultSectionIndex(int value) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> Sections() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> SectionsInView() const;
	Windows::Foundation::Collections::IObservableVector<IInspectable> SectionHeaders() const;
	EventRegistrationToken SectionHeaderClick(Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventHandler const & value) const;
	template <typename F> EventRegistrationToken SectionHeaderClick(F value) const;
	void SectionHeaderClick(EventRegistrationToken token) const;
	EventRegistrationToken SectionsInViewChanged(Windows::UI::Xaml::Controls::ISectionsInViewChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken SectionsInViewChanged(F value) const;
	void SectionsInViewChanged(EventRegistrationToken token) const;
	void ScrollToSection(Windows::UI::Xaml::Controls::HubSection const & section) const;
};

template <typename T>
struct impl_IHubStatics
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
	Windows::UI::Xaml::DependencyProperty DefaultSectionIndexProperty() const;
	Windows::UI::Xaml::DependencyProperty SemanticZoomOwnerProperty() const;
	Windows::UI::Xaml::DependencyProperty IsActiveViewProperty() const;
	Windows::UI::Xaml::DependencyProperty IsZoomedInViewProperty() const;
};

template <typename T>
struct impl_IHubFactory
{
	Windows::UI::Xaml::Controls::Hub CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IHubSection
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	Windows::UI::Xaml::DataTemplate ContentTemplate() const;
	void ContentTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	bool IsHeaderInteractive() const;
	void IsHeaderInteractive(bool value) const;
};

template <typename T>
struct impl_IHubSectionStatics
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty IsHeaderInteractiveProperty() const;
};

template <typename T>
struct impl_IHubSectionFactory
{
	Windows::UI::Xaml::Controls::HubSection CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IHubSectionHeaderClickEventArgs
{
	Windows::UI::Xaml::Controls::HubSection Section() const;
};

template <typename T>
struct impl_IIconElement
{
	Windows::UI::Xaml::Media::Brush Foreground() const;
	void Foreground(Windows::UI::Xaml::Media::Brush const & value) const;
};

template <typename T>
struct impl_IIconElementStatics
{
	Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
};

template <typename T>
struct impl_IIconElementFactory
{
};

template <typename T>
struct impl_IItemsStackPanel
{
	Windows::UI::Xaml::Thickness GroupPadding() const;
	void GroupPadding(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
	int FirstCacheIndex() const;
	int FirstVisibleIndex() const;
	int LastVisibleIndex() const;
	int LastCacheIndex() const;
	Windows::UI::Xaml::Controls::PanelScrollingDirection ScrollingDirection() const;
	Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement GroupHeaderPlacement() const;
	void GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) const;
	Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode ItemsUpdatingScrollMode() const;
	void ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode value) const;
	double CacheLength() const;
	void CacheLength(double value) const;
};

template <typename T>
struct impl_IItemsStackPanelStatics
{
	Windows::UI::Xaml::DependencyProperty GroupPaddingProperty() const;
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
	Windows::UI::Xaml::DependencyProperty GroupHeaderPlacementProperty() const;
	Windows::UI::Xaml::DependencyProperty CacheLengthProperty() const;
};

template <typename T>
struct impl_IItemsWrapGrid
{
	Windows::UI::Xaml::Thickness GroupPadding() const;
	void GroupPadding(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
	int MaximumRowsOrColumns() const;
	void MaximumRowsOrColumns(int value) const;
	double ItemWidth() const;
	void ItemWidth(double value) const;
	double ItemHeight() const;
	void ItemHeight(double value) const;
	int FirstCacheIndex() const;
	int FirstVisibleIndex() const;
	int LastVisibleIndex() const;
	int LastCacheIndex() const;
	Windows::UI::Xaml::Controls::PanelScrollingDirection ScrollingDirection() const;
	Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement GroupHeaderPlacement() const;
	void GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) const;
	double CacheLength() const;
	void CacheLength(double value) const;
};

template <typename T>
struct impl_IItemsWrapGridStatics
{
	Windows::UI::Xaml::DependencyProperty GroupPaddingProperty() const;
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
	Windows::UI::Xaml::DependencyProperty MaximumRowsOrColumnsProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty GroupHeaderPlacementProperty() const;
	Windows::UI::Xaml::DependencyProperty CacheLengthProperty() const;
};

template <typename T>
struct impl_IListViewBaseHeaderItem
{
};

template <typename T>
struct impl_IListViewBaseHeaderItemFactory
{
};

template <typename T>
struct impl_IListViewHeaderItem
{
};

template <typename T>
struct impl_IListViewHeaderItemFactory
{
	Windows::UI::Xaml::Controls::ListViewHeaderItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IMenuFlyout
{
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> Items() const;
	Windows::UI::Xaml::Style MenuFlyoutPresenterStyle() const;
	void MenuFlyoutPresenterStyle(Windows::UI::Xaml::Style const & value) const;
};

template <typename T>
struct impl_IMenuFlyoutStatics
{
	Windows::UI::Xaml::DependencyProperty MenuFlyoutPresenterStyleProperty() const;
};

template <typename T>
struct impl_IMenuFlyoutFactory
{
	Windows::UI::Xaml::Controls::MenuFlyout CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IMenuFlyoutItem
{
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Input::ICommand Command() const;
	void Command(Windows::UI::Xaml::Input::ICommand const & value) const;
	IInspectable CommandParameter() const;
	void CommandParameter(IInspectable const & value) const;
	EventRegistrationToken Click(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Click(F value) const;
	void Click(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IMenuFlyoutItemStatics
{
	Windows::UI::Xaml::DependencyProperty TextProperty() const;
	Windows::UI::Xaml::DependencyProperty CommandProperty() const;
	Windows::UI::Xaml::DependencyProperty CommandParameterProperty() const;
};

template <typename T>
struct impl_IMenuFlyoutItemFactory
{
	Windows::UI::Xaml::Controls::MenuFlyoutItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IMenuFlyoutItemBase
{
};

template <typename T>
struct impl_IMenuFlyoutItemBaseFactory
{
};

template <typename T>
struct impl_IMenuFlyoutPresenter
{
};

template <typename T>
struct impl_IMenuFlyoutPresenterFactory
{
	Windows::UI::Xaml::Controls::MenuFlyoutPresenter CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IMenuFlyoutSeparator
{
};

template <typename T>
struct impl_IMenuFlyoutSeparatorFactory
{
	Windows::UI::Xaml::Controls::MenuFlyoutSeparator CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IPage
{
	Windows::UI::Xaml::Controls::Frame Frame() const;
	Windows::UI::Xaml::Navigation::NavigationCacheMode NavigationCacheMode() const;
	void NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode value) const;
	Windows::UI::Xaml::Controls::AppBar TopAppBar() const;
	void TopAppBar(Windows::UI::Xaml::Controls::AppBar const & value) const;
	Windows::UI::Xaml::Controls::AppBar BottomAppBar() const;
	void BottomAppBar(Windows::UI::Xaml::Controls::AppBar const & value) const;
};

template <typename T>
struct impl_IPageOverrides
{
	void OnNavigatedFrom(Windows::UI::Xaml::Navigation::NavigationEventArgs const & e) const;
	void OnNavigatedTo(Windows::UI::Xaml::Navigation::NavigationEventArgs const & e) const;
	void OnNavigatingFrom(Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs const & e) const;
};

template <typename T>
struct impl_IPageStatics
{
	Windows::UI::Xaml::DependencyProperty FrameProperty() const;
	Windows::UI::Xaml::DependencyProperty TopAppBarProperty() const;
	Windows::UI::Xaml::DependencyProperty BottomAppBarProperty() const;
};

template <typename T>
struct impl_IPageFactory
{
	Windows::UI::Xaml::Controls::Page CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IPathIcon
{
	Windows::UI::Xaml::Media::Geometry Data() const;
	void Data(Windows::UI::Xaml::Media::Geometry const & value) const;
};

template <typename T>
struct impl_IPathIconStatics
{
	Windows::UI::Xaml::DependencyProperty DataProperty() const;
};

template <typename T>
struct impl_IPathIconFactory
{
	Windows::UI::Xaml::Controls::PathIcon CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISearchBox
{
	bool SearchHistoryEnabled() const;
	void SearchHistoryEnabled(bool value) const;
	String SearchHistoryContext() const;
	void SearchHistoryContext(String const & value) const;
	template <unsigned S0> void SearchHistoryContext(wchar_t const (&value)[S0]) const;
	String PlaceholderText() const;
	void PlaceholderText(String const & value) const;
	template <unsigned S0> void PlaceholderText(wchar_t const (&value)[S0]) const;
	String QueryText() const;
	void QueryText(String const & value) const;
	template <unsigned S0> void QueryText(wchar_t const (&value)[S0]) const;
	bool FocusOnKeyboardInput() const;
	void FocusOnKeyboardInput(bool value) const;
	bool ChooseSuggestionOnEnter() const;
	void ChooseSuggestionOnEnter(bool value) const;
	EventRegistrationToken QueryChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken QueryChanged(F value) const;
	void QueryChanged(EventRegistrationToken token) const;
	EventRegistrationToken SuggestionsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken SuggestionsRequested(F value) const;
	void SuggestionsRequested(EventRegistrationToken token) const;
	EventRegistrationToken QuerySubmitted(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken QuerySubmitted(F value) const;
	void QuerySubmitted(EventRegistrationToken token) const;
	EventRegistrationToken ResultSuggestionChosen(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> const & value) const;
	template <typename F> EventRegistrationToken ResultSuggestionChosen(F value) const;
	void ResultSuggestionChosen(EventRegistrationToken token) const;
	EventRegistrationToken PrepareForFocusOnKeyboardInput(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken PrepareForFocusOnKeyboardInput(F value) const;
	void PrepareForFocusOnKeyboardInput(EventRegistrationToken token) const;
	void SetLocalContentSuggestionSettings(Windows::ApplicationModel::Search::LocalContentSuggestionSettings const & settings) const;
};

template <typename T>
struct impl_ISearchBoxStatics
{
	Windows::UI::Xaml::DependencyProperty SearchHistoryEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty SearchHistoryContextProperty() const;
	Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty() const;
	Windows::UI::Xaml::DependencyProperty QueryTextProperty() const;
	Windows::UI::Xaml::DependencyProperty FocusOnKeyboardInputProperty() const;
	Windows::UI::Xaml::DependencyProperty ChooseSuggestionOnEnterProperty() const;
};

template <typename T>
struct impl_ISearchBoxFactory
{
	Windows::UI::Xaml::Controls::SearchBox CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISearchBoxQueryChangedEventArgs
{
	String QueryText() const;
	String Language() const;
	Windows::ApplicationModel::Search::SearchQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
struct impl_ISearchBoxQuerySubmittedEventArgs
{
	String QueryText() const;
	String Language() const;
	Windows::ApplicationModel::Search::SearchQueryLinguisticDetails LinguisticDetails() const;
	Windows::System::VirtualKeyModifiers KeyModifiers() const;
};

template <typename T>
struct impl_ISearchBoxResultSuggestionChosenEventArgs
{
	String Tag() const;
	Windows::System::VirtualKeyModifiers KeyModifiers() const;
};

template <typename T>
struct impl_ISearchBoxSuggestionsRequestedEventArgs
{
	String QueryText() const;
	String Language() const;
	Windows::ApplicationModel::Search::SearchQueryLinguisticDetails LinguisticDetails() const;
	Windows::ApplicationModel::Search::SearchSuggestionsRequest Request() const;
};

template <typename T>
struct impl_ISectionsInViewChangedEventArgs
{
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> AddedSections() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> RemovedSections() const;
};

template <typename T>
struct impl_ISectionsInViewChangedEventArgsFactory
{
};

template <typename T>
struct impl_ISwapChainBackgroundPanel
{
};

template <typename T>
struct impl_ISwapChainBackgroundPanelFactory
{
	Windows::UI::Xaml::Controls::SwapChainBackgroundPanel CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISwapChainBackgroundPanel2
{
	Windows::UI::Core::CoreIndependentInputSource CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes) const;
};

template <typename T>
struct impl_ISwapChainPanel
{
	float CompositionScaleX() const;
	float CompositionScaleY() const;
	EventRegistrationToken CompositionScaleChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, IInspectable> const & value) const;
	template <typename F> EventRegistrationToken CompositionScaleChanged(F value) const;
	void CompositionScaleChanged(EventRegistrationToken token) const;
	Windows::UI::Core::CoreIndependentInputSource CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes) const;
};

template <typename T>
struct impl_ISwapChainPanelStatics
{
	Windows::UI::Xaml::DependencyProperty CompositionScaleXProperty() const;
	Windows::UI::Xaml::DependencyProperty CompositionScaleYProperty() const;
};

template <typename T>
struct impl_ISwapChainPanelFactory
{
	Windows::UI::Xaml::Controls::SwapChainPanel CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISymbolIcon
{
	Windows::UI::Xaml::Controls::Symbol Symbol() const;
	void Symbol(Windows::UI::Xaml::Controls::Symbol value) const;
};

template <typename T>
struct impl_ISymbolIconStatics
{
	Windows::UI::Xaml::DependencyProperty SymbolProperty() const;
};

template <typename T>
struct impl_ISymbolIconFactory
{
	Windows::UI::Xaml::Controls::SymbolIcon CreateInstanceWithSymbol(Windows::UI::Xaml::Controls::Symbol symbol) const;
};

template <typename T>
struct impl_ITimePicker
{
	IInspectable Header() const;
	void Header(IInspectable const & value) const;
	Windows::UI::Xaml::DataTemplate HeaderTemplate() const;
	void HeaderTemplate(Windows::UI::Xaml::DataTemplate const & value) const;
	String ClockIdentifier() const;
	void ClockIdentifier(String const & value) const;
	template <unsigned S0> void ClockIdentifier(wchar_t const (&value)[S0]) const;
	int MinuteIncrement() const;
	void MinuteIncrement(int value) const;
	Windows::Foundation::TimeSpan Time() const;
	void Time(Windows::Foundation::TimeSpan const & value) const;
	EventRegistrationToken TimeChanged(Windows::Foundation::IEventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken TimeChanged(F value) const;
	void TimeChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ITimePickerStatics
{
	Windows::UI::Xaml::DependencyProperty HeaderProperty() const;
	Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty ClockIdentifierProperty() const;
	Windows::UI::Xaml::DependencyProperty MinuteIncrementProperty() const;
	Windows::UI::Xaml::DependencyProperty TimeProperty() const;
};

template <typename T>
struct impl_ITimePickerFactory
{
	Windows::UI::Xaml::Controls::TimePicker CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ITimePickerValueChangedEventArgs
{
	Windows::Foundation::TimeSpan OldTime() const;
	Windows::Foundation::TimeSpan NewTime() const;
};

template <typename T>
struct impl_IToggleMenuFlyoutItem
{
	bool IsChecked() const;
	void IsChecked(bool value) const;
};

template <typename T>
struct impl_IToggleMenuFlyoutItemStatics
{
	Windows::UI::Xaml::DependencyProperty IsCheckedProperty() const;
};

template <typename T>
struct impl_IToggleMenuFlyoutItemFactory
{
	Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IWebView
{
	Windows::Foundation::Uri Source() const;
	void Source(Windows::Foundation::Uri const & value) const;
	EventRegistrationToken ScriptNotify(Windows::UI::Xaml::Controls::INotifyEventHandler const & value) const;
	template <typename F> EventRegistrationToken ScriptNotify(F value) const;
	void ScriptNotify(EventRegistrationToken token) const;
	void Navigate(Windows::Foundation::Uri const & source) const;
	void NavigateToString(String const & text) const;
	template <unsigned S0> void NavigateToString(wchar_t const (&text)[S0]) const;
};

template <typename T>
struct impl_IWebViewStatics
{
	Windows::UI::Xaml::DependencyProperty SourceProperty() const;
};

template <typename T>
struct impl_IWebView2
{
	bool CanGoBack() const;
	bool CanGoForward() const;
	String DocumentTitle() const;
	EventRegistrationToken NavigationStarting(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const & value) const;
	template <typename F> EventRegistrationToken NavigationStarting(F value) const;
	void NavigationStarting(EventRegistrationToken token) const;
	EventRegistrationToken ContentLoading(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const & value) const;
	template <typename F> EventRegistrationToken ContentLoading(F value) const;
	void ContentLoading(EventRegistrationToken token) const;
	EventRegistrationToken DOMContentLoaded(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken DOMContentLoaded(F value) const;
	void DOMContentLoaded(EventRegistrationToken token) const;
	void GoForward() const;
	void GoBack() const;
	void Refresh() const;
	void Stop() const;
	Windows::Foundation::IAsyncAction CapturePreviewToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncOperation<String> InvokeScriptAsync(String const & scriptName, Windows::Foundation::Collections::IIterable<String> const & arguments) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> InvokeScriptAsync(wchar_t const (&scriptName)[S0], Windows::Foundation::Collections::IIterable<String> const & arguments) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::DataTransfer::DataPackage> CaptureSelectedContentToDataPackageAsync() const;
	void NavigateToLocalStreamUri(Windows::Foundation::Uri const & source, Windows::Web::IUriToStreamResolver const & streamResolver) const;
	Windows::Foundation::Uri BuildLocalStreamUri(String const & contentIdentifier, String const & relativePath) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Uri BuildLocalStreamUri(wchar_t const (&contentIdentifier)[S0], wchar_t const (&relativePath)[S1]) const;
	Windows::UI::Color DefaultBackgroundColor() const;
	void DefaultBackgroundColor(Windows::UI::Color const & value) const;
	EventRegistrationToken NavigationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken NavigationCompleted(F value) const;
	void NavigationCompleted(EventRegistrationToken token) const;
	EventRegistrationToken FrameNavigationStarting(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> const & value) const;
	template <typename F> EventRegistrationToken FrameNavigationStarting(F value) const;
	void FrameNavigationStarting(EventRegistrationToken token) const;
	EventRegistrationToken FrameContentLoading(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> const & value) const;
	template <typename F> EventRegistrationToken FrameContentLoading(F value) const;
	void FrameContentLoading(EventRegistrationToken token) const;
	EventRegistrationToken FrameDOMContentLoaded(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken FrameDOMContentLoaded(F value) const;
	void FrameDOMContentLoaded(EventRegistrationToken token) const;
	EventRegistrationToken FrameNavigationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken FrameNavigationCompleted(F value) const;
	void FrameNavigationCompleted(EventRegistrationToken token) const;
	EventRegistrationToken LongRunningScriptDetected(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken LongRunningScriptDetected(F value) const;
	void LongRunningScriptDetected(EventRegistrationToken token) const;
	EventRegistrationToken UnsafeContentWarningDisplaying(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, IInspectable> const & value) const;
	template <typename F> EventRegistrationToken UnsafeContentWarningDisplaying(F value) const;
	void UnsafeContentWarningDisplaying(EventRegistrationToken token) const;
	EventRegistrationToken UnviewableContentIdentified(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> const & value) const;
	template <typename F> EventRegistrationToken UnviewableContentIdentified(F value) const;
	void UnviewableContentIdentified(EventRegistrationToken token) const;
	void NavigateWithHttpRequestMessage(Windows::Web::Http::HttpRequestMessage const & requestMessage) const;
	bool Focus(Windows::UI::Xaml::FocusState value) const;
};

template <typename T>
struct impl_IWebViewStatics2
{
	Windows::UI::Xaml::DependencyProperty CanGoBackProperty() const;
	Windows::UI::Xaml::DependencyProperty CanGoForwardProperty() const;
	Windows::UI::Xaml::DependencyProperty DocumentTitleProperty() const;
	Windows::UI::Xaml::DependencyProperty DefaultBackgroundColorProperty() const;
};

template <typename T>
struct impl_IWebViewBrush
{
	String SourceName() const;
	void SourceName(String const & value) const;
	template <unsigned S0> void SourceName(wchar_t const (&value)[S0]) const;
	void Redraw() const;
	void SetSource(Windows::UI::Xaml::Controls::WebView const & source) const;
};

template <typename T>
struct impl_IWebViewBrushStatics
{
	Windows::UI::Xaml::DependencyProperty SourceNameProperty() const;
};

template <typename T>
struct impl_IWebViewContentLoadingEventArgs
{
	Windows::Foundation::Uri Uri() const;
};

template <typename T>
struct impl_IWebViewDOMContentLoadedEventArgs
{
	Windows::Foundation::Uri Uri() const;
};

template <typename T>
struct impl_IWebViewLongRunningScriptDetectedEventArgs
{
	Windows::Foundation::TimeSpan ExecutionTime() const;
	bool StopPageScriptExecution() const;
	void StopPageScriptExecution(bool value) const;
};

template <typename T>
struct impl_IWebViewNavigationCompletedEventArgs
{
	Windows::Foundation::Uri Uri() const;
	bool IsSuccess() const;
	Windows::Web::WebErrorStatus WebErrorStatus() const;
};

template <typename T>
struct impl_IWebViewNavigationFailedEventArgs
{
	Windows::Foundation::Uri Uri() const;
	Windows::Web::WebErrorStatus WebErrorStatus() const;
};

template <typename T>
struct impl_IWebViewNavigationStartingEventArgs
{
	Windows::Foundation::Uri Uri() const;
	bool Cancel() const;
	void Cancel(bool value) const;
};

template <typename T>
struct impl_IWebViewUnviewableContentIdentifiedEventArgs
{
	Windows::Foundation::Uri Uri() const;
	Windows::Foundation::Uri Referrer() const;
};

template <typename T>
struct impl_IWrapGrid
{
	double ItemWidth() const;
	void ItemWidth(double value) const;
	double ItemHeight() const;
	void ItemHeight(double value) const;
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
	Windows::UI::Xaml::HorizontalAlignment HorizontalChildrenAlignment() const;
	void HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) const;
	Windows::UI::Xaml::VerticalAlignment VerticalChildrenAlignment() const;
	void VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) const;
	int MaximumRowsOrColumns() const;
	void MaximumRowsOrColumns(int value) const;
};

template <typename T>
struct impl_IWrapGridStatics
{
	Windows::UI::Xaml::DependencyProperty ItemWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalChildrenAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalChildrenAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty MaximumRowsOrColumnsProperty() const;
};

template <typename T>
struct impl_IControl
{
	double FontSize() const;
	void FontSize(double value) const;
	Windows::UI::Xaml::Media::FontFamily FontFamily() const;
	void FontFamily(Windows::UI::Xaml::Media::FontFamily const & value) const;
	Windows::UI::Text::FontWeight FontWeight() const;
	void FontWeight(Windows::UI::Text::FontWeight const & value) const;
	Windows::UI::Text::FontStyle FontStyle() const;
	void FontStyle(Windows::UI::Text::FontStyle value) const;
	Windows::UI::Text::FontStretch FontStretch() const;
	void FontStretch(Windows::UI::Text::FontStretch value) const;
	int CharacterSpacing() const;
	void CharacterSpacing(int value) const;
	Windows::UI::Xaml::Media::Brush Foreground() const;
	void Foreground(Windows::UI::Xaml::Media::Brush const & value) const;
	bool IsTabStop() const;
	void IsTabStop(bool value) const;
	bool IsEnabled() const;
	void IsEnabled(bool value) const;
	int TabIndex() const;
	void TabIndex(int value) const;
	Windows::UI::Xaml::Input::KeyboardNavigationMode TabNavigation() const;
	void TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode value) const;
	Windows::UI::Xaml::Controls::ControlTemplate Template() const;
	void Template(Windows::UI::Xaml::Controls::ControlTemplate const & value) const;
	Windows::UI::Xaml::Thickness Padding() const;
	void Padding(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::HorizontalAlignment HorizontalContentAlignment() const;
	void HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) const;
	Windows::UI::Xaml::VerticalAlignment VerticalContentAlignment() const;
	void VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) const;
	Windows::UI::Xaml::Media::Brush Background() const;
	void Background(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Thickness BorderThickness() const;
	void BorderThickness(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::Media::Brush BorderBrush() const;
	void BorderBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::FocusState FocusState() const;
	EventRegistrationToken IsEnabledChanged(Windows::UI::Xaml::IDependencyPropertyChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken IsEnabledChanged(F value) const;
	void IsEnabledChanged(EventRegistrationToken token) const;
	bool ApplyTemplate() const;
	bool Focus(Windows::UI::Xaml::FocusState value) const;
};

template <typename T>
struct impl_IControlOverrides
{
	void OnPointerEntered(Windows::UI::Xaml::Input::PointerRoutedEventArgs const & e) const;
	void OnPointerPressed(Windows::UI::Xaml::Input::PointerRoutedEventArgs const & e) const;
	void OnPointerMoved(Windows::UI::Xaml::Input::PointerRoutedEventArgs const & e) const;
	void OnPointerReleased(Windows::UI::Xaml::Input::PointerRoutedEventArgs const & e) const;
	void OnPointerExited(Windows::UI::Xaml::Input::PointerRoutedEventArgs const & e) const;
	void OnPointerCaptureLost(Windows::UI::Xaml::Input::PointerRoutedEventArgs const & e) const;
	void OnPointerCanceled(Windows::UI::Xaml::Input::PointerRoutedEventArgs const & e) const;
	void OnPointerWheelChanged(Windows::UI::Xaml::Input::PointerRoutedEventArgs const & e) const;
	void OnTapped(Windows::UI::Xaml::Input::TappedRoutedEventArgs const & e) const;
	void OnDoubleTapped(Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs const & e) const;
	void OnHolding(Windows::UI::Xaml::Input::HoldingRoutedEventArgs const & e) const;
	void OnRightTapped(Windows::UI::Xaml::Input::RightTappedRoutedEventArgs const & e) const;
	void OnManipulationStarting(Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs const & e) const;
	void OnManipulationInertiaStarting(Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs const & e) const;
	void OnManipulationStarted(Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs const & e) const;
	void OnManipulationDelta(Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs const & e) const;
	void OnManipulationCompleted(Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs const & e) const;
	void OnKeyUp(Windows::UI::Xaml::Input::KeyRoutedEventArgs const & e) const;
	void OnKeyDown(Windows::UI::Xaml::Input::KeyRoutedEventArgs const & e) const;
	void OnGotFocus(Windows::UI::Xaml::RoutedEventArgs const & e) const;
	void OnLostFocus(Windows::UI::Xaml::RoutedEventArgs const & e) const;
	void OnDragEnter(Windows::UI::Xaml::DragEventArgs const & e) const;
	void OnDragLeave(Windows::UI::Xaml::DragEventArgs const & e) const;
	void OnDragOver(Windows::UI::Xaml::DragEventArgs const & e) const;
	void OnDrop(Windows::UI::Xaml::DragEventArgs const & e) const;
};

template <typename T>
struct impl_IControlProtected
{
	IInspectable DefaultStyleKey() const;
	void DefaultStyleKey(IInspectable const & value) const;
	Windows::UI::Xaml::DependencyObject GetTemplateChild(String const & childName) const;
	template <unsigned S0> Windows::UI::Xaml::DependencyObject GetTemplateChild(wchar_t const (&childName)[S0]) const;
};

template <typename T>
struct impl_IControlStatics
{
	Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
	Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStretchProperty() const;
	Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty() const;
	Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
	Windows::UI::Xaml::DependencyProperty IsTabStopProperty() const;
	Windows::UI::Xaml::DependencyProperty IsEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty TabIndexProperty() const;
	Windows::UI::Xaml::DependencyProperty TabNavigationProperty() const;
	Windows::UI::Xaml::DependencyProperty TemplateProperty() const;
	Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalContentAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalContentAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty BackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty BorderThicknessProperty() const;
	Windows::UI::Xaml::DependencyProperty BorderBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty DefaultStyleKeyProperty() const;
	Windows::UI::Xaml::DependencyProperty FocusStateProperty() const;
};

template <typename T>
struct impl_IControlFactory
{
	Windows::UI::Xaml::Controls::Control CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IControlTemplate
{
	Windows::UI::Xaml::Interop::TypeName TargetType() const;
	void TargetType(Windows::UI::Xaml::Interop::TypeName const & value) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Controls { namespace Primitives {

template <typename T>
struct impl_IDragCompletedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::Primitives::DragCompletedEventArgs const & e) const;
};

template <typename T>
struct impl_IDragDeltaEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::Primitives::DragDeltaEventArgs const & e) const;
};

template <typename T>
struct impl_IDragStartedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::Primitives::DragStartedEventArgs const & e) const;
};

template <typename T>
struct impl_IItemsChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs const & e) const;
};

template <typename T>
struct impl_IRangeBaseValueChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventArgs const & e) const;
};

template <typename T>
struct impl_IScrollEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Controls::Primitives::ScrollEventArgs const & e) const;
};

template <typename T>
struct impl_IButtonBase
{
	Windows::UI::Xaml::Controls::ClickMode ClickMode() const;
	void ClickMode(Windows::UI::Xaml::Controls::ClickMode value) const;
	bool IsPointerOver() const;
	bool IsPressed() const;
	Windows::UI::Xaml::Input::ICommand Command() const;
	void Command(Windows::UI::Xaml::Input::ICommand const & value) const;
	IInspectable CommandParameter() const;
	void CommandParameter(IInspectable const & value) const;
	EventRegistrationToken Click(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Click(F value) const;
	void Click(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IButtonBaseStatics
{
	Windows::UI::Xaml::DependencyProperty ClickModeProperty() const;
	Windows::UI::Xaml::DependencyProperty IsPointerOverProperty() const;
	Windows::UI::Xaml::DependencyProperty IsPressedProperty() const;
	Windows::UI::Xaml::DependencyProperty CommandProperty() const;
	Windows::UI::Xaml::DependencyProperty CommandParameterProperty() const;
};

template <typename T>
struct impl_IButtonBaseFactory
{
	Windows::UI::Xaml::Controls::Primitives::ButtonBase CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ICarouselPanel
{
	bool CanVerticallyScroll() const;
	void CanVerticallyScroll(bool value) const;
	bool CanHorizontallyScroll() const;
	void CanHorizontallyScroll(bool value) const;
	double ExtentWidth() const;
	double ExtentHeight() const;
	double ViewportWidth() const;
	double ViewportHeight() const;
	double HorizontalOffset() const;
	double VerticalOffset() const;
	IInspectable ScrollOwner() const;
	void ScrollOwner(IInspectable const & value) const;
	void LineUp() const;
	void LineDown() const;
	void LineLeft() const;
	void LineRight() const;
	void PageUp() const;
	void PageDown() const;
	void PageLeft() const;
	void PageRight() const;
	void MouseWheelUp() const;
	void MouseWheelDown() const;
	void MouseWheelLeft() const;
	void MouseWheelRight() const;
	void SetHorizontalOffset(double offset) const;
	void SetVerticalOffset(double offset) const;
	Windows::Foundation::Rect MakeVisible(Windows::UI::Xaml::UIElement const & visual, Windows::Foundation::Rect const & rectangle) const;
};

template <typename T>
struct impl_ICarouselPanelFactory
{
	Windows::UI::Xaml::Controls::Primitives::CarouselPanel CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IComboBoxTemplateSettings
{
	double DropDownOpenedHeight() const;
	double DropDownClosedHeight() const;
	double DropDownOffset() const;
	Windows::UI::Xaml::Controls::Primitives::AnimationDirection SelectedItemDirection() const;
};

template <typename T>
struct impl_IDragCompletedEventArgs
{
	double HorizontalChange() const;
	double VerticalChange() const;
	bool Canceled() const;
};

template <typename T>
struct impl_IDragCompletedEventArgsFactory
{
	Windows::UI::Xaml::Controls::Primitives::DragCompletedEventArgs CreateInstanceWithHorizontalChangeVerticalChangeAndCanceled(double horizontalChange, double verticalChange, bool canceled, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDragDeltaEventArgs
{
	double HorizontalChange() const;
	double VerticalChange() const;
};

template <typename T>
struct impl_IDragDeltaEventArgsFactory
{
	Windows::UI::Xaml::Controls::Primitives::DragDeltaEventArgs CreateInstanceWithHorizontalChangeAndVerticalChange(double horizontalChange, double verticalChange, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDragStartedEventArgs
{
	double HorizontalOffset() const;
	double VerticalOffset() const;
};

template <typename T>
struct impl_IDragStartedEventArgsFactory
{
	Windows::UI::Xaml::Controls::Primitives::DragStartedEventArgs CreateInstanceWithHorizontalOffsetAndVerticalOffset(double horizontalOffset, double verticalOffset, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IFlyoutBase
{
	Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode Placement() const;
	void Placement(Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode value) const;
	EventRegistrationToken Opened(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Opened(F value) const;
	void Opened(EventRegistrationToken token) const;
	EventRegistrationToken Closed(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Closed(F value) const;
	void Closed(EventRegistrationToken token) const;
	EventRegistrationToken Opening(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Opening(F value) const;
	void Opening(EventRegistrationToken token) const;
	void ShowAt(Windows::UI::Xaml::FrameworkElement const & placementTarget) const;
	void Hide() const;
};

template <typename T>
struct impl_IFlyoutBaseOverrides
{
	Windows::UI::Xaml::Controls::Control CreatePresenter() const;
};

template <typename T>
struct impl_IFlyoutBaseStatics
{
	Windows::UI::Xaml::DependencyProperty PlacementProperty() const;
	Windows::UI::Xaml::DependencyProperty AttachedFlyoutProperty() const;
	Windows::UI::Xaml::Controls::Primitives::FlyoutBase GetAttachedFlyout(Windows::UI::Xaml::FrameworkElement const & element) const;
	void SetAttachedFlyout(Windows::UI::Xaml::FrameworkElement const & element, Windows::UI::Xaml::Controls::Primitives::FlyoutBase const & value) const;
	void ShowAttachedFlyout(Windows::UI::Xaml::FrameworkElement const & flyoutOwner) const;
};

template <typename T>
struct impl_IFlyoutBaseFactory
{
	Windows::UI::Xaml::Controls::Primitives::FlyoutBase CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGridViewItemTemplateSettings
{
	int DragItemsCount() const;
};

template <typename T>
struct impl_IScrollSnapPointsInfo
{
	bool AreHorizontalSnapPointsRegular() const;
	bool AreVerticalSnapPointsRegular() const;
	EventRegistrationToken HorizontalSnapPointsChanged(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken HorizontalSnapPointsChanged(F value) const;
	void HorizontalSnapPointsChanged(EventRegistrationToken token) const;
	EventRegistrationToken VerticalSnapPointsChanged(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken VerticalSnapPointsChanged(F value) const;
	void VerticalSnapPointsChanged(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IVectorView<float> GetIrregularSnapPoints(Windows::UI::Xaml::Controls::Orientation orientation, Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment) const;
	float GetRegularSnapPoints(Windows::UI::Xaml::Controls::Orientation orientation, Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment alignment, float & offset) const;
};

template <typename T>
struct impl_IItemsChangedEventArgs
{
	int Action() const;
	Windows::UI::Xaml::Controls::Primitives::GeneratorPosition Position() const;
	Windows::UI::Xaml::Controls::Primitives::GeneratorPosition OldPosition() const;
	int ItemCount() const;
	int ItemUICount() const;
};

template <typename T>
struct impl_IListViewItemTemplateSettings
{
	int DragItemsCount() const;
};

template <typename T>
struct impl_IOrientedVirtualizingPanel
{
	bool CanVerticallyScroll() const;
	void CanVerticallyScroll(bool value) const;
	bool CanHorizontallyScroll() const;
	void CanHorizontallyScroll(bool value) const;
	double ExtentWidth() const;
	double ExtentHeight() const;
	double ViewportWidth() const;
	double ViewportHeight() const;
	double HorizontalOffset() const;
	double VerticalOffset() const;
	IInspectable ScrollOwner() const;
	void ScrollOwner(IInspectable const & value) const;
	void LineUp() const;
	void LineDown() const;
	void LineLeft() const;
	void LineRight() const;
	void PageUp() const;
	void PageDown() const;
	void PageLeft() const;
	void PageRight() const;
	void MouseWheelUp() const;
	void MouseWheelDown() const;
	void MouseWheelLeft() const;
	void MouseWheelRight() const;
	void SetHorizontalOffset(double offset) const;
	void SetVerticalOffset(double offset) const;
	Windows::Foundation::Rect MakeVisible(Windows::UI::Xaml::UIElement const & visual, Windows::Foundation::Rect const & rectangle) const;
};

template <typename T>
struct impl_IOrientedVirtualizingPanelFactory
{
};

template <typename T>
struct impl_IPopup
{
	Windows::UI::Xaml::UIElement Child() const;
	void Child(Windows::UI::Xaml::UIElement const & value) const;
	bool IsOpen() const;
	void IsOpen(bool value) const;
	double HorizontalOffset() const;
	void HorizontalOffset(double value) const;
	double VerticalOffset() const;
	void VerticalOffset(double value) const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection ChildTransitions() const;
	void ChildTransitions(Windows::UI::Xaml::Media::Animation::TransitionCollection const & value) const;
	bool IsLightDismissEnabled() const;
	void IsLightDismissEnabled(bool value) const;
	EventRegistrationToken Opened(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Opened(F value) const;
	void Opened(EventRegistrationToken token) const;
	EventRegistrationToken Closed(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Closed(F value) const;
	void Closed(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPopupStatics
{
	Windows::UI::Xaml::DependencyProperty ChildProperty() const;
	Windows::UI::Xaml::DependencyProperty IsOpenProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty ChildTransitionsProperty() const;
	Windows::UI::Xaml::DependencyProperty IsLightDismissEnabledProperty() const;
};

template <typename T>
struct impl_IProgressBarTemplateSettings
{
	double EllipseDiameter() const;
	double EllipseOffset() const;
	double EllipseAnimationWellPosition() const;
	double EllipseAnimationEndPosition() const;
	double ContainerAnimationStartPosition() const;
	double ContainerAnimationEndPosition() const;
	double IndicatorLengthDelta() const;
};

template <typename T>
struct impl_IProgressRingTemplateSettings
{
	double EllipseDiameter() const;
	Windows::UI::Xaml::Thickness EllipseOffset() const;
	double MaxSideLength() const;
};

template <typename T>
struct impl_IRangeBase
{
	double Minimum() const;
	void Minimum(double value) const;
	double Maximum() const;
	void Maximum(double value) const;
	double SmallChange() const;
	void SmallChange(double value) const;
	double LargeChange() const;
	void LargeChange(double value) const;
	double Value() const;
	void Value(double value) const;
	EventRegistrationToken ValueChanged(Windows::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ValueChanged(F value) const;
	void ValueChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IRangeBaseOverrides
{
	void OnMinimumChanged(double oldMinimum, double newMinimum) const;
	void OnMaximumChanged(double oldMaximum, double newMaximum) const;
	void OnValueChanged(double oldValue, double newValue) const;
};

template <typename T>
struct impl_IRangeBaseStatics
{
	Windows::UI::Xaml::DependencyProperty MinimumProperty() const;
	Windows::UI::Xaml::DependencyProperty MaximumProperty() const;
	Windows::UI::Xaml::DependencyProperty SmallChangeProperty() const;
	Windows::UI::Xaml::DependencyProperty LargeChangeProperty() const;
	Windows::UI::Xaml::DependencyProperty ValueProperty() const;
};

template <typename T>
struct impl_IRangeBaseFactory
{
	Windows::UI::Xaml::Controls::Primitives::RangeBase CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRangeBaseValueChangedEventArgs
{
	double OldValue() const;
	double NewValue() const;
};

template <typename T>
struct impl_IRepeatButton
{
	int Delay() const;
	void Delay(int value) const;
	int Interval() const;
	void Interval(int value) const;
};

template <typename T>
struct impl_IRepeatButtonStatics
{
	Windows::UI::Xaml::DependencyProperty DelayProperty() const;
	Windows::UI::Xaml::DependencyProperty IntervalProperty() const;
};

template <typename T>
struct impl_IScrollBar
{
	Windows::UI::Xaml::Controls::Orientation Orientation() const;
	void Orientation(Windows::UI::Xaml::Controls::Orientation value) const;
	double ViewportSize() const;
	void ViewportSize(double value) const;
	Windows::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode IndicatorMode() const;
	void IndicatorMode(Windows::UI::Xaml::Controls::Primitives::ScrollingIndicatorMode value) const;
	EventRegistrationToken Scroll(Windows::UI::Xaml::Controls::Primitives::IScrollEventHandler const & value) const;
	template <typename F> EventRegistrationToken Scroll(F value) const;
	void Scroll(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IScrollBarStatics
{
	Windows::UI::Xaml::DependencyProperty OrientationProperty() const;
	Windows::UI::Xaml::DependencyProperty ViewportSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty IndicatorModeProperty() const;
};

template <typename T>
struct impl_IScrollEventArgs
{
	double NewValue() const;
	Windows::UI::Xaml::Controls::Primitives::ScrollEventType ScrollEventType() const;
};

template <typename T>
struct impl_ISelector
{
	int SelectedIndex() const;
	void SelectedIndex(int value) const;
	IInspectable SelectedItem() const;
	void SelectedItem(IInspectable const & value) const;
	IInspectable SelectedValue() const;
	void SelectedValue(IInspectable const & value) const;
	String SelectedValuePath() const;
	void SelectedValuePath(String const & value) const;
	template <unsigned S0> void SelectedValuePath(wchar_t const (&value)[S0]) const;
	Windows::Foundation::IReference<bool> IsSynchronizedWithCurrentItem() const;
	void IsSynchronizedWithCurrentItem(Windows::Foundation::IReference<bool> const & value) const;
	EventRegistrationToken SelectionChanged(Windows::UI::Xaml::Controls::ISelectionChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken SelectionChanged(F value) const;
	void SelectionChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ISelectorStatics
{
	Windows::UI::Xaml::DependencyProperty SelectedIndexProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedItemProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedValueProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedValuePathProperty() const;
	Windows::UI::Xaml::DependencyProperty IsSynchronizedWithCurrentItemProperty() const;
	bool GetIsSelectionActive(Windows::UI::Xaml::DependencyObject const & element) const;
};

template <typename T>
struct impl_ISelectorFactory
{
};

template <typename T>
struct impl_ISelectorItem
{
	bool IsSelected() const;
	void IsSelected(bool value) const;
};

template <typename T>
struct impl_ISelectorItemStatics
{
	Windows::UI::Xaml::DependencyProperty IsSelectedProperty() const;
};

template <typename T>
struct impl_ISelectorItemFactory
{
	Windows::UI::Xaml::Controls::Primitives::SelectorItem CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ISettingsFlyoutTemplateSettings
{
	Windows::UI::Xaml::Media::Brush HeaderBackground() const;
	Windows::UI::Xaml::Media::Brush HeaderForeground() const;
	Windows::UI::Xaml::Media::Brush BorderBrush() const;
	Windows::UI::Xaml::Thickness BorderThickness() const;
	Windows::UI::Xaml::Media::ImageSource IconSource() const;
	Windows::UI::Xaml::Media::Animation::TransitionCollection ContentTransitions() const;
};

template <typename T>
struct impl_IThumb
{
	bool IsDragging() const;
	EventRegistrationToken DragStarted(Windows::UI::Xaml::Controls::Primitives::IDragStartedEventHandler const & value) const;
	template <typename F> EventRegistrationToken DragStarted(F value) const;
	void DragStarted(EventRegistrationToken token) const;
	EventRegistrationToken DragDelta(Windows::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler const & value) const;
	template <typename F> EventRegistrationToken DragDelta(F value) const;
	void DragDelta(EventRegistrationToken token) const;
	EventRegistrationToken DragCompleted(Windows::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler const & value) const;
	template <typename F> EventRegistrationToken DragCompleted(F value) const;
	void DragCompleted(EventRegistrationToken token) const;
	void CancelDrag() const;
};

template <typename T>
struct impl_IThumbStatics
{
	Windows::UI::Xaml::DependencyProperty IsDraggingProperty() const;
};

template <typename T>
struct impl_ITickBar
{
	Windows::UI::Xaml::Media::Brush Fill() const;
	void Fill(Windows::UI::Xaml::Media::Brush const & value) const;
};

template <typename T>
struct impl_ITickBarStatics
{
	Windows::UI::Xaml::DependencyProperty FillProperty() const;
};

template <typename T>
struct impl_IToggleButton
{
	Windows::Foundation::IReference<bool> IsChecked() const;
	void IsChecked(Windows::Foundation::IReference<bool> const & value) const;
	bool IsThreeState() const;
	void IsThreeState(bool value) const;
	EventRegistrationToken Checked(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Checked(F value) const;
	void Checked(EventRegistrationToken token) const;
	EventRegistrationToken Unchecked(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Unchecked(F value) const;
	void Unchecked(EventRegistrationToken token) const;
	EventRegistrationToken Indeterminate(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken Indeterminate(F value) const;
	void Indeterminate(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IToggleButtonOverrides
{
	void OnToggle() const;
};

template <typename T>
struct impl_IToggleButtonStatics
{
	Windows::UI::Xaml::DependencyProperty IsCheckedProperty() const;
	Windows::UI::Xaml::DependencyProperty IsThreeStateProperty() const;
};

template <typename T>
struct impl_IToggleButtonFactory
{
	Windows::UI::Xaml::Controls::Primitives::ToggleButton CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IToggleSwitchTemplateSettings
{
	double KnobCurrentToOnOffset() const;
	double KnobCurrentToOffOffset() const;
	double KnobOnToOffOffset() const;
	double KnobOffToOnOffset() const;
	double CurtainCurrentToOnOffset() const;
	double CurtainCurrentToOffOffset() const;
	double CurtainOnToOffOffset() const;
	double CurtainOffToOnOffset() const;
};

template <typename T>
struct impl_IToolTipTemplateSettings
{
	double FromHorizontalOffset() const;
	double FromVerticalOffset() const;
};

template <typename T>
struct impl_IGridViewItemPresenter
{
	bool SelectionCheckMarkVisualEnabled() const;
	void SelectionCheckMarkVisualEnabled(bool value) const;
	Windows::UI::Xaml::Media::Brush CheckHintBrush() const;
	void CheckHintBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush CheckSelectingBrush() const;
	void CheckSelectingBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush CheckBrush() const;
	void CheckBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush DragBackground() const;
	void DragBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush DragForeground() const;
	void DragForeground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush FocusBorderBrush() const;
	void FocusBorderBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush PlaceholderBackground() const;
	void PlaceholderBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush PointerOverBackground() const;
	void PointerOverBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush SelectedBackground() const;
	void SelectedBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush SelectedForeground() const;
	void SelectedForeground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush SelectedPointerOverBackground() const;
	void SelectedPointerOverBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush SelectedPointerOverBorderBrush() const;
	void SelectedPointerOverBorderBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Thickness SelectedBorderThickness() const;
	void SelectedBorderThickness(Windows::UI::Xaml::Thickness const & value) const;
	double DisabledOpacity() const;
	void DisabledOpacity(double value) const;
	double DragOpacity() const;
	void DragOpacity(double value) const;
	double ReorderHintOffset() const;
	void ReorderHintOffset(double value) const;
	Windows::UI::Xaml::HorizontalAlignment HorizontalContentAlignment() const;
	void HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) const;
	Windows::UI::Xaml::VerticalAlignment VerticalContentAlignment() const;
	void VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) const;
	Windows::UI::Xaml::Thickness Padding() const;
	void Padding(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::Thickness PointerOverBackgroundMargin() const;
	void PointerOverBackgroundMargin(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::Thickness ContentMargin() const;
	void ContentMargin(Windows::UI::Xaml::Thickness const & value) const;
};

template <typename T>
struct impl_IGridViewItemPresenterStatics
{
	Windows::UI::Xaml::DependencyProperty SelectionCheckMarkVisualEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty CheckHintBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty CheckSelectingBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty CheckBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty DragBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty DragForegroundProperty() const;
	Windows::UI::Xaml::DependencyProperty FocusBorderBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty PlaceholderBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty PointerOverBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedForegroundProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedPointerOverBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedPointerOverBorderBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedBorderThicknessProperty() const;
	Windows::UI::Xaml::DependencyProperty DisabledOpacityProperty() const;
	Windows::UI::Xaml::DependencyProperty DragOpacityProperty() const;
	Windows::UI::Xaml::DependencyProperty ReorderHintOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalContentAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalContentAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
	Windows::UI::Xaml::DependencyProperty PointerOverBackgroundMarginProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentMarginProperty() const;
};

template <typename T>
struct impl_IGridViewItemPresenterFactory
{
	Windows::UI::Xaml::Controls::Primitives::GridViewItemPresenter CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IListViewItemPresenter
{
	bool SelectionCheckMarkVisualEnabled() const;
	void SelectionCheckMarkVisualEnabled(bool value) const;
	Windows::UI::Xaml::Media::Brush CheckHintBrush() const;
	void CheckHintBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush CheckSelectingBrush() const;
	void CheckSelectingBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush CheckBrush() const;
	void CheckBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush DragBackground() const;
	void DragBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush DragForeground() const;
	void DragForeground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush FocusBorderBrush() const;
	void FocusBorderBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush PlaceholderBackground() const;
	void PlaceholderBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush PointerOverBackground() const;
	void PointerOverBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush SelectedBackground() const;
	void SelectedBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush SelectedForeground() const;
	void SelectedForeground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush SelectedPointerOverBackground() const;
	void SelectedPointerOverBackground(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush SelectedPointerOverBorderBrush() const;
	void SelectedPointerOverBorderBrush(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Thickness SelectedBorderThickness() const;
	void SelectedBorderThickness(Windows::UI::Xaml::Thickness const & value) const;
	double DisabledOpacity() const;
	void DisabledOpacity(double value) const;
	double DragOpacity() const;
	void DragOpacity(double value) const;
	double ReorderHintOffset() const;
	void ReorderHintOffset(double value) const;
	Windows::UI::Xaml::HorizontalAlignment HorizontalContentAlignment() const;
	void HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) const;
	Windows::UI::Xaml::VerticalAlignment VerticalContentAlignment() const;
	void VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) const;
	Windows::UI::Xaml::Thickness Padding() const;
	void Padding(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::Thickness PointerOverBackgroundMargin() const;
	void PointerOverBackgroundMargin(Windows::UI::Xaml::Thickness const & value) const;
	Windows::UI::Xaml::Thickness ContentMargin() const;
	void ContentMargin(Windows::UI::Xaml::Thickness const & value) const;
};

template <typename T>
struct impl_IListViewItemPresenterStatics
{
	Windows::UI::Xaml::DependencyProperty SelectionCheckMarkVisualEnabledProperty() const;
	Windows::UI::Xaml::DependencyProperty CheckHintBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty CheckSelectingBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty CheckBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty DragBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty DragForegroundProperty() const;
	Windows::UI::Xaml::DependencyProperty FocusBorderBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty PlaceholderBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty PointerOverBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedForegroundProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedPointerOverBackgroundProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedPointerOverBorderBrushProperty() const;
	Windows::UI::Xaml::DependencyProperty SelectedBorderThicknessProperty() const;
	Windows::UI::Xaml::DependencyProperty DisabledOpacityProperty() const;
	Windows::UI::Xaml::DependencyProperty DragOpacityProperty() const;
	Windows::UI::Xaml::DependencyProperty ReorderHintOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty HorizontalContentAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalContentAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty PaddingProperty() const;
	Windows::UI::Xaml::DependencyProperty PointerOverBackgroundMarginProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentMarginProperty() const;
};

template <typename T>
struct impl_IListViewItemPresenterFactory
{
	Windows::UI::Xaml::Controls::Primitives::ListViewItemPresenter CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGeneratorPositionHelper
{
};

template <typename T>
struct impl_IGeneratorPositionHelperStatics
{
	Windows::UI::Xaml::Controls::Primitives::GeneratorPosition FromIndexAndOffset(int index, int offset) const;
};

template <typename T>
struct impl_ILayoutInformation
{
};

template <typename T>
struct impl_ILayoutInformationStatics
{
	Windows::UI::Xaml::UIElement GetLayoutExceptionElement(IInspectable const & dispatcher) const;
	Windows::Foundation::Rect GetLayoutSlot(Windows::UI::Xaml::FrameworkElement const & element) const;
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Data {

template <typename T>
struct impl_ICurrentChangingEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Data::CurrentChangingEventArgs const & e) const;
};

template <typename T>
struct impl_IPropertyChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Data::PropertyChangedEventArgs const & e) const;
};

template <typename T>
struct impl_IBinding
{
	Windows::UI::Xaml::PropertyPath Path() const;
	void Path(Windows::UI::Xaml::PropertyPath const & value) const;
	Windows::UI::Xaml::Data::BindingMode Mode() const;
	void Mode(Windows::UI::Xaml::Data::BindingMode value) const;
	IInspectable Source() const;
	void Source(IInspectable const & value) const;
	Windows::UI::Xaml::Data::RelativeSource RelativeSource() const;
	void RelativeSource(Windows::UI::Xaml::Data::RelativeSource const & value) const;
	String ElementName() const;
	void ElementName(String const & value) const;
	template <unsigned S0> void ElementName(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Data::IValueConverter Converter() const;
	void Converter(Windows::UI::Xaml::Data::IValueConverter const & value) const;
	IInspectable ConverterParameter() const;
	void ConverterParameter(IInspectable const & value) const;
	String ConverterLanguage() const;
	void ConverterLanguage(String const & value) const;
	template <unsigned S0> void ConverterLanguage(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IValueConverter
{
	IInspectable Convert(IInspectable const & value, Windows::UI::Xaml::Interop::TypeName const & targetType, IInspectable const & parameter, String const & language) const;
	template <unsigned S0> IInspectable Convert(IInspectable const & value, Windows::UI::Xaml::Interop::TypeName const & targetType, IInspectable const & parameter, wchar_t const (&language)[S0]) const;
	IInspectable ConvertBack(IInspectable const & value, Windows::UI::Xaml::Interop::TypeName const & targetType, IInspectable const & parameter, String const & language) const;
	template <unsigned S0> IInspectable ConvertBack(IInspectable const & value, Windows::UI::Xaml::Interop::TypeName const & targetType, IInspectable const & parameter, wchar_t const (&language)[S0]) const;
};

template <typename T>
struct impl_IBindingFactory
{
	Windows::UI::Xaml::Data::Binding CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IBinding2
{
	IInspectable FallbackValue() const;
	void FallbackValue(IInspectable const & value) const;
	IInspectable TargetNullValue() const;
	void TargetNullValue(IInspectable const & value) const;
	Windows::UI::Xaml::Data::UpdateSourceTrigger UpdateSourceTrigger() const;
	void UpdateSourceTrigger(Windows::UI::Xaml::Data::UpdateSourceTrigger value) const;
};

template <typename T>
struct impl_IBindingBase
{
};

template <typename T>
struct impl_IBindingBaseFactory
{
	Windows::UI::Xaml::Data::BindingBase CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IBindingExpression
{
	IInspectable DataItem() const;
	Windows::UI::Xaml::Data::Binding ParentBinding() const;
	void UpdateSource() const;
};

template <typename T>
struct impl_IBindingExpressionFactory
{
};

template <typename T>
struct impl_IBindingExpressionBase
{
};

template <typename T>
struct impl_IBindingExpressionBaseFactory
{
};

template <typename T>
struct impl_ICollectionViewSource
{
	IInspectable Source() const;
	void Source(IInspectable const & value) const;
	Windows::UI::Xaml::Data::ICollectionView View() const;
	bool IsSourceGrouped() const;
	void IsSourceGrouped(bool value) const;
	Windows::UI::Xaml::PropertyPath ItemsPath() const;
	void ItemsPath(Windows::UI::Xaml::PropertyPath const & value) const;
};

template <typename T>
struct impl_ICollectionView
{
	IInspectable CurrentItem() const;
	int CurrentPosition() const;
	bool IsCurrentAfterLast() const;
	bool IsCurrentBeforeFirst() const;
	Windows::Foundation::Collections::IObservableVector<IInspectable> CollectionGroups() const;
	bool HasMoreItems() const;
	EventRegistrationToken CurrentChanged(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken CurrentChanged(F value) const;
	void CurrentChanged(EventRegistrationToken token) const;
	EventRegistrationToken CurrentChanging(Windows::UI::Xaml::Data::ICurrentChangingEventHandler const & value) const;
	template <typename F> EventRegistrationToken CurrentChanging(F value) const;
	void CurrentChanging(EventRegistrationToken token) const;
	bool MoveCurrentTo(IInspectable const & item) const;
	bool MoveCurrentToPosition(int index) const;
	bool MoveCurrentToFirst() const;
	bool MoveCurrentToLast() const;
	bool MoveCurrentToNext() const;
	bool MoveCurrentToPrevious() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::UI::Xaml::Data::LoadMoreItemsResult> LoadMoreItemsAsync(unsigned count) const;
};

template <typename T>
struct impl_ICollectionViewSourceStatics
{
	Windows::UI::Xaml::DependencyProperty SourceProperty() const;
	Windows::UI::Xaml::DependencyProperty ViewProperty() const;
	Windows::UI::Xaml::DependencyProperty IsSourceGroupedProperty() const;
	Windows::UI::Xaml::DependencyProperty ItemsPathProperty() const;
};

template <typename T>
struct impl_ICurrentChangingEventArgs
{
	bool Cancel() const;
	void Cancel(bool value) const;
	bool IsCancelable() const;
};

template <typename T>
struct impl_ICurrentChangingEventArgsFactory
{
	Windows::UI::Xaml::Data::CurrentChangingEventArgs CreateInstance(IInspectable const & outer, IInspectable & inner) const;
	Windows::UI::Xaml::Data::CurrentChangingEventArgs CreateWithCancelableParameter(bool isCancelable, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ICollectionViewGroup
{
	IInspectable Group() const;
	Windows::Foundation::Collections::IObservableVector<IInspectable> GroupItems() const;
};

template <typename T>
struct impl_ICustomProperty
{
	Windows::UI::Xaml::Interop::TypeName Type() const;
	String Name() const;
	IInspectable GetValue(IInspectable const & target) const;
	void SetValue(IInspectable const & target, IInspectable const & value) const;
	IInspectable GetIndexedValue(IInspectable const & target, IInspectable const & index) const;
	void SetIndexedValue(IInspectable const & target, IInspectable const & value, IInspectable const & index) const;
	bool CanWrite() const;
	bool CanRead() const;
};

template <typename T>
struct impl_ICustomPropertyProvider
{
	Windows::UI::Xaml::Data::ICustomProperty GetCustomProperty(String const & name) const;
	template <unsigned S0> Windows::UI::Xaml::Data::ICustomProperty GetCustomProperty(wchar_t const (&name)[S0]) const;
	Windows::UI::Xaml::Data::ICustomProperty GetIndexedProperty(String const & name, Windows::UI::Xaml::Interop::TypeName const & type) const;
	template <unsigned S0> Windows::UI::Xaml::Data::ICustomProperty GetIndexedProperty(wchar_t const (&name)[S0], Windows::UI::Xaml::Interop::TypeName const & type) const;
	String GetStringRepresentation() const;
	Windows::UI::Xaml::Interop::TypeName Type() const;
};

template <typename T>
struct impl_INotifyPropertyChanged
{
	EventRegistrationToken PropertyChanged(Windows::UI::Xaml::Data::IPropertyChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken PropertyChanged(F value) const;
	void PropertyChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPropertyChangedEventArgs
{
	String PropertyName() const;
};

template <typename T>
struct impl_IPropertyChangedEventArgsFactory
{
	Windows::UI::Xaml::Data::PropertyChangedEventArgs CreateInstance(String const & name, IInspectable const & outer, IInspectable & inner) const;
	template <unsigned S0> Windows::UI::Xaml::Data::PropertyChangedEventArgs CreateInstance(wchar_t const (&name)[S0], IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IRelativeSource
{
	Windows::UI::Xaml::Data::RelativeSourceMode Mode() const;
	void Mode(Windows::UI::Xaml::Data::RelativeSourceMode value) const;
};

template <typename T>
struct impl_IRelativeSourceFactory
{
	Windows::UI::Xaml::Data::RelativeSource CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IBindingOperations
{
};

template <typename T>
struct impl_IBindingOperationsStatics
{
	void SetBinding(Windows::UI::Xaml::DependencyObject const & target, Windows::UI::Xaml::DependencyProperty const & dp, Windows::UI::Xaml::Data::BindingBase const & binding) const;
};

template <typename T>
struct impl_ISupportIncrementalLoading
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::UI::Xaml::Data::LoadMoreItemsResult> LoadMoreItemsAsync(unsigned count) const;
	bool HasMoreItems() const;
};

template <typename T>
struct impl_ICollectionViewFactory
{
	Windows::UI::Xaml::Data::ICollectionView CreateView() const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Documents {

template <typename T>
struct impl_IBlock
{
	Windows::UI::Xaml::TextAlignment TextAlignment() const;
	void TextAlignment(Windows::UI::Xaml::TextAlignment value) const;
	double LineHeight() const;
	void LineHeight(double value) const;
	Windows::UI::Xaml::LineStackingStrategy LineStackingStrategy() const;
	void LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) const;
	Windows::UI::Xaml::Thickness Margin() const;
	void Margin(Windows::UI::Xaml::Thickness const & value) const;
};

template <typename T>
struct impl_IBlockStatics
{
	Windows::UI::Xaml::DependencyProperty TextAlignmentProperty() const;
	Windows::UI::Xaml::DependencyProperty LineHeightProperty() const;
	Windows::UI::Xaml::DependencyProperty LineStackingStrategyProperty() const;
	Windows::UI::Xaml::DependencyProperty MarginProperty() const;
};

template <typename T>
struct impl_IBlockFactory
{
	Windows::UI::Xaml::Documents::Block CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IBold
{
};

template <typename T>
struct impl_IGlyphs
{
	String UnicodeString() const;
	void UnicodeString(String const & value) const;
	template <unsigned S0> void UnicodeString(wchar_t const (&value)[S0]) const;
	String Indices() const;
	void Indices(String const & value) const;
	template <unsigned S0> void Indices(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri FontUri() const;
	void FontUri(Windows::Foundation::Uri const & value) const;
	Windows::UI::Xaml::Media::StyleSimulations StyleSimulations() const;
	void StyleSimulations(Windows::UI::Xaml::Media::StyleSimulations value) const;
	double FontRenderingEmSize() const;
	void FontRenderingEmSize(double value) const;
	double OriginX() const;
	void OriginX(double value) const;
	double OriginY() const;
	void OriginY(double value) const;
	Windows::UI::Xaml::Media::Brush Fill() const;
	void Fill(Windows::UI::Xaml::Media::Brush const & value) const;
};

template <typename T>
struct impl_IGlyphsStatics
{
	Windows::UI::Xaml::DependencyProperty UnicodeStringProperty() const;
	Windows::UI::Xaml::DependencyProperty IndicesProperty() const;
	Windows::UI::Xaml::DependencyProperty FontUriProperty() const;
	Windows::UI::Xaml::DependencyProperty StyleSimulationsProperty() const;
	Windows::UI::Xaml::DependencyProperty FontRenderingEmSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty OriginXProperty() const;
	Windows::UI::Xaml::DependencyProperty OriginYProperty() const;
	Windows::UI::Xaml::DependencyProperty FillProperty() const;
};

template <typename T>
struct impl_IInline
{
};

template <typename T>
struct impl_IInlineFactory
{
	Windows::UI::Xaml::Documents::Inline CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IInlineUIContainer
{
	Windows::UI::Xaml::UIElement Child() const;
	void Child(Windows::UI::Xaml::UIElement const & value) const;
};

template <typename T>
struct impl_IItalic
{
};

template <typename T>
struct impl_ILineBreak
{
};

template <typename T>
struct impl_IParagraph
{
	Windows::UI::Xaml::Documents::InlineCollection Inlines() const;
	double TextIndent() const;
	void TextIndent(double value) const;
};

template <typename T>
struct impl_IParagraphStatics
{
	Windows::UI::Xaml::DependencyProperty TextIndentProperty() const;
};

template <typename T>
struct impl_IRun
{
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::FlowDirection FlowDirection() const;
	void FlowDirection(Windows::UI::Xaml::FlowDirection value) const;
};

template <typename T>
struct impl_IRunStatics
{
	Windows::UI::Xaml::DependencyProperty FlowDirectionProperty() const;
};

template <typename T>
struct impl_ISpan
{
	Windows::UI::Xaml::Documents::InlineCollection Inlines() const;
	void Inlines(Windows::UI::Xaml::Documents::InlineCollection const & value) const;
};

template <typename T>
struct impl_ISpanFactory
{
	Windows::UI::Xaml::Documents::Span CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ITextElement
{
	String Name() const;
	double FontSize() const;
	void FontSize(double value) const;
	Windows::UI::Xaml::Media::FontFamily FontFamily() const;
	void FontFamily(Windows::UI::Xaml::Media::FontFamily const & value) const;
	Windows::UI::Text::FontWeight FontWeight() const;
	void FontWeight(Windows::UI::Text::FontWeight const & value) const;
	Windows::UI::Text::FontStyle FontStyle() const;
	void FontStyle(Windows::UI::Text::FontStyle value) const;
	Windows::UI::Text::FontStretch FontStretch() const;
	void FontStretch(Windows::UI::Text::FontStretch value) const;
	int CharacterSpacing() const;
	void CharacterSpacing(int value) const;
	Windows::UI::Xaml::Media::Brush Foreground() const;
	void Foreground(Windows::UI::Xaml::Media::Brush const & value) const;
	String Language() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Documents::TextPointer ContentStart() const;
	Windows::UI::Xaml::Documents::TextPointer ContentEnd() const;
	Windows::UI::Xaml::Documents::TextPointer ElementStart() const;
	Windows::UI::Xaml::Documents::TextPointer ElementEnd() const;
	IInspectable FindName(String const & name) const;
	template <unsigned S0> IInspectable FindName(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_ITextElementOverrides
{
	void OnDisconnectVisualChildren() const;
};

template <typename T>
struct impl_ITextElementStatics
{
	Windows::UI::Xaml::DependencyProperty FontSizeProperty() const;
	Windows::UI::Xaml::DependencyProperty FontFamilyProperty() const;
	Windows::UI::Xaml::DependencyProperty FontWeightProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStyleProperty() const;
	Windows::UI::Xaml::DependencyProperty FontStretchProperty() const;
	Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty() const;
	Windows::UI::Xaml::DependencyProperty ForegroundProperty() const;
	Windows::UI::Xaml::DependencyProperty LanguageProperty() const;
};

template <typename T>
struct impl_ITextElementFactory
{
};

template <typename T>
struct impl_ITextPointer
{
	Windows::UI::Xaml::DependencyObject Parent() const;
	Windows::UI::Xaml::FrameworkElement VisualParent() const;
	Windows::UI::Xaml::Documents::LogicalDirection LogicalDirection() const;
	int Offset() const;
	Windows::Foundation::Rect GetCharacterRect(Windows::UI::Xaml::Documents::LogicalDirection direction) const;
	Windows::UI::Xaml::Documents::TextPointer GetPositionAtOffset(int offset, Windows::UI::Xaml::Documents::LogicalDirection direction) const;
};

template <typename T>
struct impl_ITypography
{
};

template <typename T>
struct impl_ITypographyStatics
{
	Windows::UI::Xaml::DependencyProperty AnnotationAlternatesProperty() const;
	int GetAnnotationAlternates(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetAnnotationAlternates(Windows::UI::Xaml::DependencyObject const & element, int value) const;
	Windows::UI::Xaml::DependencyProperty EastAsianExpertFormsProperty() const;
	bool GetEastAsianExpertForms(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetEastAsianExpertForms(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty EastAsianLanguageProperty() const;
	Windows::UI::Xaml::FontEastAsianLanguage GetEastAsianLanguage(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetEastAsianLanguage(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontEastAsianLanguage value) const;
	Windows::UI::Xaml::DependencyProperty EastAsianWidthsProperty() const;
	Windows::UI::Xaml::FontEastAsianWidths GetEastAsianWidths(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetEastAsianWidths(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontEastAsianWidths value) const;
	Windows::UI::Xaml::DependencyProperty StandardLigaturesProperty() const;
	bool GetStandardLigatures(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStandardLigatures(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty ContextualLigaturesProperty() const;
	bool GetContextualLigatures(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetContextualLigatures(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty DiscretionaryLigaturesProperty() const;
	bool GetDiscretionaryLigatures(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetDiscretionaryLigatures(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty HistoricalLigaturesProperty() const;
	bool GetHistoricalLigatures(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetHistoricalLigatures(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StandardSwashesProperty() const;
	int GetStandardSwashes(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStandardSwashes(Windows::UI::Xaml::DependencyObject const & element, int value) const;
	Windows::UI::Xaml::DependencyProperty ContextualSwashesProperty() const;
	int GetContextualSwashes(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetContextualSwashes(Windows::UI::Xaml::DependencyObject const & element, int value) const;
	Windows::UI::Xaml::DependencyProperty ContextualAlternatesProperty() const;
	bool GetContextualAlternates(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetContextualAlternates(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticAlternatesProperty() const;
	int GetStylisticAlternates(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticAlternates(Windows::UI::Xaml::DependencyObject const & element, int value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet1Property() const;
	bool GetStylisticSet1(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet1(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet2Property() const;
	bool GetStylisticSet2(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet2(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet3Property() const;
	bool GetStylisticSet3(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet3(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet4Property() const;
	bool GetStylisticSet4(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet4(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet5Property() const;
	bool GetStylisticSet5(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet5(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet6Property() const;
	bool GetStylisticSet6(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet6(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet7Property() const;
	bool GetStylisticSet7(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet7(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet8Property() const;
	bool GetStylisticSet8(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet8(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet9Property() const;
	bool GetStylisticSet9(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet9(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet10Property() const;
	bool GetStylisticSet10(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet10(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet11Property() const;
	bool GetStylisticSet11(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet11(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet12Property() const;
	bool GetStylisticSet12(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet12(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet13Property() const;
	bool GetStylisticSet13(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet13(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet14Property() const;
	bool GetStylisticSet14(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet14(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet15Property() const;
	bool GetStylisticSet15(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet15(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet16Property() const;
	bool GetStylisticSet16(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet16(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet17Property() const;
	bool GetStylisticSet17(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet17(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet18Property() const;
	bool GetStylisticSet18(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet18(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet19Property() const;
	bool GetStylisticSet19(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet19(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty StylisticSet20Property() const;
	bool GetStylisticSet20(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetStylisticSet20(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty CapitalsProperty() const;
	Windows::UI::Xaml::FontCapitals GetCapitals(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetCapitals(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontCapitals value) const;
	Windows::UI::Xaml::DependencyProperty CapitalSpacingProperty() const;
	bool GetCapitalSpacing(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetCapitalSpacing(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty KerningProperty() const;
	bool GetKerning(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetKerning(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty CaseSensitiveFormsProperty() const;
	bool GetCaseSensitiveForms(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetCaseSensitiveForms(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty HistoricalFormsProperty() const;
	bool GetHistoricalForms(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetHistoricalForms(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty FractionProperty() const;
	Windows::UI::Xaml::FontFraction GetFraction(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetFraction(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontFraction value) const;
	Windows::UI::Xaml::DependencyProperty NumeralStyleProperty() const;
	Windows::UI::Xaml::FontNumeralStyle GetNumeralStyle(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetNumeralStyle(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontNumeralStyle value) const;
	Windows::UI::Xaml::DependencyProperty NumeralAlignmentProperty() const;
	Windows::UI::Xaml::FontNumeralAlignment GetNumeralAlignment(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetNumeralAlignment(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontNumeralAlignment value) const;
	Windows::UI::Xaml::DependencyProperty SlashedZeroProperty() const;
	bool GetSlashedZero(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetSlashedZero(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty MathematicalGreekProperty() const;
	bool GetMathematicalGreek(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetMathematicalGreek(Windows::UI::Xaml::DependencyObject const & element, bool value) const;
	Windows::UI::Xaml::DependencyProperty VariantsProperty() const;
	Windows::UI::Xaml::FontVariants GetVariants(Windows::UI::Xaml::DependencyObject const & element) const;
	void SetVariants(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontVariants value) const;
};

template <typename T>
struct impl_IUnderline
{
};

template <typename T>
struct impl_IHyperlink
{
	Windows::Foundation::Uri NavigateUri() const;
	void NavigateUri(Windows::Foundation::Uri const & value) const;
	EventRegistrationToken Click(Windows::Foundation::ITypedEventHandler<Windows::UI::Xaml::Documents::Hyperlink, Windows::UI::Xaml::Documents::HyperlinkClickEventArgs> const & value) const;
	template <typename F> EventRegistrationToken Click(F value) const;
	void Click(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IHyperlinkStatics
{
	Windows::UI::Xaml::DependencyProperty NavigateUriProperty() const;
};

template <typename T>
struct impl_IHyperlinkClickEventArgs
{
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Hosting {

template <typename T>
struct impl_IXamlUIPresenterHost
{
	String ResolveFileResource(String const & path) const;
	template <unsigned S0> String ResolveFileResource(wchar_t const (&path)[S0]) const;
};

template <typename T>
struct impl_IXamlUIPresenterHost2
{
	String GetGenericXamlFilePath() const;
};

template <typename T>
struct impl_IXamlUIPresenter
{
	Windows::UI::Xaml::UIElement RootElement() const;
	void RootElement(Windows::UI::Xaml::UIElement const & value) const;
	String ThemeKey() const;
	void ThemeKey(String const & value) const;
	template <unsigned S0> void ThemeKey(wchar_t const (&value)[S0]) const;
	String ThemeResourcesXaml() const;
	void ThemeResourcesXaml(String const & value) const;
	template <unsigned S0> void ThemeResourcesXaml(wchar_t const (&value)[S0]) const;
	void SetSize(int width, int height) const;
	void Render() const;
	void Present() const;
};

template <typename T>
struct impl_IXamlUIPresenterStatics
{
	bool CompleteTimelinesAutomatically() const;
	void CompleteTimelinesAutomatically(bool value) const;
	void SetHost(Windows::UI::Xaml::Hosting::IXamlUIPresenterHost const & host) const;
	void NotifyWindowSizeChanged() const;
};

template <typename T>
struct impl_IXamlUIPresenterStatics2
{
	Windows::Foundation::Rect GetFlyoutPlacementTargetInfo(Windows::UI::Xaml::FrameworkElement const & placementTarget, Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode preferredPlacement, Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode & targetPreferredPlacement, bool & allowFallbacks) const;
	Windows::Foundation::Rect GetFlyoutPlacement(Windows::Foundation::Rect const & placementTargetBounds, Windows::Foundation::Size const & controlSize, Windows::Foundation::Size const & minControlSize, Windows::Foundation::Rect const & containerRect, Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode targetPreferredPlacement, bool allowFallbacks, Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode & chosenPlacement) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Input {

template <typename T>
struct impl_IDoubleTappedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IHoldingEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::HoldingRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IKeyEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::KeyRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IManipulationCompletedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IManipulationDeltaEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IManipulationInertiaStartingEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IManipulationStartedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IManipulationStartingEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IPointerEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::PointerRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IRightTappedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::RightTappedRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_ITappedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Input::TappedRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IDoubleTappedRoutedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::Foundation::Point GetPosition(Windows::UI::Xaml::UIElement const & relativeTo) const;
};

template <typename T>
struct impl_IFocusManager
{
};

template <typename T>
struct impl_IFocusManagerStatics
{
	IInspectable GetFocusedElement() const;
};

template <typename T>
struct impl_IFocusManagerStatics2
{
	bool TryMoveFocus(Windows::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection) const;
};

template <typename T>
struct impl_IHoldingRoutedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::UI::Input::HoldingState HoldingState() const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::Foundation::Point GetPosition(Windows::UI::Xaml::UIElement const & relativeTo) const;
};

template <typename T>
struct impl_ICommand
{
	EventRegistrationToken CanExecuteChanged(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken CanExecuteChanged(F value) const;
	void CanExecuteChanged(EventRegistrationToken token) const;
	bool CanExecute(IInspectable const & parameter) const;
	void Execute(IInspectable const & parameter) const;
};

template <typename T>
struct impl_IInertiaExpansionBehavior
{
	double DesiredDeceleration() const;
	void DesiredDeceleration(double value) const;
	double DesiredExpansion() const;
	void DesiredExpansion(double value) const;
};

template <typename T>
struct impl_IInertiaRotationBehavior
{
	double DesiredDeceleration() const;
	void DesiredDeceleration(double value) const;
	double DesiredRotation() const;
	void DesiredRotation(double value) const;
};

template <typename T>
struct impl_IInertiaTranslationBehavior
{
	double DesiredDeceleration() const;
	void DesiredDeceleration(double value) const;
	double DesiredDisplacement() const;
	void DesiredDisplacement(double value) const;
};

template <typename T>
struct impl_IInputScope
{
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Input::InputScopeName> Names() const;
};

template <typename T>
struct impl_IInputScopeName
{
	Windows::UI::Xaml::Input::InputScopeNameValue NameValue() const;
	void NameValue(Windows::UI::Xaml::Input::InputScopeNameValue value) const;
};

template <typename T>
struct impl_IInputScopeNameFactory
{
	Windows::UI::Xaml::Input::InputScopeName CreateInstance(Windows::UI::Xaml::Input::InputScopeNameValue nameValue) const;
};

template <typename T>
struct impl_IKeyRoutedEventArgs
{
	Windows::System::VirtualKey Key() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
	bool Handled() const;
	void Handled(bool value) const;
};

template <typename T>
struct impl_IManipulationCompletedRoutedEventArgs
{
	Windows::UI::Xaml::UIElement Container() const;
	Windows::Foundation::Point Position() const;
	bool IsInertial() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
};

template <typename T>
struct impl_IManipulationDeltaRoutedEventArgs
{
	Windows::UI::Xaml::UIElement Container() const;
	Windows::Foundation::Point Position() const;
	bool IsInertial() const;
	Windows::UI::Input::ManipulationDelta Delta() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	void Complete() const;
};

template <typename T>
struct impl_IManipulationInertiaStartingRoutedEventArgs
{
	Windows::UI::Xaml::UIElement Container() const;
	Windows::UI::Xaml::Input::InertiaExpansionBehavior ExpansionBehavior() const;
	void ExpansionBehavior(Windows::UI::Xaml::Input::InertiaExpansionBehavior const & value) const;
	Windows::UI::Xaml::Input::InertiaRotationBehavior RotationBehavior() const;
	void RotationBehavior(Windows::UI::Xaml::Input::InertiaRotationBehavior const & value) const;
	Windows::UI::Xaml::Input::InertiaTranslationBehavior TranslationBehavior() const;
	void TranslationBehavior(Windows::UI::Xaml::Input::InertiaTranslationBehavior const & value) const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::UI::Input::ManipulationDelta Delta() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
struct impl_IManipulationPivot
{
	Windows::Foundation::Point Center() const;
	void Center(Windows::Foundation::Point const & value) const;
	double Radius() const;
	void Radius(double value) const;
};

template <typename T>
struct impl_IManipulationPivotFactory
{
	Windows::UI::Xaml::Input::ManipulationPivot CreateInstanceWithCenterAndRadius(Windows::Foundation::Point const & center, double radius) const;
};

template <typename T>
struct impl_IManipulationStartedRoutedEventArgs
{
	Windows::UI::Xaml::UIElement Container() const;
	Windows::Foundation::Point Position() const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	void Complete() const;
};

template <typename T>
struct impl_IManipulationStartedRoutedEventArgsFactory
{
	Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IManipulationStartingRoutedEventArgs
{
	Windows::UI::Xaml::Input::ManipulationModes Mode() const;
	void Mode(Windows::UI::Xaml::Input::ManipulationModes value) const;
	Windows::UI::Xaml::UIElement Container() const;
	void Container(Windows::UI::Xaml::UIElement const & value) const;
	Windows::UI::Xaml::Input::ManipulationPivot Pivot() const;
	void Pivot(Windows::UI::Xaml::Input::ManipulationPivot const & value) const;
	bool Handled() const;
	void Handled(bool value) const;
};

template <typename T>
struct impl_IPointer
{
	unsigned PointerId() const;
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	bool IsInContact() const;
	bool IsInRange() const;
};

template <typename T>
struct impl_IPointerRoutedEventArgs
{
	Windows::UI::Xaml::Input::Pointer Pointer() const;
	Windows::System::VirtualKeyModifiers KeyModifiers() const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::UI::Input::PointerPoint GetCurrentPoint(Windows::UI::Xaml::UIElement const & relativeTo) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(Windows::UI::Xaml::UIElement const & relativeTo) const;
};

template <typename T>
struct impl_IRightTappedRoutedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::Foundation::Point GetPosition(Windows::UI::Xaml::UIElement const & relativeTo) const;
};

template <typename T>
struct impl_ITappedRoutedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::Foundation::Point GetPosition(Windows::UI::Xaml::UIElement const & relativeTo) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Interop {

template <typename T>
struct impl_INotifyCollectionChangedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const & e) const;
};

template <typename T>
struct impl_IBindableVectorChangedEventHandler
{
	void Invoke(Windows::UI::Xaml::Interop::IBindableObservableVector const & vector, IInspectable const & e) const;
};

template <typename T>
struct impl_IBindableIterable
{
	Windows::UI::Xaml::Interop::IBindableIterator First() const;
};

template <typename T>
struct impl_IBindableIterator
{
	IInspectable Current() const;
	bool HasCurrent() const;
	bool MoveNext() const;
};

template <typename T>
struct impl_IBindableVector
{
	IInspectable GetAt(unsigned index) const;
	unsigned Size() const;
	Windows::UI::Xaml::Interop::IBindableVectorView GetView() const;
	bool IndexOf(IInspectable const & value, unsigned & index) const;
	void SetAt(unsigned index, IInspectable const & value) const;
	void InsertAt(unsigned index, IInspectable const & value) const;
	void RemoveAt(unsigned index) const;
	void Append(IInspectable const & value) const;
	void RemoveAtEnd() const;
	void Clear() const;
};

template <typename T>
struct impl_IBindableVectorView
{
	IInspectable GetAt(unsigned index) const;
	unsigned Size() const;
	bool IndexOf(IInspectable const & value, unsigned & index) const;
};

template <typename T>
struct impl_INotifyCollectionChanged
{
	EventRegistrationToken CollectionChanged(Windows::UI::Xaml::Interop::INotifyCollectionChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken CollectionChanged(F value) const;
	void CollectionChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_INotifyCollectionChangedEventArgs
{
	Windows::UI::Xaml::Interop::NotifyCollectionChangedAction Action() const;
	Windows::UI::Xaml::Interop::IBindableVector NewItems() const;
	Windows::UI::Xaml::Interop::IBindableVector OldItems() const;
	int NewStartingIndex() const;
	int OldStartingIndex() const;
};

template <typename T>
struct impl_INotifyCollectionChangedEventArgsFactory
{
	Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs CreateInstanceWithAllParameters(Windows::UI::Xaml::Interop::NotifyCollectionChangedAction action, Windows::UI::Xaml::Interop::IBindableVector const & newItems, Windows::UI::Xaml::Interop::IBindableVector const & oldItems, int newIndex, int oldIndex, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IBindableObservableVector
{
	EventRegistrationToken VectorChanged(Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler const & value) const;
	template <typename F> EventRegistrationToken VectorChanged(F value) const;
	void VectorChanged(EventRegistrationToken token) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Markup {

template <typename T>
struct impl_IXamlReader
{
};

template <typename T>
struct impl_IXamlReaderStatics
{
	IInspectable Load(String const & xaml) const;
	template <unsigned S0> IInspectable Load(wchar_t const (&xaml)[S0]) const;
	IInspectable LoadWithInitialTemplateValidation(String const & xaml) const;
	template <unsigned S0> IInspectable LoadWithInitialTemplateValidation(wchar_t const (&xaml)[S0]) const;
};

template <typename T>
struct impl_IComponentConnector
{
	void Connect(int connectionId, IInspectable const & target) const;
};

template <typename T>
struct impl_IXamlType
{
	Windows::UI::Xaml::Markup::IXamlType BaseType() const;
	Windows::UI::Xaml::Markup::IXamlMember ContentProperty() const;
	String FullName() const;
	bool IsArray() const;
	bool IsCollection() const;
	bool IsConstructible() const;
	bool IsDictionary() const;
	bool IsMarkupExtension() const;
	bool IsBindable() const;
	Windows::UI::Xaml::Markup::IXamlType ItemType() const;
	Windows::UI::Xaml::Markup::IXamlType KeyType() const;
	Windows::UI::Xaml::Interop::TypeName UnderlyingType() const;
	IInspectable ActivateInstance() const;
	IInspectable CreateFromString(String const & value) const;
	template <unsigned S0> IInspectable CreateFromString(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::Markup::IXamlMember GetMember(String const & name) const;
	template <unsigned S0> Windows::UI::Xaml::Markup::IXamlMember GetMember(wchar_t const (&name)[S0]) const;
	void AddToVector(IInspectable const & instance, IInspectable const & value) const;
	void AddToMap(IInspectable const & instance, IInspectable const & key, IInspectable const & value) const;
	void RunInitializer() const;
};

template <typename T>
struct impl_IXamlMember
{
	bool IsAttachable() const;
	bool IsDependencyProperty() const;
	bool IsReadOnly() const;
	String Name() const;
	Windows::UI::Xaml::Markup::IXamlType TargetType() const;
	Windows::UI::Xaml::Markup::IXamlType Type() const;
	IInspectable GetValue(IInspectable const & instance) const;
	void SetValue(IInspectable const & instance, IInspectable const & value) const;
};

template <typename T>
struct impl_IXamlMetadataProvider
{
	Windows::UI::Xaml::Markup::IXamlType GetXamlType(Windows::UI::Xaml::Interop::TypeName const & type) const;
	Windows::UI::Xaml::Markup::IXamlType GetXamlType(String const & fullName) const;
	template <unsigned S0> Windows::UI::Xaml::Markup::IXamlType GetXamlType(wchar_t const (&fullName)[S0]) const;
};

template <typename T>
struct impl_IXamlBinaryWriter
{
};

template <typename T>
struct impl_IXamlBinaryWriterStatics
{
	Windows::UI::Xaml::Markup::XamlBinaryWriterErrorInformation Write(Windows::Foundation::Collections::IVector<Windows::Storage::Streams::IRandomAccessStream> const & inputStreams, Windows::Foundation::Collections::IVector<Windows::Storage::Streams::IRandomAccessStream> const & outputStreams, Windows::UI::Xaml::Markup::IXamlMetadataProvider const & xamlMetadataProvider) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media {

template <typename T>
struct impl_IRateChangedRoutedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Media::RateChangedRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_ITimelineMarkerRoutedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Media::TimelineMarkerRoutedEventArgs const & e) const;
};

template <typename T>
struct impl_IMatrixHelper
{
};

template <typename T>
struct impl_IMatrixHelperStatics
{
	Windows::UI::Xaml::Media::Matrix Identity() const;
	Windows::UI::Xaml::Media::Matrix FromElements(double m11, double m12, double m21, double m22, double offsetX, double offsetY) const;
	bool GetIsIdentity(Windows::UI::Xaml::Media::Matrix const & target) const;
	Windows::Foundation::Point Transform(Windows::UI::Xaml::Media::Matrix const & target, Windows::Foundation::Point const & point) const;
};

template <typename T>
struct impl_IArcSegment
{
	Windows::Foundation::Point Point() const;
	void Point(Windows::Foundation::Point const & value) const;
	Windows::Foundation::Size Size() const;
	void Size(Windows::Foundation::Size const & value) const;
	double RotationAngle() const;
	void RotationAngle(double value) const;
	bool IsLargeArc() const;
	void IsLargeArc(bool value) const;
	Windows::UI::Xaml::Media::SweepDirection SweepDirection() const;
	void SweepDirection(Windows::UI::Xaml::Media::SweepDirection value) const;
};

template <typename T>
struct impl_IArcSegmentStatics
{
	Windows::UI::Xaml::DependencyProperty PointProperty() const;
	Windows::UI::Xaml::DependencyProperty SizeProperty() const;
	Windows::UI::Xaml::DependencyProperty RotationAngleProperty() const;
	Windows::UI::Xaml::DependencyProperty IsLargeArcProperty() const;
	Windows::UI::Xaml::DependencyProperty SweepDirectionProperty() const;
};

template <typename T>
struct impl_IBezierSegment
{
	Windows::Foundation::Point Point1() const;
	void Point1(Windows::Foundation::Point const & value) const;
	Windows::Foundation::Point Point2() const;
	void Point2(Windows::Foundation::Point const & value) const;
	Windows::Foundation::Point Point3() const;
	void Point3(Windows::Foundation::Point const & value) const;
};

template <typename T>
struct impl_IBezierSegmentStatics
{
	Windows::UI::Xaml::DependencyProperty Point1Property() const;
	Windows::UI::Xaml::DependencyProperty Point2Property() const;
	Windows::UI::Xaml::DependencyProperty Point3Property() const;
};

template <typename T>
struct impl_IBitmapCache
{
};

template <typename T>
struct impl_IBrush
{
	double Opacity() const;
	void Opacity(double value) const;
	Windows::UI::Xaml::Media::Transform Transform() const;
	void Transform(Windows::UI::Xaml::Media::Transform const & value) const;
	Windows::UI::Xaml::Media::Transform RelativeTransform() const;
	void RelativeTransform(Windows::UI::Xaml::Media::Transform const & value) const;
};

template <typename T>
struct impl_IBrushStatics
{
	Windows::UI::Xaml::DependencyProperty OpacityProperty() const;
	Windows::UI::Xaml::DependencyProperty TransformProperty() const;
	Windows::UI::Xaml::DependencyProperty RelativeTransformProperty() const;
};

template <typename T>
struct impl_IBrushFactory
{
	Windows::UI::Xaml::Media::Brush CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ICacheMode
{
};

template <typename T>
struct impl_ICacheModeFactory
{
	Windows::UI::Xaml::Media::CacheMode CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ICompositeTransform
{
	double CenterX() const;
	void CenterX(double value) const;
	double CenterY() const;
	void CenterY(double value) const;
	double ScaleX() const;
	void ScaleX(double value) const;
	double ScaleY() const;
	void ScaleY(double value) const;
	double SkewX() const;
	void SkewX(double value) const;
	double SkewY() const;
	void SkewY(double value) const;
	double Rotation() const;
	void Rotation(double value) const;
	double TranslateX() const;
	void TranslateX(double value) const;
	double TranslateY() const;
	void TranslateY(double value) const;
};

template <typename T>
struct impl_ICompositeTransformStatics
{
	Windows::UI::Xaml::DependencyProperty CenterXProperty() const;
	Windows::UI::Xaml::DependencyProperty CenterYProperty() const;
	Windows::UI::Xaml::DependencyProperty ScaleXProperty() const;
	Windows::UI::Xaml::DependencyProperty ScaleYProperty() const;
	Windows::UI::Xaml::DependencyProperty SkewXProperty() const;
	Windows::UI::Xaml::DependencyProperty SkewYProperty() const;
	Windows::UI::Xaml::DependencyProperty RotationProperty() const;
	Windows::UI::Xaml::DependencyProperty TranslateXProperty() const;
	Windows::UI::Xaml::DependencyProperty TranslateYProperty() const;
};

template <typename T>
struct impl_IEllipseGeometry
{
	Windows::Foundation::Point Center() const;
	void Center(Windows::Foundation::Point const & value) const;
	double RadiusX() const;
	void RadiusX(double value) const;
	double RadiusY() const;
	void RadiusY(double value) const;
};

template <typename T>
struct impl_IEllipseGeometryStatics
{
	Windows::UI::Xaml::DependencyProperty CenterProperty() const;
	Windows::UI::Xaml::DependencyProperty RadiusXProperty() const;
	Windows::UI::Xaml::DependencyProperty RadiusYProperty() const;
};

template <typename T>
struct impl_IFontFamily
{
	String Source() const;
};

template <typename T>
struct impl_IFontFamilyFactory
{
	Windows::UI::Xaml::Media::FontFamily CreateInstanceWithName(String const & familyName, IInspectable const & outer, IInspectable & inner) const;
	template <unsigned S0> Windows::UI::Xaml::Media::FontFamily CreateInstanceWithName(wchar_t const (&familyName)[S0], IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGeneralTransform
{
	Windows::UI::Xaml::Media::GeneralTransform Inverse() const;
	Windows::Foundation::Point TransformPoint(Windows::Foundation::Point const & point) const;
	bool TryTransform(Windows::Foundation::Point const & inPoint, Windows::Foundation::Point & outPoint) const;
	Windows::Foundation::Rect TransformBounds(Windows::Foundation::Rect const & rect) const;
};

template <typename T>
struct impl_IGeneralTransformOverrides
{
	Windows::UI::Xaml::Media::GeneralTransform InverseCore() const;
	bool TryTransformCore(Windows::Foundation::Point const & inPoint, Windows::Foundation::Point & outPoint) const;
	Windows::Foundation::Rect TransformBoundsCore(Windows::Foundation::Rect const & rect) const;
};

template <typename T>
struct impl_IGeneralTransformFactory
{
	Windows::UI::Xaml::Media::GeneralTransform CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGeometry
{
	Windows::UI::Xaml::Media::Transform Transform() const;
	void Transform(Windows::UI::Xaml::Media::Transform const & value) const;
	Windows::Foundation::Rect Bounds() const;
};

template <typename T>
struct impl_IGeometryStatics
{
	Windows::UI::Xaml::Media::Geometry Empty() const;
	double StandardFlatteningTolerance() const;
	Windows::UI::Xaml::DependencyProperty TransformProperty() const;
};

template <typename T>
struct impl_IGeometryFactory
{
};

template <typename T>
struct impl_IGeometryGroup
{
	Windows::UI::Xaml::Media::FillRule FillRule() const;
	void FillRule(Windows::UI::Xaml::Media::FillRule value) const;
	Windows::UI::Xaml::Media::GeometryCollection Children() const;
	void Children(Windows::UI::Xaml::Media::GeometryCollection const & value) const;
};

template <typename T>
struct impl_IGeometryGroupStatics
{
	Windows::UI::Xaml::DependencyProperty FillRuleProperty() const;
	Windows::UI::Xaml::DependencyProperty ChildrenProperty() const;
};

template <typename T>
struct impl_IGradientBrush
{
	Windows::UI::Xaml::Media::GradientSpreadMethod SpreadMethod() const;
	void SpreadMethod(Windows::UI::Xaml::Media::GradientSpreadMethod value) const;
	Windows::UI::Xaml::Media::BrushMappingMode MappingMode() const;
	void MappingMode(Windows::UI::Xaml::Media::BrushMappingMode value) const;
	Windows::UI::Xaml::Media::ColorInterpolationMode ColorInterpolationMode() const;
	void ColorInterpolationMode(Windows::UI::Xaml::Media::ColorInterpolationMode value) const;
	Windows::UI::Xaml::Media::GradientStopCollection GradientStops() const;
	void GradientStops(Windows::UI::Xaml::Media::GradientStopCollection const & value) const;
};

template <typename T>
struct impl_IGradientBrushStatics
{
	Windows::UI::Xaml::DependencyProperty SpreadMethodProperty() const;
	Windows::UI::Xaml::DependencyProperty MappingModeProperty() const;
	Windows::UI::Xaml::DependencyProperty ColorInterpolationModeProperty() const;
	Windows::UI::Xaml::DependencyProperty GradientStopsProperty() const;
};

template <typename T>
struct impl_IGradientBrushFactory
{
	Windows::UI::Xaml::Media::GradientBrush CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IGradientStop
{
	Windows::UI::Color Color() const;
	void Color(Windows::UI::Color const & value) const;
	double Offset() const;
	void Offset(double value) const;
};

template <typename T>
struct impl_IGradientStopStatics
{
	Windows::UI::Xaml::DependencyProperty ColorProperty() const;
	Windows::UI::Xaml::DependencyProperty OffsetProperty() const;
};

template <typename T>
struct impl_IImageBrush
{
	Windows::UI::Xaml::Media::ImageSource ImageSource() const;
	void ImageSource(Windows::UI::Xaml::Media::ImageSource const & value) const;
	EventRegistrationToken ImageFailed(Windows::UI::Xaml::IExceptionRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ImageFailed(F value) const;
	void ImageFailed(EventRegistrationToken token) const;
	EventRegistrationToken ImageOpened(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ImageOpened(F value) const;
	void ImageOpened(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IImageBrushStatics
{
	Windows::UI::Xaml::DependencyProperty ImageSourceProperty() const;
};

template <typename T>
struct impl_IImageSource
{
};

template <typename T>
struct impl_IImageSourceFactory
{
};

template <typename T>
struct impl_ILinearGradientBrush
{
	Windows::Foundation::Point StartPoint() const;
	void StartPoint(Windows::Foundation::Point const & value) const;
	Windows::Foundation::Point EndPoint() const;
	void EndPoint(Windows::Foundation::Point const & value) const;
};

template <typename T>
struct impl_ILinearGradientBrushStatics
{
	Windows::UI::Xaml::DependencyProperty StartPointProperty() const;
	Windows::UI::Xaml::DependencyProperty EndPointProperty() const;
};

template <typename T>
struct impl_ILinearGradientBrushFactory
{
	Windows::UI::Xaml::Media::LinearGradientBrush CreateInstanceWithGradientStopCollectionAndAngle(Windows::UI::Xaml::Media::GradientStopCollection const & gradientStopCollection, double angle) const;
};

template <typename T>
struct impl_ILineGeometry
{
	Windows::Foundation::Point StartPoint() const;
	void StartPoint(Windows::Foundation::Point const & value) const;
	Windows::Foundation::Point EndPoint() const;
	void EndPoint(Windows::Foundation::Point const & value) const;
};

template <typename T>
struct impl_ILineGeometryStatics
{
	Windows::UI::Xaml::DependencyProperty StartPointProperty() const;
	Windows::UI::Xaml::DependencyProperty EndPointProperty() const;
};

template <typename T>
struct impl_ILineSegment
{
	Windows::Foundation::Point Point() const;
	void Point(Windows::Foundation::Point const & value) const;
};

template <typename T>
struct impl_ILineSegmentStatics
{
	Windows::UI::Xaml::DependencyProperty PointProperty() const;
};

template <typename T>
struct impl_IMatrix3DProjection
{
	Windows::UI::Xaml::Media::Media3D::Matrix3D ProjectionMatrix() const;
	void ProjectionMatrix(Windows::UI::Xaml::Media::Media3D::Matrix3D const & value) const;
};

template <typename T>
struct impl_IMatrix3DProjectionStatics
{
	Windows::UI::Xaml::DependencyProperty ProjectionMatrixProperty() const;
};

template <typename T>
struct impl_IMatrixTransform
{
	Windows::UI::Xaml::Media::Matrix Matrix() const;
	void Matrix(Windows::UI::Xaml::Media::Matrix const & value) const;
};

template <typename T>
struct impl_IMatrixTransformStatics
{
	Windows::UI::Xaml::DependencyProperty MatrixProperty() const;
};

template <typename T>
struct impl_IPathFigure
{
	Windows::UI::Xaml::Media::PathSegmentCollection Segments() const;
	void Segments(Windows::UI::Xaml::Media::PathSegmentCollection const & value) const;
	Windows::Foundation::Point StartPoint() const;
	void StartPoint(Windows::Foundation::Point const & value) const;
	bool IsClosed() const;
	void IsClosed(bool value) const;
	bool IsFilled() const;
	void IsFilled(bool value) const;
};

template <typename T>
struct impl_IPathFigureStatics
{
	Windows::UI::Xaml::DependencyProperty SegmentsProperty() const;
	Windows::UI::Xaml::DependencyProperty StartPointProperty() const;
	Windows::UI::Xaml::DependencyProperty IsClosedProperty() const;
	Windows::UI::Xaml::DependencyProperty IsFilledProperty() const;
};

template <typename T>
struct impl_IPathGeometry
{
	Windows::UI::Xaml::Media::FillRule FillRule() const;
	void FillRule(Windows::UI::Xaml::Media::FillRule value) const;
	Windows::UI::Xaml::Media::PathFigureCollection Figures() const;
	void Figures(Windows::UI::Xaml::Media::PathFigureCollection const & value) const;
};

template <typename T>
struct impl_IPathGeometryStatics
{
	Windows::UI::Xaml::DependencyProperty FillRuleProperty() const;
	Windows::UI::Xaml::DependencyProperty FiguresProperty() const;
};

template <typename T>
struct impl_IPathSegment
{
};

template <typename T>
struct impl_IPathSegmentFactory
{
};

template <typename T>
struct impl_IPlaneProjection
{
	double LocalOffsetX() const;
	void LocalOffsetX(double value) const;
	double LocalOffsetY() const;
	void LocalOffsetY(double value) const;
	double LocalOffsetZ() const;
	void LocalOffsetZ(double value) const;
	double RotationX() const;
	void RotationX(double value) const;
	double RotationY() const;
	void RotationY(double value) const;
	double RotationZ() const;
	void RotationZ(double value) const;
	double CenterOfRotationX() const;
	void CenterOfRotationX(double value) const;
	double CenterOfRotationY() const;
	void CenterOfRotationY(double value) const;
	double CenterOfRotationZ() const;
	void CenterOfRotationZ(double value) const;
	double GlobalOffsetX() const;
	void GlobalOffsetX(double value) const;
	double GlobalOffsetY() const;
	void GlobalOffsetY(double value) const;
	double GlobalOffsetZ() const;
	void GlobalOffsetZ(double value) const;
	Windows::UI::Xaml::Media::Media3D::Matrix3D ProjectionMatrix() const;
};

template <typename T>
struct impl_IPlaneProjectionStatics
{
	Windows::UI::Xaml::DependencyProperty LocalOffsetXProperty() const;
	Windows::UI::Xaml::DependencyProperty LocalOffsetYProperty() const;
	Windows::UI::Xaml::DependencyProperty LocalOffsetZProperty() const;
	Windows::UI::Xaml::DependencyProperty RotationXProperty() const;
	Windows::UI::Xaml::DependencyProperty RotationYProperty() const;
	Windows::UI::Xaml::DependencyProperty RotationZProperty() const;
	Windows::UI::Xaml::DependencyProperty CenterOfRotationXProperty() const;
	Windows::UI::Xaml::DependencyProperty CenterOfRotationYProperty() const;
	Windows::UI::Xaml::DependencyProperty CenterOfRotationZProperty() const;
	Windows::UI::Xaml::DependencyProperty GlobalOffsetXProperty() const;
	Windows::UI::Xaml::DependencyProperty GlobalOffsetYProperty() const;
	Windows::UI::Xaml::DependencyProperty GlobalOffsetZProperty() const;
	Windows::UI::Xaml::DependencyProperty ProjectionMatrixProperty() const;
};

template <typename T>
struct impl_IPolyBezierSegment
{
	Windows::UI::Xaml::Media::PointCollection Points() const;
	void Points(Windows::UI::Xaml::Media::PointCollection const & value) const;
};

template <typename T>
struct impl_IPolyBezierSegmentStatics
{
	Windows::UI::Xaml::DependencyProperty PointsProperty() const;
};

template <typename T>
struct impl_IPolyLineSegment
{
	Windows::UI::Xaml::Media::PointCollection Points() const;
	void Points(Windows::UI::Xaml::Media::PointCollection const & value) const;
};

template <typename T>
struct impl_IPolyLineSegmentStatics
{
	Windows::UI::Xaml::DependencyProperty PointsProperty() const;
};

template <typename T>
struct impl_IPolyQuadraticBezierSegment
{
	Windows::UI::Xaml::Media::PointCollection Points() const;
	void Points(Windows::UI::Xaml::Media::PointCollection const & value) const;
};

template <typename T>
struct impl_IPolyQuadraticBezierSegmentStatics
{
	Windows::UI::Xaml::DependencyProperty PointsProperty() const;
};

template <typename T>
struct impl_IProjection
{
};

template <typename T>
struct impl_IProjectionFactory
{
	Windows::UI::Xaml::Media::Projection CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IQuadraticBezierSegment
{
	Windows::Foundation::Point Point1() const;
	void Point1(Windows::Foundation::Point const & value) const;
	Windows::Foundation::Point Point2() const;
	void Point2(Windows::Foundation::Point const & value) const;
};

template <typename T>
struct impl_IQuadraticBezierSegmentStatics
{
	Windows::UI::Xaml::DependencyProperty Point1Property() const;
	Windows::UI::Xaml::DependencyProperty Point2Property() const;
};

template <typename T>
struct impl_IRateChangedRoutedEventArgs
{
};

template <typename T>
struct impl_IRectangleGeometry
{
	Windows::Foundation::Rect Rect() const;
	void Rect(Windows::Foundation::Rect const & value) const;
};

template <typename T>
struct impl_IRectangleGeometryStatics
{
	Windows::UI::Xaml::DependencyProperty RectProperty() const;
};

template <typename T>
struct impl_IRenderingEventArgs
{
	Windows::Foundation::TimeSpan RenderingTime() const;
};

template <typename T>
struct impl_IRotateTransform
{
	double CenterX() const;
	void CenterX(double value) const;
	double CenterY() const;
	void CenterY(double value) const;
	double Angle() const;
	void Angle(double value) const;
};

template <typename T>
struct impl_IRotateTransformStatics
{
	Windows::UI::Xaml::DependencyProperty CenterXProperty() const;
	Windows::UI::Xaml::DependencyProperty CenterYProperty() const;
	Windows::UI::Xaml::DependencyProperty AngleProperty() const;
};

template <typename T>
struct impl_IScaleTransform
{
	double CenterX() const;
	void CenterX(double value) const;
	double CenterY() const;
	void CenterY(double value) const;
	double ScaleX() const;
	void ScaleX(double value) const;
	double ScaleY() const;
	void ScaleY(double value) const;
};

template <typename T>
struct impl_IScaleTransformStatics
{
	Windows::UI::Xaml::DependencyProperty CenterXProperty() const;
	Windows::UI::Xaml::DependencyProperty CenterYProperty() const;
	Windows::UI::Xaml::DependencyProperty ScaleXProperty() const;
	Windows::UI::Xaml::DependencyProperty ScaleYProperty() const;
};

template <typename T>
struct impl_ISkewTransform
{
	double CenterX() const;
	void CenterX(double value) const;
	double CenterY() const;
	void CenterY(double value) const;
	double AngleX() const;
	void AngleX(double value) const;
	double AngleY() const;
	void AngleY(double value) const;
};

template <typename T>
struct impl_ISkewTransformStatics
{
	Windows::UI::Xaml::DependencyProperty CenterXProperty() const;
	Windows::UI::Xaml::DependencyProperty CenterYProperty() const;
	Windows::UI::Xaml::DependencyProperty AngleXProperty() const;
	Windows::UI::Xaml::DependencyProperty AngleYProperty() const;
};

template <typename T>
struct impl_ISolidColorBrush
{
	Windows::UI::Color Color() const;
	void Color(Windows::UI::Color const & value) const;
};

template <typename T>
struct impl_ISolidColorBrushStatics
{
	Windows::UI::Xaml::DependencyProperty ColorProperty() const;
};

template <typename T>
struct impl_ISolidColorBrushFactory
{
	Windows::UI::Xaml::Media::SolidColorBrush CreateInstanceWithColor(Windows::UI::Color const & color) const;
};

template <typename T>
struct impl_ITileBrush
{
	Windows::UI::Xaml::Media::AlignmentX AlignmentX() const;
	void AlignmentX(Windows::UI::Xaml::Media::AlignmentX value) const;
	Windows::UI::Xaml::Media::AlignmentY AlignmentY() const;
	void AlignmentY(Windows::UI::Xaml::Media::AlignmentY value) const;
	Windows::UI::Xaml::Media::Stretch Stretch() const;
	void Stretch(Windows::UI::Xaml::Media::Stretch value) const;
};

template <typename T>
struct impl_ITileBrushStatics
{
	Windows::UI::Xaml::DependencyProperty AlignmentXProperty() const;
	Windows::UI::Xaml::DependencyProperty AlignmentYProperty() const;
	Windows::UI::Xaml::DependencyProperty StretchProperty() const;
};

template <typename T>
struct impl_ITileBrushFactory
{
	Windows::UI::Xaml::Media::TileBrush CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ITimelineMarker
{
	Windows::Foundation::TimeSpan Time() const;
	void Time(Windows::Foundation::TimeSpan const & value) const;
	String Type() const;
	void Type(String const & value) const;
	template <unsigned S0> void Type(wchar_t const (&value)[S0]) const;
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ITimelineMarkerStatics
{
	Windows::UI::Xaml::DependencyProperty TimeProperty() const;
	Windows::UI::Xaml::DependencyProperty TypeProperty() const;
	Windows::UI::Xaml::DependencyProperty TextProperty() const;
};

template <typename T>
struct impl_ITimelineMarkerRoutedEventArgs
{
	Windows::UI::Xaml::Media::TimelineMarker Marker() const;
	void Marker(Windows::UI::Xaml::Media::TimelineMarker const & value) const;
};

template <typename T>
struct impl_ITransform
{
};

template <typename T>
struct impl_ITransformFactory
{
};

template <typename T>
struct impl_ITransformGroup
{
	Windows::UI::Xaml::Media::TransformCollection Children() const;
	void Children(Windows::UI::Xaml::Media::TransformCollection const & value) const;
	Windows::UI::Xaml::Media::Matrix Value() const;
};

template <typename T>
struct impl_ITransformGroupStatics
{
	Windows::UI::Xaml::DependencyProperty ChildrenProperty() const;
};

template <typename T>
struct impl_ITranslateTransform
{
	double X() const;
	void X(double value) const;
	double Y() const;
	void Y(double value) const;
};

template <typename T>
struct impl_ITranslateTransformStatics
{
	Windows::UI::Xaml::DependencyProperty XProperty() const;
	Windows::UI::Xaml::DependencyProperty YProperty() const;
};

template <typename T>
struct impl_IVisualTreeHelper
{
};

template <typename T>
struct impl_IVisualTreeHelperStatics
{
	Windows::Foundation::Collections::IIterable<Windows::UI::Xaml::UIElement> FindElementsInHostCoordinates(Windows::Foundation::Point const & intersectingPoint, Windows::UI::Xaml::UIElement const & subtree) const;
	Windows::Foundation::Collections::IIterable<Windows::UI::Xaml::UIElement> FindElementsInHostCoordinates(Windows::Foundation::Rect const & intersectingRect, Windows::UI::Xaml::UIElement const & subtree) const;
	Windows::Foundation::Collections::IIterable<Windows::UI::Xaml::UIElement> FindElementsInHostCoordinates(Windows::Foundation::Point const & intersectingPoint, Windows::UI::Xaml::UIElement const & subtree, bool includeAllElements) const;
	Windows::Foundation::Collections::IIterable<Windows::UI::Xaml::UIElement> FindElementsInHostCoordinates(Windows::Foundation::Rect const & intersectingRect, Windows::UI::Xaml::UIElement const & subtree, bool includeAllElements) const;
	Windows::UI::Xaml::DependencyObject GetChild(Windows::UI::Xaml::DependencyObject const & reference, int childIndex) const;
	int GetChildrenCount(Windows::UI::Xaml::DependencyObject const & reference) const;
	Windows::UI::Xaml::DependencyObject GetParent(Windows::UI::Xaml::DependencyObject const & reference) const;
	void DisconnectChildrenRecursive(Windows::UI::Xaml::UIElement const & element) const;
};

template <typename T>
struct impl_IVisualTreeHelperStatics2
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Controls::Primitives::Popup> GetOpenPopups(Windows::UI::Xaml::Window const & window) const;
};

template <typename T>
struct impl_ICompositionTarget
{
};

template <typename T>
struct impl_ICompositionTargetStatics
{
	EventRegistrationToken Rendering(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Rendering(F value) const;
	void Rendering(EventRegistrationToken token) const;
	EventRegistrationToken SurfaceContentsLost(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken SurfaceContentsLost(F value) const;
	void SurfaceContentsLost(EventRegistrationToken token) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Animation {

template <typename T>
struct impl_IKeyTimeHelper
{
};

template <typename T>
struct impl_IKeyTimeHelperStatics
{
	Windows::UI::Xaml::Media::Animation::KeyTime FromTimeSpan(Windows::Foundation::TimeSpan const & timeSpan) const;
};

template <typename T>
struct impl_IRepeatBehaviorHelper
{
};

template <typename T>
struct impl_IRepeatBehaviorHelperStatics
{
	Windows::UI::Xaml::Media::Animation::RepeatBehavior Forever() const;
	Windows::UI::Xaml::Media::Animation::RepeatBehavior FromCount(double count) const;
	Windows::UI::Xaml::Media::Animation::RepeatBehavior FromDuration(Windows::Foundation::TimeSpan const & duration) const;
	bool GetHasCount(Windows::UI::Xaml::Media::Animation::RepeatBehavior const & target) const;
	bool GetHasDuration(Windows::UI::Xaml::Media::Animation::RepeatBehavior const & target) const;
	bool Equals(Windows::UI::Xaml::Media::Animation::RepeatBehavior const & target, Windows::UI::Xaml::Media::Animation::RepeatBehavior const & value) const;
};

template <typename T>
struct impl_IAddDeleteThemeTransition
{
};

template <typename T>
struct impl_IBackEase
{
	double Amplitude() const;
	void Amplitude(double value) const;
};

template <typename T>
struct impl_IBackEaseStatics
{
	Windows::UI::Xaml::DependencyProperty AmplitudeProperty() const;
};

template <typename T>
struct impl_IBeginStoryboard
{
	Windows::UI::Xaml::Media::Animation::Storyboard Storyboard() const;
	void Storyboard(Windows::UI::Xaml::Media::Animation::Storyboard const & value) const;
};

template <typename T>
struct impl_IBeginStoryboardStatics
{
	Windows::UI::Xaml::DependencyProperty StoryboardProperty() const;
};

template <typename T>
struct impl_IBounceEase
{
	int Bounces() const;
	void Bounces(int value) const;
	double Bounciness() const;
	void Bounciness(double value) const;
};

template <typename T>
struct impl_IBounceEaseStatics
{
	Windows::UI::Xaml::DependencyProperty BouncesProperty() const;
	Windows::UI::Xaml::DependencyProperty BouncinessProperty() const;
};

template <typename T>
struct impl_ICircleEase
{
};

template <typename T>
struct impl_IColorAnimation
{
	Windows::Foundation::IReference<Modern::Windows::UI::Color> From() const;
	void From(Windows::Foundation::IReference<Modern::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::UI::Color> To() const;
	void To(Windows::Foundation::IReference<Modern::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::UI::Color> By() const;
	void By(Windows::Foundation::IReference<Modern::Windows::UI::Color> const & value) const;
	Windows::UI::Xaml::Media::Animation::EasingFunctionBase EasingFunction() const;
	void EasingFunction(Windows::UI::Xaml::Media::Animation::EasingFunctionBase const & value) const;
	bool EnableDependentAnimation() const;
	void EnableDependentAnimation(bool value) const;
};

template <typename T>
struct impl_IColorAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty FromProperty() const;
	Windows::UI::Xaml::DependencyProperty ToProperty() const;
	Windows::UI::Xaml::DependencyProperty ByProperty() const;
	Windows::UI::Xaml::DependencyProperty EasingFunctionProperty() const;
	Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty() const;
};

template <typename T>
struct impl_IColorAnimationUsingKeyFrames
{
	Windows::UI::Xaml::Media::Animation::ColorKeyFrameCollection KeyFrames() const;
	bool EnableDependentAnimation() const;
	void EnableDependentAnimation(bool value) const;
};

template <typename T>
struct impl_IColorAnimationUsingKeyFramesStatics
{
	Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty() const;
};

template <typename T>
struct impl_IColorKeyFrame
{
	Windows::UI::Color Value() const;
	void Value(Windows::UI::Color const & value) const;
	Windows::UI::Xaml::Media::Animation::KeyTime KeyTime() const;
	void KeyTime(Windows::UI::Xaml::Media::Animation::KeyTime const & value) const;
};

template <typename T>
struct impl_IColorKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty ValueProperty() const;
	Windows::UI::Xaml::DependencyProperty KeyTimeProperty() const;
};

template <typename T>
struct impl_IColorKeyFrameFactory
{
	Windows::UI::Xaml::Media::Animation::ColorKeyFrame CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IContentThemeTransition
{
	double HorizontalOffset() const;
	void HorizontalOffset(double value) const;
	double VerticalOffset() const;
	void VerticalOffset(double value) const;
};

template <typename T>
struct impl_IContentThemeTransitionStatics
{
	Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty() const;
};

template <typename T>
struct impl_ICubicEase
{
};

template <typename T>
struct impl_IDiscreteColorKeyFrame
{
};

template <typename T>
struct impl_IDiscreteDoubleKeyFrame
{
};

template <typename T>
struct impl_IDiscreteObjectKeyFrame
{
};

template <typename T>
struct impl_IDiscretePointKeyFrame
{
};

template <typename T>
struct impl_IDoubleAnimation
{
	Windows::Foundation::IReference<double> From() const;
	void From(Windows::Foundation::IReference<double> const & value) const;
	Windows::Foundation::IReference<double> To() const;
	void To(Windows::Foundation::IReference<double> const & value) const;
	Windows::Foundation::IReference<double> By() const;
	void By(Windows::Foundation::IReference<double> const & value) const;
	Windows::UI::Xaml::Media::Animation::EasingFunctionBase EasingFunction() const;
	void EasingFunction(Windows::UI::Xaml::Media::Animation::EasingFunctionBase const & value) const;
	bool EnableDependentAnimation() const;
	void EnableDependentAnimation(bool value) const;
};

template <typename T>
struct impl_IDoubleAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty FromProperty() const;
	Windows::UI::Xaml::DependencyProperty ToProperty() const;
	Windows::UI::Xaml::DependencyProperty ByProperty() const;
	Windows::UI::Xaml::DependencyProperty EasingFunctionProperty() const;
	Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty() const;
};

template <typename T>
struct impl_IDoubleAnimationUsingKeyFrames
{
	Windows::UI::Xaml::Media::Animation::DoubleKeyFrameCollection KeyFrames() const;
	bool EnableDependentAnimation() const;
	void EnableDependentAnimation(bool value) const;
};

template <typename T>
struct impl_IDoubleAnimationUsingKeyFramesStatics
{
	Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty() const;
};

template <typename T>
struct impl_IDoubleKeyFrame
{
	double Value() const;
	void Value(double value) const;
	Windows::UI::Xaml::Media::Animation::KeyTime KeyTime() const;
	void KeyTime(Windows::UI::Xaml::Media::Animation::KeyTime const & value) const;
};

template <typename T>
struct impl_IDoubleKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty ValueProperty() const;
	Windows::UI::Xaml::DependencyProperty KeyTimeProperty() const;
};

template <typename T>
struct impl_IDoubleKeyFrameFactory
{
	Windows::UI::Xaml::Media::Animation::DoubleKeyFrame CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDragItemThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IDragItemThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
};

template <typename T>
struct impl_IDragOverThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
	double ToOffset() const;
	void ToOffset(double value) const;
	Windows::UI::Xaml::Controls::Primitives::AnimationDirection Direction() const;
	void Direction(Windows::UI::Xaml::Controls::Primitives::AnimationDirection value) const;
};

template <typename T>
struct impl_IDragOverThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty ToOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty DirectionProperty() const;
};

template <typename T>
struct impl_IDropTargetItemThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IDropTargetItemThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
};

template <typename T>
struct impl_IEasingColorKeyFrame
{
	Windows::UI::Xaml::Media::Animation::EasingFunctionBase EasingFunction() const;
	void EasingFunction(Windows::UI::Xaml::Media::Animation::EasingFunctionBase const & value) const;
};

template <typename T>
struct impl_IEasingColorKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty EasingFunctionProperty() const;
};

template <typename T>
struct impl_IEasingDoubleKeyFrame
{
	Windows::UI::Xaml::Media::Animation::EasingFunctionBase EasingFunction() const;
	void EasingFunction(Windows::UI::Xaml::Media::Animation::EasingFunctionBase const & value) const;
};

template <typename T>
struct impl_IEasingDoubleKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty EasingFunctionProperty() const;
};

template <typename T>
struct impl_IEasingFunctionBase
{
	Windows::UI::Xaml::Media::Animation::EasingMode EasingMode() const;
	void EasingMode(Windows::UI::Xaml::Media::Animation::EasingMode value) const;
	double Ease(double normalizedTime) const;
};

template <typename T>
struct impl_IEasingFunctionBaseStatics
{
	Windows::UI::Xaml::DependencyProperty EasingModeProperty() const;
};

template <typename T>
struct impl_IEasingFunctionBaseFactory
{
};

template <typename T>
struct impl_IEasingPointKeyFrame
{
	Windows::UI::Xaml::Media::Animation::EasingFunctionBase EasingFunction() const;
	void EasingFunction(Windows::UI::Xaml::Media::Animation::EasingFunctionBase const & value) const;
};

template <typename T>
struct impl_IEasingPointKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty EasingFunctionProperty() const;
};

template <typename T>
struct impl_IEdgeUIThemeTransition
{
	Windows::UI::Xaml::Controls::Primitives::EdgeTransitionLocation Edge() const;
	void Edge(Windows::UI::Xaml::Controls::Primitives::EdgeTransitionLocation value) const;
};

template <typename T>
struct impl_IEdgeUIThemeTransitionStatics
{
	Windows::UI::Xaml::DependencyProperty EdgeProperty() const;
};

template <typename T>
struct impl_IElasticEase
{
	int Oscillations() const;
	void Oscillations(int value) const;
	double Springiness() const;
	void Springiness(double value) const;
};

template <typename T>
struct impl_IElasticEaseStatics
{
	Windows::UI::Xaml::DependencyProperty OscillationsProperty() const;
	Windows::UI::Xaml::DependencyProperty SpringinessProperty() const;
};

template <typename T>
struct impl_IEntranceThemeTransition
{
	double FromHorizontalOffset() const;
	void FromHorizontalOffset(double value) const;
	double FromVerticalOffset() const;
	void FromVerticalOffset(double value) const;
	bool IsStaggeringEnabled() const;
	void IsStaggeringEnabled(bool value) const;
};

template <typename T>
struct impl_IEntranceThemeTransitionStatics
{
	Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty IsStaggeringEnabledProperty() const;
};

template <typename T>
struct impl_IExponentialEase
{
	double Exponent() const;
	void Exponent(double value) const;
};

template <typename T>
struct impl_IExponentialEaseStatics
{
	Windows::UI::Xaml::DependencyProperty ExponentProperty() const;
};

template <typename T>
struct impl_IFadeInThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IFadeInThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
};

template <typename T>
struct impl_IFadeOutThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IFadeOutThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
};

template <typename T>
struct impl_IKeySpline
{
	Windows::Foundation::Point ControlPoint1() const;
	void ControlPoint1(Windows::Foundation::Point const & value) const;
	Windows::Foundation::Point ControlPoint2() const;
	void ControlPoint2(Windows::Foundation::Point const & value) const;
};

template <typename T>
struct impl_ILinearColorKeyFrame
{
};

template <typename T>
struct impl_ILinearDoubleKeyFrame
{
};

template <typename T>
struct impl_ILinearPointKeyFrame
{
};

template <typename T>
struct impl_INavigationTransitionInfo
{
};

template <typename T>
struct impl_INavigationTransitionInfoOverrides
{
	String GetNavigationStateCore() const;
	void SetNavigationStateCore(String const & navigationState) const;
	template <unsigned S0> void SetNavigationStateCore(wchar_t const (&navigationState)[S0]) const;
};

template <typename T>
struct impl_INavigationTransitionInfoFactory
{
	Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IObjectAnimationUsingKeyFrames
{
	Windows::UI::Xaml::Media::Animation::ObjectKeyFrameCollection KeyFrames() const;
	bool EnableDependentAnimation() const;
	void EnableDependentAnimation(bool value) const;
};

template <typename T>
struct impl_IObjectAnimationUsingKeyFramesStatics
{
	Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty() const;
};

template <typename T>
struct impl_IObjectKeyFrame
{
	IInspectable Value() const;
	void Value(IInspectable const & value) const;
	Windows::UI::Xaml::Media::Animation::KeyTime KeyTime() const;
	void KeyTime(Windows::UI::Xaml::Media::Animation::KeyTime const & value) const;
};

template <typename T>
struct impl_IObjectKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty ValueProperty() const;
	Windows::UI::Xaml::DependencyProperty KeyTimeProperty() const;
};

template <typename T>
struct impl_IObjectKeyFrameFactory
{
	Windows::UI::Xaml::Media::Animation::ObjectKeyFrame CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IPaneThemeTransition
{
	Windows::UI::Xaml::Controls::Primitives::EdgeTransitionLocation Edge() const;
	void Edge(Windows::UI::Xaml::Controls::Primitives::EdgeTransitionLocation value) const;
};

template <typename T>
struct impl_IPaneThemeTransitionStatics
{
	Windows::UI::Xaml::DependencyProperty EdgeProperty() const;
};

template <typename T>
struct impl_IPointAnimation
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::Point> From() const;
	void From(Windows::Foundation::IReference<Modern::Windows::Foundation::Point> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::Point> To() const;
	void To(Windows::Foundation::IReference<Modern::Windows::Foundation::Point> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::Point> By() const;
	void By(Windows::Foundation::IReference<Modern::Windows::Foundation::Point> const & value) const;
	Windows::UI::Xaml::Media::Animation::EasingFunctionBase EasingFunction() const;
	void EasingFunction(Windows::UI::Xaml::Media::Animation::EasingFunctionBase const & value) const;
	bool EnableDependentAnimation() const;
	void EnableDependentAnimation(bool value) const;
};

template <typename T>
struct impl_IPointAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty FromProperty() const;
	Windows::UI::Xaml::DependencyProperty ToProperty() const;
	Windows::UI::Xaml::DependencyProperty ByProperty() const;
	Windows::UI::Xaml::DependencyProperty EasingFunctionProperty() const;
	Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty() const;
};

template <typename T>
struct impl_IPointAnimationUsingKeyFrames
{
	Windows::UI::Xaml::Media::Animation::PointKeyFrameCollection KeyFrames() const;
	bool EnableDependentAnimation() const;
	void EnableDependentAnimation(bool value) const;
};

template <typename T>
struct impl_IPointAnimationUsingKeyFramesStatics
{
	Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty() const;
};

template <typename T>
struct impl_IPointerDownThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IPointerDownThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
};

template <typename T>
struct impl_IPointerUpThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IPointerUpThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
};

template <typename T>
struct impl_IPointKeyFrame
{
	Windows::Foundation::Point Value() const;
	void Value(Windows::Foundation::Point const & value) const;
	Windows::UI::Xaml::Media::Animation::KeyTime KeyTime() const;
	void KeyTime(Windows::UI::Xaml::Media::Animation::KeyTime const & value) const;
};

template <typename T>
struct impl_IPointKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty ValueProperty() const;
	Windows::UI::Xaml::DependencyProperty KeyTimeProperty() const;
};

template <typename T>
struct impl_IPointKeyFrameFactory
{
	Windows::UI::Xaml::Media::Animation::PointKeyFrame CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IPopInThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
	double FromHorizontalOffset() const;
	void FromHorizontalOffset(double value) const;
	double FromVerticalOffset() const;
	void FromVerticalOffset(double value) const;
};

template <typename T>
struct impl_IPopInThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty() const;
};

template <typename T>
struct impl_IPopOutThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IPopOutThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
};

template <typename T>
struct impl_IPopupThemeTransition
{
	double FromHorizontalOffset() const;
	void FromHorizontalOffset(double value) const;
	double FromVerticalOffset() const;
	void FromVerticalOffset(double value) const;
};

template <typename T>
struct impl_IPopupThemeTransitionStatics
{
	Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty() const;
};

template <typename T>
struct impl_IPowerEase
{
	double Power() const;
	void Power(double value) const;
};

template <typename T>
struct impl_IPowerEaseStatics
{
	Windows::UI::Xaml::DependencyProperty PowerProperty() const;
};

template <typename T>
struct impl_IQuadraticEase
{
};

template <typename T>
struct impl_IQuarticEase
{
};

template <typename T>
struct impl_IQuinticEase
{
};

template <typename T>
struct impl_IReorderThemeTransition
{
};

template <typename T>
struct impl_IRepositionThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
	double FromHorizontalOffset() const;
	void FromHorizontalOffset(double value) const;
	double FromVerticalOffset() const;
	void FromVerticalOffset(double value) const;
};

template <typename T>
struct impl_IRepositionThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty() const;
};

template <typename T>
struct impl_IRepositionThemeTransition
{
};

template <typename T>
struct impl_ISineEase
{
};

template <typename T>
struct impl_ISplineColorKeyFrame
{
	Windows::UI::Xaml::Media::Animation::KeySpline KeySpline() const;
	void KeySpline(Windows::UI::Xaml::Media::Animation::KeySpline const & value) const;
};

template <typename T>
struct impl_ISplineColorKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty KeySplineProperty() const;
};

template <typename T>
struct impl_ISplineDoubleKeyFrame
{
	Windows::UI::Xaml::Media::Animation::KeySpline KeySpline() const;
	void KeySpline(Windows::UI::Xaml::Media::Animation::KeySpline const & value) const;
};

template <typename T>
struct impl_ISplineDoubleKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty KeySplineProperty() const;
};

template <typename T>
struct impl_ISplinePointKeyFrame
{
	Windows::UI::Xaml::Media::Animation::KeySpline KeySpline() const;
	void KeySpline(Windows::UI::Xaml::Media::Animation::KeySpline const & value) const;
};

template <typename T>
struct impl_ISplinePointKeyFrameStatics
{
	Windows::UI::Xaml::DependencyProperty KeySplineProperty() const;
};

template <typename T>
struct impl_ISplitCloseThemeAnimation
{
	String OpenedTargetName() const;
	void OpenedTargetName(String const & value) const;
	template <unsigned S0> void OpenedTargetName(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyObject OpenedTarget() const;
	void OpenedTarget(Windows::UI::Xaml::DependencyObject const & value) const;
	String ClosedTargetName() const;
	void ClosedTargetName(String const & value) const;
	template <unsigned S0> void ClosedTargetName(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyObject ClosedTarget() const;
	void ClosedTarget(Windows::UI::Xaml::DependencyObject const & value) const;
	String ContentTargetName() const;
	void ContentTargetName(String const & value) const;
	template <unsigned S0> void ContentTargetName(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyObject ContentTarget() const;
	void ContentTarget(Windows::UI::Xaml::DependencyObject const & value) const;
	double OpenedLength() const;
	void OpenedLength(double value) const;
	double ClosedLength() const;
	void ClosedLength(double value) const;
	double OffsetFromCenter() const;
	void OffsetFromCenter(double value) const;
	Windows::UI::Xaml::Controls::Primitives::AnimationDirection ContentTranslationDirection() const;
	void ContentTranslationDirection(Windows::UI::Xaml::Controls::Primitives::AnimationDirection value) const;
	double ContentTranslationOffset() const;
	void ContentTranslationOffset(double value) const;
};

template <typename T>
struct impl_ISplitCloseThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty OpenedTargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty OpenedTargetProperty() const;
	Windows::UI::Xaml::DependencyProperty ClosedTargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty ClosedTargetProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTargetProperty() const;
	Windows::UI::Xaml::DependencyProperty OpenedLengthProperty() const;
	Windows::UI::Xaml::DependencyProperty ClosedLengthProperty() const;
	Windows::UI::Xaml::DependencyProperty OffsetFromCenterProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTranslationDirectionProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTranslationOffsetProperty() const;
};

template <typename T>
struct impl_ISplitOpenThemeAnimation
{
	String OpenedTargetName() const;
	void OpenedTargetName(String const & value) const;
	template <unsigned S0> void OpenedTargetName(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyObject OpenedTarget() const;
	void OpenedTarget(Windows::UI::Xaml::DependencyObject const & value) const;
	String ClosedTargetName() const;
	void ClosedTargetName(String const & value) const;
	template <unsigned S0> void ClosedTargetName(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyObject ClosedTarget() const;
	void ClosedTarget(Windows::UI::Xaml::DependencyObject const & value) const;
	String ContentTargetName() const;
	void ContentTargetName(String const & value) const;
	template <unsigned S0> void ContentTargetName(wchar_t const (&value)[S0]) const;
	Windows::UI::Xaml::DependencyObject ContentTarget() const;
	void ContentTarget(Windows::UI::Xaml::DependencyObject const & value) const;
	double OpenedLength() const;
	void OpenedLength(double value) const;
	double ClosedLength() const;
	void ClosedLength(double value) const;
	double OffsetFromCenter() const;
	void OffsetFromCenter(double value) const;
	Windows::UI::Xaml::Controls::Primitives::AnimationDirection ContentTranslationDirection() const;
	void ContentTranslationDirection(Windows::UI::Xaml::Controls::Primitives::AnimationDirection value) const;
	double ContentTranslationOffset() const;
	void ContentTranslationOffset(double value) const;
};

template <typename T>
struct impl_ISplitOpenThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty OpenedTargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty OpenedTargetProperty() const;
	Windows::UI::Xaml::DependencyProperty ClosedTargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty ClosedTargetProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTargetProperty() const;
	Windows::UI::Xaml::DependencyProperty OpenedLengthProperty() const;
	Windows::UI::Xaml::DependencyProperty ClosedLengthProperty() const;
	Windows::UI::Xaml::DependencyProperty OffsetFromCenterProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTranslationDirectionProperty() const;
	Windows::UI::Xaml::DependencyProperty ContentTranslationOffsetProperty() const;
};

template <typename T>
struct impl_IStoryboard
{
	Windows::UI::Xaml::Media::Animation::TimelineCollection Children() const;
	void Seek(Windows::Foundation::TimeSpan const & offset) const;
	void Stop() const;
	void Begin() const;
	void Pause() const;
	void Resume() const;
	Windows::UI::Xaml::Media::Animation::ClockState GetCurrentState() const;
	Windows::Foundation::TimeSpan GetCurrentTime() const;
	void SeekAlignedToLastTick(Windows::Foundation::TimeSpan const & offset) const;
	void SkipToFill() const;
};

template <typename T>
struct impl_IStoryboardStatics
{
	Windows::UI::Xaml::DependencyProperty TargetPropertyProperty() const;
	String GetTargetProperty(Windows::UI::Xaml::Media::Animation::Timeline const & element) const;
	void SetTargetProperty(Windows::UI::Xaml::Media::Animation::Timeline const & element, String const & path) const;
	template <unsigned S0> void SetTargetProperty(Windows::UI::Xaml::Media::Animation::Timeline const & element, wchar_t const (&path)[S0]) const;
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
	String GetTargetName(Windows::UI::Xaml::Media::Animation::Timeline const & element) const;
	void SetTargetName(Windows::UI::Xaml::Media::Animation::Timeline const & element, String const & name) const;
	template <unsigned S0> void SetTargetName(Windows::UI::Xaml::Media::Animation::Timeline const & element, wchar_t const (&name)[S0]) const;
	void SetTarget(Windows::UI::Xaml::Media::Animation::Timeline const & timeline, Windows::UI::Xaml::DependencyObject const & target) const;
};

template <typename T>
struct impl_ISwipeBackThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
	double FromHorizontalOffset() const;
	void FromHorizontalOffset(double value) const;
	double FromVerticalOffset() const;
	void FromVerticalOffset(double value) const;
};

template <typename T>
struct impl_ISwipeBackThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty() const;
};

template <typename T>
struct impl_ISwipeHintThemeAnimation
{
	String TargetName() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
	double ToHorizontalOffset() const;
	void ToHorizontalOffset(double value) const;
	double ToVerticalOffset() const;
	void ToVerticalOffset(double value) const;
};

template <typename T>
struct impl_ISwipeHintThemeAnimationStatics
{
	Windows::UI::Xaml::DependencyProperty TargetNameProperty() const;
	Windows::UI::Xaml::DependencyProperty ToHorizontalOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty ToVerticalOffsetProperty() const;
};

template <typename T>
struct impl_ITimeline
{
	bool AutoReverse() const;
	void AutoReverse(bool value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> BeginTime() const;
	void BeginTime(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::UI::Xaml::Duration Duration() const;
	void Duration(Windows::UI::Xaml::Duration const & value) const;
	double SpeedRatio() const;
	void SpeedRatio(double value) const;
	Windows::UI::Xaml::Media::Animation::FillBehavior FillBehavior() const;
	void FillBehavior(Windows::UI::Xaml::Media::Animation::FillBehavior value) const;
	Windows::UI::Xaml::Media::Animation::RepeatBehavior RepeatBehavior() const;
	void RepeatBehavior(Windows::UI::Xaml::Media::Animation::RepeatBehavior const & value) const;
	EventRegistrationToken Completed(Windows::Foundation::IEventHandler<IInspectable> const & value) const;
	template <typename F> EventRegistrationToken Completed(F value) const;
	void Completed(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ITimelineStatics
{
	bool AllowDependentAnimations() const;
	void AllowDependentAnimations(bool value) const;
	Windows::UI::Xaml::DependencyProperty AutoReverseProperty() const;
	Windows::UI::Xaml::DependencyProperty BeginTimeProperty() const;
	Windows::UI::Xaml::DependencyProperty DurationProperty() const;
	Windows::UI::Xaml::DependencyProperty SpeedRatioProperty() const;
	Windows::UI::Xaml::DependencyProperty FillBehaviorProperty() const;
	Windows::UI::Xaml::DependencyProperty RepeatBehaviorProperty() const;
};

template <typename T>
struct impl_ITimelineFactory
{
	Windows::UI::Xaml::Media::Animation::Timeline CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_ITransition
{
};

template <typename T>
struct impl_ITransitionFactory
{
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Imaging {

template <typename T>
struct impl_IDownloadProgressEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Media::Imaging::DownloadProgressEventArgs const & e) const;
};

template <typename T>
struct impl_IBitmapImage
{
	Windows::UI::Xaml::Media::Imaging::BitmapCreateOptions CreateOptions() const;
	void CreateOptions(Windows::UI::Xaml::Media::Imaging::BitmapCreateOptions value) const;
	Windows::Foundation::Uri UriSource() const;
	void UriSource(Windows::Foundation::Uri const & value) const;
	int DecodePixelWidth() const;
	void DecodePixelWidth(int value) const;
	int DecodePixelHeight() const;
	void DecodePixelHeight(int value) const;
	EventRegistrationToken DownloadProgress(Windows::UI::Xaml::Media::Imaging::IDownloadProgressEventHandler const & value) const;
	template <typename F> EventRegistrationToken DownloadProgress(F value) const;
	void DownloadProgress(EventRegistrationToken token) const;
	EventRegistrationToken ImageOpened(Windows::UI::Xaml::IRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ImageOpened(F value) const;
	void ImageOpened(EventRegistrationToken token) const;
	EventRegistrationToken ImageFailed(Windows::UI::Xaml::IExceptionRoutedEventHandler const & value) const;
	template <typename F> EventRegistrationToken ImageFailed(F value) const;
	void ImageFailed(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IBitmapImageStatics
{
	Windows::UI::Xaml::DependencyProperty CreateOptionsProperty() const;
	Windows::UI::Xaml::DependencyProperty UriSourceProperty() const;
	Windows::UI::Xaml::DependencyProperty DecodePixelWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty DecodePixelHeightProperty() const;
};

template <typename T>
struct impl_IBitmapImageFactory
{
	Windows::UI::Xaml::Media::Imaging::BitmapImage CreateInstanceWithUriSource(Windows::Foundation::Uri const & uriSource) const;
};

template <typename T>
struct impl_IBitmapImage2
{
	Windows::UI::Xaml::Media::Imaging::DecodePixelType DecodePixelType() const;
	void DecodePixelType(Windows::UI::Xaml::Media::Imaging::DecodePixelType value) const;
};

template <typename T>
struct impl_IBitmapImageStatics2
{
	Windows::UI::Xaml::DependencyProperty DecodePixelTypeProperty() const;
};

template <typename T>
struct impl_IBitmapSource
{
	int PixelWidth() const;
	int PixelHeight() const;
	void SetSource(Windows::Storage::Streams::IRandomAccessStream const & streamSource) const;
	Windows::Foundation::IAsyncAction SetSourceAsync(Windows::Storage::Streams::IRandomAccessStream const & streamSource) const;
};

template <typename T>
struct impl_IBitmapSourceStatics
{
	Windows::UI::Xaml::DependencyProperty PixelWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty PixelHeightProperty() const;
};

template <typename T>
struct impl_IBitmapSourceFactory
{
	Windows::UI::Xaml::Media::Imaging::BitmapSource CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IDownloadProgressEventArgs
{
	int Progress() const;
	void Progress(int value) const;
};

template <typename T>
struct impl_IRenderTargetBitmap
{
	int PixelWidth() const;
	int PixelHeight() const;
	Windows::Foundation::IAsyncAction RenderAsync(Windows::UI::Xaml::UIElement const & element) const;
	Windows::Foundation::IAsyncAction RenderAsync(Windows::UI::Xaml::UIElement const & element, int scaledWidth, int scaledHeight) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GetPixelsAsync() const;
};

template <typename T>
struct impl_IRenderTargetBitmapStatics
{
	Windows::UI::Xaml::DependencyProperty PixelWidthProperty() const;
	Windows::UI::Xaml::DependencyProperty PixelHeightProperty() const;
};

template <typename T>
struct impl_ISurfaceImageSource
{
};

template <typename T>
struct impl_ISurfaceImageSourceFactory
{
	Windows::UI::Xaml::Media::Imaging::SurfaceImageSource CreateInstanceWithDimensions(int pixelWidth, int pixelHeight, IInspectable const & outer, IInspectable & inner) const;
	Windows::UI::Xaml::Media::Imaging::SurfaceImageSource CreateInstanceWithDimensionsAndOpacity(int pixelWidth, int pixelHeight, bool isOpaque, IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IVirtualSurfaceImageSource
{
};

template <typename T>
struct impl_IVirtualSurfaceImageSourceFactory
{
	Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource CreateInstanceWithDimensions(int pixelWidth, int pixelHeight) const;
	Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource CreateInstanceWithDimensionsAndOpacity(int pixelWidth, int pixelHeight, bool isOpaque) const;
};

template <typename T>
struct impl_IWriteableBitmap
{
	Windows::Storage::Streams::IBuffer PixelBuffer() const;
	void Invalidate() const;
};

template <typename T>
struct impl_IWriteableBitmapFactory
{
	Windows::UI::Xaml::Media::Imaging::WriteableBitmap CreateInstanceWithDimensions(int pixelWidth, int pixelHeight) const;
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Media3D {

template <typename T>
struct impl_IMatrix3DHelper
{
};

template <typename T>
struct impl_IMatrix3DHelperStatics
{
	Windows::UI::Xaml::Media::Media3D::Matrix3D Identity() const;
	Windows::UI::Xaml::Media::Media3D::Matrix3D Multiply(Windows::UI::Xaml::Media::Media3D::Matrix3D const & matrix1, Windows::UI::Xaml::Media::Media3D::Matrix3D const & matrix2) const;
	Windows::UI::Xaml::Media::Media3D::Matrix3D FromElements(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double offsetX, double offsetY, double offsetZ, double m44) const;
	bool GetHasInverse(Windows::UI::Xaml::Media::Media3D::Matrix3D const & target) const;
	bool GetIsIdentity(Windows::UI::Xaml::Media::Media3D::Matrix3D const & target) const;
	Windows::UI::Xaml::Media::Media3D::Matrix3D Invert(Windows::UI::Xaml::Media::Media3D::Matrix3D const & target) const;
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Navigation {

template <typename T>
struct impl_ILoadCompletedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Navigation::NavigationEventArgs const & e) const;
};

template <typename T>
struct impl_INavigatedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Navigation::NavigationEventArgs const & e) const;
};

template <typename T>
struct impl_INavigatingCancelEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs const & e) const;
};

template <typename T>
struct impl_INavigationFailedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Navigation::NavigationFailedEventArgs const & e) const;
};

template <typename T>
struct impl_INavigationStoppedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Navigation::NavigationEventArgs const & e) const;
};

template <typename T>
struct impl_INavigatingCancelEventArgs
{
	bool Cancel() const;
	void Cancel(bool value) const;
	Windows::UI::Xaml::Navigation::NavigationMode NavigationMode() const;
	Windows::UI::Xaml::Interop::TypeName SourcePageType() const;
};

template <typename T>
struct impl_INavigatingCancelEventArgs2
{
	IInspectable Parameter() const;
	Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo NavigationTransitionInfo() const;
};

template <typename T>
struct impl_INavigationEventArgs
{
	IInspectable Content() const;
	IInspectable Parameter() const;
	Windows::UI::Xaml::Interop::TypeName SourcePageType() const;
	Windows::UI::Xaml::Navigation::NavigationMode NavigationMode() const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_INavigationEventArgs2
{
	Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo NavigationTransitionInfo() const;
};

template <typename T>
struct impl_INavigationFailedEventArgs
{
	HRESULT Exception() const;
	bool Handled() const;
	void Handled(bool value) const;
	Windows::UI::Xaml::Interop::TypeName SourcePageType() const;
};

template <typename T>
struct impl_IPageStackEntry
{
	Windows::UI::Xaml::Interop::TypeName SourcePageType() const;
	IInspectable Parameter() const;
	Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo NavigationTransitionInfo() const;
};

template <typename T>
struct impl_IPageStackEntryStatics
{
	Windows::UI::Xaml::DependencyProperty SourcePageTypeProperty() const;
};

template <typename T>
struct impl_IPageStackEntryFactory
{
	Windows::UI::Xaml::Navigation::PageStackEntry CreateInstance(Windows::UI::Xaml::Interop::TypeName const & sourcePageType, IInspectable const & parameter, Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo const & navigationTransitionInfo) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Printing {

template <typename T>
struct impl_IAddPagesEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Printing::AddPagesEventArgs const & e) const;
};

template <typename T>
struct impl_IGetPreviewPageEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Printing::GetPreviewPageEventArgs const & e) const;
};

template <typename T>
struct impl_IPaginateEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::Xaml::Printing::PaginateEventArgs const & e) const;
};

template <typename T>
struct impl_IAddPagesEventArgs
{
	Windows::Graphics::Printing::PrintTaskOptions PrintTaskOptions() const;
};

template <typename T>
struct impl_IGetPreviewPageEventArgs
{
	int PageNumber() const;
};

template <typename T>
struct impl_IPaginateEventArgs
{
	Windows::Graphics::Printing::PrintTaskOptions PrintTaskOptions() const;
	int CurrentPreviewPageNumber() const;
};

template <typename T>
struct impl_IPrintDocument
{
	Windows::Graphics::Printing::IPrintDocumentSource DocumentSource() const;
	EventRegistrationToken Paginate(Windows::UI::Xaml::Printing::IPaginateEventHandler const & value) const;
	template <typename F> EventRegistrationToken Paginate(F value) const;
	void Paginate(EventRegistrationToken token) const;
	EventRegistrationToken GetPreviewPage(Windows::UI::Xaml::Printing::IGetPreviewPageEventHandler const & value) const;
	template <typename F> EventRegistrationToken GetPreviewPage(F value) const;
	void GetPreviewPage(EventRegistrationToken token) const;
	EventRegistrationToken AddPages(Windows::UI::Xaml::Printing::IAddPagesEventHandler const & value) const;
	template <typename F> EventRegistrationToken AddPages(F value) const;
	void AddPages(EventRegistrationToken token) const;
	void AddPage(Windows::UI::Xaml::UIElement const & pageVisual) const;
	void AddPagesComplete() const;
	void SetPreviewPageCount(int count, Windows::UI::Xaml::Printing::PreviewPageCountType type) const;
	void SetPreviewPage(int pageNumber, Windows::UI::Xaml::UIElement const & pageVisual) const;
	void InvalidatePreview() const;
};

template <typename T>
struct impl_IPrintDocumentStatics
{
	Windows::UI::Xaml::DependencyProperty DocumentSourceProperty() const;
};

template <typename T>
struct impl_IPrintDocumentFactory
{
	Windows::UI::Xaml::Printing::PrintDocument CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Resources {

template <typename T>
struct impl_ICustomXamlResourceLoader
{
};

template <typename T>
struct impl_ICustomXamlResourceLoaderOverrides
{
	IInspectable GetResource(String const & resourceId, String const & objectType, String const & propertyName, String const & propertyType) const;
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> IInspectable GetResource(wchar_t const (&resourceId)[S0], wchar_t const (&objectType)[S1], wchar_t const (&propertyName)[S2], wchar_t const (&propertyType)[S3]) const;
};

template <typename T>
struct impl_ICustomXamlResourceLoaderStatics
{
	Windows::UI::Xaml::Resources::CustomXamlResourceLoader Current() const;
	void Current(Windows::UI::Xaml::Resources::CustomXamlResourceLoader const & value) const;
};

template <typename T>
struct impl_ICustomXamlResourceLoaderFactory
{
	Windows::UI::Xaml::Resources::CustomXamlResourceLoader CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Shapes {

template <typename T>
struct impl_IEllipse
{
};

template <typename T>
struct impl_ILine
{
	double X1() const;
	void X1(double value) const;
	double Y1() const;
	void Y1(double value) const;
	double X2() const;
	void X2(double value) const;
	double Y2() const;
	void Y2(double value) const;
};

template <typename T>
struct impl_ILineStatics
{
	Windows::UI::Xaml::DependencyProperty X1Property() const;
	Windows::UI::Xaml::DependencyProperty Y1Property() const;
	Windows::UI::Xaml::DependencyProperty X2Property() const;
	Windows::UI::Xaml::DependencyProperty Y2Property() const;
};

template <typename T>
struct impl_IPath
{
	Windows::UI::Xaml::Media::Geometry Data() const;
	void Data(Windows::UI::Xaml::Media::Geometry const & value) const;
};

template <typename T>
struct impl_IPathStatics
{
	Windows::UI::Xaml::DependencyProperty DataProperty() const;
};

template <typename T>
struct impl_IPathFactory
{
	Windows::UI::Xaml::Shapes::Path CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

template <typename T>
struct impl_IPolygon
{
	Windows::UI::Xaml::Media::FillRule FillRule() const;
	void FillRule(Windows::UI::Xaml::Media::FillRule value) const;
	Windows::UI::Xaml::Media::PointCollection Points() const;
	void Points(Windows::UI::Xaml::Media::PointCollection const & value) const;
};

template <typename T>
struct impl_IPolygonStatics
{
	Windows::UI::Xaml::DependencyProperty FillRuleProperty() const;
	Windows::UI::Xaml::DependencyProperty PointsProperty() const;
};

template <typename T>
struct impl_IPolyline
{
	Windows::UI::Xaml::Media::FillRule FillRule() const;
	void FillRule(Windows::UI::Xaml::Media::FillRule value) const;
	Windows::UI::Xaml::Media::PointCollection Points() const;
	void Points(Windows::UI::Xaml::Media::PointCollection const & value) const;
};

template <typename T>
struct impl_IPolylineStatics
{
	Windows::UI::Xaml::DependencyProperty FillRuleProperty() const;
	Windows::UI::Xaml::DependencyProperty PointsProperty() const;
};

template <typename T>
struct impl_IRectangle
{
	double RadiusX() const;
	void RadiusX(double value) const;
	double RadiusY() const;
	void RadiusY(double value) const;
};

template <typename T>
struct impl_IRectangleStatics
{
	Windows::UI::Xaml::DependencyProperty RadiusXProperty() const;
	Windows::UI::Xaml::DependencyProperty RadiusYProperty() const;
};

template <typename T>
struct impl_IShape
{
	Windows::UI::Xaml::Media::Brush Fill() const;
	void Fill(Windows::UI::Xaml::Media::Brush const & value) const;
	Windows::UI::Xaml::Media::Brush Stroke() const;
	void Stroke(Windows::UI::Xaml::Media::Brush const & value) const;
	double StrokeMiterLimit() const;
	void StrokeMiterLimit(double value) const;
	double StrokeThickness() const;
	void StrokeThickness(double value) const;
	Windows::UI::Xaml::Media::PenLineCap StrokeStartLineCap() const;
	void StrokeStartLineCap(Windows::UI::Xaml::Media::PenLineCap value) const;
	Windows::UI::Xaml::Media::PenLineCap StrokeEndLineCap() const;
	void StrokeEndLineCap(Windows::UI::Xaml::Media::PenLineCap value) const;
	Windows::UI::Xaml::Media::PenLineJoin StrokeLineJoin() const;
	void StrokeLineJoin(Windows::UI::Xaml::Media::PenLineJoin value) const;
	double StrokeDashOffset() const;
	void StrokeDashOffset(double value) const;
	Windows::UI::Xaml::Media::PenLineCap StrokeDashCap() const;
	void StrokeDashCap(Windows::UI::Xaml::Media::PenLineCap value) const;
	Windows::UI::Xaml::Media::DoubleCollection StrokeDashArray() const;
	void StrokeDashArray(Windows::UI::Xaml::Media::DoubleCollection const & value) const;
	Windows::UI::Xaml::Media::Stretch Stretch() const;
	void Stretch(Windows::UI::Xaml::Media::Stretch value) const;
	Windows::UI::Xaml::Media::Transform GeometryTransform() const;
};

template <typename T>
struct impl_IShapeStatics
{
	Windows::UI::Xaml::DependencyProperty FillProperty() const;
	Windows::UI::Xaml::DependencyProperty StrokeProperty() const;
	Windows::UI::Xaml::DependencyProperty StrokeMiterLimitProperty() const;
	Windows::UI::Xaml::DependencyProperty StrokeThicknessProperty() const;
	Windows::UI::Xaml::DependencyProperty StrokeStartLineCapProperty() const;
	Windows::UI::Xaml::DependencyProperty StrokeEndLineCapProperty() const;
	Windows::UI::Xaml::DependencyProperty StrokeLineJoinProperty() const;
	Windows::UI::Xaml::DependencyProperty StrokeDashOffsetProperty() const;
	Windows::UI::Xaml::DependencyProperty StrokeDashCapProperty() const;
	Windows::UI::Xaml::DependencyProperty StrokeDashArrayProperty() const;
	Windows::UI::Xaml::DependencyProperty StretchProperty() const;
};

template <typename T>
struct impl_IShapeFactory
{
	Windows::UI::Xaml::Shapes::Shape CreateInstance(IInspectable const & outer, IInspectable & inner) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Web {

template <typename T>
struct impl_IUriToStreamResolver
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> UriToStreamAsync(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_IWebErrorStatics
{
	Windows::Web::WebErrorStatus GetStatus(int hresult) const;
};

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

template <typename T>
struct impl_IResourceCollection
{
	Windows::Web::Syndication::ISyndicationText Title() const;
	Windows::Foundation::Uri Uri() const;
	Windows::Foundation::Collections::IVectorView<Windows::Web::Syndication::SyndicationCategory> Categories() const;
	Windows::Foundation::Collections::IVectorView<String> Accepts() const;
};

template <typename T>
struct impl_IWorkspace
{
	Windows::Web::Syndication::ISyndicationText Title() const;
	Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::ResourceCollection> Collections() const;
};

template <typename T>
struct impl_IServiceDocument
{
	Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::Workspace> Workspaces() const;
};

template <typename T>
struct impl_IAtomPubClient
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::AtomPub::ServiceDocument, Modern::Windows::Web::Syndication::RetrievalProgress> RetrieveServiceDocumentAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, Modern::Windows::Web::Syndication::RetrievalProgress> RetrieveMediaResourceAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::RetrievalProgress> RetrieveResourceAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> CreateResourceAsync(Windows::Foundation::Uri const & uri, String const & description, Windows::Web::Syndication::SyndicationItem const & item) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> CreateResourceAsync(Windows::Foundation::Uri const & uri, wchar_t const (&description)[S0], Windows::Web::Syndication::SyndicationItem const & item) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> CreateMediaResourceAsync(Windows::Foundation::Uri const & uri, String const & mediaType, String const & description, Windows::Storage::Streams::IInputStream const & mediaStream) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> CreateMediaResourceAsync(Windows::Foundation::Uri const & uri, wchar_t const (&mediaType)[S0], wchar_t const (&description)[S1], Windows::Storage::Streams::IInputStream const & mediaStream) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> UpdateMediaResourceAsync(Windows::Foundation::Uri const & uri, String const & mediaType, Windows::Storage::Streams::IInputStream const & mediaStream) const;
	template <unsigned S0> Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> UpdateMediaResourceAsync(Windows::Foundation::Uri const & uri, wchar_t const (&mediaType)[S0], Windows::Storage::Streams::IInputStream const & mediaStream) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> UpdateResourceAsync(Windows::Foundation::Uri const & uri, Windows::Web::Syndication::SyndicationItem const & item) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> UpdateResourceItemAsync(Windows::Web::Syndication::SyndicationItem const & item) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> DeleteResourceAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> DeleteResourceItemAsync(Windows::Web::Syndication::SyndicationItem const & item) const;
	void CancelAsyncOperations() const;
};

template <typename T>
struct impl_IAtomPubClientFactory
{
	Windows::Web::AtomPub::AtomPubClient CreateAtomPubClientWithCredentials(Windows::Security::Credentials::PasswordCredential const & serverCredential) const;
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

template <typename T>
struct impl_IHttpClientFactory
{
	Windows::Web::Http::HttpClient Create(Windows::Web::Http::Filters::IHttpFilter const & filter) const;
};

template <typename T>
struct impl_IHttpClient
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> DeleteAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> GetAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> GetAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::HttpCompletionOption completionOption) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, Modern::Windows::Web::Http::HttpProgress> GetBufferAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, Modern::Windows::Web::Http::HttpProgress> GetInputStreamAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<String, Modern::Windows::Web::Http::HttpProgress> GetStringAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> PostAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> PutAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request, Windows::Web::Http::HttpCompletionOption completionOption) const;
	Windows::Web::Http::Headers::HttpRequestHeaderCollection DefaultRequestHeaders() const;
};

template <typename T>
struct impl_IHttpContent
{
	Windows::Web::Http::Headers::HttpContentHeaderCollection Headers() const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> BufferAllAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned long long> ReadAsBufferAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, unsigned long long> ReadAsInputStreamAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<String, unsigned long long> ReadAsStringAsync() const;
	bool TryComputeLength(unsigned long long & length) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> WriteToStreamAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const;
};

template <typename T>
struct impl_IHttpCookieManager
{
	bool SetCookie(Windows::Web::Http::HttpCookie const & cookie) const;
	bool SetCookie(Windows::Web::Http::HttpCookie const & cookie, bool thirdParty) const;
	void DeleteCookie(Windows::Web::Http::HttpCookie const & cookie) const;
	Windows::Web::Http::HttpCookieCollection GetCookies(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_IHttpCookieFactory
{
	Windows::Web::Http::HttpCookie Create(String const & name, String const & domain, String const & path) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Http::HttpCookie Create(wchar_t const (&name)[S0], wchar_t const (&domain)[S1], wchar_t const (&path)[S2]) const;
};

template <typename T>
struct impl_IHttpCookie
{
	String Name() const;
	String Domain() const;
	String Path() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Expires() const;
	void Expires(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	bool HttpOnly() const;
	void HttpOnly(bool value) const;
	bool Secure() const;
	void Secure(bool value) const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IHttpMethodStatics
{
	Windows::Web::Http::HttpMethod Delete() const;
	Windows::Web::Http::HttpMethod Get() const;
	Windows::Web::Http::HttpMethod Head() const;
	Windows::Web::Http::HttpMethod Options() const;
	Windows::Web::Http::HttpMethod Patch() const;
	Windows::Web::Http::HttpMethod Post() const;
	Windows::Web::Http::HttpMethod Put() const;
};

template <typename T>
struct impl_IHttpMethodFactory
{
	Windows::Web::Http::HttpMethod Create(String const & method) const;
	template <unsigned S0> Windows::Web::Http::HttpMethod Create(wchar_t const (&method)[S0]) const;
};

template <typename T>
struct impl_IHttpMethod
{
	String Method() const;
};

template <typename T>
struct impl_IHttpTransportInformation
{
	Windows::Security::Cryptography::Certificates::Certificate ServerCertificate() const;
	Windows::Networking::Sockets::SocketSslErrorSeverity ServerCertificateErrorSeverity() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> ServerCertificateErrors() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> ServerIntermediateCertificates() const;
};

template <typename T>
struct impl_IHttpRequestMessageFactory
{
	Windows::Web::Http::HttpRequestMessage Create(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_IHttpRequestMessage
{
	Windows::Web::Http::IHttpContent Content() const;
	void Content(Windows::Web::Http::IHttpContent const & value) const;
	Windows::Web::Http::Headers::HttpRequestHeaderCollection Headers() const;
	Windows::Web::Http::HttpMethod Method() const;
	void Method(Windows::Web::Http::HttpMethod const & value) const;
	Windows::Foundation::Collections::IMap<String, IInspectable> Properties() const;
	Windows::Foundation::Uri RequestUri() const;
	void RequestUri(Windows::Foundation::Uri const & value) const;
	Windows::Web::Http::HttpTransportInformation TransportInformation() const;
};

template <typename T>
struct impl_IHttpResponseMessageFactory
{
	Windows::Web::Http::HttpResponseMessage Create(Windows::Web::Http::HttpStatusCode statusCode) const;
};

template <typename T>
struct impl_IHttpResponseMessage
{
	Windows::Web::Http::IHttpContent Content() const;
	void Content(Windows::Web::Http::IHttpContent const & value) const;
	Windows::Web::Http::Headers::HttpResponseHeaderCollection Headers() const;
	bool IsSuccessStatusCode() const;
	String ReasonPhrase() const;
	void ReasonPhrase(String const & value) const;
	template <unsigned S0> void ReasonPhrase(wchar_t const (&value)[S0]) const;
	Windows::Web::Http::HttpRequestMessage RequestMessage() const;
	void RequestMessage(Windows::Web::Http::HttpRequestMessage const & value) const;
	Windows::Web::Http::HttpResponseMessageSource Source() const;
	void Source(Windows::Web::Http::HttpResponseMessageSource value) const;
	Windows::Web::Http::HttpStatusCode StatusCode() const;
	void StatusCode(Windows::Web::Http::HttpStatusCode value) const;
	Windows::Web::Http::HttpVersion Version() const;
	void Version(Windows::Web::Http::HttpVersion value) const;
	Windows::Web::Http::HttpResponseMessage EnsureSuccessStatusCode() const;
};

template <typename T>
struct impl_IHttpStringContentFactory
{
	Windows::Web::Http::HttpStringContent CreateFromString(String const & content) const;
	template <unsigned S0> Windows::Web::Http::HttpStringContent CreateFromString(wchar_t const (&content)[S0]) const;
	Windows::Web::Http::HttpStringContent CreateFromStringWithEncoding(String const & content, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Web::Http::HttpStringContent CreateFromStringWithEncoding(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Web::Http::HttpStringContent CreateFromStringWithEncodingAndMediaType(String const & content, Windows::Storage::Streams::UnicodeEncoding encoding, String const & mediaType) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::HttpStringContent CreateFromStringWithEncodingAndMediaType(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding encoding, wchar_t const (&mediaType)[S1]) const;
};

template <typename T>
struct impl_IHttpBufferContentFactory
{
	Windows::Web::Http::HttpBufferContent CreateFromBuffer(Windows::Storage::Streams::IBuffer const & content) const;
	Windows::Web::Http::HttpBufferContent CreateFromBufferWithOffset(Windows::Storage::Streams::IBuffer const & content, unsigned offset, unsigned count) const;
};

template <typename T>
struct impl_IHttpStreamContentFactory
{
	Windows::Web::Http::HttpStreamContent CreateFromInputStream(Windows::Storage::Streams::IInputStream const & content) const;
};

template <typename T>
struct impl_IHttpFormUrlEncodedContentFactory
{
	Windows::Web::Http::HttpFormUrlEncodedContent Create(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content) const;
};

template <typename T>
struct impl_IHttpMultipartContentFactory
{
	Windows::Web::Http::HttpMultipartContent CreateWithSubtype(String const & subtype) const;
	template <unsigned S0> Windows::Web::Http::HttpMultipartContent CreateWithSubtype(wchar_t const (&subtype)[S0]) const;
	Windows::Web::Http::HttpMultipartContent CreateWithSubtypeAndBoundary(String const & subtype, String const & boundary) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::HttpMultipartContent CreateWithSubtypeAndBoundary(wchar_t const (&subtype)[S0], wchar_t const (&boundary)[S1]) const;
};

template <typename T>
struct impl_IHttpMultipartContent
{
	void Add(Windows::Web::Http::IHttpContent const & content) const;
};

template <typename T>
struct impl_IHttpMultipartFormDataContentFactory
{
	Windows::Web::Http::HttpMultipartFormDataContent CreateWithBoundary(String const & boundary) const;
	template <unsigned S0> Windows::Web::Http::HttpMultipartFormDataContent CreateWithBoundary(wchar_t const (&boundary)[S0]) const;
};

template <typename T>
struct impl_IHttpMultipartFormDataContent
{
	void Add(Windows::Web::Http::IHttpContent const & content) const;
	void Add(Windows::Web::Http::IHttpContent const & content, String const & name) const;
	template <unsigned S0> void Add(Windows::Web::Http::IHttpContent const & content, wchar_t const (&name)[S0]) const;
	void Add(Windows::Web::Http::IHttpContent const & content, String const & name, String const & fileName) const;
	template <unsigned S0, unsigned S1> void Add(Windows::Web::Http::IHttpContent const & content, wchar_t const (&name)[S0], wchar_t const (&fileName)[S1]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

template <typename T>
struct impl_IHttpFilter
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const;
};

template <typename T>
struct impl_IHttpCacheControl
{
	Windows::Web::Http::Filters::HttpCacheReadBehavior ReadBehavior() const;
	void ReadBehavior(Windows::Web::Http::Filters::HttpCacheReadBehavior value) const;
	Windows::Web::Http::Filters::HttpCacheWriteBehavior WriteBehavior() const;
	void WriteBehavior(Windows::Web::Http::Filters::HttpCacheWriteBehavior value) const;
};

template <typename T>
struct impl_IHttpBaseProtocolFilter
{
	bool AllowAutoRedirect() const;
	void AllowAutoRedirect(bool value) const;
	bool AllowUI() const;
	void AllowUI(bool value) const;
	bool AutomaticDecompression() const;
	void AutomaticDecompression(bool value) const;
	Windows::Web::Http::Filters::HttpCacheControl CacheControl() const;
	Windows::Web::Http::HttpCookieManager CookieManager() const;
	Windows::Security::Cryptography::Certificates::Certificate ClientCertificate() const;
	void ClientCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
	Windows::Foundation::Collections::IVector<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> IgnorableServerCertificateErrors() const;
	unsigned MaxConnectionsPerServer() const;
	void MaxConnectionsPerServer(unsigned value) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	bool UseProxy() const;
	void UseProxy(bool value) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

template <typename T>
struct impl_IHttpContentHeaderCollection
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue ContentDisposition() const;
	void ContentDisposition(Windows::Web::Http::Headers::HttpContentDispositionHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection ContentEncoding() const;
	Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection ContentLanguage() const;
	Windows::Foundation::IReference<unsigned long long> ContentLength() const;
	void ContentLength(Windows::Foundation::IReference<unsigned long long> const & value) const;
	Windows::Foundation::Uri ContentLocation() const;
	void ContentLocation(Windows::Foundation::Uri const & value) const;
	Windows::Storage::Streams::IBuffer ContentMD5() const;
	void ContentMD5(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue ContentRange() const;
	void ContentRange(Windows::Web::Http::Headers::HttpContentRangeHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue ContentType() const;
	void ContentType(Windows::Web::Http::Headers::HttpMediaTypeHeaderValue const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Expires() const;
	void Expires(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> LastModified() const;
	void LastModified(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	void Append(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> void Append(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
	bool TryAppendWithoutValidation(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> bool TryAppendWithoutValidation(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpRequestHeaderCollection
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection Accept() const;
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection AcceptEncoding() const;
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection AcceptLanguage() const;
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue Authorization() const;
	void Authorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection CacheControl() const;
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection Connection() const;
	Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection Cookie() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Date() const;
	void Date(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection Expect() const;
	String From() const;
	void From(String const & value) const;
	template <unsigned S0> void From(wchar_t const (&value)[S0]) const;
	Windows::Networking::HostName Host() const;
	void Host(Windows::Networking::HostName const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> IfModifiedSince() const;
	void IfModifiedSince(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> IfUnmodifiedSince() const;
	void IfUnmodifiedSince(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<unsigned> MaxForwards() const;
	void MaxForwards(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue ProxyAuthorization() const;
	void ProxyAuthorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const;
	Windows::Foundation::Uri Referer() const;
	void Referer(Windows::Foundation::Uri const & value) const;
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection TransferEncoding() const;
	Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection UserAgent() const;
	void Append(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> void Append(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
	bool TryAppendWithoutValidation(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> bool TryAppendWithoutValidation(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpResponseHeaderCollection
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> Age() const;
	void Age(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Web::Http::Headers::HttpMethodHeaderValueCollection Allow() const;
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection CacheControl() const;
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection Connection() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Date() const;
	void Date(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::Uri Location() const;
	void Location(Windows::Foundation::Uri const & value) const;
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection ProxyAuthenticate() const;
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue RetryAfter() const;
	void RetryAfter(Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection TransferEncoding() const;
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection WwwAuthenticate() const;
	void Append(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> void Append(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
	bool TryAppendWithoutValidation(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> bool TryAppendWithoutValidation(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpCacheDirectiveHeaderValueCollection
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> MaxAge() const;
	void MaxAge(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> MaxStale() const;
	void MaxStale(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> MinFresh() const;
	void MinFresh(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> SharedMaxAge() const;
	void SharedMaxAge(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpChallengeHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue) const;
};

template <typename T>
struct impl_IHttpChallengeHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromScheme(String const & scheme) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromScheme(wchar_t const (&scheme)[S0]) const;
	Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromSchemeWithToken(String const & scheme, String const & token) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromSchemeWithToken(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]) const;
};

template <typename T>
struct impl_IHttpChallengeHeaderValue
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	String Scheme() const;
	String Token() const;
};

template <typename T>
struct impl_IHttpChallengeHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpCredentialsHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue) const;
};

template <typename T>
struct impl_IHttpCredentialsHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromScheme(String const & scheme) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromScheme(wchar_t const (&scheme)[S0]) const;
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromSchemeWithToken(String const & scheme, String const & token) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromSchemeWithToken(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]) const;
};

template <typename T>
struct impl_IHttpCredentialsHeaderValue
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	String Scheme() const;
	String Token() const;
};

template <typename T>
struct impl_IHttpConnectionOptionHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue) const;
};

template <typename T>
struct impl_IHttpConnectionOptionHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Create(String const & token) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Create(wchar_t const (&token)[S0]) const;
};

template <typename T>
struct impl_IHttpConnectionOptionHeaderValue
{
	String Token() const;
};

template <typename T>
struct impl_IHttpConnectionOptionHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpContentCodingHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue) const;
};

template <typename T>
struct impl_IHttpContentCodingHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue Create(String const & contentCoding) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingHeaderValue Create(wchar_t const (&contentCoding)[S0]) const;
};

template <typename T>
struct impl_IHttpContentCodingHeaderValue
{
	String ContentCoding() const;
};

template <typename T>
struct impl_IHttpContentCodingHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpContentDispositionHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue) const;
};

template <typename T>
struct impl_IHttpContentDispositionHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Create(String const & dispositionType) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Create(wchar_t const (&dispositionType)[S0]) const;
};

template <typename T>
struct impl_IHttpContentDispositionHeaderValue
{
	String DispositionType() const;
	void DispositionType(String const & value) const;
	template <unsigned S0> void DispositionType(wchar_t const (&value)[S0]) const;
	String FileName() const;
	void FileName(String const & value) const;
	template <unsigned S0> void FileName(wchar_t const (&value)[S0]) const;
	String FileNameStar() const;
	void FileNameStar(String const & value) const;
	template <unsigned S0> void FileNameStar(wchar_t const (&value)[S0]) const;
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	Windows::Foundation::IReference<unsigned long long> Size() const;
	void Size(Windows::Foundation::IReference<unsigned long long> const & value) const;
};

template <typename T>
struct impl_IHttpContentRangeHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue) const;
};

template <typename T>
struct impl_IHttpContentRangeHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue CreateFromLength(unsigned long long length) const;
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue CreateFromRange(unsigned long long from, unsigned long long to) const;
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue CreateFromRangeWithLength(unsigned long long from, unsigned long long to, unsigned long long length) const;
};

template <typename T>
struct impl_IHttpContentRangeHeaderValue
{
	Windows::Foundation::IReference<unsigned long long> FirstBytePosition() const;
	Windows::Foundation::IReference<unsigned long long> LastBytePosition() const;
	Windows::Foundation::IReference<unsigned long long> Length() const;
	String Unit() const;
	void Unit(String const & value) const;
	template <unsigned S0> void Unit(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IHttpCookiePairHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue) const;
};

template <typename T>
struct impl_IHttpCookiePairHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromName(String const & name) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromName(wchar_t const (&name)[S0]) const;
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromNameWithValue(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromNameWithValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpCookiePairHeaderValue
{
	String Name() const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IHttpCookiePairHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpDateOrDeltaHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue) const;
};

template <typename T>
struct impl_IHttpDateOrDeltaHeaderValue
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Date() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> Delta() const;
};

template <typename T>
struct impl_IHttpExpectationHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue) const;
};

template <typename T>
struct impl_IHttpExpectationHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromName(String const & name) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromName(wchar_t const (&name)[S0]) const;
	Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromNameWithValue(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromNameWithValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpExpectationHeaderValue
{
	String Name() const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
};

template <typename T>
struct impl_IHttpExpectationHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpLanguageHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpLanguageRangeWithQualityHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue) const;
};

template <typename T>
struct impl_IHttpLanguageRangeWithQualityHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRange(String const & languageRange) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRange(wchar_t const (&languageRange)[S0]) const;
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRangeWithQuality(String const & languageRange, double quality) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRangeWithQuality(wchar_t const (&languageRange)[S0], double quality) const;
};

template <typename T>
struct impl_IHttpLanguageRangeWithQualityHeaderValue
{
	String LanguageRange() const;
	Windows::Foundation::IReference<double> Quality() const;
};

template <typename T>
struct impl_IHttpLanguageRangeWithQualityHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpMediaTypeHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue) const;
};

template <typename T>
struct impl_IHttpMediaTypeHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Create(String const & mediaType) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Create(wchar_t const (&mediaType)[S0]) const;
};

template <typename T>
struct impl_IHttpMediaTypeHeaderValue
{
	String CharSet() const;
	void CharSet(String const & value) const;
	template <unsigned S0> void CharSet(wchar_t const (&value)[S0]) const;
	String MediaType() const;
	void MediaType(String const & value) const;
	template <unsigned S0> void MediaType(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
};

template <typename T>
struct impl_IHttpMediaTypeWithQualityHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue) const;
};

template <typename T>
struct impl_IHttpMediaTypeWithQualityHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaType(String const & mediaType) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaType(wchar_t const (&mediaType)[S0]) const;
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaTypeWithQuality(String const & mediaType, double quality) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaTypeWithQuality(wchar_t const (&mediaType)[S0], double quality) const;
};

template <typename T>
struct impl_IHttpMediaTypeWithQualityHeaderValue
{
	String CharSet() const;
	void CharSet(String const & value) const;
	template <unsigned S0> void CharSet(wchar_t const (&value)[S0]) const;
	String MediaType() const;
	void MediaType(String const & value) const;
	template <unsigned S0> void MediaType(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	Windows::Foundation::IReference<double> Quality() const;
	void Quality(Windows::Foundation::IReference<double> const & value) const;
};

template <typename T>
struct impl_IHttpMediaTypeWithQualityHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpMethodHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpNameValueHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue) const;
};

template <typename T>
struct impl_IHttpNameValueHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromName(String const & name) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromName(wchar_t const (&name)[S0]) const;
	Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromNameWithValue(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromNameWithValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpNameValueHeaderValue
{
	String Name() const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IHttpProductHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpProductHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpProductHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue) const;
};

template <typename T>
struct impl_IHttpProductHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromName(String const & productName) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromName(wchar_t const (&productName)[S0]) const;
	Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromNameWithVersion(String const & productName, String const & productVersion) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromNameWithVersion(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]) const;
};

template <typename T>
struct impl_IHttpProductHeaderValue
{
	String Name() const;
	String Version() const;
};

template <typename T>
struct impl_IHttpProductInfoHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue) const;
};

template <typename T>
struct impl_IHttpProductInfoHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromComment(String const & productComment) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromComment(wchar_t const (&productComment)[S0]) const;
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromNameWithVersion(String const & productName, String const & productVersion) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromNameWithVersion(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]) const;
};

template <typename T>
struct impl_IHttpProductInfoHeaderValue
{
	Windows::Web::Http::Headers::HttpProductHeaderValue Product() const;
	String Comment() const;
};

template <typename T>
struct impl_IHttpProductInfoHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpContentCodingWithQualityHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue) const;
};

template <typename T>
struct impl_IHttpContentCodingWithQualityHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValue(String const & contentCoding) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValue(wchar_t const (&contentCoding)[S0]) const;
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValueWithQuality(String const & contentCoding, double quality) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValueWithQuality(wchar_t const (&contentCoding)[S0], double quality) const;
};

template <typename T>
struct impl_IHttpContentCodingWithQualityHeaderValue
{
	String ContentCoding() const;
	Windows::Foundation::IReference<double> Quality() const;
};

template <typename T>
struct impl_IHttpContentCodingWithQualityHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpTransferCodingHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue) const;
};

template <typename T>
struct impl_IHttpTransferCodingHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Create(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Create(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpTransferCodingHeaderValue
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	String Value() const;
};

template <typename T>
struct impl_IHttpTransferCodingHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

template <typename T>
struct impl_ISyndicationAttribute
{
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Namespace() const;
	void Namespace(String const & value) const;
	template <unsigned S0> void Namespace(wchar_t const (&value)[S0]) const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISyndicationAttributeFactory
{
	Windows::Web::Syndication::SyndicationAttribute CreateSyndicationAttribute(String const & attributeName, String const & attributeNamespace, String const & attributeValue) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationAttribute CreateSyndicationAttribute(wchar_t const (&attributeName)[S0], wchar_t const (&attributeNamespace)[S1], wchar_t const (&attributeValue)[S2]) const;
};

template <typename T>
struct impl_ISyndicationNode
{
	String NodeName() const;
	void NodeName(String const & value) const;
	template <unsigned S0> void NodeName(wchar_t const (&value)[S0]) const;
	String NodeNamespace() const;
	void NodeNamespace(String const & value) const;
	template <unsigned S0> void NodeNamespace(wchar_t const (&value)[S0]) const;
	String NodeValue() const;
	void NodeValue(String const & value) const;
	template <unsigned S0> void NodeValue(wchar_t const (&value)[S0]) const;
	String Language() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri BaseUri() const;
	void BaseUri(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationAttribute> AttributeExtensions() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::ISyndicationNode> ElementExtensions() const;
	Windows::Data::Xml::Dom::XmlDocument GetXmlDocument(Windows::Web::Syndication::SyndicationFormat format) const;
};

template <typename T>
struct impl_ISyndicationNodeFactory
{
	Windows::Web::Syndication::SyndicationNode CreateSyndicationNode(String const & nodeName, String const & nodeNamespace, String const & nodeValue) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationNode CreateSyndicationNode(wchar_t const (&nodeName)[S0], wchar_t const (&nodeNamespace)[S1], wchar_t const (&nodeValue)[S2]) const;
};

template <typename T>
struct impl_ISyndicationGenerator
{
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
	String Version() const;
	void Version(String const & value) const;
	template <unsigned S0> void Version(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISyndicationGeneratorFactory
{
	Windows::Web::Syndication::SyndicationGenerator CreateSyndicationGenerator(String const & text) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationGenerator CreateSyndicationGenerator(wchar_t const (&text)[S0]) const;
};

template <typename T>
struct impl_ISyndicationText
{
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	String Type() const;
	void Type(String const & value) const;
	template <unsigned S0> void Type(wchar_t const (&value)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocument Xml() const;
	void Xml(Windows::Data::Xml::Dom::XmlDocument const & value) const;
};

template <typename T>
struct impl_ISyndicationTextFactory
{
	Windows::Web::Syndication::SyndicationText CreateSyndicationText(String const & text) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationText CreateSyndicationText(wchar_t const (&text)[S0]) const;
	Windows::Web::Syndication::SyndicationText CreateSyndicationText(String const & text, Windows::Web::Syndication::SyndicationTextType type) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationText CreateSyndicationText(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType type) const;
};

template <typename T>
struct impl_ISyndicationContent
{
	Windows::Foundation::Uri SourceUri() const;
	void SourceUri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_ISyndicationContentFactory
{
	Windows::Web::Syndication::SyndicationContent CreateSyndicationContent(String const & text, Windows::Web::Syndication::SyndicationTextType type) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationContent CreateSyndicationContent(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType type) const;
	Windows::Web::Syndication::SyndicationContent CreateSyndicationContent(Windows::Foundation::Uri const & sourceUri) const;
};

template <typename T>
struct impl_ISyndicationLink
{
	unsigned Length() const;
	void Length(unsigned value) const;
	String MediaType() const;
	void MediaType(String const & value) const;
	template <unsigned S0> void MediaType(wchar_t const (&value)[S0]) const;
	String Relationship() const;
	void Relationship(String const & value) const;
	template <unsigned S0> void Relationship(wchar_t const (&value)[S0]) const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
	String ResourceLanguage() const;
	void ResourceLanguage(String const & value) const;
	template <unsigned S0> void ResourceLanguage(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISyndicationLinkFactory
{
	Windows::Web::Syndication::SyndicationLink CreateSyndicationLink(Windows::Foundation::Uri const & uri) const;
	Windows::Web::Syndication::SyndicationLink CreateSyndicationLink(Windows::Foundation::Uri const & uri, String const & relationship, String const & title, String const & mediaType, unsigned length) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationLink CreateSyndicationLink(Windows::Foundation::Uri const & uri, wchar_t const (&relationship)[S0], wchar_t const (&title)[S1], wchar_t const (&mediaType)[S2], unsigned length) const;
};

template <typename T>
struct impl_ISyndicationPerson
{
	String Email() const;
	void Email(String const & value) const;
	template <unsigned S0> void Email(wchar_t const (&value)[S0]) const;
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_ISyndicationPersonFactory
{
	Windows::Web::Syndication::SyndicationPerson CreateSyndicationPerson(String const & name) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationPerson CreateSyndicationPerson(wchar_t const (&name)[S0]) const;
	Windows::Web::Syndication::SyndicationPerson CreateSyndicationPerson(String const & name, String const & email, Windows::Foundation::Uri const & uri) const;
	template <unsigned S0, unsigned S1> Windows::Web::Syndication::SyndicationPerson CreateSyndicationPerson(wchar_t const (&name)[S0], wchar_t const (&email)[S1], Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_ISyndicationCategory
{
	String Label() const;
	void Label(String const & value) const;
	template <unsigned S0> void Label(wchar_t const (&value)[S0]) const;
	String Scheme() const;
	void Scheme(String const & value) const;
	template <unsigned S0> void Scheme(wchar_t const (&value)[S0]) const;
	String Term() const;
	void Term(String const & value) const;
	template <unsigned S0> void Term(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISyndicationCategoryFactory
{
	Windows::Web::Syndication::SyndicationCategory CreateSyndicationCategory(String const & term) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationCategory CreateSyndicationCategory(wchar_t const (&term)[S0]) const;
	Windows::Web::Syndication::SyndicationCategory CreateSyndicationCategory(String const & term, String const & scheme, String const & label) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationCategory CreateSyndicationCategory(wchar_t const (&term)[S0], wchar_t const (&scheme)[S1], wchar_t const (&label)[S2]) const;
};

template <typename T>
struct impl_ISyndicationItem
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> Authors() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> Categories() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> Contributors() const;
	Windows::Web::Syndication::SyndicationContent Content() const;
	void Content(Windows::Web::Syndication::SyndicationContent const & value) const;
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	Windows::Foundation::DateTime LastUpdatedTime() const;
	void LastUpdatedTime(Windows::Foundation::DateTime const & value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> Links() const;
	Windows::Foundation::DateTime PublishedDate() const;
	void PublishedDate(Windows::Foundation::DateTime const & value) const;
	Windows::Web::Syndication::ISyndicationText Rights() const;
	void Rights(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Web::Syndication::SyndicationFeed Source() const;
	void Source(Windows::Web::Syndication::SyndicationFeed const & value) const;
	Windows::Web::Syndication::ISyndicationText Summary() const;
	void Summary(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Web::Syndication::ISyndicationText Title() const;
	void Title(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Foundation::Uri CommentsUri() const;
	void CommentsUri(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri EditUri() const;
	Windows::Foundation::Uri EditMediaUri() const;
	String ETag() const;
	Windows::Foundation::Uri ItemUri() const;
	void Load(String const & item) const;
	template <unsigned S0> void Load(wchar_t const (&item)[S0]) const;
	void LoadFromXml(Windows::Data::Xml::Dom::XmlDocument const & itemDocument) const;
};

template <typename T>
struct impl_ISyndicationItemFactory
{
	Windows::Web::Syndication::SyndicationItem CreateSyndicationItem(String const & title, Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationItem CreateSyndicationItem(wchar_t const (&title)[S0], Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_ISyndicationFeed
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> Authors() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> Categories() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> Contributors() const;
	Windows::Web::Syndication::SyndicationGenerator Generator() const;
	void Generator(Windows::Web::Syndication::SyndicationGenerator const & value) const;
	Windows::Foundation::Uri IconUri() const;
	void IconUri(Windows::Foundation::Uri const & value) const;
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationItem> Items() const;
	Windows::Foundation::DateTime LastUpdatedTime() const;
	void LastUpdatedTime(Windows::Foundation::DateTime const & value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> Links() const;
	Windows::Foundation::Uri ImageUri() const;
	void ImageUri(Windows::Foundation::Uri const & value) const;
	Windows::Web::Syndication::ISyndicationText Rights() const;
	void Rights(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Web::Syndication::ISyndicationText Subtitle() const;
	void Subtitle(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Web::Syndication::ISyndicationText Title() const;
	void Title(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Foundation::Uri FirstUri() const;
	Windows::Foundation::Uri LastUri() const;
	Windows::Foundation::Uri NextUri() const;
	Windows::Foundation::Uri PreviousUri() const;
	Windows::Web::Syndication::SyndicationFormat SourceFormat() const;
	void Load(String const & feed) const;
	template <unsigned S0> void Load(wchar_t const (&feed)[S0]) const;
	void LoadFromXml(Windows::Data::Xml::Dom::XmlDocument const & feedDocument) const;
};

template <typename T>
struct impl_ISyndicationFeedFactory
{
	Windows::Web::Syndication::SyndicationFeed CreateSyndicationFeed(String const & title, String const & subtitle, Windows::Foundation::Uri const & uri) const;
	template <unsigned S0, unsigned S1> Windows::Web::Syndication::SyndicationFeed CreateSyndicationFeed(wchar_t const (&title)[S0], wchar_t const (&subtitle)[S1], Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_ISyndicationClient
{
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	unsigned MaxResponseBufferSize() const;
	void MaxResponseBufferSize(unsigned value) const;
	unsigned Timeout() const;
	void Timeout(unsigned value) const;
	bool BypassCacheOnRetrieve() const;
	void BypassCacheOnRetrieve(bool value) const;
	void SetRequestHeader(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> void SetRequestHeader(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationFeed, Modern::Windows::Web::Syndication::RetrievalProgress> RetrieveFeedAsync(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_ISyndicationClientFactory
{
	Windows::Web::Syndication::SyndicationClient CreateSyndicationClient(Windows::Security::Credentials::PasswordCredential const & serverCredential) const;
};

template <typename T>
struct impl_ISyndicationErrorStatics
{
	Windows::Web::Syndication::SyndicationErrorStatus GetStatus(int hresult) const;
};

}}}}

namespace Modern {

template <> struct Traits<Windows::Foundation::IAsyncActionCompletedHandler>
{
	using Abi = ABI::Windows::Foundation::IAsyncActionCompletedHandler;
	template <typename T> using Methods = Windows::Foundation::impl_IAsyncActionCompletedHandler<T>;
};

template <> struct Traits<Windows::Foundation::IUriRuntimeClass>
{
	using Abi = ABI::Windows::Foundation::IUriRuntimeClass;
	template <typename T> using Methods = Windows::Foundation::impl_IUriRuntimeClass<T>;
};

template <> struct Traits<Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri>
{
	using Abi = ABI::Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri;
	template <typename T> using Methods = Windows::Foundation::impl_IUriRuntimeClassWithAbsoluteCanonicalUri<T>;
};

template <> struct Traits<Windows::Foundation::IUriEscapeStatics>
{
	using Abi = ABI::Windows::Foundation::IUriEscapeStatics;
	template <typename T> using Methods = Windows::Foundation::impl_IUriEscapeStatics<T>;
};

template <> struct Traits<Windows::Foundation::IUriRuntimeClassFactory>
{
	using Abi = ABI::Windows::Foundation::IUriRuntimeClassFactory;
	template <typename T> using Methods = Windows::Foundation::impl_IUriRuntimeClassFactory<T>;
};

template <> struct Traits<Windows::Foundation::IWwwFormUrlDecoderEntry>
{
	using Abi = ABI::Windows::Foundation::IWwwFormUrlDecoderEntry;
	template <typename T> using Methods = Windows::Foundation::impl_IWwwFormUrlDecoderEntry<T>;
};

template <> struct Traits<Windows::Foundation::IWwwFormUrlDecoderRuntimeClass>
{
	using Abi = ABI::Windows::Foundation::IWwwFormUrlDecoderRuntimeClass;
	template <typename T> using Methods = Windows::Foundation::impl_IWwwFormUrlDecoderRuntimeClass<T>;
};

template <> struct Traits<Windows::Foundation::IWwwFormUrlDecoderRuntimeClassFactory>
{
	using Abi = ABI::Windows::Foundation::IWwwFormUrlDecoderRuntimeClassFactory;
	template <typename T> using Methods = Windows::Foundation::impl_IWwwFormUrlDecoderRuntimeClassFactory<T>;
};

template <> struct Traits<Windows::Foundation::IGetActivationFactory>
{
	using Abi = ABI::Windows::Foundation::IGetActivationFactory;
	template <typename T> using Methods = Windows::Foundation::impl_IGetActivationFactory<T>;
};

template <> struct Traits<Windows::Foundation::IClosable>
{
	using Abi = ABI::Windows::Foundation::IClosable;
	template <typename T> using Methods = Windows::Foundation::impl_IClosable<T>;
};

template <> struct Traits<Windows::Foundation::IPropertyValue>
{
	using Abi = ABI::Windows::Foundation::IPropertyValue;
	template <typename T> using Methods = Windows::Foundation::impl_IPropertyValue<T>;
};

template <> struct Traits<Windows::Foundation::IPropertyValueStatics>
{
	using Abi = ABI::Windows::Foundation::IPropertyValueStatics;
	template <typename T> using Methods = Windows::Foundation::impl_IPropertyValueStatics<T>;
};

template <> struct Traits<Windows::Foundation::IStringable>
{
	using Abi = ABI::Windows::Foundation::IStringable;
	template <typename T> using Methods = Windows::Foundation::impl_IStringable<T>;
};

template <> struct Traits<Windows::Foundation::Collections::IPropertySet>
{
	using Abi = ABI::Windows::Foundation::Collections::IPropertySet;
	template <typename T> using Methods = Windows::Foundation::Collections::impl_IPropertySet<T>;
};

template <> struct Traits<Windows::Foundation::IAsyncAction>
{
	using Abi = ABI::Windows::Foundation::IAsyncAction;
	template <typename T> using Methods = Windows::Foundation::impl_IAsyncAction<T>;
};

template <> struct Traits<Windows::UI::Popups::IUICommandInvokedHandler>
{
	using Abi = ABI::Windows::UI::Popups::IUICommandInvokedHandler;
	template <typename T> using Methods = Windows::UI::Popups::impl_IUICommandInvokedHandler<T>;
};

template <> struct Traits<Windows::UI::Popups::IMessageDialog>
{
	using Abi = ABI::Windows::UI::Popups::IMessageDialog;
	template <typename T> using Methods = Windows::UI::Popups::impl_IMessageDialog<T>;
};

template <> struct Traits<Windows::UI::Popups::IMessageDialogFactory>
{
	using Abi = ABI::Windows::UI::Popups::IMessageDialogFactory;
	template <typename T> using Methods = Windows::UI::Popups::impl_IMessageDialogFactory<T>;
};

template <> struct Traits<Windows::UI::Popups::IUICommand>
{
	using Abi = ABI::Windows::UI::Popups::IUICommand;
	template <typename T> using Methods = Windows::UI::Popups::impl_IUICommand<T>;
};

template <> struct Traits<Windows::UI::Popups::IUICommandFactory>
{
	using Abi = ABI::Windows::UI::Popups::IUICommandFactory;
	template <typename T> using Methods = Windows::UI::Popups::impl_IUICommandFactory<T>;
};

template <> struct Traits<Windows::UI::Popups::IPopupMenu>
{
	using Abi = ABI::Windows::UI::Popups::IPopupMenu;
	template <typename T> using Methods = Windows::UI::Popups::impl_IPopupMenu<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointmentManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointmentParticipant>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentParticipant;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointmentParticipant<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointmentInvitee>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentInvitee;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointmentInvitee<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointmentRecurrence>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentRecurrence;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointmentRecurrence<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointment>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointment;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointment<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IAppointmentsProviderLaunchActionVerbsStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IAddAppointmentOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IReplaceAppointmentOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IRemoveAppointmentOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::Calls::impl_ILockScreenCallEndCallDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Calls::impl_ILockScreenCallEndRequestedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Calls::ILockScreenCallUI>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::ILockScreenCallUI;
	template <typename T> using Methods = Windows::ApplicationModel::Calls::impl_ILockScreenCallUI<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IThumbnailProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IThumbnailProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IThumbnailProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IStorageItemExtraProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IStorageItemExtraProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IStorageItemContentProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IStorageItemContentProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IStorageItemContentProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IMusicProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IMusicProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IMusicProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IImageProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IImageProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IImageProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IVideoProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IVideoProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IVideoProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IDocumentProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IDocumentProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IDocumentProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IBasicProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IBasicProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IBasicProperties<T>;
};

template <> struct Traits<Windows::Storage::Provider::ICachedFileUpdaterUI>
{
	using Abi = ABI::Windows::Storage::Provider::ICachedFileUpdaterUI;
	template <typename T> using Methods = Windows::Storage::Provider::impl_ICachedFileUpdaterUI<T>;
};

template <> struct Traits<Windows::Storage::Provider::IFileUpdateRequestedEventArgs>
{
	using Abi = ABI::Windows::Storage::Provider::IFileUpdateRequestedEventArgs;
	template <typename T> using Methods = Windows::Storage::Provider::impl_IFileUpdateRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Storage::Provider::IFileUpdateRequest>
{
	using Abi = ABI::Windows::Storage::Provider::IFileUpdateRequest;
	template <typename T> using Methods = Windows::Storage::Provider::impl_IFileUpdateRequest<T>;
};

template <> struct Traits<Windows::Storage::Provider::IFileUpdateRequestDeferral>
{
	using Abi = ABI::Windows::Storage::Provider::IFileUpdateRequestDeferral;
	template <typename T> using Methods = Windows::Storage::Provider::impl_IFileUpdateRequestDeferral<T>;
};

template <> struct Traits<Windows::Storage::Provider::ICachedFileUpdaterStatics>
{
	using Abi = ABI::Windows::Storage::Provider::ICachedFileUpdaterStatics;
	template <typename T> using Methods = Windows::Storage::Provider::impl_ICachedFileUpdaterStatics<T>;
};

template <> struct Traits<Windows::Data::Text::IWordSegmentsTokenizingHandler>
{
	using Abi = ABI::Windows::Data::Text::IWordSegmentsTokenizingHandler;
	template <typename T> using Methods = Windows::Data::Text::impl_IWordSegmentsTokenizingHandler<T>;
};

template <> struct Traits<Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler>
{
	using Abi = ABI::Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler;
	template <typename T> using Methods = Windows::Data::Text::impl_ISelectableWordSegmentsTokenizingHandler<T>;
};

template <> struct Traits<Windows::Data::Text::ISemanticTextQueryFactory>
{
	using Abi = ABI::Windows::Data::Text::ISemanticTextQueryFactory;
	template <typename T> using Methods = Windows::Data::Text::impl_ISemanticTextQueryFactory<T>;
};

template <> struct Traits<Windows::Data::Text::ISemanticTextQuery>
{
	using Abi = ABI::Windows::Data::Text::ISemanticTextQuery;
	template <typename T> using Methods = Windows::Data::Text::impl_ISemanticTextQuery<T>;
};

template <> struct Traits<Windows::Data::Text::IUnicodeCharactersStatics>
{
	using Abi = ABI::Windows::Data::Text::IUnicodeCharactersStatics;
	template <typename T> using Methods = Windows::Data::Text::impl_IUnicodeCharactersStatics<T>;
};

template <> struct Traits<Windows::Data::Text::IAlternateWordForm>
{
	using Abi = ABI::Windows::Data::Text::IAlternateWordForm;
	template <typename T> using Methods = Windows::Data::Text::impl_IAlternateWordForm<T>;
};

template <> struct Traits<Windows::Data::Text::ISelectableWordSegment>
{
	using Abi = ABI::Windows::Data::Text::ISelectableWordSegment;
	template <typename T> using Methods = Windows::Data::Text::impl_ISelectableWordSegment<T>;
};

template <> struct Traits<Windows::Data::Text::IWordSegment>
{
	using Abi = ABI::Windows::Data::Text::IWordSegment;
	template <typename T> using Methods = Windows::Data::Text::impl_IWordSegment<T>;
};

template <> struct Traits<Windows::Data::Text::IWordsSegmenter>
{
	using Abi = ABI::Windows::Data::Text::IWordsSegmenter;
	template <typename T> using Methods = Windows::Data::Text::impl_IWordsSegmenter<T>;
};

template <> struct Traits<Windows::Data::Text::IWordsSegmenterFactory>
{
	using Abi = ABI::Windows::Data::Text::IWordsSegmenterFactory;
	template <typename T> using Methods = Windows::Data::Text::impl_IWordsSegmenterFactory<T>;
};

template <> struct Traits<Windows::Data::Text::ISelectableWordsSegmenter>
{
	using Abi = ABI::Windows::Data::Text::ISelectableWordsSegmenter;
	template <typename T> using Methods = Windows::Data::Text::impl_ISelectableWordsSegmenter<T>;
};

template <> struct Traits<Windows::Data::Text::ISelectableWordsSegmenterFactory>
{
	using Abi = ABI::Windows::Data::Text::ISelectableWordsSegmenterFactory;
	template <typename T> using Methods = Windows::Data::Text::impl_ISelectableWordsSegmenterFactory<T>;
};

template <> struct Traits<Windows::Storage::Search::IContentIndexerStatics>
{
	using Abi = ABI::Windows::Storage::Search::IContentIndexerStatics;
	template <typename T> using Methods = Windows::Storage::Search::impl_IContentIndexerStatics<T>;
};

template <> struct Traits<Windows::Storage::Search::IIndexableContent>
{
	using Abi = ABI::Windows::Storage::Search::IIndexableContent;
	template <typename T> using Methods = Windows::Storage::Search::impl_IIndexableContent<T>;
};

template <> struct Traits<Windows::Storage::Search::IContentIndexer>
{
	using Abi = ABI::Windows::Storage::Search::IContentIndexer;
	template <typename T> using Methods = Windows::Storage::Search::impl_IContentIndexer<T>;
};

template <> struct Traits<Windows::Storage::Search::IValueAndLanguage>
{
	using Abi = ABI::Windows::Storage::Search::IValueAndLanguage;
	template <typename T> using Methods = Windows::Storage::Search::impl_IValueAndLanguage<T>;
};

template <> struct Traits<Windows::Storage::Search::IContentIndexerQueryOperations>
{
	using Abi = ABI::Windows::Storage::Search::IContentIndexerQueryOperations;
	template <typename T> using Methods = Windows::Storage::Search::impl_IContentIndexerQueryOperations<T>;
};

template <> struct Traits<Windows::Storage::Search::IContentIndexerQuery>
{
	using Abi = ABI::Windows::Storage::Search::IContentIndexerQuery;
	template <typename T> using Methods = Windows::Storage::Search::impl_IContentIndexerQuery<T>;
};

template <> struct Traits<Windows::Storage::Search::IQueryOptions>
{
	using Abi = ABI::Windows::Storage::Search::IQueryOptions;
	template <typename T> using Methods = Windows::Storage::Search::impl_IQueryOptions<T>;
};

template <> struct Traits<Windows::Storage::Search::IQueryOptionsWithProviderFilter>
{
	using Abi = ABI::Windows::Storage::Search::IQueryOptionsWithProviderFilter;
	template <typename T> using Methods = Windows::Storage::Search::impl_IQueryOptionsWithProviderFilter<T>;
};

template <> struct Traits<Windows::Storage::Search::IQueryOptionsFactory>
{
	using Abi = ABI::Windows::Storage::Search::IQueryOptionsFactory;
	template <typename T> using Methods = Windows::Storage::Search::impl_IQueryOptionsFactory<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageQueryResultBase>
{
	using Abi = ABI::Windows::Storage::Search::IStorageQueryResultBase;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageQueryResultBase<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageFileQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::IStorageFileQueryResult;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageFileQueryResult<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageFileQueryResult2>
{
	using Abi = ABI::Windows::Storage::Search::IStorageFileQueryResult2;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageFileQueryResult2<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageFolderQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::IStorageFolderQueryResult;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageFolderQueryResult<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageItemQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::IStorageItemQueryResult;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageItemQueryResult<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageFolderQueryOperations>
{
	using Abi = ABI::Windows::Storage::Search::IStorageFolderQueryOperations;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageFolderQueryOperations<T>;
};

template <> struct Traits<Windows::Storage::IStreamedFileDataRequestedHandler>
{
	using Abi = ABI::Windows::Storage::IStreamedFileDataRequestedHandler;
	template <typename T> using Methods = Windows::Storage::impl_IStreamedFileDataRequestedHandler<T>;
};

template <> struct Traits<Windows::Storage::IApplicationDataSetVersionHandler>
{
	using Abi = ABI::Windows::Storage::IApplicationDataSetVersionHandler;
	template <typename T> using Methods = Windows::Storage::impl_IApplicationDataSetVersionHandler<T>;
};

template <> struct Traits<Windows::Storage::IStorageLibraryStatics>
{
	using Abi = ABI::Windows::Storage::IStorageLibraryStatics;
	template <typename T> using Methods = Windows::Storage::impl_IStorageLibraryStatics<T>;
};

template <> struct Traits<Windows::Storage::IStorageLibrary>
{
	using Abi = ABI::Windows::Storage::IStorageLibrary;
	template <typename T> using Methods = Windows::Storage::impl_IStorageLibrary<T>;
};

template <> struct Traits<Windows::Storage::IKnownFoldersStatics>
{
	using Abi = ABI::Windows::Storage::IKnownFoldersStatics;
	template <typename T> using Methods = Windows::Storage::impl_IKnownFoldersStatics<T>;
};

template <> struct Traits<Windows::Storage::IKnownFoldersPlaylistsStatics>
{
	using Abi = ABI::Windows::Storage::IKnownFoldersPlaylistsStatics;
	template <typename T> using Methods = Windows::Storage::impl_IKnownFoldersPlaylistsStatics<T>;
};

template <> struct Traits<Windows::Storage::IKnownFoldersCameraRollStatics>
{
	using Abi = ABI::Windows::Storage::IKnownFoldersCameraRollStatics;
	template <typename T> using Methods = Windows::Storage::impl_IKnownFoldersCameraRollStatics<T>;
};

template <> struct Traits<Windows::Storage::IKnownFoldersSavedPicturesStatics>
{
	using Abi = ABI::Windows::Storage::IKnownFoldersSavedPicturesStatics;
	template <typename T> using Methods = Windows::Storage::impl_IKnownFoldersSavedPicturesStatics<T>;
};

template <> struct Traits<Windows::Storage::IDownloadsFolderStatics>
{
	using Abi = ABI::Windows::Storage::IDownloadsFolderStatics;
	template <typename T> using Methods = Windows::Storage::impl_IDownloadsFolderStatics<T>;
};

template <> struct Traits<Windows::Storage::IStreamedFileDataRequest>
{
	using Abi = ABI::Windows::Storage::IStreamedFileDataRequest;
	template <typename T> using Methods = Windows::Storage::impl_IStreamedFileDataRequest<T>;
};

template <> struct Traits<Windows::Storage::IStorageFileStatics>
{
	using Abi = ABI::Windows::Storage::IStorageFileStatics;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFileStatics<T>;
};

template <> struct Traits<Windows::Storage::IStorageItem>
{
	using Abi = ABI::Windows::Storage::IStorageItem;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItem<T>;
};

template <> struct Traits<Windows::Storage::IStorageFolder>
{
	using Abi = ABI::Windows::Storage::IStorageFolder;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFolder<T>;
};

template <> struct Traits<Windows::Storage::IStorageFile>
{
	using Abi = ABI::Windows::Storage::IStorageFile;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFile<T>;
};

template <> struct Traits<Windows::Storage::IStorageFolderStatics>
{
	using Abi = ABI::Windows::Storage::IStorageFolderStatics;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFolderStatics<T>;
};

template <> struct Traits<Windows::Storage::IStorageItem2>
{
	using Abi = ABI::Windows::Storage::IStorageItem2;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItem2<T>;
};

template <> struct Traits<Windows::Storage::IStorageItemProperties>
{
	using Abi = ABI::Windows::Storage::IStorageItemProperties;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItemProperties<T>;
};

template <> struct Traits<Windows::Storage::IStorageItemProperties2>
{
	using Abi = ABI::Windows::Storage::IStorageItemProperties2;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItemProperties2<T>;
};

template <> struct Traits<Windows::Storage::IStorageItemPropertiesWithProvider>
{
	using Abi = ABI::Windows::Storage::IStorageItemPropertiesWithProvider;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItemPropertiesWithProvider<T>;
};

template <> struct Traits<Windows::Storage::IStorageFilePropertiesWithAvailability>
{
	using Abi = ABI::Windows::Storage::IStorageFilePropertiesWithAvailability;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFilePropertiesWithAvailability<T>;
};

template <> struct Traits<Windows::Storage::IStorageProvider>
{
	using Abi = ABI::Windows::Storage::IStorageProvider;
	template <typename T> using Methods = Windows::Storage::impl_IStorageProvider<T>;
};

template <> struct Traits<Windows::Storage::IStorageFolder2>
{
	using Abi = ABI::Windows::Storage::IStorageFolder2;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFolder2<T>;
};

template <> struct Traits<Windows::Storage::IFileIOStatics>
{
	using Abi = ABI::Windows::Storage::IFileIOStatics;
	template <typename T> using Methods = Windows::Storage::impl_IFileIOStatics<T>;
};

template <> struct Traits<Windows::Storage::IPathIOStatics>
{
	using Abi = ABI::Windows::Storage::IPathIOStatics;
	template <typename T> using Methods = Windows::Storage::impl_IPathIOStatics<T>;
};

template <> struct Traits<Windows::Storage::ICachedFileManagerStatics>
{
	using Abi = ABI::Windows::Storage::ICachedFileManagerStatics;
	template <typename T> using Methods = Windows::Storage::impl_ICachedFileManagerStatics<T>;
};

template <> struct Traits<Windows::Storage::ISystemAudioProperties>
{
	using Abi = ABI::Windows::Storage::ISystemAudioProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemAudioProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemGPSProperties>
{
	using Abi = ABI::Windows::Storage::ISystemGPSProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemGPSProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemImageProperties>
{
	using Abi = ABI::Windows::Storage::ISystemImageProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemImageProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemMediaProperties>
{
	using Abi = ABI::Windows::Storage::ISystemMediaProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemMediaProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemMusicProperties>
{
	using Abi = ABI::Windows::Storage::ISystemMusicProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemMusicProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemPhotoProperties>
{
	using Abi = ABI::Windows::Storage::ISystemPhotoProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemPhotoProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemVideoProperties>
{
	using Abi = ABI::Windows::Storage::ISystemVideoProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemVideoProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemProperties>
{
	using Abi = ABI::Windows::Storage::ISystemProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemProperties<T>;
};

template <> struct Traits<Windows::Storage::IStorageStreamTransaction>
{
	using Abi = ABI::Windows::Storage::IStorageStreamTransaction;
	template <typename T> using Methods = Windows::Storage::impl_IStorageStreamTransaction<T>;
};

template <> struct Traits<Windows::Storage::IApplicationDataStatics>
{
	using Abi = ABI::Windows::Storage::IApplicationDataStatics;
	template <typename T> using Methods = Windows::Storage::impl_IApplicationDataStatics<T>;
};

template <> struct Traits<Windows::Storage::IApplicationData>
{
	using Abi = ABI::Windows::Storage::IApplicationData;
	template <typename T> using Methods = Windows::Storage::impl_IApplicationData<T>;
};

template <> struct Traits<Windows::Storage::ISetVersionRequest>
{
	using Abi = ABI::Windows::Storage::ISetVersionRequest;
	template <typename T> using Methods = Windows::Storage::impl_ISetVersionRequest<T>;
};

template <> struct Traits<Windows::Storage::ISetVersionDeferral>
{
	using Abi = ABI::Windows::Storage::ISetVersionDeferral;
	template <typename T> using Methods = Windows::Storage::impl_ISetVersionDeferral<T>;
};

template <> struct Traits<Windows::Storage::IApplicationDataContainer>
{
	using Abi = ABI::Windows::Storage::IApplicationDataContainer;
	template <typename T> using Methods = Windows::Storage::impl_IApplicationDataContainer<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataReader>
{
	using Abi = ABI::Windows::Storage::Streams::IDataReader;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataReader<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataReaderFactory>
{
	using Abi = ABI::Windows::Storage::Streams::IDataReaderFactory;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataReaderFactory<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataReaderStatics>
{
	using Abi = ABI::Windows::Storage::Streams::IDataReaderStatics;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataReaderStatics<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataWriter>
{
	using Abi = ABI::Windows::Storage::Streams::IDataWriter;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataWriter<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataWriterFactory>
{
	using Abi = ABI::Windows::Storage::Streams::IDataWriterFactory;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataWriterFactory<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStreamStatics>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStreamStatics;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStreamStatics<T>;
};

template <> struct Traits<Windows::Storage::Streams::IBufferFactory>
{
	using Abi = ABI::Windows::Storage::Streams::IBufferFactory;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IBufferFactory<T>;
};

template <> struct Traits<Windows::Storage::Streams::IBuffer>
{
	using Abi = ABI::Windows::Storage::Streams::IBuffer;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IBuffer<T>;
};

template <> struct Traits<Windows::Storage::Streams::IContentTypeProvider>
{
	using Abi = ABI::Windows::Storage::Streams::IContentTypeProvider;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IContentTypeProvider<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStreamReference>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStreamReference;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStreamReference<T>;
};

template <> struct Traits<Windows::Storage::Streams::IInputStreamReference>
{
	using Abi = ABI::Windows::Storage::Streams::IInputStreamReference;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IInputStreamReference<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStreamReferenceStatics>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStreamReferenceStatics;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStreamReferenceStatics<T>;
};

template <> struct Traits<Windows::Storage::Streams::IInputStream>
{
	using Abi = ABI::Windows::Storage::Streams::IInputStream;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IInputStream<T>;
};

template <> struct Traits<Windows::Storage::Streams::IOutputStream>
{
	using Abi = ABI::Windows::Storage::Streams::IOutputStream;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IOutputStream<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStream>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStream;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStream<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStreamWithContentType>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStreamWithContentType<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactLaunchActionVerbsStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactLaunchActionVerbsStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactLaunchActionVerbsStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactPicker>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactPicker;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactPicker<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactPicker2>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactPicker2;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactPicker2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactSignificantOther>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactSignificantOther;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactSignificantOther<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactWebsite>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactWebsite;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactWebsite<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactEmail>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactEmail;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactEmail<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactPhone>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactPhone;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactPhone<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactAddress>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactAddress;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactAddress<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactConnectedServiceAccount<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactDate>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactDate;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactDate<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactName>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactName;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactName<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactJobInfo>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactJobInfo;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactJobInfo<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContact>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContact;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContact<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContact2>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContact2;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContact2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactCardDelayedDataLoader<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::Provider::impl_IContactRemovedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::IContactPickerUI;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::Provider::impl_IContactPickerUI<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::Provider::impl_IContactPickerUI2<T>;
};

template <> struct Traits<Windows::UI::IColorHelper>
{
	using Abi = ABI::Windows::UI::IColorHelper;
	template <typename T> using Methods = Windows::UI::impl_IColorHelper<T>;
};

template <> struct Traits<Windows::UI::IColorHelperStatics>
{
	using Abi = ABI::Windows::UI::IColorHelperStatics;
	template <typename T> using Methods = Windows::UI::impl_IColorHelperStatics<T>;
};

template <> struct Traits<Windows::UI::IColors>
{
	using Abi = ABI::Windows::UI::IColors;
	template <typename T> using Methods = Windows::UI::impl_IColors<T>;
};

template <> struct Traits<Windows::UI::IColorsStatics>
{
	using Abi = ABI::Windows::UI::IColorsStatics;
	template <typename T> using Methods = Windows::UI::impl_IColorsStatics<T>;
};

template <> struct Traits<Windows::Devices::Input::IMouseCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::IMouseCapabilities;
	template <typename T> using Methods = Windows::Devices::Input::impl_IMouseCapabilities<T>;
};

template <> struct Traits<Windows::Devices::Input::IKeyboardCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::IKeyboardCapabilities;
	template <typename T> using Methods = Windows::Devices::Input::impl_IKeyboardCapabilities<T>;
};

template <> struct Traits<Windows::Devices::Input::ITouchCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::ITouchCapabilities;
	template <typename T> using Methods = Windows::Devices::Input::impl_ITouchCapabilities<T>;
};

template <> struct Traits<Windows::Devices::Input::IPointerDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Input::IPointerDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Input::impl_IPointerDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Input::IPointerDevice>
{
	using Abi = ABI::Windows::Devices::Input::IPointerDevice;
	template <typename T> using Methods = Windows::Devices::Input::impl_IPointerDevice<T>;
};

template <> struct Traits<Windows::Devices::Input::IMouseEventArgs>
{
	using Abi = ABI::Windows::Devices::Input::IMouseEventArgs;
	template <typename T> using Methods = Windows::Devices::Input::impl_IMouseEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Input::IMouseDevice>
{
	using Abi = ABI::Windows::Devices::Input::IMouseDevice;
	template <typename T> using Methods = Windows::Devices::Input::impl_IMouseDevice<T>;
};

template <> struct Traits<Windows::Devices::Input::IMouseDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Input::IMouseDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Input::impl_IMouseDeviceStatics<T>;
};

template <> struct Traits<Windows::UI::Input::IEdgeGestureEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IEdgeGestureEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IEdgeGestureEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IEdgeGestureStatics>
{
	using Abi = ABI::Windows::UI::Input::IEdgeGestureStatics;
	template <typename T> using Methods = Windows::UI::Input::impl_IEdgeGestureStatics<T>;
};

template <> struct Traits<Windows::UI::Input::IEdgeGesture>
{
	using Abi = ABI::Windows::UI::Input::IEdgeGesture;
	template <typename T> using Methods = Windows::UI::Input::impl_IEdgeGesture<T>;
};

template <> struct Traits<Windows::UI::Input::ITappedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ITappedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_ITappedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IRightTappedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IRightTappedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IRightTappedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IHoldingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IHoldingEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IHoldingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IDraggingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IDraggingEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IDraggingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IManipulationStartedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IManipulationStartedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IManipulationStartedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IManipulationUpdatedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IManipulationUpdatedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IManipulationUpdatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IManipulationInertiaStartingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IManipulationInertiaStartingEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IManipulationInertiaStartingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IManipulationCompletedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IManipulationCompletedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IManipulationCompletedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::ICrossSlidingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ICrossSlidingEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_ICrossSlidingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IMouseWheelParameters>
{
	using Abi = ABI::Windows::UI::Input::IMouseWheelParameters;
	template <typename T> using Methods = Windows::UI::Input::impl_IMouseWheelParameters<T>;
};

template <> struct Traits<Windows::UI::Input::IGestureRecognizer>
{
	using Abi = ABI::Windows::UI::Input::IGestureRecognizer;
	template <typename T> using Methods = Windows::UI::Input::impl_IGestureRecognizer<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerPointStatics>
{
	using Abi = ABI::Windows::UI::Input::IPointerPointStatics;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerPointStatics<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerPointTransform>
{
	using Abi = ABI::Windows::UI::Input::IPointerPointTransform;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerPointTransform<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerPoint>
{
	using Abi = ABI::Windows::UI::Input::IPointerPoint;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerPoint<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerPointProperties>
{
	using Abi = ABI::Windows::UI::Input::IPointerPointProperties;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerPointProperties<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerVisualizationSettings>
{
	using Abi = ABI::Windows::UI::Input::IPointerVisualizationSettings;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerVisualizationSettings<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerVisualizationSettingsStatics>
{
	using Abi = ABI::Windows::UI::Input::IPointerVisualizationSettingsStatics;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerVisualizationSettingsStatics<T>;
};

template <> struct Traits<Windows::UI::Core::IDispatchedHandler>
{
	using Abi = ABI::Windows::UI::Core::IDispatchedHandler;
	template <typename T> using Methods = Windows::UI::Core::impl_IDispatchedHandler<T>;
};

template <> struct Traits<Windows::UI::Core::IIdleDispatchedHandler>
{
	using Abi = ABI::Windows::UI::Core::IIdleDispatchedHandler;
	template <typename T> using Methods = Windows::UI::Core::impl_IIdleDispatchedHandler<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowEventArgs>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IAutomationProviderRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IAutomationProviderRequestedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IAutomationProviderRequestedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICharacterReceivedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::ICharacterReceivedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_ICharacterReceivedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IInputEnabledEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IInputEnabledEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IInputEnabledEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IKeyEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IKeyEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IKeyEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IPointerEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IPointerEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IPointerEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ITouchHitTestingEventArgs>
{
	using Abi = ABI::Windows::UI::Core::ITouchHitTestingEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_ITouchHitTestingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IWindowActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IWindowActivatedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IWindowActivatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IWindowSizeChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IWindowSizeChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IWindowSizeChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IVisibilityChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IVisibilityChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IVisibilityChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindow>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindow;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindow<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowStatic>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowStatic;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowStatic<T>;
};

template <> struct Traits<Windows::UI::Core::IAcceleratorKeyEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IAcceleratorKeyEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IAcceleratorKeyEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreAcceleratorKeys>
{
	using Abi = ABI::Windows::UI::Core::ICoreAcceleratorKeys;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreAcceleratorKeys<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreDispatcher>
{
	using Abi = ABI::Windows::UI::Core::ICoreDispatcher;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreDispatcher<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreDispatcherWithTaskPriority>
{
	using Abi = ABI::Windows::UI::Core::ICoreDispatcherWithTaskPriority;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreDispatcherWithTaskPriority<T>;
};

template <> struct Traits<Windows::UI::Core::IIdleDispatchedHandlerArgs>
{
	using Abi = ABI::Windows::UI::Core::IIdleDispatchedHandlerArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IIdleDispatchedHandlerArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreCursor>
{
	using Abi = ABI::Windows::UI::Core::ICoreCursor;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreCursor<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreCursorFactory>
{
	using Abi = ABI::Windows::UI::Core::ICoreCursorFactory;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreCursorFactory<T>;
};

template <> struct Traits<Windows::UI::Core::IInitializeWithCoreWindow>
{
	using Abi = ABI::Windows::UI::Core::IInitializeWithCoreWindow;
	template <typename T> using Methods = Windows::UI::Core::impl_IInitializeWithCoreWindow<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowResizeManager>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowResizeManager;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowResizeManager<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowResizeManagerLayoutCapability<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowResizeManagerStatics>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowResizeManagerStatics;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowResizeManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreInputSourceBase>
{
	using Abi = ABI::Windows::UI::Core::ICoreInputSourceBase;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreInputSourceBase<T>;
};

template <> struct Traits<Windows::UI::Core::ICorePointerInputSource>
{
	using Abi = ABI::Windows::UI::Core::ICorePointerInputSource;
	template <typename T> using Methods = Windows::UI::Core::impl_ICorePointerInputSource<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreKeyboardInputSource>
{
	using Abi = ABI::Windows::UI::Core::ICoreKeyboardInputSource;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreKeyboardInputSource<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreComponentFocusable>
{
	using Abi = ABI::Windows::UI::Core::ICoreComponentFocusable;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreComponentFocusable<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreTouchHitTesting>
{
	using Abi = ABI::Windows::UI::Core::ICoreTouchHitTesting;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreTouchHitTesting<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowPopupShowingEventArgs>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowPopupShowingEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowPopupShowingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowDialog>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowDialog;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowDialog<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowDialogFactory>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowDialogFactory;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowDialogFactory<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowFlyout>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowFlyout;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowFlyout<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowFlyoutFactory>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowFlyoutFactory;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowFlyoutFactory<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationViewSwitcherStatics;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationViewSwitcherStatics<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationViewInteropStatics>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationViewInteropStatics;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationViewInteropStatics<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationViewStatics2>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationViewStatics2;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationViewStatics2<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationView>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationView;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationView<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationViewConsolidatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IProjectionManagerStatics>
{
	using Abi = ABI::Windows::UI::ViewManagement::IProjectionManagerStatics;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IProjectionManagerStatics<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs>
{
	using Abi = ABI::Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IInputPaneVisibilityEventArgs<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IInputPane>
{
	using Abi = ABI::Windows::UI::ViewManagement::IInputPane;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IInputPane<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IInputPaneStatics>
{
	using Abi = ABI::Windows::UI::ViewManagement::IInputPaneStatics;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IInputPaneStatics<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IAccessibilitySettings>
{
	using Abi = ABI::Windows::UI::ViewManagement::IAccessibilitySettings;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IAccessibilitySettings<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IUISettings>
{
	using Abi = ABI::Windows::UI::ViewManagement::IUISettings;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IUISettings<T>;
};

template <> struct Traits<Windows::System::ILauncherUIOptions>
{
	using Abi = ABI::Windows::System::ILauncherUIOptions;
	template <typename T> using Methods = Windows::System::impl_ILauncherUIOptions<T>;
};

template <> struct Traits<Windows::System::ILauncherOptions>
{
	using Abi = ABI::Windows::System::ILauncherOptions;
	template <typename T> using Methods = Windows::System::impl_ILauncherOptions<T>;
};

template <> struct Traits<Windows::System::ILauncherViewOptions>
{
	using Abi = ABI::Windows::System::ILauncherViewOptions;
	template <typename T> using Methods = Windows::System::impl_ILauncherViewOptions<T>;
};

template <> struct Traits<Windows::System::ILauncherStatics>
{
	using Abi = ABI::Windows::System::ILauncherStatics;
	template <typename T> using Methods = Windows::System::impl_ILauncherStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::ISuspendingDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::ISuspendingDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::impl_ISuspendingDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::ISuspendingOperation>
{
	using Abi = ABI::Windows::ApplicationModel::ISuspendingOperation;
	template <typename T> using Methods = Windows::ApplicationModel::impl_ISuspendingOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::ISuspendingEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::ISuspendingEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::impl_ISuspendingEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::IPackageId>
{
	using Abi = ABI::Windows::ApplicationModel::IPackageId;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IPackageId<T>;
};

template <> struct Traits<Windows::ApplicationModel::IPackage>
{
	using Abi = ABI::Windows::ApplicationModel::IPackage;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IPackage<T>;
};

template <> struct Traits<Windows::ApplicationModel::IPackage2>
{
	using Abi = ABI::Windows::ApplicationModel::IPackage2;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IPackage2<T>;
};

template <> struct Traits<Windows::ApplicationModel::IPackageStatics>
{
	using Abi = ABI::Windows::ApplicationModel::IPackageStatics;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IPackageStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::IDesignModeStatics>
{
	using Abi = ABI::Windows::ApplicationModel::IDesignModeStatics;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IDesignModeStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::IFrameworkView>
{
	using Abi = ABI::Windows::ApplicationModel::Core::IFrameworkView;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_IFrameworkView<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::IFrameworkViewSource>
{
	using Abi = ABI::Windows::ApplicationModel::Core::IFrameworkViewSource;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_IFrameworkViewSource<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplication>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplication;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplication<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationUseCount>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationUseCount;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationUseCount<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationExit>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationExit;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationExit<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreImmersiveApplication>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreImmersiveApplication;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreImmersiveApplication<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreImmersiveApplication2>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreImmersiveApplication2;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreImmersiveApplication2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationUnhandledError<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationView>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationView;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationView<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationView2>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationView2;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationView2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_IUnhandledErrorDetectedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::IUnhandledError>
{
	using Abi = ABI::Windows::ApplicationModel::Core::IUnhandledError;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_IUnhandledError<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataProviderHandler>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataProviderHandler;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataProviderHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IStandardDataFormatsStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IStandardDataFormatsStatics2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySetView<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySetView2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySet<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySet2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataProviderDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataProviderDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataProviderDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataProviderRequest>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataProviderRequest;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataProviderRequest<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IOperationCompletedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackageView>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackageView;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackageView<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackageView2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackageView2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackageView2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackage>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackage;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackage<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackage2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackage2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackage2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IHtmlFormatHelperStatics>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IHtmlFormatHelperStatics;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IHtmlFormatHelperStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IClipboardStatics>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IClipboardStatics;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IClipboardStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataRequestDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataRequestDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataRequest>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataRequest;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataRequest<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataRequestedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_ITargetApplicationChosenEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataTransferManager>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataTransferManager;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataTransferManager<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataTransferManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::ShareTarget::impl_IQuickLink<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::ShareTarget::impl_IShareOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::ShareTarget::impl_IShareOperation2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneQueryLinguisticDetails<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneVisibilityChangedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneQueryChangedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneQuerySubmittedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneResultSuggestionChosenEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchSuggestionCollection>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchSuggestionCollection;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchSuggestionCollection<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneSuggestionsRequestDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneSuggestionsRequest<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneSuggestionsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ILocalContentSuggestionSettings>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ILocalContentSuggestionSettings;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ILocalContentSuggestionSettings<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneStaticsWithHideThisApplication>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneStaticsWithHideThisApplication;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneStaticsWithHideThisApplication<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPane>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPane;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPane<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetailsFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchQueryLinguisticDetailsFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchQueryLinguisticDetailsFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchQueryLinguisticDetails<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchSuggestionsRequestDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchSuggestionsRequest>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchSuggestionsRequest;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchSuggestionsRequest<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfigurationSaveRequestedDeferral<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfigurationSaveRequest<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfigurationSaveRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintTaskConfiguration>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfiguration;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfiguration<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintNotificationEventDetails<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintExtensionContextStatic>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintExtensionContextStatic;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintExtensionContextStatic<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IFileRemovedEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IFileRemovedEventArgs;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IFileRemovedEventArgs<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IFileOpenPickerUI>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IFileOpenPickerUI;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IFileOpenPickerUI<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IPickerClosingEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IPickerClosingEventArgs;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IPickerClosingEventArgs<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IPickerClosingOperation>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IPickerClosingOperation;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IPickerClosingOperation<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IPickerClosingDeferral>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IPickerClosingDeferral;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IPickerClosingDeferral<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IFileSavePickerUI>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IFileSavePickerUI;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IFileSavePickerUI<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_ITargetFileRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::ITargetFileRequest>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::ITargetFileRequest;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_ITargetFileRequest<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_ITargetFileRequestDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ISplashScreen>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ISplashScreen;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ISplashScreen<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IApplicationViewActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IPrelaunchActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ILaunchActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ISearchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ISearchActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ISearchActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ISearchActivatedEventArgsWithLinguisticDetails<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IShareTargetActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IFileActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IFileActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IFileActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IFileActivatedEventArgsWithNeighboringFiles<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IProtocolActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IFileOpenPickerActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IFileSavePickerActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ICachedFileUpdaterActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactPickerActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IDeviceActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IPrintTaskSettingsActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ICameraSettingsActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderAddAppointmentActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactCallActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactMessageActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactMapActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactPostActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactVideoCallActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactsProviderActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IRestrictedLaunchActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ILockScreenCallActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskCanceledEventHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskProgressEventHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskCompletedEventHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IAlarmApplicationManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundExecutionManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskInstance>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskInstance;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskInstance<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundWorkCostStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundWorkCostStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundWorkCostStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskInstance2>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskInstance2;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskInstance2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTask>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTask;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTask<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskRegistration>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskRegistration;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskRegistration<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskRegistrationStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskBuilder;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskBuilder<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundCondition>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundCondition;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundCondition<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskBuilder2>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskBuilder2;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskBuilder2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskCompletedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskProgressEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ISystemTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ISystemTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ISystemTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ISystemTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ISystemTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ISystemTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ISystemCondition>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ISystemCondition;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ISystemCondition<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ISystemConditionFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ISystemConditionFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ISystemConditionFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_INetworkOperatorNotificationTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::INetworkOperatorNotificationTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::INetworkOperatorNotificationTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_INetworkOperatorNotificationTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ITimeTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ITimeTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ITimeTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ITimeTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ITimeTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ITimeTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IMaintenanceTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IMaintenanceTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IMaintenanceTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IMaintenanceTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IMaintenanceTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IMaintenanceTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IDeviceUseTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IDeviceUseTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IDeviceUseTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IDeviceServicingTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IDeviceServicingTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IDeviceServicingTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ILocationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ILocationTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ILocationTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ILocationTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ILocationTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ILocationTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_INetworkOperatorHotspotAuthenticationTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IPushNotificationTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IPushNotificationTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IPushNotificationTriggerFactory<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowFactory>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowFactory;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Infrastructure::ISetWindowWithWindowFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Infrastructure::ISetWindowWithWindowFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Infrastructure::impl_ISetWindowWithWindowFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceManager>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceManager;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceManager<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceQualifier>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceQualifier;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceQualifier<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceContext>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceContext;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceContext<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceContextStatics2>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceContextStatics2;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceContextStatics2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceCandidate>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceCandidate;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceCandidate<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::INamedResource>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::INamedResource;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_INamedResource<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceMap>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceMap;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceMap<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::IResourceLoader>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::IResourceLoader;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::impl_IResourceLoader<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::IResourceLoader2>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::IResourceLoader2;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::impl_IResourceLoader2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::IResourceLoaderStatics2>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::IResourceLoaderStatics2;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::impl_IResourceLoaderStatics2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IResourceIndexer>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IResourceIndexer;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IResourceIndexer<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IResourceIndexerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory2>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory2;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IResourceIndexerFactory2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IIndexedResourceQualifier<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IIndexedResourceCandidate<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ILicenseChangedEventHandler>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ILicenseChangedEventHandler;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ILicenseChangedEventHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ICurrentApp>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ICurrentApp;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ICurrentApp<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ICurrentAppWithConsumables>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ICurrentAppWithConsumables;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ICurrentAppWithConsumables<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ICurrentAppSimulator>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ICurrentAppSimulator;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ICurrentAppSimulator<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ICurrentAppSimulatorWithConsumables>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ICurrentAppSimulatorWithConsumables;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ICurrentAppSimulatorWithConsumables<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IPurchaseResults>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IPurchaseResults;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IPurchaseResults<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ILicenseInformation>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ILicenseInformation;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ILicenseInformation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductLicense>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductLicense;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductLicense<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IListingInformation>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IListingInformation;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IListingInformation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductListing>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductListing;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductListing<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductListingWithConsumables>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductListingWithConsumables;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductListingWithConsumables<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IUnfulfilledConsumable>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IUnfulfilledConsumable;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IUnfulfilledConsumable<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductPurchaseDisplayProperties<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductPurchaseDisplayPropertiesFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductPurchaseDisplayPropertiesFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductPurchaseDisplayPropertiesFactory<T>;
};

template <> struct Traits<Windows::Data::Html::IHtmlUtilities>
{
	using Abi = ABI::Windows::Data::Html::IHtmlUtilities;
	template <typename T> using Methods = Windows::Data::Html::impl_IHtmlUtilities<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonValue>
{
	using Abi = ABI::Windows::Data::Json::IJsonValue;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonValue<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonValueStatics>
{
	using Abi = ABI::Windows::Data::Json::IJsonValueStatics;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonValueStatics<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonObject>
{
	using Abi = ABI::Windows::Data::Json::IJsonObject;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonObject<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonObjectWithDefaultValues>
{
	using Abi = ABI::Windows::Data::Json::IJsonObjectWithDefaultValues;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonObjectWithDefaultValues<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonObjectStatics>
{
	using Abi = ABI::Windows::Data::Json::IJsonObjectStatics;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonObjectStatics<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonArray>
{
	using Abi = ABI::Windows::Data::Json::IJsonArray;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonArray<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonArrayStatics>
{
	using Abi = ABI::Windows::Data::Json::IJsonArrayStatics;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonArrayStatics<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonErrorStatics2>
{
	using Abi = ABI::Windows::Data::Json::IJsonErrorStatics2;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonErrorStatics2<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfPageDimensions>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfPageDimensions;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfPageDimensions<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfPageRenderOptions>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfPageRenderOptions;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfPageRenderOptions<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfPage>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfPage;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfPage<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfDocument>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfDocument;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfDocument<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfDocumentStatics>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfDocumentStatics;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfDocumentStatics<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNodeSelector>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNodeSelector;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNodeSelector<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNodeSerializer;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNodeSerializer<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNode>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNode;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNode<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDomImplementation>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDomImplementation;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDomImplementation<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocumentType>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocumentType;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocumentType<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlAttribute>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlAttribute;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlAttribute<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocumentFragment>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocumentFragment;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocumentFragment<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlElement>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlElement;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlElement<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IDtdNotation>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IDtdNotation;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IDtdNotation<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IDtdEntity>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IDtdEntity;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IDtdEntity<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlEntityReference>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlEntityReference;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlEntityReference<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlProcessingInstruction>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlProcessingInstruction;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlProcessingInstruction<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlCharacterData>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlCharacterData;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlCharacterData<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlComment>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlComment;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlComment<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlText>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlText;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlText<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlCDataSection>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlCDataSection;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlCDataSection<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocument>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocument;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocument<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNamedNodeMap>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNamedNodeMap;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNamedNodeMap<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNodeList>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNodeList;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNodeList<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlLoadSettings>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlLoadSettings;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlLoadSettings<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocumentIO>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocumentIO;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocumentIO<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocumentStatics>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocumentStatics;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocumentStatics<T>;
};

template <> struct Traits<Windows::Data::Xml::Xsl::IXsltProcessor>
{
	using Abi = ABI::Windows::Data::Xml::Xsl::IXsltProcessor;
	template <typename T> using Methods = Windows::Data::Xml::Xsl::impl_IXsltProcessor<T>;
};

template <> struct Traits<Windows::Data::Xml::Xsl::IXsltProcessorFactory>
{
	using Abi = ABI::Windows::Data::Xml::Xsl::IXsltProcessorFactory;
	template <typename T> using Methods = Windows::Data::Xml::Xsl::impl_IXsltProcessorFactory<T>;
};

template <> struct Traits<Windows::Devices::Background::IDeviceUseDetails>
{
	using Abi = ABI::Windows::Devices::Background::IDeviceUseDetails;
	template <typename T> using Methods = Windows::Devices::Background::impl_IDeviceUseDetails<T>;
};

template <> struct Traits<Windows::Devices::Background::IDeviceServicingDetails>
{
	using Abi = ABI::Windows::Devices::Background::IDeviceServicingDetails;
	template <typename T> using Methods = Windows::Devices::Background::impl_IDeviceServicingDetails<T>;
};

template <> struct Traits<Windows::Devices::Custom::IKnownDeviceTypesStatics>
{
	using Abi = ABI::Windows::Devices::Custom::IKnownDeviceTypesStatics;
	template <typename T> using Methods = Windows::Devices::Custom::impl_IKnownDeviceTypesStatics<T>;
};

template <> struct Traits<Windows::Devices::Custom::IIOControlCode>
{
	using Abi = ABI::Windows::Devices::Custom::IIOControlCode;
	template <typename T> using Methods = Windows::Devices::Custom::impl_IIOControlCode<T>;
};

template <> struct Traits<Windows::Devices::Custom::IIOControlCodeFactory>
{
	using Abi = ABI::Windows::Devices::Custom::IIOControlCodeFactory;
	template <typename T> using Methods = Windows::Devices::Custom::impl_IIOControlCodeFactory<T>;
};

template <> struct Traits<Windows::Devices::Custom::ICustomDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Custom::ICustomDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Custom::impl_ICustomDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Custom::ICustomDevice>
{
	using Abi = ABI::Windows::Devices::Custom::ICustomDevice;
	template <typename T> using Methods = Windows::Devices::Custom::impl_ICustomDevice<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IEnclosureLocation>
{
	using Abi = ABI::Windows::Devices::Enumeration::IEnclosureLocation;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IEnclosureLocation<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceInformationUpdate>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceInformationUpdate;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceInformationUpdate<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceWatcher>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceWatcher;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceWatcher<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceInformationStatics>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceInformationStatics;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceInformationStatics<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceInformation>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceInformation;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceInformation<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceAccessChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceAccessInformation>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceAccessInformation;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceAccessInformation<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceAccessInformationStatics>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceAccessInformationStatics;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceAccessInformationStatics<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate;
	template <typename T> using Methods = Windows::Devices::Enumeration::Pnp::impl_IPnpObjectUpdate<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher;
	template <typename T> using Methods = Windows::Devices::Enumeration::Pnp::impl_IPnpObjectWatcher<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::IPnpObjectStatics>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::IPnpObjectStatics;
	template <typename T> using Methods = Windows::Devices::Enumeration::Pnp::impl_IPnpObjectStatics<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::IPnpObject>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::IPnpObject;
	template <typename T> using Methods = Windows::Devices::Enumeration::Pnp::impl_IPnpObject<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeoshape>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeoshape;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeoshape<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeopoint>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeopoint;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeopoint<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeopointFactory>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeopointFactory;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeopointFactory<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocoordinateSatelliteData>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocoordinateSatelliteData;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocoordinateSatelliteData<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocoordinate>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocoordinate;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocoordinate<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocoordinateWithPositionData>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocoordinateWithPositionData;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocoordinateWithPositionData<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocoordinateWithPoint>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocoordinateWithPoint;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocoordinateWithPoint<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::ICivicAddress>
{
	using Abi = ABI::Windows::Devices::Geolocation::ICivicAddress;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_ICivicAddress<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeoposition>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeoposition;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeoposition<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IPositionChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Geolocation::IPositionChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IPositionChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IStatusChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Geolocation::IStatusChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IStatusChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeolocator>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeolocator;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeolocator<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeolocatorWithScalarAccuracy>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeolocatorWithScalarAccuracy;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeolocatorWithScalarAccuracy<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocircle>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocircle;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocircle<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocircleFactory>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocircleFactory;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocircleFactory<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofenceFactory>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofenceFactory;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofenceFactory<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofence>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofence;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofence<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofenceStateChangeReport>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofenceStateChangeReport;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofenceStateChangeReport<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofenceMonitorStatics>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofenceMonitorStatics;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofenceMonitorStatics<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofenceMonitor<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidDeviceStatics>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidDeviceStatics;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidBooleanControlDescription<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidNumericControlDescription<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidCollection>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidCollection;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidCollection<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidInputReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidInputReport;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidInputReport<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidOutputReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidOutputReport;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidOutputReport<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidFeatureReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidFeatureReport;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidFeatureReport<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidInputReportReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidBooleanControl>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidBooleanControl;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidBooleanControl<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidNumericControl>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidNumericControl;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidNumericControl<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidDevice>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidDevice;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidDevice<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IUnifiedPosErrorData>
{
	using Abi = ABI::Windows::Devices::PointOfService::IUnifiedPosErrorData;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IUnifiedPosErrorData<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerStatusUpdatedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeSymbologiesStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeSymbologiesStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeSymbologiesStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerDataReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerReport>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerReport;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerReport<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerErrorOccurredEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerImagePreviewReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerCapabilities>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerCapabilities;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerCapabilities<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScanner>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScanner;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScanner<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderEncryptionAlgorithmsStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderEncryptionAlgorithmsStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderCardTypesStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderCardTypesStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderCardTypesStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderTrackData>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderTrackData;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderTrackData<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderReport>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderReport;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderReport<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderErrorOccurredEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderStatusUpdatedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderCapabilities<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReader>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReader;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReader<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IClaimedBarcodeScanner>
{
	using Abi = ABI::Windows::Devices::PointOfService::IClaimedBarcodeScanner;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IClaimedBarcodeScanner<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IClaimedMagneticStripeReader>
{
	using Abi = ABI::Windows::Devices::PointOfService::IClaimedMagneticStripeReader;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IClaimedMagneticStripeReader<T>;
};

template <> struct Traits<Windows::Devices::Portable::IStorageDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Portable::IStorageDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Portable::impl_IStorageDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Portable::IServiceDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Portable::IServiceDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Portable::impl_IServiceDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometerStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometerStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometerStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometer>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometer;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometer<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometerReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometerReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometerReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometerShakenEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometerShakenEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometerShakenEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometerStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometerStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometerStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometer>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometer;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometer<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometerReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometerReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometerReadingYawAccuracy>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometerReadingYawAccuracy;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometerReadingYawAccuracy<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometerReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IGyrometerStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::IGyrometerStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IGyrometerStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IGyrometer>
{
	using Abi = ABI::Windows::Devices::Sensors::IGyrometer;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IGyrometer<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IGyrometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::IGyrometerReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IGyrometerReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IGyrometerReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompassStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompassStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompassStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompass>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompass;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompass<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompassReading>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompassReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompassReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompassReadingHeadingAccuracy>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompassReadingHeadingAccuracy;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompassReadingHeadingAccuracy<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompassReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompassReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompassReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ILightSensorStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::ILightSensorStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ILightSensorStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ILightSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::ILightSensor;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ILightSensor<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ILightSensorReading>
{
	using Abi = ABI::Windows::Devices::Sensors::ILightSensorReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ILightSensorReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ILightSensorReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISensorRotationMatrix>
{
	using Abi = ABI::Windows::Devices::Sensors::ISensorRotationMatrix;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISensorRotationMatrix<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISensorQuaternion>
{
	using Abi = ABI::Windows::Devices::Sensors::ISensorQuaternion;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISensorQuaternion<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensorStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensorStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensorStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensor;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensor<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensorReading>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensorReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensorReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensorReadingYawAccuracy<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensorReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISimpleOrientationSensorStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensorStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensorStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISimpleOrientationSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensor;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensor<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensorOrientationChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardPinResetHandler>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardPinResetHandler;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardPinResetHandler<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardReaderStatics>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardReaderStatics;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardReaderStatics<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardReader>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardReader;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardReader<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ICardAddedEventArgs>
{
	using Abi = ABI::Windows::Devices::SmartCards::ICardAddedEventArgs;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ICardAddedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ICardRemovedEventArgs>
{
	using Abi = ABI::Windows::Devices::SmartCards::ICardRemovedEventArgs;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ICardRemovedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCard>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCard;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCard<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardProvisioningStatics>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardProvisioningStatics;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardProvisioningStatics<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardProvisioning>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardProvisioning;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardProvisioning<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardPinResetRequest>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardPinResetRequest;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardPinResetRequest<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardPinResetDeferral>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardPinResetDeferral;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardPinResetDeferral<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardPinPolicy>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardPinPolicy;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardPinPolicy<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardChallengeContext>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardChallengeContext;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardChallengeContext<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsMessageReceivedEventHandler>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsMessageReceivedEventHandler;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsMessageReceivedEventHandler<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDeviceStatusChangedEventHandler<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsMessage>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsMessage;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsMessage<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsBinaryMessage>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsBinaryMessage;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsBinaryMessage<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsTextMessage>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsTextMessage;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsTextMessage<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsTextMessageStatics>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsTextMessageStatics;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsTextMessageStatics<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDeviceMessageStore>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDeviceMessageStore;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDeviceMessageStore<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsMessageReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsMessageReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDeviceStatics2>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDeviceStatics2;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDeviceStatics2<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDevice>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDevice;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDevice<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsReceivedEventDetails>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsReceivedEventDetails;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsReceivedEventDetails<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsReceivedEventDetails2>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsReceivedEventDetails2;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsReceivedEventDetails2<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbControlRequestType>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbControlRequestType;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbControlRequestType<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbSetupPacketFactory>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbSetupPacketFactory;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbSetupPacketFactory<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbSetupPacket>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbSetupPacket;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbSetupPacket<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceClass>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceClass;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceClass<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceClassesStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceClassesStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceClassesStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceClasses>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceClasses;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceClasses<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbConfigurationDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbConfigurationDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbConfigurationDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbConfigurationDescriptorStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbConfigurationDescriptorStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbConfigurationDescriptorStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterfaceDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterfaceDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterfaceDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterfaceDescriptorStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterfaceDescriptorStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterfaceDescriptorStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbEndpointDescriptorStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbEndpointDescriptorStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbEndpointDescriptorStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptInEventArgs>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptInEventArgs;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptInEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbBulkInPipe>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbBulkInPipe;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbBulkInPipe<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptInPipe>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptInPipe;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptInPipe<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbBulkOutPipe>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbBulkOutPipe;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbBulkOutPipe<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptOutPipe>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptOutPipe;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptOutPipe<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbConfiguration>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbConfiguration;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbConfiguration<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterface>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterface;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterface<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterfaceSetting>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterfaceSetting;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterfaceSetting<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbBulkInEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbBulkInEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbBulkInEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptInEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptInEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptInEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbBulkOutEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbBulkOutEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbBulkOutEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptOutEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptOutEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptOutEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDevice>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDevice;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDevice<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkStatusChangedEventHandler>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkStatusChangedEventHandler;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkStatusChangedEventHandler<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IDataPlanUsage>
{
	using Abi = ABI::Windows::Networking::Connectivity::IDataPlanUsage;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IDataPlanUsage<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IDataPlanStatus>
{
	using Abi = ABI::Windows::Networking::Connectivity::IDataPlanStatus;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IDataPlanStatus<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionCost>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionCost;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionCost<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkSecuritySettings>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkSecuritySettings;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkSecuritySettings<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionProfile>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionProfile;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionProfile<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IWwanConnectionProfileDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::IWwanConnectionProfileDetails;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IWwanConnectionProfileDetails<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IWlanConnectionProfileDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::IWlanConnectionProfileDetails;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IWlanConnectionProfileDetails<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectivityInterval>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectivityInterval;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectivityInterval<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkUsage>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkUsage;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkUsage<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionProfile2>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionProfile2;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionProfile2<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::ILanIdentifierData>
{
	using Abi = ABI::Windows::Networking::Connectivity::ILanIdentifierData;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_ILanIdentifierData<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::ILanIdentifier>
{
	using Abi = ABI::Windows::Networking::Connectivity::ILanIdentifier;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_ILanIdentifier<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkInformationStatics>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkInformationStatics;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkInformationStatics<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionProfileFilter>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionProfileFilter;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionProfileFilter<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkInformationStatics2>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkInformationStatics2;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkInformationStatics2<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkItem>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkItem;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkItem<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkAdapter>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkAdapter;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkAdapter<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IIPInformation>
{
	using Abi = ABI::Windows::Networking::Connectivity::IIPInformation;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IIPInformation<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IProxyConfiguration>
{
	using Abi = ABI::Windows::Networking::Connectivity::IProxyConfiguration;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IProxyConfiguration<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionSession>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionSession;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionSession<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IRoutePolicy>
{
	using Abi = ABI::Windows::Networking::Connectivity::IRoutePolicy;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IRoutePolicy<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IRoutePolicyFactory>
{
	using Abi = ABI::Windows::Networking::Connectivity::IRoutePolicyFactory;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IRoutePolicyFactory<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::ICellularApnContext>
{
	using Abi = ABI::Windows::Networking::Connectivity::ICellularApnContext;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_ICellularApnContext<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectivityManagerStatics>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectivityManagerStatics;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectivityManagerStatics<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkStateChangeEventDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkStateChangeEventDetails;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkStateChangeEventDetails<T>;
};

template <> struct Traits<Windows::Networking::IHostNameStatics>
{
	using Abi = ABI::Windows::Networking::IHostNameStatics;
	template <typename T> using Methods = Windows::Networking::impl_IHostNameStatics<T>;
};

template <> struct Traits<Windows::Networking::IHostName>
{
	using Abi = ABI::Windows::Networking::IHostName;
	template <typename T> using Methods = Windows::Networking::impl_IHostName<T>;
};

template <> struct Traits<Windows::Networking::IHostNameFactory>
{
	using Abi = ABI::Windows::Networking::IHostNameFactory;
	template <typename T> using Methods = Windows::Networking::impl_IHostNameFactory<T>;
};

template <> struct Traits<Windows::Networking::IEndpointPair>
{
	using Abi = ABI::Windows::Networking::IEndpointPair;
	template <typename T> using Methods = Windows::Networking::impl_IEndpointPair<T>;
};

template <> struct Traits<Windows::Networking::IEndpointPairFactory>
{
	using Abi = ABI::Windows::Networking::IEndpointPairFactory;
	template <typename T> using Methods = Windows::Networking::impl_IEndpointPairFactory<T>;
};

template <> struct Traits<Windows::Devices::WiFiDirect::IWiFiDirectDeviceStatics>
{
	using Abi = ABI::Windows::Devices::WiFiDirect::IWiFiDirectDeviceStatics;
	template <typename T> using Methods = Windows::Devices::WiFiDirect::impl_IWiFiDirectDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::WiFiDirect::IWiFiDirectDevice>
{
	using Abi = ABI::Windows::Devices::WiFiDirect::IWiFiDirectDevice;
	template <typename T> using Methods = Windows::Devices::WiFiDirect::impl_IWiFiDirectDevice<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ITracingStatusChangedEventArgs<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_IAsyncCausalityTracerStatics<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::IErrorReportingSettings>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::IErrorReportingSettings;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_IErrorReportingSettings<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingChannel>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannel;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingChannel<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingChannelFactory>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannelFactory;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingChannelFactory<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingActivity>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingActivity;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingActivity<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingActivityFactory>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingActivityFactory;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingActivityFactory<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingSession>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingSession;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingSession<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingSessionFactory>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingSessionFactory;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingSessionFactory<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILogFileGeneratedEventArgs<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::IFileLoggingSession>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::IFileLoggingSession;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_IFileLoggingSession<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::IFileLoggingSessionFactory>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::IFileLoggingSessionFactory;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_IFileLoggingSessionFactory<T>;
};

template <> struct Traits<Windows::Globalization::Collation::ICharacterGrouping>
{
	using Abi = ABI::Windows::Globalization::Collation::ICharacterGrouping;
	template <typename T> using Methods = Windows::Globalization::Collation::impl_ICharacterGrouping<T>;
};

template <> struct Traits<Windows::Globalization::Collation::ICharacterGroupings>
{
	using Abi = ABI::Windows::Globalization::Collation::ICharacterGroupings;
	template <typename T> using Methods = Windows::Globalization::Collation::impl_ICharacterGroupings<T>;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::IDateTimeFormatter>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::IDateTimeFormatter;
	template <typename T> using Methods = Windows::Globalization::DateTimeFormatting::impl_IDateTimeFormatter<T>;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::IDateTimeFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::IDateTimeFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::DateTimeFormatting::impl_IDateTimeFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::IDateTimeFormatterStatics>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::IDateTimeFormatterStatics;
	template <typename T> using Methods = Windows::Globalization::DateTimeFormatting::impl_IDateTimeFormatterStatics<T>;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::IDateTimeFormatter2>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::IDateTimeFormatter2;
	template <typename T> using Methods = Windows::Globalization::DateTimeFormatting::impl_IDateTimeFormatter2<T>;
};

template <> struct Traits<Windows::UI::Text::ITextConstantsStatics>
{
	using Abi = ABI::Windows::UI::Text::ITextConstantsStatics;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextConstantsStatics<T>;
};

template <> struct Traits<Windows::UI::Text::ITextDocument>
{
	using Abi = ABI::Windows::UI::Text::ITextDocument;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextDocument<T>;
};

template <> struct Traits<Windows::UI::Text::ITextRange>
{
	using Abi = ABI::Windows::UI::Text::ITextRange;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextRange<T>;
};

template <> struct Traits<Windows::UI::Text::ITextSelection>
{
	using Abi = ABI::Windows::UI::Text::ITextSelection;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextSelection<T>;
};

template <> struct Traits<Windows::UI::Text::ITextCharacterFormat>
{
	using Abi = ABI::Windows::UI::Text::ITextCharacterFormat;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextCharacterFormat<T>;
};

template <> struct Traits<Windows::UI::Text::ITextParagraphFormat>
{
	using Abi = ABI::Windows::UI::Text::ITextParagraphFormat;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextParagraphFormat<T>;
};

template <> struct Traits<Windows::UI::Text::IFontWeights>
{
	using Abi = ABI::Windows::UI::Text::IFontWeights;
	template <typename T> using Methods = Windows::UI::Text::impl_IFontWeights<T>;
};

template <> struct Traits<Windows::UI::Text::IFontWeightsStatics>
{
	using Abi = ABI::Windows::UI::Text::IFontWeightsStatics;
	template <typename T> using Methods = Windows::UI::Text::impl_IFontWeightsStatics<T>;
};

template <> struct Traits<Windows::Globalization::Fonts::ILanguageFontGroup>
{
	using Abi = ABI::Windows::Globalization::Fonts::ILanguageFontGroup;
	template <typename T> using Methods = Windows::Globalization::Fonts::impl_ILanguageFontGroup<T>;
};

template <> struct Traits<Windows::Globalization::Fonts::ILanguageFontGroupFactory>
{
	using Abi = ABI::Windows::Globalization::Fonts::ILanguageFontGroupFactory;
	template <typename T> using Methods = Windows::Globalization::Fonts::impl_ILanguageFontGroupFactory<T>;
};

template <> struct Traits<Windows::Globalization::Fonts::ILanguageFont>
{
	using Abi = ABI::Windows::Globalization::Fonts::ILanguageFont;
	template <typename T> using Methods = Windows::Globalization::Fonts::impl_ILanguageFont<T>;
};

template <> struct Traits<Windows::Globalization::IJapanesePhoneticAnalyzerStatics>
{
	using Abi = ABI::Windows::Globalization::IJapanesePhoneticAnalyzerStatics;
	template <typename T> using Methods = Windows::Globalization::impl_IJapanesePhoneticAnalyzerStatics<T>;
};

template <> struct Traits<Windows::Globalization::IJapanesePhoneme>
{
	using Abi = ABI::Windows::Globalization::IJapanesePhoneme;
	template <typename T> using Methods = Windows::Globalization::impl_IJapanesePhoneme<T>;
};

template <> struct Traits<Windows::Globalization::ICalendarIdentifiersStatics>
{
	using Abi = ABI::Windows::Globalization::ICalendarIdentifiersStatics;
	template <typename T> using Methods = Windows::Globalization::impl_ICalendarIdentifiersStatics<T>;
};

template <> struct Traits<Windows::Globalization::IClockIdentifiersStatics>
{
	using Abi = ABI::Windows::Globalization::IClockIdentifiersStatics;
	template <typename T> using Methods = Windows::Globalization::impl_IClockIdentifiersStatics<T>;
};

template <> struct Traits<Windows::Globalization::INumeralSystemIdentifiersStatics>
{
	using Abi = ABI::Windows::Globalization::INumeralSystemIdentifiersStatics;
	template <typename T> using Methods = Windows::Globalization::impl_INumeralSystemIdentifiersStatics<T>;
};

template <> struct Traits<Windows::Globalization::ICurrencyIdentifiersStatics>
{
	using Abi = ABI::Windows::Globalization::ICurrencyIdentifiersStatics;
	template <typename T> using Methods = Windows::Globalization::impl_ICurrencyIdentifiersStatics<T>;
};

template <> struct Traits<Windows::Globalization::IGeographicRegion>
{
	using Abi = ABI::Windows::Globalization::IGeographicRegion;
	template <typename T> using Methods = Windows::Globalization::impl_IGeographicRegion<T>;
};

template <> struct Traits<Windows::Globalization::IGeographicRegionFactory>
{
	using Abi = ABI::Windows::Globalization::IGeographicRegionFactory;
	template <typename T> using Methods = Windows::Globalization::impl_IGeographicRegionFactory<T>;
};

template <> struct Traits<Windows::Globalization::IGeographicRegionStatics>
{
	using Abi = ABI::Windows::Globalization::IGeographicRegionStatics;
	template <typename T> using Methods = Windows::Globalization::impl_IGeographicRegionStatics<T>;
};

template <> struct Traits<Windows::Globalization::ILanguage>
{
	using Abi = ABI::Windows::Globalization::ILanguage;
	template <typename T> using Methods = Windows::Globalization::impl_ILanguage<T>;
};

template <> struct Traits<Windows::Globalization::ILanguageExtensionSubtags>
{
	using Abi = ABI::Windows::Globalization::ILanguageExtensionSubtags;
	template <typename T> using Methods = Windows::Globalization::impl_ILanguageExtensionSubtags<T>;
};

template <> struct Traits<Windows::Globalization::ILanguageFactory>
{
	using Abi = ABI::Windows::Globalization::ILanguageFactory;
	template <typename T> using Methods = Windows::Globalization::impl_ILanguageFactory<T>;
};

template <> struct Traits<Windows::Globalization::ILanguageStatics>
{
	using Abi = ABI::Windows::Globalization::ILanguageStatics;
	template <typename T> using Methods = Windows::Globalization::impl_ILanguageStatics<T>;
};

template <> struct Traits<Windows::Globalization::ICalendar>
{
	using Abi = ABI::Windows::Globalization::ICalendar;
	template <typename T> using Methods = Windows::Globalization::impl_ICalendar<T>;
};

template <> struct Traits<Windows::Globalization::ICalendarFactory2>
{
	using Abi = ABI::Windows::Globalization::ICalendarFactory2;
	template <typename T> using Methods = Windows::Globalization::impl_ICalendarFactory2<T>;
};

template <> struct Traits<Windows::Globalization::ITimeZoneOnCalendar>
{
	using Abi = ABI::Windows::Globalization::ITimeZoneOnCalendar;
	template <typename T> using Methods = Windows::Globalization::impl_ITimeZoneOnCalendar<T>;
};

template <> struct Traits<Windows::Globalization::ICalendarFactory>
{
	using Abi = ABI::Windows::Globalization::ICalendarFactory;
	template <typename T> using Methods = Windows::Globalization::impl_ICalendarFactory<T>;
};

template <> struct Traits<Windows::Globalization::IApplicationLanguagesStatics>
{
	using Abi = ABI::Windows::Globalization::IApplicationLanguagesStatics;
	template <typename T> using Methods = Windows::Globalization::impl_IApplicationLanguagesStatics<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberRounder;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberRounder<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ISignificantDigitsNumberRounder<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IIncrementNumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IIncrementNumberRounder;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_IIncrementNumberRounder<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberFormatter;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberFormatter<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberFormatter2>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberFormatter2;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberFormatter2<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberParser>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberParser;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberParser<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberFormatterOptions>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberFormatterOptions;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberFormatterOptions<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ISignificantDigitsOption>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ISignificantDigitsOption;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ISignificantDigitsOption<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberRounderOption>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberRounderOption;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberRounderOption<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ISignedZeroOption;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ISignedZeroOption<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IDecimalFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IDecimalFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_IDecimalFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IPercentFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IPercentFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_IPercentFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IPermilleFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IPermilleFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_IPermilleFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ICurrencyFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ICurrencyFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ICurrencyFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ICurrencyFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ICurrencyFormatter;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ICurrencyFormatter<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ICurrencyFormatter2>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ICurrencyFormatter2;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ICurrencyFormatter2<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumeralSystemTranslatorFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumeralSystemTranslatorFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumeralSystemTranslatorFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumeralSystemTranslator>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumeralSystemTranslator;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumeralSystemTranslator<T>;
};

template <> struct Traits<Windows::Graphics::Display::IDisplayInformationStatics>
{
	using Abi = ABI::Windows::Graphics::Display::IDisplayInformationStatics;
	template <typename T> using Methods = Windows::Graphics::Display::impl_IDisplayInformationStatics<T>;
};

template <> struct Traits<Windows::Graphics::Display::IDisplayInformation>
{
	using Abi = ABI::Windows::Graphics::Display::IDisplayInformation;
	template <typename T> using Methods = Windows::Graphics::Display::impl_IDisplayInformation<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapTransform>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapTransform;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapTransform<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapTypedValue>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapTypedValue;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapTypedValue<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapTypedValueFactory>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapTypedValueFactory;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapTypedValueFactory<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapPropertiesView>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapPropertiesView;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapPropertiesView<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapProperties>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapProperties;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapProperties<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IPixelDataProvider>
{
	using Abi = ABI::Windows::Graphics::Imaging::IPixelDataProvider;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IPixelDataProvider<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapFrame>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapFrame;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapFrame<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapCodecInformation>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapCodecInformation;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapCodecInformation<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapDecoderStatics>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapDecoderStatics;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapDecoderStatics<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapDecoder>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapDecoder;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapDecoder<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapEncoderStatics>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapEncoderStatics;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapEncoderStatics<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapEncoder>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapEncoder;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapEncoder<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskSourceRequestedHandler<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskOptionsCoreProperties<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskOptionsCoreUIConfiguration<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskOptionsCore>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskOptionsCore;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskOptionsCore<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic>
{
	using Abi = ABI::Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IStandardPrintTaskOptionsStatic<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintDocumentSource>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintDocumentSource;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintDocumentSource<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskProgressingEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskProgressingEventArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskProgressingEventArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskCompletedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskCompletedEventArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskCompletedEventArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTask>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTask;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTask<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskTargetDeviceSupport<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskSourceRequestedDeferral<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskSourceRequestedArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskRequestedDeferral>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskRequestedDeferral;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskRequestedDeferral<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskRequest>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskRequest;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskRequest<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskRequestedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskRequestedEventArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintManagerStatic>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintManagerStatic;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintManagerStatic<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintManager>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintManager;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintManager<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintNumberOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintNumberOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintNumberOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintTextOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintTextOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintTextOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintItemListOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintCustomOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintCustomTextOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintCustomTextOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintCustomTextOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintCustomItemDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintCustomItemDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintCustomItemDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintCustomItemListOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintCustomItemListOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintCustomItemListOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionChangedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionChangedEventArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintTaskOptionChangedEventArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintTaskOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetailsStatic>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetailsStatic;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintTaskOptionDetailsStatic<T>;
};

template <> struct Traits<Windows::Management::Core::IApplicationDataManagerStatics>
{
	using Abi = ABI::Windows::Management::Core::IApplicationDataManagerStatics;
	template <typename T> using Methods = Windows::Management::Core::impl_IApplicationDataManagerStatics<T>;
};

template <> struct Traits<Windows::Management::Core::IApplicationDataManager>
{
	using Abi = ABI::Windows::Management::Core::IApplicationDataManager;
	template <typename T> using Methods = Windows::Management::Core::impl_IApplicationDataManager<T>;
};

template <> struct Traits<Windows::Management::Deployment::IDeploymentResult>
{
	using Abi = ABI::Windows::Management::Deployment::IDeploymentResult;
	template <typename T> using Methods = Windows::Management::Deployment::impl_IDeploymentResult<T>;
};

template <> struct Traits<Windows::Management::Deployment::IPackageUserInformation>
{
	using Abi = ABI::Windows::Management::Deployment::IPackageUserInformation;
	template <typename T> using Methods = Windows::Management::Deployment::impl_IPackageUserInformation<T>;
};

template <> struct Traits<Windows::Management::Deployment::IPackageManager>
{
	using Abi = ABI::Windows::Management::Deployment::IPackageManager;
	template <typename T> using Methods = Windows::Management::Deployment::impl_IPackageManager<T>;
};

template <> struct Traits<Windows::Management::Deployment::IPackageManager2>
{
	using Abi = ABI::Windows::Management::Deployment::IPackageManager2;
	template <typename T> using Methods = Windows::Management::Deployment::impl_IPackageManager2<T>;
};

template <> struct Traits<Windows::Management::Workplace::IWorkplaceSettingsStatics>
{
	using Abi = ABI::Windows::Management::Workplace::IWorkplaceSettingsStatics;
	template <typename T> using Methods = Windows::Management::Workplace::impl_IWorkplaceSettingsStatics<T>;
};

template <> struct Traits<Windows::Media::IMediaMarker>
{
	using Abi = ABI::Windows::Media::IMediaMarker;
	template <typename T> using Methods = Windows::Media::impl_IMediaMarker<T>;
};

template <> struct Traits<Windows::Media::IMediaMarkers>
{
	using Abi = ABI::Windows::Media::IMediaMarkers;
	template <typename T> using Methods = Windows::Media::impl_IMediaMarkers<T>;
};

template <> struct Traits<Windows::Media::IMediaMarkerTypesStatics>
{
	using Abi = ABI::Windows::Media::IMediaMarkerTypesStatics;
	template <typename T> using Methods = Windows::Media::impl_IMediaMarkerTypesStatics<T>;
};

template <> struct Traits<Windows::Media::IMusicDisplayProperties>
{
	using Abi = ABI::Windows::Media::IMusicDisplayProperties;
	template <typename T> using Methods = Windows::Media::impl_IMusicDisplayProperties<T>;
};

template <> struct Traits<Windows::Media::IVideoDisplayProperties>
{
	using Abi = ABI::Windows::Media::IVideoDisplayProperties;
	template <typename T> using Methods = Windows::Media::impl_IVideoDisplayProperties<T>;
};

template <> struct Traits<Windows::Media::IImageDisplayProperties>
{
	using Abi = ABI::Windows::Media::IImageDisplayProperties;
	template <typename T> using Methods = Windows::Media::impl_IImageDisplayProperties<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControlsDisplayUpdater>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControlsDisplayUpdater;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControlsDisplayUpdater<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControlsButtonPressedEventArgs>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControlsButtonPressedEventArgs;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControlsButtonPressedEventArgs<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControlsPropertyChangedEventArgs>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControlsPropertyChangedEventArgs;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControlsPropertyChangedEventArgs<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControls>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControls;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControls<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControlsStatics>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControlsStatics;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControlsStatics<T>;
};

template <> struct Traits<Windows::Media::IMediaExtension>
{
	using Abi = ABI::Windows::Media::IMediaExtension;
	template <typename T> using Methods = Windows::Media::impl_IMediaExtension<T>;
};

template <> struct Traits<Windows::Media::IMediaExtensionManager>
{
	using Abi = ABI::Windows::Media::IMediaExtensionManager;
	template <typename T> using Methods = Windows::Media::impl_IMediaExtensionManager<T>;
};

template <> struct Traits<Windows::Media::IVideoEffectsStatics>
{
	using Abi = ABI::Windows::Media::IVideoEffectsStatics;
	template <typename T> using Methods = Windows::Media::impl_IVideoEffectsStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaRatio>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaRatio;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaRatio<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IAudioEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IAudioEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IAudioEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData>
{
	using Abi = ABI::Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IAudioEncodingPropertiesWithFormatUserData<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IAudioEncodingPropertiesStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IAudioEncodingPropertiesStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IAudioEncodingPropertiesStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IVideoEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IVideoEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IVideoEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingSubtypesStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IH264ProfileIdsStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IH264ProfileIdsStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IH264ProfileIdsStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMpeg2ProfileIdsStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMpeg2ProfileIdsStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMpeg2ProfileIdsStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IVideoEncodingProperties2>
{
	using Abi = ABI::Windows::Media::MediaProperties::IVideoEncodingProperties2;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IVideoEncodingProperties2<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IVideoEncodingPropertiesStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IVideoEncodingPropertiesStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IVideoEncodingPropertiesStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IImageEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IImageEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IImageEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IImageEncodingPropertiesStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IImageEncodingPropertiesStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IImageEncodingPropertiesStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IImageEncodingPropertiesStatics2>
{
	using Abi = ABI::Windows::Media::MediaProperties::IImageEncodingPropertiesStatics2;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IImageEncodingPropertiesStatics2<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IContainerEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IContainerEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IContainerEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingProfileStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingProfileStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingProfileStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingProfileStatics2>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingProfileStatics2;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingProfileStatics2<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingProfile>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingProfile;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingProfile<T>;
};

template <> struct Traits<Windows::Media::Devices::ICallControlEventHandler>
{
	using Abi = ABI::Windows::Media::Devices::ICallControlEventHandler;
	template <typename T> using Methods = Windows::Media::Devices::impl_ICallControlEventHandler<T>;
};

template <> struct Traits<Windows::Media::Devices::IDialRequestedEventHandler>
{
	using Abi = ABI::Windows::Media::Devices::IDialRequestedEventHandler;
	template <typename T> using Methods = Windows::Media::Devices::impl_IDialRequestedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Devices::IRedialRequestedEventHandler>
{
	using Abi = ABI::Windows::Media::Devices::IRedialRequestedEventHandler;
	template <typename T> using Methods = Windows::Media::Devices::impl_IRedialRequestedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Devices::IKeypadPressedEventHandler>
{
	using Abi = ABI::Windows::Media::Devices::IKeypadPressedEventHandler;
	template <typename T> using Methods = Windows::Media::Devices::impl_IKeypadPressedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Devices::IDialRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::IDialRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Devices::impl_IDialRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Devices::IRedialRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::IRedialRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Devices::impl_IRedialRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Devices::IKeypadPressedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::IKeypadPressedEventArgs;
	template <typename T> using Methods = Windows::Media::Devices::impl_IKeypadPressedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Devices::ICallControl>
{
	using Abi = ABI::Windows::Media::Devices::ICallControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ICallControl<T>;
};

template <> struct Traits<Windows::Media::Devices::ICallControlStatics>
{
	using Abi = ABI::Windows::Media::Devices::ICallControlStatics;
	template <typename T> using Methods = Windows::Media::Devices::impl_ICallControlStatics<T>;
};

template <> struct Traits<Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs;
	template <typename T> using Methods = Windows::Media::Devices::impl_IDefaultAudioDeviceChangedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Devices::IMediaDeviceStatics>
{
	using Abi = ABI::Windows::Media::Devices::IMediaDeviceStatics;
	template <typename T> using Methods = Windows::Media::Devices::impl_IMediaDeviceStatics<T>;
};

template <> struct Traits<Windows::Media::Devices::ISceneModeControl>
{
	using Abi = ABI::Windows::Media::Devices::ISceneModeControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ISceneModeControl<T>;
};

template <> struct Traits<Windows::Media::Devices::ITorchControl>
{
	using Abi = ABI::Windows::Media::Devices::ITorchControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ITorchControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IFlashControl>
{
	using Abi = ABI::Windows::Media::Devices::IFlashControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IFlashControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IExposureCompensationControl>
{
	using Abi = ABI::Windows::Media::Devices::IExposureCompensationControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IExposureCompensationControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IIsoSpeedControl>
{
	using Abi = ABI::Windows::Media::Devices::IIsoSpeedControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IIsoSpeedControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IWhiteBalanceControl>
{
	using Abi = ABI::Windows::Media::Devices::IWhiteBalanceControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IWhiteBalanceControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IExposureControl>
{
	using Abi = ABI::Windows::Media::Devices::IExposureControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IExposureControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IFocusControl>
{
	using Abi = ABI::Windows::Media::Devices::IFocusControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IFocusControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IRegionOfInterest>
{
	using Abi = ABI::Windows::Media::Devices::IRegionOfInterest;
	template <typename T> using Methods = Windows::Media::Devices::impl_IRegionOfInterest<T>;
};

template <> struct Traits<Windows::Media::Devices::IRegionsOfInterestControl>
{
	using Abi = ABI::Windows::Media::Devices::IRegionsOfInterestControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IRegionsOfInterestControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IMediaDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::IMediaDeviceController;
	template <typename T> using Methods = Windows::Media::Devices::impl_IMediaDeviceController<T>;
};

template <> struct Traits<Windows::Media::Devices::IAudioDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::IAudioDeviceController;
	template <typename T> using Methods = Windows::Media::Devices::impl_IAudioDeviceController<T>;
};

template <> struct Traits<Windows::Media::Devices::IVideoDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::IVideoDeviceController;
	template <typename T> using Methods = Windows::Media::Devices::impl_IVideoDeviceController<T>;
};

template <> struct Traits<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2>
{
	using Abi = ABI::Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2;
	template <typename T> using Methods = Windows::Media::Devices::impl_IAdvancedVideoCaptureDeviceController2<T>;
};

template <> struct Traits<Windows::Media::Devices::IMediaDeviceControl>
{
	using Abi = ABI::Windows::Media::Devices::IMediaDeviceControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IMediaDeviceControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IMediaDeviceControlCapabilities>
{
	using Abi = ABI::Windows::Media::Devices::IMediaDeviceControlCapabilities;
	template <typename T> using Methods = Windows::Media::Devices::impl_IMediaDeviceControlCapabilities<T>;
};

template <> struct Traits<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::IAdvancedVideoCaptureDeviceController;
	template <typename T> using Methods = Windows::Media::Devices::impl_IAdvancedVideoCaptureDeviceController<T>;
};

template <> struct Traits<Windows::Media::Devices::ILowLagPhotoSequenceControl>
{
	using Abi = ABI::Windows::Media::Devices::ILowLagPhotoSequenceControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ILowLagPhotoSequenceControl<T>;
};

template <> struct Traits<Windows::Media::Devices::ILowLagPhotoControl>
{
	using Abi = ABI::Windows::Media::Devices::ILowLagPhotoControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ILowLagPhotoControl<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureFailedEventHandler>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureFailedEventHandler;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureFailedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Capture::IRecordLimitationExceededEventHandler>
{
	using Abi = ABI::Windows::Media::Capture::IRecordLimitationExceededEventHandler;
	template <typename T> using Methods = Windows::Media::Capture::impl_IRecordLimitationExceededEventHandler<T>;
};

template <> struct Traits<Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICameraCaptureUIPhotoCaptureSettings<T>;
};

template <> struct Traits<Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICameraCaptureUIVideoCaptureSettings<T>;
};

template <> struct Traits<Windows::Media::Capture::ICameraCaptureUI>
{
	using Abi = ABI::Windows::Media::Capture::ICameraCaptureUI;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICameraCaptureUI<T>;
};

template <> struct Traits<Windows::Media::Capture::ICameraOptionsUIStatics>
{
	using Abi = ABI::Windows::Media::Capture::ICameraOptionsUIStatics;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICameraOptionsUIStatics<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureFailedEventArgs>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureFailedEventArgs;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureFailedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureInitializationSettings>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureInitializationSettings;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureInitializationSettings<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureInitializationSettings2>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureInitializationSettings2;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureInitializationSettings2<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCapture>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCapture;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCapture<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCapture2>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCapture2;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCapture2<T>;
};

template <> struct Traits<Windows::Media::Capture::ILowLagPhotoCapture>
{
	using Abi = ABI::Windows::Media::Capture::ILowLagPhotoCapture;
	template <typename T> using Methods = Windows::Media::Capture::impl_ILowLagPhotoCapture<T>;
};

template <> struct Traits<Windows::Media::Capture::ILowLagMediaRecording>
{
	using Abi = ABI::Windows::Media::Capture::ILowLagMediaRecording;
	template <typename T> using Methods = Windows::Media::Capture::impl_ILowLagMediaRecording<T>;
};

template <> struct Traits<Windows::Media::Capture::ILowLagPhotoSequenceCapture>
{
	using Abi = ABI::Windows::Media::Capture::ILowLagPhotoSequenceCapture;
	template <typename T> using Methods = Windows::Media::Capture::impl_ILowLagPhotoSequenceCapture<T>;
};

template <> struct Traits<Windows::Media::Capture::IPhotoCapturedEventArgs>
{
	using Abi = ABI::Windows::Media::Capture::IPhotoCapturedEventArgs;
	template <typename T> using Methods = Windows::Media::Capture::impl_IPhotoCapturedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Capture::ICapturedPhoto>
{
	using Abi = ABI::Windows::Media::Capture::ICapturedPhoto;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICapturedPhoto<T>;
};

template <> struct Traits<Windows::Media::Capture::ICapturedFrame>
{
	using Abi = ABI::Windows::Media::Capture::ICapturedFrame;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICapturedFrame<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureVideoPreview>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureVideoPreview;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureVideoPreview<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureSettings;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureSettings<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureSettings2>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureSettings2;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureSettings2<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IRatedContentDescription>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IRatedContentDescription;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IRatedContentDescription<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IRatedContentDescriptionFactory>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IRatedContentDescriptionFactory;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IRatedContentDescriptionFactory<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IContentRestrictionsBrowsePolicy<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IRatedContentRestrictions>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IRatedContentRestrictions;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IRatedContentRestrictions<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IRatedContentRestrictionsFactory>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IRatedContentRestrictionsFactory;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IRatedContentRestrictionsFactory<T>;
};

template <> struct Traits<Windows::Media::Protection::IServiceRequestedEventHandler>
{
	using Abi = ABI::Windows::Media::Protection::IServiceRequestedEventHandler;
	template <typename T> using Methods = Windows::Media::Protection::impl_IServiceRequestedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Protection::IRebootNeededEventHandler>
{
	using Abi = ABI::Windows::Media::Protection::IRebootNeededEventHandler;
	template <typename T> using Methods = Windows::Media::Protection::impl_IRebootNeededEventHandler<T>;
};

template <> struct Traits<Windows::Media::Protection::IComponentLoadFailedEventHandler>
{
	using Abi = ABI::Windows::Media::Protection::IComponentLoadFailedEventHandler;
	template <typename T> using Methods = Windows::Media::Protection::impl_IComponentLoadFailedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Protection::IMediaProtectionManager>
{
	using Abi = ABI::Windows::Media::Protection::IMediaProtectionManager;
	template <typename T> using Methods = Windows::Media::Protection::impl_IMediaProtectionManager<T>;
};

template <> struct Traits<Windows::Media::Protection::IMediaProtectionServiceCompletion>
{
	using Abi = ABI::Windows::Media::Protection::IMediaProtectionServiceCompletion;
	template <typename T> using Methods = Windows::Media::Protection::impl_IMediaProtectionServiceCompletion<T>;
};

template <> struct Traits<Windows::Media::Protection::IServiceRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Protection::IServiceRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Protection::impl_IServiceRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Protection::IMediaProtectionServiceRequest>
{
	using Abi = ABI::Windows::Media::Protection::IMediaProtectionServiceRequest;
	template <typename T> using Methods = Windows::Media::Protection::impl_IMediaProtectionServiceRequest<T>;
};

template <> struct Traits<Windows::Media::Protection::IComponentLoadFailedEventArgs>
{
	using Abi = ABI::Windows::Media::Protection::IComponentLoadFailedEventArgs;
	template <typename T> using Methods = Windows::Media::Protection::impl_IComponentLoadFailedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Protection::IRevocationAndRenewalInformation>
{
	using Abi = ABI::Windows::Media::Protection::IRevocationAndRenewalInformation;
	template <typename T> using Methods = Windows::Media::Protection::impl_IRevocationAndRenewalInformation<T>;
};

template <> struct Traits<Windows::Media::Protection::IRevocationAndRenewalItem>
{
	using Abi = ABI::Windows::Media::Protection::IRevocationAndRenewalItem;
	template <typename T> using Methods = Windows::Media::Protection::impl_IRevocationAndRenewalItem<T>;
};

template <> struct Traits<Windows::Media::Protection::IComponentRenewalStatics>
{
	using Abi = ABI::Windows::Media::Protection::IComponentRenewalStatics;
	template <typename T> using Methods = Windows::Media::Protection::impl_IComponentRenewalStatics<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamDescriptor;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamDescriptor<T>;
};

template <> struct Traits<Windows::Media::Core::IAudioStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::IAudioStreamDescriptor;
	template <typename T> using Methods = Windows::Media::Core::impl_IAudioStreamDescriptor<T>;
};

template <> struct Traits<Windows::Media::Core::IAudioStreamDescriptorFactory>
{
	using Abi = ABI::Windows::Media::Core::IAudioStreamDescriptorFactory;
	template <typename T> using Methods = Windows::Media::Core::impl_IAudioStreamDescriptorFactory<T>;
};

template <> struct Traits<Windows::Media::Core::IVideoStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::IVideoStreamDescriptor;
	template <typename T> using Methods = Windows::Media::Core::impl_IVideoStreamDescriptor<T>;
};

template <> struct Traits<Windows::Media::Core::IVideoStreamDescriptorFactory>
{
	using Abi = ABI::Windows::Media::Core::IVideoStreamDescriptorFactory;
	template <typename T> using Methods = Windows::Media::Core::impl_IVideoStreamDescriptorFactory<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaSource>
{
	using Abi = ABI::Windows::Media::Core::IMediaSource;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaSource<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSource>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSource;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSource<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceFactory>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceFactory;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceFactory<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSample>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSample;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSample<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSampleStatics>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSampleStatics;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSampleStatics<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSampleProtectionProperties>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSampleProtectionProperties;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSampleProtectionProperties<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceClosedRequest>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceClosedRequest;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceClosedRequest<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceClosedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceClosedEventArgs;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceClosedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceStartingRequestDeferral<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceStartingRequest>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceStartingRequest;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceStartingRequest<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceStartingEventArgs>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceStartingEventArgs;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceStartingEventArgs<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSampleRequestDeferral<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSampleRequest>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSampleRequest;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSampleRequest<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSampleRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSwitchStreamsRequestDeferral<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSwitchStreamsRequest<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSwitchStreamsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Effects::IAudioEffect>
{
	using Abi = ABI::Windows::Media::Effects::IAudioEffect;
	template <typename T> using Methods = Windows::Media::Effects::impl_IAudioEffect<T>;
};

template <> struct Traits<Windows::Media::Effects::IAudioEffectsManagerStatics>
{
	using Abi = ABI::Windows::Media::Effects::IAudioEffectsManagerStatics;
	template <typename T> using Methods = Windows::Media::Effects::impl_IAudioEffectsManagerStatics<T>;
};

template <> struct Traits<Windows::Media::Effects::IAudioRenderEffectsManager>
{
	using Abi = ABI::Windows::Media::Effects::IAudioRenderEffectsManager;
	template <typename T> using Methods = Windows::Media::Effects::impl_IAudioRenderEffectsManager<T>;
};

template <> struct Traits<Windows::Media::Effects::IAudioCaptureEffectsManager>
{
	using Abi = ABI::Windows::Media::Effects::IAudioCaptureEffectsManager;
	template <typename T> using Methods = Windows::Media::Effects::impl_IAudioCaptureEffectsManager<T>;
};

template <> struct Traits<Windows::Media::Playlists::IPlaylist>
{
	using Abi = ABI::Windows::Media::Playlists::IPlaylist;
	template <typename T> using Methods = Windows::Media::Playlists::impl_IPlaylist<T>;
};

template <> struct Traits<Windows::Media::Playlists::IPlaylistStatics>
{
	using Abi = ABI::Windows::Media::Playlists::IPlaylistStatics;
	template <typename T> using Methods = Windows::Media::Playlists::impl_IPlaylistStatics<T>;
};

template <> struct Traits<Windows::Media::PlayTo::ISourceChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::ISourceChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_ISourceChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlaybackRateChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_ICurrentTimeChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IMuteChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IMuteChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IMuteChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IVolumeChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToReceiver>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToReceiver;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToReceiver<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSource>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSource;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSource<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceWithPreferredSourceUri<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToConnectionStateChangedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToConnectionTransferredEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToConnectionErrorEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToConnection>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToConnection;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToConnection<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceSelectedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceDeferral>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceDeferral;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceDeferral<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceRequest>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceRequest;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceRequest<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToManager>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToManager;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToManager<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToManagerStatics>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToManagerStatics;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToManagerStatics<T>;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::IVoiceInformation>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::IVoiceInformation;
	template <typename T> using Methods = Windows::Media::SpeechSynthesis::impl_IVoiceInformation<T>;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::IInstalledVoicesStatic>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::IInstalledVoicesStatic;
	template <typename T> using Methods = Windows::Media::SpeechSynthesis::impl_IInstalledVoicesStatic<T>;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::ISpeechSynthesisStream>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::ISpeechSynthesisStream;
	template <typename T> using Methods = Windows::Media::SpeechSynthesis::impl_ISpeechSynthesisStream<T>;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::ISpeechSynthesizer>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::ISpeechSynthesizer;
	template <typename T> using Methods = Windows::Media::SpeechSynthesis::impl_ISpeechSynthesizer<T>;
};

template <> struct Traits<Windows::Media::Streaming::IDeviceControllerFinderHandler>
{
	using Abi = ABI::Windows::Media::Streaming::IDeviceControllerFinderHandler;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IDeviceControllerFinderHandler<T>;
};

template <> struct Traits<Windows::Media::Streaming::IConnectionStatusHandler>
{
	using Abi = ABI::Windows::Media::Streaming::IConnectionStatusHandler;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IConnectionStatusHandler<T>;
};

template <> struct Traits<Windows::Media::Streaming::IDeviceController>
{
	using Abi = ABI::Windows::Media::Streaming::IDeviceController;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IDeviceController<T>;
};

template <> struct Traits<Windows::Media::Streaming::IBasicDevice>
{
	using Abi = ABI::Windows::Media::Streaming::IBasicDevice;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IBasicDevice<T>;
};

template <> struct Traits<Windows::Media::Streaming::IActiveBasicDevice>
{
	using Abi = ABI::Windows::Media::Streaming::IActiveBasicDevice;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IActiveBasicDevice<T>;
};

template <> struct Traits<Windows::Media::Streaming::IDeviceIcon>
{
	using Abi = ABI::Windows::Media::Streaming::IDeviceIcon;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IDeviceIcon<T>;
};

template <> struct Traits<Windows::Media::Streaming::IActiveBasicDeviceStatics>
{
	using Abi = ABI::Windows::Media::Streaming::IActiveBasicDeviceStatics;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IActiveBasicDeviceStatics<T>;
};

template <> struct Traits<Windows::Media::Streaming::IDevicePair>
{
	using Abi = ABI::Windows::Media::Streaming::IDevicePair;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IDevicePair<T>;
};

template <> struct Traits<Windows::Media::Streaming::ITransportParametersUpdateHandler>
{
	using Abi = ABI::Windows::Media::Streaming::ITransportParametersUpdateHandler;
	template <typename T> using Methods = Windows::Media::Streaming::impl_ITransportParametersUpdateHandler<T>;
};

template <> struct Traits<Windows::Media::Streaming::IRenderingParametersUpdateHandler>
{
	using Abi = ABI::Windows::Media::Streaming::IRenderingParametersUpdateHandler;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IRenderingParametersUpdateHandler<T>;
};

template <> struct Traits<Windows::Media::Streaming::IMediaRenderer>
{
	using Abi = ABI::Windows::Media::Streaming::IMediaRenderer;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IMediaRenderer<T>;
};

template <> struct Traits<Windows::Media::Streaming::IMediaRendererActionInformation>
{
	using Abi = ABI::Windows::Media::Streaming::IMediaRendererActionInformation;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IMediaRendererActionInformation<T>;
};

template <> struct Traits<Windows::Media::Streaming::ITransportParameters>
{
	using Abi = ABI::Windows::Media::Streaming::ITransportParameters;
	template <typename T> using Methods = Windows::Media::Streaming::impl_ITransportParameters<T>;
};

template <> struct Traits<Windows::Media::Streaming::IMediaRendererFactory>
{
	using Abi = ABI::Windows::Media::Streaming::IMediaRendererFactory;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IMediaRendererFactory<T>;
};

template <> struct Traits<Windows::Media::Streaming::IStreamSelectorStatics>
{
	using Abi = ABI::Windows::Media::Streaming::IStreamSelectorStatics;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IStreamSelectorStatics<T>;
};

template <> struct Traits<Windows::Media::Transcoding::IMediaTranscoder2>
{
	using Abi = ABI::Windows::Media::Transcoding::IMediaTranscoder2;
	template <typename T> using Methods = Windows::Media::Transcoding::impl_IMediaTranscoder2<T>;
};

template <> struct Traits<Windows::Media::Transcoding::IMediaTranscoder>
{
	using Abi = ABI::Windows::Media::Transcoding::IMediaTranscoder;
	template <typename T> using Methods = Windows::Media::Transcoding::impl_IMediaTranscoder<T>;
};

template <> struct Traits<Windows::Media::Transcoding::IPrepareTranscodeResult>
{
	using Abi = ABI::Windows::Media::Transcoding::IPrepareTranscodeResult;
	template <typename T> using Methods = Windows::Media::Transcoding::impl_IPrepareTranscodeResult<T>;
};

template <> struct Traits<Windows::Security::Credentials::IPasswordCredential>
{
	using Abi = ABI::Windows::Security::Credentials::IPasswordCredential;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IPasswordCredential<T>;
};

template <> struct Traits<Windows::Security::Credentials::ICredentialFactory>
{
	using Abi = ABI::Windows::Security::Credentials::ICredentialFactory;
	template <typename T> using Methods = Windows::Security::Credentials::impl_ICredentialFactory<T>;
};

template <> struct Traits<Windows::Security::Credentials::IPasswordVault>
{
	using Abi = ABI::Windows::Security::Credentials::IPasswordVault;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IPasswordVault<T>;
};

template <> struct Traits<Windows::Security::Credentials::IWebAccountProviderFactory>
{
	using Abi = ABI::Windows::Security::Credentials::IWebAccountProviderFactory;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IWebAccountProviderFactory<T>;
};

template <> struct Traits<Windows::Security::Credentials::IWebAccountFactory>
{
	using Abi = ABI::Windows::Security::Credentials::IWebAccountFactory;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IWebAccountFactory<T>;
};

template <> struct Traits<Windows::Security::Credentials::IWebAccountProvider>
{
	using Abi = ABI::Windows::Security::Credentials::IWebAccountProvider;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IWebAccountProvider<T>;
};

template <> struct Traits<Windows::Security::Credentials::IWebAccount>
{
	using Abi = ABI::Windows::Security::Credentials::IWebAccount;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IWebAccount<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastDismissedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::IToastDismissedEventArgs;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastDismissedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::IToastFailedEventArgs;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastFailedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::IToastActivatedEventArgs;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastActivatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileUpdateManagerStatics>
{
	using Abi = ABI::Windows::UI::Notifications::ITileUpdateManagerStatics;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileUpdateManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileUpdater>
{
	using Abi = ABI::Windows::UI::Notifications::ITileUpdater;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileUpdater<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileUpdater2>
{
	using Abi = ABI::Windows::UI::Notifications::ITileUpdater2;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileUpdater2<T>;
};

template <> struct Traits<Windows::UI::Notifications::IBadgeUpdateManagerStatics>
{
	using Abi = ABI::Windows::UI::Notifications::IBadgeUpdateManagerStatics;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IBadgeUpdateManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Notifications::IBadgeUpdater>
{
	using Abi = ABI::Windows::UI::Notifications::IBadgeUpdater;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IBadgeUpdater<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastNotificationManagerStatics>
{
	using Abi = ABI::Windows::UI::Notifications::IToastNotificationManagerStatics;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastNotificationManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastNotifier>
{
	using Abi = ABI::Windows::UI::Notifications::IToastNotifier;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastNotifier<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::ITileNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileNotification>
{
	using Abi = ABI::Windows::UI::Notifications::ITileNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileNotification<T>;
};

template <> struct Traits<Windows::UI::Notifications::IBadgeNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::IBadgeNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IBadgeNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::IBadgeNotification>
{
	using Abi = ABI::Windows::UI::Notifications::IBadgeNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IBadgeNotification<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::IToastNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastNotification>
{
	using Abi = ABI::Windows::UI::Notifications::IToastNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastNotification<T>;
};

template <> struct Traits<Windows::UI::Notifications::IScheduledToastNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::IScheduledToastNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IScheduledToastNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::IScheduledToastNotification>
{
	using Abi = ABI::Windows::UI::Notifications::IScheduledToastNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IScheduledToastNotification<T>;
};

template <> struct Traits<Windows::UI::Notifications::IScheduledTileNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::IScheduledTileNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IScheduledTileNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::IScheduledTileNotification>
{
	using Abi = ABI::Windows::UI::Notifications::IScheduledTileNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IScheduledTileNotification<T>;
};

template <> struct Traits<Windows::Web::IUriToStreamResolver>
{
	using Abi = ABI::Windows::Web::IUriToStreamResolver;
	template <typename T> using Methods = Windows::Web::impl_IUriToStreamResolver<T>;
};

template <> struct Traits<Windows::Web::IWebErrorStatics>
{
	using Abi = ABI::Windows::Web::IWebErrorStatics;
	template <typename T> using Methods = Windows::Web::impl_IWebErrorStatics<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferBase>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferBase;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferBase<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IUnconstrainedTransferRequestResult>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IUnconstrainedTransferRequestResult;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IUnconstrainedTransferRequestResult<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloaderUserConsent>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloaderUserConsent;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloaderUserConsent<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploaderUserConsent>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploaderUserConsent;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploaderUserConsent<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloader>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloader;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloader<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloader2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloader2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloader2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploader>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploader;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploader<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploader2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploader2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploader2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferOperation;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferOperation<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferOperationPriority>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferOperationPriority;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferOperationPriority<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IDownloadOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IDownloadOperation;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IDownloadOperation<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IDownloadOperation2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IDownloadOperation2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IDownloadOperation2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IUploadOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IUploadOperation;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IUploadOperation<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IUploadOperation2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IUploadOperation2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IUploadOperation2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloaderStaticMethods>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloaderStaticMethods;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloaderStaticMethods<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloaderStaticMethods2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloaderStaticMethods2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloaderStaticMethods2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploaderStaticMethods>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploaderStaticMethods;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploaderStaticMethods<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploaderStaticMethods2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploaderStaticMethods2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploaderStaticMethods2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IResponseInformation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IResponseInformation;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IResponseInformation<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferErrorStaticMethods>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferErrorStaticMethods;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferErrorStaticMethods<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferContentPart<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPartFactory>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPartFactory;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferContentPartFactory<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferGroup>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferGroup;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferGroup<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferGroupStatics>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferGroupStatics;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferGroupStatics<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IContentPrefetcherTime>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IContentPrefetcherTime;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IContentPrefetcherTime<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IContentPrefetcher>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IContentPrefetcher;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IContentPrefetcher<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccountStatics>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccountStatics;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccountStatics<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccount>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccount;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccount<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccount2>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccount2;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccount2<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandDeviceInformation<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandNetwork>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandNetwork;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandNetwork<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorNotificationEventDetails<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringEntitlementCheck<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringAccessPointConfiguration<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringOperationResult<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringManagerStatics<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringManager<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccountEventArgs<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccountUpdatedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccountWatcher<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotAuthenticationEventDetails<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotAuthenticationContextStatics>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotAuthenticationContextStatics;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotAuthenticationContextStatics<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotAuthenticationContext>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotAuthenticationContext;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotAuthenticationContext<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotCredentialsAuthenticationResult<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotAuthenticationContext2<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IProvisionFromXmlDocumentResults<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IProvisionedProfile>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IProvisionedProfile;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IProvisionedProfile<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IProvisioningAgent>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IProvisioningAgent;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IProvisioningAgent<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IProvisioningAgentStaticMethods>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IProvisioningAgentStaticMethods;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IProvisioningAgentStaticMethods<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdMessage>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdMessage;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdMessage<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdMessageFactory>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdMessageFactory;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdMessageFactory<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdReply>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdReply;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdReply<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdSession>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdSession;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdSession<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdSessionStatics>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdSessionStatics;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdSessionStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateRequestProperties>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateRequestProperties;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateRequestProperties<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateRequestProperties2>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateRequestProperties2;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateRequestProperties2<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateEnrollmentManagerStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics2>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics2;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateEnrollmentManagerStatics2<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IKeyAttestationHelperStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IKeyAttestationHelperStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IKeyAttestationHelperStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateStoresStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateStoresStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateStoresStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IUserCertificateEnrollmentManager<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateStore>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateStore;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateStore<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IKeyAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IKeyAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IKeyAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IKeyStorageProviderNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IKeyStorageProviderNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IKeyStorageProviderNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IChainBuildingParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IChainBuildingParameters;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IChainBuildingParameters<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IChainValidationParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IChainValidationParameters;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IChainValidationParameters<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateQuery>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateQuery;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateQuery<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateChain>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateChain;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateChain<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificate>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificate;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificate<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateFactory>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateFactory;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateFactory<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsTimestampInfo>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsTimestampInfo;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsTimestampInfo<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsSignerInfo>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsSignerInfo;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsSignerInfo<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsAttachedSignature>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsAttachedSignature;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsAttachedSignature<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureFactory>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureFactory;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsAttachedSignatureFactory<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsAttachedSignatureStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsDetachedSignature>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsDetachedSignature;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsDetachedSignature<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureFactory>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureFactory;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsDetachedSignatureFactory<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsDetachedSignatureStatics<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IControlChannelTrigger>
{
	using Abi = ABI::Windows::Networking::Sockets::IControlChannelTrigger;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IControlChannelTrigger<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IControlChannelTriggerFactory>
{
	using Abi = ABI::Windows::Networking::Sockets::IControlChannelTriggerFactory;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IControlChannelTriggerFactory<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IControlChannelTriggerEventDetails>
{
	using Abi = ABI::Windows::Networking::Sockets::IControlChannelTriggerEventDetails;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IControlChannelTriggerEventDetails<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IControlChannelTriggerResetEventDetails>
{
	using Abi = ABI::Windows::Networking::Sockets::IControlChannelTriggerResetEventDetails;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IControlChannelTriggerResetEventDetails<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketMessageReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IMessageWebSocketMessageReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocketClosedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocketClosedEventArgs;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocketClosedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketInformation;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketInformation<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketControl2>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketControl2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketControl2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketStatics>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketStatics;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketStatics<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocket2>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocket2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocket2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketInformation;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketInformation<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketInformation2>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketInformation2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketInformation2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketControl2>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketControl2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketControl2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocket2>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocket2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocket2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListenerControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListenerControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListenerInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerInformation;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListenerInformation<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListenerConnectionReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListener>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListener;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListener<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListener2>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListener2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListener2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocketInformation;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocketInformation<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IMessageWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IMessageWebSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IMessageWebSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IMessageWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IMessageWebSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IMessageWebSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamWebSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamWebSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamWebSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamWebSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::ISocketErrorStatics>
{
	using Abi = ABI::Windows::Networking::Sockets::ISocketErrorStatics;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_ISocketErrorStatics<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocketErrorStatics>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocketErrorStatics;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocketErrorStatics<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IMessageReceivedHandler>
{
	using Abi = ABI::Windows::Networking::Proximity::IMessageReceivedHandler;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IMessageReceivedHandler<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IMessageTransmittedHandler>
{
	using Abi = ABI::Windows::Networking::Proximity::IMessageTransmittedHandler;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IMessageTransmittedHandler<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IDeviceArrivedEventHandler>
{
	using Abi = ABI::Windows::Networking::Proximity::IDeviceArrivedEventHandler;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IDeviceArrivedEventHandler<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IDeviceDepartedEventHandler>
{
	using Abi = ABI::Windows::Networking::Proximity::IDeviceDepartedEventHandler;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IDeviceDepartedEventHandler<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IProximityMessage>
{
	using Abi = ABI::Windows::Networking::Proximity::IProximityMessage;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IProximityMessage<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IProximityDevice>
{
	using Abi = ABI::Windows::Networking::Proximity::IProximityDevice;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IProximityDevice<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IProximityDeviceStatics>
{
	using Abi = ABI::Windows::Networking::Proximity::IProximityDeviceStatics;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IProximityDeviceStatics<T>;
};

template <> struct Traits<Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs>
{
	using Abi = ABI::Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_ITriggeredConnectionStateChangedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerInformation>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerInformation;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerInformation<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerInformation3>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerInformation3;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerInformation3<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IConnectionRequestedEventArgs>
{
	using Abi = ABI::Windows::Networking::Proximity::IConnectionRequestedEventArgs;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IConnectionRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerWatcher>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerWatcher;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerWatcher<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerFinderStatics>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerFinderStatics;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerFinderStatics<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerFinderStatics2>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerFinderStatics2;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerFinderStatics2<T>;
};

template <> struct Traits<Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics>
{
	using Abi = ABI::Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics;
	template <typename T> using Methods = Windows::Networking::PushNotifications::impl_IPushNotificationChannelManagerStatics<T>;
};

template <> struct Traits<Windows::Networking::PushNotifications::IPushNotificationChannel>
{
	using Abi = ABI::Windows::Networking::PushNotifications::IPushNotificationChannel;
	template <typename T> using Methods = Windows::Networking::PushNotifications::impl_IPushNotificationChannel<T>;
};

template <> struct Traits<Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs;
	template <typename T> using Methods = Windows::Networking::PushNotifications::impl_IPushNotificationReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::PushNotifications::IRawNotification>
{
	using Abi = ABI::Windows::Networking::PushNotifications::IRawNotification;
	template <typename T> using Methods = Windows::Networking::PushNotifications::impl_IRawNotification<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IOnlineIdServiceTicketRequest<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequestFactory>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequestFactory;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IOnlineIdServiceTicketRequestFactory<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicket>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicket;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IOnlineIdServiceTicket<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IUserIdentity>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IUserIdentity;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IUserIdentity<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IOnlineIdAuthenticator<T>;
};

template <> struct Traits<Windows::Security::Authentication::Web::IWebAuthenticationResult>
{
	using Abi = ABI::Windows::Security::Authentication::Web::IWebAuthenticationResult;
	template <typename T> using Methods = Windows::Security::Authentication::Web::impl_IWebAuthenticationResult<T>;
};

template <> struct Traits<Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics>
{
	using Abi = ABI::Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics;
	template <typename T> using Methods = Windows::Security::Authentication::Web::impl_IWebAuthenticationBrokerStatics<T>;
};

template <> struct Traits<Windows::Security::Credentials::UI::IUserConsentVerifierStatics>
{
	using Abi = ABI::Windows::Security::Credentials::UI::IUserConsentVerifierStatics;
	template <typename T> using Methods = Windows::Security::Credentials::UI::impl_IUserConsentVerifierStatics<T>;
};

template <> struct Traits<Windows::Security::Credentials::UI::ICredentialPickerOptions>
{
	using Abi = ABI::Windows::Security::Credentials::UI::ICredentialPickerOptions;
	template <typename T> using Methods = Windows::Security::Credentials::UI::impl_ICredentialPickerOptions<T>;
};

template <> struct Traits<Windows::Security::Credentials::UI::ICredentialPickerStatics>
{
	using Abi = ABI::Windows::Security::Credentials::UI::ICredentialPickerStatics;
	template <typename T> using Methods = Windows::Security::Credentials::UI::impl_ICredentialPickerStatics<T>;
};

template <> struct Traits<Windows::Security::Credentials::UI::ICredentialPickerResults>
{
	using Abi = ABI::Windows::Security::Credentials::UI::ICredentialPickerResults;
	template <typename T> using Methods = Windows::Security::Credentials::UI::impl_ICredentialPickerResults<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationParameters;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationParameters<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationParametersStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ICryptographicKey>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ICryptographicKey;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ICryptographicKey<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IHashComputation>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IHashComputation;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IHashComputation<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IHashAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IHashAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IHashAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IMacAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IMacAlgorithmProvider2>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmProvider2;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmProvider2<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ISymmetricKeyAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IAsymmetricKeyAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IPersistedKeyProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IPersistedKeyProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IPersistedKeyProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IEncryptedAndAuthenticatedData<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ICryptographicEngineStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ICryptographicEngineStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ICryptographicEngineStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ICryptographicEngineStatics2>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ICryptographicEngineStatics2;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ICryptographicEngineStatics2<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IHashAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IHashAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IHashAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IMacAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ISymmetricKeyAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IAsymmetricKeyAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IHashAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IHashAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IHashAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IMacAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ISymmetricAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ISymmetricAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ISymmetricAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IAsymmetricAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::DataProtection::IDataProtectionProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::DataProtection::IDataProtectionProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::DataProtection::impl_IDataProtectionProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::DataProtection::IDataProtectionProviderFactory>
{
	using Abi = ABI::Windows::Security::Cryptography::DataProtection::IDataProtectionProviderFactory;
	template <typename T> using Methods = Windows::Security::Cryptography::DataProtection::impl_IDataProtectionProviderFactory<T>;
};

template <> struct Traits<Windows::Security::Cryptography::ICryptographicBufferStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::ICryptographicBufferStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::impl_ICryptographicBufferStatics<T>;
};

template <> struct Traits<Windows::Security::EnterpriseData::IFileRevocationManagerStatics>
{
	using Abi = ABI::Windows::Security::EnterpriseData::IFileRevocationManagerStatics;
	template <typename T> using Methods = Windows::Security::EnterpriseData::impl_IFileRevocationManagerStatics<T>;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::IEasClientDeviceInformation>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::IEasClientDeviceInformation;
	template <typename T> using Methods = Windows::Security::ExchangeActiveSyncProvisioning::impl_IEasClientDeviceInformation<T>;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::IEasClientSecurityPolicy>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::IEasClientSecurityPolicy;
	template <typename T> using Methods = Windows::Security::ExchangeActiveSyncProvisioning::impl_IEasClientSecurityPolicy<T>;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults;
	template <typename T> using Methods = Windows::Security::ExchangeActiveSyncProvisioning::impl_IEasComplianceResults<T>;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults2>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults2;
	template <typename T> using Methods = Windows::Security::ExchangeActiveSyncProvisioning::impl_IEasComplianceResults2<T>;
};

template <> struct Traits<Windows::Storage::AccessCache::IItemRemovedEventArgs>
{
	using Abi = ABI::Windows::Storage::AccessCache::IItemRemovedEventArgs;
	template <typename T> using Methods = Windows::Storage::AccessCache::impl_IItemRemovedEventArgs<T>;
};

template <> struct Traits<Windows::Storage::AccessCache::IStorageItemAccessList>
{
	using Abi = ABI::Windows::Storage::AccessCache::IStorageItemAccessList;
	template <typename T> using Methods = Windows::Storage::AccessCache::impl_IStorageItemAccessList<T>;
};

template <> struct Traits<Windows::Storage::AccessCache::IStorageItemMostRecentlyUsedList>
{
	using Abi = ABI::Windows::Storage::AccessCache::IStorageItemMostRecentlyUsedList;
	template <typename T> using Methods = Windows::Storage::AccessCache::impl_IStorageItemMostRecentlyUsedList<T>;
};

template <> struct Traits<Windows::Storage::AccessCache::IStorageApplicationPermissionsStatics>
{
	using Abi = ABI::Windows::Storage::AccessCache::IStorageApplicationPermissionsStatics;
	template <typename T> using Methods = Windows::Storage::AccessCache::impl_IStorageApplicationPermissionsStatics<T>;
};

template <> struct Traits<Windows::Storage::BulkAccess::IStorageItemInformation>
{
	using Abi = ABI::Windows::Storage::BulkAccess::IStorageItemInformation;
	template <typename T> using Methods = Windows::Storage::BulkAccess::impl_IStorageItemInformation<T>;
};

template <> struct Traits<Windows::Storage::BulkAccess::IFileInformationFactoryFactory>
{
	using Abi = ABI::Windows::Storage::BulkAccess::IFileInformationFactoryFactory;
	template <typename T> using Methods = Windows::Storage::BulkAccess::impl_IFileInformationFactoryFactory<T>;
};

template <> struct Traits<Windows::Storage::BulkAccess::IFileInformationFactory>
{
	using Abi = ABI::Windows::Storage::BulkAccess::IFileInformationFactory;
	template <typename T> using Methods = Windows::Storage::BulkAccess::impl_IFileInformationFactory<T>;
};

template <> struct Traits<Windows::Storage::Compression::ICompressor>
{
	using Abi = ABI::Windows::Storage::Compression::ICompressor;
	template <typename T> using Methods = Windows::Storage::Compression::impl_ICompressor<T>;
};

template <> struct Traits<Windows::Storage::Compression::IDecompressor>
{
	using Abi = ABI::Windows::Storage::Compression::IDecompressor;
	template <typename T> using Methods = Windows::Storage::Compression::impl_IDecompressor<T>;
};

template <> struct Traits<Windows::Storage::Compression::ICompressorFactory>
{
	using Abi = ABI::Windows::Storage::Compression::ICompressorFactory;
	template <typename T> using Methods = Windows::Storage::Compression::impl_ICompressorFactory<T>;
};

template <> struct Traits<Windows::Storage::Compression::IDecompressorFactory>
{
	using Abi = ABI::Windows::Storage::Compression::IDecompressorFactory;
	template <typename T> using Methods = Windows::Storage::Compression::impl_IDecompressorFactory<T>;
};

template <> struct Traits<Windows::Storage::Pickers::IFileOpenPicker>
{
	using Abi = ABI::Windows::Storage::Pickers::IFileOpenPicker;
	template <typename T> using Methods = Windows::Storage::Pickers::impl_IFileOpenPicker<T>;
};

template <> struct Traits<Windows::Storage::Pickers::IFileSavePicker>
{
	using Abi = ABI::Windows::Storage::Pickers::IFileSavePicker;
	template <typename T> using Methods = Windows::Storage::Pickers::impl_IFileSavePicker<T>;
};

template <> struct Traits<Windows::Storage::Pickers::IFolderPicker>
{
	using Abi = ABI::Windows::Storage::Pickers::IFolderPicker;
	template <typename T> using Methods = Windows::Storage::Pickers::impl_IFolderPicker<T>;
};

template <> struct Traits<Windows::System::Display::IDisplayRequest>
{
	using Abi = ABI::Windows::System::Display::IDisplayRequest;
	template <typename T> using Methods = Windows::System::Display::impl_IDisplayRequest<T>;
};

template <> struct Traits<Windows::System::Profile::IHardwareToken>
{
	using Abi = ABI::Windows::System::Profile::IHardwareToken;
	template <typename T> using Methods = Windows::System::Profile::impl_IHardwareToken<T>;
};

template <> struct Traits<Windows::System::Profile::IHardwareIdentificationStatics>
{
	using Abi = ABI::Windows::System::Profile::IHardwareIdentificationStatics;
	template <typename T> using Methods = Windows::System::Profile::impl_IHardwareIdentificationStatics<T>;
};

template <> struct Traits<Windows::System::Profile::SystemManufacturers::ISmbiosInformationStatics>
{
	using Abi = ABI::Windows::System::Profile::SystemManufacturers::ISmbiosInformationStatics;
	template <typename T> using Methods = Windows::System::Profile::SystemManufacturers::impl_ISmbiosInformationStatics<T>;
};

template <> struct Traits<Windows::System::RemoteDesktop::IInteractiveSessionStatics>
{
	using Abi = ABI::Windows::System::RemoteDesktop::IInteractiveSessionStatics;
	template <typename T> using Methods = Windows::System::RemoteDesktop::impl_IInteractiveSessionStatics<T>;
};

template <> struct Traits<Windows::System::Threading::ITimerElapsedHandler>
{
	using Abi = ABI::Windows::System::Threading::ITimerElapsedHandler;
	template <typename T> using Methods = Windows::System::Threading::impl_ITimerElapsedHandler<T>;
};

template <> struct Traits<Windows::System::Threading::ITimerDestroyedHandler>
{
	using Abi = ABI::Windows::System::Threading::ITimerDestroyedHandler;
	template <typename T> using Methods = Windows::System::Threading::impl_ITimerDestroyedHandler<T>;
};

template <> struct Traits<Windows::System::Threading::IWorkItemHandler>
{
	using Abi = ABI::Windows::System::Threading::IWorkItemHandler;
	template <typename T> using Methods = Windows::System::Threading::impl_IWorkItemHandler<T>;
};

template <> struct Traits<Windows::System::Threading::IThreadPoolStatics>
{
	using Abi = ABI::Windows::System::Threading::IThreadPoolStatics;
	template <typename T> using Methods = Windows::System::Threading::impl_IThreadPoolStatics<T>;
};

template <> struct Traits<Windows::System::Threading::IThreadPoolTimer>
{
	using Abi = ABI::Windows::System::Threading::IThreadPoolTimer;
	template <typename T> using Methods = Windows::System::Threading::impl_IThreadPoolTimer<T>;
};

template <> struct Traits<Windows::System::Threading::IThreadPoolTimerStatics>
{
	using Abi = ABI::Windows::System::Threading::IThreadPoolTimerStatics;
	template <typename T> using Methods = Windows::System::Threading::impl_IThreadPoolTimerStatics<T>;
};

template <> struct Traits<Windows::System::Threading::Core::ISignalHandler>
{
	using Abi = ABI::Windows::System::Threading::Core::ISignalHandler;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_ISignalHandler<T>;
};

template <> struct Traits<Windows::System::Threading::Core::ISignalNotifierStatics>
{
	using Abi = ABI::Windows::System::Threading::Core::ISignalNotifierStatics;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_ISignalNotifierStatics<T>;
};

template <> struct Traits<Windows::System::Threading::Core::IPreallocatedWorkItemFactory>
{
	using Abi = ABI::Windows::System::Threading::Core::IPreallocatedWorkItemFactory;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_IPreallocatedWorkItemFactory<T>;
};

template <> struct Traits<Windows::System::Threading::Core::IPreallocatedWorkItem>
{
	using Abi = ABI::Windows::System::Threading::Core::IPreallocatedWorkItem;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_IPreallocatedWorkItem<T>;
};

template <> struct Traits<Windows::System::Threading::Core::ISignalNotifier>
{
	using Abi = ABI::Windows::System::Threading::Core::ISignalNotifier;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_ISignalNotifier<T>;
};

template <> struct Traits<Windows::System::UserProfile::IAdvertisingManagerStatics>
{
	using Abi = ABI::Windows::System::UserProfile::IAdvertisingManagerStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_IAdvertisingManagerStatics<T>;
};

template <> struct Traits<Windows::System::UserProfile::IUserInformationStatics>
{
	using Abi = ABI::Windows::System::UserProfile::IUserInformationStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_IUserInformationStatics<T>;
};

template <> struct Traits<Windows::System::UserProfile::ILockScreenStatics>
{
	using Abi = ABI::Windows::System::UserProfile::ILockScreenStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_ILockScreenStatics<T>;
};

template <> struct Traits<Windows::System::UserProfile::ILockScreenImageFeedStatics>
{
	using Abi = ABI::Windows::System::UserProfile::ILockScreenImageFeedStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_ILockScreenImageFeedStatics<T>;
};

template <> struct Traits<Windows::System::UserProfile::IGlobalizationPreferencesStatics>
{
	using Abi = ABI::Windows::System::UserProfile::IGlobalizationPreferencesStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_IGlobalizationPreferencesStatics<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountProviderCommandInvokedHandler<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountCommandInvokedHandler<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ICredentialCommandCredentialDeletedHandler<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsCommandFactory>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsCommandFactory;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsCommandFactory<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsCommandStatics>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsCommandStatics;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsCommandStatics<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsPaneCommandsRequest<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsPaneCommandsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsPaneStatics>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsPaneStatics;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsPaneStatics<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsPane>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsPane;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsPane<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountProviderCommandFactory>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountProviderCommandFactory;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountProviderCommandFactory<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountCommandFactory>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountCommandFactory;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountCommandFactory<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ICredentialCommandFactory>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ICredentialCommandFactory;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ICredentialCommandFactory<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountProviderCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountProviderCommand;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountProviderCommand<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountInvokedArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountInvokedArgs;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountInvokedArgs<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountCommand;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountCommand<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ICredentialCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ICredentialCommand;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ICredentialCommand<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IAccountsSettingsPaneEventDeferral<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IAccountsSettingsPaneStatics<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IAccountsSettingsPane>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IAccountsSettingsPane;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IAccountsSettingsPane<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IPropertyAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IPropertyAnimation;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IPropertyAnimation<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IScaleAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IScaleAnimation;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IScaleAnimation<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IOpacityAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IOpacityAnimation;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IOpacityAnimation<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IAnimationDescription>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IAnimationDescription;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IAnimationDescription<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IAnimationDescriptionFactory>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IAnimationDescriptionFactory;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IAnimationDescriptionFactory<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkDrawingAttributes>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkDrawingAttributes;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkDrawingAttributes<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkStrokeRenderingSegment>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkStrokeRenderingSegment;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkStrokeRenderingSegment<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkStroke>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkStroke;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkStroke<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkStrokeBuilder>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkStrokeBuilder;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkStrokeBuilder<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkRecognitionResult>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkRecognitionResult;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkRecognitionResult<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkStrokeContainer>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkStrokeContainer;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkStrokeContainer<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkRecognizer>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkRecognizer;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkRecognizer<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkRecognizerContainer>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkRecognizerContainer;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkRecognizerContainer<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkManager>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkManager;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkManager<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTile>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTile;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTile<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTile2>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTile2;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTile2<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTileVisualElements>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTileVisualElements;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTileVisualElements<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTileFactory>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTileFactory;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTileFactory<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTileFactory2>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTileFactory2;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTileFactory2<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTileStatics>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTileStatics;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTileStatics<T>;
};

template <> struct Traits<Windows::UI::StartScreen::IVisualElementsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::StartScreen::IVisualElementsRequestedEventArgs;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_IVisualElementsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::UI::StartScreen::IVisualElementsRequest>
{
	using Abi = ABI::Windows::UI::StartScreen::IVisualElementsRequest;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_IVisualElementsRequest<T>;
};

template <> struct Traits<Windows::UI::StartScreen::IVisualElementsRequestDeferral>
{
	using Abi = ABI::Windows::UI::StartScreen::IVisualElementsRequestDeferral;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_IVisualElementsRequestDeferral<T>;
};

template <> struct Traits<Windows::UI::WebUI::IActivatedEventHandler>
{
	using Abi = ABI::Windows::UI::WebUI::IActivatedEventHandler;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IActivatedEventHandler<T>;
};

template <> struct Traits<Windows::UI::WebUI::IResumingEventHandler>
{
	using Abi = ABI::Windows::UI::WebUI::IResumingEventHandler;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IResumingEventHandler<T>;
};

template <> struct Traits<Windows::UI::WebUI::ISuspendingEventHandler>
{
	using Abi = ABI::Windows::UI::WebUI::ISuspendingEventHandler;
	template <typename T> using Methods = Windows::UI::WebUI::impl_ISuspendingEventHandler<T>;
};

template <> struct Traits<Windows::UI::WebUI::INavigatedEventHandler>
{
	using Abi = ABI::Windows::UI::WebUI::INavigatedEventHandler;
	template <typename T> using Methods = Windows::UI::WebUI::impl_INavigatedEventHandler<T>;
};

template <> struct Traits<Windows::UI::WebUI::IActivatedDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::IActivatedDeferral;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IActivatedDeferral<T>;
};

template <> struct Traits<Windows::UI::WebUI::IActivatedOperation>
{
	using Abi = ABI::Windows::UI::WebUI::IActivatedOperation;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IActivatedOperation<T>;
};

template <> struct Traits<Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::IActivatedEventArgsDeferral;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IActivatedEventArgsDeferral<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUINavigatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUINavigatedEventArgs;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUINavigatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUIBackgroundTaskInstance>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUIBackgroundTaskInstance;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUIBackgroundTaskInstance<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUIBackgroundTaskInstanceStatics>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUIBackgroundTaskInstanceStatics;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUIBackgroundTaskInstanceStatics<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUINavigatedDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUINavigatedDeferral;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUINavigatedDeferral<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUINavigatedOperation>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUINavigatedOperation;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUINavigatedOperation<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUIActivationStatics>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUIActivationStatics;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUIActivationStatics<T>;
};

template <> struct Traits<Windows::UI::WebUI::IHtmlPrintDocumentSource>
{
	using Abi = ABI::Windows::UI::WebUI::IHtmlPrintDocumentSource;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IHtmlPrintDocumentSource<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IAnnotationProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IAnnotationProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IAnnotationProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IDockProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IDockProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IDockProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IDragProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IDragProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IDragProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IDropTargetProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IDropTargetProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IDropTargetProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IExpandCollapseProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IGridItemProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IGridItemProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IGridItemProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IGridProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IGridProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IGridProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IInvokeProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IInvokeProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IInvokeProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IItemContainerProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IItemContainerProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IItemContainerProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IMultipleViewProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IMultipleViewProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IMultipleViewProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IObjectModelProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IObjectModelProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IObjectModelProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IRangeValueProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IRangeValueProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IRangeValueProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IIRawElementProviderSimple>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IIRawElementProviderSimple;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IIRawElementProviderSimple<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IScrollItemProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IScrollItemProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IScrollItemProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IScrollProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IScrollProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IScrollProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ISelectionItemProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ISelectionProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ISelectionProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ISelectionProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ISpreadsheetItemProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ISpreadsheetItemProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ISpreadsheetItemProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ISpreadsheetProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ISpreadsheetProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ISpreadsheetProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IStylesProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IStylesProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IStylesProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ISynchronizedInputProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ISynchronizedInputProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ISynchronizedInputProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ITableItemProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ITableItemProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ITableItemProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ITableProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ITableProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ITableProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ITextChildProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ITextChildProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ITextChildProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ITextRangeProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ITextRangeProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ITextRangeProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ITextProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ITextProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ITextProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ITextProvider2>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ITextProvider2;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ITextProvider2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ITextRangeProvider2>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ITextRangeProvider2;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ITextRangeProvider2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IToggleProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IToggleProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IToggleProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ITransformProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ITransformProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ITransformProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::ITransformProvider2>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::ITransformProvider2;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_ITransformProvider2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IValueProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IValueProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IValueProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IVirtualizedItemProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IWindowProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IWindowProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Provider::impl_IWindowProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IDoubleTappedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IDoubleTappedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IDoubleTappedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IHoldingEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IHoldingEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IHoldingEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IKeyEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IKeyEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IKeyEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationCompletedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationCompletedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationCompletedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationDeltaEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationDeltaEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationDeltaEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationInertiaStartingEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationInertiaStartingEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationInertiaStartingEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationStartedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationStartedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationStartedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationStartingEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationStartingEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationStartingEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IPointerEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IPointerEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IPointerEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IRightTappedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IRightTappedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IRightTappedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::ITappedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Input::ITappedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_ITappedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IDoubleTappedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IDoubleTappedRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IDoubleTappedRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IFocusManager>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IFocusManager;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IFocusManager<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IFocusManagerStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IFocusManagerStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IFocusManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IFocusManagerStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IFocusManagerStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IFocusManagerStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IHoldingRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IHoldingRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IHoldingRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::ICommand>
{
	using Abi = ABI::Windows::UI::Xaml::Input::ICommand;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_ICommand<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IInertiaExpansionBehavior>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IInertiaExpansionBehavior;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IInertiaExpansionBehavior<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IInertiaRotationBehavior>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IInertiaRotationBehavior;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IInertiaRotationBehavior<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IInertiaTranslationBehavior>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IInertiaTranslationBehavior;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IInertiaTranslationBehavior<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IInputScope>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IInputScope;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IInputScope<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IInputScopeName>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IInputScopeName;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IInputScopeName<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IInputScopeNameFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IInputScopeNameFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IInputScopeNameFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IKeyRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IKeyRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IKeyRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationCompletedRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationDeltaRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationInertiaStartingRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationPivot>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationPivot;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationPivot<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationPivotFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationPivotFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationPivotFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationStartedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationStartedRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationStartedRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationStartedRoutedEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationStartedRoutedEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationStartedRoutedEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IManipulationStartingRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IManipulationStartingRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IManipulationStartingRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IPointer>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IPointer;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IPointer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IPointerRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IPointerRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IPointerRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::IRightTappedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::IRightTappedRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_IRightTappedRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Input::ITappedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::ITappedRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Input::impl_ITappedRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Media3D::IMatrix3DHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Media3D::IMatrix3DHelper;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Media3D::impl_IMatrix3DHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Media3D::IMatrix3DHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Media3D::IMatrix3DHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Media3D::impl_IMatrix3DHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IRateChangedRoutedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IRateChangedRoutedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IRateChangedRoutedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITimelineMarkerRoutedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITimelineMarkerRoutedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITimelineMarkerRoutedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IMatrixHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IMatrixHelper;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IMatrixHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IMatrixHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IMatrixHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IMatrixHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IArcSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IArcSegment;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IArcSegment<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IArcSegmentStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IArcSegmentStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IArcSegmentStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IBezierSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IBezierSegment;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IBezierSegment<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IBezierSegmentStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IBezierSegmentStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IBezierSegmentStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IBitmapCache>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IBitmapCache;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IBitmapCache<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IBrush;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IBrush<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IBrushStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IBrushStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IBrushStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IBrushFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IBrushFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IBrushFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ICacheMode>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ICacheMode;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ICacheMode<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ICacheModeFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ICacheModeFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ICacheModeFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ICompositeTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ICompositeTransform;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ICompositeTransform<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ICompositeTransformStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ICompositeTransformStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ICompositeTransformStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IEllipseGeometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IEllipseGeometry;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IEllipseGeometry<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IEllipseGeometryStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IEllipseGeometryStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IEllipseGeometryStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IFontFamily>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IFontFamily;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IFontFamily<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IFontFamilyFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IFontFamilyFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IFontFamilyFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGeneralTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGeneralTransform;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGeneralTransform<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGeneralTransformOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGeneralTransformOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGeneralTransformOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGeneralTransformFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGeneralTransformFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGeneralTransformFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGeometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGeometry;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGeometry<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGeometryStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGeometryStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGeometryStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGeometryFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGeometryFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGeometryFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGeometryGroup>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGeometryGroup;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGeometryGroup<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGeometryGroupStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGeometryGroupStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGeometryGroupStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGradientBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGradientBrush;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGradientBrush<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGradientBrushStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGradientBrushStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGradientBrushStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGradientBrushFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGradientBrushFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGradientBrushFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGradientStop>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGradientStop;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGradientStop<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IGradientStopStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IGradientStopStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IGradientStopStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IImageBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IImageBrush;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IImageBrush<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IImageBrushStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IImageBrushStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IImageBrushStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IImageSource>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IImageSource;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IImageSource<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IImageSourceFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IImageSourceFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IImageSourceFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ILinearGradientBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ILinearGradientBrush;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ILinearGradientBrush<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ILinearGradientBrushStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ILinearGradientBrushStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ILinearGradientBrushStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ILinearGradientBrushFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ILinearGradientBrushFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ILinearGradientBrushFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ILineGeometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ILineGeometry;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ILineGeometry<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ILineGeometryStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ILineGeometryStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ILineGeometryStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ILineSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ILineSegment;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ILineSegment<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ILineSegmentStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ILineSegmentStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ILineSegmentStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IMatrix3DProjection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IMatrix3DProjection;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IMatrix3DProjection<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IMatrix3DProjectionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IMatrix3DProjectionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IMatrix3DProjectionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IMatrixTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IMatrixTransform;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IMatrixTransform<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IMatrixTransformStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IMatrixTransformStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IMatrixTransformStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPathFigure>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPathFigure;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPathFigure<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPathFigureStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPathFigureStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPathFigureStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPathGeometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPathGeometry;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPathGeometry<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPathGeometryStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPathGeometryStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPathGeometryStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPathSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPathSegment;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPathSegment<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPathSegmentFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPathSegmentFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPathSegmentFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPlaneProjection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPlaneProjection;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPlaneProjection<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPlaneProjectionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPlaneProjectionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPlaneProjectionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPolyBezierSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPolyBezierSegment;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPolyBezierSegment<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPolyBezierSegmentStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPolyBezierSegmentStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPolyBezierSegmentStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPolyLineSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPolyLineSegment;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPolyLineSegment<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPolyLineSegmentStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPolyLineSegmentStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPolyLineSegmentStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPolyQuadraticBezierSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPolyQuadraticBezierSegment;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPolyQuadraticBezierSegment<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IPolyQuadraticBezierSegmentStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IPolyQuadraticBezierSegmentStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IPolyQuadraticBezierSegmentStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IProjection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IProjection;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IProjection<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IProjectionFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IProjectionFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IProjectionFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IQuadraticBezierSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IQuadraticBezierSegment;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IQuadraticBezierSegment<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IQuadraticBezierSegmentStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IQuadraticBezierSegmentStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IQuadraticBezierSegmentStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IRateChangedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IRateChangedRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IRateChangedRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IRectangleGeometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IRectangleGeometry;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IRectangleGeometry<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IRectangleGeometryStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IRectangleGeometryStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IRectangleGeometryStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IRenderingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IRenderingEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IRenderingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IRotateTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IRotateTransform;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IRotateTransform<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IRotateTransformStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IRotateTransformStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IRotateTransformStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IScaleTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IScaleTransform;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IScaleTransform<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IScaleTransformStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IScaleTransformStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IScaleTransformStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ISkewTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ISkewTransform;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ISkewTransform<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ISkewTransformStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ISkewTransformStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ISkewTransformStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ISolidColorBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ISolidColorBrush;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ISolidColorBrush<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ISolidColorBrushStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ISolidColorBrushStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ISolidColorBrushStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ISolidColorBrushFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ISolidColorBrushFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ISolidColorBrushFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITileBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITileBrush;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITileBrush<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITileBrushStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITileBrushStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITileBrushStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITileBrushFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITileBrushFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITileBrushFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITimelineMarker>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITimelineMarker;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITimelineMarker<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITimelineMarkerStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITimelineMarkerStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITimelineMarkerStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITimelineMarkerRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITimelineMarkerRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITimelineMarkerRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITransform;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITransform<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITransformFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITransformFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITransformFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITransformGroup>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITransformGroup;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITransformGroup<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITransformGroupStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITransformGroupStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITransformGroupStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITranslateTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITranslateTransform;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITranslateTransform<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ITranslateTransformStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ITranslateTransformStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ITranslateTransformStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IVisualTreeHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IVisualTreeHelper;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IVisualTreeHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IVisualTreeHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IVisualTreeHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IVisualTreeHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::IVisualTreeHelperStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Media::IVisualTreeHelperStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_IVisualTreeHelperStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ICompositionTarget>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ICompositionTarget;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ICompositionTarget<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::ICompositionTargetStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ICompositionTargetStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::impl_ICompositionTargetStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IKeyTimeHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IKeyTimeHelper;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IKeyTimeHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IKeyTimeHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IKeyTimeHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IKeyTimeHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IRepeatBehaviorHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IRepeatBehaviorHelper;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IRepeatBehaviorHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IRepeatBehaviorHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IRepeatBehaviorHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IRepeatBehaviorHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IAddDeleteThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IAddDeleteThemeTransition;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IAddDeleteThemeTransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IBackEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IBackEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IBackEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IBackEaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IBackEaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IBackEaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IBeginStoryboard>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IBeginStoryboard;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IBeginStoryboard<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IBeginStoryboardStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IBeginStoryboardStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IBeginStoryboardStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IBounceEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IBounceEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IBounceEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IBounceEaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IBounceEaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IBounceEaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ICircleEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ICircleEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ICircleEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IColorAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IColorAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IColorAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IColorAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IColorAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IColorAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IColorAnimationUsingKeyFrames<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFramesStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFramesStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IColorAnimationUsingKeyFramesStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IColorKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IColorKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IColorKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IColorKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IColorKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IColorKeyFrameFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IColorKeyFrameFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IColorKeyFrameFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IContentThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IContentThemeTransition;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IContentThemeTransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IContentThemeTransitionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IContentThemeTransitionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IContentThemeTransitionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ICubicEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ICubicEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ICubicEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDiscreteColorKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDiscreteDoubleKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDiscreteObjectKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDiscretePointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDiscretePointKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDiscretePointKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDoubleAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDoubleAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDoubleAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDoubleAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDoubleAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDoubleAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDoubleAnimationUsingKeyFrames<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFramesStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFramesStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDoubleAnimationUsingKeyFramesStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDoubleKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDoubleKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDoubleKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDoubleKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDoubleKeyFrameFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDoubleKeyFrameFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDoubleKeyFrameFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDragItemThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDragItemThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDragItemThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDragItemThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDragItemThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDragItemThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDragOverThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDragOverThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDragOverThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDragOverThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDragOverThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDragOverThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDropTargetItemThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IDropTargetItemThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEasingColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEasingColorKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEasingColorKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEasingColorKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEasingColorKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEasingColorKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEasingDoubleKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEasingDoubleKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEasingDoubleKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEasingDoubleKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEasingFunctionBase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEasingFunctionBase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEasingFunctionBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEasingFunctionBaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEasingFunctionBaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEasingFunctionBaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEasingFunctionBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEasingFunctionBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEasingFunctionBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEasingPointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEasingPointKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEasingPointKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEasingPointKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEasingPointKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEasingPointKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEdgeUIThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEdgeUIThemeTransition;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEdgeUIThemeTransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEdgeUIThemeTransitionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEdgeUIThemeTransitionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEdgeUIThemeTransitionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IElasticEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IElasticEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IElasticEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IElasticEaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IElasticEaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IElasticEaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEntranceThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEntranceThemeTransition;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEntranceThemeTransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IEntranceThemeTransitionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IEntranceThemeTransitionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IEntranceThemeTransitionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IExponentialEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IExponentialEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IExponentialEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IExponentialEaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IExponentialEaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IExponentialEaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IFadeInThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IFadeInThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IFadeInThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IFadeInThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IFadeInThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IFadeInThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IFadeOutThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IFadeOutThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IFadeOutThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IFadeOutThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IFadeOutThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IFadeOutThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IKeySpline>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IKeySpline;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IKeySpline<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ILinearColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ILinearColorKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ILinearColorKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ILinearDoubleKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ILinearPointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ILinearPointKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ILinearPointKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_INavigationTransitionInfo<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_INavigationTransitionInfoOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_INavigationTransitionInfoFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IObjectAnimationUsingKeyFrames<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFramesStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFramesStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IObjectAnimationUsingKeyFramesStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IObjectKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IObjectKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IObjectKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IObjectKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IObjectKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IObjectKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IObjectKeyFrameFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IObjectKeyFrameFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IObjectKeyFrameFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPaneThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPaneThemeTransition;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPaneThemeTransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPaneThemeTransitionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPaneThemeTransitionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPaneThemeTransitionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointAnimationUsingKeyFrames<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFramesStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFramesStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointAnimationUsingKeyFramesStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointerDownThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointerDownThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointerDownThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointerDownThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointerDownThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointerDownThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointerUpThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointerUpThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointerUpThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointerUpThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointerUpThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointerUpThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPointKeyFrameFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPointKeyFrameFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPointKeyFrameFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPopInThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPopInThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPopInThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPopInThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPopInThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPopInThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPopOutThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPopOutThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPopOutThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPopOutThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPopOutThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPopOutThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPopupThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPopupThemeTransition;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPopupThemeTransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPopupThemeTransitionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPopupThemeTransitionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPopupThemeTransitionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPowerEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPowerEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPowerEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IPowerEaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IPowerEaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IPowerEaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IQuadraticEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IQuadraticEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IQuadraticEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IQuarticEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IQuarticEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IQuarticEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IQuinticEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IQuinticEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IQuinticEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IReorderThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IReorderThemeTransition;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IReorderThemeTransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IRepositionThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IRepositionThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IRepositionThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IRepositionThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IRepositionThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IRepositionThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IRepositionThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IRepositionThemeTransition;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IRepositionThemeTransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISineEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISineEase;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISineEase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplineColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplineColorKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplineColorKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplineColorKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplineColorKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplineColorKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplineDoubleKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplineDoubleKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplineDoubleKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplineDoubleKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplinePointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplinePointKeyFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplinePointKeyFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplinePointKeyFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplinePointKeyFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplinePointKeyFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplitCloseThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplitCloseThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplitCloseThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplitCloseThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplitOpenThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISplitOpenThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISplitOpenThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISplitOpenThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IStoryboard>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IStoryboard;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IStoryboard<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::IStoryboardStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::IStoryboardStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_IStoryboardStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISwipeBackThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISwipeBackThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISwipeBackThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISwipeBackThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISwipeHintThemeAnimation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ISwipeHintThemeAnimationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ISwipeHintThemeAnimationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ISwipeHintThemeAnimationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ITimeline>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ITimeline;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ITimeline<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ITimelineStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ITimelineStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ITimelineStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ITimelineFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ITimelineFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ITimelineFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ITransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ITransition;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ITransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ITransitionFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ITransitionFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Animation::impl_ITransitionFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IDragCompletedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IDragCompletedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IDragDeltaEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IDragDeltaEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IDragStartedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IDragStartedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IDragStartedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IItemsChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IRangeBaseValueChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IScrollEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IScrollEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IScrollEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IButtonBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IButtonBase;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IButtonBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IButtonBaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IButtonBaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IButtonBaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IButtonBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IButtonBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IButtonBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ICarouselPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ICarouselPanel;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ICarouselPanel<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ICarouselPanelFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ICarouselPanelFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ICarouselPanelFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IComboBoxTemplateSettings<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IDragCompletedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IDragCompletedEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IDragCompletedEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IDragCompletedEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IDragDeltaEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IDragDeltaEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IDragDeltaEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IDragDeltaEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IDragStartedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IDragStartedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IDragStartedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IDragStartedEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IDragStartedEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IDragStartedEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IFlyoutBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IFlyoutBase;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IFlyoutBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IFlyoutBaseOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IFlyoutBaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IFlyoutBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IGridViewItemTemplateSettings<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IScrollSnapPointsInfo<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IItemsChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IListViewItemTemplateSettings<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IOrientedVirtualizingPanel<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanelFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanelFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IOrientedVirtualizingPanelFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IPopup>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IPopup;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IPopup<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IPopupStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IPopupStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IPopupStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IProgressBarTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IProgressBarTemplateSettings;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IProgressBarTemplateSettings<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IProgressRingTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IProgressRingTemplateSettings;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IProgressRingTemplateSettings<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IRangeBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IRangeBase;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IRangeBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IRangeBaseOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IRangeBaseOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IRangeBaseOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IRangeBaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IRangeBaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IRangeBaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IRangeBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IRangeBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IRangeBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IRangeBaseValueChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IRepeatButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IRepeatButton;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IRepeatButton<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IRepeatButtonStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IRepeatButtonStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IRepeatButtonStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IScrollBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IScrollBar;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IScrollBar<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IScrollBarStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IScrollBarStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IScrollBarStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IScrollEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IScrollEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IScrollEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ISelector>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ISelector;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ISelector<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ISelectorStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ISelectorStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ISelectorStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ISelectorFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ISelectorFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ISelectorFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ISelectorItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ISelectorItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ISelectorItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ISelectorItemStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ISelectorItemStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ISelectorItemStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ISelectorItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ISelectorItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ISelectorItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ISettingsFlyoutTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ISettingsFlyoutTemplateSettings;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ISettingsFlyoutTemplateSettings<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IThumb>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IThumb;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IThumb<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IThumbStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IThumbStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IThumbStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ITickBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ITickBar;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ITickBar<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ITickBarStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ITickBarStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ITickBarStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IToggleButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IToggleButton;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IToggleButton<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IToggleButtonOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IToggleButtonOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IToggleButtonOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IToggleButtonStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IToggleButtonStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IToggleButtonStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IToggleButtonFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IToggleButtonFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IToggleButtonFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IToggleSwitchTemplateSettings<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IToolTipTemplateSettings<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IGridViewItemPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IGridViewItemPresenter;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IGridViewItemPresenter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IGridViewItemPresenterStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IGridViewItemPresenterStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IGridViewItemPresenterStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IGridViewItemPresenterFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IGridViewItemPresenterFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IGridViewItemPresenterFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenter;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IListViewItemPresenter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenterStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenterStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IListViewItemPresenterStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenterFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenterFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IListViewItemPresenterFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IGeneratorPositionHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::IGeneratorPositionHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::IGeneratorPositionHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_IGeneratorPositionHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ILayoutInformation>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ILayoutInformation;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ILayoutInformation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ILayoutInformationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ILayoutInformationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::Primitives::impl_ILayoutInformationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::INotifyCollectionChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::INotifyCollectionChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_INotifyCollectionChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::IBindableVectorChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_IBindableVectorChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::IBindableIterable>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::IBindableIterable;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_IBindableIterable<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::IBindableIterator>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::IBindableIterator;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_IBindableIterator<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::IBindableVector>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::IBindableVector;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_IBindableVector<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::IBindableVectorView>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::IBindableVectorView;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_IBindableVectorView<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::INotifyCollectionChanged>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::INotifyCollectionChanged;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_INotifyCollectionChanged<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::INotifyCollectionChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::INotifyCollectionChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_INotifyCollectionChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::INotifyCollectionChangedEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::INotifyCollectionChangedEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_INotifyCollectionChangedEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Interop::IBindableObservableVector>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::IBindableObservableVector;
	template <typename T> using Methods = Windows::UI::Xaml::Interop::impl_IBindableObservableVector<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICurrentChangingEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICurrentChangingEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICurrentChangingEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IPropertyChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IPropertyChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IPropertyChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBinding>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBinding;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBinding<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IValueConverter>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IValueConverter;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IValueConverter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBindingFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBindingFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBindingFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBinding2>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBinding2;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBinding2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBindingBase>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBindingBase;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBindingBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBindingBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBindingBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBindingBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBindingExpression>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBindingExpression;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBindingExpression<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBindingExpressionFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBindingExpressionFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBindingExpressionFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBindingExpressionBase>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBindingExpressionBase;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBindingExpressionBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBindingExpressionBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBindingExpressionBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBindingExpressionBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICollectionViewSource>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICollectionViewSource;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICollectionViewSource<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICollectionView>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICollectionView;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICollectionView<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICollectionViewSourceStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICollectionViewSourceStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICollectionViewSourceStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICurrentChangingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICurrentChangingEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICurrentChangingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICurrentChangingEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICurrentChangingEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICurrentChangingEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICollectionViewGroup>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICollectionViewGroup;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICollectionViewGroup<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICustomProperty>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICustomProperty;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICustomProperty<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICustomPropertyProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICustomPropertyProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICustomPropertyProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::INotifyPropertyChanged>
{
	using Abi = ABI::Windows::UI::Xaml::Data::INotifyPropertyChanged;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_INotifyPropertyChanged<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IPropertyChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IPropertyChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IPropertyChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IPropertyChangedEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IPropertyChangedEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IPropertyChangedEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IRelativeSource>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IRelativeSource;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IRelativeSource<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IRelativeSourceFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IRelativeSourceFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IRelativeSourceFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBindingOperations>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBindingOperations;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBindingOperations<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::IBindingOperationsStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Data::IBindingOperationsStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_IBindingOperationsStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ISupportIncrementalLoading>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ISupportIncrementalLoading;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ISupportIncrementalLoading<T>;
};

template <> struct Traits<Windows::UI::Xaml::Data::ICollectionViewFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Data::ICollectionViewFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Data::impl_ICollectionViewFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IBlock>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IBlock;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IBlock<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IBlockStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IBlockStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IBlockStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IBlockFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IBlockFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IBlockFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IBold>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IBold;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IBold<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IGlyphs>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IGlyphs;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IGlyphs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IGlyphsStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IGlyphsStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IGlyphsStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IInline>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IInline;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IInline<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IInlineFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IInlineFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IInlineFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IInlineUIContainer>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IInlineUIContainer;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IInlineUIContainer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IItalic>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IItalic;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IItalic<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ILineBreak>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ILineBreak;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ILineBreak<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IParagraph>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IParagraph;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IParagraph<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IParagraphStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IParagraphStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IParagraphStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IRun>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IRun;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IRun<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IRunStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IRunStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IRunStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ISpan>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ISpan;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ISpan<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ISpanFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ISpanFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ISpanFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ITextElement>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ITextElement;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ITextElement<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ITextElementOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ITextElementOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ITextElementOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ITextElementStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ITextElementStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ITextElementStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ITextElementFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ITextElementFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ITextElementFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ITextPointer>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ITextPointer;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ITextPointer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ITypography>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ITypography;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ITypography<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::ITypographyStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::ITypographyStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_ITypographyStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IUnderline>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IUnderline;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IUnderline<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IHyperlink>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IHyperlink;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IHyperlink<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IHyperlinkStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IHyperlinkStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IHyperlinkStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Documents::IHyperlinkClickEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::IHyperlinkClickEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Documents::impl_IHyperlinkClickEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::ILoadCompletedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::ILoadCompletedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_ILoadCompletedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::INavigatedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::INavigatedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_INavigatedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::INavigatingCancelEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::INavigatingCancelEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_INavigatingCancelEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::INavigationFailedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::INavigationFailedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_INavigationFailedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::INavigationStoppedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::INavigationStoppedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_INavigationStoppedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_INavigatingCancelEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs2>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs2;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_INavigatingCancelEventArgs2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::INavigationEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::INavigationEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_INavigationEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::INavigationEventArgs2>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::INavigationEventArgs2;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_INavigationEventArgs2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::INavigationFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::INavigationFailedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_INavigationFailedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::IPageStackEntry>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::IPageStackEntry;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_IPageStackEntry<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::IPageStackEntryStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::IPageStackEntryStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_IPageStackEntryStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::IPageStackEntryFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::IPageStackEntryFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Navigation::impl_IPageStackEntryFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Filters::IHttpFilter>
{
	using Abi = ABI::Windows::Web::Http::Filters::IHttpFilter;
	template <typename T> using Methods = Windows::Web::Http::Filters::impl_IHttpFilter<T>;
};

template <> struct Traits<Windows::Web::Http::Filters::IHttpCacheControl>
{
	using Abi = ABI::Windows::Web::Http::Filters::IHttpCacheControl;
	template <typename T> using Methods = Windows::Web::Http::Filters::impl_IHttpCacheControl<T>;
};

template <> struct Traits<Windows::Web::Http::Filters::IHttpBaseProtocolFilter>
{
	using Abi = ABI::Windows::Web::Http::Filters::IHttpBaseProtocolFilter;
	template <typename T> using Methods = Windows::Web::Http::Filters::impl_IHttpBaseProtocolFilter<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentHeaderCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentHeaderCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpRequestHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpRequestHeaderCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpRequestHeaderCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpResponseHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpResponseHeaderCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpResponseHeaderCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCacheDirectiveHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCredentialsHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCredentialsHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCredentialsHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCredentialsHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCredentialsHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCredentialsHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCredentialsHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCredentialsHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCredentialsHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentDispositionHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentDispositionHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentDispositionHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentRangeHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentRangeHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentRangeHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentRangeHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentRangeHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentRangeHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentRangeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentRangeHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentRangeHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpDateOrDeltaHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpDateOrDeltaHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMethodHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpNameValueHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpNameValueHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpNameValueHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpNameValueHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpNameValueHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpNameValueHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpNameValueHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpNameValueHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpNameValueHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpClientFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpClientFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpClientFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpClient>
{
	using Abi = ABI::Windows::Web::Http::IHttpClient;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpClient<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpContent>
{
	using Abi = ABI::Windows::Web::Http::IHttpContent;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpContent<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpCookieManager>
{
	using Abi = ABI::Windows::Web::Http::IHttpCookieManager;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpCookieManager<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpCookieFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpCookieFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpCookieFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpCookie>
{
	using Abi = ABI::Windows::Web::Http::IHttpCookie;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpCookie<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMethodStatics>
{
	using Abi = ABI::Windows::Web::Http::IHttpMethodStatics;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMethodStatics<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMethodFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpMethodFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMethodFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMethod>
{
	using Abi = ABI::Windows::Web::Http::IHttpMethod;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMethod<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpTransportInformation>
{
	using Abi = ABI::Windows::Web::Http::IHttpTransportInformation;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpTransportInformation<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpRequestMessageFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpRequestMessageFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpRequestMessageFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpRequestMessage>
{
	using Abi = ABI::Windows::Web::Http::IHttpRequestMessage;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpRequestMessage<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpResponseMessageFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpResponseMessageFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpResponseMessageFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpResponseMessage>
{
	using Abi = ABI::Windows::Web::Http::IHttpResponseMessage;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpResponseMessage<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpStringContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpStringContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpStringContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpBufferContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpBufferContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpBufferContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpStreamContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpStreamContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpStreamContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpFormUrlEncodedContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpFormUrlEncodedContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpFormUrlEncodedContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMultipartContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpMultipartContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMultipartContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMultipartContent>
{
	using Abi = ABI::Windows::Web::Http::IHttpMultipartContent;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMultipartContent<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMultipartFormDataContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpMultipartFormDataContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMultipartFormDataContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMultipartFormDataContent>
{
	using Abi = ABI::Windows::Web::Http::IHttpMultipartFormDataContent;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMultipartFormDataContent<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IBackClickEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IBackClickEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IBackClickEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICleanUpVirtualizedItemEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContextMenuOpeningEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContextMenuOpeningEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContextMenuOpeningEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDragItemsStartingEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDragItemsStartingEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDragItemsStartingEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemClickEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemClickEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemClickEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::INotifyEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::INotifyEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_INotifyEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISelectionChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISelectionChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISelectionChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISemanticZoomViewChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextControlPasteEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextControlPasteEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextControlPasteEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHubSectionHeaderClickEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISectionsInViewChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewNavigationFailedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IBackClickEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IBackClickEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IBackClickEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IBorder>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IBorder;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IBorder<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IBorderStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IBorderStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IBorderStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IButton;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IButton<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IButtonFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IButtonFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IButtonFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IButtonWithFlyout>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IButtonWithFlyout;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IButtonWithFlyout<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IButtonStaticsWithFlyout<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICanvas>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICanvas;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICanvas<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICanvasStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICanvasStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICanvasStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICanvasFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICanvasFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICanvasFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICaptureElement>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICaptureElement;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICaptureElement<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICaptureElementStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICaptureElementStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICaptureElementStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICheckBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICheckBox;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICheckBox<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICheckBoxFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICheckBoxFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICheckBoxFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICleanUpVirtualizedItemEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IColumnDefinition>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IColumnDefinition;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IColumnDefinition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IColumnDefinitionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IColumnDefinitionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IColumnDefinitionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IComboBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IComboBox;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IComboBox<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IComboBoxOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IComboBoxOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IComboBoxOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IComboBoxStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IComboBoxStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IComboBoxStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IComboBoxFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IComboBoxFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IComboBoxFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IComboBox2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IComboBox2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IComboBox2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IComboBoxStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IComboBoxStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IComboBoxStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IComboBoxItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IComboBoxItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IComboBoxItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IComboBoxItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IComboBoxItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IComboBoxItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContainerContentChangingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentControl>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentControl;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentControl<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentControlOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentControlOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentControlOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentControlStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentControlStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentControlStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentControlFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentControlFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentControlFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentControl2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentControl2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentControl2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentPresenter;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentPresenter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentPresenterOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentPresenterOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentPresenterOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentPresenterStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentPresenterStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentPresenterFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentPresenterFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentPresenterFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentPresenter2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentPresenter2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentPresenter2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContentPresenterStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContentPresenterStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContentPresenterStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IContextMenuEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IContextMenuEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IContextMenuEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDataTemplateSelector>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDataTemplateSelector<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDataTemplateSelectorOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDataTemplateSelectorFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDataTemplateSelector2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDataTemplateSelector2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDataTemplateSelector2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDataTemplateSelectorOverrides2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDatePicker>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDatePicker;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDatePicker<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDatePickerStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDatePickerStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDatePickerStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDatePickerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDatePickerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDatePickerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDatePickerValueChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IDragItemsStartingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlipView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlipView;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlipView<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlipViewFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlipViewFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlipViewFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlipView2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlipView2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlipView2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlipViewStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlipViewStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlipViewStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlipViewItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlipViewItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlipViewItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlipViewItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlipViewItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlipViewItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGrid>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGrid;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGrid<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGridStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGridStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGridStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGridFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGridFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGridFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGridView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGridView;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGridView<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGridViewFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGridViewFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGridViewFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGridViewItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGridViewItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGridViewItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGridViewItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGridViewItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGridViewItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGroupItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGroupItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGroupItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGroupItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGroupItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGroupItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGroupStyle>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGroupStyle;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGroupStyle<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGroupStyleFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGroupStyleFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGroupStyleFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGroupStyle2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGroupStyle2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGroupStyle2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGroupStyleSelector>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGroupStyleSelector;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGroupStyleSelector<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGroupStyleSelectorOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGroupStyleSelectorFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHyperlinkButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHyperlinkButton;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHyperlinkButton<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHyperlinkButtonStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHyperlinkButtonStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHyperlinkButtonFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHyperlinkButtonFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemContainerMapping>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemContainerMapping;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemContainerMapping<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IImage>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IImage;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IImage<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IImageStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IImageStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IImageStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::INavigate>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::INavigate;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_INavigate<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISemanticZoomInformation>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISemanticZoomInformation;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISemanticZoomInformation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemClickEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemClickEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemClickEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemContainerGenerator>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemContainerGenerator<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsControl>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsControl;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsControl<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsControlOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsControlOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsControlOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsControlStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsControlStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsControlStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsControlFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsControlFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsControlFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsControl2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsControl2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsControl2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsPanelTemplate>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsPanelTemplate;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsPanelTemplate<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsPresenter;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsPresenter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsPresenterStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsPresenterStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsPresenterStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsPresenter2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsPresenter2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsPresenter2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsPresenterStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsPresenterStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsPresenterStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListBox;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListBox<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListBoxStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListBoxStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListBoxStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListBoxFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListBoxFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListBoxFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListBoxItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListBoxItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListBoxItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListBoxItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListBoxItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListBoxItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListView;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListView<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewBase;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewBaseStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewBaseStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewBase2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewBase2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewBase2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewBaseStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewBaseStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewBaseStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMediaElement>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMediaElement;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMediaElement<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMediaElementStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMediaElementStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMediaElementStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMediaElement2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMediaElement2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMediaElement2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMediaElementStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMediaElementStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMediaElementStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::INotifyEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::INotifyEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_INotifyEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::INotifyEventArgs2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::INotifyEventArgs2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_INotifyEventArgs2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPanel;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPanel<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPanelStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPanelStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPanelStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPanelFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPanelFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPanelFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPasswordBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPasswordBox;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPasswordBox<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPasswordBoxStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPasswordBoxStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPasswordBoxStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPasswordBox2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPasswordBox2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPasswordBox2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPasswordBoxStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPasswordBoxStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPasswordBoxStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IProgressBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IProgressBar;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IProgressBar<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IProgressBarStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IProgressBarStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IProgressBarStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IProgressBarFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IProgressBarFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IProgressBarFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IProgressRing>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IProgressRing;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IProgressRing<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IProgressRingStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IProgressRingStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IProgressRingStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRadioButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRadioButton;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRadioButton<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRadioButtonStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRadioButtonStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRadioButtonStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRadioButtonFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRadioButtonFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRadioButtonFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichEditBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichEditBox;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichEditBox<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichEditBoxStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichEditBoxStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichEditBoxFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichEditBoxFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichEditBoxFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichEditBox2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichEditBox2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichEditBox2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichEditBoxStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichEditBoxStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichEditBoxStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichTextBlock>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichTextBlock;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichTextBlock<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichTextBlockStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichTextBlockStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichTextBlockStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichTextBlock2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichTextBlock2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichTextBlock2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichTextBlockStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichTextBlockStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichTextBlockStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichTextBlockOverflow>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichTextBlockOverflow<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichTextBlockOverflowStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflow2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichTextBlockOverflow2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRichTextBlockOverflowStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRowDefinition>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRowDefinition;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRowDefinition<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IRowDefinitionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IRowDefinitionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IRowDefinitionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IScrollContentPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IScrollContentPresenter;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IScrollContentPresenter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IScrollViewer>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IScrollViewer;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IScrollViewer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IScrollViewerStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IScrollViewerStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IScrollViewerStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IScrollViewer2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IScrollViewer2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IScrollViewer2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IScrollViewerStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IScrollViewerStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IScrollViewerStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IScrollViewerView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IScrollViewerView;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IScrollViewerView<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IScrollViewerViewChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IScrollViewerViewChangingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISelectionChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISelectionChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISelectionChangedEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISemanticZoom>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISemanticZoom;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISemanticZoom<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISemanticZoomStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISemanticZoomStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISemanticZoomStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISemanticZoomLocation>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISemanticZoomLocation;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISemanticZoomLocation<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISemanticZoomViewChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISettingsFlyout>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISettingsFlyout;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISettingsFlyout<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISettingsFlyoutStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISettingsFlyoutStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISettingsFlyoutFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISettingsFlyoutFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISlider>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISlider;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISlider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISliderStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISliderStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISliderStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISliderFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISliderFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISliderFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISlider2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISlider2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISlider2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISliderStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISliderStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISliderStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IStackPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IStackPanel;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IStackPanel<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IStackPanelStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IStackPanelStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IStackPanelStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IStackPanelFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IStackPanelFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IStackPanelFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IStyleSelector>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IStyleSelector;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IStyleSelector<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IStyleSelectorOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IStyleSelectorOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IStyleSelectorOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IStyleSelectorFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IStyleSelectorFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IStyleSelectorFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextBlock>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextBlock;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextBlock<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextBlockStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextBlockStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextBlockStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextBlock2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextBlock2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextBlock2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextBlockStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextBlockStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextBlockStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextBox;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextBox<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextBoxStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextBoxStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextBoxStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextBoxFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextBoxFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextBoxFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextBox2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextBox2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextBox2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextBoxStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextBoxStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextBoxStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITextControlPasteEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITextControlPasteEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToggleSwitch>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToggleSwitch;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToggleSwitch<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToggleSwitchOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToggleSwitchOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToggleSwitchOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToggleSwitchStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToggleSwitchStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToggleSwitchStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToolTip>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToolTip;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToolTip<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToolTipStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToolTipStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToolTipStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToolTipFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToolTipFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToolTipFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToolTipService>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToolTipService;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToolTipService<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToolTipServiceStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToolTipServiceStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToolTipServiceStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IUIElementCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IUIElementCollection;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IUIElementCollection<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IUserControl>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IUserControl;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IUserControl<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IUserControlStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IUserControlStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IUserControlStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IUserControlFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IUserControlFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IUserControlFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGrid;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IVariableSizedWrapGrid<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IVariableSizedWrapGridStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IViewbox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IViewbox;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IViewbox<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IViewboxStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IViewboxStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IViewboxStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IVirtualizingPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IVirtualizingPanel;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IVirtualizingPanel<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IVirtualizingPanelOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IVirtualizingPanelProtected;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IVirtualizingPanelProtected<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IVirtualizingPanelFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IVirtualizingPanelFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IVirtualizingStackPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IVirtualizingStackPanel<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IVirtualizingStackPanelOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IVirtualizingStackPanelStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBar;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBar<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarButton;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarButton<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarButtonStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarButtonStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarButtonStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarButtonFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarButtonFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarButtonFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarSeparator>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarSeparator;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarSeparator<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarSeparatorStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarSeparatorStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarSeparatorFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarSeparatorFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarToggleButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarToggleButton;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarToggleButton<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarToggleButtonStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IAppBarToggleButtonFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IBitmapIcon>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IBitmapIcon;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IBitmapIcon<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IBitmapIconStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IBitmapIconStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IBitmapIconStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IBitmapIconFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IBitmapIconFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IBitmapIconFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICommandBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICommandBar;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICommandBar<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICommandBarElement>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICommandBarElement;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICommandBarElement<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICommandBarStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICommandBarStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICommandBarStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ICommandBarFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ICommandBarFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ICommandBarFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlyout>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlyout;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlyout<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlyoutStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlyoutStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlyoutStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlyoutFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlyoutFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlyoutFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlyoutPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlyoutPresenter;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlyoutPresenter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFlyoutPresenterFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFlyoutPresenterFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFontIcon>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFontIcon;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFontIcon<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFontIconStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFontIconStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFontIconStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFontIconFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFontIconFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFontIconFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFrame;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFrame<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFrameStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFrameStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFrameStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFrameFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFrameFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFrameFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFrame2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFrame2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFrame2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IFrameStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IFrameStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IFrameStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGridViewHeaderItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGridViewHeaderItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGridViewHeaderItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IGridViewHeaderItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHub>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHub;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHub<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHubStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHubStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHubStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHubFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHubFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHubFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHubSection>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHubSection;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHubSection<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHubSectionStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHubSectionStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHubSectionStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHubSectionFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHubSectionFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHubSectionFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IHubSectionHeaderClickEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IIconElement>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IIconElement;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IIconElement<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IIconElementStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IIconElementStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IIconElementStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IIconElementFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IIconElementFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IIconElementFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsStackPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsStackPanel;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsStackPanel<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsStackPanelStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsStackPanelStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsStackPanelStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsWrapGrid>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsWrapGrid;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsWrapGrid<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IItemsWrapGridStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IItemsWrapGridStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IItemsWrapGridStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewBaseHeaderItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewBaseHeaderItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewBaseHeaderItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewHeaderItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewHeaderItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewHeaderItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IListViewHeaderItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IListViewHeaderItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyout>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyout;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyout<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutItemStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItemBase;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutItemBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutItemBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutPresenter;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutPresenter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutPresenterFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSeparator;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutSeparator<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IMenuFlyoutSeparatorFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPage>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPage;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPage<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPageOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPageOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPageOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPageStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPageStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPageStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPageFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPageFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPageFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPathIcon>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPathIcon;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPathIcon<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPathIconStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPathIconStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPathIconStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IPathIconFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IPathIconFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IPathIconFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISearchBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISearchBox;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISearchBox<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISearchBoxStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISearchBoxStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISearchBoxStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISearchBoxFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISearchBoxFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISearchBoxFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISearchBoxQueryChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISearchBoxQuerySubmittedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISearchBoxResultSuggestionChosenEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISearchBoxSuggestionsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISectionsInViewChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISectionsInViewChangedEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISwapChainBackgroundPanel<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISwapChainBackgroundPanelFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISwapChainBackgroundPanel2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISwapChainPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISwapChainPanel;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISwapChainPanel<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISwapChainPanelStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISwapChainPanelStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISwapChainPanelStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISwapChainPanelFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISwapChainPanelFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISwapChainPanelFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISymbolIcon>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISymbolIcon;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISymbolIcon<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISymbolIconStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISymbolIconStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISymbolIconStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ISymbolIconFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ISymbolIconFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ISymbolIconFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITimePicker>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITimePicker;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITimePicker<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITimePickerStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITimePickerStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITimePickerStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITimePickerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITimePickerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITimePickerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_ITimePickerValueChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToggleMenuFlyoutItem<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToggleMenuFlyoutItemStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IToggleMenuFlyoutItemFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebView;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebView<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebView2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebView2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebView2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewBrush;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewBrush<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewBrushStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewBrushStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewBrushStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewContentLoadingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewDOMContentLoadedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewLongRunningScriptDetectedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewNavigationCompletedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewNavigationFailedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewNavigationStartingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWebViewUnviewableContentIdentifiedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWrapGrid>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWrapGrid;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWrapGrid<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IWrapGridStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IWrapGridStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IWrapGridStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IControl>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IControl;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IControl<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IControlOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IControlOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IControlOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IControlProtected>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IControlProtected;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IControlProtected<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IControlStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IControlStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IControlStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IControlFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IControlFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IControlFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IControlTemplate>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IControlTemplate;
	template <typename T> using Methods = Windows::UI::Xaml::Controls::impl_IControlTemplate<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IButtonAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IButtonAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IButtonBaseAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IButtonBaseAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ICaptureElementAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ICaptureElementAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ICheckBoxAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ICheckBoxAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IComboBoxAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IComboBoxAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IComboBoxItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IComboBoxItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IComboBoxItemDataAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IComboBoxItemDataAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFlipViewAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFlipViewAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFlipViewItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFlipViewItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFlipViewItemDataAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFlipViewItemDataAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGridViewAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGridViewAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGridViewItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGridViewItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGridViewItemDataAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGridViewItemDataAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGroupItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGroupItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IHyperlinkButtonAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IHyperlinkButtonAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IImageAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IImageAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IImageAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IImageAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IImageAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IImageAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IItemsControlAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IItemsControlAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListBoxAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListBoxAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListBoxItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListBoxItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListBoxItemDataAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListBoxItemDataAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewBaseAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewBaseAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewItemDataAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewItemDataAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IMediaElementAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IMediaElementAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IPasswordBoxAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IPasswordBoxAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IProgressBarAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IProgressBarAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IProgressRingAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IProgressRingAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRadioButtonAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRadioButtonAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRangeBaseAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRangeBaseAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRepeatButtonAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRepeatButtonAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRichEditBoxAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRichEditBoxAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRichTextBlockAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRichTextBlockAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRichTextBlockOverflowAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IRichTextBlockOverflowAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IScrollBarAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IScrollBarAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IScrollViewerAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IScrollViewerAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISelectorAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISelectorAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISelectorItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISelectorItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISemanticZoomAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISemanticZoomAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISettingsFlyoutAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISettingsFlyoutAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISliderAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISliderAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ITextBlockAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ITextBlockAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ITextBoxAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ITextBoxAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IThumbAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IThumbAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IToggleButtonAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IToggleButtonAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IToggleSwitchAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IToggleSwitchAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAppBarAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAppBarAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAppBarButtonAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAppBarButtonAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAppBarToggleButtonAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAppBarToggleButtonAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IDatePickerAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IDatePickerAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFlyoutPresenterAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFlyoutPresenterAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGridViewHeaderItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IGridViewHeaderItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IHubAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IHubAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IHubAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IHubAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IHubAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IHubAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IHubSectionAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IHubSectionAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewBaseHeaderItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewBaseHeaderItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewHeaderItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IListViewHeaderItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IMenuFlyoutItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IMenuFlyoutItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IMenuFlyoutPresenterAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IMenuFlyoutPresenterAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISearchBoxAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ISearchBoxAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ITimePickerAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_ITimePickerAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IToggleMenuFlyoutItemAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IToggleMenuFlyoutItemAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAutomationPeerOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAutomationPeerProtected;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAutomationPeerProtected<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAutomationPeerStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAutomationPeerStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAutomationPeerStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAutomationPeer2>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAutomationPeer2;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAutomationPeer2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IAutomationPeerOverrides2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFrameworkElementAutomationPeer<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFrameworkElementAutomationPeerStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::Peers::impl_IFrameworkElementAutomationPeerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::ICreateDefaultValueCallback>
{
	using Abi = ABI::Windows::UI::Xaml::ICreateDefaultValueCallback;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ICreateDefaultValueCallback<T>;
};

template <> struct Traits<Windows::UI::Xaml::IPropertyChangedCallback>
{
	using Abi = ABI::Windows::UI::Xaml::IPropertyChangedCallback;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IPropertyChangedCallback<T>;
};

template <> struct Traits<Windows::UI::Xaml::IApplicationInitializationCallback>
{
	using Abi = ABI::Windows::UI::Xaml::IApplicationInitializationCallback;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IApplicationInitializationCallback<T>;
};

template <> struct Traits<Windows::UI::Xaml::IBindingFailedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IBindingFailedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IBindingFailedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDependencyPropertyChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IDependencyPropertyChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDependencyPropertyChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDragEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IDragEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDragEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IExceptionRoutedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IExceptionRoutedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IExceptionRoutedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IRoutedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IRoutedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IRoutedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISizeChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::ISizeChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISizeChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISuspendingEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::ISuspendingEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISuspendingEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IUnhandledExceptionEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IUnhandledExceptionEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IUnhandledExceptionEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualStateChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualStateChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualStateChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IWindowActivatedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IWindowActivatedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IWindowActivatedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IWindowClosedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IWindowClosedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IWindowClosedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IWindowSizeChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IWindowSizeChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IWindowSizeChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::IWindowVisibilityChangedEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::IWindowVisibilityChangedEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IWindowVisibilityChangedEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::ICornerRadiusHelper>
{
	using Abi = ABI::Windows::UI::Xaml::ICornerRadiusHelper;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ICornerRadiusHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::ICornerRadiusHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::ICornerRadiusHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ICornerRadiusHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDurationHelper>
{
	using Abi = ABI::Windows::UI::Xaml::IDurationHelper;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDurationHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDurationHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IDurationHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDurationHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IGridLengthHelper>
{
	using Abi = ABI::Windows::UI::Xaml::IGridLengthHelper;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IGridLengthHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::IGridLengthHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IGridLengthHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IGridLengthHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IPointHelper>
{
	using Abi = ABI::Windows::UI::Xaml::IPointHelper;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IPointHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::IPointHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IPointHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IPointHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IRectHelper>
{
	using Abi = ABI::Windows::UI::Xaml::IRectHelper;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IRectHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::IRectHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IRectHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IRectHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISizeHelper>
{
	using Abi = ABI::Windows::UI::Xaml::ISizeHelper;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISizeHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISizeHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::ISizeHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISizeHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IThicknessHelper>
{
	using Abi = ABI::Windows::UI::Xaml::IThicknessHelper;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IThicknessHelper<T>;
};

template <> struct Traits<Windows::UI::Xaml::IThicknessHelperStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IThicknessHelperStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IThicknessHelperStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IApplicationInitializationCallbackParams>
{
	using Abi = ABI::Windows::UI::Xaml::IApplicationInitializationCallbackParams;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IApplicationInitializationCallbackParams<T>;
};

template <> struct Traits<Windows::UI::Xaml::IBindingFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IBindingFailedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IBindingFailedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDataContextChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IDataContextChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDataContextChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDataTemplate>
{
	using Abi = ABI::Windows::UI::Xaml::IDataTemplate;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDataTemplate<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDataTemplateFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IDataTemplateFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDataTemplateFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDataTemplateKey>
{
	using Abi = ABI::Windows::UI::Xaml::IDataTemplateKey;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDataTemplateKey<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDataTemplateKeyFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IDataTemplateKeyFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDataTemplateKeyFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDebugSettings>
{
	using Abi = ABI::Windows::UI::Xaml::IDebugSettings;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDebugSettings<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDebugSettings2>
{
	using Abi = ABI::Windows::UI::Xaml::IDebugSettings2;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDebugSettings2<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDependencyObject>
{
	using Abi = ABI::Windows::UI::Xaml::IDependencyObject;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDependencyObject<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDependencyObjectFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IDependencyObjectFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDependencyObjectFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDependencyObjectCollectionFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IDependencyObjectCollectionFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDependencyObjectCollectionFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDependencyProperty>
{
	using Abi = ABI::Windows::UI::Xaml::IDependencyProperty;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDependencyProperty<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDependencyPropertyStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IDependencyPropertyStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDependencyPropertyStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDependencyPropertyChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IDependencyPropertyChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDependencyPropertyChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDispatcherTimer>
{
	using Abi = ABI::Windows::UI::Xaml::IDispatcherTimer;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDispatcherTimer<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDispatcherTimerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IDispatcherTimerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDispatcherTimerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IDragEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IDragEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IDragEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IEventTrigger>
{
	using Abi = ABI::Windows::UI::Xaml::IEventTrigger;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IEventTrigger<T>;
};

template <> struct Traits<Windows::UI::Xaml::IExceptionRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IExceptionRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IExceptionRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IExceptionRoutedEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IExceptionRoutedEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IExceptionRoutedEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IApplication>
{
	using Abi = ABI::Windows::UI::Xaml::IApplication;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IApplication<T>;
};

template <> struct Traits<Windows::UI::Xaml::IApplicationOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::IApplicationOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IApplicationOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::IApplicationStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IApplicationStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IApplicationStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IApplicationFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IApplicationFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IApplicationFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkElement>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkElement;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkElement<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkElementOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkElementOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkElementOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkElementStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkElementStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkElementStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkElementFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkElementFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkElementFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkElement2>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkElement2;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkElement2<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkElementOverrides2;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkElementOverrides2<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkElementStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkElementStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkElementStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkTemplate>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkTemplate;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkTemplate<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkTemplateFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkTemplateFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkTemplateFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkView>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkView;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkView<T>;
};

template <> struct Traits<Windows::UI::Xaml::IFrameworkViewSource>
{
	using Abi = ABI::Windows::UI::Xaml::IFrameworkViewSource;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IFrameworkViewSource<T>;
};

template <> struct Traits<Windows::UI::Xaml::IMediaFailedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IMediaFailedRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IMediaFailedRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IPropertyMetadata>
{
	using Abi = ABI::Windows::UI::Xaml::IPropertyMetadata;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IPropertyMetadata<T>;
};

template <> struct Traits<Windows::UI::Xaml::IPropertyMetadataStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IPropertyMetadataStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IPropertyMetadataStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IPropertyMetadataFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IPropertyMetadataFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IPropertyMetadataFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IPropertyPath>
{
	using Abi = ABI::Windows::UI::Xaml::IPropertyPath;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IPropertyPath<T>;
};

template <> struct Traits<Windows::UI::Xaml::IPropertyPathFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IPropertyPathFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IPropertyPathFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IResourceDictionary>
{
	using Abi = ABI::Windows::UI::Xaml::IResourceDictionary;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IResourceDictionary<T>;
};

template <> struct Traits<Windows::UI::Xaml::IResourceDictionaryFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IResourceDictionaryFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IResourceDictionaryFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IRoutedEvent>
{
	using Abi = ABI::Windows::UI::Xaml::IRoutedEvent;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IRoutedEvent<T>;
};

template <> struct Traits<Windows::UI::Xaml::IRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IRoutedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IRoutedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IRoutedEventArgsFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IRoutedEventArgsFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IRoutedEventArgsFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISetter>
{
	using Abi = ABI::Windows::UI::Xaml::ISetter;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISetter<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISetterFactory>
{
	using Abi = ABI::Windows::UI::Xaml::ISetterFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISetterFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISetterBase>
{
	using Abi = ABI::Windows::UI::Xaml::ISetterBase;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISetterBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISetterBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::ISetterBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISetterBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISetterBaseCollection>
{
	using Abi = ABI::Windows::UI::Xaml::ISetterBaseCollection;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISetterBaseCollection<T>;
};

template <> struct Traits<Windows::UI::Xaml::ISizeChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::ISizeChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ISizeChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IStyle>
{
	using Abi = ABI::Windows::UI::Xaml::IStyle;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IStyle<T>;
};

template <> struct Traits<Windows::UI::Xaml::IStyleFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IStyleFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IStyleFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::ITriggerAction>
{
	using Abi = ABI::Windows::UI::Xaml::ITriggerAction;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ITriggerAction<T>;
};

template <> struct Traits<Windows::UI::Xaml::ITriggerActionFactory>
{
	using Abi = ABI::Windows::UI::Xaml::ITriggerActionFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ITriggerActionFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::ITriggerBase>
{
	using Abi = ABI::Windows::UI::Xaml::ITriggerBase;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ITriggerBase<T>;
};

template <> struct Traits<Windows::UI::Xaml::ITriggerBaseFactory>
{
	using Abi = ABI::Windows::UI::Xaml::ITriggerBaseFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_ITriggerBaseFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IUIElement>
{
	using Abi = ABI::Windows::UI::Xaml::IUIElement;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IUIElement<T>;
};

template <> struct Traits<Windows::UI::Xaml::IUIElementOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::IUIElementOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IUIElementOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::IUIElementStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IUIElementStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IUIElementStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IUIElementFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IUIElementFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IUIElementFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IUIElement2>
{
	using Abi = ABI::Windows::UI::Xaml::IUIElement2;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IUIElement2<T>;
};

template <> struct Traits<Windows::UI::Xaml::IUIElementStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::IUIElementStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IUIElementStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::IUnhandledExceptionEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IUnhandledExceptionEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IUnhandledExceptionEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualState>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualState;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualState<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualStateChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualStateChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualStateChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualStateGroup>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualStateGroup;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualStateGroup<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualStateManager>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualStateManager;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualStateManager<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualStateManagerOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualStateManagerOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualStateManagerOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualStateManagerProtected>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualStateManagerProtected;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualStateManagerProtected<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualStateManagerStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualStateManagerStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualStateManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualStateManagerFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualStateManagerFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualStateManagerFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualTransition>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualTransition;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualTransition<T>;
};

template <> struct Traits<Windows::UI::Xaml::IVisualTransitionFactory>
{
	using Abi = ABI::Windows::UI::Xaml::IVisualTransitionFactory;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IVisualTransitionFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::IWindow>
{
	using Abi = ABI::Windows::UI::Xaml::IWindow;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IWindow<T>;
};

template <> struct Traits<Windows::UI::Xaml::IWindowStatics>
{
	using Abi = ABI::Windows::UI::Xaml::IWindowStatics;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IWindowStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::IWindowCreatedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::IWindowCreatedEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::impl_IWindowCreatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IAutomationProperty>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IAutomationProperty;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IAutomationProperty<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IAutomationProperties>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IAutomationProperties;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IAutomationProperties<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IAutomationPropertiesStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IAutomationPropertiesStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IAutomationPropertiesStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IAutomationPropertiesStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IAutomationPropertiesStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IAutomationElementIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IAutomationElementIdentifiersStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IAutomationElementIdentifiersStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IAutomationElementIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IAutomationElementIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IAutomationElementIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IAnnotationPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IAnnotationPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IDockPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IDockPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IDockPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IDockPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IDockPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IDockPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IDragPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IDragPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IDragPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IDragPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IDragPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IDragPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IDropTargetPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IDropTargetPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IExpandCollapsePatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IExpandCollapsePatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IGridItemPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IGridItemPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IGridItemPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IGridItemPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IGridItemPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IGridItemPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IGridPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IGridPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IGridPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IGridPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IGridPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IGridPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IMultipleViewPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IMultipleViewPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IRangeValuePatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IRangeValuePatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IScrollPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IScrollPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IScrollPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IScrollPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IScrollPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IScrollPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ISelectionItemPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ISelectionItemPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ISelectionPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ISelectionPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ISelectionPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ISelectionPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ISelectionPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ISelectionPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITableItemPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITableItemPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITableItemPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITableItemPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITableItemPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITableItemPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITablePatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITablePatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITablePatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITablePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITablePatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITablePatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITogglePatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITogglePatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITogglePatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITogglePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITogglePatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITogglePatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITransformPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITransformPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITransformPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITransformPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITransformPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITransformPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IValuePatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IValuePatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IValuePatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IValuePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IValuePatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IValuePatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IWindowPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IWindowPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IWindowPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IWindowPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IWindowPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IWindowPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITransformPattern2IdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITransformPattern2IdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITransformPattern2IdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ITransformPattern2Identifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ITransformPattern2Identifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ITransformPattern2Identifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ISpreadsheetItemPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_ISpreadsheetItemPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IStylesPatternIdentifiersStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IStylesPatternIdentifiersStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IStylesPatternIdentifiersStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Automation::IStylesPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::IStylesPatternIdentifiers;
	template <typename T> using Methods = Windows::UI::Xaml::Automation::impl_IStylesPatternIdentifiers<T>;
};

template <> struct Traits<Windows::UI::Xaml::Hosting::IXamlUIPresenterHost>
{
	using Abi = ABI::Windows::UI::Xaml::Hosting::IXamlUIPresenterHost;
	template <typename T> using Methods = Windows::UI::Xaml::Hosting::impl_IXamlUIPresenterHost<T>;
};

template <> struct Traits<Windows::UI::Xaml::Hosting::IXamlUIPresenterHost2>
{
	using Abi = ABI::Windows::UI::Xaml::Hosting::IXamlUIPresenterHost2;
	template <typename T> using Methods = Windows::UI::Xaml::Hosting::impl_IXamlUIPresenterHost2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Hosting::IXamlUIPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Hosting::IXamlUIPresenter;
	template <typename T> using Methods = Windows::UI::Xaml::Hosting::impl_IXamlUIPresenter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Hosting::IXamlUIPresenterStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Hosting::IXamlUIPresenterStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Hosting::impl_IXamlUIPresenterStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Hosting::IXamlUIPresenterStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Hosting::IXamlUIPresenterStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Hosting::impl_IXamlUIPresenterStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Markup::IXamlReader>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::IXamlReader;
	template <typename T> using Methods = Windows::UI::Xaml::Markup::impl_IXamlReader<T>;
};

template <> struct Traits<Windows::UI::Xaml::Markup::IXamlReaderStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::IXamlReaderStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Markup::impl_IXamlReaderStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Markup::IComponentConnector>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::IComponentConnector;
	template <typename T> using Methods = Windows::UI::Xaml::Markup::impl_IComponentConnector<T>;
};

template <> struct Traits<Windows::UI::Xaml::Markup::IXamlType>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::IXamlType;
	template <typename T> using Methods = Windows::UI::Xaml::Markup::impl_IXamlType<T>;
};

template <> struct Traits<Windows::UI::Xaml::Markup::IXamlMember>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::IXamlMember;
	template <typename T> using Methods = Windows::UI::Xaml::Markup::impl_IXamlMember<T>;
};

template <> struct Traits<Windows::UI::Xaml::Markup::IXamlMetadataProvider>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::IXamlMetadataProvider;
	template <typename T> using Methods = Windows::UI::Xaml::Markup::impl_IXamlMetadataProvider<T>;
};

template <> struct Traits<Windows::UI::Xaml::Markup::IXamlBinaryWriter>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::IXamlBinaryWriter;
	template <typename T> using Methods = Windows::UI::Xaml::Markup::impl_IXamlBinaryWriter<T>;
};

template <> struct Traits<Windows::UI::Xaml::Markup::IXamlBinaryWriterStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::IXamlBinaryWriterStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Markup::impl_IXamlBinaryWriterStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IDownloadProgressEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IDownloadProgressEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IDownloadProgressEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IBitmapImage>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IBitmapImage;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IBitmapImage<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IBitmapImageStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IBitmapImageStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IBitmapImageStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IBitmapImageFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IBitmapImageFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IBitmapImageFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IBitmapImage2>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IBitmapImage2;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IBitmapImage2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IBitmapImageStatics2>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IBitmapImageStatics2;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IBitmapImageStatics2<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IBitmapSource>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IBitmapSource;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IBitmapSource<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IBitmapSourceStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IBitmapSourceStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IBitmapSourceStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IBitmapSourceFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IBitmapSourceFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IBitmapSourceFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IDownloadProgressEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IRenderTargetBitmap>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IRenderTargetBitmap;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IRenderTargetBitmap<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IRenderTargetBitmapStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IRenderTargetBitmapStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IRenderTargetBitmapStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::ISurfaceImageSource>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::ISurfaceImageSource;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_ISurfaceImageSource<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::ISurfaceImageSourceFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::ISurfaceImageSourceFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_ISurfaceImageSourceFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IVirtualSurfaceImageSource<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSourceFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSourceFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IVirtualSurfaceImageSourceFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IWriteableBitmap>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IWriteableBitmap;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IWriteableBitmap<T>;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::IWriteableBitmapFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::IWriteableBitmapFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Media::Imaging::impl_IWriteableBitmapFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Printing::IAddPagesEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::IAddPagesEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Printing::impl_IAddPagesEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Printing::IGetPreviewPageEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::IGetPreviewPageEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Printing::impl_IGetPreviewPageEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Printing::IPaginateEventHandler>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::IPaginateEventHandler;
	template <typename T> using Methods = Windows::UI::Xaml::Printing::impl_IPaginateEventHandler<T>;
};

template <> struct Traits<Windows::UI::Xaml::Printing::IAddPagesEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::IAddPagesEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Printing::impl_IAddPagesEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Printing::IGetPreviewPageEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::IGetPreviewPageEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Printing::impl_IGetPreviewPageEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Printing::IPaginateEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::IPaginateEventArgs;
	template <typename T> using Methods = Windows::UI::Xaml::Printing::impl_IPaginateEventArgs<T>;
};

template <> struct Traits<Windows::UI::Xaml::Printing::IPrintDocument>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::IPrintDocument;
	template <typename T> using Methods = Windows::UI::Xaml::Printing::impl_IPrintDocument<T>;
};

template <> struct Traits<Windows::UI::Xaml::Printing::IPrintDocumentStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::IPrintDocumentStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Printing::impl_IPrintDocumentStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Printing::IPrintDocumentFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::IPrintDocumentFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Printing::impl_IPrintDocumentFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Resources::ICustomXamlResourceLoader>
{
	using Abi = ABI::Windows::UI::Xaml::Resources::ICustomXamlResourceLoader;
	template <typename T> using Methods = Windows::UI::Xaml::Resources::impl_ICustomXamlResourceLoader<T>;
};

template <> struct Traits<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides>
{
	using Abi = ABI::Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides;
	template <typename T> using Methods = Windows::UI::Xaml::Resources::impl_ICustomXamlResourceLoaderOverrides<T>;
};

template <> struct Traits<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Resources::impl_ICustomXamlResourceLoaderStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Resources::impl_ICustomXamlResourceLoaderFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IEllipse>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IEllipse;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IEllipse<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::ILine>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::ILine;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_ILine<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::ILineStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::ILineStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_ILineStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IPath>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IPath;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IPath<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IPathStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IPathStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IPathStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IPathFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IPathFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IPathFactory<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IPolygon>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IPolygon;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IPolygon<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IPolygonStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IPolygonStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IPolygonStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IPolyline>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IPolyline;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IPolyline<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IPolylineStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IPolylineStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IPolylineStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IRectangle>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IRectangle;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IRectangle<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IRectangleStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IRectangleStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IRectangleStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IShape>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IShape;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IShape<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IShapeStatics>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IShapeStatics;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IShapeStatics<T>;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::IShapeFactory>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::IShapeFactory;
	template <typename T> using Methods = Windows::UI::Xaml::Shapes::impl_IShapeFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationAttribute>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationAttribute;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationAttribute<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationAttributeFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationAttributeFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationAttributeFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationNode>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationNode;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationNode<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationNodeFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationNodeFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationNodeFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationGenerator>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationGenerator;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationGenerator<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationGeneratorFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationGeneratorFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationGeneratorFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationText>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationText;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationText<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationTextFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationTextFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationTextFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationContent>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationContent;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationContent<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationContentFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationContentFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationContentFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationLink>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationLink;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationLink<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationLinkFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationLinkFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationLinkFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationPerson>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationPerson;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationPerson<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationPersonFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationPersonFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationPersonFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationCategory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationCategory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationCategory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationCategoryFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationCategoryFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationCategoryFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationItem>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationItem;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationItem<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationItemFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationItemFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationItemFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationFeed>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationFeed;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationFeed<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationFeedFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationFeedFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationFeedFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationClient>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationClient;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationClient<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationClientFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationClientFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationClientFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationErrorStatics>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationErrorStatics;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationErrorStatics<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IResourceCollection>
{
	using Abi = ABI::Windows::Web::AtomPub::IResourceCollection;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IResourceCollection<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IWorkspace>
{
	using Abi = ABI::Windows::Web::AtomPub::IWorkspace;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IWorkspace<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IServiceDocument>
{
	using Abi = ABI::Windows::Web::AtomPub::IServiceDocument;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IServiceDocument<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IAtomPubClient>
{
	using Abi = ABI::Windows::Web::AtomPub::IAtomPubClient;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IAtomPubClient<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IAtomPubClientFactory>
{
	using Abi = ABI::Windows::Web::AtomPub::IAtomPubClientFactory;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IAtomPubClientFactory<T>;
};

template <> struct Traits<Windows::Foundation::WwwFormUrlDecoder>
{
	using Abi = ABI::Windows::Foundation::WwwFormUrlDecoder;
	using Default = Windows::Foundation::IWwwFormUrlDecoderRuntimeClass;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.WwwFormUrlDecoder"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Foundation::Uri>
{
	using Abi = ABI::Windows::Foundation::Uri;
	using Default = Windows::Foundation::IUriRuntimeClass;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Uri"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::Foundation::WwwFormUrlDecoderEntry>
{
	using Abi = ABI::Windows::Foundation::WwwFormUrlDecoderEntry;
	using Default = Windows::Foundation::IWwwFormUrlDecoderEntry;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.WwwFormUrlDecoderEntry"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Foundation::PropertyValue>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.PropertyValue"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Foundation::Collections::PropertySet>
{
	using Abi = ABI::Windows::Foundation::Collections::PropertySet;
	using Default = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Collections.PropertySet"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Popups::MessageDialog>
{
	using Abi = ABI::Windows::UI::Popups::MessageDialog;
	using Default = Windows::UI::Popups::IMessageDialog;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Popups.MessageDialog"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Popups::UICommand>
{
	using Abi = ABI::Windows::UI::Popups::UICommand;
	using Default = Windows::UI::Popups::IUICommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Popups.UICommand"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Popups::UICommandSeparator>
{
	using Abi = ABI::Windows::UI::Popups::UICommandSeparator;
	using Default = Windows::UI::Popups::IUICommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Popups.UICommandSeparator"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Popups::PopupMenu>
{
	using Abi = ABI::Windows::UI::Popups::PopupMenu;
	using Default = Windows::UI::Popups::IPopupMenu;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Popups.PopupMenu"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::Appointment>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::Appointment;
	using Default = Windows::ApplicationModel::Appointments::IAppointment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.Appointment"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentOrganizer>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentOrganizer;
	using Default = Windows::ApplicationModel::Appointments::IAppointmentParticipant;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentOrganizer"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentInvitee>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentInvitee;
	using Default = Windows::ApplicationModel::Appointments::IAppointmentInvitee;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentInvitee"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentRecurrence>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentRecurrence;
	using Default = Windows::ApplicationModel::Appointments::IAppointmentRecurrence;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentRecurrence"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentManager"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::AppointmentsProviderLaunchActionVerbs>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.AppointmentsProviderLaunchActionVerbs"; }
	static constexpr unsigned NameLength = 96;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation;
	using Default = Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.AddAppointmentOperation"; }
	static constexpr unsigned NameLength = 82;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation;
	using Default = Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.ReplaceAppointmentOperation"; }
	static constexpr unsigned NameLength = 86;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation;
	using Default = Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.RemoveAppointmentOperation"; }
	static constexpr unsigned NameLength = 85;
};

template <> struct Traits<Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral;
	using Default = Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Calls.LockScreenCallEndCallDeferral"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Calls::LockScreenCallUI>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::LockScreenCallUI;
	using Default = Windows::ApplicationModel::Calls::ILockScreenCallUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Calls.LockScreenCallUI"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs;
	using Default = Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Calls.LockScreenCallEndRequestedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Storage::FileProperties::StorageItemThumbnail>
{
	using Abi = ABI::Windows::Storage::FileProperties::StorageItemThumbnail;
	using Default = Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.StorageItemThumbnail"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Storage::FileProperties::MusicProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::MusicProperties;
	using Default = Windows::Storage::FileProperties::IMusicProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.MusicProperties"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::FileProperties::VideoProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::VideoProperties;
	using Default = Windows::Storage::FileProperties::IVideoProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.VideoProperties"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::FileProperties::ImageProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::ImageProperties;
	using Default = Windows::Storage::FileProperties::IImageProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.ImageProperties"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::FileProperties::DocumentProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::DocumentProperties;
	using Default = Windows::Storage::FileProperties::IDocumentProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.DocumentProperties"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::FileProperties::StorageItemContentProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::StorageItemContentProperties;
	using Default = Windows::Storage::FileProperties::IStorageItemContentProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.StorageItemContentProperties"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Storage::FileProperties::BasicProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::BasicProperties;
	using Default = Windows::Storage::FileProperties::IBasicProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.BasicProperties"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::StorageFile>
{
	using Abi = ABI::Windows::Storage::StorageFile;
	using Default = Windows::Storage::IStorageFile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageFile"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Storage::Provider::CachedFileUpdaterUI>
{
	using Abi = ABI::Windows::Storage::Provider::CachedFileUpdaterUI;
	using Default = Windows::Storage::Provider::ICachedFileUpdaterUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.CachedFileUpdaterUI"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Storage::Provider::FileUpdateRequestedEventArgs>
{
	using Abi = ABI::Windows::Storage::Provider::FileUpdateRequestedEventArgs;
	using Default = Windows::Storage::Provider::IFileUpdateRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.FileUpdateRequestedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Storage::Provider::FileUpdateRequest>
{
	using Abi = ABI::Windows::Storage::Provider::FileUpdateRequest;
	using Default = Windows::Storage::Provider::IFileUpdateRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.FileUpdateRequest"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::Provider::FileUpdateRequestDeferral>
{
	using Abi = ABI::Windows::Storage::Provider::FileUpdateRequestDeferral;
	using Default = Windows::Storage::Provider::IFileUpdateRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.FileUpdateRequestDeferral"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Storage::Provider::CachedFileUpdater>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.CachedFileUpdater"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Data::Text::SemanticTextQuery>
{
	using Abi = ABI::Windows::Data::Text::SemanticTextQuery;
	using Default = Windows::Data::Text::ISemanticTextQuery;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.SemanticTextQuery"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Data::Text::UnicodeCharacters>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.UnicodeCharacters"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Data::Text::AlternateWordForm>
{
	using Abi = ABI::Windows::Data::Text::AlternateWordForm;
	using Default = Windows::Data::Text::IAlternateWordForm;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.AlternateWordForm"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Data::Text::WordSegment>
{
	using Abi = ABI::Windows::Data::Text::WordSegment;
	using Default = Windows::Data::Text::IWordSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.WordSegment"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Data::Text::WordsSegmenter>
{
	using Abi = ABI::Windows::Data::Text::WordsSegmenter;
	using Default = Windows::Data::Text::IWordsSegmenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.WordsSegmenter"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Data::Text::SelectableWordSegment>
{
	using Abi = ABI::Windows::Data::Text::SelectableWordSegment;
	using Default = Windows::Data::Text::ISelectableWordSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.SelectableWordSegment"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Data::Text::SelectableWordsSegmenter>
{
	using Abi = ABI::Windows::Data::Text::SelectableWordsSegmenter;
	using Default = Windows::Data::Text::ISelectableWordsSegmenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.SelectableWordsSegmenter"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::StorageFolder>
{
	using Abi = ABI::Windows::Storage::StorageFolder;
	using Default = Windows::Storage::IStorageFolder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageFolder"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Storage::Search::ContentIndexer>
{
	using Abi = ABI::Windows::Storage::Search::ContentIndexer;
	using Default = Windows::Storage::Search::IContentIndexer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.ContentIndexer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::Search::ValueAndLanguage>
{
	using Abi = ABI::Windows::Storage::Search::ValueAndLanguage;
	using Default = Windows::Storage::Search::IValueAndLanguage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.ValueAndLanguage"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Storage::Search::ContentIndexerQuery>
{
	using Abi = ABI::Windows::Storage::Search::ContentIndexerQuery;
	using Default = Windows::Storage::Search::IContentIndexerQuery;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.ContentIndexerQuery"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::Search::IndexableContent>
{
	using Abi = ABI::Windows::Storage::Search::IndexableContent;
	using Default = Windows::Storage::Search::IIndexableContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.IndexableContent"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Storage::Search::QueryOptions>
{
	using Abi = ABI::Windows::Storage::Search::QueryOptions;
	using Default = Windows::Storage::Search::IQueryOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.QueryOptions"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Storage::Search::StorageFileQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::StorageFileQueryResult;
	using Default = Windows::Storage::Search::IStorageFileQueryResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.StorageFileQueryResult"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Storage::Search::StorageFolderQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::StorageFolderQueryResult;
	using Default = Windows::Storage::Search::IStorageFolderQueryResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.StorageFolderQueryResult"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Storage::Search::StorageItemQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::StorageItemQueryResult;
	using Default = Windows::Storage::Search::IStorageItemQueryResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.StorageItemQueryResult"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Storage::Search::SortEntryVector>
{
	using Abi = ABI::Windows::Storage::Search::SortEntryVector;
	using Default = Windows::Foundation::Collections::IVector<Modern::Windows::Storage::Search::SortEntry>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.SortEntryVector"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Storage::StorageLibrary>
{
	using Abi = ABI::Windows::Storage::StorageLibrary;
	using Default = Windows::Storage::IStorageLibrary;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageLibrary"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Storage::KnownFolders>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.KnownFolders"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::Storage::DownloadsFolder>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.DownloadsFolder"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Storage::StreamedFileDataRequest>
{
	using Abi = ABI::Windows::Storage::StreamedFileDataRequest;
	using Default = Windows::Storage::Streams::IOutputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StreamedFileDataRequest"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Storage::StorageStreamTransaction>
{
	using Abi = ABI::Windows::Storage::StorageStreamTransaction;
	using Default = Windows::Storage::IStorageStreamTransaction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageStreamTransaction"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Storage::StorageProvider>
{
	using Abi = ABI::Windows::Storage::StorageProvider;
	using Default = Windows::Storage::IStorageProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageProvider"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Storage::FileIO>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileIO"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::Storage::PathIO>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.PathIO"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::Storage::CachedFileManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.CachedFileManager"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Storage::SystemAudioProperties>
{
	using Abi = ABI::Windows::Storage::SystemAudioProperties;
	using Default = Windows::Storage::ISystemAudioProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemAudioProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemGPSProperties>
{
	using Abi = ABI::Windows::Storage::SystemGPSProperties;
	using Default = Windows::Storage::ISystemGPSProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemGPSProperties"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Storage::SystemImageProperties>
{
	using Abi = ABI::Windows::Storage::SystemImageProperties;
	using Default = Windows::Storage::ISystemImageProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemImageProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemMediaProperties>
{
	using Abi = ABI::Windows::Storage::SystemMediaProperties;
	using Default = Windows::Storage::ISystemMediaProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemMediaProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemMusicProperties>
{
	using Abi = ABI::Windows::Storage::SystemMusicProperties;
	using Default = Windows::Storage::ISystemMusicProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemMusicProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemPhotoProperties>
{
	using Abi = ABI::Windows::Storage::SystemPhotoProperties;
	using Default = Windows::Storage::ISystemPhotoProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemPhotoProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemVideoProperties>
{
	using Abi = ABI::Windows::Storage::SystemVideoProperties;
	using Default = Windows::Storage::ISystemVideoProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemVideoProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemProperties>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemProperties"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Storage::ApplicationData>
{
	using Abi = ABI::Windows::Storage::ApplicationData;
	using Default = Windows::Storage::IApplicationData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.ApplicationData"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Storage::SetVersionRequest>
{
	using Abi = ABI::Windows::Storage::SetVersionRequest;
	using Default = Windows::Storage::ISetVersionRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SetVersionRequest"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Storage::ApplicationDataContainer>
{
	using Abi = ABI::Windows::Storage::ApplicationDataContainer;
	using Default = Windows::Storage::IApplicationDataContainer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.ApplicationDataContainer"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Storage::SetVersionDeferral>
{
	using Abi = ABI::Windows::Storage::SetVersionDeferral;
	using Default = Windows::Storage::ISetVersionDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SetVersionDeferral"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Storage::ApplicationDataContainerSettings>
{
	using Abi = ABI::Windows::Storage::ApplicationDataContainerSettings;
	using Default = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.ApplicationDataContainerSettings"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Storage::ApplicationDataCompositeValue>
{
	using Abi = ABI::Windows::Storage::ApplicationDataCompositeValue;
	using Default = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.ApplicationDataCompositeValue"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Storage::Streams::DataReaderLoadOperation>
{
	using Abi = ABI::Windows::Storage::Streams::DataReaderLoadOperation;
	using Default = Windows::Foundation::IAsyncOperation<unsigned>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.DataReaderLoadOperation"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Storage::Streams::DataReader>
{
	using Abi = ABI::Windows::Storage::Streams::DataReader;
	using Default = Windows::Storage::Streams::IDataReader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.DataReader"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Storage::Streams::DataWriterStoreOperation>
{
	using Abi = ABI::Windows::Storage::Streams::DataWriterStoreOperation;
	using Default = Windows::Foundation::IAsyncOperation<unsigned>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.DataWriterStoreOperation"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Storage::Streams::DataWriter>
{
	using Abi = ABI::Windows::Storage::Streams::DataWriter;
	using Default = Windows::Storage::Streams::IDataWriter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.DataWriter"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Storage::Streams::RandomAccessStream>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.RandomAccessStream"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::Streams::Buffer>
{
	using Abi = ABI::Windows::Storage::Streams::Buffer;
	using Default = Windows::Storage::Streams::IBuffer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.Buffer"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Storage::Streams::RandomAccessStreamReference>
{
	using Abi = ABI::Windows::Storage::Streams::RandomAccessStreamReference;
	using Default = Windows::Storage::Streams::IRandomAccessStreamReference;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.RandomAccessStreamReference"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Storage::Streams::FileRandomAccessStream>
{
	using Abi = ABI::Windows::Storage::Streams::FileRandomAccessStream;
	using Default = Windows::Storage::Streams::IRandomAccessStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.FileRandomAccessStream"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::Streams::FileInputStream>
{
	using Abi = ABI::Windows::Storage::Streams::FileInputStream;
	using Default = Windows::Storage::Streams::IInputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.FileInputStream"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Storage::Streams::FileOutputStream>
{
	using Abi = ABI::Windows::Storage::Streams::FileOutputStream;
	using Default = Windows::Storage::Streams::IOutputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.FileOutputStream"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Storage::Streams::RandomAccessStreamOverStream>
{
	using Abi = ABI::Windows::Storage::Streams::RandomAccessStreamOverStream;
	using Default = Windows::Storage::Streams::IRandomAccessStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.RandomAccessStreamOverStream"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Storage::Streams::InputStreamOverStream>
{
	using Abi = ABI::Windows::Storage::Streams::InputStreamOverStream;
	using Default = Windows::Storage::Streams::IInputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.InputStreamOverStream"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Storage::Streams::OutputStreamOverStream>
{
	using Abi = ABI::Windows::Storage::Streams::OutputStreamOverStream;
	using Default = Windows::Storage::Streams::IOutputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.OutputStreamOverStream"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::Streams::InMemoryRandomAccessStream>
{
	using Abi = ABI::Windows::Storage::Streams::InMemoryRandomAccessStream;
	using Default = Windows::Storage::Streams::IRandomAccessStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.InMemoryRandomAccessStream"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader;
	using Default = Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactCardDelayedDataLoader"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactManager"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactLaunchActionVerbs>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactLaunchActionVerbs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Contact>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Contact;
	using Default = Windows::ApplicationModel::Contacts::IContact;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.Contact"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactPicker>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactPicker;
	using Default = Windows::ApplicationModel::Contacts::IContactPicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactPicker"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactSignificantOther>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactSignificantOther;
	using Default = Windows::ApplicationModel::Contacts::IContactSignificantOther;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactSignificantOther"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactWebsite>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactWebsite;
	using Default = Windows::ApplicationModel::Contacts::IContactWebsite;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactWebsite"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactEmail>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactEmail;
	using Default = Windows::ApplicationModel::Contacts::IContactEmail;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactEmail"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactPhone>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactPhone;
	using Default = Windows::ApplicationModel::Contacts::IContactPhone;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactPhone"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactAddress>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactAddress;
	using Default = Windows::ApplicationModel::Contacts::IContactAddress;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactAddress"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount;
	using Default = Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactConnectedServiceAccount"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactDate>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactDate;
	using Default = Windows::ApplicationModel::Contacts::IContactDate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactDate"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactJobInfo>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactJobInfo;
	using Default = Windows::ApplicationModel::Contacts::IContactJobInfo;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactJobInfo"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs;
	using Default = Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.Provider.ContactRemovedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI;
	using Default = Windows::ApplicationModel::Contacts::Provider::IContactPickerUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::ColorHelper>
{
	using Abi = ABI::Windows::UI::ColorHelper;
	using Default = Windows::UI::IColorHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ColorHelper"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::UI::Colors>
{
	using Abi = ABI::Windows::UI::Colors;
	using Default = Windows::UI::IColors;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Colors"; }
	static constexpr unsigned NameLength = 17;
};

template <> struct Traits<Windows::Devices::Input::PointerDevice>
{
	using Abi = ABI::Windows::Devices::Input::PointerDevice;
	using Default = Windows::Devices::Input::IPointerDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.PointerDevice"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Devices::Input::MouseDevice>
{
	using Abi = ABI::Windows::Devices::Input::MouseDevice;
	using Default = Windows::Devices::Input::IMouseDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.MouseDevice"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Devices::Input::MouseEventArgs>
{
	using Abi = ABI::Windows::Devices::Input::MouseEventArgs;
	using Default = Windows::Devices::Input::IMouseEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.MouseEventArgs"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Input::MouseCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::MouseCapabilities;
	using Default = Windows::Devices::Input::IMouseCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.MouseCapabilities"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Input::KeyboardCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::KeyboardCapabilities;
	using Default = Windows::Devices::Input::IKeyboardCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.KeyboardCapabilities"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::Input::TouchCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::TouchCapabilities;
	using Default = Windows::Devices::Input::ITouchCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.TouchCapabilities"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Input::EdgeGestureEventArgs>
{
	using Abi = ABI::Windows::UI::Input::EdgeGestureEventArgs;
	using Default = Windows::UI::Input::IEdgeGestureEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.EdgeGestureEventArgs"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Input::EdgeGesture>
{
	using Abi = ABI::Windows::UI::Input::EdgeGesture;
	using Default = Windows::UI::Input::IEdgeGesture;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.EdgeGesture"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Input::MouseWheelParameters>
{
	using Abi = ABI::Windows::UI::Input::MouseWheelParameters;
	using Default = Windows::UI::Input::IMouseWheelParameters;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.MouseWheelParameters"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Input::GestureRecognizer>
{
	using Abi = ABI::Windows::UI::Input::GestureRecognizer;
	using Default = Windows::UI::Input::IGestureRecognizer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.GestureRecognizer"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Input::TappedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::TappedEventArgs;
	using Default = Windows::UI::Input::ITappedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.TappedEventArgs"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Input::RightTappedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::RightTappedEventArgs;
	using Default = Windows::UI::Input::IRightTappedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.RightTappedEventArgs"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Input::HoldingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::HoldingEventArgs;
	using Default = Windows::UI::Input::IHoldingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.HoldingEventArgs"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Input::DraggingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::DraggingEventArgs;
	using Default = Windows::UI::Input::IDraggingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.DraggingEventArgs"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Input::ManipulationStartedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ManipulationStartedEventArgs;
	using Default = Windows::UI::Input::IManipulationStartedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.ManipulationStartedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Input::ManipulationUpdatedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ManipulationUpdatedEventArgs;
	using Default = Windows::UI::Input::IManipulationUpdatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.ManipulationUpdatedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Input::ManipulationInertiaStartingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ManipulationInertiaStartingEventArgs;
	using Default = Windows::UI::Input::IManipulationInertiaStartingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.ManipulationInertiaStartingEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Input::ManipulationCompletedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ManipulationCompletedEventArgs;
	using Default = Windows::UI::Input::IManipulationCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.ManipulationCompletedEventArgs"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Input::CrossSlidingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::CrossSlidingEventArgs;
	using Default = Windows::UI::Input::ICrossSlidingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.CrossSlidingEventArgs"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Input::PointerPoint>
{
	using Abi = ABI::Windows::UI::Input::PointerPoint;
	using Default = Windows::UI::Input::IPointerPoint;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.PointerPoint"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Input::PointerPointProperties>
{
	using Abi = ABI::Windows::UI::Input::PointerPointProperties;
	using Default = Windows::UI::Input::IPointerPointProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.PointerPointProperties"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Input::PointerVisualizationSettings>
{
	using Abi = ABI::Windows::UI::Input::PointerVisualizationSettings;
	using Default = Windows::UI::Input::IPointerVisualizationSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.PointerVisualizationSettings"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Core::CoreDispatcher>
{
	using Abi = ABI::Windows::UI::Core::CoreDispatcher;
	using Default = Windows::UI::Core::ICoreDispatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreDispatcher"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Core::CoreCursor>
{
	using Abi = ABI::Windows::UI::Core::CoreCursor;
	using Default = Windows::UI::Core::ICoreCursor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreCursor"; }
	static constexpr unsigned NameLength = 26;
};

template <> struct Traits<Windows::UI::Core::CoreWindow>
{
	using Abi = ABI::Windows::UI::Core::CoreWindow;
	using Default = Windows::UI::Core::ICoreWindow;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindow"; }
	static constexpr unsigned NameLength = 26;
};

template <> struct Traits<Windows::UI::Core::WindowActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::WindowActivatedEventArgs;
	using Default = Windows::UI::Core::IWindowActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.WindowActivatedEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Core::AutomationProviderRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::AutomationProviderRequestedEventArgs;
	using Default = Windows::UI::Core::IAutomationProviderRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AutomationProviderRequestedEventArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Core::CharacterReceivedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::CharacterReceivedEventArgs;
	using Default = Windows::UI::Core::ICharacterReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CharacterReceivedEventArgs"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::CoreWindowEventArgs>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowEventArgs;
	using Default = Windows::UI::Core::ICoreWindowEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowEventArgs"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Core::InputEnabledEventArgs>
{
	using Abi = ABI::Windows::UI::Core::InputEnabledEventArgs;
	using Default = Windows::UI::Core::IInputEnabledEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.InputEnabledEventArgs"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Core::KeyEventArgs>
{
	using Abi = ABI::Windows::UI::Core::KeyEventArgs;
	using Default = Windows::UI::Core::IKeyEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.KeyEventArgs"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Core::PointerEventArgs>
{
	using Abi = ABI::Windows::UI::Core::PointerEventArgs;
	using Default = Windows::UI::Core::IPointerEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.PointerEventArgs"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Core::TouchHitTestingEventArgs>
{
	using Abi = ABI::Windows::UI::Core::TouchHitTestingEventArgs;
	using Default = Windows::UI::Core::ITouchHitTestingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.TouchHitTestingEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Core::WindowSizeChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::WindowSizeChangedEventArgs;
	using Default = Windows::UI::Core::IWindowSizeChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.WindowSizeChangedEventArgs"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::VisibilityChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::VisibilityChangedEventArgs;
	using Default = Windows::UI::Core::IVisibilityChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.VisibilityChangedEventArgs"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::IdleDispatchedHandlerArgs>
{
	using Abi = ABI::Windows::UI::Core::IdleDispatchedHandlerArgs;
	using Default = Windows::UI::Core::IIdleDispatchedHandlerArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.IdleDispatchedHandlerArgs"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Core::AcceleratorKeyEventArgs>
{
	using Abi = ABI::Windows::UI::Core::AcceleratorKeyEventArgs;
	using Default = Windows::UI::Core::IAcceleratorKeyEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AcceleratorKeyEventArgs"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Core::CoreAcceleratorKeys>
{
	using Abi = ABI::Windows::UI::Core::CoreAcceleratorKeys;
	using Default = Windows::UI::Core::ICoreAcceleratorKeys;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreAcceleratorKeys"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Core::CoreWindowResizeManager>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowResizeManager;
	using Default = Windows::UI::Core::ICoreWindowResizeManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowResizeManager"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Core::CoreIndependentInputSource>
{
	using Abi = ABI::Windows::UI::Core::CoreIndependentInputSource;
	using Default = Windows::UI::Core::ICoreInputSourceBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreIndependentInputSource"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::CoreComponentInputSource>
{
	using Abi = ABI::Windows::UI::Core::CoreComponentInputSource;
	using Default = Windows::UI::Core::ICoreInputSourceBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreComponentInputSource"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Core::CoreWindowPopupShowingEventArgs>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowPopupShowingEventArgs;
	using Default = Windows::UI::Core::ICoreWindowPopupShowingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowPopupShowingEventArgs"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Core::CoreWindowDialog>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowDialog;
	using Default = Windows::UI::Core::ICoreWindowDialog;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowDialog"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Core::CoreWindowFlyout>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowFlyout;
	using Default = Windows::UI::Core::ICoreWindowFlyout;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowFlyout"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::ViewManagement::ApplicationView>
{
	using Abi = ABI::Windows::UI::ViewManagement::ApplicationView;
	using Default = Windows::UI::ViewManagement::IApplicationView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.ApplicationView"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>
{
	using Abi = ABI::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs;
	using Default = Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::UI::ViewManagement::ApplicationViewSwitcher>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.ApplicationViewSwitcher"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::ViewManagement::ProjectionManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.ProjectionManager"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>
{
	using Abi = ABI::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs;
	using Default = Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.InputPaneVisibilityEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::ViewManagement::InputPane>
{
	using Abi = ABI::Windows::UI::ViewManagement::InputPane;
	using Default = Windows::UI::ViewManagement::IInputPane;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.InputPane"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::ViewManagement::AccessibilitySettings>
{
	using Abi = ABI::Windows::UI::ViewManagement::AccessibilitySettings;
	using Default = Windows::UI::ViewManagement::IAccessibilitySettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.AccessibilitySettings"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::ViewManagement::UISettings>
{
	using Abi = ABI::Windows::UI::ViewManagement::UISettings;
	using Default = Windows::UI::ViewManagement::IUISettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.UISettings"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::System::LauncherUIOptions>
{
	using Abi = ABI::Windows::System::LauncherUIOptions;
	using Default = Windows::System::ILauncherUIOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.LauncherUIOptions"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::System::LauncherOptions>
{
	using Abi = ABI::Windows::System::LauncherOptions;
	using Default = Windows::System::ILauncherOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.LauncherOptions"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::System::Launcher>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Launcher"; }
	static constexpr unsigned NameLength = 23;
};

template <> struct Traits<Windows::ApplicationModel::SuspendingEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::SuspendingEventArgs;
	using Default = Windows::ApplicationModel::ISuspendingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.SuspendingEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::ApplicationModel::SuspendingDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::SuspendingDeferral;
	using Default = Windows::ApplicationModel::ISuspendingDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.SuspendingDeferral"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::ApplicationModel::SuspendingOperation>
{
	using Abi = ABI::Windows::ApplicationModel::SuspendingOperation;
	using Default = Windows::ApplicationModel::ISuspendingOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.SuspendingOperation"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::ApplicationModel::PackageId>
{
	using Abi = ABI::Windows::ApplicationModel::PackageId;
	using Default = Windows::ApplicationModel::IPackageId;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.PackageId"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::ApplicationModel::Package>
{
	using Abi = ABI::Windows::ApplicationModel::Package;
	using Default = Windows::ApplicationModel::IPackage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Package"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::ApplicationModel::DesignMode>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DesignMode"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::ApplicationModel::Core::CoreApplication>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Core.CoreApplication"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::ApplicationModel::Core::CoreApplicationView>
{
	using Abi = ABI::Windows::ApplicationModel::Core::CoreApplicationView;
	using Default = Windows::ApplicationModel::Core::ICoreApplicationView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Core.CoreApplicationView"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs;
	using Default = Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::ApplicationModel::Core::UnhandledError>
{
	using Abi = ABI::Windows::ApplicationModel::Core::UnhandledError;
	using Default = Windows::ApplicationModel::Core::IUnhandledError;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Core.UnhandledError"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::StandardDataFormats>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.StandardDataFormats"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView;
	using Default = Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataPackagePropertySet>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackagePropertySet;
	using Default = Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackagePropertySet"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataProviderDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataProviderDeferral;
	using Default = Windows::ApplicationModel::DataTransfer::IDataProviderDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataProviderDeferral"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataProviderRequest>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataProviderRequest;
	using Default = Windows::ApplicationModel::DataTransfer::IDataProviderRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataProviderRequest"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs;
	using Default = Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataPackageView>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackageView;
	using Default = Windows::ApplicationModel::DataTransfer::IDataPackageView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackageView"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataPackage>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackage;
	using Default = Windows::ApplicationModel::DataTransfer::IDataPackage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackage"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::HtmlFormatHelper>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.HtmlFormatHelper"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::Clipboard>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.Clipboard"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataRequestDeferral;
	using Default = Windows::ApplicationModel::DataTransfer::IDataRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataRequestDeferral"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataRequest>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataRequest;
	using Default = Windows::ApplicationModel::DataTransfer::IDataRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataRequest"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs;
	using Default = Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs;
	using Default = Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.TargetApplicationChosenEventArgs"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataTransferManager>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataTransferManager;
	using Default = Windows::ApplicationModel::DataTransfer::IDataTransferManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataTransferManager"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink;
	using Default = Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.ShareTarget.QuickLink"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation;
	using Default = Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.ShareTarget.ShareOperation"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails;
	using Default = Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneVisibilityChangedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneQueryChangedEventArgs"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneQuerySubmittedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneResultSuggestionChosenEventArgs"; }
	static constexpr unsigned NameLength = 73;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchSuggestionCollection>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchSuggestionCollection;
	using Default = Windows::ApplicationModel::Search::ISearchSuggestionCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchSuggestionCollection"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral;
	using Default = Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneSuggestionsRequestDeferral"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest;
	using Default = Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneSuggestionsRequest"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneSuggestionsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::ApplicationModel::Search::LocalContentSuggestionSettings>
{
	using Abi = ABI::Windows::ApplicationModel::Search::LocalContentSuggestionSettings;
	using Default = Windows::ApplicationModel::Search::ILocalContentSuggestionSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.LocalContentSuggestionSettings"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPane>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPane;
	using Default = Windows::ApplicationModel::Search::ISearchPane;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPane"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchQueryLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchQueryLinguisticDetails;
	using Default = Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchQueryLinguisticDetails"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral;
	using Default = Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchSuggestionsRequestDeferral"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchSuggestionsRequest>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchSuggestionsRequest;
	using Default = Windows::ApplicationModel::Search::ISearchSuggestionsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchSuggestionsRequest"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral;
	using Default = Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequestedDeferral"; }
	static constexpr unsigned NameLength = 79;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest;
	using Default = Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequest"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs;
	using Default = Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequestedEventArgs"; }
	static constexpr unsigned NameLength = 80;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintTaskConfiguration>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfiguration;
	using Default = Windows::Devices::Printers::Extensions::IPrintTaskConfiguration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfiguration"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintNotificationEventDetails>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintNotificationEventDetails;
	using Default = Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintNotificationEventDetails"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintExtensionContext>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintExtensionContext"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::FileRemovedEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::FileRemovedEventArgs;
	using Default = Windows::Storage::Pickers::Provider::IFileRemovedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.FileRemovedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::FileOpenPickerUI>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::FileOpenPickerUI;
	using Default = Windows::Storage::Pickers::Provider::IFileOpenPickerUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.FileOpenPickerUI"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::PickerClosingEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::PickerClosingEventArgs;
	using Default = Windows::Storage::Pickers::Provider::IPickerClosingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.PickerClosingEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::PickerClosingOperation>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::PickerClosingOperation;
	using Default = Windows::Storage::Pickers::Provider::IPickerClosingOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.PickerClosingOperation"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::PickerClosingDeferral>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::PickerClosingDeferral;
	using Default = Windows::Storage::Pickers::Provider::IPickerClosingDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.PickerClosingDeferral"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::FileSavePickerUI>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::FileSavePickerUI;
	using Default = Windows::Storage::Pickers::Provider::IFileSavePickerUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.FileSavePickerUI"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs;
	using Default = Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::TargetFileRequest>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::TargetFileRequest;
	using Default = Windows::Storage::Pickers::Provider::ITargetFileRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.TargetFileRequest"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral;
	using Default = Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.TargetFileRequestDeferral"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Activation::SplashScreen>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::SplashScreen;
	using Default = Windows::ApplicationModel::Activation::ISplashScreen;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.SplashScreen"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Activation::LaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::LaunchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.LaunchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Activation::SearchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::SearchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ISearchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.SearchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ShareTargetActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ShareTargetActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::Activation::FileActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::FileActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.FileActivatedEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ProtocolActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ProtocolActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Activation::FileOpenPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::FileOpenPickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Activation::FileSavePickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::FileSavePickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Activation::CachedFileUpdaterActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::CachedFileUpdaterActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactPickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactPickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::ApplicationModel::Activation::DeviceActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::DeviceActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.DeviceActivatedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Activation::PrintTaskSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::PrintTaskSettingsActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.PrintTaskSettingsActivatedEventArgs"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::ApplicationModel::Activation::CameraSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::CameraSettingsActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.CameraSettingsActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Activation::AppointmentsProviderAddAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderAddAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderAddAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 88;
};

template <> struct Traits<Windows::ApplicationModel::Activation::AppointmentsProviderReplaceAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderReplaceAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderReplaceAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 92;
};

template <> struct Traits<Windows::ApplicationModel::Activation::AppointmentsProviderRemoveAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderRemoveAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderRemoveAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 91;
};

template <> struct Traits<Windows::ApplicationModel::Activation::AppointmentsProviderShowTimeFrameActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderShowTimeFrameActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderShowTimeFrameActivatedEventArgs"; }
	static constexpr unsigned NameLength = 87;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactMessageActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactMessageActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactMessageActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactMapActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactMapActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactMapActivatedEventArgs"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactPostActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactPostActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactPostActivatedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactVideoCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactVideoCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactVideoCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Activation::RestrictedLaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::RestrictedLaunchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.RestrictedLaunchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Activation::LockScreenCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::LockScreenCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.LockScreenCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Background::AlarmApplicationManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.AlarmApplicationManager"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundExecutionManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundExecutionManager"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskRegistration>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskRegistration;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskRegistration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskRegistration"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskDeferral;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskDeferral"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskBuilder>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskBuilder;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskBuilder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskBuilder"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundWorkCost>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundWorkCost"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::ApplicationModel::Background::SystemTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::SystemTrigger;
	using Default = Windows::ApplicationModel::Background::ISystemTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.SystemTrigger"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Background::SystemCondition>
{
	using Abi = ABI::Windows::ApplicationModel::Background::SystemCondition;
	using Default = Windows::ApplicationModel::Background::ISystemCondition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.SystemCondition"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger;
	using Default = Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.NetworkOperatorNotificationTrigger"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Background::TimeTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::TimeTrigger;
	using Default = Windows::ApplicationModel::Background::ITimeTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.TimeTrigger"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::ApplicationModel::Background::MaintenanceTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::MaintenanceTrigger;
	using Default = Windows::ApplicationModel::Background::IMaintenanceTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.MaintenanceTrigger"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::ApplicationModel::Background::DeviceUseTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::DeviceUseTrigger;
	using Default = Windows::ApplicationModel::Background::IDeviceUseTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.DeviceUseTrigger"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::ApplicationModel::Background::DeviceServicingTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::DeviceServicingTrigger;
	using Default = Windows::ApplicationModel::Background::IDeviceServicingTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.DeviceServicingTrigger"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Background::LocationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::LocationTrigger;
	using Default = Windows::ApplicationModel::Background::ILocationTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.LocationTrigger"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::ApplicationModel::Background::NetworkOperatorHotspotAuthenticationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::NetworkOperatorHotspotAuthenticationTrigger;
	using Default = Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.NetworkOperatorHotspotAuthenticationTrigger"; }
	static constexpr unsigned NameLength = 79;
};

template <> struct Traits<Windows::ApplicationModel::Background::PushNotificationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::PushNotificationTrigger;
	using Default = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.PushNotificationTrigger"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Core::ImmersiveCoreWindowFactory>
{
	using Abi = ABI::Windows::UI::Core::ImmersiveCoreWindowFactory;
	using Default = Windows::UI::Core::ICoreWindowFactory;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.ImmersiveCoreWindowFactory"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::HostedCoreWindowFactory>
{
	using Abi = ABI::Windows::UI::Core::HostedCoreWindowFactory;
	using Default = Windows::UI::Core::ICoreWindowFactory;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.HostedCoreWindowFactory"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceMap>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceMap;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceMap;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceMap"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceContext>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceContext;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceContext;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceContext"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceManager>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceManager;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceManager"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceQualifier>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceQualifier;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceQualifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceQualifier"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceCandidate>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceCandidate;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceCandidate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceCandidate"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::NamedResource>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::NamedResource;
	using Default = Windows::ApplicationModel::Resources::Core::INamedResource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.NamedResource"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceMapIterator>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceMapIterator;
	using Default = Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::NamedResource>>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceMapIterator"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceMapMapView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceMapMapView;
	using Default = Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceMapMapView"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator;
	using Default = Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::ResourceMap>>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap;
	using Default = Windows::Foundation::Collections::IObservableMap<String, String>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView;
	using Default = Windows::Foundation::Collections::IMapView<String, String>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView;
	using Default = Windows::Foundation::Collections::IVectorView<String>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::ApplicationModel::Resources::ResourceLoader>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::ResourceLoader;
	using Default = Windows::ApplicationModel::Resources::IResourceLoader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.ResourceLoader"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate;
	using Default = Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Management.IndexedResourceCandidate"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::ResourceIndexer>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::ResourceIndexer;
	using Default = Windows::ApplicationModel::Resources::Management::IResourceIndexer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Management.ResourceIndexer"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier;
	using Default = Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Management.IndexedResourceQualifier"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Store::LicenseInformation>
{
	using Abi = ABI::Windows::ApplicationModel::Store::LicenseInformation;
	using Default = Windows::ApplicationModel::Store::ILicenseInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.LicenseInformation"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Store::ListingInformation>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ListingInformation;
	using Default = Windows::ApplicationModel::Store::IListingInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.ListingInformation"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Store::PurchaseResults>
{
	using Abi = ABI::Windows::ApplicationModel::Store::PurchaseResults;
	using Default = Windows::ApplicationModel::Store::IPurchaseResults;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.PurchaseResults"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties;
	using Default = Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::ApplicationModel::Store::UnfulfilledConsumable>
{
	using Abi = ABI::Windows::ApplicationModel::Store::UnfulfilledConsumable;
	using Default = Windows::ApplicationModel::Store::IUnfulfilledConsumable;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.UnfulfilledConsumable"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::ApplicationModel::Store::ProductLicense>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ProductLicense;
	using Default = Windows::ApplicationModel::Store::IProductLicense;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.ProductLicense"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::ApplicationModel::Store::ProductListing>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ProductListing;
	using Default = Windows::ApplicationModel::Store::IProductListing;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.ProductListing"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::ApplicationModel::Store::CurrentApp>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.CurrentApp"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::ApplicationModel::Store::CurrentAppSimulator>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.CurrentAppSimulator"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Data::Html::HtmlUtilities>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Html.HtmlUtilities"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Data::Json::JsonArray>
{
	using Abi = ABI::Windows::Data::Json::JsonArray;
	using Default = Windows::Data::Json::IJsonArray;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Json.JsonArray"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Data::Json::JsonObject>
{
	using Abi = ABI::Windows::Data::Json::JsonObject;
	using Default = Windows::Data::Json::IJsonObject;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Json.JsonObject"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::Data::Json::JsonValue>
{
	using Abi = ABI::Windows::Data::Json::JsonValue;
	using Default = Windows::Data::Json::IJsonValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Json.JsonValue"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Data::Json::JsonError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Json.JsonError"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Data::Pdf::PdfPageRenderOptions>
{
	using Abi = ABI::Windows::Data::Pdf::PdfPageRenderOptions;
	using Default = Windows::Data::Pdf::IPdfPageRenderOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Pdf.PdfPageRenderOptions"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Data::Pdf::PdfPageDimensions>
{
	using Abi = ABI::Windows::Data::Pdf::PdfPageDimensions;
	using Default = Windows::Data::Pdf::IPdfPageDimensions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Pdf.PdfPageDimensions"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Data::Pdf::PdfPage>
{
	using Abi = ABI::Windows::Data::Pdf::PdfPage;
	using Default = Windows::Data::Pdf::IPdfPage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Pdf.PdfPage"; }
	static constexpr unsigned NameLength = 24;
};

template <> struct Traits<Windows::Data::Pdf::PdfDocument>
{
	using Abi = ABI::Windows::Data::Pdf::PdfDocument;
	using Default = Windows::Data::Pdf::IPdfDocument;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Pdf.PdfDocument"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlNodeList>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlNodeList;
	using Default = Windows::Data::Xml::Dom::IXmlNodeList;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlNodeList"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlNamedNodeMap>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlNamedNodeMap;
	using Default = Windows::Data::Xml::Dom::IXmlNamedNodeMap;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlNamedNodeMap"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlDocument>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlDocument;
	using Default = Windows::Data::Xml::Dom::IXmlDocument;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlDocument"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlAttribute>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlAttribute;
	using Default = Windows::Data::Xml::Dom::IXmlAttribute;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlAttribute"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlDocumentType>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlDocumentType;
	using Default = Windows::Data::Xml::Dom::IXmlDocumentType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlDocumentType"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlDomImplementation>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlDomImplementation;
	using Default = Windows::Data::Xml::Dom::IXmlDomImplementation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlDomImplementation"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlElement>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlElement;
	using Default = Windows::Data::Xml::Dom::IXmlElement;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlElement"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlDocumentFragment>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlDocumentFragment;
	using Default = Windows::Data::Xml::Dom::IXmlDocumentFragment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlDocumentFragment"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlText>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlText;
	using Default = Windows::Data::Xml::Dom::IXmlText;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlText"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlComment>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlComment;
	using Default = Windows::Data::Xml::Dom::IXmlComment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlComment"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlProcessingInstruction>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlProcessingInstruction;
	using Default = Windows::Data::Xml::Dom::IXmlProcessingInstruction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlProcessingInstruction"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlEntityReference>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlEntityReference;
	using Default = Windows::Data::Xml::Dom::IXmlEntityReference;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlEntityReference"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlCDataSection>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlCDataSection;
	using Default = Windows::Data::Xml::Dom::IXmlCDataSection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlCDataSection"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlLoadSettings>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlLoadSettings;
	using Default = Windows::Data::Xml::Dom::IXmlLoadSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlLoadSettings"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Data::Xml::Dom::DtdNotation>
{
	using Abi = ABI::Windows::Data::Xml::Dom::DtdNotation;
	using Default = Windows::Data::Xml::Dom::IDtdNotation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.DtdNotation"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Data::Xml::Dom::DtdEntity>
{
	using Abi = ABI::Windows::Data::Xml::Dom::DtdEntity;
	using Default = Windows::Data::Xml::Dom::IDtdEntity;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.DtdEntity"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Data::Xml::Xsl::XsltProcessor>
{
	using Abi = ABI::Windows::Data::Xml::Xsl::XsltProcessor;
	using Default = Windows::Data::Xml::Xsl::IXsltProcessor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Xsl.XsltProcessor"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Background::DeviceUseDetails>
{
	using Abi = ABI::Windows::Devices::Background::DeviceUseDetails;
	using Default = Windows::Devices::Background::IDeviceUseDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Background.DeviceUseDetails"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Background::DeviceServicingDetails>
{
	using Abi = ABI::Windows::Devices::Background::DeviceServicingDetails;
	using Default = Windows::Devices::Background::IDeviceServicingDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Background.DeviceServicingDetails"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Devices::Custom::KnownDeviceTypes>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Custom.KnownDeviceTypes"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Custom::IOControlCode>
{
	using Abi = ABI::Windows::Devices::Custom::IOControlCode;
	using Default = Windows::Devices::Custom::IIOControlCode;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Custom.IOControlCode"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Custom::CustomDevice>
{
	using Abi = ABI::Windows::Devices::Custom::CustomDevice;
	using Default = Windows::Devices::Custom::ICustomDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Custom.CustomDevice"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceThumbnail>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceThumbnail;
	using Default = Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceThumbnail"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Enumeration::EnclosureLocation>
{
	using Abi = ABI::Windows::Devices::Enumeration::EnclosureLocation;
	using Default = Windows::Devices::Enumeration::IEnclosureLocation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.EnclosureLocation"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceInformationUpdate>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceInformationUpdate;
	using Default = Windows::Devices::Enumeration::IDeviceInformationUpdate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformationUpdate"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceInformationCollection>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceInformationCollection;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceInformation>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformationCollection"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceWatcher>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceWatcher;
	using Default = Windows::Devices::Enumeration::IDeviceWatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceWatcher"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceInformation>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceInformation;
	using Default = Windows::Devices::Enumeration::IDeviceInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformation"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceAccessChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceAccessChangedEventArgs;
	using Default = Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceAccessChangedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceAccessInformation>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceAccessInformation;
	using Default = Windows::Devices::Enumeration::IDeviceAccessInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceAccessInformation"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::PnpObjectUpdate>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::PnpObjectUpdate;
	using Default = Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.Pnp.PnpObjectUpdate"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::PnpObjectCollection>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::PnpObjectCollection;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::Pnp::PnpObject>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.Pnp.PnpObjectCollection"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::PnpObjectWatcher;
	using Default = Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.Pnp.PnpObjectWatcher"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::PnpObject>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::PnpObject;
	using Default = Windows::Devices::Enumeration::Pnp::IPnpObject;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.Pnp.PnpObject"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Geolocation::Geopoint>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geopoint;
	using Default = Windows::Devices::Geolocation::IGeopoint;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geopoint"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Geolocation::GeocoordinateSatelliteData>
{
	using Abi = ABI::Windows::Devices::Geolocation::GeocoordinateSatelliteData;
	using Default = Windows::Devices::Geolocation::IGeocoordinateSatelliteData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.GeocoordinateSatelliteData"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::Geolocation::Geocoordinate>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geocoordinate;
	using Default = Windows::Devices::Geolocation::IGeocoordinate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geocoordinate"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Geolocation::CivicAddress>
{
	using Abi = ABI::Windows::Devices::Geolocation::CivicAddress;
	using Default = Windows::Devices::Geolocation::ICivicAddress;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.CivicAddress"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Devices::Geolocation::Geoposition>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geoposition;
	using Default = Windows::Devices::Geolocation::IGeoposition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geoposition"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Geolocation::PositionChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Geolocation::PositionChangedEventArgs;
	using Default = Windows::Devices::Geolocation::IPositionChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.PositionChangedEventArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::Geolocation::StatusChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Geolocation::StatusChangedEventArgs;
	using Default = Windows::Devices::Geolocation::IStatusChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.StatusChangedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Devices::Geolocation::Geolocator>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geolocator;
	using Default = Windows::Devices::Geolocation::IGeolocator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geolocator"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Geolocation::Geocircle>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geocircle;
	using Default = Windows::Devices::Geolocation::IGeocircle;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geocircle"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::Geofence>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::Geofence;
	using Default = Windows::Devices::Geolocation::Geofencing::IGeofence;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geofencing.Geofence"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor;
	using Default = Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport;
	using Default = Windows::Devices::Geolocation::Geofencing::IGeofenceStateChangeReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geofencing.GeofenceStateChangeReport"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidDevice>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidDevice;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidDevice"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidInputReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidInputReport;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidInputReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidInputReport"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidFeatureReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidFeatureReport;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidFeatureReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidFeatureReport"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidOutputReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidOutputReport;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidOutputReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidOutputReport"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidBooleanControlDescription"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidNumericControlDescription"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidInputReportReceivedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidCollection>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidCollection;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidCollection"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidBooleanControl>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidBooleanControl;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidBooleanControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidBooleanControl"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidNumericControl>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidNumericControl;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidNumericControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidNumericControl"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::PointOfService::UnifiedPosErrorData>
{
	using Abi = ABI::Windows::Devices::PointOfService::UnifiedPosErrorData;
	using Default = Windows::Devices::PointOfService::IUnifiedPosErrorData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.UnifiedPosErrorData"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerStatusUpdatedEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeSymbologies>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeSymbologies"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerReport>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerReport;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerReport"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerDataReceivedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerImagePreviewReceivedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerCapabilities>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerCapabilities;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerCapabilities"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScanner>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScanner;
	using Default = Windows::Devices::PointOfService::IBarcodeScanner;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScanner"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::PointOfService::ClaimedBarcodeScanner>
{
	using Abi = ABI::Windows::Devices::PointOfService::ClaimedBarcodeScanner;
	using Default = Windows::Devices::PointOfService::IClaimedBarcodeScanner;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.ClaimedBarcodeScanner"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderEncryptionAlgorithms>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderEncryptionAlgorithms"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderCardTypes>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderCardTypes"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderTrackData>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderTrackData;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderTrackData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderTrackData"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderReport>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderReport;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderReport"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs"; }
	static constexpr unsigned NameLength = 80;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs"; }
	static constexpr unsigned NameLength = 81;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs"; }
	static constexpr unsigned NameLength = 90;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs"; }
	static constexpr unsigned NameLength = 73;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderStatusUpdatedEventArgs"; }
	static constexpr unsigned NameLength = 73;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderCapabilities>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderCapabilities;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderCapabilities"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Devices::PointOfService::ClaimedMagneticStripeReader>
{
	using Abi = ABI::Windows::Devices::PointOfService::ClaimedMagneticStripeReader;
	using Default = Windows::Devices::PointOfService::IClaimedMagneticStripeReader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.ClaimedMagneticStripeReader"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReader>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReader;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReader"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::Portable::StorageDevice>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Portable.StorageDevice"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Portable::ServiceDevice>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Portable.ServiceDevice"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Sensors::Accelerometer>
{
	using Abi = ABI::Windows::Devices::Sensors::Accelerometer;
	using Default = Windows::Devices::Sensors::IAccelerometer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.Accelerometer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Devices::Sensors::AccelerometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::AccelerometerReading;
	using Default = Windows::Devices::Sensors::IAccelerometerReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.AccelerometerReading"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Devices::Sensors::AccelerometerShakenEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::AccelerometerShakenEventArgs;
	using Default = Windows::Devices::Sensors::IAccelerometerShakenEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.AccelerometerShakenEventArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::Sensors::Inclinometer>
{
	using Abi = ABI::Windows::Devices::Sensors::Inclinometer;
	using Default = Windows::Devices::Sensors::IInclinometer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.Inclinometer"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Sensors::InclinometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::InclinometerReading;
	using Default = Windows::Devices::Sensors::IInclinometerReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.InclinometerReading"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Sensors::InclinometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::InclinometerReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.InclinometerReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Devices::Sensors::Gyrometer>
{
	using Abi = ABI::Windows::Devices::Sensors::Gyrometer;
	using Default = Windows::Devices::Sensors::IGyrometer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.Gyrometer"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Devices::Sensors::GyrometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::GyrometerReading;
	using Default = Windows::Devices::Sensors::IGyrometerReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.GyrometerReading"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Devices::Sensors::GyrometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::GyrometerReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.GyrometerReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Devices::Sensors::Compass>
{
	using Abi = ABI::Windows::Devices::Sensors::Compass;
	using Default = Windows::Devices::Sensors::ICompass;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.Compass"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Devices::Sensors::CompassReading>
{
	using Abi = ABI::Windows::Devices::Sensors::CompassReading;
	using Default = Windows::Devices::Sensors::ICompassReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.CompassReading"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Sensors::CompassReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::CompassReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::ICompassReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.CompassReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::Sensors::LightSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::LightSensor;
	using Default = Windows::Devices::Sensors::ILightSensor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.LightSensor"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Devices::Sensors::LightSensorReading>
{
	using Abi = ABI::Windows::Devices::Sensors::LightSensorReading;
	using Default = Windows::Devices::Sensors::ILightSensorReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.LightSensorReading"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::Sensors::LightSensorReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::LightSensorReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.LightSensorReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Devices::Sensors::SensorRotationMatrix>
{
	using Abi = ABI::Windows::Devices::Sensors::SensorRotationMatrix;
	using Default = Windows::Devices::Sensors::ISensorRotationMatrix;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.SensorRotationMatrix"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Devices::Sensors::SensorQuaternion>
{
	using Abi = ABI::Windows::Devices::Sensors::SensorQuaternion;
	using Default = Windows::Devices::Sensors::ISensorQuaternion;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.SensorQuaternion"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Devices::Sensors::OrientationSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::OrientationSensor;
	using Default = Windows::Devices::Sensors::IOrientationSensor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.OrientationSensor"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Sensors::OrientationSensorReading>
{
	using Abi = ABI::Windows::Devices::Sensors::OrientationSensorReading;
	using Default = Windows::Devices::Sensors::IOrientationSensorReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.OrientationSensorReading"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Devices::Sensors::SimpleOrientationSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::SimpleOrientationSensor;
	using Default = Windows::Devices::Sensors::ISimpleOrientationSensor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.SimpleOrientationSensor"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs;
	using Default = Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardReader>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardReader;
	using Default = Windows::Devices::SmartCards::ISmartCardReader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardReader"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCard>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCard;
	using Default = Windows::Devices::SmartCards::ISmartCard;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCard"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::SmartCards::CardAddedEventArgs>
{
	using Abi = ABI::Windows::Devices::SmartCards::CardAddedEventArgs;
	using Default = Windows::Devices::SmartCards::ICardAddedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.CardAddedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::SmartCards::CardRemovedEventArgs>
{
	using Abi = ABI::Windows::Devices::SmartCards::CardRemovedEventArgs;
	using Default = Windows::Devices::SmartCards::ICardRemovedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.CardRemovedEventArgs"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardProvisioning>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardProvisioning;
	using Default = Windows::Devices::SmartCards::ISmartCardProvisioning;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardProvisioning"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardPinPolicy>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardPinPolicy;
	using Default = Windows::Devices::SmartCards::ISmartCardPinPolicy;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardPinPolicy"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardChallengeContext>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardChallengeContext;
	using Default = Windows::Devices::SmartCards::ISmartCardChallengeContext;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardChallengeContext"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardPinResetRequest>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardPinResetRequest;
	using Default = Windows::Devices::SmartCards::ISmartCardPinResetRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardPinResetRequest"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardPinResetDeferral>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardPinResetDeferral;
	using Default = Windows::Devices::SmartCards::ISmartCardPinResetDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardPinResetDeferral"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::Sms::SmsBinaryMessage>
{
	using Abi = ABI::Windows::Devices::Sms::SmsBinaryMessage;
	using Default = Windows::Devices::Sms::ISmsBinaryMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsBinaryMessage"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Sms::SmsTextMessage>
{
	using Abi = ABI::Windows::Devices::Sms::SmsTextMessage;
	using Default = Windows::Devices::Sms::ISmsTextMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsTextMessage"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Sms::DeleteSmsMessageOperation>
{
	using Abi = ABI::Windows::Devices::Sms::DeleteSmsMessageOperation;
	using Default = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.DeleteSmsMessageOperation"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::Sms::DeleteSmsMessagesOperation>
{
	using Abi = ABI::Windows::Devices::Sms::DeleteSmsMessagesOperation;
	using Default = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.DeleteSmsMessagesOperation"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Devices::Sms::GetSmsMessageOperation>
{
	using Abi = ABI::Windows::Devices::Sms::GetSmsMessageOperation;
	using Default = Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.GetSmsMessageOperation"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::Sms::GetSmsMessagesOperation>
{
	using Abi = ABI::Windows::Devices::Sms::GetSmsMessagesOperation;
	using Default = Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.GetSmsMessagesOperation"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Sms::SmsDeviceMessageStore>
{
	using Abi = ABI::Windows::Devices::Sms::SmsDeviceMessageStore;
	using Default = Windows::Devices::Sms::ISmsDeviceMessageStore;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsDeviceMessageStore"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Sms::SendSmsMessageOperation>
{
	using Abi = ABI::Windows::Devices::Sms::SendSmsMessageOperation;
	using Default = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SendSmsMessageOperation"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Sms::SmsMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sms::SmsMessageReceivedEventArgs;
	using Default = Windows::Devices::Sms::ISmsMessageReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsMessageReceivedEventArgs"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Sms::SmsDevice>
{
	using Abi = ABI::Windows::Devices::Sms::SmsDevice;
	using Default = Windows::Devices::Sms::ISmsDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsDevice"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Devices::Sms::GetSmsDeviceOperation>
{
	using Abi = ABI::Windows::Devices::Sms::GetSmsDeviceOperation;
	using Default = Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.GetSmsDeviceOperation"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Sms::SmsReceivedEventDetails>
{
	using Abi = ABI::Windows::Devices::Sms::SmsReceivedEventDetails;
	using Default = Windows::Devices::Sms::ISmsReceivedEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsReceivedEventDetails"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Usb::UsbControlRequestType>
{
	using Abi = ABI::Windows::Devices::Usb::UsbControlRequestType;
	using Default = Windows::Devices::Usb::IUsbControlRequestType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbControlRequestType"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Usb::UsbSetupPacket>
{
	using Abi = ABI::Windows::Devices::Usb::UsbSetupPacket;
	using Default = Windows::Devices::Usb::IUsbSetupPacket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbSetupPacket"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Usb::UsbDeviceClass>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDeviceClass;
	using Default = Windows::Devices::Usb::IUsbDeviceClass;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDeviceClass"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Usb::UsbDeviceClasses>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDeviceClasses;
	using Default = Windows::Devices::Usb::IUsbDeviceClasses;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDeviceClasses"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Usb::UsbDevice>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDevice;
	using Default = Windows::Devices::Usb::IUsbDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDevice"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterface>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterface;
	using Default = Windows::Devices::Usb::IUsbInterface;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterface"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Devices::Usb::UsbDeviceDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDeviceDescriptor;
	using Default = Windows::Devices::Usb::IUsbDeviceDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDeviceDescriptor"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Usb::UsbConfiguration>
{
	using Abi = ABI::Windows::Devices::Usb::UsbConfiguration;
	using Default = Windows::Devices::Usb::IUsbConfiguration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbConfiguration"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Usb::UsbDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDescriptor;
	using Default = Windows::Devices::Usb::IUsbDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDescriptor"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Devices::Usb::UsbConfigurationDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbConfigurationDescriptor;
	using Default = Windows::Devices::Usb::IUsbConfigurationDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbConfigurationDescriptor"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterfaceDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterfaceDescriptor;
	using Default = Windows::Devices::Usb::IUsbInterfaceDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterfaceDescriptor"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::Usb::UsbBulkInEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbBulkInEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbBulkInEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbBulkInEndpointDescriptor"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptInEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptInEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbInterruptInEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptInEndpointDescriptor"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::Usb::UsbBulkOutEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbBulkOutEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbBulkOutEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbBulkOutEndpointDescriptor"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbInterruptOutEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptOutEndpointDescriptor"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Devices::Usb::UsbEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbEndpointDescriptor"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptInEventArgs>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptInEventArgs;
	using Default = Windows::Devices::Usb::IUsbInterruptInEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptInEventArgs"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptInPipe>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptInPipe;
	using Default = Windows::Devices::Usb::IUsbInterruptInPipe;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptInPipe"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Usb::UsbBulkInPipe>
{
	using Abi = ABI::Windows::Devices::Usb::UsbBulkInPipe;
	using Default = Windows::Devices::Usb::IUsbBulkInPipe;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbBulkInPipe"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Devices::Usb::UsbBulkOutPipe>
{
	using Abi = ABI::Windows::Devices::Usb::UsbBulkOutPipe;
	using Default = Windows::Devices::Usb::IUsbBulkOutPipe;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbBulkOutPipe"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptOutPipe>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptOutPipe;
	using Default = Windows::Devices::Usb::IUsbInterruptOutPipe;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptOutPipe"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterfaceSetting>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterfaceSetting;
	using Default = Windows::Devices::Usb::IUsbInterfaceSetting;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterfaceSetting"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Networking::EndpointPair>
{
	using Abi = ABI::Windows::Networking::EndpointPair;
	using Default = Windows::Networking::IEndpointPair;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.EndpointPair"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Networking::HostName>
{
	using Abi = ABI::Windows::Networking::HostName;
	using Default = Windows::Networking::IHostName;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.HostName"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Networking::Connectivity::IPInformation>
{
	using Abi = ABI::Windows::Networking::Connectivity::IPInformation;
	using Default = Windows::Networking::Connectivity::IIPInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.IPInformation"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Connectivity::DataPlanUsage>
{
	using Abi = ABI::Windows::Networking::Connectivity::DataPlanUsage;
	using Default = Windows::Networking::Connectivity::IDataPlanUsage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.DataPlanUsage"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectionCost>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectionCost;
	using Default = Windows::Networking::Connectivity::IConnectionCost;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectionCost"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Networking::Connectivity::DataPlanStatus>
{
	using Abi = ABI::Windows::Networking::Connectivity::DataPlanStatus;
	using Default = Windows::Networking::Connectivity::IDataPlanStatus;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.DataPlanStatus"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkAdapter>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkAdapter;
	using Default = Windows::Networking::Connectivity::INetworkAdapter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkAdapter"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkSecuritySettings>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkSecuritySettings;
	using Default = Windows::Networking::Connectivity::INetworkSecuritySettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkSecuritySettings"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Networking::Connectivity::WwanConnectionProfileDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::WwanConnectionProfileDetails;
	using Default = Windows::Networking::Connectivity::IWwanConnectionProfileDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.WwanConnectionProfileDetails"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Networking::Connectivity::WlanConnectionProfileDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::WlanConnectionProfileDetails;
	using Default = Windows::Networking::Connectivity::IWlanConnectionProfileDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.WlanConnectionProfileDetails"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkUsage>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkUsage;
	using Default = Windows::Networking::Connectivity::INetworkUsage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkUsage"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectivityInterval>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectivityInterval;
	using Default = Windows::Networking::Connectivity::IConnectivityInterval;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectivityInterval"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Networking::Connectivity::LanIdentifierData>
{
	using Abi = ABI::Windows::Networking::Connectivity::LanIdentifierData;
	using Default = Windows::Networking::Connectivity::ILanIdentifierData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.LanIdentifierData"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectionProfile>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectionProfile;
	using Default = Windows::Networking::Connectivity::IConnectionProfile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectionProfile"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Networking::Connectivity::LanIdentifier>
{
	using Abi = ABI::Windows::Networking::Connectivity::LanIdentifier;
	using Default = Windows::Networking::Connectivity::ILanIdentifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.LanIdentifier"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Connectivity::ProxyConfiguration>
{
	using Abi = ABI::Windows::Networking::Connectivity::ProxyConfiguration;
	using Default = Windows::Networking::Connectivity::IProxyConfiguration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ProxyConfiguration"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectionProfileFilter>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectionProfileFilter;
	using Default = Windows::Networking::Connectivity::IConnectionProfileFilter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectionProfileFilter"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkItem>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkItem;
	using Default = Windows::Networking::Connectivity::INetworkItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkItem"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Networking::Connectivity::RoutePolicy>
{
	using Abi = ABI::Windows::Networking::Connectivity::RoutePolicy;
	using Default = Windows::Networking::Connectivity::IRoutePolicy;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.RoutePolicy"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Networking::Connectivity::CellularApnContext>
{
	using Abi = ABI::Windows::Networking::Connectivity::CellularApnContext;
	using Default = Windows::Networking::Connectivity::ICellularApnContext;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.CellularApnContext"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectionSession>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectionSession;
	using Default = Windows::Networking::Connectivity::IConnectionSession;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectionSession"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkInformation>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkInformation"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectivityManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectivityManager"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkStateChangeEventDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkStateChangeEventDetails;
	using Default = Windows::Networking::Connectivity::INetworkStateChangeEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkStateChangeEventDetails"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Devices::WiFiDirect::WiFiDirectDevice>
{
	using Abi = ABI::Windows::Devices::WiFiDirect::WiFiDirectDevice;
	using Default = Windows::Devices::WiFiDirect::IWiFiDirectDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.WiFiDirect.WiFiDirectDevice"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs;
	using Default = Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Foundation::Diagnostics::AsyncCausalityTracer>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.AsyncCausalityTracer"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Foundation::Diagnostics::RuntimeBrokerErrorSettings>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::RuntimeBrokerErrorSettings;
	using Default = Windows::Foundation::Diagnostics::IErrorReportingSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Foundation::Diagnostics::LoggingChannel>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::LoggingChannel;
	using Default = Windows::Foundation::Diagnostics::ILoggingChannel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingChannel"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Foundation::Diagnostics::LoggingActivity>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::LoggingActivity;
	using Default = Windows::Foundation::Diagnostics::ILoggingActivity;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingActivity"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Foundation::Diagnostics::LoggingSession>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::LoggingSession;
	using Default = Windows::Foundation::Diagnostics::ILoggingSession;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingSession"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs;
	using Default = Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Foundation::Diagnostics::FileLoggingSession>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::FileLoggingSession;
	using Default = Windows::Foundation::Diagnostics::IFileLoggingSession;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.FileLoggingSession"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Globalization::Collation::CharacterGrouping>
{
	using Abi = ABI::Windows::Globalization::Collation::CharacterGrouping;
	using Default = Windows::Globalization::Collation::ICharacterGrouping;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Collation.CharacterGrouping"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Globalization::Collation::CharacterGroupings>
{
	using Abi = ABI::Windows::Globalization::Collation::CharacterGroupings;
	using Default = Windows::Globalization::Collation::ICharacterGroupings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Collation.CharacterGroupings"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::DateTimeFormatter>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::DateTimeFormatter;
	using Default = Windows::Globalization::DateTimeFormatting::IDateTimeFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.DateTimeFormatting.DateTimeFormatter"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Text::TextConstants>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Text.TextConstants"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Text::FontWeights>
{
	using Abi = ABI::Windows::UI::Text::FontWeights;
	using Default = Windows::UI::Text::IFontWeights;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Text.FontWeights"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Globalization::Fonts::LanguageFont>
{
	using Abi = ABI::Windows::Globalization::Fonts::LanguageFont;
	using Default = Windows::Globalization::Fonts::ILanguageFont;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Fonts.LanguageFont"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Globalization::Fonts::LanguageFontGroup>
{
	using Abi = ABI::Windows::Globalization::Fonts::LanguageFontGroup;
	using Default = Windows::Globalization::Fonts::ILanguageFontGroup;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Fonts.LanguageFontGroup"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Globalization::JapanesePhoneme>
{
	using Abi = ABI::Windows::Globalization::JapanesePhoneme;
	using Default = Windows::Globalization::IJapanesePhoneme;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.JapanesePhoneme"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Globalization::JapanesePhoneticAnalyzer>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.JapanesePhoneticAnalyzer"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Globalization::CalendarIdentifiers>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.CalendarIdentifiers"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Globalization::ClockIdentifiers>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.ClockIdentifiers"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Globalization::NumeralSystemIdentifiers>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumeralSystemIdentifiers"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Globalization::CurrencyIdentifiers>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.CurrencyIdentifiers"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Globalization::GeographicRegion>
{
	using Abi = ABI::Windows::Globalization::GeographicRegion;
	using Default = Windows::Globalization::IGeographicRegion;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.GeographicRegion"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Globalization::Language>
{
	using Abi = ABI::Windows::Globalization::Language;
	using Default = Windows::Globalization::ILanguage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Language"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Globalization::Calendar>
{
	using Abi = ABI::Windows::Globalization::Calendar;
	using Default = Windows::Globalization::ICalendar;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Calendar"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Globalization::ApplicationLanguages>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.ApplicationLanguages"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder;
	using Default = Windows::Globalization::NumberFormatting::INumberRounder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.SignificantDigitsNumberRounder"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IncrementNumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IncrementNumberRounder;
	using Default = Windows::Globalization::NumberFormatting::INumberRounder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.IncrementNumberRounder"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::DecimalFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::DecimalFormatter;
	using Default = Windows::Globalization::NumberFormatting::INumberFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.DecimalFormatter"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::PercentFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::PercentFormatter;
	using Default = Windows::Globalization::NumberFormatting::INumberFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.PercentFormatter"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::PermilleFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::PermilleFormatter;
	using Default = Windows::Globalization::NumberFormatting::INumberFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.PermilleFormatter"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::CurrencyFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::CurrencyFormatter;
	using Default = Windows::Globalization::NumberFormatting::ICurrencyFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.CurrencyFormatter"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::NumeralSystemTranslator>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::NumeralSystemTranslator;
	using Default = Windows::Globalization::NumberFormatting::INumeralSystemTranslator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.NumeralSystemTranslator"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Graphics::Display::DisplayInformation>
{
	using Abi = ABI::Windows::Graphics::Display::DisplayInformation;
	using Default = Windows::Graphics::Display::IDisplayInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Display.DisplayInformation"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapTransform>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapTransform;
	using Default = Windows::Graphics::Imaging::IBitmapTransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapTransform"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapTypedValue>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapTypedValue;
	using Default = Windows::Graphics::Imaging::IBitmapTypedValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapTypedValue"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapPropertySet>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapPropertySet;
	using Default = Windows::Foundation::Collections::IMap<String, Windows::Graphics::Imaging::BitmapTypedValue>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapPropertySet"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapPropertiesView>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapPropertiesView;
	using Default = Windows::Graphics::Imaging::IBitmapPropertiesView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapPropertiesView"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapProperties>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapProperties;
	using Default = Windows::Graphics::Imaging::IBitmapProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapProperties"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Graphics::Imaging::PixelDataProvider>
{
	using Abi = ABI::Windows::Graphics::Imaging::PixelDataProvider;
	using Default = Windows::Graphics::Imaging::IPixelDataProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.PixelDataProvider"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Graphics::Imaging::ImageStream>
{
	using Abi = ABI::Windows::Graphics::Imaging::ImageStream;
	using Default = Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.ImageStream"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapFrame>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapFrame;
	using Default = Windows::Graphics::Imaging::IBitmapFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapFrame"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapCodecInformation>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapCodecInformation;
	using Default = Windows::Graphics::Imaging::IBitmapCodecInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapCodecInformation"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapDecoder>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapDecoder;
	using Default = Windows::Graphics::Imaging::IBitmapDecoder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapDecoder"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapEncoder>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapEncoder;
	using Default = Windows::Graphics::Imaging::IBitmapEncoder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapEncoder"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskOptions>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskOptions;
	using Default = Windows::Graphics::Printing::IPrintTaskOptionsCore;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskOptions"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Graphics::Printing::StandardPrintTaskOptions>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.StandardPrintTaskOptions"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskProgressingEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskProgressingEventArgs;
	using Default = Windows::Graphics::Printing::IPrintTaskProgressingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskProgressingEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskCompletedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskCompletedEventArgs;
	using Default = Windows::Graphics::Printing::IPrintTaskCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskCompletedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTask>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTask;
	using Default = Windows::Graphics::Printing::IPrintTask;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTask"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral;
	using Default = Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskSourceRequestedDeferral"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs;
	using Default = Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskSourceRequestedArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskRequestedDeferral>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskRequestedDeferral;
	using Default = Windows::Graphics::Printing::IPrintTaskRequestedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskRequestedDeferral"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskRequest>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskRequest;
	using Default = Windows::Graphics::Printing::IPrintTaskRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskRequest"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskRequestedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskRequestedEventArgs;
	using Default = Windows::Graphics::Printing::IPrintTaskRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskRequestedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Graphics::Printing::PrintManager>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintManager;
	using Default = Windows::Graphics::Printing::IPrintManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintManager"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCopiesOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCopiesOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCopiesOptionDetails"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintMediaSizeOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintMediaSizeOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintMediaSizeOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintMediaTypeOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintMediaTypeOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintMediaTypeOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintOrientationOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintOrientationOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintOrientationOptionDetails"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintQualityOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintQualityOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintQualityOptionDetails"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintColorModeOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintColorModeOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintColorModeOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintDuplexOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintDuplexOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintDuplexOptionDetails"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCollationOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCollationOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCollationOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintStapleOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintStapleOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintStapleOptionDetails"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintHolePunchOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintHolePunchOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintHolePunchOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintBindingOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintBindingOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintBindingOptionDetails"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCustomTextOptionDetails"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCustomItemDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCustomItemDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintCustomItemDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCustomItemDetails"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCustomItemListOptionDetails"; }
	static constexpr unsigned NameLength = 72;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintTaskOptionChangedEventArgs"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Management::Core::ApplicationDataManager>
{
	using Abi = ABI::Windows::Management::Core::ApplicationDataManager;
	using Default = Windows::Management::Core::IApplicationDataManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Core.ApplicationDataManager"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Management::Deployment::DeploymentResult>
{
	using Abi = ABI::Windows::Management::Deployment::DeploymentResult;
	using Default = Windows::Management::Deployment::IDeploymentResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Deployment.DeploymentResult"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Management::Deployment::PackageUserInformation>
{
	using Abi = ABI::Windows::Management::Deployment::PackageUserInformation;
	using Default = Windows::Management::Deployment::IPackageUserInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Deployment.PackageUserInformation"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Management::Deployment::PackageManager>
{
	using Abi = ABI::Windows::Management::Deployment::PackageManager;
	using Default = Windows::Management::Deployment::IPackageManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Deployment.PackageManager"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Management::Workplace::WorkplaceSettings>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Workplace.WorkplaceSettings"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::MediaMarkerTypes>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaMarkerTypes"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Media::MusicDisplayProperties>
{
	using Abi = ABI::Windows::Media::MusicDisplayProperties;
	using Default = Windows::Media::IMusicDisplayProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MusicDisplayProperties"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::VideoDisplayProperties>
{
	using Abi = ABI::Windows::Media::VideoDisplayProperties;
	using Default = Windows::Media::IVideoDisplayProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.VideoDisplayProperties"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::ImageDisplayProperties>
{
	using Abi = ABI::Windows::Media::ImageDisplayProperties;
	using Default = Windows::Media::IImageDisplayProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.ImageDisplayProperties"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::SystemMediaTransportControlsDisplayUpdater>
{
	using Abi = ABI::Windows::Media::SystemMediaTransportControlsDisplayUpdater;
	using Default = Windows::Media::ISystemMediaTransportControlsDisplayUpdater;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SystemMediaTransportControlsDisplayUpdater"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>
{
	using Abi = ABI::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs;
	using Default = Windows::Media::ISystemMediaTransportControlsButtonPressedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SystemMediaTransportControlsButtonPressedEventArgs"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>
{
	using Abi = ABI::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs;
	using Default = Windows::Media::ISystemMediaTransportControlsPropertyChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SystemMediaTransportControlsPropertyChangedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Media::SystemMediaTransportControls>
{
	using Abi = ABI::Windows::Media::SystemMediaTransportControls;
	using Default = Windows::Media::ISystemMediaTransportControls;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SystemMediaTransportControls"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Media::MediaExtensionManager>
{
	using Abi = ABI::Windows::Media::MediaExtensionManager;
	using Default = Windows::Media::IMediaExtensionManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaExtensionManager"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::VideoEffects>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.VideoEffects"; }
	static constexpr unsigned NameLength = 26;
};

template <> struct Traits<Windows::Media::MediaProperties::MediaRatio>
{
	using Abi = ABI::Windows::Media::MediaProperties::MediaRatio;
	using Default = Windows::Media::MediaProperties::IMediaRatio;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.MediaRatio"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::MediaProperties::MediaPropertySet>
{
	using Abi = ABI::Windows::Media::MediaProperties::MediaPropertySet;
	using Default = Windows::Foundation::Collections::IMap<GUID, IInspectable>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.MediaPropertySet"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::MediaProperties::AudioEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::AudioEncodingProperties;
	using Default = Windows::Media::MediaProperties::IAudioEncodingProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.AudioEncodingProperties"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::MediaProperties::MediaEncodingSubtypes>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.MediaEncodingSubtypes"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::MediaProperties::H264ProfileIds>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.H264ProfileIds"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Media::MediaProperties::Mpeg2ProfileIds>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.Mpeg2ProfileIds"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Media::MediaProperties::VideoEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::VideoEncodingProperties;
	using Default = Windows::Media::MediaProperties::IVideoEncodingProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.VideoEncodingProperties"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::MediaProperties::ImageEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::ImageEncodingProperties;
	using Default = Windows::Media::MediaProperties::IImageEncodingProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.ImageEncodingProperties"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::MediaProperties::ContainerEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::ContainerEncodingProperties;
	using Default = Windows::Media::MediaProperties::IContainerEncodingProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.ContainerEncodingProperties"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::MediaProperties::MediaEncodingProfile>
{
	using Abi = ABI::Windows::Media::MediaProperties::MediaEncodingProfile;
	using Default = Windows::Media::MediaProperties::IMediaEncodingProfile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.MediaEncodingProfile"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Media::Devices::DialRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::DialRequestedEventArgs;
	using Default = Windows::Media::Devices::IDialRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.DialRequestedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Media::Devices::RedialRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::RedialRequestedEventArgs;
	using Default = Windows::Media::Devices::IRedialRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.RedialRequestedEventArgs"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::Devices::KeypadPressedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::KeypadPressedEventArgs;
	using Default = Windows::Media::Devices::IKeypadPressedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.KeypadPressedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Media::Devices::CallControl>
{
	using Abi = ABI::Windows::Media::Devices::CallControl;
	using Default = Windows::Media::Devices::ICallControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.CallControl"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs;
	using Default = Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.DefaultAudioCaptureDeviceChangedEventArgs"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs;
	using Default = Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.DefaultAudioRenderDeviceChangedEventArgs"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Media::Devices::MediaDevice>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.MediaDevice"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Media::Devices::AudioDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::AudioDeviceController;
	using Default = Windows::Media::Devices::IAudioDeviceController;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.AudioDeviceController"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Media::Devices::VideoDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::VideoDeviceController;
	using Default = Windows::Media::Devices::IVideoDeviceController;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.VideoDeviceController"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Media::Devices::SceneModeControl>
{
	using Abi = ABI::Windows::Media::Devices::SceneModeControl;
	using Default = Windows::Media::Devices::ISceneModeControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.SceneModeControl"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Media::Devices::TorchControl>
{
	using Abi = ABI::Windows::Media::Devices::TorchControl;
	using Default = Windows::Media::Devices::ITorchControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.TorchControl"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Devices::FlashControl>
{
	using Abi = ABI::Windows::Media::Devices::FlashControl;
	using Default = Windows::Media::Devices::IFlashControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.FlashControl"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Devices::ExposureCompensationControl>
{
	using Abi = ABI::Windows::Media::Devices::ExposureCompensationControl;
	using Default = Windows::Media::Devices::IExposureCompensationControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.ExposureCompensationControl"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Devices::IsoSpeedControl>
{
	using Abi = ABI::Windows::Media::Devices::IsoSpeedControl;
	using Default = Windows::Media::Devices::IIsoSpeedControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.IsoSpeedControl"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Devices::WhiteBalanceControl>
{
	using Abi = ABI::Windows::Media::Devices::WhiteBalanceControl;
	using Default = Windows::Media::Devices::IWhiteBalanceControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.WhiteBalanceControl"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::Devices::ExposureControl>
{
	using Abi = ABI::Windows::Media::Devices::ExposureControl;
	using Default = Windows::Media::Devices::IExposureControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.ExposureControl"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Devices::FocusControl>
{
	using Abi = ABI::Windows::Media::Devices::FocusControl;
	using Default = Windows::Media::Devices::IFocusControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.FocusControl"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Devices::RegionOfInterest>
{
	using Abi = ABI::Windows::Media::Devices::RegionOfInterest;
	using Default = Windows::Media::Devices::IRegionOfInterest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.RegionOfInterest"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Media::Devices::RegionsOfInterestControl>
{
	using Abi = ABI::Windows::Media::Devices::RegionsOfInterestControl;
	using Default = Windows::Media::Devices::IRegionsOfInterestControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.RegionsOfInterestControl"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::Devices::MediaDeviceControl>
{
	using Abi = ABI::Windows::Media::Devices::MediaDeviceControl;
	using Default = Windows::Media::Devices::IMediaDeviceControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.MediaDeviceControl"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Devices::LowLagPhotoSequenceControl>
{
	using Abi = ABI::Windows::Media::Devices::LowLagPhotoSequenceControl;
	using Default = Windows::Media::Devices::ILowLagPhotoSequenceControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.LowLagPhotoSequenceControl"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Media::Devices::LowLagPhotoControl>
{
	using Abi = ABI::Windows::Media::Devices::LowLagPhotoControl;
	using Default = Windows::Media::Devices::ILowLagPhotoControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.LowLagPhotoControl"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Devices::MediaDeviceControlCapabilities>
{
	using Abi = ABI::Windows::Media::Devices::MediaDeviceControlCapabilities;
	using Default = Windows::Media::Devices::IMediaDeviceControlCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.MediaDeviceControlCapabilities"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings;
	using Default = Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CameraCaptureUIPhotoCaptureSettings"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings;
	using Default = Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CameraCaptureUIVideoCaptureSettings"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::Capture::CameraCaptureUI>
{
	using Abi = ABI::Windows::Media::Capture::CameraCaptureUI;
	using Default = Windows::Media::Capture::ICameraCaptureUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CameraCaptureUI"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Capture::CameraOptionsUI>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CameraOptionsUI"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Capture::MediaCaptureFailedEventArgs>
{
	using Abi = ABI::Windows::Media::Capture::MediaCaptureFailedEventArgs;
	using Default = Windows::Media::Capture::IMediaCaptureFailedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.MediaCaptureFailedEventArgs"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Capture::MediaCapture>
{
	using Abi = ABI::Windows::Media::Capture::MediaCapture;
	using Default = Windows::Media::Capture::IMediaCapture;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.MediaCapture"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Capture::MediaCaptureInitializationSettings>
{
	using Abi = ABI::Windows::Media::Capture::MediaCaptureInitializationSettings;
	using Default = Windows::Media::Capture::IMediaCaptureInitializationSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.MediaCaptureInitializationSettings"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::Capture::MediaCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::MediaCaptureSettings;
	using Default = Windows::Media::Capture::IMediaCaptureSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.MediaCaptureSettings"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Media::Capture::LowLagMediaRecording>
{
	using Abi = ABI::Windows::Media::Capture::LowLagMediaRecording;
	using Default = Windows::Media::Capture::ILowLagMediaRecording;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.LowLagMediaRecording"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Media::Capture::LowLagPhotoCapture>
{
	using Abi = ABI::Windows::Media::Capture::LowLagPhotoCapture;
	using Default = Windows::Media::Capture::ILowLagPhotoCapture;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.LowLagPhotoCapture"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Capture::LowLagPhotoSequenceCapture>
{
	using Abi = ABI::Windows::Media::Capture::LowLagPhotoSequenceCapture;
	using Default = Windows::Media::Capture::ILowLagPhotoSequenceCapture;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.LowLagPhotoSequenceCapture"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Media::Capture::CapturedPhoto>
{
	using Abi = ABI::Windows::Media::Capture::CapturedPhoto;
	using Default = Windows::Media::Capture::ICapturedPhoto;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CapturedPhoto"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::Capture::PhotoCapturedEventArgs>
{
	using Abi = ABI::Windows::Media::Capture::PhotoCapturedEventArgs;
	using Default = Windows::Media::Capture::IPhotoCapturedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.PhotoCapturedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Media::Capture::CapturedFrame>
{
	using Abi = ABI::Windows::Media::Capture::CapturedFrame;
	using Default = Windows::Media::Capture::ICapturedFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CapturedFrame"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::ContentRestrictions::RatedContentDescription>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::RatedContentDescription;
	using Default = Windows::Media::ContentRestrictions::IRatedContentDescription;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.ContentRestrictions.RatedContentDescription"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy;
	using Default = Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.ContentRestrictions.ContentRestrictionsBrowsePolicy"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Media::ContentRestrictions::RatedContentRestrictions>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::RatedContentRestrictions;
	using Default = Windows::Media::ContentRestrictions::IRatedContentRestrictions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.ContentRestrictions.RatedContentRestrictions"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Media::Protection::MediaProtectionManager>
{
	using Abi = ABI::Windows::Media::Protection::MediaProtectionManager;
	using Default = Windows::Media::Protection::IMediaProtectionManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.MediaProtectionManager"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Media::Protection::ServiceRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Protection::ServiceRequestedEventArgs;
	using Default = Windows::Media::Protection::IServiceRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.ServiceRequestedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Media::Protection::ComponentLoadFailedEventArgs>
{
	using Abi = ABI::Windows::Media::Protection::ComponentLoadFailedEventArgs;
	using Default = Windows::Media::Protection::IComponentLoadFailedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.ComponentLoadFailedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::Protection::MediaProtectionServiceCompletion>
{
	using Abi = ABI::Windows::Media::Protection::MediaProtectionServiceCompletion;
	using Default = Windows::Media::Protection::IMediaProtectionServiceCompletion;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.MediaProtectionServiceCompletion"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::Protection::RevocationAndRenewalInformation>
{
	using Abi = ABI::Windows::Media::Protection::RevocationAndRenewalInformation;
	using Default = Windows::Media::Protection::IRevocationAndRenewalInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.RevocationAndRenewalInformation"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::Protection::RevocationAndRenewalItem>
{
	using Abi = ABI::Windows::Media::Protection::RevocationAndRenewalItem;
	using Default = Windows::Media::Protection::IRevocationAndRenewalItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.RevocationAndRenewalItem"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Protection::ComponentRenewal>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.ComponentRenewal"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::Core::AudioStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::AudioStreamDescriptor;
	using Default = Windows::Media::Core::IAudioStreamDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.AudioStreamDescriptor"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Core::VideoStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::VideoStreamDescriptor;
	using Default = Windows::Media::Core::IVideoStreamDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.VideoStreamDescriptor"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSource>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSource;
	using Default = Windows::Media::Core::IMediaStreamSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSource"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceClosedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceClosedEventArgs;
	using Default = Windows::Media::Core::IMediaStreamSourceClosedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceClosedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceStartingEventArgs>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceStartingEventArgs;
	using Default = Windows::Media::Core::IMediaStreamSourceStartingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceStartingEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs;
	using Default = Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs;
	using Default = Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSamplePropertySet>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSamplePropertySet;
	using Default = Windows::Foundation::Collections::IMap<GUID, IInspectable>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSamplePropertySet"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSample>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSample;
	using Default = Windows::Media::Core::IMediaStreamSample;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSample"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSampleProtectionProperties>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSampleProtectionProperties;
	using Default = Windows::Media::Core::IMediaStreamSampleProtectionProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSampleProtectionProperties"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceClosedRequest>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceClosedRequest;
	using Default = Windows::Media::Core::IMediaStreamSourceClosedRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceClosedRequest"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceStartingRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceStartingRequestDeferral;
	using Default = Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceStartingRequestDeferral"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceStartingRequest>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceStartingRequest;
	using Default = Windows::Media::Core::IMediaStreamSourceStartingRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceStartingRequest"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSampleRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSampleRequestDeferral;
	using Default = Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSampleRequestDeferral"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSampleRequest>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSampleRequest;
	using Default = Windows::Media::Core::IMediaStreamSourceSampleRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSampleRequest"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral;
	using Default = Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest;
	using Default = Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::Effects::AudioEffect>
{
	using Abi = ABI::Windows::Media::Effects::AudioEffect;
	using Default = Windows::Media::Effects::IAudioEffect;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Effects.AudioEffect"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Media::Effects::AudioRenderEffectsManager>
{
	using Abi = ABI::Windows::Media::Effects::AudioRenderEffectsManager;
	using Default = Windows::Media::Effects::IAudioRenderEffectsManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Effects.AudioRenderEffectsManager"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Media::Effects::AudioCaptureEffectsManager>
{
	using Abi = ABI::Windows::Media::Effects::AudioCaptureEffectsManager;
	using Default = Windows::Media::Effects::IAudioCaptureEffectsManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Effects.AudioCaptureEffectsManager"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Media::Effects::AudioEffectsManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Effects.AudioEffectsManager"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::Playlists::Playlist>
{
	using Abi = ABI::Windows::Media::Playlists::Playlist;
	using Default = Windows::Media::Playlists::IPlaylist;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Playlists.Playlist"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Media::PlayTo::SourceChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::SourceChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::ISourceChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.SourceChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlaybackRateChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.CurrentTimeChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::PlayTo::MuteChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::MuteChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::IMuteChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.MuteChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::PlayTo::VolumeChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::VolumeChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.VolumeChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToReceiver>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToReceiver;
	using Default = Windows::Media::PlayTo::IPlayToReceiver;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToReceiver"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToConnection>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToConnection;
	using Default = Windows::Media::PlayTo::IPlayToConnection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToConnection"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSource>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSource;
	using Default = Windows::Media::PlayTo::IPlayToSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSource"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToConnectionStateChangedEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToConnectionTransferredEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToConnectionErrorEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToConnectionErrorEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToConnectionErrorEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSourceSelectedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSourceSelectedEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSourceSelectedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSourceDeferral>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSourceDeferral;
	using Default = Windows::Media::PlayTo::IPlayToSourceDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSourceDeferral"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSourceRequest>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSourceRequest;
	using Default = Windows::Media::PlayTo::IPlayToSourceRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSourceRequest"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSourceRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSourceRequestedEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSourceRequestedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToManager>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToManager;
	using Default = Windows::Media::PlayTo::IPlayToManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToManager"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::VoiceInformation>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::VoiceInformation;
	using Default = Windows::Media::SpeechSynthesis::IVoiceInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SpeechSynthesis.VoiceInformation"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::SpeechSynthesisStream>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::SpeechSynthesisStream;
	using Default = Windows::Media::SpeechSynthesis::ISpeechSynthesisStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SpeechSynthesis.SpeechSynthesisStream"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::SpeechSynthesizer>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::SpeechSynthesizer;
	using Default = Windows::Media::SpeechSynthesis::ISpeechSynthesizer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SpeechSynthesis.SpeechSynthesizer"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Media::Streaming::BasicDevice>
{
	using Abi = ABI::Windows::Media::Streaming::BasicDevice;
	using Default = Windows::Media::Streaming::IBasicDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.BasicDevice"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::Streaming::ActiveBasicDevice>
{
	using Abi = ABI::Windows::Media::Streaming::ActiveBasicDevice;
	using Default = Windows::Media::Streaming::IActiveBasicDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.ActiveBasicDevice"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::Streaming::DevicePair>
{
	using Abi = ABI::Windows::Media::Streaming::DevicePair;
	using Default = Windows::Media::Streaming::IDevicePair;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.DevicePair"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Streaming::DeviceController>
{
	using Abi = ABI::Windows::Media::Streaming::DeviceController;
	using Default = Windows::Media::Streaming::IDeviceController;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.DeviceController"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Streaming::MediaRenderer>
{
	using Abi = ABI::Windows::Media::Streaming::MediaRenderer;
	using Default = Windows::Media::Streaming::IMediaRenderer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.MediaRenderer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Streaming::CreateMediaRendererOperation>
{
	using Abi = ABI::Windows::Media::Streaming::CreateMediaRendererOperation;
	using Default = Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::MediaRenderer>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.CreateMediaRendererOperation"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Media::Streaming::StreamSelector>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.StreamSelector"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Media::Transcoding::PrepareTranscodeResult>
{
	using Abi = ABI::Windows::Media::Transcoding::PrepareTranscodeResult;
	using Default = Windows::Media::Transcoding::IPrepareTranscodeResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Transcoding.PrepareTranscodeResult"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Media::Transcoding::MediaTranscoder>
{
	using Abi = ABI::Windows::Media::Transcoding::MediaTranscoder;
	using Default = Windows::Media::Transcoding::IMediaTranscoder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Transcoding.MediaTranscoder"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Security::Credentials::PasswordCredential>
{
	using Abi = ABI::Windows::Security::Credentials::PasswordCredential;
	using Default = Windows::Security::Credentials::IPasswordCredential;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.PasswordCredential"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Security::Credentials::PasswordVault>
{
	using Abi = ABI::Windows::Security::Credentials::PasswordVault;
	using Default = Windows::Security::Credentials::IPasswordVault;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.PasswordVault"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Security::Credentials::PasswordCredentialPropertyStore>
{
	using Abi = ABI::Windows::Security::Credentials::PasswordCredentialPropertyStore;
	using Default = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.PasswordCredentialPropertyStore"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Security::Credentials::WebAccountProvider>
{
	using Abi = ABI::Windows::Security::Credentials::WebAccountProvider;
	using Default = Windows::Security::Credentials::IWebAccountProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.WebAccountProvider"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Security::Credentials::WebAccount>
{
	using Abi = ABI::Windows::Security::Credentials::WebAccount;
	using Default = Windows::Security::Credentials::IWebAccount;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.WebAccount"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Notifications::TileUpdater>
{
	using Abi = ABI::Windows::UI::Notifications::TileUpdater;
	using Default = Windows::UI::Notifications::ITileUpdater;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.TileUpdater"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Notifications::TileNotification>
{
	using Abi = ABI::Windows::UI::Notifications::TileNotification;
	using Default = Windows::UI::Notifications::ITileNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.TileNotification"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Notifications::ScheduledTileNotification>
{
	using Abi = ABI::Windows::UI::Notifications::ScheduledTileNotification;
	using Default = Windows::UI::Notifications::IScheduledTileNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ScheduledTileNotification"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Notifications::BadgeUpdater>
{
	using Abi = ABI::Windows::UI::Notifications::BadgeUpdater;
	using Default = Windows::UI::Notifications::IBadgeUpdater;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.BadgeUpdater"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Notifications::BadgeNotification>
{
	using Abi = ABI::Windows::UI::Notifications::BadgeNotification;
	using Default = Windows::UI::Notifications::IBadgeNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.BadgeNotification"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Notifications::ToastNotifier>
{
	using Abi = ABI::Windows::UI::Notifications::ToastNotifier;
	using Default = Windows::UI::Notifications::IToastNotifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastNotifier"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Notifications::ToastNotification>
{
	using Abi = ABI::Windows::UI::Notifications::ToastNotification;
	using Default = Windows::UI::Notifications::IToastNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastNotification"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Notifications::ScheduledToastNotification>
{
	using Abi = ABI::Windows::UI::Notifications::ScheduledToastNotification;
	using Default = Windows::UI::Notifications::IScheduledToastNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ScheduledToastNotification"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Notifications::ToastDismissedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::ToastDismissedEventArgs;
	using Default = Windows::UI::Notifications::IToastDismissedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastDismissedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Notifications::ToastFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::ToastFailedEventArgs;
	using Default = Windows::UI::Notifications::IToastFailedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastFailedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Notifications::TileUpdateManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.TileUpdateManager"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Notifications::BadgeUpdateManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.BadgeUpdateManager"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Notifications::ToastNotificationManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastNotificationManager"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Notifications::ToastActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::ToastActivatedEventArgs;
	using Default = Windows::UI::Notifications::IToastActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastActivatedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Web::WebError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.WebError"; }
	static constexpr unsigned NameLength = 20;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::DownloadOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::DownloadOperation;
	using Default = Windows::Networking::BackgroundTransfer::IDownloadOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.DownloadOperation"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult;
	using Default = Windows::Networking::BackgroundTransfer::IUnconstrainedTransferRequestResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult"; }
	static constexpr unsigned NameLength = 72;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::UploadOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::UploadOperation;
	using Default = Windows::Networking::BackgroundTransfer::IUploadOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.UploadOperation"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundTransferGroup>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::BackgroundTransferGroup;
	using Default = Windows::Networking::BackgroundTransfer::IBackgroundTransferGroup;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundTransferGroup"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart;
	using Default = Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::ResponseInformation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::ResponseInformation;
	using Default = Windows::Networking::BackgroundTransfer::IResponseInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.ResponseInformation"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundDownloader>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::BackgroundDownloader;
	using Default = Windows::Networking::BackgroundTransfer::IBackgroundDownloader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundDownloader"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundUploader>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::BackgroundUploader;
	using Default = Windows::Networking::BackgroundTransfer::IBackgroundUploader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundUploader"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundTransferError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundTransferError"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::ContentPrefetcher>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.ContentPrefetcher"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandAccount>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandAccount;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandAccount;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandAccount"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandNetwork>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandNetwork;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandNetwork;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandNetwork"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Networking::NetworkOperators::NetworkOperatorNotificationEventDetails>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::NetworkOperatorNotificationEventDetails;
	using Default = Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails"; }
	static constexpr unsigned NameLength = 75;
};

template <> struct Traits<Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration;
	using Default = Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration"; }
	static constexpr unsigned NameLength = 84;
};

template <> struct Traits<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult;
	using Default = Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult"; }
	static constexpr unsigned NameLength = 75;
};

template <> struct Traits<Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager;
	using Default = Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Networking::NetworkOperators::HotspotAuthenticationEventDetails>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::HotspotAuthenticationEventDetails;
	using Default = Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.HotspotAuthenticationEventDetails"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Networking::NetworkOperators::HotspotAuthenticationContext>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::HotspotAuthenticationContext;
	using Default = Windows::Networking::NetworkOperators::IHotspotAuthenticationContext;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.HotspotAuthenticationContext"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult;
	using Default = Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults;
	using Default = Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::NetworkOperators::ProvisionedProfile>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::ProvisionedProfile;
	using Default = Windows::Networking::NetworkOperators::IProvisionedProfile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.ProvisionedProfile"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Networking::NetworkOperators::ProvisioningAgent>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::ProvisioningAgent;
	using Default = Windows::Networking::NetworkOperators::IProvisioningAgent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.ProvisioningAgent"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Networking::NetworkOperators::UssdMessage>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::UssdMessage;
	using Default = Windows::Networking::NetworkOperators::IUssdMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.UssdMessage"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Networking::NetworkOperators::UssdReply>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::UssdReply;
	using Default = Windows::Networking::NetworkOperators::IUssdReply;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.UssdReply"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::NetworkOperators::UssdSession>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::UssdSession;
	using Default = Windows::Networking::NetworkOperators::IUssdSession;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.UssdSession"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::Certificate>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::Certificate;
	using Default = Windows::Security::Cryptography::Certificates::ICertificate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.Certificate"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateRequestProperties>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CertificateRequestProperties;
	using Default = Windows::Security::Cryptography::Certificates::ICertificateRequestProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateRequestProperties"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager;
	using Default = Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager"; }
	static constexpr unsigned NameLength = 75;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateEnrollmentManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::KeyAttestationHelper>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.KeyAttestationHelper"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateQuery>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CertificateQuery;
	using Default = Windows::Security::Cryptography::Certificates::ICertificateQuery;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateQuery"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateStore>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CertificateStore;
	using Default = Windows::Security::Cryptography::Certificates::ICertificateStore;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateStore"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateStores>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateStores"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::KeyAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.KeyAlgorithmNames"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::KeyStorageProviderNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.KeyStorageProviderNames"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ChainBuildingParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ChainBuildingParameters;
	using Default = Windows::Security::Cryptography::Certificates::IChainBuildingParameters;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.ChainBuildingParameters"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ChainValidationParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ChainValidationParameters;
	using Default = Windows::Security::Cryptography::Certificates::IChainValidationParameters;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.ChainValidationParameters"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateChain>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CertificateChain;
	using Default = Windows::Security::Cryptography::Certificates::ICertificateChain;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateChain"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CmsTimestampInfo>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CmsTimestampInfo;
	using Default = Windows::Security::Cryptography::Certificates::ICmsTimestampInfo;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsTimestampInfo"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CmsSignerInfo>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CmsSignerInfo;
	using Default = Windows::Security::Cryptography::Certificates::ICmsSignerInfo;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsSignerInfo"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CmsAttachedSignature>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CmsAttachedSignature;
	using Default = Windows::Security::Cryptography::Certificates::ICmsAttachedSignature;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsAttachedSignature"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CmsDetachedSignature>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CmsDetachedSignature;
	using Default = Windows::Security::Cryptography::Certificates::ICmsDetachedSignature;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsDetachedSignature"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Networking::Sockets::ControlChannelTrigger>
{
	using Abi = ABI::Windows::Networking::Sockets::ControlChannelTrigger;
	using Default = Windows::Networking::Sockets::IControlChannelTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.ControlChannelTrigger"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Networking::Sockets::DatagramSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::DatagramSocketControl;
	using Default = Windows::Networking::Sockets::IDatagramSocketControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.DatagramSocketControl"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Networking::Sockets::DatagramSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::DatagramSocketInformation;
	using Default = Windows::Networking::Sockets::IDatagramSocketInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.DatagramSocketInformation"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Networking::Sockets::DatagramSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::DatagramSocket;
	using Default = Windows::Networking::Sockets::IDatagramSocket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.DatagramSocket"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs;
	using Default = Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketControl;
	using Default = Windows::Networking::Sockets::IStreamSocketControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketControl"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketInformation;
	using Default = Windows::Networking::Sockets::IStreamSocketInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketInformation"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocket;
	using Default = Windows::Networking::Sockets::IStreamSocket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocket"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketListenerControl>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketListenerControl;
	using Default = Windows::Networking::Sockets::IStreamSocketListenerControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListenerControl"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketListenerInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketListenerInformation;
	using Default = Windows::Networking::Sockets::IStreamSocketListenerInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListenerInformation"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketListener>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketListener;
	using Default = Windows::Networking::Sockets::IStreamSocketListener;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListener"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs;
	using Default = Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Networking::Sockets::WebSocketClosedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::WebSocketClosedEventArgs;
	using Default = Windows::Networking::Sockets::IWebSocketClosedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.WebSocketClosedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Networking::Sockets::MessageWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::MessageWebSocketControl;
	using Default = Windows::Networking::Sockets::IMessageWebSocketControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocketControl"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Sockets::MessageWebSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::MessageWebSocketInformation;
	using Default = Windows::Networking::Sockets::IWebSocketInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocketInformation"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Networking::Sockets::MessageWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::MessageWebSocket;
	using Default = Windows::Networking::Sockets::IMessageWebSocket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocket"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs;
	using Default = Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::Sockets::StreamWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamWebSocketControl;
	using Default = Windows::Networking::Sockets::IStreamWebSocketControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamWebSocketControl"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Networking::Sockets::StreamWebSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamWebSocketInformation;
	using Default = Windows::Networking::Sockets::IWebSocketInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamWebSocketInformation"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Networking::Sockets::StreamWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamWebSocket;
	using Default = Windows::Networking::Sockets::IStreamWebSocket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamWebSocket"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Networking::Sockets::WebSocketKeepAlive>
{
	using Abi = ABI::Windows::Networking::Sockets::WebSocketKeepAlive;
	using Default = Windows::ApplicationModel::Background::IBackgroundTask;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.WebSocketKeepAlive"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Sockets::SocketError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.SocketError"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Networking::Sockets::WebSocketError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.WebSocketError"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Networking::Proximity::ProximityMessage>
{
	using Abi = ABI::Windows::Networking::Proximity::ProximityMessage;
	using Default = Windows::Networking::Proximity::IProximityMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.ProximityMessage"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Proximity::ProximityDevice>
{
	using Abi = ABI::Windows::Networking::Proximity::ProximityDevice;
	using Default = Windows::Networking::Proximity::IProximityDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.ProximityDevice"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>
{
	using Abi = ABI::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs;
	using Default = Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.TriggeredConnectionStateChangedEventArgs"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Networking::Proximity::PeerInformation>
{
	using Abi = ABI::Windows::Networking::Proximity::PeerInformation;
	using Default = Windows::Networking::Proximity::IPeerInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.PeerInformation"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Networking::Proximity::ConnectionRequestedEventArgs>
{
	using Abi = ABI::Windows::Networking::Proximity::ConnectionRequestedEventArgs;
	using Default = Windows::Networking::Proximity::IConnectionRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.ConnectionRequestedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Networking::Proximity::PeerWatcher>
{
	using Abi = ABI::Windows::Networking::Proximity::PeerWatcher;
	using Default = Windows::Networking::Proximity::IPeerWatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.PeerWatcher"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Networking::Proximity::PeerFinder>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.PeerFinder"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Networking::PushNotifications::PushNotificationChannel>
{
	using Abi = ABI::Windows::Networking::PushNotifications::PushNotificationChannel;
	using Default = Windows::Networking::PushNotifications::IPushNotificationChannel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.PushNotifications.PushNotificationChannel"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs;
	using Default = Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::Networking::PushNotifications::RawNotification>
{
	using Abi = ABI::Windows::Networking::PushNotifications::RawNotification;
	using Default = Windows::Networking::PushNotifications::IRawNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.PushNotifications.RawNotification"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Networking::PushNotifications::PushNotificationChannelManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.PushNotifications.PushNotificationChannelManager"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest;
	using Default = Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket;
	using Default = Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.OnlineIdServiceTicket"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::UserAuthenticationOperation>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::UserAuthenticationOperation;
	using Default = Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::OnlineId::UserIdentity>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.UserAuthenticationOperation"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::SignOutUserOperation>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::SignOutUserOperation;
	using Default = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.SignOutUserOperation"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::UserIdentity>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::UserIdentity;
	using Default = Windows::Security::Authentication::OnlineId::IUserIdentity;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.UserIdentity"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::OnlineIdAuthenticator>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::OnlineIdAuthenticator;
	using Default = Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.OnlineIdAuthenticator"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Security::Authentication::Web::WebAuthenticationResult>
{
	using Abi = ABI::Windows::Security::Authentication::Web::WebAuthenticationResult;
	using Default = Windows::Security::Authentication::Web::IWebAuthenticationResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.Web.WebAuthenticationResult"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Authentication::Web::WebAuthenticationBroker>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.Web.WebAuthenticationBroker"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Credentials::UI::UserConsentVerifier>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.UI.UserConsentVerifier"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Security::Credentials::UI::CredentialPickerOptions>
{
	using Abi = ABI::Windows::Security::Credentials::UI::CredentialPickerOptions;
	using Default = Windows::Security::Credentials::UI::ICredentialPickerOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.UI.CredentialPickerOptions"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Security::Credentials::UI::CredentialPickerResults>
{
	using Abi = ABI::Windows::Security::Credentials::UI::CredentialPickerResults;
	using Default = Windows::Security::Credentials::UI::ICredentialPickerResults;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.UI.CredentialPickerResults"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Security::Credentials::UI::CredentialPicker>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.UI.CredentialPicker"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Security::Cryptography::Core::KeyDerivationParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::KeyDerivationParameters;
	using Default = Windows::Security::Cryptography::Core::IKeyDerivationParameters;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.KeyDerivationParameters"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Security::Cryptography::Core::CryptographicKey>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::CryptographicKey;
	using Default = Windows::Security::Cryptography::Core::ICryptographicKey;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.CryptographicKey"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Security::Cryptography::Core::CryptographicHash>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::CryptographicHash;
	using Default = Windows::Security::Cryptography::Core::IHashComputation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.CryptographicHash"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Security::Cryptography::Core::PersistedKeyProvider>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.PersistedKeyProvider"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData;
	using Default = Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Security::Cryptography::Core::CryptographicEngine>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.CryptographicEngine"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Security::Cryptography::Core::HashAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::HashAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::IHashAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.HashAlgorithmProvider"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Security::Cryptography::Core::MacAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::MacAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::IMacAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.MacAlgorithmProvider"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.KeyDerivationAlgorithmProvider"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.SymmetricKeyAlgorithmProvider"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.AsymmetricKeyAlgorithmProvider"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Security::Cryptography::Core::HashAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.HashAlgorithmNames"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Security::Cryptography::Core::MacAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.MacAlgorithmNames"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Security::Cryptography::Core::SymmetricAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.SymmetricAlgorithmNames"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Security::Cryptography::Core::AsymmetricAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.AsymmetricAlgorithmNames"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Core::KeyDerivationAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.KeyDerivationAlgorithmNames"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Security::Cryptography::DataProtection::DataProtectionProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::DataProtection::DataProtectionProvider;
	using Default = Windows::Security::Cryptography::DataProtection::IDataProtectionProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.DataProtection.DataProtectionProvider"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Security::Cryptography::CryptographicBuffer>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.CryptographicBuffer"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Security::EnterpriseData::FileRevocationManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.EnterpriseData.FileRevocationManager"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults;
	using Default = Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::EasClientSecurityPolicy>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::EasClientSecurityPolicy;
	using Default = Windows::Security::ExchangeActiveSyncProvisioning::IEasClientSecurityPolicy;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation;
	using Default = Windows::Security::ExchangeActiveSyncProvisioning::IEasClientDeviceInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Storage::AccessCache::AccessListEntryView>
{
	using Abi = ABI::Windows::Storage::AccessCache::AccessListEntryView;
	using Default = Windows::Foundation::Collections::IVectorView<Modern::Windows::Storage::AccessCache::AccessListEntry>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.AccessListEntryView"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>
{
	using Abi = ABI::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList;
	using Default = Windows::Storage::AccessCache::IStorageItemMostRecentlyUsedList;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Storage::AccessCache::ItemRemovedEventArgs>
{
	using Abi = ABI::Windows::Storage::AccessCache::ItemRemovedEventArgs;
	using Default = Windows::Storage::AccessCache::IItemRemovedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.ItemRemovedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Storage::AccessCache::StorageItemAccessList>
{
	using Abi = ABI::Windows::Storage::AccessCache::StorageItemAccessList;
	using Default = Windows::Storage::AccessCache::IStorageItemAccessList;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.StorageItemAccessList"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::AccessCache::StorageApplicationPermissions>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.StorageApplicationPermissions"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Storage::BulkAccess::FileInformationFactory>
{
	using Abi = ABI::Windows::Storage::BulkAccess::FileInformationFactory;
	using Default = Windows::Storage::BulkAccess::IFileInformationFactory;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.BulkAccess.FileInformationFactory"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::BulkAccess::FileInformation>
{
	using Abi = ABI::Windows::Storage::BulkAccess::FileInformation;
	using Default = Windows::Storage::BulkAccess::IStorageItemInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.BulkAccess.FileInformation"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::BulkAccess::FolderInformation>
{
	using Abi = ABI::Windows::Storage::BulkAccess::FolderInformation;
	using Default = Windows::Storage::BulkAccess::IStorageItemInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.BulkAccess.FolderInformation"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Storage::Compression::Compressor>
{
	using Abi = ABI::Windows::Storage::Compression::Compressor;
	using Default = Windows::Storage::Compression::ICompressor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Compression.Compressor"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Storage::Compression::Decompressor>
{
	using Abi = ABI::Windows::Storage::Compression::Decompressor;
	using Default = Windows::Storage::Compression::IDecompressor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Compression.Decompressor"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Storage::Pickers::FilePickerSelectedFilesArray>
{
	using Abi = ABI::Windows::Storage::Pickers::FilePickerSelectedFilesArray;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FilePickerSelectedFilesArray"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Storage::Pickers::FilePickerFileTypesOrderedMap>
{
	using Abi = ABI::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap;
	using Default = Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Storage::Pickers::FileExtensionVector>
{
	using Abi = ABI::Windows::Storage::Pickers::FileExtensionVector;
	using Default = Windows::Foundation::Collections::IVector<String>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FileExtensionVector"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Storage::Pickers::FileOpenPicker>
{
	using Abi = ABI::Windows::Storage::Pickers::FileOpenPicker;
	using Default = Windows::Storage::Pickers::IFileOpenPicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FileOpenPicker"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Storage::Pickers::FileSavePicker>
{
	using Abi = ABI::Windows::Storage::Pickers::FileSavePicker;
	using Default = Windows::Storage::Pickers::IFileSavePicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FileSavePicker"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Storage::Pickers::FolderPicker>
{
	using Abi = ABI::Windows::Storage::Pickers::FolderPicker;
	using Default = Windows::Storage::Pickers::IFolderPicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FolderPicker"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::System::Display::DisplayRequest>
{
	using Abi = ABI::Windows::System::Display::DisplayRequest;
	using Default = Windows::System::Display::IDisplayRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Display.DisplayRequest"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::System::Profile::HardwareToken>
{
	using Abi = ABI::Windows::System::Profile::HardwareToken;
	using Default = Windows::System::Profile::IHardwareToken;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Profile.HardwareToken"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::System::Profile::HardwareIdentification>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Profile.HardwareIdentification"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::System::Profile::SystemManufacturers::SmbiosInformation>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Profile.SystemManufacturers.SmbiosInformation"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::System::RemoteDesktop::InteractiveSession>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.RemoteDesktop.InteractiveSession"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::System::Threading::ThreadPoolTimer>
{
	using Abi = ABI::Windows::System::Threading::ThreadPoolTimer;
	using Default = Windows::System::Threading::IThreadPoolTimer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Threading.ThreadPoolTimer"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::System::Threading::ThreadPool>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Threading.ThreadPool"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::System::Threading::Core::SignalNotifier>
{
	using Abi = ABI::Windows::System::Threading::Core::SignalNotifier;
	using Default = Windows::System::Threading::Core::ISignalNotifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Threading.Core.SignalNotifier"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::System::Threading::Core::PreallocatedWorkItem>
{
	using Abi = ABI::Windows::System::Threading::Core::PreallocatedWorkItem;
	using Default = Windows::System::Threading::Core::IPreallocatedWorkItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Threading.Core.PreallocatedWorkItem"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::System::UserProfile::AdvertisingManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.UserProfile.AdvertisingManager"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::System::UserProfile::UserInformation>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.UserProfile.UserInformation"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::System::UserProfile::LockScreen>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.UserProfile.LockScreen"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::System::UserProfile::GlobalizationPreferences>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.UserProfile.GlobalizationPreferences"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::ApplicationSettings::SettingsCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::SettingsCommand;
	using Default = Windows::UI::Popups::IUICommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.SettingsCommand"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest;
	using Default = Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.SettingsPaneCommandsRequest"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs;
	using Default = Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.SettingsPaneCommandsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::UI::ApplicationSettings::SettingsPane>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::SettingsPane;
	using Default = Windows::UI::ApplicationSettings::ISettingsPane;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.SettingsPane"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::ApplicationSettings::WebAccountProviderCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::WebAccountProviderCommand;
	using Default = Windows::UI::ApplicationSettings::IWebAccountProviderCommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.WebAccountProviderCommand"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::ApplicationSettings::WebAccountCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::WebAccountCommand;
	using Default = Windows::UI::ApplicationSettings::IWebAccountCommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.WebAccountCommand"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::ApplicationSettings::WebAccountInvokedArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::WebAccountInvokedArgs;
	using Default = Windows::UI::ApplicationSettings::IWebAccountInvokedArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.WebAccountInvokedArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::ApplicationSettings::CredentialCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::CredentialCommand;
	using Default = Windows::UI::ApplicationSettings::ICredentialCommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.CredentialCommand"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral;
	using Default = Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.AccountsSettingsPaneEventDeferral"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs;
	using Default = Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.AccountsSettingsPaneCommandsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 77;
};

template <> struct Traits<Windows::UI::ApplicationSettings::AccountsSettingsPane>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::AccountsSettingsPane;
	using Default = Windows::UI::ApplicationSettings::IAccountsSettingsPane;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.AccountsSettingsPane"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::AnimationDescription>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::AnimationDescription;
	using Default = Windows::UI::Core::AnimationMetrics::IAnimationDescription;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.AnimationDescription"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::PropertyAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::PropertyAnimation;
	using Default = Windows::UI::Core::AnimationMetrics::IPropertyAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.PropertyAnimation"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::ScaleAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::ScaleAnimation;
	using Default = Windows::UI::Core::AnimationMetrics::IScaleAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.ScaleAnimation"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::TranslationAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::TranslationAnimation;
	using Default = Windows::UI::Core::AnimationMetrics::IPropertyAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.TranslationAnimation"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::OpacityAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::OpacityAnimation;
	using Default = Windows::UI::Core::AnimationMetrics::IOpacityAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.OpacityAnimation"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Input::Inking::InkDrawingAttributes>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkDrawingAttributes;
	using Default = Windows::UI::Input::Inking::IInkDrawingAttributes;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkDrawingAttributes"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Input::Inking::InkStrokeRenderingSegment>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkStrokeRenderingSegment;
	using Default = Windows::UI::Input::Inking::IInkStrokeRenderingSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeRenderingSegment"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Input::Inking::InkStroke>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkStroke;
	using Default = Windows::UI::Input::Inking::IInkStroke;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkStroke"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Input::Inking::InkStrokeBuilder>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkStrokeBuilder;
	using Default = Windows::UI::Input::Inking::IInkStrokeBuilder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeBuilder"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Input::Inking::InkRecognitionResult>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkRecognitionResult;
	using Default = Windows::UI::Input::Inking::IInkRecognitionResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkRecognitionResult"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Input::Inking::InkStrokeContainer>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkStrokeContainer;
	using Default = Windows::UI::Input::Inking::IInkStrokeContainer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeContainer"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Input::Inking::InkRecognizer>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkRecognizer;
	using Default = Windows::UI::Input::Inking::IInkRecognizer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkRecognizer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Input::Inking::InkRecognizerContainer>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkRecognizerContainer;
	using Default = Windows::UI::Input::Inking::IInkRecognizerContainer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkRecognizerContainer"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Input::Inking::InkManager>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkManager;
	using Default = Windows::UI::Input::Inking::IInkManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkManager"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::StartScreen::SecondaryTileVisualElements>
{
	using Abi = ABI::Windows::UI::StartScreen::SecondaryTileVisualElements;
	using Default = Windows::UI::StartScreen::ISecondaryTileVisualElements;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.SecondaryTileVisualElements"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::StartScreen::SecondaryTile>
{
	using Abi = ABI::Windows::UI::StartScreen::SecondaryTile;
	using Default = Windows::UI::StartScreen::ISecondaryTile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.SecondaryTile"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::StartScreen::VisualElementsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::StartScreen::VisualElementsRequestedEventArgs;
	using Default = Windows::UI::StartScreen::IVisualElementsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.VisualElementsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::StartScreen::VisualElementsRequest>
{
	using Abi = ABI::Windows::UI::StartScreen::VisualElementsRequest;
	using Default = Windows::UI::StartScreen::IVisualElementsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.VisualElementsRequest"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::StartScreen::VisualElementsRequestDeferral>
{
	using Abi = ABI::Windows::UI::StartScreen::VisualElementsRequestDeferral;
	using Default = Windows::UI::StartScreen::IVisualElementsRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.VisualElementsRequestDeferral"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::WebUI::ActivatedDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::ActivatedDeferral;
	using Default = Windows::UI::WebUI::IActivatedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.ActivatedDeferral"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::WebUI::ActivatedOperation>
{
	using Abi = ABI::Windows::UI::WebUI::ActivatedOperation;
	using Default = Windows::UI::WebUI::IActivatedOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.ActivatedOperation"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::WebUI::WebUILaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUILaunchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUILaunchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::WebUI::WebUISearchActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUISearchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ISearchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUISearchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIShareTargetActivatedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::WebUI::WebUIFileActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIFileActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIFileActivatedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::WebUI::WebUIProtocolActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIProtocolActivatedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIFileOpenPickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIFileSavePickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUICachedFileUpdaterActivatedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactPickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactPickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::WebUI::WebUIDeviceActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIDeviceActivatedEventArgs"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::WebUI::WebUIPrintTaskSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIPrintTaskSettingsActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIPrintTaskSettingsActivatedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::WebUI::WebUICameraSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUICameraSettingsActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUICameraSettingsActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIAppointmentsProviderAddAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 78;
};

template <> struct Traits<Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 77;
};

template <> struct Traits<Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs"; }
	static constexpr unsigned NameLength = 73;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactCallActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactMessageActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactMessageActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactMessageActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactMapActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactMapActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactMapActivatedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactPostActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactPostActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactPostActivatedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactVideoCallActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactVideoCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactVideoCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::WebUI::WebUILockScreenCallActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUILockScreenCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUILockScreenCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIRestrictedLaunchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::WebUI::WebUINavigatedOperation>
{
	using Abi = ABI::Windows::UI::WebUI::WebUINavigatedOperation;
	using Default = Windows::UI::WebUI::IWebUINavigatedOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUINavigatedOperation"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::WebUI::SuspendingDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::SuspendingDeferral;
	using Default = Windows::ApplicationModel::ISuspendingDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.SuspendingDeferral"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::WebUI::SuspendingOperation>
{
	using Abi = ABI::Windows::UI::WebUI::SuspendingOperation;
	using Default = Windows::ApplicationModel::ISuspendingOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.SuspendingOperation"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::WebUI::SuspendingEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::SuspendingEventArgs;
	using Default = Windows::ApplicationModel::ISuspendingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.SuspendingEventArgs"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass;
	using Default = Windows::UI::WebUI::IWebUIBackgroundTaskInstance;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIBackgroundTaskInstanceRuntimeClass"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::WebUI::WebUIBackgroundTaskInstance>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIBackgroundTaskInstance"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::WebUI::WebUINavigatedDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::WebUINavigatedDeferral;
	using Default = Windows::UI::WebUI::IWebUINavigatedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUINavigatedDeferral"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::WebUI::WebUINavigatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUINavigatedEventArgs;
	using Default = Windows::UI::WebUI::IWebUINavigatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUINavigatedEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::WebUI::WebUIApplication>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIApplication"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::WebUI::HtmlPrintDocumentSource>
{
	using Abi = ABI::Windows::UI::WebUI::HtmlPrintDocumentSource;
	using Default = Windows::UI::WebUI::IHtmlPrintDocumentSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.HtmlPrintDocumentSource"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Automation::AutomationProperty>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::AutomationProperty;
	using Default = Windows::UI::Xaml::Automation::IAutomationProperty;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.AutomationProperty"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Provider::IRawElementProviderSimple;
	using Default = Windows::UI::Xaml::Automation::Provider::IIRawElementProviderSimple;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Provider.IRawElementProviderSimple"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::UI::Xaml::DependencyObject>
{
	using Abi = ABI::Windows::UI::Xaml::DependencyObject;
	using Default = Windows::UI::Xaml::IDependencyObject;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DependencyObject"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::UIElement>
{
	using Abi = ABI::Windows::UI::Xaml::UIElement;
	using Default = Windows::UI::Xaml::IUIElement;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.UIElement"; }
	static constexpr unsigned NameLength = 25;
};

template <> struct Traits<Windows::UI::Xaml::Input::Pointer>
{
	using Abi = ABI::Windows::UI::Xaml::Input::Pointer;
	using Default = Windows::UI::Xaml::Input::IPointer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.Pointer"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IDoubleTappedRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.DoubleTappedRoutedEventArgs"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Xaml::Input::FocusManager>
{
	using Abi = ABI::Windows::UI::Xaml::Input::FocusManager;
	using Default = Windows::UI::Xaml::Input::IFocusManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.FocusManager"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::Input::HoldingRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::HoldingRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IHoldingRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.HoldingRoutedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Xaml::Input::InertiaExpansionBehavior>
{
	using Abi = ABI::Windows::UI::Xaml::Input::InertiaExpansionBehavior;
	using Default = Windows::UI::Xaml::Input::IInertiaExpansionBehavior;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.InertiaExpansionBehavior"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Input::InertiaRotationBehavior>
{
	using Abi = ABI::Windows::UI::Xaml::Input::InertiaRotationBehavior;
	using Default = Windows::UI::Xaml::Input::IInertiaRotationBehavior;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.InertiaRotationBehavior"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Input::InertiaTranslationBehavior>
{
	using Abi = ABI::Windows::UI::Xaml::Input::InertiaTranslationBehavior;
	using Default = Windows::UI::Xaml::Input::IInertiaTranslationBehavior;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.InertiaTranslationBehavior"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Input::InputScope>
{
	using Abi = ABI::Windows::UI::Xaml::Input::InputScope;
	using Default = Windows::UI::Xaml::Input::IInputScope;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.InputScope"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Input::InputScopeName>
{
	using Abi = ABI::Windows::UI::Xaml::Input::InputScopeName;
	using Default = Windows::UI::Xaml::Input::IInputScopeName;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.InputScopeName"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Input::KeyRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::KeyRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IKeyRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.KeyRoutedEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.ManipulationCompletedRoutedEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.ManipulationDeltaRoutedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.ManipulationInertiaStartingRoutedEventArgs"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::UI::Xaml::Input::ManipulationPivot>
{
	using Abi = ABI::Windows::UI::Xaml::Input::ManipulationPivot;
	using Default = Windows::UI::Xaml::Input::IManipulationPivot;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.ManipulationPivot"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IManipulationStartedRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.ManipulationStartedRoutedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IManipulationStartingRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.ManipulationStartingRoutedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Input::PointerRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::PointerRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IPointerRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.PointerRoutedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Xaml::Input::RightTappedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::RightTappedRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::IRightTappedRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.RightTappedRoutedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Input::TappedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Input::TappedRoutedEventArgs;
	using Default = Windows::UI::Xaml::Input::ITappedRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Input.TappedRoutedEventArgs"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::RoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::RoutedEventArgs;
	using Default = Windows::UI::Xaml::IRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.RoutedEventArgs"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Media::Media3D::Matrix3DHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Media3D::Matrix3DHelper;
	using Default = Windows::UI::Xaml::Media::Media3D::IMatrix3DHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Media3D.Matrix3DHelper"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::Popup>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::Popup;
	using Default = Windows::UI::Xaml::Controls::Primitives::IPopup;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.Popup"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::DependencyProperty>
{
	using Abi = ABI::Windows::UI::Xaml::DependencyProperty;
	using Default = Windows::UI::Xaml::IDependencyProperty;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DependencyProperty"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::Window>
{
	using Abi = ABI::Windows::UI::Xaml::Window;
	using Default = Windows::UI::Xaml::IWindow;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Window"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::UI::Xaml::Media::MatrixHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::MatrixHelper;
	using Default = Windows::UI::Xaml::Media::IMatrixHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.MatrixHelper"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::Media::Brush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Brush;
	using Default = Windows::UI::Xaml::Media::IBrush;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Brush"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Xaml::Media::CacheMode>
{
	using Abi = ABI::Windows::UI::Xaml::Media::CacheMode;
	using Default = Windows::UI::Xaml::Media::ICacheMode;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.CacheMode"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Media::BitmapCache>
{
	using Abi = ABI::Windows::UI::Xaml::Media::BitmapCache;
	using Default = Windows::UI::Xaml::Media::IBitmapCache;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.BitmapCache"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Media::DoubleCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::DoubleCollection;
	using Default = Windows::Foundation::Collections::IVector<double>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.DoubleCollection"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Media::FontFamily>
{
	using Abi = ABI::Windows::UI::Xaml::Media::FontFamily;
	using Default = Windows::UI::Xaml::Media::IFontFamily;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.FontFamily"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Media::GeneralTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::GeneralTransform;
	using Default = Windows::UI::Xaml::Media::IGeneralTransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.GeneralTransform"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Media::Geometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Geometry;
	using Default = Windows::UI::Xaml::Media::IGeometry;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Geometry"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Xaml::Media::EllipseGeometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::EllipseGeometry;
	using Default = Windows::UI::Xaml::Media::IEllipseGeometry;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.EllipseGeometry"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Media::GeometryCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::GeometryCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Geometry>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.GeometryCollection"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Media::GeometryGroup>
{
	using Abi = ABI::Windows::UI::Xaml::Media::GeometryGroup;
	using Default = Windows::UI::Xaml::Media::IGeometryGroup;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.GeometryGroup"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Media::GradientStopCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::GradientStopCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::GradientStop>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.GradientStopCollection"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Xaml::Media::GradientBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::GradientBrush;
	using Default = Windows::UI::Xaml::Media::IGradientBrush;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.GradientBrush"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Media::GradientStop>
{
	using Abi = ABI::Windows::UI::Xaml::Media::GradientStop;
	using Default = Windows::UI::Xaml::Media::IGradientStop;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.GradientStop"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::Media::ImageSource>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ImageSource;
	using Default = Windows::UI::Xaml::Media::IImageSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.ImageSource"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Media::LinearGradientBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::LinearGradientBrush;
	using Default = Windows::UI::Xaml::Media::ILinearGradientBrush;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.LinearGradientBrush"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Media::LineGeometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::LineGeometry;
	using Default = Windows::UI::Xaml::Media::ILineGeometry;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.LineGeometry"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::Media::PathSegmentCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PathSegmentCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::PathSegment>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PathSegmentCollection"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Media::PathFigure>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PathFigure;
	using Default = Windows::UI::Xaml::Media::IPathFigure;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PathFigure"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Media::PathFigureCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PathFigureCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::PathFigure>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PathFigureCollection"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Media::PathGeometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PathGeometry;
	using Default = Windows::UI::Xaml::Media::IPathGeometry;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PathGeometry"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::Media::PathSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PathSegment;
	using Default = Windows::UI::Xaml::Media::IPathSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PathSegment"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Media::ArcSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ArcSegment;
	using Default = Windows::UI::Xaml::Media::IArcSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.ArcSegment"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Media::BezierSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::BezierSegment;
	using Default = Windows::UI::Xaml::Media::IBezierSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.BezierSegment"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Media::LineSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::LineSegment;
	using Default = Windows::UI::Xaml::Media::ILineSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.LineSegment"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Media::PointCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PointCollection;
	using Default = Windows::Foundation::Collections::IVector<Modern::Windows::Foundation::Point>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PointCollection"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Media::PolyBezierSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PolyBezierSegment;
	using Default = Windows::UI::Xaml::Media::IPolyBezierSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PolyBezierSegment"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Media::PolyLineSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PolyLineSegment;
	using Default = Windows::UI::Xaml::Media::IPolyLineSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PolyLineSegment"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Media::PolyQuadraticBezierSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PolyQuadraticBezierSegment;
	using Default = Windows::UI::Xaml::Media::IPolyQuadraticBezierSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PolyQuadraticBezierSegment"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Media::Projection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Projection;
	using Default = Windows::UI::Xaml::Media::IProjection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Projection"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Media::Matrix3DProjection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Matrix3DProjection;
	using Default = Windows::UI::Xaml::Media::IMatrix3DProjection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Matrix3DProjection"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Media::PlaneProjection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::PlaneProjection;
	using Default = Windows::UI::Xaml::Media::IPlaneProjection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.PlaneProjection"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Media::QuadraticBezierSegment>
{
	using Abi = ABI::Windows::UI::Xaml::Media::QuadraticBezierSegment;
	using Default = Windows::UI::Xaml::Media::IQuadraticBezierSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.QuadraticBezierSegment"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Xaml::Media::RateChangedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Media::RateChangedRoutedEventArgs;
	using Default = Windows::UI::Xaml::Media::IRateChangedRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.RateChangedRoutedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Media::RectangleGeometry>
{
	using Abi = ABI::Windows::UI::Xaml::Media::RectangleGeometry;
	using Default = Windows::UI::Xaml::Media::IRectangleGeometry;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.RectangleGeometry"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Media::RenderingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Media::RenderingEventArgs;
	using Default = Windows::UI::Xaml::Media::IRenderingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.RenderingEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Media::SolidColorBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::SolidColorBrush;
	using Default = Windows::UI::Xaml::Media::ISolidColorBrush;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.SolidColorBrush"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Media::TileBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::TileBrush;
	using Default = Windows::UI::Xaml::Media::ITileBrush;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.TileBrush"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Media::ImageBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ImageBrush;
	using Default = Windows::UI::Xaml::Media::IImageBrush;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.ImageBrush"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Media::TimelineMarker>
{
	using Abi = ABI::Windows::UI::Xaml::Media::TimelineMarker;
	using Default = Windows::UI::Xaml::Media::ITimelineMarker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.TimelineMarker"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Media::TimelineMarkerCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::TimelineMarkerCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::TimelineMarker>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.TimelineMarkerCollection"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Media::TimelineMarkerRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Media::TimelineMarkerRoutedEventArgs;
	using Default = Windows::UI::Xaml::Media::ITimelineMarkerRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.TimelineMarkerRoutedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Media::Transform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Transform;
	using Default = Windows::UI::Xaml::Media::ITransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Transform"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Media::CompositeTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::CompositeTransform;
	using Default = Windows::UI::Xaml::Media::ICompositeTransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.CompositeTransform"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Media::MatrixTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::MatrixTransform;
	using Default = Windows::UI::Xaml::Media::IMatrixTransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.MatrixTransform"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Media::RotateTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::RotateTransform;
	using Default = Windows::UI::Xaml::Media::IRotateTransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.RotateTransform"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Media::ScaleTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::ScaleTransform;
	using Default = Windows::UI::Xaml::Media::IScaleTransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.ScaleTransform"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Media::SkewTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::SkewTransform;
	using Default = Windows::UI::Xaml::Media::ISkewTransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.SkewTransform"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Media::TransformCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::TransformCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Transform>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.TransformCollection"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Media::TransformGroup>
{
	using Abi = ABI::Windows::UI::Xaml::Media::TransformGroup;
	using Default = Windows::UI::Xaml::Media::ITransformGroup;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.TransformGroup"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Media::TranslateTransform>
{
	using Abi = ABI::Windows::UI::Xaml::Media::TranslateTransform;
	using Default = Windows::UI::Xaml::Media::ITranslateTransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.TranslateTransform"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Media::VisualTreeHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::VisualTreeHelper;
	using Default = Windows::UI::Xaml::Media::IVisualTreeHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.VisualTreeHelper"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Media::CompositionTarget>
{
	using Abi = ABI::Windows::UI::Xaml::Media::CompositionTarget;
	using Default = Windows::UI::Xaml::Media::ICompositionTarget;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.CompositionTarget"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::KeyTimeHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::KeyTimeHelper;
	using Default = Windows::UI::Xaml::Media::Animation::IKeyTimeHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.KeyTimeHelper"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::RepeatBehaviorHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::RepeatBehaviorHelper;
	using Default = Windows::UI::Xaml::Media::Animation::IRepeatBehaviorHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.RepeatBehaviorHelper"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::TransitionCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::TransitionCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.TransitionCollection"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::BeginStoryboard>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::BeginStoryboard;
	using Default = Windows::UI::Xaml::Media::Animation::IBeginStoryboard;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.BeginStoryboard"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ColorKeyFrameCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ColorKeyFrameCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::ColorKeyFrame>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ColorKeyFrameCollection"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ColorKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IColorKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ColorKeyFrame"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DiscreteColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DiscreteColorKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DiscreteColorKeyFrame"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DoubleKeyFrameCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DoubleKeyFrameCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::DoubleKeyFrame>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DoubleKeyFrameCollection"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DoubleKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DoubleKeyFrame"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DiscreteDoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DiscreteDoubleKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DiscreteDoubleKeyFrame"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::EasingColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::EasingColorKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IEasingColorKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.EasingColorKeyFrame"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::EasingDoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::EasingDoubleKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.EasingDoubleKeyFrame"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::EasingFunctionBase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::EasingFunctionBase;
	using Default = Windows::UI::Xaml::Media::Animation::IEasingFunctionBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.EasingFunctionBase"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::BackEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::BackEase;
	using Default = Windows::UI::Xaml::Media::Animation::IBackEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.BackEase"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::BounceEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::BounceEase;
	using Default = Windows::UI::Xaml::Media::Animation::IBounceEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.BounceEase"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::CircleEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::CircleEase;
	using Default = Windows::UI::Xaml::Media::Animation::ICircleEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.CircleEase"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::CubicEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::CubicEase;
	using Default = Windows::UI::Xaml::Media::Animation::ICubicEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.CubicEase"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ElasticEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ElasticEase;
	using Default = Windows::UI::Xaml::Media::Animation::IElasticEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ElasticEase"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ExponentialEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ExponentialEase;
	using Default = Windows::UI::Xaml::Media::Animation::IExponentialEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ExponentialEase"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::KeySpline>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::KeySpline;
	using Default = Windows::UI::Xaml::Media::Animation::IKeySpline;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.KeySpline"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::LinearColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::LinearColorKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::ILinearColorKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.LinearColorKeyFrame"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::LinearDoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::LinearDoubleKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.LinearDoubleKeyFrame"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo;
	using Default = Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.NavigationTransitionInfo"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ObjectKeyFrameCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ObjectKeyFrameCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::ObjectKeyFrame>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ObjectKeyFrameCollection"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ObjectKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ObjectKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IObjectKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ObjectKeyFrame"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DiscreteObjectKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DiscreteObjectKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DiscreteObjectKeyFrame"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PointKeyFrameCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PointKeyFrameCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::PointKeyFrame>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PointKeyFrameCollection"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PointKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IPointKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PointKeyFrame"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DiscretePointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DiscretePointKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IDiscretePointKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DiscretePointKeyFrame"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::EasingPointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::EasingPointKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::IEasingPointKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.EasingPointKeyFrame"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::LinearPointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::LinearPointKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::ILinearPointKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.LinearPointKeyFrame"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PowerEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PowerEase;
	using Default = Windows::UI::Xaml::Media::Animation::IPowerEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PowerEase"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::QuadraticEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::QuadraticEase;
	using Default = Windows::UI::Xaml::Media::Animation::IQuadraticEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.QuadraticEase"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::QuarticEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::QuarticEase;
	using Default = Windows::UI::Xaml::Media::Animation::IQuarticEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.QuarticEase"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::QuinticEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::QuinticEase;
	using Default = Windows::UI::Xaml::Media::Animation::IQuinticEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.QuinticEase"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::SineEase>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::SineEase;
	using Default = Windows::UI::Xaml::Media::Animation::ISineEase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.SineEase"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::SplineColorKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::SplineColorKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::ISplineColorKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.SplineColorKeyFrame"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::SplineDoubleKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::SplineDoubleKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.SplineDoubleKeyFrame"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::SplinePointKeyFrame>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::SplinePointKeyFrame;
	using Default = Windows::UI::Xaml::Media::Animation::ISplinePointKeyFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.SplinePointKeyFrame"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::TimelineCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::TimelineCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Timeline>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.TimelineCollection"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::Timeline>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::Timeline;
	using Default = Windows::UI::Xaml::Media::Animation::ITimeline;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.Timeline"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::Storyboard>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::Storyboard;
	using Default = Windows::UI::Xaml::Media::Animation::IStoryboard;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.Storyboard"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ColorAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ColorAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IColorAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ColorAnimation"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ColorAnimationUsingKeyFrames>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ColorAnimationUsingKeyFrames;
	using Default = Windows::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ColorAnimationUsingKeyFrames"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DoubleAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DoubleAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IDoubleAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DoubleAnimation"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DoubleAnimationUsingKeyFrames>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DoubleAnimationUsingKeyFrames;
	using Default = Windows::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DoubleAnimationUsingKeyFrames"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DragItemThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DragItemThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IDragItemThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DragItemThemeAnimation"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DragOverThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DragOverThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IDragOverThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DragOverThemeAnimation"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::DropTargetItemThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::DropTargetItemThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.DropTargetItemThemeAnimation"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::FadeInThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::FadeInThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IFadeInThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.FadeInThemeAnimation"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::FadeOutThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::FadeOutThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IFadeOutThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.FadeOutThemeAnimation"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ObjectAnimationUsingKeyFrames>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ObjectAnimationUsingKeyFrames;
	using Default = Windows::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ObjectAnimationUsingKeyFrames"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PointAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PointAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IPointAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PointAnimation"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PointAnimationUsingKeyFrames>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PointAnimationUsingKeyFrames;
	using Default = Windows::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PointAnimationUsingKeyFrames"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PointerDownThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PointerDownThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IPointerDownThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PointerDownThemeAnimation"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PointerUpThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PointerUpThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IPointerUpThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PointerUpThemeAnimation"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PopInThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PopInThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IPopInThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PopInThemeAnimation"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PopOutThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PopOutThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IPopOutThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PopOutThemeAnimation"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::RepositionThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::RepositionThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::IRepositionThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.RepositionThemeAnimation"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::SplitCloseThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::SplitCloseThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.SplitCloseThemeAnimation"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::SplitOpenThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::SplitOpenThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.SplitOpenThemeAnimation"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::SwipeBackThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::SwipeBackThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.SwipeBackThemeAnimation"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::SwipeHintThemeAnimation>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::SwipeHintThemeAnimation;
	using Default = Windows::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.SwipeHintThemeAnimation"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::Transition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::Transition;
	using Default = Windows::UI::Xaml::Media::Animation::ITransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.Transition"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::AddDeleteThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::AddDeleteThemeTransition;
	using Default = Windows::UI::Xaml::Media::Animation::IAddDeleteThemeTransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.AddDeleteThemeTransition"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ContentThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ContentThemeTransition;
	using Default = Windows::UI::Xaml::Media::Animation::IContentThemeTransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ContentThemeTransition"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::EdgeUIThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::EdgeUIThemeTransition;
	using Default = Windows::UI::Xaml::Media::Animation::IEdgeUIThemeTransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.EdgeUIThemeTransition"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::EntranceThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::EntranceThemeTransition;
	using Default = Windows::UI::Xaml::Media::Animation::IEntranceThemeTransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.EntranceThemeTransition"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PaneThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PaneThemeTransition;
	using Default = Windows::UI::Xaml::Media::Animation::IPaneThemeTransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PaneThemeTransition"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::PopupThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::PopupThemeTransition;
	using Default = Windows::UI::Xaml::Media::Animation::IPopupThemeTransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.PopupThemeTransition"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::ReorderThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::ReorderThemeTransition;
	using Default = Windows::UI::Xaml::Media::Animation::IReorderThemeTransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.ReorderThemeTransition"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Media::Animation::RepositionThemeTransition>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Animation::RepositionThemeTransition;
	using Default = Windows::UI::Xaml::Media::Animation::IRepositionThemeTransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Animation.RepositionThemeTransition"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::TriggerAction>
{
	using Abi = ABI::Windows::UI::Xaml::TriggerAction;
	using Default = Windows::UI::Xaml::ITriggerAction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.TriggerAction"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Control>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Control;
	using Default = Windows::UI::Xaml::Controls::IControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Control"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::FrameworkElement>
{
	using Abi = ABI::Windows::UI::Xaml::FrameworkElement;
	using Default = Windows::UI::Xaml::IFrameworkElement;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.FrameworkElement"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ItemsChangedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::FlyoutBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::FlyoutBase;
	using Default = Windows::UI::Xaml::Controls::Primitives::IFlyoutBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.FlyoutBase"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings;
	using Default = Windows::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ComboBoxTemplateSettings"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings;
	using Default = Windows::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.GridViewItemTemplateSettings"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings;
	using Default = Windows::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ListViewItemTemplateSettings"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ProgressBarTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ProgressBarTemplateSettings;
	using Default = Windows::UI::Xaml::Controls::Primitives::IProgressBarTemplateSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ProgressBarTemplateSettings"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ProgressRingTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ProgressRingTemplateSettings;
	using Default = Windows::UI::Xaml::Controls::Primitives::IProgressRingTemplateSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ProgressRingTemplateSettings"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::SettingsFlyoutTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::SettingsFlyoutTemplateSettings;
	using Default = Windows::UI::Xaml::Controls::Primitives::ISettingsFlyoutTemplateSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.SettingsFlyoutTemplateSettings"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings;
	using Default = Windows::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ToggleSwitchTemplateSettings"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings;
	using Default = Windows::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ToolTipTemplateSettings"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::GeneratorPositionHelper>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::GeneratorPositionHelper;
	using Default = Windows::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.GeneratorPositionHelper"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::DragCompletedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::DragCompletedEventArgs;
	using Default = Windows::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.DragCompletedEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::DragDeltaEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::DragDeltaEventArgs;
	using Default = Windows::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.DragDeltaEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::DragStartedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::DragStartedEventArgs;
	using Default = Windows::UI::Xaml::Controls::Primitives::IDragStartedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.DragStartedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::RangeBaseValueChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ScrollEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ScrollEventArgs;
	using Default = Windows::UI::Xaml::Controls::Primitives::IScrollEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ScrollEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::CarouselPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::CarouselPanel;
	using Default = Windows::UI::Xaml::Controls::Primitives::ICarouselPanel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.CarouselPanel"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::OrientedVirtualizingPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::OrientedVirtualizingPanel;
	using Default = Windows::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.OrientedVirtualizingPanel"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::TickBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::TickBar;
	using Default = Windows::UI::Xaml::Controls::Primitives::ITickBar;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.TickBar"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::GridViewItemPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::GridViewItemPresenter;
	using Default = Windows::UI::Xaml::Controls::Primitives::IGridViewItemPresenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.GridViewItemPresenter"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ListViewItemPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ListViewItemPresenter;
	using Default = Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ListViewItemPresenter"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::SelectorItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::SelectorItem;
	using Default = Windows::UI::Xaml::Controls::Primitives::ISelectorItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.SelectorItem"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ButtonBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ButtonBase;
	using Default = Windows::UI::Xaml::Controls::Primitives::IButtonBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ButtonBase"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::RangeBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::RangeBase;
	using Default = Windows::UI::Xaml::Controls::Primitives::IRangeBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.RangeBase"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::RepeatButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::RepeatButton;
	using Default = Windows::UI::Xaml::Controls::Primitives::IRepeatButton;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.RepeatButton"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ScrollBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ScrollBar;
	using Default = Windows::UI::Xaml::Controls::Primitives::IScrollBar;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ScrollBar"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::Selector>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::Selector;
	using Default = Windows::UI::Xaml::Controls::Primitives::ISelector;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.Selector"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::Thumb>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::Thumb;
	using Default = Windows::UI::Xaml::Controls::Primitives::IThumb;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.Thumb"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::ToggleButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::ToggleButton;
	using Default = Windows::UI::Xaml::Controls::Primitives::IToggleButton;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.ToggleButton"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Primitives::LayoutInformation>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Primitives::LayoutInformation;
	using Default = Windows::UI::Xaml::Controls::Primitives::ILayoutInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Primitives.LayoutInformation"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Xaml::Controls::VirtualizingPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::VirtualizingPanel;
	using Default = Windows::UI::Xaml::Controls::IVirtualizingPanel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.VirtualizingPanel"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ContentPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ContentPresenter;
	using Default = Windows::UI::Xaml::Controls::IContentPresenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ContentPresenter"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ContentControl>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ContentControl;
	using Default = Windows::UI::Xaml::Controls::IContentControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ContentControl"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ItemsControl>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ItemsControl;
	using Default = Windows::UI::Xaml::Controls::IItemsControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ItemsControl"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs;
	using Default = Windows::UI::Xaml::Interop::INotifyCollectionChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::PropertyPath>
{
	using Abi = ABI::Windows::UI::Xaml::PropertyPath;
	using Default = Windows::UI::Xaml::IPropertyPath;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.PropertyPath"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Xaml::Data::CurrentChangingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Data::CurrentChangingEventArgs;
	using Default = Windows::UI::Xaml::Data::ICurrentChangingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Data.CurrentChangingEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Data::PropertyChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Data::PropertyChangedEventArgs;
	using Default = Windows::UI::Xaml::Data::IPropertyChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Data.PropertyChangedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Data::BindingBase>
{
	using Abi = ABI::Windows::UI::Xaml::Data::BindingBase;
	using Default = Windows::UI::Xaml::Data::IBindingBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Data.BindingBase"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Data::Binding>
{
	using Abi = ABI::Windows::UI::Xaml::Data::Binding;
	using Default = Windows::UI::Xaml::Data::IBinding;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Data.Binding"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Xaml::Data::BindingExpressionBase>
{
	using Abi = ABI::Windows::UI::Xaml::Data::BindingExpressionBase;
	using Default = Windows::UI::Xaml::Data::IBindingExpressionBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Data.BindingExpressionBase"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Data::BindingExpression>
{
	using Abi = ABI::Windows::UI::Xaml::Data::BindingExpression;
	using Default = Windows::UI::Xaml::Data::IBindingExpression;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Data.BindingExpression"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Data::CollectionViewSource>
{
	using Abi = ABI::Windows::UI::Xaml::Data::CollectionViewSource;
	using Default = Windows::UI::Xaml::Data::ICollectionViewSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Data.CollectionViewSource"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Data::RelativeSource>
{
	using Abi = ABI::Windows::UI::Xaml::Data::RelativeSource;
	using Default = Windows::UI::Xaml::Data::IRelativeSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Data.RelativeSource"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Data::BindingOperations>
{
	using Abi = ABI::Windows::UI::Xaml::Data::BindingOperations;
	using Default = Windows::UI::Xaml::Data::IBindingOperations;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Data.BindingOperations"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Documents::BlockCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::BlockCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::Block>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.BlockCollection"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Documents::InlineCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::InlineCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::Inline>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.InlineCollection"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Documents::TextPointer>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::TextPointer;
	using Default = Windows::UI::Xaml::Documents::ITextPointer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.TextPointer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Typography>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Typography;
	using Default = Windows::UI::Xaml::Documents::ITypography;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Typography"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Documents::TextElement>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::TextElement;
	using Default = Windows::UI::Xaml::Documents::ITextElement;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.TextElement"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Block>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Block;
	using Default = Windows::UI::Xaml::Documents::IBlock;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Block"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Inline>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Inline;
	using Default = Windows::UI::Xaml::Documents::IInline;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Inline"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Documents::InlineUIContainer>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::InlineUIContainer;
	using Default = Windows::UI::Xaml::Documents::IInlineUIContainer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.InlineUIContainer"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Documents::LineBreak>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::LineBreak;
	using Default = Windows::UI::Xaml::Documents::ILineBreak;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.LineBreak"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Paragraph>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Paragraph;
	using Default = Windows::UI::Xaml::Documents::IParagraph;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Paragraph"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Run>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Run;
	using Default = Windows::UI::Xaml::Documents::IRun;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Run"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Span>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Span;
	using Default = Windows::UI::Xaml::Documents::ISpan;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Span"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Bold>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Bold;
	using Default = Windows::UI::Xaml::Documents::IBold;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Bold"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Italic>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Italic;
	using Default = Windows::UI::Xaml::Documents::IItalic;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Italic"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Underline>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Underline;
	using Default = Windows::UI::Xaml::Documents::IUnderline;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Underline"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Hyperlink>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Hyperlink;
	using Default = Windows::UI::Xaml::Documents::IHyperlink;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Hyperlink"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Documents::HyperlinkClickEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::HyperlinkClickEventArgs;
	using Default = Windows::UI::Xaml::Documents::IHyperlinkClickEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.HyperlinkClickEventArgs"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Xaml::Documents::Glyphs>
{
	using Abi = ABI::Windows::UI::Xaml::Documents::Glyphs;
	using Default = Windows::UI::Xaml::Documents::IGlyphs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Documents.Glyphs"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::NavigationEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::NavigationEventArgs;
	using Default = Windows::UI::Xaml::Navigation::INavigationEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Navigation.NavigationEventArgs"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs;
	using Default = Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Navigation.NavigatingCancelEventArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::NavigationFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::NavigationFailedEventArgs;
	using Default = Windows::UI::Xaml::Navigation::INavigationFailedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Navigation.NavigationFailedEventArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Navigation::PageStackEntry>
{
	using Abi = ABI::Windows::UI::Xaml::Navigation::PageStackEntry;
	using Default = Windows::UI::Xaml::Navigation::IPageStackEntry;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Navigation.PageStackEntry"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Web::Http::HttpCookieManager>
{
	using Abi = ABI::Windows::Web::Http::HttpCookieManager;
	using Default = Windows::Web::Http::IHttpCookieManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpCookieManager"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Web::Http::HttpRequestMessage>
{
	using Abi = ABI::Windows::Web::Http::HttpRequestMessage;
	using Default = Windows::Web::Http::IHttpRequestMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpRequestMessage"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Web::Http::HttpResponseMessage>
{
	using Abi = ABI::Windows::Web::Http::HttpResponseMessage;
	using Default = Windows::Web::Http::IHttpResponseMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpResponseMessage"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Web::Http::Filters::HttpCacheControl>
{
	using Abi = ABI::Windows::Web::Http::Filters::HttpCacheControl;
	using Default = Windows::Web::Http::Filters::IHttpCacheControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Filters.HttpCacheControl"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Web::Http::Filters::HttpBaseProtocolFilter>
{
	using Abi = ABI::Windows::Web::Http::Filters::HttpBaseProtocolFilter;
	using Default = Windows::Web::Http::Filters::IHttpBaseProtocolFilter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Filters.HttpBaseProtocolFilter"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Web::Http::HttpMethod>
{
	using Abi = ABI::Windows::Web::Http::HttpMethod;
	using Default = Windows::Web::Http::IHttpMethod;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpMethod"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentHeaderCollection;
	using Default = Windows::Web::Http::Headers::IHttpContentHeaderCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentHeaderCollection"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpRequestHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpRequestHeaderCollection;
	using Default = Windows::Web::Http::Headers::IHttpRequestHeaderCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpRequestHeaderCollection"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpResponseHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpResponseHeaderCollection;
	using Default = Windows::Web::Http::Headers::IHttpResponseHeaderCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpResponseHeaderCollection"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentDispositionHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentDispositionHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentDispositionHeaderValue"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentRangeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentRangeHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpContentRangeHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentRangeHeaderValue"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpMediaTypeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpMediaTypeHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpMediaTypeHeaderValue"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpCredentialsHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpCredentialsHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpCredentialsHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpCredentialsHeaderValue"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpMethodHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpMethodHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpMethodHeaderValueCollection"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpNameValueHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpNameValueHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpNameValueHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpNameValueHeaderValue"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpChallengeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpChallengeHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpChallengeHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpChallengeHeaderValue"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentCodingHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentCodingHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpContentCodingHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingHeaderValue"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpCookiePairHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpCookiePairHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpCookiePairHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpCookiePairHeaderValue"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpExpectationHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpExpectationHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpExpectationHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpExpectationHeaderValue"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpProductHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpProductHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpProductHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpProductHeaderValue"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpProductInfoHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpProductInfoHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpProductInfoHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpProductInfoHeaderValue"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpTransferCodingHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpTransferCodingHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpTransferCodingHeaderValue"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Web::Http::HttpClient>
{
	using Abi = ABI::Windows::Web::Http::HttpClient;
	using Default = Windows::Web::Http::IHttpClient;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpClient"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Web::Http::HttpCookie>
{
	using Abi = ABI::Windows::Web::Http::HttpCookie;
	using Default = Windows::Web::Http::IHttpCookie;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpCookie"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Web::Http::HttpCookieCollection>
{
	using Abi = ABI::Windows::Web::Http::HttpCookieCollection;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpCookieCollection"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Web::Http::HttpTransportInformation>
{
	using Abi = ABI::Windows::Web::Http::HttpTransportInformation;
	using Default = Windows::Web::Http::IHttpTransportInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpTransportInformation"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Web::Http::HttpStringContent>
{
	using Abi = ABI::Windows::Web::Http::HttpStringContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpStringContent"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Web::Http::HttpBufferContent>
{
	using Abi = ABI::Windows::Web::Http::HttpBufferContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpBufferContent"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Web::Http::HttpStreamContent>
{
	using Abi = ABI::Windows::Web::Http::HttpStreamContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpStreamContent"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Web::Http::HttpFormUrlEncodedContent>
{
	using Abi = ABI::Windows::Web::Http::HttpFormUrlEncodedContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpFormUrlEncodedContent"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Web::Http::HttpMultipartContent>
{
	using Abi = ABI::Windows::Web::Http::HttpMultipartContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpMultipartContent"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Web::Http::HttpMultipartFormDataContent>
{
	using Abi = ABI::Windows::Web::Http::HttpMultipartFormDataContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpMultipartFormDataContent"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::DataTemplate>
{
	using Abi = ABI::Windows::UI::Xaml::DataTemplate;
	using Default = Windows::UI::Xaml::IDataTemplate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DataTemplate"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Xaml::DragEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::DragEventArgs;
	using Default = Windows::UI::Xaml::IDragEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DragEventArgs"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Xaml::Style>
{
	using Abi = ABI::Windows::UI::Xaml::Style;
	using Default = Windows::UI::Xaml::IStyle;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Style"; }
	static constexpr unsigned NameLength = 21;
};

template <> struct Traits<Windows::UI::Xaml::Controls::BackClickEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::BackClickEventArgs;
	using Default = Windows::UI::Xaml::Controls::IBackClickEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.BackClickEventArgs"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Controls::DragItemsStartingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::DragItemsStartingEventArgs;
	using Default = Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.DragItemsStartingEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Controls::NotifyEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::NotifyEventArgs;
	using Default = Windows::UI::Xaml::Controls::INotifyEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.NotifyEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SemanticZoomViewChangedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Controls::TextControlPasteEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::TextControlPasteEventArgs;
	using Default = Windows::UI::Xaml::Controls::ITextControlPasteEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.TextControlPasteEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ColumnDefinitionCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ColumnDefinitionCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::ColumnDefinition>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ColumnDefinitionCollection"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs;
	using Default = Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Controls::DataTemplateSelector>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::DataTemplateSelector;
	using Default = Windows::UI::Xaml::Controls::IDataTemplateSelector;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.DataTemplateSelector"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.DatePickerValueChangedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Controls::RowDefinitionCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::RowDefinitionCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::RowDefinition>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.RowDefinitionCollection"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Controls::StyleSelector>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::StyleSelector;
	using Default = Windows::UI::Xaml::Controls::IStyleSelector;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.StyleSelector"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Controls::GroupStyle>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::GroupStyle;
	using Default = Windows::UI::Xaml::Controls::IGroupStyle;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.GroupStyle"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Controls::GroupStyleSelector>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::GroupStyleSelector;
	using Default = Windows::UI::Xaml::Controls::IGroupStyleSelector;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.GroupStyleSelector"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SemanticZoomLocation>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SemanticZoomLocation;
	using Default = Windows::UI::Xaml::Controls::ISemanticZoomLocation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SemanticZoomLocation"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ItemCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ItemCollection;
	using Default = Windows::Foundation::Collections::IObservableVector<IInspectable>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ItemCollection"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ItemContainerGenerator>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ItemContainerGenerator;
	using Default = Windows::UI::Xaml::Controls::IItemContainerGenerator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ItemContainerGenerator"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Xaml::Controls::UIElementCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::UIElementCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.UIElementCollection"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ScrollViewerViewChangedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs;
	using Default = Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ScrollViewerViewChangingEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ScrollViewerView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ScrollViewerView;
	using Default = Windows::UI::Xaml::Controls::IScrollViewerView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ScrollViewerView"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ToolTipService>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ToolTipService;
	using Default = Windows::UI::Xaml::Controls::IToolTipService;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ToolTipService"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs;
	using Default = Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.HubSectionHeaderClickEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SectionsInViewChangedEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs;
	using Default = Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WebViewNavigationFailedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Controls::HubSectionCollection>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::HubSectionCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.HubSectionCollection"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SearchBoxQueryChangedEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs;
	using Default = Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SearchBoxSuggestionsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs;
	using Default = Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SearchBoxQuerySubmittedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs;
	using Default = Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SearchBoxResultSuggestionChosenEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.TimePickerValueChangedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs;
	using Default = Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WebViewNavigationStartingEventArgs"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs;
	using Default = Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WebViewContentLoadingEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs;
	using Default = Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WebViewDOMContentLoadedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs;
	using Default = Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WebViewNavigationCompletedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs;
	using Default = Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WebViewLongRunningScriptDetectedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs;
	using Default = Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WebViewUnviewableContentIdentifiedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ColumnDefinition>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ColumnDefinition;
	using Default = Windows::UI::Xaml::Controls::IColumnDefinition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ColumnDefinition"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Controls::RowDefinition>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::RowDefinition;
	using Default = Windows::UI::Xaml::Controls::IRowDefinition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.RowDefinition"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Flyout>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Flyout;
	using Default = Windows::UI::Xaml::Controls::IFlyout;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Flyout"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Controls::MenuFlyout>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::MenuFlyout;
	using Default = Windows::UI::Xaml::Controls::IMenuFlyout;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.MenuFlyout"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs;
	using Default = Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.CleanUpVirtualizedItemEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ContextMenuEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ContextMenuEventArgs;
	using Default = Windows::UI::Xaml::Controls::IContextMenuEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ContextMenuEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ItemClickEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ItemClickEventArgs;
	using Default = Windows::UI::Xaml::Controls::IItemClickEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ItemClickEventArgs"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SelectionChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SelectionChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::ISelectionChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SelectionChangedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Xaml::Controls::TextChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::TextChangedEventArgs;
	using Default = Windows::UI::Xaml::Controls::ITextChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.TextChangedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ItemsPanelTemplate>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ItemsPanelTemplate;
	using Default = Windows::UI::Xaml::Controls::IItemsPanelTemplate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ItemsPanelTemplate"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Border>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Border;
	using Default = Windows::UI::Xaml::Controls::IBorder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Border"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Controls::CaptureElement>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::CaptureElement;
	using Default = Windows::UI::Xaml::Controls::ICaptureElement;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.CaptureElement"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Image>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Image;
	using Default = Windows::UI::Xaml::Controls::IImage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Image"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Panel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Panel;
	using Default = Windows::UI::Xaml::Controls::IPanel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Panel"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Canvas>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Canvas;
	using Default = Windows::UI::Xaml::Controls::ICanvas;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Canvas"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Grid>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Grid;
	using Default = Windows::UI::Xaml::Controls::IGrid;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Grid"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ItemsPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ItemsPresenter;
	using Default = Windows::UI::Xaml::Controls::IItemsPresenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ItemsPresenter"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Controls::MediaElement>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::MediaElement;
	using Default = Windows::UI::Xaml::Controls::IMediaElement;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.MediaElement"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::RichTextBlockOverflow>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::RichTextBlockOverflow;
	using Default = Windows::UI::Xaml::Controls::IRichTextBlockOverflow;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.RichTextBlockOverflow"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Controls::RichTextBlock>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::RichTextBlock;
	using Default = Windows::UI::Xaml::Controls::IRichTextBlock;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.RichTextBlock"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ScrollContentPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ScrollContentPresenter;
	using Default = Windows::UI::Xaml::Controls::IScrollContentPresenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ScrollContentPresenter"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Xaml::Controls::StackPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::StackPanel;
	using Default = Windows::UI::Xaml::Controls::IStackPanel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.StackPanel"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Controls::TextBlock>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::TextBlock;
	using Default = Windows::UI::Xaml::Controls::ITextBlock;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.TextBlock"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::Controls::VariableSizedWrapGrid>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::VariableSizedWrapGrid;
	using Default = Windows::UI::Xaml::Controls::IVariableSizedWrapGrid;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.VariableSizedWrapGrid"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Viewbox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Viewbox;
	using Default = Windows::UI::Xaml::Controls::IViewbox;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Viewbox"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Controls::VirtualizingStackPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::VirtualizingStackPanel;
	using Default = Windows::UI::Xaml::Controls::IVirtualizingStackPanel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.VirtualizingStackPanel"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Xaml::Controls::IconElement>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::IconElement;
	using Default = Windows::UI::Xaml::Controls::IIconElement;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.IconElement"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Controls::BitmapIcon>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::BitmapIcon;
	using Default = Windows::UI::Xaml::Controls::IBitmapIcon;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.BitmapIcon"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Controls::FontIcon>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::FontIcon;
	using Default = Windows::UI::Xaml::Controls::IFontIcon;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.FontIcon"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ItemsStackPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ItemsStackPanel;
	using Default = Windows::UI::Xaml::Controls::IItemsStackPanel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ItemsStackPanel"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ItemsWrapGrid>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ItemsWrapGrid;
	using Default = Windows::UI::Xaml::Controls::IItemsWrapGrid;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ItemsWrapGrid"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Controls::PathIcon>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::PathIcon;
	using Default = Windows::UI::Xaml::Controls::IPathIcon;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.PathIcon"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SwapChainBackgroundPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SwapChainBackgroundPanel;
	using Default = Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SwapChainBackgroundPanel"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SwapChainPanel>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SwapChainPanel;
	using Default = Windows::UI::Xaml::Controls::ISwapChainPanel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SwapChainPanel"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SymbolIcon>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SymbolIcon;
	using Default = Windows::UI::Xaml::Controls::ISymbolIcon;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SymbolIcon"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WebView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WebView;
	using Default = Windows::UI::Xaml::Controls::IWebView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WebView"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WrapGrid>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WrapGrid;
	using Default = Windows::UI::Xaml::Controls::IWrapGrid;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WrapGrid"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Controls::WebViewBrush>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::WebViewBrush;
	using Default = Windows::UI::Xaml::Controls::IWebViewBrush;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.WebViewBrush"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ComboBoxItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ComboBoxItem;
	using Default = Windows::UI::Xaml::Controls::IComboBoxItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ComboBoxItem"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::DatePicker>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::DatePicker;
	using Default = Windows::UI::Xaml::Controls::IDatePicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.DatePicker"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Controls::FlipViewItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::FlipViewItem;
	using Default = Windows::UI::Xaml::Controls::IFlipViewItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.FlipViewItem"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::GridViewItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::GridViewItem;
	using Default = Windows::UI::Xaml::Controls::IGridViewItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.GridViewItem"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::GroupItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::GroupItem;
	using Default = Windows::UI::Xaml::Controls::IGroupItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.GroupItem"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SemanticZoom>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SemanticZoom;
	using Default = Windows::UI::Xaml::Controls::ISemanticZoom;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SemanticZoom"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ListBoxItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ListBoxItem;
	using Default = Windows::UI::Xaml::Controls::IListBoxItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ListBoxItem"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ListViewItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ListViewItem;
	using Default = Windows::UI::Xaml::Controls::IListViewItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ListViewItem"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::PasswordBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::PasswordBox;
	using Default = Windows::UI::Xaml::Controls::IPasswordBox;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.PasswordBox"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ProgressRing>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ProgressRing;
	using Default = Windows::UI::Xaml::Controls::IProgressRing;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ProgressRing"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::RichEditBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::RichEditBox;
	using Default = Windows::UI::Xaml::Controls::IRichEditBox;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.RichEditBox"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ScrollViewer>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ScrollViewer;
	using Default = Windows::UI::Xaml::Controls::IScrollViewer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ScrollViewer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SettingsFlyout>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SettingsFlyout;
	using Default = Windows::UI::Xaml::Controls::ISettingsFlyout;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SettingsFlyout"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Controls::TextBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::TextBox;
	using Default = Windows::UI::Xaml::Controls::ITextBox;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.TextBox"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ToggleSwitch>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ToggleSwitch;
	using Default = Windows::UI::Xaml::Controls::IToggleSwitch;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ToggleSwitch"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ToolTip>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ToolTip;
	using Default = Windows::UI::Xaml::Controls::IToolTip;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ToolTip"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Controls::UserControl>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::UserControl;
	using Default = Windows::UI::Xaml::Controls::IUserControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.UserControl"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Button>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Button;
	using Default = Windows::UI::Xaml::Controls::IButton;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Button"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Controls::HyperlinkButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::HyperlinkButton;
	using Default = Windows::UI::Xaml::Controls::IHyperlinkButton;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.HyperlinkButton"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ProgressBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ProgressBar;
	using Default = Windows::UI::Xaml::Controls::IProgressBar;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ProgressBar"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Slider>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Slider;
	using Default = Windows::UI::Xaml::Controls::ISlider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Slider"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ComboBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ComboBox;
	using Default = Windows::UI::Xaml::Controls::IComboBox;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ComboBox"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ListViewBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ListViewBase;
	using Default = Windows::UI::Xaml::Controls::IListViewBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ListViewBase"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::FlipView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::FlipView;
	using Default = Windows::UI::Xaml::Controls::IFlipView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.FlipView"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Controls::GridView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::GridView;
	using Default = Windows::UI::Xaml::Controls::IGridView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.GridView"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ListBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ListBox;
	using Default = Windows::UI::Xaml::Controls::IListBox;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ListBox"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ListView>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ListView;
	using Default = Windows::UI::Xaml::Controls::IListView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ListView"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Controls::CheckBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::CheckBox;
	using Default = Windows::UI::Xaml::Controls::ICheckBox;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.CheckBox"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Controls::RadioButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::RadioButton;
	using Default = Windows::UI::Xaml::Controls::IRadioButton;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.RadioButton"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::Controls::AppBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::AppBar;
	using Default = Windows::UI::Xaml::Controls::IAppBar;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.AppBar"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Controls::AppBarButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::AppBarButton;
	using Default = Windows::UI::Xaml::Controls::IAppBarButton;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.AppBarButton"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Xaml::Controls::AppBarSeparator>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::AppBarSeparator;
	using Default = Windows::UI::Xaml::Controls::IAppBarSeparator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.AppBarSeparator"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Controls::AppBarToggleButton>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::AppBarToggleButton;
	using Default = Windows::UI::Xaml::Controls::IAppBarToggleButton;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.AppBarToggleButton"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Controls::CommandBar>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::CommandBar;
	using Default = Windows::UI::Xaml::Controls::ICommandBar;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.CommandBar"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Controls::FlyoutPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::FlyoutPresenter;
	using Default = Windows::UI::Xaml::Controls::IFlyoutPresenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.FlyoutPresenter"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Frame>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Frame;
	using Default = Windows::UI::Xaml::Controls::IFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Frame"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Xaml::Controls::HubSection>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::HubSection;
	using Default = Windows::UI::Xaml::Controls::IHubSection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.HubSection"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Hub>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Hub;
	using Default = Windows::UI::Xaml::Controls::IHub;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Hub"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ListViewBaseHeaderItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ListViewBaseHeaderItem;
	using Default = Windows::UI::Xaml::Controls::IListViewBaseHeaderItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ListViewBaseHeaderItem"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Xaml::Controls::GridViewHeaderItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::GridViewHeaderItem;
	using Default = Windows::UI::Xaml::Controls::IGridViewHeaderItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.GridViewHeaderItem"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ListViewHeaderItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ListViewHeaderItem;
	using Default = Windows::UI::Xaml::Controls::IListViewHeaderItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ListViewHeaderItem"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::MenuFlyoutItemBase;
	using Default = Windows::UI::Xaml::Controls::IMenuFlyoutItemBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.MenuFlyoutItemBase"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::Controls::MenuFlyoutItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::MenuFlyoutItem;
	using Default = Windows::UI::Xaml::Controls::IMenuFlyoutItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.MenuFlyoutItem"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Controls::MenuFlyoutPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::MenuFlyoutPresenter;
	using Default = Windows::UI::Xaml::Controls::IMenuFlyoutPresenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.MenuFlyoutPresenter"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Xaml::Controls::MenuFlyoutSeparator>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::MenuFlyoutSeparator;
	using Default = Windows::UI::Xaml::Controls::IMenuFlyoutSeparator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.MenuFlyoutSeparator"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Xaml::Controls::Page>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::Page;
	using Default = Windows::UI::Xaml::Controls::IPage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.Page"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Xaml::Controls::SearchBox>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::SearchBox;
	using Default = Windows::UI::Xaml::Controls::ISearchBox;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.SearchBox"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::Controls::TimePicker>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::TimePicker;
	using Default = Windows::UI::Xaml::Controls::ITimePicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.TimePicker"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem;
	using Default = Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ToggleMenuFlyoutItem"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Controls::ControlTemplate>
{
	using Abi = ABI::Windows::UI::Xaml::Controls::ControlTemplate;
	using Default = Windows::UI::Xaml::Controls::IControlTemplate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Controls.ControlTemplate"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::FrameworkTemplate>
{
	using Abi = ABI::Windows::UI::Xaml::FrameworkTemplate;
	using Default = Windows::UI::Xaml::IFrameworkTemplate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.FrameworkTemplate"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::AutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::AutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.AutomationPeer"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.FrameworkElementAutomationPeer"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ButtonBaseAutomationPeer"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::CaptureElementAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::CaptureElementAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.CaptureElementAutomationPeer"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ComboBoxItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ComboBoxItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ComboBoxItemAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::FlipViewItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::FlipViewItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.FlipViewItemAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::GridViewItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::GridViewItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.GridViewItemAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::GroupItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::GroupItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.GroupItemAutomationPeer"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ImageAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ImageAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IImageAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ImageAutomationPeer"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ListBoxItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ListBoxItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ListBoxItemAutomationPeer"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ListViewItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ListViewItemAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::MediaElementAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::MediaElementAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.MediaElementAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::PasswordBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::PasswordBoxAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.PasswordBoxAutomationPeer"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ProgressRingAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ProgressRingAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ProgressRingAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::RichEditBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::RichEditBoxAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.RichEditBoxAutomationPeer"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::RichTextBlockAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::RichTextBlockAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.RichTextBlockAutomationPeer"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::RichTextBlockOverflowAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::RichTextBlockOverflowAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.RichTextBlockOverflowAutomationPeer"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::SettingsFlyoutAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::SettingsFlyoutAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.SettingsFlyoutAutomationPeer"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::TextBlockAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::TextBlockAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.TextBlockAutomationPeer"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::TextBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::TextBoxAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.TextBoxAutomationPeer"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ThumbAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ThumbAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ThumbAutomationPeer"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::DatePickerAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::DatePickerAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.DatePickerAutomationPeer"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::FlyoutPresenterAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::FlyoutPresenterAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.FlyoutPresenterAutomationPeer"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::HubAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::HubAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IHubAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.HubAutomationPeer"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::HubSectionAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::HubSectionAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.HubSectionAutomationPeer"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ListViewBaseHeaderItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ListViewBaseHeaderItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ListViewBaseHeaderItemAutomationPeer"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::GridViewHeaderItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::GridViewHeaderItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.GridViewHeaderItemAutomationPeer"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ListViewHeaderItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ListViewHeaderItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ListViewHeaderItemAutomationPeer"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::SearchBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::SearchBoxAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.SearchBoxAutomationPeer"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::TimePickerAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::TimePickerAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.TimePickerAutomationPeer"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ButtonAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ButtonAutomationPeer"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::HyperlinkButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::HyperlinkButtonAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.HyperlinkButtonAutomationPeer"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::RepeatButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::RepeatButtonAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.RepeatButtonAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::AppBarButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::AppBarButtonAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.AppBarButtonAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::MenuFlyoutItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::MenuFlyoutItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.MenuFlyoutItemAutomationPeer"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ItemsControlAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::MenuFlyoutPresenterAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::MenuFlyoutPresenterAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.MenuFlyoutPresenterAutomationPeer"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.RangeBaseAutomationPeer"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ProgressBarAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ProgressBarAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ProgressBarAutomationPeer"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ScrollBarAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ScrollBarAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ScrollBarAutomationPeer"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::SliderAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::SliderAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.SliderAutomationPeer"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ScrollViewerAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ScrollViewerAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ScrollViewerAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.SelectorAutomationPeer"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::FlipViewAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::FlipViewAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.FlipViewAutomationPeer"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ListBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ListBoxAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ListBoxAutomationPeer"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ListViewBaseAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::GridViewAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::GridViewAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.GridViewAutomationPeer"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ListViewAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ListViewAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ListViewAutomationPeer"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::SemanticZoomAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::SemanticZoomAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.SemanticZoomAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ToggleButtonAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::CheckBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::CheckBoxAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.CheckBoxAutomationPeer"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::RadioButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::RadioButtonAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.RadioButtonAutomationPeer"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ToggleSwitchAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ToggleSwitchAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ToggleSwitchAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::AppBarAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::AppBarAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.AppBarAutomationPeer"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::AppBarToggleButtonAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::AppBarToggleButtonAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.AppBarToggleButtonAutomationPeer"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ToggleMenuFlyoutItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ToggleMenuFlyoutItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ToggleMenuFlyoutItemAutomationPeer"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ComboBoxAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ComboBoxAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ComboBoxAutomationPeer"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ItemAutomationPeer"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.SelectorItemAutomationPeer"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ComboBoxItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ComboBoxItemDataAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ComboBoxItemDataAutomationPeer"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::FlipViewItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::FlipViewItemDataAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.FlipViewItemDataAutomationPeer"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::GridViewItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::GridViewItemDataAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.GridViewItemDataAutomationPeer"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ListBoxItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ListBoxItemDataAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ListBoxItemDataAutomationPeer"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::UI::Xaml::Automation::Peers::ListViewItemDataAutomationPeer>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::Peers::ListViewItemDataAutomationPeer;
	using Default = Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.Peers.ListViewItemDataAutomationPeer"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::UI::Xaml::DependencyPropertyChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::DependencyPropertyChangedEventArgs;
	using Default = Windows::UI::Xaml::IDependencyPropertyChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DependencyPropertyChangedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Xaml::ApplicationInitializationCallbackParams>
{
	using Abi = ABI::Windows::UI::Xaml::ApplicationInitializationCallbackParams;
	using Default = Windows::UI::Xaml::IApplicationInitializationCallbackParams;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.ApplicationInitializationCallbackParams"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::CornerRadiusHelper>
{
	using Abi = ABI::Windows::UI::Xaml::CornerRadiusHelper;
	using Default = Windows::UI::Xaml::ICornerRadiusHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.CornerRadiusHelper"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::DurationHelper>
{
	using Abi = ABI::Windows::UI::Xaml::DurationHelper;
	using Default = Windows::UI::Xaml::IDurationHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DurationHelper"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Xaml::GridLengthHelper>
{
	using Abi = ABI::Windows::UI::Xaml::GridLengthHelper;
	using Default = Windows::UI::Xaml::IGridLengthHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.GridLengthHelper"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::PointHelper>
{
	using Abi = ABI::Windows::UI::Xaml::PointHelper;
	using Default = Windows::UI::Xaml::IPointHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.PointHelper"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Xaml::RectHelper>
{
	using Abi = ABI::Windows::UI::Xaml::RectHelper;
	using Default = Windows::UI::Xaml::IRectHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.RectHelper"; }
	static constexpr unsigned NameLength = 26;
};

template <> struct Traits<Windows::UI::Xaml::SizeHelper>
{
	using Abi = ABI::Windows::UI::Xaml::SizeHelper;
	using Default = Windows::UI::Xaml::ISizeHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.SizeHelper"; }
	static constexpr unsigned NameLength = 26;
};

template <> struct Traits<Windows::UI::Xaml::ThicknessHelper>
{
	using Abi = ABI::Windows::UI::Xaml::ThicknessHelper;
	using Default = Windows::UI::Xaml::IThicknessHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.ThicknessHelper"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::BindingFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::BindingFailedEventArgs;
	using Default = Windows::UI::Xaml::IBindingFailedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.BindingFailedEventArgs"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::UnhandledExceptionEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::UnhandledExceptionEventArgs;
	using Default = Windows::UI::Xaml::IUnhandledExceptionEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.UnhandledExceptionEventArgs"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::VisualStateChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::VisualStateChangedEventArgs;
	using Default = Windows::UI::Xaml::IVisualStateChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.VisualStateChangedEventArgs"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::DataContextChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::DataContextChangedEventArgs;
	using Default = Windows::UI::Xaml::IDataContextChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DataContextChangedEventArgs"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Xaml::DataTemplateKey>
{
	using Abi = ABI::Windows::UI::Xaml::DataTemplateKey;
	using Default = Windows::UI::Xaml::IDataTemplateKey;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DataTemplateKey"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::DebugSettings>
{
	using Abi = ABI::Windows::UI::Xaml::DebugSettings;
	using Default = Windows::UI::Xaml::IDebugSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DebugSettings"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Xaml::DependencyObjectCollection>
{
	using Abi = ABI::Windows::UI::Xaml::DependencyObjectCollection;
	using Default = Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::DependencyObject>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DependencyObjectCollection"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::PropertyMetadata>
{
	using Abi = ABI::Windows::UI::Xaml::PropertyMetadata;
	using Default = Windows::UI::Xaml::IPropertyMetadata;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.PropertyMetadata"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::DispatcherTimer>
{
	using Abi = ABI::Windows::UI::Xaml::DispatcherTimer;
	using Default = Windows::UI::Xaml::IDispatcherTimer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.DispatcherTimer"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::RoutedEvent>
{
	using Abi = ABI::Windows::UI::Xaml::RoutedEvent;
	using Default = Windows::UI::Xaml::IRoutedEvent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.RoutedEvent"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Xaml::TriggerActionCollection>
{
	using Abi = ABI::Windows::UI::Xaml::TriggerActionCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::TriggerAction>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.TriggerActionCollection"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::ExceptionRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::ExceptionRoutedEventArgs;
	using Default = Windows::UI::Xaml::IExceptionRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.ExceptionRoutedEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Xaml::WindowCreatedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::WindowCreatedEventArgs;
	using Default = Windows::UI::Xaml::IWindowCreatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.WindowCreatedEventArgs"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Application>
{
	using Abi = ABI::Windows::UI::Xaml::Application;
	using Default = Windows::UI::Xaml::IApplication;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Application"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Xaml::TriggerCollection>
{
	using Abi = ABI::Windows::UI::Xaml::TriggerCollection;
	using Default = Windows::Foundation::Collections::IVector<Windows::UI::Xaml::TriggerBase>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.TriggerCollection"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::FrameworkView>
{
	using Abi = ABI::Windows::UI::Xaml::FrameworkView;
	using Default = Windows::UI::Xaml::IFrameworkView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.FrameworkView"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Xaml::FrameworkViewSource>
{
	using Abi = ABI::Windows::UI::Xaml::FrameworkViewSource;
	using Default = Windows::UI::Xaml::IFrameworkViewSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.FrameworkViewSource"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Xaml::MediaFailedRoutedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::MediaFailedRoutedEventArgs;
	using Default = Windows::UI::Xaml::IMediaFailedRoutedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.MediaFailedRoutedEventArgs"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::ResourceDictionary>
{
	using Abi = ABI::Windows::UI::Xaml::ResourceDictionary;
	using Default = Windows::UI::Xaml::IResourceDictionary;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.ResourceDictionary"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::SetterBase>
{
	using Abi = ABI::Windows::UI::Xaml::SetterBase;
	using Default = Windows::UI::Xaml::ISetterBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.SetterBase"; }
	static constexpr unsigned NameLength = 26;
};

template <> struct Traits<Windows::UI::Xaml::Setter>
{
	using Abi = ABI::Windows::UI::Xaml::Setter;
	using Default = Windows::UI::Xaml::ISetter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Setter"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::UI::Xaml::SetterBaseCollection>
{
	using Abi = ABI::Windows::UI::Xaml::SetterBaseCollection;
	using Default = Windows::UI::Xaml::ISetterBaseCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.SetterBaseCollection"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::SizeChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::SizeChangedEventArgs;
	using Default = Windows::UI::Xaml::ISizeChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.SizeChangedEventArgs"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Xaml::TriggerBase>
{
	using Abi = ABI::Windows::UI::Xaml::TriggerBase;
	using Default = Windows::UI::Xaml::ITriggerBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.TriggerBase"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Xaml::EventTrigger>
{
	using Abi = ABI::Windows::UI::Xaml::EventTrigger;
	using Default = Windows::UI::Xaml::IEventTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.EventTrigger"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Xaml::VisualState>
{
	using Abi = ABI::Windows::UI::Xaml::VisualState;
	using Default = Windows::UI::Xaml::IVisualState;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.VisualState"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Xaml::VisualStateGroup>
{
	using Abi = ABI::Windows::UI::Xaml::VisualStateGroup;
	using Default = Windows::UI::Xaml::IVisualStateGroup;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.VisualStateGroup"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::VisualStateManager>
{
	using Abi = ABI::Windows::UI::Xaml::VisualStateManager;
	using Default = Windows::UI::Xaml::IVisualStateManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.VisualStateManager"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Xaml::VisualTransition>
{
	using Abi = ABI::Windows::UI::Xaml::VisualTransition;
	using Default = Windows::UI::Xaml::IVisualTransition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.VisualTransition"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Xaml::Automation::AutomationProperties>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::AutomationProperties;
	using Default = Windows::UI::Xaml::Automation::IAutomationProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.AutomationProperties"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Xaml::Automation::AutomationElementIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::AutomationElementIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IAutomationElementIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.AutomationElementIdentifiers"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::AnnotationPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::AnnotationPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.AnnotationPatternIdentifiers"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::DockPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::DockPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IDockPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.DockPatternIdentifiers"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Xaml::Automation::DragPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::DragPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IDragPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.DragPatternIdentifiers"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Xaml::Automation::DropTargetPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::DropTargetPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.DropTargetPatternIdentifiers"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ExpandCollapsePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ExpandCollapsePatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.ExpandCollapsePatternIdentifiers"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Xaml::Automation::GridItemPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::GridItemPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IGridItemPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.GridItemPatternIdentifiers"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Xaml::Automation::GridPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::GridPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IGridPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.GridPatternIdentifiers"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Xaml::Automation::MultipleViewPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::MultipleViewPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.MultipleViewPatternIdentifiers"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::Xaml::Automation::RangeValuePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::RangeValuePatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.RangeValuePatternIdentifiers"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ScrollPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ScrollPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IScrollPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.ScrollPatternIdentifiers"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Automation::SelectionItemPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::SelectionItemPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.SelectionItemPatternIdentifiers"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Xaml::Automation::SelectionPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::SelectionPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::ISelectionPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.SelectionPatternIdentifiers"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Automation::TableItemPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::TableItemPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::ITableItemPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.TableItemPatternIdentifiers"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Automation::TablePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::TablePatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::ITablePatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.TablePatternIdentifiers"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Xaml::Automation::TogglePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::TogglePatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::ITogglePatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.TogglePatternIdentifiers"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Automation::TransformPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::TransformPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::ITransformPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.TransformPatternIdentifiers"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::Xaml::Automation::ValuePatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::ValuePatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IValuePatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.ValuePatternIdentifiers"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Xaml::Automation::WindowPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::WindowPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IWindowPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.WindowPatternIdentifiers"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Automation::TransformPattern2Identifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::TransformPattern2Identifiers;
	using Default = Windows::UI::Xaml::Automation::ITransformPattern2Identifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.TransformPattern2Identifiers"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Automation::SpreadsheetItemPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::SpreadsheetItemPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.SpreadsheetItemPatternIdentifiers"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::UI::Xaml::Automation::StylesPatternIdentifiers>
{
	using Abi = ABI::Windows::UI::Xaml::Automation::StylesPatternIdentifiers;
	using Default = Windows::UI::Xaml::Automation::IStylesPatternIdentifiers;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Automation.StylesPatternIdentifiers"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Xaml::Hosting::XamlUIPresenter>
{
	using Abi = ABI::Windows::UI::Xaml::Hosting::XamlUIPresenter;
	using Default = Windows::UI::Xaml::Hosting::IXamlUIPresenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Hosting.XamlUIPresenter"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Markup::XamlReader>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::XamlReader;
	using Default = Windows::UI::Xaml::Markup::IXamlReader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Markup.XamlReader"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Xaml::Markup::XamlBinaryWriter>
{
	using Abi = ABI::Windows::UI::Xaml::Markup::XamlBinaryWriter;
	using Default = Windows::UI::Xaml::Markup::IXamlBinaryWriter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Markup.XamlBinaryWriter"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::DownloadProgressEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::DownloadProgressEventArgs;
	using Default = Windows::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Imaging.DownloadProgressEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::BitmapSource>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::BitmapSource;
	using Default = Windows::UI::Xaml::Media::Imaging::IBitmapSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Imaging.BitmapSource"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::BitmapImage>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::BitmapImage;
	using Default = Windows::UI::Xaml::Media::Imaging::IBitmapImage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Imaging.BitmapImage"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::RenderTargetBitmap>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::RenderTargetBitmap;
	using Default = Windows::UI::Xaml::Media::Imaging::IRenderTargetBitmap;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Imaging.RenderTargetBitmap"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::SurfaceImageSource>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::SurfaceImageSource;
	using Default = Windows::UI::Xaml::Media::Imaging::ISurfaceImageSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Imaging.SurfaceImageSource"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::VirtualSurfaceImageSource;
	using Default = Windows::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Imaging.VirtualSurfaceImageSource"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::Xaml::Media::Imaging::WriteableBitmap>
{
	using Abi = ABI::Windows::UI::Xaml::Media::Imaging::WriteableBitmap;
	using Default = Windows::UI::Xaml::Media::Imaging::IWriteableBitmap;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Media.Imaging.WriteableBitmap"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Xaml::Printing::AddPagesEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::AddPagesEventArgs;
	using Default = Windows::UI::Xaml::Printing::IAddPagesEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Printing.AddPagesEventArgs"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Printing::GetPreviewPageEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::GetPreviewPageEventArgs;
	using Default = Windows::UI::Xaml::Printing::IGetPreviewPageEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Printing.GetPreviewPageEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Xaml::Printing::PaginateEventArgs>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::PaginateEventArgs;
	using Default = Windows::UI::Xaml::Printing::IPaginateEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Printing.PaginateEventArgs"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Xaml::Printing::PrintDocument>
{
	using Abi = ABI::Windows::UI::Xaml::Printing::PrintDocument;
	using Default = Windows::UI::Xaml::Printing::IPrintDocument;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Printing.PrintDocument"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Xaml::Resources::CustomXamlResourceLoader>
{
	using Abi = ABI::Windows::UI::Xaml::Resources::CustomXamlResourceLoader;
	using Default = Windows::UI::Xaml::Resources::ICustomXamlResourceLoader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Resources.CustomXamlResourceLoader"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::Shape>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::Shape;
	using Default = Windows::UI::Xaml::Shapes::IShape;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Shapes.Shape"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::Ellipse>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::Ellipse;
	using Default = Windows::UI::Xaml::Shapes::IEllipse;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Shapes.Ellipse"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::Line>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::Line;
	using Default = Windows::UI::Xaml::Shapes::ILine;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Shapes.Line"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::Path>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::Path;
	using Default = Windows::UI::Xaml::Shapes::IPath;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Shapes.Path"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::Polygon>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::Polygon;
	using Default = Windows::UI::Xaml::Shapes::IPolygon;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Shapes.Polygon"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::Polyline>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::Polyline;
	using Default = Windows::UI::Xaml::Shapes::IPolyline;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Shapes.Polyline"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Xaml::Shapes::Rectangle>
{
	using Abi = ABI::Windows::UI::Xaml::Shapes::Rectangle;
	using Default = Windows::UI::Xaml::Shapes::IRectangle;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Xaml.Shapes.Rectangle"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Web::AtomPub::ServiceDocument>
{
	using Abi = ABI::Windows::Web::AtomPub::ServiceDocument;
	using Default = Windows::Web::AtomPub::IServiceDocument;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.AtomPub.ServiceDocument"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationAttribute>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationAttribute;
	using Default = Windows::Web::Syndication::ISyndicationAttribute;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationAttribute"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationNode>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationNode;
	using Default = Windows::Web::Syndication::ISyndicationNode;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationNode"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationGenerator>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationGenerator;
	using Default = Windows::Web::Syndication::ISyndicationGenerator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationGenerator"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationText>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationText;
	using Default = Windows::Web::Syndication::ISyndicationText;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationText"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationContent>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationContent;
	using Default = Windows::Web::Syndication::ISyndicationContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationContent"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationLink>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationLink;
	using Default = Windows::Web::Syndication::ISyndicationLink;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationLink"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationPerson>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationPerson;
	using Default = Windows::Web::Syndication::ISyndicationPerson;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationPerson"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationCategory>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationCategory;
	using Default = Windows::Web::Syndication::ISyndicationCategory;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationCategory"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationFeed>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationFeed;
	using Default = Windows::Web::Syndication::ISyndicationFeed;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationFeed"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationItem>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationItem;
	using Default = Windows::Web::Syndication::ISyndicationItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationItem"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationClient>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationClient;
	using Default = Windows::Web::Syndication::ISyndicationClient;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationClient"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationError"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Web::AtomPub::ResourceCollection>
{
	using Abi = ABI::Windows::Web::AtomPub::ResourceCollection;
	using Default = Windows::Web::AtomPub::IResourceCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.AtomPub.ResourceCollection"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Web::AtomPub::Workspace>
{
	using Abi = ABI::Windows::Web::AtomPub::Workspace;
	using Default = Windows::Web::AtomPub::IWorkspace;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.AtomPub.Workspace"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Web::AtomPub::AtomPubClient>
{
	using Abi = ABI::Windows::Web::AtomPub::AtomPubClient;
	using Default = Windows::Web::AtomPub::IAtomPubClient;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.AtomPub.AtomPubClient"; }
	static constexpr unsigned NameLength = 33;
};

}

namespace Modern { namespace Windows { namespace ApplicationModel {

struct ISuspendingDeferral :
	IInspectable,
	impl_ISuspendingDeferral<ISuspendingDeferral>
{
	ISuspendingDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISuspendingDeferral>>(m_ptr); }
};

struct ISuspendingOperation :
	IInspectable,
	impl_ISuspendingOperation<ISuspendingOperation>
{
	ISuspendingOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISuspendingOperation>>(m_ptr); }
};

struct ISuspendingEventArgs :
	IInspectable,
	impl_ISuspendingEventArgs<ISuspendingEventArgs>
{
	ISuspendingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISuspendingEventArgs>>(m_ptr); }
};

struct IPackageId :
	IInspectable,
	impl_IPackageId<IPackageId>
{
	IPackageId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageId>>(m_ptr); }
};

struct IPackage :
	IInspectable,
	impl_IPackage<IPackage>
{
	IPackage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackage>>(m_ptr); }
};

struct IPackage2 :
	IInspectable,
	impl_IPackage2<IPackage2>
{
	IPackage2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackage2>>(m_ptr); }
};

struct IPackageStatics :
	IInspectable,
	impl_IPackageStatics<IPackageStatics>
{
	IPackageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageStatics>>(m_ptr); }
};

struct IDesignModeStatics :
	IInspectable,
	impl_IDesignModeStatics<IDesignModeStatics>
{
	IDesignModeStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDesignModeStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

struct ISplashScreen :
	IInspectable,
	impl_ISplashScreen<ISplashScreen>
{
	ISplashScreen(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplashScreen>>(m_ptr); }
};

struct IActivatedEventArgs :
	IInspectable,
	impl_IActivatedEventArgs<IActivatedEventArgs>
{
	IActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedEventArgs>>(m_ptr); }
};

struct IApplicationViewActivatedEventArgs :
	IInspectable,
	impl_IApplicationViewActivatedEventArgs<IApplicationViewActivatedEventArgs>,
	Requires<IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IApplicationViewActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewActivatedEventArgs>>(m_ptr); }
};

struct IPrelaunchActivatedEventArgs :
	IInspectable,
	impl_IPrelaunchActivatedEventArgs<IPrelaunchActivatedEventArgs>,
	Requires<IPrelaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IPrelaunchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrelaunchActivatedEventArgs>>(m_ptr); }
};

struct ILaunchActivatedEventArgs :
	IInspectable,
	impl_ILaunchActivatedEventArgs<ILaunchActivatedEventArgs>,
	Requires<ILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ILaunchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILaunchActivatedEventArgs>>(m_ptr); }
};

struct ISearchActivatedEventArgs :
	IInspectable,
	impl_ISearchActivatedEventArgs<ISearchActivatedEventArgs>,
	Requires<ISearchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ISearchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchActivatedEventArgs>>(m_ptr); }
};

struct ISearchActivatedEventArgsWithLinguisticDetails :
	IInspectable,
	impl_ISearchActivatedEventArgsWithLinguisticDetails<ISearchActivatedEventArgsWithLinguisticDetails>
{
	ISearchActivatedEventArgsWithLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchActivatedEventArgsWithLinguisticDetails>>(m_ptr); }
};

struct IShareTargetActivatedEventArgs :
	IInspectable,
	impl_IShareTargetActivatedEventArgs<IShareTargetActivatedEventArgs>,
	Requires<IShareTargetActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IShareTargetActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IShareTargetActivatedEventArgs>>(m_ptr); }
};

struct IFileActivatedEventArgs :
	IInspectable,
	impl_IFileActivatedEventArgs<IFileActivatedEventArgs>,
	Requires<IFileActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileActivatedEventArgs>>(m_ptr); }
};

struct IFileActivatedEventArgsWithNeighboringFiles :
	IInspectable,
	impl_IFileActivatedEventArgsWithNeighboringFiles<IFileActivatedEventArgsWithNeighboringFiles>,
	Requires<IFileActivatedEventArgsWithNeighboringFiles, Windows::ApplicationModel::Activation::IFileActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileActivatedEventArgsWithNeighboringFiles(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileActivatedEventArgsWithNeighboringFiles>>(m_ptr); }
};

struct IProtocolActivatedEventArgs :
	IInspectable,
	impl_IProtocolActivatedEventArgs<IProtocolActivatedEventArgs>,
	Requires<IProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IProtocolActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProtocolActivatedEventArgs>>(m_ptr); }
};

struct IFileOpenPickerActivatedEventArgs :
	IInspectable,
	impl_IFileOpenPickerActivatedEventArgs<IFileOpenPickerActivatedEventArgs>,
	Requires<IFileOpenPickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileOpenPickerActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileOpenPickerActivatedEventArgs>>(m_ptr); }
};

struct IFileSavePickerActivatedEventArgs :
	IInspectable,
	impl_IFileSavePickerActivatedEventArgs<IFileSavePickerActivatedEventArgs>,
	Requires<IFileSavePickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileSavePickerActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileSavePickerActivatedEventArgs>>(m_ptr); }
};

struct ICachedFileUpdaterActivatedEventArgs :
	IInspectable,
	impl_ICachedFileUpdaterActivatedEventArgs<ICachedFileUpdaterActivatedEventArgs>,
	Requires<ICachedFileUpdaterActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ICachedFileUpdaterActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICachedFileUpdaterActivatedEventArgs>>(m_ptr); }
};

struct IContactPickerActivatedEventArgs :
	IInspectable,
	impl_IContactPickerActivatedEventArgs<IContactPickerActivatedEventArgs>,
	Requires<IContactPickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactPickerActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPickerActivatedEventArgs>>(m_ptr); }
};

struct IDeviceActivatedEventArgs :
	IInspectable,
	impl_IDeviceActivatedEventArgs<IDeviceActivatedEventArgs>,
	Requires<IDeviceActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IDeviceActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceActivatedEventArgs>>(m_ptr); }
};

struct IPrintTaskSettingsActivatedEventArgs :
	IInspectable,
	impl_IPrintTaskSettingsActivatedEventArgs<IPrintTaskSettingsActivatedEventArgs>,
	Requires<IPrintTaskSettingsActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IPrintTaskSettingsActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskSettingsActivatedEventArgs>>(m_ptr); }
};

struct ICameraSettingsActivatedEventArgs :
	IInspectable,
	impl_ICameraSettingsActivatedEventArgs<ICameraSettingsActivatedEventArgs>,
	Requires<ICameraSettingsActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ICameraSettingsActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraSettingsActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderActivatedEventArgs<IAppointmentsProviderActivatedEventArgs>,
	Requires<IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderAddAppointmentActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderAddAppointmentActivatedEventArgs<IAppointmentsProviderAddAppointmentActivatedEventArgs>,
	Requires<IAppointmentsProviderAddAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderAddAppointmentActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderAddAppointmentActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs<IAppointmentsProviderReplaceAppointmentActivatedEventArgs>,
	Requires<IAppointmentsProviderReplaceAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderReplaceAppointmentActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderReplaceAppointmentActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs<IAppointmentsProviderRemoveAppointmentActivatedEventArgs>,
	Requires<IAppointmentsProviderRemoveAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderRemoveAppointmentActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderRemoveAppointmentActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderShowTimeFrameActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<IAppointmentsProviderShowTimeFrameActivatedEventArgs>,
	Requires<IAppointmentsProviderShowTimeFrameActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderShowTimeFrameActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderShowTimeFrameActivatedEventArgs>>(m_ptr); }
};

struct IContactActivatedEventArgs :
	IInspectable,
	impl_IContactActivatedEventArgs<IContactActivatedEventArgs>,
	Requires<IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactActivatedEventArgs>>(m_ptr); }
};

struct IContactCallActivatedEventArgs :
	IInspectable,
	impl_IContactCallActivatedEventArgs<IContactCallActivatedEventArgs>,
	Requires<IContactCallActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactCallActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactCallActivatedEventArgs>>(m_ptr); }
};

struct IContactMessageActivatedEventArgs :
	IInspectable,
	impl_IContactMessageActivatedEventArgs<IContactMessageActivatedEventArgs>,
	Requires<IContactMessageActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactMessageActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactMessageActivatedEventArgs>>(m_ptr); }
};

struct IContactMapActivatedEventArgs :
	IInspectable,
	impl_IContactMapActivatedEventArgs<IContactMapActivatedEventArgs>,
	Requires<IContactMapActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactMapActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactMapActivatedEventArgs>>(m_ptr); }
};

struct IContactPostActivatedEventArgs :
	IInspectable,
	impl_IContactPostActivatedEventArgs<IContactPostActivatedEventArgs>,
	Requires<IContactPostActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactPostActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPostActivatedEventArgs>>(m_ptr); }
};

struct IContactVideoCallActivatedEventArgs :
	IInspectable,
	impl_IContactVideoCallActivatedEventArgs<IContactVideoCallActivatedEventArgs>,
	Requires<IContactVideoCallActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactVideoCallActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactVideoCallActivatedEventArgs>>(m_ptr); }
};

struct IContactsProviderActivatedEventArgs :
	IInspectable,
	impl_IContactsProviderActivatedEventArgs<IContactsProviderActivatedEventArgs>,
	Requires<IContactsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactsProviderActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactsProviderActivatedEventArgs>>(m_ptr); }
};

struct IRestrictedLaunchActivatedEventArgs :
	IInspectable,
	impl_IRestrictedLaunchActivatedEventArgs<IRestrictedLaunchActivatedEventArgs>,
	Requires<IRestrictedLaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IRestrictedLaunchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRestrictedLaunchActivatedEventArgs>>(m_ptr); }
};

struct ILockScreenCallActivatedEventArgs :
	IInspectable,
	impl_ILockScreenCallActivatedEventArgs<ILockScreenCallActivatedEventArgs>,
	Requires<ILockScreenCallActivatedEventArgs, Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ILockScreenCallActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenCallActivatedEventArgs>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

struct IAppointmentManagerStatics :
	IInspectable,
	impl_IAppointmentManagerStatics<IAppointmentManagerStatics>
{
	IAppointmentManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentManagerStatics>>(m_ptr); }
};

struct IAppointmentParticipant :
	IInspectable,
	impl_IAppointmentParticipant<IAppointmentParticipant>
{
	IAppointmentParticipant(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentParticipant>>(m_ptr); }
};

struct IAppointmentInvitee :
	IInspectable,
	impl_IAppointmentInvitee<IAppointmentInvitee>,
	Requires<IAppointmentInvitee, Windows::ApplicationModel::Appointments::IAppointmentParticipant>
{
	IAppointmentInvitee(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentInvitee>>(m_ptr); }
};

struct IAppointmentRecurrence :
	IInspectable,
	impl_IAppointmentRecurrence<IAppointmentRecurrence>
{
	IAppointmentRecurrence(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentRecurrence>>(m_ptr); }
};

struct IAppointment :
	IInspectable,
	impl_IAppointment<IAppointment>
{
	IAppointment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointment>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

struct IAppointmentsProviderLaunchActionVerbsStatics :
	IInspectable,
	impl_IAppointmentsProviderLaunchActionVerbsStatics<IAppointmentsProviderLaunchActionVerbsStatics>
{
	IAppointmentsProviderLaunchActionVerbsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderLaunchActionVerbsStatics>>(m_ptr); }
};

struct IAddAppointmentOperation :
	IInspectable,
	impl_IAddAppointmentOperation<IAddAppointmentOperation>
{
	IAddAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAddAppointmentOperation>>(m_ptr); }
};

struct IReplaceAppointmentOperation :
	IInspectable,
	impl_IReplaceAppointmentOperation<IReplaceAppointmentOperation>
{
	IReplaceAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IReplaceAppointmentOperation>>(m_ptr); }
};

struct IRemoveAppointmentOperation :
	IInspectable,
	impl_IRemoveAppointmentOperation<IRemoveAppointmentOperation>
{
	IRemoveAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRemoveAppointmentOperation>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

struct IBackgroundTaskCanceledEventHandler :
	IUnknown,
	impl_IBackgroundTaskCanceledEventHandler<IBackgroundTaskCanceledEventHandler>
{
	IBackgroundTaskCanceledEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskCanceledEventHandler>>(m_ptr); }
};

struct IBackgroundTaskProgressEventHandler :
	IUnknown,
	impl_IBackgroundTaskProgressEventHandler<IBackgroundTaskProgressEventHandler>
{
	IBackgroundTaskProgressEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskProgressEventHandler>>(m_ptr); }
};

struct IBackgroundTaskCompletedEventHandler :
	IUnknown,
	impl_IBackgroundTaskCompletedEventHandler<IBackgroundTaskCompletedEventHandler>
{
	IBackgroundTaskCompletedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskCompletedEventHandler>>(m_ptr); }
};

struct IAlarmApplicationManagerStatics :
	IInspectable,
	impl_IAlarmApplicationManagerStatics<IAlarmApplicationManagerStatics>
{
	IAlarmApplicationManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAlarmApplicationManagerStatics>>(m_ptr); }
};

struct IBackgroundExecutionManagerStatics :
	IInspectable,
	impl_IBackgroundExecutionManagerStatics<IBackgroundExecutionManagerStatics>
{
	IBackgroundExecutionManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundExecutionManagerStatics>>(m_ptr); }
};

struct IBackgroundTaskInstance :
	IInspectable,
	impl_IBackgroundTaskInstance<IBackgroundTaskInstance>
{
	IBackgroundTaskInstance(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskInstance>>(m_ptr); }
};

struct IBackgroundWorkCostStatics :
	IInspectable,
	impl_IBackgroundWorkCostStatics<IBackgroundWorkCostStatics>
{
	IBackgroundWorkCostStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundWorkCostStatics>>(m_ptr); }
};

struct IBackgroundTaskDeferral :
	IInspectable,
	impl_IBackgroundTaskDeferral<IBackgroundTaskDeferral>
{
	IBackgroundTaskDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskDeferral>>(m_ptr); }
};

struct IBackgroundTaskInstance2 :
	IInspectable,
	impl_IBackgroundTaskInstance2<IBackgroundTaskInstance2>,
	Requires<IBackgroundTaskInstance2, Windows::ApplicationModel::Background::IBackgroundTaskInstance>
{
	IBackgroundTaskInstance2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskInstance2>>(m_ptr); }
};

struct IBackgroundTask :
	IInspectable,
	impl_IBackgroundTask<IBackgroundTask>
{
	IBackgroundTask(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTask>>(m_ptr); }
};

struct IBackgroundTaskRegistration :
	IInspectable,
	impl_IBackgroundTaskRegistration<IBackgroundTaskRegistration>
{
	IBackgroundTaskRegistration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskRegistration>>(m_ptr); }
};

struct IBackgroundTaskRegistrationStatics :
	IInspectable,
	impl_IBackgroundTaskRegistrationStatics<IBackgroundTaskRegistrationStatics>
{
	IBackgroundTaskRegistrationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskRegistrationStatics>>(m_ptr); }
};

struct IBackgroundTaskBuilder :
	IInspectable,
	impl_IBackgroundTaskBuilder<IBackgroundTaskBuilder>
{
	IBackgroundTaskBuilder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskBuilder>>(m_ptr); }
};

struct IBackgroundTrigger :
	IInspectable,
	impl_IBackgroundTrigger<IBackgroundTrigger>
{
	IBackgroundTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTrigger>>(m_ptr); }
};

struct IBackgroundCondition :
	IInspectable,
	impl_IBackgroundCondition<IBackgroundCondition>
{
	IBackgroundCondition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundCondition>>(m_ptr); }
};

struct IBackgroundTaskBuilder2 :
	IInspectable,
	impl_IBackgroundTaskBuilder2<IBackgroundTaskBuilder2>,
	Requires<IBackgroundTaskBuilder2, Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
{
	IBackgroundTaskBuilder2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskBuilder2>>(m_ptr); }
};

struct IBackgroundTaskCompletedEventArgs :
	IInspectable,
	impl_IBackgroundTaskCompletedEventArgs<IBackgroundTaskCompletedEventArgs>
{
	IBackgroundTaskCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskCompletedEventArgs>>(m_ptr); }
};

struct IBackgroundTaskProgressEventArgs :
	IInspectable,
	impl_IBackgroundTaskProgressEventArgs<IBackgroundTaskProgressEventArgs>
{
	IBackgroundTaskProgressEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskProgressEventArgs>>(m_ptr); }
};

struct ISystemTrigger :
	IInspectable,
	impl_ISystemTrigger<ISystemTrigger>,
	Requires<ISystemTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ISystemTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemTrigger>>(m_ptr); }
};

struct ISystemTriggerFactory :
	IInspectable,
	impl_ISystemTriggerFactory<ISystemTriggerFactory>
{
	ISystemTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemTriggerFactory>>(m_ptr); }
};

struct ISystemCondition :
	IInspectable,
	impl_ISystemCondition<ISystemCondition>,
	Requires<ISystemCondition, Windows::ApplicationModel::Background::IBackgroundCondition>
{
	ISystemCondition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemCondition>>(m_ptr); }
};

struct ISystemConditionFactory :
	IInspectable,
	impl_ISystemConditionFactory<ISystemConditionFactory>
{
	ISystemConditionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemConditionFactory>>(m_ptr); }
};

struct INetworkOperatorNotificationTrigger :
	IInspectable,
	impl_INetworkOperatorNotificationTrigger<INetworkOperatorNotificationTrigger>,
	Requires<INetworkOperatorNotificationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	INetworkOperatorNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorNotificationTrigger>>(m_ptr); }
};

struct INetworkOperatorNotificationTriggerFactory :
	IInspectable,
	impl_INetworkOperatorNotificationTriggerFactory<INetworkOperatorNotificationTriggerFactory>
{
	INetworkOperatorNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorNotificationTriggerFactory>>(m_ptr); }
};

struct ITimeTrigger :
	IInspectable,
	impl_ITimeTrigger<ITimeTrigger>,
	Requires<ITimeTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ITimeTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimeTrigger>>(m_ptr); }
};

struct ITimeTriggerFactory :
	IInspectable,
	impl_ITimeTriggerFactory<ITimeTriggerFactory>
{
	ITimeTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimeTriggerFactory>>(m_ptr); }
};

struct IMaintenanceTrigger :
	IInspectable,
	impl_IMaintenanceTrigger<IMaintenanceTrigger>,
	Requires<IMaintenanceTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IMaintenanceTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMaintenanceTrigger>>(m_ptr); }
};

struct IMaintenanceTriggerFactory :
	IInspectable,
	impl_IMaintenanceTriggerFactory<IMaintenanceTriggerFactory>
{
	IMaintenanceTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMaintenanceTriggerFactory>>(m_ptr); }
};

struct IDeviceUseTrigger :
	IInspectable,
	impl_IDeviceUseTrigger<IDeviceUseTrigger>,
	Requires<IDeviceUseTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IDeviceUseTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceUseTrigger>>(m_ptr); }
};

struct IDeviceServicingTrigger :
	IInspectable,
	impl_IDeviceServicingTrigger<IDeviceServicingTrigger>,
	Requires<IDeviceServicingTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IDeviceServicingTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceServicingTrigger>>(m_ptr); }
};

struct ILocationTrigger :
	IInspectable,
	impl_ILocationTrigger<ILocationTrigger>,
	Requires<ILocationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ILocationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILocationTrigger>>(m_ptr); }
};

struct ILocationTriggerFactory :
	IInspectable,
	impl_ILocationTriggerFactory<ILocationTriggerFactory>
{
	ILocationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILocationTriggerFactory>>(m_ptr); }
};

struct INetworkOperatorHotspotAuthenticationTrigger :
	IInspectable,
	impl_INetworkOperatorHotspotAuthenticationTrigger<INetworkOperatorHotspotAuthenticationTrigger>,
	Requires<INetworkOperatorHotspotAuthenticationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	INetworkOperatorHotspotAuthenticationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorHotspotAuthenticationTrigger>>(m_ptr); }
};

struct IPushNotificationTriggerFactory :
	IInspectable,
	impl_IPushNotificationTriggerFactory<IPushNotificationTriggerFactory>
{
	IPushNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPushNotificationTriggerFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

struct ILockScreenCallEndCallDeferral :
	IInspectable,
	impl_ILockScreenCallEndCallDeferral<ILockScreenCallEndCallDeferral>
{
	ILockScreenCallEndCallDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenCallEndCallDeferral>>(m_ptr); }
};

struct ILockScreenCallEndRequestedEventArgs :
	IInspectable,
	impl_ILockScreenCallEndRequestedEventArgs<ILockScreenCallEndRequestedEventArgs>
{
	ILockScreenCallEndRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenCallEndRequestedEventArgs>>(m_ptr); }
};

struct ILockScreenCallUI :
	IInspectable,
	impl_ILockScreenCallUI<ILockScreenCallUI>
{
	ILockScreenCallUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenCallUI>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

struct IContactManagerStatics :
	IInspectable,
	impl_IContactManagerStatics<IContactManagerStatics>
{
	IContactManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactManagerStatics>>(m_ptr); }
};

struct IContactLaunchActionVerbsStatics :
	IInspectable,
	impl_IContactLaunchActionVerbsStatics<IContactLaunchActionVerbsStatics>
{
	IContactLaunchActionVerbsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactLaunchActionVerbsStatics>>(m_ptr); }
};

struct IContactPicker :
	IInspectable,
	impl_IContactPicker<IContactPicker>
{
	IContactPicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPicker>>(m_ptr); }
};

struct IContactPicker2 :
	IInspectable,
	impl_IContactPicker2<IContactPicker2>
{
	IContactPicker2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPicker2>>(m_ptr); }
};

struct IContactSignificantOther :
	IInspectable,
	impl_IContactSignificantOther<IContactSignificantOther>
{
	IContactSignificantOther(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactSignificantOther>>(m_ptr); }
};

struct IContactWebsite :
	IInspectable,
	impl_IContactWebsite<IContactWebsite>
{
	IContactWebsite(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactWebsite>>(m_ptr); }
};

struct IContactEmail :
	IInspectable,
	impl_IContactEmail<IContactEmail>
{
	IContactEmail(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactEmail>>(m_ptr); }
};

struct IContactPhone :
	IInspectable,
	impl_IContactPhone<IContactPhone>
{
	IContactPhone(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPhone>>(m_ptr); }
};

struct IContactAddress :
	IInspectable,
	impl_IContactAddress<IContactAddress>
{
	IContactAddress(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactAddress>>(m_ptr); }
};

struct IContactConnectedServiceAccount :
	IInspectable,
	impl_IContactConnectedServiceAccount<IContactConnectedServiceAccount>
{
	IContactConnectedServiceAccount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactConnectedServiceAccount>>(m_ptr); }
};

struct IContactDate :
	IInspectable,
	impl_IContactDate<IContactDate>
{
	IContactDate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactDate>>(m_ptr); }
};

struct IContactName :
	IInspectable,
	impl_IContactName<IContactName>
{
	IContactName(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactName>>(m_ptr); }
};

struct IContactJobInfo :
	IInspectable,
	impl_IContactJobInfo<IContactJobInfo>
{
	IContactJobInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactJobInfo>>(m_ptr); }
};

struct IContact :
	IInspectable,
	impl_IContact<IContact>
{
	IContact(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContact>>(m_ptr); }
};

struct IContact2 :
	IInspectable,
	impl_IContact2<IContact2>,
	Requires<IContact2, Windows::ApplicationModel::Contacts::IContact>
{
	IContact2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContact2>>(m_ptr); }
};

struct IContactCardDelayedDataLoader :
	IInspectable,
	impl_IContactCardDelayedDataLoader<IContactCardDelayedDataLoader>
{
	IContactCardDelayedDataLoader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactCardDelayedDataLoader>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

struct IContactRemovedEventArgs :
	IInspectable,
	impl_IContactRemovedEventArgs<IContactRemovedEventArgs>
{
	IContactRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactRemovedEventArgs>>(m_ptr); }
};

struct IContactPickerUI :
	IInspectable,
	impl_IContactPickerUI<IContactPickerUI>
{
	IContactPickerUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPickerUI>>(m_ptr); }
};

struct IContactPickerUI2 :
	IInspectable,
	impl_IContactPickerUI2<IContactPickerUI2>
{
	IContactPickerUI2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPickerUI2>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

struct IFrameworkView :
	IInspectable,
	impl_IFrameworkView<IFrameworkView>
{
	IFrameworkView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkView>>(m_ptr); }
};

struct IFrameworkViewSource :
	IInspectable,
	impl_IFrameworkViewSource<IFrameworkViewSource>
{
	IFrameworkViewSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkViewSource>>(m_ptr); }
};

struct ICoreApplication :
	IInspectable,
	impl_ICoreApplication<ICoreApplication>
{
	ICoreApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplication>>(m_ptr); }
};

struct ICoreApplicationUseCount :
	IInspectable,
	impl_ICoreApplicationUseCount<ICoreApplicationUseCount>
{
	ICoreApplicationUseCount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationUseCount>>(m_ptr); }
};

struct ICoreApplicationExit :
	IInspectable,
	impl_ICoreApplicationExit<ICoreApplicationExit>
{
	ICoreApplicationExit(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationExit>>(m_ptr); }
};

struct ICoreImmersiveApplication :
	IInspectable,
	impl_ICoreImmersiveApplication<ICoreImmersiveApplication>
{
	ICoreImmersiveApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreImmersiveApplication>>(m_ptr); }
};

struct ICoreImmersiveApplication2 :
	IInspectable,
	impl_ICoreImmersiveApplication2<ICoreImmersiveApplication2>
{
	ICoreImmersiveApplication2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreImmersiveApplication2>>(m_ptr); }
};

struct ICoreApplicationUnhandledError :
	IInspectable,
	impl_ICoreApplicationUnhandledError<ICoreApplicationUnhandledError>
{
	ICoreApplicationUnhandledError(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationUnhandledError>>(m_ptr); }
};

struct ICoreApplicationView :
	IInspectable,
	impl_ICoreApplicationView<ICoreApplicationView>
{
	ICoreApplicationView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationView>>(m_ptr); }
};

struct ICoreApplicationView2 :
	IInspectable,
	impl_ICoreApplicationView2<ICoreApplicationView2>
{
	ICoreApplicationView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationView2>>(m_ptr); }
};

struct IUnhandledErrorDetectedEventArgs :
	IInspectable,
	impl_IUnhandledErrorDetectedEventArgs<IUnhandledErrorDetectedEventArgs>
{
	IUnhandledErrorDetectedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnhandledErrorDetectedEventArgs>>(m_ptr); }
};

struct IUnhandledError :
	IInspectable,
	impl_IUnhandledError<IUnhandledError>
{
	IUnhandledError(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnhandledError>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

struct IDataProviderHandler :
	IUnknown,
	impl_IDataProviderHandler<IDataProviderHandler>
{
	IDataProviderHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProviderHandler>>(m_ptr); }
};

struct IStandardDataFormatsStatics :
	IInspectable,
	impl_IStandardDataFormatsStatics<IStandardDataFormatsStatics>
{
	IStandardDataFormatsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStandardDataFormatsStatics>>(m_ptr); }
};

struct IStandardDataFormatsStatics2 :
	IInspectable,
	impl_IStandardDataFormatsStatics2<IStandardDataFormatsStatics2>
{
	IStandardDataFormatsStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStandardDataFormatsStatics2>>(m_ptr); }
};

struct IDataPackagePropertySetView :
	IInspectable,
	impl_IDataPackagePropertySetView<IDataPackagePropertySetView>,
	Requires<IDataPackagePropertySetView, Windows::Foundation::Collections::IMapView<String, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>>>
{
	IDataPackagePropertySetView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackagePropertySetView>>(m_ptr); }
};

struct IDataPackagePropertySetView2 :
	IInspectable,
	impl_IDataPackagePropertySetView2<IDataPackagePropertySetView2>
{
	IDataPackagePropertySetView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackagePropertySetView2>>(m_ptr); }
};

struct IDataPackagePropertySet :
	IInspectable,
	impl_IDataPackagePropertySet<IDataPackagePropertySet>,
	Requires<IDataPackagePropertySet, Windows::Foundation::Collections::IMap<String, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>>>
{
	IDataPackagePropertySet(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackagePropertySet>>(m_ptr); }
};

struct IDataPackagePropertySet2 :
	IInspectable,
	impl_IDataPackagePropertySet2<IDataPackagePropertySet2>
{
	IDataPackagePropertySet2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackagePropertySet2>>(m_ptr); }
};

struct IDataProviderDeferral :
	IInspectable,
	impl_IDataProviderDeferral<IDataProviderDeferral>
{
	IDataProviderDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProviderDeferral>>(m_ptr); }
};

struct IDataProviderRequest :
	IInspectable,
	impl_IDataProviderRequest<IDataProviderRequest>
{
	IDataProviderRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProviderRequest>>(m_ptr); }
};

struct IOperationCompletedEventArgs :
	IInspectable,
	impl_IOperationCompletedEventArgs<IOperationCompletedEventArgs>
{
	IOperationCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOperationCompletedEventArgs>>(m_ptr); }
};

struct IDataPackageView :
	IInspectable,
	impl_IDataPackageView<IDataPackageView>
{
	IDataPackageView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackageView>>(m_ptr); }
};

struct IDataPackageView2 :
	IInspectable,
	impl_IDataPackageView2<IDataPackageView2>
{
	IDataPackageView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackageView2>>(m_ptr); }
};

struct IDataPackage :
	IInspectable,
	impl_IDataPackage<IDataPackage>
{
	IDataPackage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackage>>(m_ptr); }
};

struct IDataPackage2 :
	IInspectable,
	impl_IDataPackage2<IDataPackage2>
{
	IDataPackage2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackage2>>(m_ptr); }
};

struct IHtmlFormatHelperStatics :
	IInspectable,
	impl_IHtmlFormatHelperStatics<IHtmlFormatHelperStatics>
{
	IHtmlFormatHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHtmlFormatHelperStatics>>(m_ptr); }
};

struct IClipboardStatics :
	IInspectable,
	impl_IClipboardStatics<IClipboardStatics>
{
	IClipboardStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClipboardStatics>>(m_ptr); }
};

struct IDataRequestDeferral :
	IInspectable,
	impl_IDataRequestDeferral<IDataRequestDeferral>
{
	IDataRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataRequestDeferral>>(m_ptr); }
};

struct IDataRequest :
	IInspectable,
	impl_IDataRequest<IDataRequest>
{
	IDataRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataRequest>>(m_ptr); }
};

struct IDataRequestedEventArgs :
	IInspectable,
	impl_IDataRequestedEventArgs<IDataRequestedEventArgs>
{
	IDataRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataRequestedEventArgs>>(m_ptr); }
};

struct ITargetApplicationChosenEventArgs :
	IInspectable,
	impl_ITargetApplicationChosenEventArgs<ITargetApplicationChosenEventArgs>
{
	ITargetApplicationChosenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITargetApplicationChosenEventArgs>>(m_ptr); }
};

struct IDataTransferManager :
	IInspectable,
	impl_IDataTransferManager<IDataTransferManager>
{
	IDataTransferManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTransferManager>>(m_ptr); }
};

struct IDataTransferManagerStatics :
	IInspectable,
	impl_IDataTransferManagerStatics<IDataTransferManagerStatics>
{
	IDataTransferManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTransferManagerStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

struct IQuickLink :
	IInspectable,
	impl_IQuickLink<IQuickLink>
{
	IQuickLink(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQuickLink>>(m_ptr); }
};

struct IShareOperation :
	IInspectable,
	impl_IShareOperation<IShareOperation>
{
	IShareOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IShareOperation>>(m_ptr); }
};

struct IShareOperation2 :
	IInspectable,
	impl_IShareOperation2<IShareOperation2>
{
	IShareOperation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IShareOperation2>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Infrastructure {

struct ISetWindowWithWindowFactory :
	IInspectable,
	impl_ISetWindowWithWindowFactory<ISetWindowWithWindowFactory>
{
	ISetWindowWithWindowFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetWindowWithWindowFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

struct IResourceLoader :
	IInspectable,
	impl_IResourceLoader<IResourceLoader>
{
	IResourceLoader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceLoader>>(m_ptr); }
};

struct IResourceLoader2 :
	IInspectable,
	impl_IResourceLoader2<IResourceLoader2>
{
	IResourceLoader2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceLoader2>>(m_ptr); }
};

struct IResourceLoaderStatics2 :
	IInspectable,
	impl_IResourceLoaderStatics2<IResourceLoaderStatics2>
{
	IResourceLoaderStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceLoaderStatics2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

struct IResourceManager :
	IInspectable,
	impl_IResourceManager<IResourceManager>
{
	IResourceManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceManager>>(m_ptr); }
};

struct IResourceManagerStatics :
	IInspectable,
	impl_IResourceManagerStatics<IResourceManagerStatics>
{
	IResourceManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceManagerStatics>>(m_ptr); }
};

struct IResourceQualifier :
	IInspectable,
	impl_IResourceQualifier<IResourceQualifier>
{
	IResourceQualifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceQualifier>>(m_ptr); }
};

struct IResourceContext :
	IInspectable,
	impl_IResourceContext<IResourceContext>
{
	IResourceContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceContext>>(m_ptr); }
};

struct IResourceContextStatics2 :
	IInspectable,
	impl_IResourceContextStatics2<IResourceContextStatics2>
{
	IResourceContextStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceContextStatics2>>(m_ptr); }
};

struct IResourceCandidate :
	IInspectable,
	impl_IResourceCandidate<IResourceCandidate>
{
	IResourceCandidate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceCandidate>>(m_ptr); }
};

struct INamedResource :
	IInspectable,
	impl_INamedResource<INamedResource>
{
	INamedResource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INamedResource>>(m_ptr); }
};

struct IResourceMap :
	IInspectable,
	impl_IResourceMap<IResourceMap>,
	Requires<IResourceMap, Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::NamedResource>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::NamedResource>>>
{
	IResourceMap(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceMap>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

struct IResourceIndexer :
	IInspectable,
	impl_IResourceIndexer<IResourceIndexer>
{
	IResourceIndexer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceIndexer>>(m_ptr); }
};

struct IResourceIndexerFactory :
	IInspectable,
	impl_IResourceIndexerFactory<IResourceIndexerFactory>
{
	IResourceIndexerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceIndexerFactory>>(m_ptr); }
};

struct IResourceIndexerFactory2 :
	IInspectable,
	impl_IResourceIndexerFactory2<IResourceIndexerFactory2>
{
	IResourceIndexerFactory2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceIndexerFactory2>>(m_ptr); }
};

struct IIndexedResourceQualifier :
	IInspectable,
	impl_IIndexedResourceQualifier<IIndexedResourceQualifier>
{
	IIndexedResourceQualifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIndexedResourceQualifier>>(m_ptr); }
};

struct IIndexedResourceCandidate :
	IInspectable,
	impl_IIndexedResourceCandidate<IIndexedResourceCandidate>
{
	IIndexedResourceCandidate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIndexedResourceCandidate>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

struct ISearchPaneQueryLinguisticDetails :
	IInspectable,
	impl_ISearchPaneQueryLinguisticDetails<ISearchPaneQueryLinguisticDetails>
{
	ISearchPaneQueryLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneQueryLinguisticDetails>>(m_ptr); }
};

struct ISearchPaneVisibilityChangedEventArgs :
	IInspectable,
	impl_ISearchPaneVisibilityChangedEventArgs<ISearchPaneVisibilityChangedEventArgs>
{
	ISearchPaneVisibilityChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneVisibilityChangedEventArgs>>(m_ptr); }
};

struct ISearchPaneQueryChangedEventArgs :
	IInspectable,
	impl_ISearchPaneQueryChangedEventArgs<ISearchPaneQueryChangedEventArgs>
{
	ISearchPaneQueryChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneQueryChangedEventArgs>>(m_ptr); }
};

struct ISearchPaneQuerySubmittedEventArgs :
	IInspectable,
	impl_ISearchPaneQuerySubmittedEventArgs<ISearchPaneQuerySubmittedEventArgs>
{
	ISearchPaneQuerySubmittedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneQuerySubmittedEventArgs>>(m_ptr); }
};

struct ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails :
	IInspectable,
	impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails<ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>
{
	ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>>(m_ptr); }
};

struct ISearchPaneResultSuggestionChosenEventArgs :
	IInspectable,
	impl_ISearchPaneResultSuggestionChosenEventArgs<ISearchPaneResultSuggestionChosenEventArgs>
{
	ISearchPaneResultSuggestionChosenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneResultSuggestionChosenEventArgs>>(m_ptr); }
};

struct ISearchSuggestionCollection :
	IInspectable,
	impl_ISearchSuggestionCollection<ISearchSuggestionCollection>
{
	ISearchSuggestionCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchSuggestionCollection>>(m_ptr); }
};

struct ISearchPaneSuggestionsRequestDeferral :
	IInspectable,
	impl_ISearchPaneSuggestionsRequestDeferral<ISearchPaneSuggestionsRequestDeferral>
{
	ISearchPaneSuggestionsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneSuggestionsRequestDeferral>>(m_ptr); }
};

struct ISearchPaneSuggestionsRequest :
	IInspectable,
	impl_ISearchPaneSuggestionsRequest<ISearchPaneSuggestionsRequest>
{
	ISearchPaneSuggestionsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneSuggestionsRequest>>(m_ptr); }
};

struct ISearchPaneSuggestionsRequestedEventArgs :
	IInspectable,
	impl_ISearchPaneSuggestionsRequestedEventArgs<ISearchPaneSuggestionsRequestedEventArgs>,
	Requires<ISearchPaneSuggestionsRequestedEventArgs, Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs>
{
	ISearchPaneSuggestionsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneSuggestionsRequestedEventArgs>>(m_ptr); }
};

struct ILocalContentSuggestionSettings :
	IInspectable,
	impl_ILocalContentSuggestionSettings<ILocalContentSuggestionSettings>
{
	ILocalContentSuggestionSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILocalContentSuggestionSettings>>(m_ptr); }
};

struct ISearchPaneStatics :
	IInspectable,
	impl_ISearchPaneStatics<ISearchPaneStatics>
{
	ISearchPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneStatics>>(m_ptr); }
};

struct ISearchPaneStaticsWithHideThisApplication :
	IInspectable,
	impl_ISearchPaneStaticsWithHideThisApplication<ISearchPaneStaticsWithHideThisApplication>
{
	ISearchPaneStaticsWithHideThisApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneStaticsWithHideThisApplication>>(m_ptr); }
};

struct ISearchPane :
	IInspectable,
	impl_ISearchPane<ISearchPane>
{
	ISearchPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPane>>(m_ptr); }
};

struct ISearchQueryLinguisticDetailsFactory :
	IInspectable,
	impl_ISearchQueryLinguisticDetailsFactory<ISearchQueryLinguisticDetailsFactory>
{
	ISearchQueryLinguisticDetailsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchQueryLinguisticDetailsFactory>>(m_ptr); }
};

struct ISearchQueryLinguisticDetails :
	IInspectable,
	impl_ISearchQueryLinguisticDetails<ISearchQueryLinguisticDetails>
{
	ISearchQueryLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchQueryLinguisticDetails>>(m_ptr); }
};

struct ISearchSuggestionsRequestDeferral :
	IInspectable,
	impl_ISearchSuggestionsRequestDeferral<ISearchSuggestionsRequestDeferral>
{
	ISearchSuggestionsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchSuggestionsRequestDeferral>>(m_ptr); }
};

struct ISearchSuggestionsRequest :
	IInspectable,
	impl_ISearchSuggestionsRequest<ISearchSuggestionsRequest>
{
	ISearchSuggestionsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchSuggestionsRequest>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

struct ILicenseChangedEventHandler :
	IUnknown,
	impl_ILicenseChangedEventHandler<ILicenseChangedEventHandler>
{
	ILicenseChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILicenseChangedEventHandler>>(m_ptr); }
};

struct ICurrentApp :
	IInspectable,
	impl_ICurrentApp<ICurrentApp>
{
	ICurrentApp(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentApp>>(m_ptr); }
};

struct ICurrentAppWithConsumables :
	IInspectable,
	impl_ICurrentAppWithConsumables<ICurrentAppWithConsumables>
{
	ICurrentAppWithConsumables(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentAppWithConsumables>>(m_ptr); }
};

struct ICurrentAppSimulator :
	IInspectable,
	impl_ICurrentAppSimulator<ICurrentAppSimulator>
{
	ICurrentAppSimulator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentAppSimulator>>(m_ptr); }
};

struct ICurrentAppSimulatorWithConsumables :
	IInspectable,
	impl_ICurrentAppSimulatorWithConsumables<ICurrentAppSimulatorWithConsumables>
{
	ICurrentAppSimulatorWithConsumables(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentAppSimulatorWithConsumables>>(m_ptr); }
};

struct IPurchaseResults :
	IInspectable,
	impl_IPurchaseResults<IPurchaseResults>
{
	IPurchaseResults(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPurchaseResults>>(m_ptr); }
};

struct ILicenseInformation :
	IInspectable,
	impl_ILicenseInformation<ILicenseInformation>
{
	ILicenseInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILicenseInformation>>(m_ptr); }
};

struct IProductLicense :
	IInspectable,
	impl_IProductLicense<IProductLicense>
{
	IProductLicense(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductLicense>>(m_ptr); }
};

struct IListingInformation :
	IInspectable,
	impl_IListingInformation<IListingInformation>
{
	IListingInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListingInformation>>(m_ptr); }
};

struct IProductListing :
	IInspectable,
	impl_IProductListing<IProductListing>
{
	IProductListing(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductListing>>(m_ptr); }
};

struct IProductListingWithConsumables :
	IInspectable,
	impl_IProductListingWithConsumables<IProductListingWithConsumables>
{
	IProductListingWithConsumables(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductListingWithConsumables>>(m_ptr); }
};

struct IUnfulfilledConsumable :
	IInspectable,
	impl_IUnfulfilledConsumable<IUnfulfilledConsumable>
{
	IUnfulfilledConsumable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnfulfilledConsumable>>(m_ptr); }
};

struct IProductPurchaseDisplayProperties :
	IInspectable,
	impl_IProductPurchaseDisplayProperties<IProductPurchaseDisplayProperties>
{
	IProductPurchaseDisplayProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductPurchaseDisplayProperties>>(m_ptr); }
};

struct IProductPurchaseDisplayPropertiesFactory :
	IInspectable,
	impl_IProductPurchaseDisplayPropertiesFactory<IProductPurchaseDisplayPropertiesFactory>
{
	IProductPurchaseDisplayPropertiesFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductPurchaseDisplayPropertiesFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

struct IHtmlUtilities :
	IInspectable,
	impl_IHtmlUtilities<IHtmlUtilities>
{
	IHtmlUtilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHtmlUtilities>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

struct IJsonValue :
	IInspectable,
	impl_IJsonValue<IJsonValue>
{
	IJsonValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonValue>>(m_ptr); }
};

struct IJsonValueStatics :
	IInspectable,
	impl_IJsonValueStatics<IJsonValueStatics>
{
	IJsonValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonValueStatics>>(m_ptr); }
};

struct IJsonObject :
	IInspectable,
	impl_IJsonObject<IJsonObject>,
	Requires<IJsonObject, Windows::Data::Json::IJsonValue>
{
	IJsonObject(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonObject>>(m_ptr); }
};

struct IJsonObjectWithDefaultValues :
	IInspectable,
	impl_IJsonObjectWithDefaultValues<IJsonObjectWithDefaultValues>,
	Requires<IJsonObjectWithDefaultValues, Windows::Data::Json::IJsonObject, Windows::Data::Json::IJsonValue>
{
	IJsonObjectWithDefaultValues(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonObjectWithDefaultValues>>(m_ptr); }
	using impl_IJsonObject::GetNamedValue;
	using impl_IJsonObject::GetNamedObject;
	using impl_IJsonObject::GetNamedArray;
	using impl_IJsonObject::GetNamedString;
	using impl_IJsonObject::GetNamedNumber;
	using impl_IJsonObject::GetNamedBoolean;
	using impl_IJsonObjectWithDefaultValues::GetNamedValue;
	using impl_IJsonObjectWithDefaultValues::GetNamedObject;
	using impl_IJsonObjectWithDefaultValues::GetNamedString;
	using impl_IJsonObjectWithDefaultValues::GetNamedArray;
	using impl_IJsonObjectWithDefaultValues::GetNamedNumber;
	using impl_IJsonObjectWithDefaultValues::GetNamedBoolean;
};

struct IJsonObjectStatics :
	IInspectable,
	impl_IJsonObjectStatics<IJsonObjectStatics>
{
	IJsonObjectStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonObjectStatics>>(m_ptr); }
};

struct IJsonArray :
	IInspectable,
	impl_IJsonArray<IJsonArray>,
	Requires<IJsonArray, Windows::Data::Json::IJsonValue>
{
	IJsonArray(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonArray>>(m_ptr); }
};

struct IJsonArrayStatics :
	IInspectable,
	impl_IJsonArrayStatics<IJsonArrayStatics>
{
	IJsonArrayStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonArrayStatics>>(m_ptr); }
};

struct IJsonErrorStatics2 :
	IInspectable,
	impl_IJsonErrorStatics2<IJsonErrorStatics2>
{
	IJsonErrorStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonErrorStatics2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

struct IPdfPageDimensions :
	IInspectable,
	impl_IPdfPageDimensions<IPdfPageDimensions>
{
	IPdfPageDimensions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfPageDimensions>>(m_ptr); }
};

struct IPdfPageRenderOptions :
	IInspectable,
	impl_IPdfPageRenderOptions<IPdfPageRenderOptions>
{
	IPdfPageRenderOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfPageRenderOptions>>(m_ptr); }
};

struct IPdfPage :
	IInspectable,
	impl_IPdfPage<IPdfPage>
{
	IPdfPage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfPage>>(m_ptr); }
};

struct IPdfDocument :
	IInspectable,
	impl_IPdfDocument<IPdfDocument>
{
	IPdfDocument(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfDocument>>(m_ptr); }
};

struct IPdfDocumentStatics :
	IInspectable,
	impl_IPdfDocumentStatics<IPdfDocumentStatics>
{
	IPdfDocumentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfDocumentStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

struct IWordSegmentsTokenizingHandler :
	IUnknown,
	impl_IWordSegmentsTokenizingHandler<IWordSegmentsTokenizingHandler>
{
	IWordSegmentsTokenizingHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWordSegmentsTokenizingHandler>>(m_ptr); }
};

struct ISelectableWordSegmentsTokenizingHandler :
	IUnknown,
	impl_ISelectableWordSegmentsTokenizingHandler<ISelectableWordSegmentsTokenizingHandler>
{
	ISelectableWordSegmentsTokenizingHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectableWordSegmentsTokenizingHandler>>(m_ptr); }
};

struct ISemanticTextQueryFactory :
	IInspectable,
	impl_ISemanticTextQueryFactory<ISemanticTextQueryFactory>
{
	ISemanticTextQueryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticTextQueryFactory>>(m_ptr); }
};

struct ISemanticTextQuery :
	IInspectable,
	impl_ISemanticTextQuery<ISemanticTextQuery>
{
	ISemanticTextQuery(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticTextQuery>>(m_ptr); }
};

struct IUnicodeCharactersStatics :
	IInspectable,
	impl_IUnicodeCharactersStatics<IUnicodeCharactersStatics>
{
	IUnicodeCharactersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnicodeCharactersStatics>>(m_ptr); }
};

struct IAlternateWordForm :
	IInspectable,
	impl_IAlternateWordForm<IAlternateWordForm>
{
	IAlternateWordForm(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAlternateWordForm>>(m_ptr); }
};

struct ISelectableWordSegment :
	IInspectable,
	impl_ISelectableWordSegment<ISelectableWordSegment>
{
	ISelectableWordSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectableWordSegment>>(m_ptr); }
};

struct IWordSegment :
	IInspectable,
	impl_IWordSegment<IWordSegment>
{
	IWordSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWordSegment>>(m_ptr); }
};

struct IWordsSegmenter :
	IInspectable,
	impl_IWordsSegmenter<IWordsSegmenter>
{
	IWordsSegmenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWordsSegmenter>>(m_ptr); }
};

struct IWordsSegmenterFactory :
	IInspectable,
	impl_IWordsSegmenterFactory<IWordsSegmenterFactory>
{
	IWordsSegmenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWordsSegmenterFactory>>(m_ptr); }
};

struct ISelectableWordsSegmenter :
	IInspectable,
	impl_ISelectableWordsSegmenter<ISelectableWordsSegmenter>
{
	ISelectableWordsSegmenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectableWordsSegmenter>>(m_ptr); }
};

struct ISelectableWordsSegmenterFactory :
	IInspectable,
	impl_ISelectableWordsSegmenterFactory<ISelectableWordsSegmenterFactory>
{
	ISelectableWordsSegmenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectableWordsSegmenterFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

struct IXmlNodeSelector :
	IInspectable,
	impl_IXmlNodeSelector<IXmlNodeSelector>
{
	IXmlNodeSelector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNodeSelector>>(m_ptr); }
};

struct IXmlNodeSerializer :
	IInspectable,
	impl_IXmlNodeSerializer<IXmlNodeSerializer>
{
	IXmlNodeSerializer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNodeSerializer>>(m_ptr); }
};

struct IXmlNode :
	IInspectable,
	impl_IXmlNode<IXmlNode>,
	Requires<IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlNode(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNode>>(m_ptr); }
};

struct IXmlDomImplementation :
	IInspectable,
	impl_IXmlDomImplementation<IXmlDomImplementation>
{
	IXmlDomImplementation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDomImplementation>>(m_ptr); }
};

struct IXmlDocumentType :
	IInspectable,
	impl_IXmlDocumentType<IXmlDocumentType>,
	Requires<IXmlDocumentType, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlDocumentType(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocumentType>>(m_ptr); }
};

struct IXmlAttribute :
	IInspectable,
	impl_IXmlAttribute<IXmlAttribute>,
	Requires<IXmlAttribute, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlAttribute(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlAttribute>>(m_ptr); }
};

struct IXmlDocumentFragment :
	IInspectable,
	impl_IXmlDocumentFragment<IXmlDocumentFragment>,
	Requires<IXmlDocumentFragment, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlDocumentFragment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocumentFragment>>(m_ptr); }
};

struct IXmlElement :
	IInspectable,
	impl_IXmlElement<IXmlElement>,
	Requires<IXmlElement, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlElement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlElement>>(m_ptr); }
};

struct IDtdNotation :
	IInspectable,
	impl_IDtdNotation<IDtdNotation>,
	Requires<IDtdNotation, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IDtdNotation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDtdNotation>>(m_ptr); }
};

struct IDtdEntity :
	IInspectable,
	impl_IDtdEntity<IDtdEntity>,
	Requires<IDtdEntity, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IDtdEntity(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDtdEntity>>(m_ptr); }
};

struct IXmlEntityReference :
	IInspectable,
	impl_IXmlEntityReference<IXmlEntityReference>,
	Requires<IXmlEntityReference, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlEntityReference(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlEntityReference>>(m_ptr); }
};

struct IXmlProcessingInstruction :
	IInspectable,
	impl_IXmlProcessingInstruction<IXmlProcessingInstruction>,
	Requires<IXmlProcessingInstruction, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlProcessingInstruction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlProcessingInstruction>>(m_ptr); }
};

struct IXmlCharacterData :
	IInspectable,
	impl_IXmlCharacterData<IXmlCharacterData>,
	Requires<IXmlCharacterData, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlCharacterData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlCharacterData>>(m_ptr); }
};

struct IXmlComment :
	IInspectable,
	impl_IXmlComment<IXmlComment>,
	Requires<IXmlComment, Windows::Data::Xml::Dom::IXmlCharacterData, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlComment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlComment>>(m_ptr); }
};

struct IXmlText :
	IInspectable,
	impl_IXmlText<IXmlText>,
	Requires<IXmlText, Windows::Data::Xml::Dom::IXmlCharacterData, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlText(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlText>>(m_ptr); }
};

struct IXmlCDataSection :
	IInspectable,
	impl_IXmlCDataSection<IXmlCDataSection>,
	Requires<IXmlCDataSection, Windows::Data::Xml::Dom::IXmlText, Windows::Data::Xml::Dom::IXmlCharacterData, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlCDataSection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlCDataSection>>(m_ptr); }
};

struct IXmlDocument :
	IInspectable,
	impl_IXmlDocument<IXmlDocument>,
	Requires<IXmlDocument, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlDocument(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocument>>(m_ptr); }
};

struct IXmlNamedNodeMap :
	IInspectable,
	impl_IXmlNamedNodeMap<IXmlNamedNodeMap>,
	Requires<IXmlNamedNodeMap, Windows::Foundation::Collections::IVectorView<Windows::Data::Xml::Dom::IXmlNode>, Windows::Foundation::Collections::IIterable<Windows::Data::Xml::Dom::IXmlNode>>
{
	IXmlNamedNodeMap(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNamedNodeMap>>(m_ptr); }
};

struct IXmlNodeList :
	IInspectable,
	impl_IXmlNodeList<IXmlNodeList>,
	Requires<IXmlNodeList, Windows::Foundation::Collections::IVectorView<Windows::Data::Xml::Dom::IXmlNode>, Windows::Foundation::Collections::IIterable<Windows::Data::Xml::Dom::IXmlNode>>
{
	IXmlNodeList(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNodeList>>(m_ptr); }
};

struct IXmlLoadSettings :
	IInspectable,
	impl_IXmlLoadSettings<IXmlLoadSettings>
{
	IXmlLoadSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlLoadSettings>>(m_ptr); }
};

struct IXmlDocumentIO :
	IInspectable,
	impl_IXmlDocumentIO<IXmlDocumentIO>
{
	IXmlDocumentIO(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocumentIO>>(m_ptr); }
};

struct IXmlDocumentStatics :
	IInspectable,
	impl_IXmlDocumentStatics<IXmlDocumentStatics>
{
	IXmlDocumentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocumentStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

struct IXsltProcessor :
	IInspectable,
	impl_IXsltProcessor<IXsltProcessor>
{
	IXsltProcessor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXsltProcessor>>(m_ptr); }
};

struct IXsltProcessorFactory :
	IInspectable,
	impl_IXsltProcessorFactory<IXsltProcessorFactory>
{
	IXsltProcessorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXsltProcessorFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

struct IDeviceUseDetails :
	IInspectable,
	impl_IDeviceUseDetails<IDeviceUseDetails>
{
	IDeviceUseDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceUseDetails>>(m_ptr); }
};

struct IDeviceServicingDetails :
	IInspectable,
	impl_IDeviceServicingDetails<IDeviceServicingDetails>
{
	IDeviceServicingDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceServicingDetails>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

struct IKnownDeviceTypesStatics :
	IInspectable,
	impl_IKnownDeviceTypesStatics<IKnownDeviceTypesStatics>
{
	IKnownDeviceTypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownDeviceTypesStatics>>(m_ptr); }
};

struct IIOControlCode :
	IInspectable,
	impl_IIOControlCode<IIOControlCode>
{
	IIOControlCode(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIOControlCode>>(m_ptr); }
};

struct IIOControlCodeFactory :
	IInspectable,
	impl_IIOControlCodeFactory<IIOControlCodeFactory>
{
	IIOControlCodeFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIOControlCodeFactory>>(m_ptr); }
};

struct ICustomDeviceStatics :
	IInspectable,
	impl_ICustomDeviceStatics<ICustomDeviceStatics>
{
	ICustomDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomDeviceStatics>>(m_ptr); }
};

struct ICustomDevice :
	IInspectable,
	impl_ICustomDevice<ICustomDevice>
{
	ICustomDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomDevice>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

struct IEnclosureLocation :
	IInspectable,
	impl_IEnclosureLocation<IEnclosureLocation>
{
	IEnclosureLocation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEnclosureLocation>>(m_ptr); }
};

struct IDeviceInformationUpdate :
	IInspectable,
	impl_IDeviceInformationUpdate<IDeviceInformationUpdate>
{
	IDeviceInformationUpdate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceInformationUpdate>>(m_ptr); }
};

struct IDeviceWatcher :
	IInspectable,
	impl_IDeviceWatcher<IDeviceWatcher>
{
	IDeviceWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceWatcher>>(m_ptr); }
};

struct IDeviceInformationStatics :
	IInspectable,
	impl_IDeviceInformationStatics<IDeviceInformationStatics>
{
	IDeviceInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceInformationStatics>>(m_ptr); }
};

struct IDeviceInformation :
	IInspectable,
	impl_IDeviceInformation<IDeviceInformation>
{
	IDeviceInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceInformation>>(m_ptr); }
};

struct IDeviceAccessChangedEventArgs :
	IInspectable,
	impl_IDeviceAccessChangedEventArgs<IDeviceAccessChangedEventArgs>
{
	IDeviceAccessChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceAccessChangedEventArgs>>(m_ptr); }
};

struct IDeviceAccessInformation :
	IInspectable,
	impl_IDeviceAccessInformation<IDeviceAccessInformation>
{
	IDeviceAccessInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceAccessInformation>>(m_ptr); }
};

struct IDeviceAccessInformationStatics :
	IInspectable,
	impl_IDeviceAccessInformationStatics<IDeviceAccessInformationStatics>
{
	IDeviceAccessInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceAccessInformationStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

struct IPnpObjectUpdate :
	IInspectable,
	impl_IPnpObjectUpdate<IPnpObjectUpdate>
{
	IPnpObjectUpdate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPnpObjectUpdate>>(m_ptr); }
};

struct IPnpObjectWatcher :
	IInspectable,
	impl_IPnpObjectWatcher<IPnpObjectWatcher>
{
	IPnpObjectWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPnpObjectWatcher>>(m_ptr); }
};

struct IPnpObjectStatics :
	IInspectable,
	impl_IPnpObjectStatics<IPnpObjectStatics>
{
	IPnpObjectStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPnpObjectStatics>>(m_ptr); }
};

struct IPnpObject :
	IInspectable,
	impl_IPnpObject<IPnpObject>
{
	IPnpObject(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPnpObject>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

struct IGeoshape :
	IInspectable,
	impl_IGeoshape<IGeoshape>
{
	IGeoshape(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeoshape>>(m_ptr); }
};

struct IGeopoint :
	IInspectable,
	impl_IGeopoint<IGeopoint>,
	Requires<IGeopoint, Windows::Devices::Geolocation::IGeoshape>
{
	IGeopoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeopoint>>(m_ptr); }
};

struct IGeopointFactory :
	IInspectable,
	impl_IGeopointFactory<IGeopointFactory>
{
	IGeopointFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeopointFactory>>(m_ptr); }
};

struct IGeocoordinateSatelliteData :
	IInspectable,
	impl_IGeocoordinateSatelliteData<IGeocoordinateSatelliteData>
{
	IGeocoordinateSatelliteData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocoordinateSatelliteData>>(m_ptr); }
};

struct IGeocoordinate :
	IInspectable,
	impl_IGeocoordinate<IGeocoordinate>
{
	IGeocoordinate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocoordinate>>(m_ptr); }
};

struct IGeocoordinateWithPositionData :
	IInspectable,
	impl_IGeocoordinateWithPositionData<IGeocoordinateWithPositionData>,
	Requires<IGeocoordinateWithPositionData, Windows::Devices::Geolocation::IGeocoordinate>
{
	IGeocoordinateWithPositionData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocoordinateWithPositionData>>(m_ptr); }
};

struct IGeocoordinateWithPoint :
	IInspectable,
	impl_IGeocoordinateWithPoint<IGeocoordinateWithPoint>
{
	IGeocoordinateWithPoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocoordinateWithPoint>>(m_ptr); }
};

struct ICivicAddress :
	IInspectable,
	impl_ICivicAddress<ICivicAddress>
{
	ICivicAddress(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICivicAddress>>(m_ptr); }
};

struct IGeoposition :
	IInspectable,
	impl_IGeoposition<IGeoposition>
{
	IGeoposition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeoposition>>(m_ptr); }
};

struct IPositionChangedEventArgs :
	IInspectable,
	impl_IPositionChangedEventArgs<IPositionChangedEventArgs>
{
	IPositionChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPositionChangedEventArgs>>(m_ptr); }
};

struct IStatusChangedEventArgs :
	IInspectable,
	impl_IStatusChangedEventArgs<IStatusChangedEventArgs>
{
	IStatusChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStatusChangedEventArgs>>(m_ptr); }
};

struct IGeolocator :
	IInspectable,
	impl_IGeolocator<IGeolocator>
{
	IGeolocator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeolocator>>(m_ptr); }
};

struct IGeolocatorWithScalarAccuracy :
	IInspectable,
	impl_IGeolocatorWithScalarAccuracy<IGeolocatorWithScalarAccuracy>,
	Requires<IGeolocatorWithScalarAccuracy, Windows::Devices::Geolocation::IGeolocator>
{
	IGeolocatorWithScalarAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeolocatorWithScalarAccuracy>>(m_ptr); }
};

struct IGeocircle :
	IInspectable,
	impl_IGeocircle<IGeocircle>,
	Requires<IGeocircle, Windows::Devices::Geolocation::IGeoshape>
{
	IGeocircle(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocircle>>(m_ptr); }
};

struct IGeocircleFactory :
	IInspectable,
	impl_IGeocircleFactory<IGeocircleFactory>
{
	IGeocircleFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocircleFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

struct IGeofenceFactory :
	IInspectable,
	impl_IGeofenceFactory<IGeofenceFactory>
{
	IGeofenceFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofenceFactory>>(m_ptr); }
};

struct IGeofence :
	IInspectable,
	impl_IGeofence<IGeofence>
{
	IGeofence(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofence>>(m_ptr); }
};

struct IGeofenceStateChangeReport :
	IInspectable,
	impl_IGeofenceStateChangeReport<IGeofenceStateChangeReport>
{
	IGeofenceStateChangeReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofenceStateChangeReport>>(m_ptr); }
};

struct IGeofenceMonitorStatics :
	IInspectable,
	impl_IGeofenceMonitorStatics<IGeofenceMonitorStatics>
{
	IGeofenceMonitorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofenceMonitorStatics>>(m_ptr); }
};

struct IGeofenceMonitor :
	IInspectable,
	impl_IGeofenceMonitor<IGeofenceMonitor>
{
	IGeofenceMonitor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofenceMonitor>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

struct IHidDeviceStatics :
	IInspectable,
	impl_IHidDeviceStatics<IHidDeviceStatics>
{
	IHidDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidDeviceStatics>>(m_ptr); }
};

struct IHidBooleanControlDescription :
	IInspectable,
	impl_IHidBooleanControlDescription<IHidBooleanControlDescription>
{
	IHidBooleanControlDescription(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidBooleanControlDescription>>(m_ptr); }
};

struct IHidNumericControlDescription :
	IInspectable,
	impl_IHidNumericControlDescription<IHidNumericControlDescription>
{
	IHidNumericControlDescription(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidNumericControlDescription>>(m_ptr); }
};

struct IHidCollection :
	IInspectable,
	impl_IHidCollection<IHidCollection>
{
	IHidCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidCollection>>(m_ptr); }
};

struct IHidInputReport :
	IInspectable,
	impl_IHidInputReport<IHidInputReport>
{
	IHidInputReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidInputReport>>(m_ptr); }
};

struct IHidOutputReport :
	IInspectable,
	impl_IHidOutputReport<IHidOutputReport>
{
	IHidOutputReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidOutputReport>>(m_ptr); }
};

struct IHidFeatureReport :
	IInspectable,
	impl_IHidFeatureReport<IHidFeatureReport>
{
	IHidFeatureReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidFeatureReport>>(m_ptr); }
};

struct IHidInputReportReceivedEventArgs :
	IInspectable,
	impl_IHidInputReportReceivedEventArgs<IHidInputReportReceivedEventArgs>
{
	IHidInputReportReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidInputReportReceivedEventArgs>>(m_ptr); }
};

struct IHidBooleanControl :
	IInspectable,
	impl_IHidBooleanControl<IHidBooleanControl>
{
	IHidBooleanControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidBooleanControl>>(m_ptr); }
};

struct IHidNumericControl :
	IInspectable,
	impl_IHidNumericControl<IHidNumericControl>
{
	IHidNumericControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidNumericControl>>(m_ptr); }
};

struct IHidDevice :
	IInspectable,
	impl_IHidDevice<IHidDevice>
{
	IHidDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidDevice>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

struct IMouseCapabilities :
	IInspectable,
	impl_IMouseCapabilities<IMouseCapabilities>
{
	IMouseCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseCapabilities>>(m_ptr); }
};

struct IKeyboardCapabilities :
	IInspectable,
	impl_IKeyboardCapabilities<IKeyboardCapabilities>
{
	IKeyboardCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyboardCapabilities>>(m_ptr); }
};

struct ITouchCapabilities :
	IInspectable,
	impl_ITouchCapabilities<ITouchCapabilities>
{
	ITouchCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITouchCapabilities>>(m_ptr); }
};

struct IPointerDeviceStatics :
	IInspectable,
	impl_IPointerDeviceStatics<IPointerDeviceStatics>
{
	IPointerDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerDeviceStatics>>(m_ptr); }
};

struct IPointerDevice :
	IInspectable,
	impl_IPointerDevice<IPointerDevice>
{
	IPointerDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerDevice>>(m_ptr); }
};

struct IMouseEventArgs :
	IInspectable,
	impl_IMouseEventArgs<IMouseEventArgs>
{
	IMouseEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseEventArgs>>(m_ptr); }
};

struct IMouseDevice :
	IInspectable,
	impl_IMouseDevice<IMouseDevice>
{
	IMouseDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseDevice>>(m_ptr); }
};

struct IMouseDeviceStatics :
	IInspectable,
	impl_IMouseDeviceStatics<IMouseDeviceStatics>
{
	IMouseDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseDeviceStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

struct IUnifiedPosErrorData :
	IInspectable,
	impl_IUnifiedPosErrorData<IUnifiedPosErrorData>
{
	IUnifiedPosErrorData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnifiedPosErrorData>>(m_ptr); }
};

struct IBarcodeScannerStatusUpdatedEventArgs :
	IInspectable,
	impl_IBarcodeScannerStatusUpdatedEventArgs<IBarcodeScannerStatusUpdatedEventArgs>
{
	IBarcodeScannerStatusUpdatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerStatusUpdatedEventArgs>>(m_ptr); }
};

struct IBarcodeSymbologiesStatics :
	IInspectable,
	impl_IBarcodeSymbologiesStatics<IBarcodeSymbologiesStatics>
{
	IBarcodeSymbologiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeSymbologiesStatics>>(m_ptr); }
};

struct IBarcodeScannerDataReceivedEventArgs :
	IInspectable,
	impl_IBarcodeScannerDataReceivedEventArgs<IBarcodeScannerDataReceivedEventArgs>
{
	IBarcodeScannerDataReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerDataReceivedEventArgs>>(m_ptr); }
};

struct IBarcodeScannerReport :
	IInspectable,
	impl_IBarcodeScannerReport<IBarcodeScannerReport>
{
	IBarcodeScannerReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerReport>>(m_ptr); }
};

struct IBarcodeScannerErrorOccurredEventArgs :
	IInspectable,
	impl_IBarcodeScannerErrorOccurredEventArgs<IBarcodeScannerErrorOccurredEventArgs>
{
	IBarcodeScannerErrorOccurredEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerErrorOccurredEventArgs>>(m_ptr); }
};

struct IBarcodeScannerImagePreviewReceivedEventArgs :
	IInspectable,
	impl_IBarcodeScannerImagePreviewReceivedEventArgs<IBarcodeScannerImagePreviewReceivedEventArgs>
{
	IBarcodeScannerImagePreviewReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerImagePreviewReceivedEventArgs>>(m_ptr); }
};

struct IBarcodeScannerCapabilities :
	IInspectable,
	impl_IBarcodeScannerCapabilities<IBarcodeScannerCapabilities>
{
	IBarcodeScannerCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerCapabilities>>(m_ptr); }
};

struct IBarcodeScannerStatics :
	IInspectable,
	impl_IBarcodeScannerStatics<IBarcodeScannerStatics>
{
	IBarcodeScannerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerStatics>>(m_ptr); }
};

struct IBarcodeScanner :
	IInspectable,
	impl_IBarcodeScanner<IBarcodeScanner>
{
	IBarcodeScanner(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScanner>>(m_ptr); }
};

struct IMagneticStripeReaderEncryptionAlgorithmsStatics :
	IInspectable,
	impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<IMagneticStripeReaderEncryptionAlgorithmsStatics>
{
	IMagneticStripeReaderEncryptionAlgorithmsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderEncryptionAlgorithmsStatics>>(m_ptr); }
};

struct IMagneticStripeReaderCardTypesStatics :
	IInspectable,
	impl_IMagneticStripeReaderCardTypesStatics<IMagneticStripeReaderCardTypesStatics>
{
	IMagneticStripeReaderCardTypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderCardTypesStatics>>(m_ptr); }
};

struct IMagneticStripeReaderTrackData :
	IInspectable,
	impl_IMagneticStripeReaderTrackData<IMagneticStripeReaderTrackData>
{
	IMagneticStripeReaderTrackData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderTrackData>>(m_ptr); }
};

struct IMagneticStripeReaderReport :
	IInspectable,
	impl_IMagneticStripeReaderReport<IMagneticStripeReaderReport>
{
	IMagneticStripeReaderReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderReport>>(m_ptr); }
};

struct IMagneticStripeReaderBankCardDataReceivedEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<IMagneticStripeReaderBankCardDataReceivedEventArgs>
{
	IMagneticStripeReaderBankCardDataReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderBankCardDataReceivedEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderAamvaCardDataReceivedEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<IMagneticStripeReaderAamvaCardDataReceivedEventArgs>
{
	IMagneticStripeReaderAamvaCardDataReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderAamvaCardDataReceivedEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs<IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>
{
	IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderErrorOccurredEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderErrorOccurredEventArgs<IMagneticStripeReaderErrorOccurredEventArgs>
{
	IMagneticStripeReaderErrorOccurredEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderErrorOccurredEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderStatusUpdatedEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderStatusUpdatedEventArgs<IMagneticStripeReaderStatusUpdatedEventArgs>
{
	IMagneticStripeReaderStatusUpdatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderStatusUpdatedEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderCapabilities :
	IInspectable,
	impl_IMagneticStripeReaderCapabilities<IMagneticStripeReaderCapabilities>
{
	IMagneticStripeReaderCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderCapabilities>>(m_ptr); }
};

struct IMagneticStripeReaderStatics :
	IInspectable,
	impl_IMagneticStripeReaderStatics<IMagneticStripeReaderStatics>
{
	IMagneticStripeReaderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderStatics>>(m_ptr); }
};

struct IMagneticStripeReader :
	IInspectable,
	impl_IMagneticStripeReader<IMagneticStripeReader>
{
	IMagneticStripeReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReader>>(m_ptr); }
};

struct IClaimedBarcodeScanner :
	IInspectable,
	impl_IClaimedBarcodeScanner<IClaimedBarcodeScanner>
{
	IClaimedBarcodeScanner(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClaimedBarcodeScanner>>(m_ptr); }
};

struct IClaimedMagneticStripeReader :
	IInspectable,
	impl_IClaimedMagneticStripeReader<IClaimedMagneticStripeReader>
{
	IClaimedMagneticStripeReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClaimedMagneticStripeReader>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

struct IStorageDeviceStatics :
	IInspectable,
	impl_IStorageDeviceStatics<IStorageDeviceStatics>
{
	IStorageDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageDeviceStatics>>(m_ptr); }
};

struct IServiceDeviceStatics :
	IInspectable,
	impl_IServiceDeviceStatics<IServiceDeviceStatics>
{
	IServiceDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IServiceDeviceStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

struct IPrintTaskConfigurationSaveRequestedDeferral :
	IInspectable,
	impl_IPrintTaskConfigurationSaveRequestedDeferral<IPrintTaskConfigurationSaveRequestedDeferral>
{
	IPrintTaskConfigurationSaveRequestedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskConfigurationSaveRequestedDeferral>>(m_ptr); }
};

struct IPrintTaskConfigurationSaveRequest :
	IInspectable,
	impl_IPrintTaskConfigurationSaveRequest<IPrintTaskConfigurationSaveRequest>
{
	IPrintTaskConfigurationSaveRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskConfigurationSaveRequest>>(m_ptr); }
};

struct IPrintTaskConfigurationSaveRequestedEventArgs :
	IInspectable,
	impl_IPrintTaskConfigurationSaveRequestedEventArgs<IPrintTaskConfigurationSaveRequestedEventArgs>
{
	IPrintTaskConfigurationSaveRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskConfigurationSaveRequestedEventArgs>>(m_ptr); }
};

struct IPrintTaskConfiguration :
	IInspectable,
	impl_IPrintTaskConfiguration<IPrintTaskConfiguration>
{
	IPrintTaskConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskConfiguration>>(m_ptr); }
};

struct IPrintNotificationEventDetails :
	IInspectable,
	impl_IPrintNotificationEventDetails<IPrintNotificationEventDetails>
{
	IPrintNotificationEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintNotificationEventDetails>>(m_ptr); }
};

struct IPrintExtensionContextStatic :
	IInspectable,
	impl_IPrintExtensionContextStatic<IPrintExtensionContextStatic>
{
	IPrintExtensionContextStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintExtensionContextStatic>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

struct IAccelerometerStatics :
	IInspectable,
	impl_IAccelerometerStatics<IAccelerometerStatics>
{
	IAccelerometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometerStatics>>(m_ptr); }
};

struct IAccelerometer :
	IInspectable,
	impl_IAccelerometer<IAccelerometer>
{
	IAccelerometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometer>>(m_ptr); }
};

struct IAccelerometerReading :
	IInspectable,
	impl_IAccelerometerReading<IAccelerometerReading>
{
	IAccelerometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometerReading>>(m_ptr); }
};

struct IAccelerometerReadingChangedEventArgs :
	IInspectable,
	impl_IAccelerometerReadingChangedEventArgs<IAccelerometerReadingChangedEventArgs>
{
	IAccelerometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometerReadingChangedEventArgs>>(m_ptr); }
};

struct IAccelerometerShakenEventArgs :
	IInspectable,
	impl_IAccelerometerShakenEventArgs<IAccelerometerShakenEventArgs>
{
	IAccelerometerShakenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometerShakenEventArgs>>(m_ptr); }
};

struct IInclinometerStatics :
	IInspectable,
	impl_IInclinometerStatics<IInclinometerStatics>
{
	IInclinometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometerStatics>>(m_ptr); }
};

struct IInclinometer :
	IInspectable,
	impl_IInclinometer<IInclinometer>
{
	IInclinometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometer>>(m_ptr); }
};

struct IInclinometerReading :
	IInspectable,
	impl_IInclinometerReading<IInclinometerReading>
{
	IInclinometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometerReading>>(m_ptr); }
};

struct IInclinometerReadingYawAccuracy :
	IInspectable,
	impl_IInclinometerReadingYawAccuracy<IInclinometerReadingYawAccuracy>
{
	IInclinometerReadingYawAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometerReadingYawAccuracy>>(m_ptr); }
};

struct IInclinometerReadingChangedEventArgs :
	IInspectable,
	impl_IInclinometerReadingChangedEventArgs<IInclinometerReadingChangedEventArgs>
{
	IInclinometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometerReadingChangedEventArgs>>(m_ptr); }
};

struct IGyrometerStatics :
	IInspectable,
	impl_IGyrometerStatics<IGyrometerStatics>
{
	IGyrometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGyrometerStatics>>(m_ptr); }
};

struct IGyrometer :
	IInspectable,
	impl_IGyrometer<IGyrometer>
{
	IGyrometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGyrometer>>(m_ptr); }
};

struct IGyrometerReading :
	IInspectable,
	impl_IGyrometerReading<IGyrometerReading>
{
	IGyrometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGyrometerReading>>(m_ptr); }
};

struct IGyrometerReadingChangedEventArgs :
	IInspectable,
	impl_IGyrometerReadingChangedEventArgs<IGyrometerReadingChangedEventArgs>
{
	IGyrometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGyrometerReadingChangedEventArgs>>(m_ptr); }
};

struct ICompassStatics :
	IInspectable,
	impl_ICompassStatics<ICompassStatics>
{
	ICompassStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompassStatics>>(m_ptr); }
};

struct ICompass :
	IInspectable,
	impl_ICompass<ICompass>
{
	ICompass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompass>>(m_ptr); }
};

struct ICompassReading :
	IInspectable,
	impl_ICompassReading<ICompassReading>
{
	ICompassReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompassReading>>(m_ptr); }
};

struct ICompassReadingHeadingAccuracy :
	IInspectable,
	impl_ICompassReadingHeadingAccuracy<ICompassReadingHeadingAccuracy>
{
	ICompassReadingHeadingAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompassReadingHeadingAccuracy>>(m_ptr); }
};

struct ICompassReadingChangedEventArgs :
	IInspectable,
	impl_ICompassReadingChangedEventArgs<ICompassReadingChangedEventArgs>
{
	ICompassReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompassReadingChangedEventArgs>>(m_ptr); }
};

struct ILightSensorStatics :
	IInspectable,
	impl_ILightSensorStatics<ILightSensorStatics>
{
	ILightSensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILightSensorStatics>>(m_ptr); }
};

struct ILightSensor :
	IInspectable,
	impl_ILightSensor<ILightSensor>
{
	ILightSensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILightSensor>>(m_ptr); }
};

struct ILightSensorReading :
	IInspectable,
	impl_ILightSensorReading<ILightSensorReading>
{
	ILightSensorReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILightSensorReading>>(m_ptr); }
};

struct ILightSensorReadingChangedEventArgs :
	IInspectable,
	impl_ILightSensorReadingChangedEventArgs<ILightSensorReadingChangedEventArgs>
{
	ILightSensorReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILightSensorReadingChangedEventArgs>>(m_ptr); }
};

struct ISensorRotationMatrix :
	IInspectable,
	impl_ISensorRotationMatrix<ISensorRotationMatrix>
{
	ISensorRotationMatrix(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISensorRotationMatrix>>(m_ptr); }
};

struct ISensorQuaternion :
	IInspectable,
	impl_ISensorQuaternion<ISensorQuaternion>
{
	ISensorQuaternion(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISensorQuaternion>>(m_ptr); }
};

struct IOrientationSensorStatics :
	IInspectable,
	impl_IOrientationSensorStatics<IOrientationSensorStatics>
{
	IOrientationSensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensorStatics>>(m_ptr); }
};

struct IOrientationSensor :
	IInspectable,
	impl_IOrientationSensor<IOrientationSensor>
{
	IOrientationSensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensor>>(m_ptr); }
};

struct IOrientationSensorReading :
	IInspectable,
	impl_IOrientationSensorReading<IOrientationSensorReading>
{
	IOrientationSensorReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensorReading>>(m_ptr); }
};

struct IOrientationSensorReadingYawAccuracy :
	IInspectable,
	impl_IOrientationSensorReadingYawAccuracy<IOrientationSensorReadingYawAccuracy>
{
	IOrientationSensorReadingYawAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensorReadingYawAccuracy>>(m_ptr); }
};

struct IOrientationSensorReadingChangedEventArgs :
	IInspectable,
	impl_IOrientationSensorReadingChangedEventArgs<IOrientationSensorReadingChangedEventArgs>
{
	IOrientationSensorReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensorReadingChangedEventArgs>>(m_ptr); }
};

struct ISimpleOrientationSensorStatics :
	IInspectable,
	impl_ISimpleOrientationSensorStatics<ISimpleOrientationSensorStatics>
{
	ISimpleOrientationSensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISimpleOrientationSensorStatics>>(m_ptr); }
};

struct ISimpleOrientationSensor :
	IInspectable,
	impl_ISimpleOrientationSensor<ISimpleOrientationSensor>
{
	ISimpleOrientationSensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISimpleOrientationSensor>>(m_ptr); }
};

struct ISimpleOrientationSensorOrientationChangedEventArgs :
	IInspectable,
	impl_ISimpleOrientationSensorOrientationChangedEventArgs<ISimpleOrientationSensorOrientationChangedEventArgs>
{
	ISimpleOrientationSensorOrientationChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISimpleOrientationSensorOrientationChangedEventArgs>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

struct ISmartCardPinResetHandler :
	IUnknown,
	impl_ISmartCardPinResetHandler<ISmartCardPinResetHandler>
{
	ISmartCardPinResetHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardPinResetHandler>>(m_ptr); }
};

struct ISmartCardReaderStatics :
	IInspectable,
	impl_ISmartCardReaderStatics<ISmartCardReaderStatics>
{
	ISmartCardReaderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardReaderStatics>>(m_ptr); }
};

struct ISmartCardReader :
	IInspectable,
	impl_ISmartCardReader<ISmartCardReader>
{
	ISmartCardReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardReader>>(m_ptr); }
};

struct ICardAddedEventArgs :
	IInspectable,
	impl_ICardAddedEventArgs<ICardAddedEventArgs>
{
	ICardAddedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICardAddedEventArgs>>(m_ptr); }
};

struct ICardRemovedEventArgs :
	IInspectable,
	impl_ICardRemovedEventArgs<ICardRemovedEventArgs>
{
	ICardRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICardRemovedEventArgs>>(m_ptr); }
};

struct ISmartCard :
	IInspectable,
	impl_ISmartCard<ISmartCard>
{
	ISmartCard(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCard>>(m_ptr); }
};

struct ISmartCardProvisioningStatics :
	IInspectable,
	impl_ISmartCardProvisioningStatics<ISmartCardProvisioningStatics>
{
	ISmartCardProvisioningStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardProvisioningStatics>>(m_ptr); }
};

struct ISmartCardProvisioning :
	IInspectable,
	impl_ISmartCardProvisioning<ISmartCardProvisioning>
{
	ISmartCardProvisioning(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardProvisioning>>(m_ptr); }
};

struct ISmartCardPinResetRequest :
	IInspectable,
	impl_ISmartCardPinResetRequest<ISmartCardPinResetRequest>
{
	ISmartCardPinResetRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardPinResetRequest>>(m_ptr); }
};

struct ISmartCardPinResetDeferral :
	IInspectable,
	impl_ISmartCardPinResetDeferral<ISmartCardPinResetDeferral>
{
	ISmartCardPinResetDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardPinResetDeferral>>(m_ptr); }
};

struct ISmartCardPinPolicy :
	IInspectable,
	impl_ISmartCardPinPolicy<ISmartCardPinPolicy>
{
	ISmartCardPinPolicy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardPinPolicy>>(m_ptr); }
};

struct ISmartCardChallengeContext :
	IInspectable,
	impl_ISmartCardChallengeContext<ISmartCardChallengeContext>
{
	ISmartCardChallengeContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardChallengeContext>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

struct ISmsMessageReceivedEventHandler :
	IUnknown,
	impl_ISmsMessageReceivedEventHandler<ISmsMessageReceivedEventHandler>
{
	ISmsMessageReceivedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsMessageReceivedEventHandler>>(m_ptr); }
};

struct ISmsDeviceStatusChangedEventHandler :
	IUnknown,
	impl_ISmsDeviceStatusChangedEventHandler<ISmsDeviceStatusChangedEventHandler>
{
	ISmsDeviceStatusChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDeviceStatusChangedEventHandler>>(m_ptr); }
};

struct ISmsMessage :
	IInspectable,
	impl_ISmsMessage<ISmsMessage>
{
	ISmsMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsMessage>>(m_ptr); }
};

struct ISmsBinaryMessage :
	IInspectable,
	impl_ISmsBinaryMessage<ISmsBinaryMessage>,
	Requires<ISmsBinaryMessage, Windows::Devices::Sms::ISmsMessage>
{
	ISmsBinaryMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsBinaryMessage>>(m_ptr); }
};

struct ISmsTextMessage :
	IInspectable,
	impl_ISmsTextMessage<ISmsTextMessage>,
	Requires<ISmsTextMessage, Windows::Devices::Sms::ISmsMessage>
{
	ISmsTextMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsTextMessage>>(m_ptr); }
};

struct ISmsTextMessageStatics :
	IInspectable,
	impl_ISmsTextMessageStatics<ISmsTextMessageStatics>
{
	ISmsTextMessageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsTextMessageStatics>>(m_ptr); }
};

struct ISmsDeviceMessageStore :
	IInspectable,
	impl_ISmsDeviceMessageStore<ISmsDeviceMessageStore>
{
	ISmsDeviceMessageStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDeviceMessageStore>>(m_ptr); }
};

struct ISmsMessageReceivedEventArgs :
	IInspectable,
	impl_ISmsMessageReceivedEventArgs<ISmsMessageReceivedEventArgs>
{
	ISmsMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsMessageReceivedEventArgs>>(m_ptr); }
};

struct ISmsDeviceStatics :
	IInspectable,
	impl_ISmsDeviceStatics<ISmsDeviceStatics>
{
	ISmsDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDeviceStatics>>(m_ptr); }
};

struct ISmsDeviceStatics2 :
	IInspectable,
	impl_ISmsDeviceStatics2<ISmsDeviceStatics2>
{
	ISmsDeviceStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDeviceStatics2>>(m_ptr); }
};

struct ISmsDevice :
	IInspectable,
	impl_ISmsDevice<ISmsDevice>
{
	ISmsDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDevice>>(m_ptr); }
};

struct ISmsReceivedEventDetails :
	IInspectable,
	impl_ISmsReceivedEventDetails<ISmsReceivedEventDetails>
{
	ISmsReceivedEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsReceivedEventDetails>>(m_ptr); }
};

struct ISmsReceivedEventDetails2 :
	IInspectable,
	impl_ISmsReceivedEventDetails2<ISmsReceivedEventDetails2>
{
	ISmsReceivedEventDetails2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsReceivedEventDetails2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

struct IUsbControlRequestType :
	IInspectable,
	impl_IUsbControlRequestType<IUsbControlRequestType>
{
	IUsbControlRequestType(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbControlRequestType>>(m_ptr); }
};

struct IUsbSetupPacketFactory :
	IInspectable,
	impl_IUsbSetupPacketFactory<IUsbSetupPacketFactory>
{
	IUsbSetupPacketFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbSetupPacketFactory>>(m_ptr); }
};

struct IUsbSetupPacket :
	IInspectable,
	impl_IUsbSetupPacket<IUsbSetupPacket>
{
	IUsbSetupPacket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbSetupPacket>>(m_ptr); }
};

struct IUsbDeviceClass :
	IInspectable,
	impl_IUsbDeviceClass<IUsbDeviceClass>
{
	IUsbDeviceClass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceClass>>(m_ptr); }
};

struct IUsbDeviceClassesStatics :
	IInspectable,
	impl_IUsbDeviceClassesStatics<IUsbDeviceClassesStatics>
{
	IUsbDeviceClassesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceClassesStatics>>(m_ptr); }
};

struct IUsbDeviceClasses :
	IInspectable,
	impl_IUsbDeviceClasses<IUsbDeviceClasses>
{
	IUsbDeviceClasses(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceClasses>>(m_ptr); }
};

struct IUsbDeviceStatics :
	IInspectable,
	impl_IUsbDeviceStatics<IUsbDeviceStatics>
{
	IUsbDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceStatics>>(m_ptr); }
};

struct IUsbDeviceDescriptor :
	IInspectable,
	impl_IUsbDeviceDescriptor<IUsbDeviceDescriptor>
{
	IUsbDeviceDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceDescriptor>>(m_ptr); }
};

struct IUsbConfigurationDescriptor :
	IInspectable,
	impl_IUsbConfigurationDescriptor<IUsbConfigurationDescriptor>
{
	IUsbConfigurationDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbConfigurationDescriptor>>(m_ptr); }
};

struct IUsbConfigurationDescriptorStatics :
	IInspectable,
	impl_IUsbConfigurationDescriptorStatics<IUsbConfigurationDescriptorStatics>
{
	IUsbConfigurationDescriptorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbConfigurationDescriptorStatics>>(m_ptr); }
};

struct IUsbInterfaceDescriptor :
	IInspectable,
	impl_IUsbInterfaceDescriptor<IUsbInterfaceDescriptor>
{
	IUsbInterfaceDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterfaceDescriptor>>(m_ptr); }
};

struct IUsbInterfaceDescriptorStatics :
	IInspectable,
	impl_IUsbInterfaceDescriptorStatics<IUsbInterfaceDescriptorStatics>
{
	IUsbInterfaceDescriptorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterfaceDescriptorStatics>>(m_ptr); }
};

struct IUsbEndpointDescriptor :
	IInspectable,
	impl_IUsbEndpointDescriptor<IUsbEndpointDescriptor>
{
	IUsbEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbEndpointDescriptor>>(m_ptr); }
};

struct IUsbEndpointDescriptorStatics :
	IInspectable,
	impl_IUsbEndpointDescriptorStatics<IUsbEndpointDescriptorStatics>
{
	IUsbEndpointDescriptorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbEndpointDescriptorStatics>>(m_ptr); }
};

struct IUsbDescriptor :
	IInspectable,
	impl_IUsbDescriptor<IUsbDescriptor>
{
	IUsbDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDescriptor>>(m_ptr); }
};

struct IUsbInterruptInEventArgs :
	IInspectable,
	impl_IUsbInterruptInEventArgs<IUsbInterruptInEventArgs>
{
	IUsbInterruptInEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptInEventArgs>>(m_ptr); }
};

struct IUsbBulkInPipe :
	IInspectable,
	impl_IUsbBulkInPipe<IUsbBulkInPipe>
{
	IUsbBulkInPipe(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbBulkInPipe>>(m_ptr); }
};

struct IUsbInterruptInPipe :
	IInspectable,
	impl_IUsbInterruptInPipe<IUsbInterruptInPipe>
{
	IUsbInterruptInPipe(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptInPipe>>(m_ptr); }
};

struct IUsbBulkOutPipe :
	IInspectable,
	impl_IUsbBulkOutPipe<IUsbBulkOutPipe>
{
	IUsbBulkOutPipe(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbBulkOutPipe>>(m_ptr); }
};

struct IUsbInterruptOutPipe :
	IInspectable,
	impl_IUsbInterruptOutPipe<IUsbInterruptOutPipe>
{
	IUsbInterruptOutPipe(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptOutPipe>>(m_ptr); }
};

struct IUsbConfiguration :
	IInspectable,
	impl_IUsbConfiguration<IUsbConfiguration>
{
	IUsbConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbConfiguration>>(m_ptr); }
};

struct IUsbInterface :
	IInspectable,
	impl_IUsbInterface<IUsbInterface>
{
	IUsbInterface(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterface>>(m_ptr); }
};

struct IUsbInterfaceSetting :
	IInspectable,
	impl_IUsbInterfaceSetting<IUsbInterfaceSetting>
{
	IUsbInterfaceSetting(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterfaceSetting>>(m_ptr); }
};

struct IUsbBulkInEndpointDescriptor :
	IInspectable,
	impl_IUsbBulkInEndpointDescriptor<IUsbBulkInEndpointDescriptor>
{
	IUsbBulkInEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbBulkInEndpointDescriptor>>(m_ptr); }
};

struct IUsbInterruptInEndpointDescriptor :
	IInspectable,
	impl_IUsbInterruptInEndpointDescriptor<IUsbInterruptInEndpointDescriptor>
{
	IUsbInterruptInEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptInEndpointDescriptor>>(m_ptr); }
};

struct IUsbBulkOutEndpointDescriptor :
	IInspectable,
	impl_IUsbBulkOutEndpointDescriptor<IUsbBulkOutEndpointDescriptor>
{
	IUsbBulkOutEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbBulkOutEndpointDescriptor>>(m_ptr); }
};

struct IUsbInterruptOutEndpointDescriptor :
	IInspectable,
	impl_IUsbInterruptOutEndpointDescriptor<IUsbInterruptOutEndpointDescriptor>
{
	IUsbInterruptOutEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptOutEndpointDescriptor>>(m_ptr); }
};

struct IUsbDevice :
	IInspectable,
	impl_IUsbDevice<IUsbDevice>
{
	IUsbDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDevice>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

struct IWiFiDirectDeviceStatics :
	IInspectable,
	impl_IWiFiDirectDeviceStatics<IWiFiDirectDeviceStatics>
{
	IWiFiDirectDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWiFiDirectDeviceStatics>>(m_ptr); }
};

struct IWiFiDirectDevice :
	IInspectable,
	impl_IWiFiDirectDevice<IWiFiDirectDevice>
{
	IWiFiDirectDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWiFiDirectDevice>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Foundation {

struct IAsyncActionCompletedHandler :
	IUnknown,
	impl_IAsyncActionCompletedHandler<IAsyncActionCompletedHandler>
{
	IAsyncActionCompletedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsyncActionCompletedHandler>>(m_ptr); }
};

struct IUriRuntimeClass :
	IInspectable,
	impl_IUriRuntimeClass<IUriRuntimeClass>
{
	IUriRuntimeClass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriRuntimeClass>>(m_ptr); }
};

struct IUriRuntimeClassWithAbsoluteCanonicalUri :
	IInspectable,
	impl_IUriRuntimeClassWithAbsoluteCanonicalUri<IUriRuntimeClassWithAbsoluteCanonicalUri>
{
	IUriRuntimeClassWithAbsoluteCanonicalUri(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriRuntimeClassWithAbsoluteCanonicalUri>>(m_ptr); }
};

struct IUriEscapeStatics :
	IInspectable,
	impl_IUriEscapeStatics<IUriEscapeStatics>
{
	IUriEscapeStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriEscapeStatics>>(m_ptr); }
};

struct IUriRuntimeClassFactory :
	IInspectable,
	impl_IUriRuntimeClassFactory<IUriRuntimeClassFactory>
{
	IUriRuntimeClassFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriRuntimeClassFactory>>(m_ptr); }
};

struct IWwwFormUrlDecoderEntry :
	IInspectable,
	impl_IWwwFormUrlDecoderEntry<IWwwFormUrlDecoderEntry>
{
	IWwwFormUrlDecoderEntry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWwwFormUrlDecoderEntry>>(m_ptr); }
};

struct IWwwFormUrlDecoderRuntimeClass :
	IInspectable,
	impl_IWwwFormUrlDecoderRuntimeClass<IWwwFormUrlDecoderRuntimeClass>,
	Requires<IWwwFormUrlDecoderRuntimeClass, Windows::Foundation::Collections::IIterable<Windows::Foundation::IWwwFormUrlDecoderEntry>, Windows::Foundation::Collections::IVectorView<Windows::Foundation::IWwwFormUrlDecoderEntry>>
{
	IWwwFormUrlDecoderRuntimeClass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWwwFormUrlDecoderRuntimeClass>>(m_ptr); }
};

struct IWwwFormUrlDecoderRuntimeClassFactory :
	IInspectable,
	impl_IWwwFormUrlDecoderRuntimeClassFactory<IWwwFormUrlDecoderRuntimeClassFactory>
{
	IWwwFormUrlDecoderRuntimeClassFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWwwFormUrlDecoderRuntimeClassFactory>>(m_ptr); }
};

struct IGetActivationFactory :
	IInspectable,
	impl_IGetActivationFactory<IGetActivationFactory>
{
	IGetActivationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGetActivationFactory>>(m_ptr); }
};

struct IClosable :
	IInspectable,
	impl_IClosable<IClosable>
{
	IClosable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClosable>>(m_ptr); }
};

struct IPropertyValue :
	IInspectable,
	impl_IPropertyValue<IPropertyValue>
{
	IPropertyValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyValue>>(m_ptr); }
};

struct IPropertyValueStatics :
	IInspectable,
	impl_IPropertyValueStatics<IPropertyValueStatics>
{
	IPropertyValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyValueStatics>>(m_ptr); }
};

struct IStringable :
	IInspectable,
	impl_IStringable<IStringable>
{
	IStringable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStringable>>(m_ptr); }
};

struct IAsyncAction :
	IInspectable,
	impl_IAsyncAction<IAsyncAction>,
	Requires<IAsyncAction, IAsyncInfo>
{
	IAsyncAction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsyncAction>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

struct IPropertySet :
	IInspectable,
	impl_IPropertySet<IPropertySet>,
	Requires<IPropertySet, Windows::Foundation::Collections::IObservableMap<String, IInspectable>, Windows::Foundation::Collections::IMap<String, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>>>
{
	IPropertySet(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertySet>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

struct ITracingStatusChangedEventArgs :
	IInspectable,
	impl_ITracingStatusChangedEventArgs<ITracingStatusChangedEventArgs>
{
	ITracingStatusChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITracingStatusChangedEventArgs>>(m_ptr); }
};

struct IAsyncCausalityTracerStatics :
	IInspectable,
	impl_IAsyncCausalityTracerStatics<IAsyncCausalityTracerStatics>
{
	IAsyncCausalityTracerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsyncCausalityTracerStatics>>(m_ptr); }
};

struct IErrorReportingSettings :
	IInspectable,
	impl_IErrorReportingSettings<IErrorReportingSettings>
{
	IErrorReportingSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IErrorReportingSettings>>(m_ptr); }
};

struct ILoggingChannel :
	IInspectable,
	impl_ILoggingChannel<ILoggingChannel>
{
	ILoggingChannel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingChannel>>(m_ptr); }
};

struct ILoggingChannelFactory :
	IInspectable,
	impl_ILoggingChannelFactory<ILoggingChannelFactory>
{
	ILoggingChannelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingChannelFactory>>(m_ptr); }
};

struct ILoggingActivity :
	IInspectable,
	impl_ILoggingActivity<ILoggingActivity>
{
	ILoggingActivity(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingActivity>>(m_ptr); }
};

struct ILoggingActivityFactory :
	IInspectable,
	impl_ILoggingActivityFactory<ILoggingActivityFactory>
{
	ILoggingActivityFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingActivityFactory>>(m_ptr); }
};

struct ILoggingSession :
	IInspectable,
	impl_ILoggingSession<ILoggingSession>
{
	ILoggingSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingSession>>(m_ptr); }
};

struct ILoggingSessionFactory :
	IInspectable,
	impl_ILoggingSessionFactory<ILoggingSessionFactory>
{
	ILoggingSessionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingSessionFactory>>(m_ptr); }
};

struct ILogFileGeneratedEventArgs :
	IInspectable,
	impl_ILogFileGeneratedEventArgs<ILogFileGeneratedEventArgs>
{
	ILogFileGeneratedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILogFileGeneratedEventArgs>>(m_ptr); }
};

struct IFileLoggingSession :
	IInspectable,
	impl_IFileLoggingSession<IFileLoggingSession>
{
	IFileLoggingSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileLoggingSession>>(m_ptr); }
};

struct IFileLoggingSessionFactory :
	IInspectable,
	impl_IFileLoggingSessionFactory<IFileLoggingSessionFactory>
{
	IFileLoggingSessionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileLoggingSessionFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Globalization {

struct IJapanesePhoneticAnalyzerStatics :
	IInspectable,
	impl_IJapanesePhoneticAnalyzerStatics<IJapanesePhoneticAnalyzerStatics>
{
	IJapanesePhoneticAnalyzerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJapanesePhoneticAnalyzerStatics>>(m_ptr); }
};

struct IJapanesePhoneme :
	IInspectable,
	impl_IJapanesePhoneme<IJapanesePhoneme>
{
	IJapanesePhoneme(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJapanesePhoneme>>(m_ptr); }
};

struct ICalendarIdentifiersStatics :
	IInspectable,
	impl_ICalendarIdentifiersStatics<ICalendarIdentifiersStatics>
{
	ICalendarIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICalendarIdentifiersStatics>>(m_ptr); }
};

struct IClockIdentifiersStatics :
	IInspectable,
	impl_IClockIdentifiersStatics<IClockIdentifiersStatics>
{
	IClockIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClockIdentifiersStatics>>(m_ptr); }
};

struct INumeralSystemIdentifiersStatics :
	IInspectable,
	impl_INumeralSystemIdentifiersStatics<INumeralSystemIdentifiersStatics>
{
	INumeralSystemIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumeralSystemIdentifiersStatics>>(m_ptr); }
};

struct ICurrencyIdentifiersStatics :
	IInspectable,
	impl_ICurrencyIdentifiersStatics<ICurrencyIdentifiersStatics>
{
	ICurrencyIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrencyIdentifiersStatics>>(m_ptr); }
};

struct IGeographicRegion :
	IInspectable,
	impl_IGeographicRegion<IGeographicRegion>
{
	IGeographicRegion(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeographicRegion>>(m_ptr); }
};

struct IGeographicRegionFactory :
	IInspectable,
	impl_IGeographicRegionFactory<IGeographicRegionFactory>
{
	IGeographicRegionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeographicRegionFactory>>(m_ptr); }
};

struct IGeographicRegionStatics :
	IInspectable,
	impl_IGeographicRegionStatics<IGeographicRegionStatics>
{
	IGeographicRegionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeographicRegionStatics>>(m_ptr); }
};

struct ILanguage :
	IInspectable,
	impl_ILanguage<ILanguage>
{
	ILanguage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguage>>(m_ptr); }
};

struct ILanguageExtensionSubtags :
	IInspectable,
	impl_ILanguageExtensionSubtags<ILanguageExtensionSubtags>
{
	ILanguageExtensionSubtags(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageExtensionSubtags>>(m_ptr); }
};

struct ILanguageFactory :
	IInspectable,
	impl_ILanguageFactory<ILanguageFactory>
{
	ILanguageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageFactory>>(m_ptr); }
};

struct ILanguageStatics :
	IInspectable,
	impl_ILanguageStatics<ILanguageStatics>
{
	ILanguageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageStatics>>(m_ptr); }
};

struct ICalendar :
	IInspectable,
	impl_ICalendar<ICalendar>
{
	ICalendar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICalendar>>(m_ptr); }
};

struct ICalendarFactory2 :
	IInspectable,
	impl_ICalendarFactory2<ICalendarFactory2>
{
	ICalendarFactory2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICalendarFactory2>>(m_ptr); }
};

struct ITimeZoneOnCalendar :
	IInspectable,
	impl_ITimeZoneOnCalendar<ITimeZoneOnCalendar>
{
	ITimeZoneOnCalendar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimeZoneOnCalendar>>(m_ptr); }
};

struct ICalendarFactory :
	IInspectable,
	impl_ICalendarFactory<ICalendarFactory>
{
	ICalendarFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICalendarFactory>>(m_ptr); }
};

struct IApplicationLanguagesStatics :
	IInspectable,
	impl_IApplicationLanguagesStatics<IApplicationLanguagesStatics>
{
	IApplicationLanguagesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationLanguagesStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

struct ICharacterGrouping :
	IInspectable,
	impl_ICharacterGrouping<ICharacterGrouping>
{
	ICharacterGrouping(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICharacterGrouping>>(m_ptr); }
};

struct ICharacterGroupings :
	IInspectable,
	impl_ICharacterGroupings<ICharacterGroupings>,
	Requires<ICharacterGroupings, Windows::Foundation::Collections::IVectorView<Windows::Globalization::Collation::CharacterGrouping>, Windows::Foundation::Collections::IIterable<Windows::Globalization::Collation::CharacterGrouping>>
{
	ICharacterGroupings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICharacterGroupings>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

struct IDateTimeFormatter :
	IInspectable,
	impl_IDateTimeFormatter<IDateTimeFormatter>
{
	IDateTimeFormatter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDateTimeFormatter>>(m_ptr); }
};

struct IDateTimeFormatterFactory :
	IInspectable,
	impl_IDateTimeFormatterFactory<IDateTimeFormatterFactory>
{
	IDateTimeFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDateTimeFormatterFactory>>(m_ptr); }
};

struct IDateTimeFormatterStatics :
	IInspectable,
	impl_IDateTimeFormatterStatics<IDateTimeFormatterStatics>
{
	IDateTimeFormatterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDateTimeFormatterStatics>>(m_ptr); }
};

struct IDateTimeFormatter2 :
	IInspectable,
	impl_IDateTimeFormatter2<IDateTimeFormatter2>
{
	IDateTimeFormatter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDateTimeFormatter2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

struct ILanguageFontGroup :
	IInspectable,
	impl_ILanguageFontGroup<ILanguageFontGroup>
{
	ILanguageFontGroup(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageFontGroup>>(m_ptr); }
};

struct ILanguageFontGroupFactory :
	IInspectable,
	impl_ILanguageFontGroupFactory<ILanguageFontGroupFactory>
{
	ILanguageFontGroupFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageFontGroupFactory>>(m_ptr); }
};

struct ILanguageFont :
	IInspectable,
	impl_ILanguageFont<ILanguageFont>
{
	ILanguageFont(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageFont>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

struct INumberRounder :
	IInspectable,
	impl_INumberRounder<INumberRounder>
{
	INumberRounder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberRounder>>(m_ptr); }
};

struct ISignificantDigitsNumberRounder :
	IInspectable,
	impl_ISignificantDigitsNumberRounder<ISignificantDigitsNumberRounder>
{
	ISignificantDigitsNumberRounder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignificantDigitsNumberRounder>>(m_ptr); }
};

struct IIncrementNumberRounder :
	IInspectable,
	impl_IIncrementNumberRounder<IIncrementNumberRounder>
{
	IIncrementNumberRounder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIncrementNumberRounder>>(m_ptr); }
};

struct INumberFormatter :
	IInspectable,
	impl_INumberFormatter<INumberFormatter>
{
	INumberFormatter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberFormatter>>(m_ptr); }
};

struct INumberFormatter2 :
	IInspectable,
	impl_INumberFormatter2<INumberFormatter2>
{
	INumberFormatter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberFormatter2>>(m_ptr); }
};

struct INumberParser :
	IInspectable,
	impl_INumberParser<INumberParser>
{
	INumberParser(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberParser>>(m_ptr); }
};

struct INumberFormatterOptions :
	IInspectable,
	impl_INumberFormatterOptions<INumberFormatterOptions>
{
	INumberFormatterOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberFormatterOptions>>(m_ptr); }
};

struct ISignificantDigitsOption :
	IInspectable,
	impl_ISignificantDigitsOption<ISignificantDigitsOption>
{
	ISignificantDigitsOption(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignificantDigitsOption>>(m_ptr); }
};

struct INumberRounderOption :
	IInspectable,
	impl_INumberRounderOption<INumberRounderOption>
{
	INumberRounderOption(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberRounderOption>>(m_ptr); }
};

struct ISignedZeroOption :
	IInspectable,
	impl_ISignedZeroOption<ISignedZeroOption>
{
	ISignedZeroOption(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignedZeroOption>>(m_ptr); }
};

struct IDecimalFormatterFactory :
	IInspectable,
	impl_IDecimalFormatterFactory<IDecimalFormatterFactory>
{
	IDecimalFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDecimalFormatterFactory>>(m_ptr); }
};

struct IPercentFormatterFactory :
	IInspectable,
	impl_IPercentFormatterFactory<IPercentFormatterFactory>
{
	IPercentFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPercentFormatterFactory>>(m_ptr); }
};

struct IPermilleFormatterFactory :
	IInspectable,
	impl_IPermilleFormatterFactory<IPermilleFormatterFactory>
{
	IPermilleFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPermilleFormatterFactory>>(m_ptr); }
};

struct ICurrencyFormatterFactory :
	IInspectable,
	impl_ICurrencyFormatterFactory<ICurrencyFormatterFactory>
{
	ICurrencyFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrencyFormatterFactory>>(m_ptr); }
};

struct ICurrencyFormatter :
	IInspectable,
	impl_ICurrencyFormatter<ICurrencyFormatter>,
	Requires<ICurrencyFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser>
{
	ICurrencyFormatter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrencyFormatter>>(m_ptr); }
};

struct ICurrencyFormatter2 :
	IInspectable,
	impl_ICurrencyFormatter2<ICurrencyFormatter2>
{
	ICurrencyFormatter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrencyFormatter2>>(m_ptr); }
};

struct INumeralSystemTranslatorFactory :
	IInspectable,
	impl_INumeralSystemTranslatorFactory<INumeralSystemTranslatorFactory>
{
	INumeralSystemTranslatorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumeralSystemTranslatorFactory>>(m_ptr); }
};

struct INumeralSystemTranslator :
	IInspectable,
	impl_INumeralSystemTranslator<INumeralSystemTranslator>
{
	INumeralSystemTranslator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumeralSystemTranslator>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

struct IDisplayInformationStatics :
	IInspectable,
	impl_IDisplayInformationStatics<IDisplayInformationStatics>
{
	IDisplayInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDisplayInformationStatics>>(m_ptr); }
};

struct IDisplayInformation :
	IInspectable,
	impl_IDisplayInformation<IDisplayInformation>
{
	IDisplayInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDisplayInformation>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

struct IBitmapTransform :
	IInspectable,
	impl_IBitmapTransform<IBitmapTransform>
{
	IBitmapTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapTransform>>(m_ptr); }
};

struct IBitmapTypedValue :
	IInspectable,
	impl_IBitmapTypedValue<IBitmapTypedValue>
{
	IBitmapTypedValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapTypedValue>>(m_ptr); }
};

struct IBitmapTypedValueFactory :
	IInspectable,
	impl_IBitmapTypedValueFactory<IBitmapTypedValueFactory>
{
	IBitmapTypedValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapTypedValueFactory>>(m_ptr); }
};

struct IBitmapPropertiesView :
	IInspectable,
	impl_IBitmapPropertiesView<IBitmapPropertiesView>
{
	IBitmapPropertiesView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapPropertiesView>>(m_ptr); }
};

struct IBitmapProperties :
	IInspectable,
	impl_IBitmapProperties<IBitmapProperties>,
	Requires<IBitmapProperties, Windows::Graphics::Imaging::IBitmapPropertiesView>
{
	IBitmapProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapProperties>>(m_ptr); }
};

struct IPixelDataProvider :
	IInspectable,
	impl_IPixelDataProvider<IPixelDataProvider>
{
	IPixelDataProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPixelDataProvider>>(m_ptr); }
};

struct IBitmapFrame :
	IInspectable,
	impl_IBitmapFrame<IBitmapFrame>
{
	IBitmapFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapFrame>>(m_ptr); }
};

struct IBitmapCodecInformation :
	IInspectable,
	impl_IBitmapCodecInformation<IBitmapCodecInformation>
{
	IBitmapCodecInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapCodecInformation>>(m_ptr); }
};

struct IBitmapDecoderStatics :
	IInspectable,
	impl_IBitmapDecoderStatics<IBitmapDecoderStatics>
{
	IBitmapDecoderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapDecoderStatics>>(m_ptr); }
};

struct IBitmapDecoder :
	IInspectable,
	impl_IBitmapDecoder<IBitmapDecoder>
{
	IBitmapDecoder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapDecoder>>(m_ptr); }
};

struct IBitmapEncoderStatics :
	IInspectable,
	impl_IBitmapEncoderStatics<IBitmapEncoderStatics>
{
	IBitmapEncoderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapEncoderStatics>>(m_ptr); }
};

struct IBitmapEncoder :
	IInspectable,
	impl_IBitmapEncoder<IBitmapEncoder>
{
	IBitmapEncoder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapEncoder>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

struct IPrintTaskSourceRequestedHandler :
	IUnknown,
	impl_IPrintTaskSourceRequestedHandler<IPrintTaskSourceRequestedHandler>
{
	IPrintTaskSourceRequestedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskSourceRequestedHandler>>(m_ptr); }
};

struct IPrintTaskOptionsCoreProperties :
	IInspectable,
	impl_IPrintTaskOptionsCoreProperties<IPrintTaskOptionsCoreProperties>
{
	IPrintTaskOptionsCoreProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionsCoreProperties>>(m_ptr); }
};

struct IPrintTaskOptionsCoreUIConfiguration :
	IInspectable,
	impl_IPrintTaskOptionsCoreUIConfiguration<IPrintTaskOptionsCoreUIConfiguration>
{
	IPrintTaskOptionsCoreUIConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionsCoreUIConfiguration>>(m_ptr); }
};

struct IPrintTaskOptionsCore :
	IInspectable,
	impl_IPrintTaskOptionsCore<IPrintTaskOptionsCore>
{
	IPrintTaskOptionsCore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionsCore>>(m_ptr); }
};

struct IStandardPrintTaskOptionsStatic :
	IInspectable,
	impl_IStandardPrintTaskOptionsStatic<IStandardPrintTaskOptionsStatic>
{
	IStandardPrintTaskOptionsStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStandardPrintTaskOptionsStatic>>(m_ptr); }
};

struct IPrintDocumentSource :
	IInspectable,
	impl_IPrintDocumentSource<IPrintDocumentSource>
{
	IPrintDocumentSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintDocumentSource>>(m_ptr); }
};

struct IPrintTaskProgressingEventArgs :
	IInspectable,
	impl_IPrintTaskProgressingEventArgs<IPrintTaskProgressingEventArgs>
{
	IPrintTaskProgressingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskProgressingEventArgs>>(m_ptr); }
};

struct IPrintTaskCompletedEventArgs :
	IInspectable,
	impl_IPrintTaskCompletedEventArgs<IPrintTaskCompletedEventArgs>
{
	IPrintTaskCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskCompletedEventArgs>>(m_ptr); }
};

struct IPrintTask :
	IInspectable,
	impl_IPrintTask<IPrintTask>
{
	IPrintTask(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTask>>(m_ptr); }
};

struct IPrintTaskTargetDeviceSupport :
	IInspectable,
	impl_IPrintTaskTargetDeviceSupport<IPrintTaskTargetDeviceSupport>
{
	IPrintTaskTargetDeviceSupport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskTargetDeviceSupport>>(m_ptr); }
};

struct IPrintTaskSourceRequestedDeferral :
	IInspectable,
	impl_IPrintTaskSourceRequestedDeferral<IPrintTaskSourceRequestedDeferral>
{
	IPrintTaskSourceRequestedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskSourceRequestedDeferral>>(m_ptr); }
};

struct IPrintTaskSourceRequestedArgs :
	IInspectable,
	impl_IPrintTaskSourceRequestedArgs<IPrintTaskSourceRequestedArgs>
{
	IPrintTaskSourceRequestedArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskSourceRequestedArgs>>(m_ptr); }
};

struct IPrintTaskRequestedDeferral :
	IInspectable,
	impl_IPrintTaskRequestedDeferral<IPrintTaskRequestedDeferral>
{
	IPrintTaskRequestedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskRequestedDeferral>>(m_ptr); }
};

struct IPrintTaskRequest :
	IInspectable,
	impl_IPrintTaskRequest<IPrintTaskRequest>
{
	IPrintTaskRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskRequest>>(m_ptr); }
};

struct IPrintTaskRequestedEventArgs :
	IInspectable,
	impl_IPrintTaskRequestedEventArgs<IPrintTaskRequestedEventArgs>
{
	IPrintTaskRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskRequestedEventArgs>>(m_ptr); }
};

struct IPrintManagerStatic :
	IInspectable,
	impl_IPrintManagerStatic<IPrintManagerStatic>
{
	IPrintManagerStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintManagerStatic>>(m_ptr); }
};

struct IPrintManager :
	IInspectable,
	impl_IPrintManager<IPrintManager>
{
	IPrintManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintManager>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

struct IPrintOptionDetails :
	IInspectable,
	impl_IPrintOptionDetails<IPrintOptionDetails>
{
	IPrintOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintOptionDetails>>(m_ptr); }
};

struct IPrintNumberOptionDetails :
	IInspectable,
	impl_IPrintNumberOptionDetails<IPrintNumberOptionDetails>,
	Requires<IPrintNumberOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintNumberOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintNumberOptionDetails>>(m_ptr); }
};

struct IPrintTextOptionDetails :
	IInspectable,
	impl_IPrintTextOptionDetails<IPrintTextOptionDetails>,
	Requires<IPrintTextOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintTextOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTextOptionDetails>>(m_ptr); }
};

struct IPrintItemListOptionDetails :
	IInspectable,
	impl_IPrintItemListOptionDetails<IPrintItemListOptionDetails>,
	Requires<IPrintItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintItemListOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintItemListOptionDetails>>(m_ptr); }
};

struct IPrintCustomOptionDetails :
	IInspectable,
	impl_IPrintCustomOptionDetails<IPrintCustomOptionDetails>,
	Requires<IPrintCustomOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintCustomOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintCustomOptionDetails>>(m_ptr); }
};

struct IPrintCustomTextOptionDetails :
	IInspectable,
	impl_IPrintCustomTextOptionDetails<IPrintCustomTextOptionDetails>,
	Requires<IPrintCustomTextOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintCustomTextOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintCustomTextOptionDetails>>(m_ptr); }
};

struct IPrintCustomItemDetails :
	IInspectable,
	impl_IPrintCustomItemDetails<IPrintCustomItemDetails>
{
	IPrintCustomItemDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintCustomItemDetails>>(m_ptr); }
};

struct IPrintCustomItemListOptionDetails :
	IInspectable,
	impl_IPrintCustomItemListOptionDetails<IPrintCustomItemListOptionDetails>,
	Requires<IPrintCustomItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails>
{
	IPrintCustomItemListOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintCustomItemListOptionDetails>>(m_ptr); }
};

struct IPrintTaskOptionChangedEventArgs :
	IInspectable,
	impl_IPrintTaskOptionChangedEventArgs<IPrintTaskOptionChangedEventArgs>
{
	IPrintTaskOptionChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionChangedEventArgs>>(m_ptr); }
};

struct IPrintTaskOptionDetails :
	IInspectable,
	impl_IPrintTaskOptionDetails<IPrintTaskOptionDetails>
{
	IPrintTaskOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionDetails>>(m_ptr); }
};

struct IPrintTaskOptionDetailsStatic :
	IInspectable,
	impl_IPrintTaskOptionDetailsStatic<IPrintTaskOptionDetailsStatic>
{
	IPrintTaskOptionDetailsStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionDetailsStatic>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

struct IApplicationDataManagerStatics :
	IInspectable,
	impl_IApplicationDataManagerStatics<IApplicationDataManagerStatics>
{
	IApplicationDataManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataManagerStatics>>(m_ptr); }
};

struct IApplicationDataManager :
	IInspectable,
	impl_IApplicationDataManager<IApplicationDataManager>
{
	IApplicationDataManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataManager>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

struct IDeploymentResult :
	IInspectable,
	impl_IDeploymentResult<IDeploymentResult>
{
	IDeploymentResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeploymentResult>>(m_ptr); }
};

struct IPackageUserInformation :
	IInspectable,
	impl_IPackageUserInformation<IPackageUserInformation>
{
	IPackageUserInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageUserInformation>>(m_ptr); }
};

struct IPackageManager :
	IInspectable,
	impl_IPackageManager<IPackageManager>
{
	IPackageManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageManager>>(m_ptr); }
};

struct IPackageManager2 :
	IInspectable,
	impl_IPackageManager2<IPackageManager2>
{
	IPackageManager2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageManager2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

struct IWorkplaceSettingsStatics :
	IInspectable,
	impl_IWorkplaceSettingsStatics<IWorkplaceSettingsStatics>
{
	IWorkplaceSettingsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWorkplaceSettingsStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media {

struct IMediaMarker :
	IInspectable,
	impl_IMediaMarker<IMediaMarker>
{
	IMediaMarker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaMarker>>(m_ptr); }
};

struct IMediaMarkers :
	IInspectable,
	impl_IMediaMarkers<IMediaMarkers>
{
	IMediaMarkers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaMarkers>>(m_ptr); }
};

struct IMediaMarkerTypesStatics :
	IInspectable,
	impl_IMediaMarkerTypesStatics<IMediaMarkerTypesStatics>
{
	IMediaMarkerTypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaMarkerTypesStatics>>(m_ptr); }
};

struct IMusicDisplayProperties :
	IInspectable,
	impl_IMusicDisplayProperties<IMusicDisplayProperties>
{
	IMusicDisplayProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMusicDisplayProperties>>(m_ptr); }
};

struct IVideoDisplayProperties :
	IInspectable,
	impl_IVideoDisplayProperties<IVideoDisplayProperties>
{
	IVideoDisplayProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoDisplayProperties>>(m_ptr); }
};

struct IImageDisplayProperties :
	IInspectable,
	impl_IImageDisplayProperties<IImageDisplayProperties>
{
	IImageDisplayProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageDisplayProperties>>(m_ptr); }
};

struct ISystemMediaTransportControlsDisplayUpdater :
	IInspectable,
	impl_ISystemMediaTransportControlsDisplayUpdater<ISystemMediaTransportControlsDisplayUpdater>
{
	ISystemMediaTransportControlsDisplayUpdater(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControlsDisplayUpdater>>(m_ptr); }
};

struct ISystemMediaTransportControlsButtonPressedEventArgs :
	IInspectable,
	impl_ISystemMediaTransportControlsButtonPressedEventArgs<ISystemMediaTransportControlsButtonPressedEventArgs>
{
	ISystemMediaTransportControlsButtonPressedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControlsButtonPressedEventArgs>>(m_ptr); }
};

struct ISystemMediaTransportControlsPropertyChangedEventArgs :
	IInspectable,
	impl_ISystemMediaTransportControlsPropertyChangedEventArgs<ISystemMediaTransportControlsPropertyChangedEventArgs>
{
	ISystemMediaTransportControlsPropertyChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControlsPropertyChangedEventArgs>>(m_ptr); }
};

struct ISystemMediaTransportControls :
	IInspectable,
	impl_ISystemMediaTransportControls<ISystemMediaTransportControls>
{
	ISystemMediaTransportControls(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControls>>(m_ptr); }
};

struct ISystemMediaTransportControlsStatics :
	IInspectable,
	impl_ISystemMediaTransportControlsStatics<ISystemMediaTransportControlsStatics>
{
	ISystemMediaTransportControlsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControlsStatics>>(m_ptr); }
};

struct IMediaExtension :
	IInspectable,
	impl_IMediaExtension<IMediaExtension>
{
	IMediaExtension(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaExtension>>(m_ptr); }
};

struct IMediaExtensionManager :
	IInspectable,
	impl_IMediaExtensionManager<IMediaExtensionManager>
{
	IMediaExtensionManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaExtensionManager>>(m_ptr); }
};

struct IVideoEffectsStatics :
	IInspectable,
	impl_IVideoEffectsStatics<IVideoEffectsStatics>
{
	IVideoEffectsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoEffectsStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

struct IMediaCaptureFailedEventHandler :
	IUnknown,
	impl_IMediaCaptureFailedEventHandler<IMediaCaptureFailedEventHandler>
{
	IMediaCaptureFailedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureFailedEventHandler>>(m_ptr); }
};

struct IRecordLimitationExceededEventHandler :
	IUnknown,
	impl_IRecordLimitationExceededEventHandler<IRecordLimitationExceededEventHandler>
{
	IRecordLimitationExceededEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRecordLimitationExceededEventHandler>>(m_ptr); }
};

struct ICameraCaptureUIPhotoCaptureSettings :
	IInspectable,
	impl_ICameraCaptureUIPhotoCaptureSettings<ICameraCaptureUIPhotoCaptureSettings>
{
	ICameraCaptureUIPhotoCaptureSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraCaptureUIPhotoCaptureSettings>>(m_ptr); }
};

struct ICameraCaptureUIVideoCaptureSettings :
	IInspectable,
	impl_ICameraCaptureUIVideoCaptureSettings<ICameraCaptureUIVideoCaptureSettings>
{
	ICameraCaptureUIVideoCaptureSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraCaptureUIVideoCaptureSettings>>(m_ptr); }
};

struct ICameraCaptureUI :
	IInspectable,
	impl_ICameraCaptureUI<ICameraCaptureUI>
{
	ICameraCaptureUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraCaptureUI>>(m_ptr); }
};

struct ICameraOptionsUIStatics :
	IInspectable,
	impl_ICameraOptionsUIStatics<ICameraOptionsUIStatics>
{
	ICameraOptionsUIStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraOptionsUIStatics>>(m_ptr); }
};

struct IMediaCaptureFailedEventArgs :
	IInspectable,
	impl_IMediaCaptureFailedEventArgs<IMediaCaptureFailedEventArgs>
{
	IMediaCaptureFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureFailedEventArgs>>(m_ptr); }
};

struct IMediaCaptureInitializationSettings :
	IInspectable,
	impl_IMediaCaptureInitializationSettings<IMediaCaptureInitializationSettings>
{
	IMediaCaptureInitializationSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureInitializationSettings>>(m_ptr); }
};

struct IMediaCaptureInitializationSettings2 :
	IInspectable,
	impl_IMediaCaptureInitializationSettings2<IMediaCaptureInitializationSettings2>
{
	IMediaCaptureInitializationSettings2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureInitializationSettings2>>(m_ptr); }
};

struct IMediaCapture :
	IInspectable,
	impl_IMediaCapture<IMediaCapture>
{
	IMediaCapture(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCapture>>(m_ptr); }
};

struct IMediaCapture2 :
	IInspectable,
	impl_IMediaCapture2<IMediaCapture2>
{
	IMediaCapture2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCapture2>>(m_ptr); }
};

struct ILowLagPhotoCapture :
	IInspectable,
	impl_ILowLagPhotoCapture<ILowLagPhotoCapture>
{
	ILowLagPhotoCapture(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagPhotoCapture>>(m_ptr); }
};

struct ILowLagMediaRecording :
	IInspectable,
	impl_ILowLagMediaRecording<ILowLagMediaRecording>
{
	ILowLagMediaRecording(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagMediaRecording>>(m_ptr); }
};

struct ILowLagPhotoSequenceCapture :
	IInspectable,
	impl_ILowLagPhotoSequenceCapture<ILowLagPhotoSequenceCapture>
{
	ILowLagPhotoSequenceCapture(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagPhotoSequenceCapture>>(m_ptr); }
};

struct IPhotoCapturedEventArgs :
	IInspectable,
	impl_IPhotoCapturedEventArgs<IPhotoCapturedEventArgs>
{
	IPhotoCapturedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPhotoCapturedEventArgs>>(m_ptr); }
};

struct ICapturedPhoto :
	IInspectable,
	impl_ICapturedPhoto<ICapturedPhoto>
{
	ICapturedPhoto(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICapturedPhoto>>(m_ptr); }
};

struct ICapturedFrame :
	IInspectable,
	impl_ICapturedFrame<ICapturedFrame>,
	Requires<ICapturedFrame, Windows::Storage::Streams::IRandomAccessStreamWithContentType, Windows::Storage::Streams::IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream, Windows::Storage::Streams::IContentTypeProvider>
{
	ICapturedFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICapturedFrame>>(m_ptr); }
};

struct IMediaCaptureVideoPreview :
	IInspectable,
	impl_IMediaCaptureVideoPreview<IMediaCaptureVideoPreview>
{
	IMediaCaptureVideoPreview(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureVideoPreview>>(m_ptr); }
};

struct IMediaCaptureSettings :
	IInspectable,
	impl_IMediaCaptureSettings<IMediaCaptureSettings>
{
	IMediaCaptureSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureSettings>>(m_ptr); }
};

struct IMediaCaptureSettings2 :
	IInspectable,
	impl_IMediaCaptureSettings2<IMediaCaptureSettings2>
{
	IMediaCaptureSettings2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureSettings2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

struct IRatedContentDescription :
	IInspectable,
	impl_IRatedContentDescription<IRatedContentDescription>
{
	IRatedContentDescription(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRatedContentDescription>>(m_ptr); }
};

struct IRatedContentDescriptionFactory :
	IInspectable,
	impl_IRatedContentDescriptionFactory<IRatedContentDescriptionFactory>
{
	IRatedContentDescriptionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRatedContentDescriptionFactory>>(m_ptr); }
};

struct IContentRestrictionsBrowsePolicy :
	IInspectable,
	impl_IContentRestrictionsBrowsePolicy<IContentRestrictionsBrowsePolicy>
{
	IContentRestrictionsBrowsePolicy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentRestrictionsBrowsePolicy>>(m_ptr); }
};

struct IRatedContentRestrictions :
	IInspectable,
	impl_IRatedContentRestrictions<IRatedContentRestrictions>
{
	IRatedContentRestrictions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRatedContentRestrictions>>(m_ptr); }
};

struct IRatedContentRestrictionsFactory :
	IInspectable,
	impl_IRatedContentRestrictionsFactory<IRatedContentRestrictionsFactory>
{
	IRatedContentRestrictionsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRatedContentRestrictionsFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

struct IMediaStreamDescriptor :
	IInspectable,
	impl_IMediaStreamDescriptor<IMediaStreamDescriptor>
{
	IMediaStreamDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamDescriptor>>(m_ptr); }
};

struct IAudioStreamDescriptor :
	IInspectable,
	impl_IAudioStreamDescriptor<IAudioStreamDescriptor>,
	Requires<IAudioStreamDescriptor, Windows::Media::Core::IMediaStreamDescriptor>
{
	IAudioStreamDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioStreamDescriptor>>(m_ptr); }
};

struct IAudioStreamDescriptorFactory :
	IInspectable,
	impl_IAudioStreamDescriptorFactory<IAudioStreamDescriptorFactory>
{
	IAudioStreamDescriptorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioStreamDescriptorFactory>>(m_ptr); }
};

struct IVideoStreamDescriptor :
	IInspectable,
	impl_IVideoStreamDescriptor<IVideoStreamDescriptor>,
	Requires<IVideoStreamDescriptor, Windows::Media::Core::IMediaStreamDescriptor>
{
	IVideoStreamDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoStreamDescriptor>>(m_ptr); }
};

struct IVideoStreamDescriptorFactory :
	IInspectable,
	impl_IVideoStreamDescriptorFactory<IVideoStreamDescriptorFactory>
{
	IVideoStreamDescriptorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoStreamDescriptorFactory>>(m_ptr); }
};

struct IMediaSource :
	IInspectable,
	impl_IMediaSource<IMediaSource>
{
	IMediaSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaSource>>(m_ptr); }
};

struct IMediaStreamSource :
	IInspectable,
	impl_IMediaStreamSource<IMediaStreamSource>,
	Requires<IMediaStreamSource, Windows::Media::Core::IMediaSource>
{
	IMediaStreamSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSource>>(m_ptr); }
};

struct IMediaStreamSourceFactory :
	IInspectable,
	impl_IMediaStreamSourceFactory<IMediaStreamSourceFactory>
{
	IMediaStreamSourceFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceFactory>>(m_ptr); }
};

struct IMediaStreamSample :
	IInspectable,
	impl_IMediaStreamSample<IMediaStreamSample>
{
	IMediaStreamSample(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSample>>(m_ptr); }
};

struct IMediaStreamSampleStatics :
	IInspectable,
	impl_IMediaStreamSampleStatics<IMediaStreamSampleStatics>
{
	IMediaStreamSampleStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSampleStatics>>(m_ptr); }
};

struct IMediaStreamSampleProtectionProperties :
	IInspectable,
	impl_IMediaStreamSampleProtectionProperties<IMediaStreamSampleProtectionProperties>
{
	IMediaStreamSampleProtectionProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSampleProtectionProperties>>(m_ptr); }
};

struct IMediaStreamSourceClosedRequest :
	IInspectable,
	impl_IMediaStreamSourceClosedRequest<IMediaStreamSourceClosedRequest>
{
	IMediaStreamSourceClosedRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceClosedRequest>>(m_ptr); }
};

struct IMediaStreamSourceClosedEventArgs :
	IInspectable,
	impl_IMediaStreamSourceClosedEventArgs<IMediaStreamSourceClosedEventArgs>
{
	IMediaStreamSourceClosedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceClosedEventArgs>>(m_ptr); }
};

struct IMediaStreamSourceStartingRequestDeferral :
	IInspectable,
	impl_IMediaStreamSourceStartingRequestDeferral<IMediaStreamSourceStartingRequestDeferral>
{
	IMediaStreamSourceStartingRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceStartingRequestDeferral>>(m_ptr); }
};

struct IMediaStreamSourceStartingRequest :
	IInspectable,
	impl_IMediaStreamSourceStartingRequest<IMediaStreamSourceStartingRequest>
{
	IMediaStreamSourceStartingRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceStartingRequest>>(m_ptr); }
};

struct IMediaStreamSourceStartingEventArgs :
	IInspectable,
	impl_IMediaStreamSourceStartingEventArgs<IMediaStreamSourceStartingEventArgs>
{
	IMediaStreamSourceStartingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceStartingEventArgs>>(m_ptr); }
};

struct IMediaStreamSourceSampleRequestDeferral :
	IInspectable,
	impl_IMediaStreamSourceSampleRequestDeferral<IMediaStreamSourceSampleRequestDeferral>
{
	IMediaStreamSourceSampleRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSampleRequestDeferral>>(m_ptr); }
};

struct IMediaStreamSourceSampleRequest :
	IInspectable,
	impl_IMediaStreamSourceSampleRequest<IMediaStreamSourceSampleRequest>
{
	IMediaStreamSourceSampleRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSampleRequest>>(m_ptr); }
};

struct IMediaStreamSourceSampleRequestedEventArgs :
	IInspectable,
	impl_IMediaStreamSourceSampleRequestedEventArgs<IMediaStreamSourceSampleRequestedEventArgs>
{
	IMediaStreamSourceSampleRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSampleRequestedEventArgs>>(m_ptr); }
};

struct IMediaStreamSourceSwitchStreamsRequestDeferral :
	IInspectable,
	impl_IMediaStreamSourceSwitchStreamsRequestDeferral<IMediaStreamSourceSwitchStreamsRequestDeferral>
{
	IMediaStreamSourceSwitchStreamsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSwitchStreamsRequestDeferral>>(m_ptr); }
};

struct IMediaStreamSourceSwitchStreamsRequest :
	IInspectable,
	impl_IMediaStreamSourceSwitchStreamsRequest<IMediaStreamSourceSwitchStreamsRequest>
{
	IMediaStreamSourceSwitchStreamsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSwitchStreamsRequest>>(m_ptr); }
};

struct IMediaStreamSourceSwitchStreamsRequestedEventArgs :
	IInspectable,
	impl_IMediaStreamSourceSwitchStreamsRequestedEventArgs<IMediaStreamSourceSwitchStreamsRequestedEventArgs>
{
	IMediaStreamSourceSwitchStreamsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSwitchStreamsRequestedEventArgs>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

struct ICallControlEventHandler :
	IUnknown,
	impl_ICallControlEventHandler<ICallControlEventHandler>
{
	ICallControlEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICallControlEventHandler>>(m_ptr); }
};

struct IDialRequestedEventHandler :
	IUnknown,
	impl_IDialRequestedEventHandler<IDialRequestedEventHandler>
{
	IDialRequestedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDialRequestedEventHandler>>(m_ptr); }
};

struct IRedialRequestedEventHandler :
	IUnknown,
	impl_IRedialRequestedEventHandler<IRedialRequestedEventHandler>
{
	IRedialRequestedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRedialRequestedEventHandler>>(m_ptr); }
};

struct IKeypadPressedEventHandler :
	IUnknown,
	impl_IKeypadPressedEventHandler<IKeypadPressedEventHandler>
{
	IKeypadPressedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeypadPressedEventHandler>>(m_ptr); }
};

struct IDialRequestedEventArgs :
	IInspectable,
	impl_IDialRequestedEventArgs<IDialRequestedEventArgs>
{
	IDialRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDialRequestedEventArgs>>(m_ptr); }
};

struct IRedialRequestedEventArgs :
	IInspectable,
	impl_IRedialRequestedEventArgs<IRedialRequestedEventArgs>
{
	IRedialRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRedialRequestedEventArgs>>(m_ptr); }
};

struct IKeypadPressedEventArgs :
	IInspectable,
	impl_IKeypadPressedEventArgs<IKeypadPressedEventArgs>
{
	IKeypadPressedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeypadPressedEventArgs>>(m_ptr); }
};

struct ICallControl :
	IInspectable,
	impl_ICallControl<ICallControl>
{
	ICallControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICallControl>>(m_ptr); }
};

struct ICallControlStatics :
	IInspectable,
	impl_ICallControlStatics<ICallControlStatics>
{
	ICallControlStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICallControlStatics>>(m_ptr); }
};

struct IDefaultAudioDeviceChangedEventArgs :
	IInspectable,
	impl_IDefaultAudioDeviceChangedEventArgs<IDefaultAudioDeviceChangedEventArgs>
{
	IDefaultAudioDeviceChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDefaultAudioDeviceChangedEventArgs>>(m_ptr); }
};

struct IMediaDeviceStatics :
	IInspectable,
	impl_IMediaDeviceStatics<IMediaDeviceStatics>
{
	IMediaDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaDeviceStatics>>(m_ptr); }
};

struct ISceneModeControl :
	IInspectable,
	impl_ISceneModeControl<ISceneModeControl>
{
	ISceneModeControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISceneModeControl>>(m_ptr); }
};

struct ITorchControl :
	IInspectable,
	impl_ITorchControl<ITorchControl>
{
	ITorchControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITorchControl>>(m_ptr); }
};

struct IFlashControl :
	IInspectable,
	impl_IFlashControl<IFlashControl>
{
	IFlashControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlashControl>>(m_ptr); }
};

struct IExposureCompensationControl :
	IInspectable,
	impl_IExposureCompensationControl<IExposureCompensationControl>
{
	IExposureCompensationControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExposureCompensationControl>>(m_ptr); }
};

struct IIsoSpeedControl :
	IInspectable,
	impl_IIsoSpeedControl<IIsoSpeedControl>
{
	IIsoSpeedControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIsoSpeedControl>>(m_ptr); }
};

struct IWhiteBalanceControl :
	IInspectable,
	impl_IWhiteBalanceControl<IWhiteBalanceControl>
{
	IWhiteBalanceControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWhiteBalanceControl>>(m_ptr); }
};

struct IExposureControl :
	IInspectable,
	impl_IExposureControl<IExposureControl>
{
	IExposureControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExposureControl>>(m_ptr); }
};

struct IFocusControl :
	IInspectable,
	impl_IFocusControl<IFocusControl>
{
	IFocusControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFocusControl>>(m_ptr); }
};

struct IRegionOfInterest :
	IInspectable,
	impl_IRegionOfInterest<IRegionOfInterest>
{
	IRegionOfInterest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRegionOfInterest>>(m_ptr); }
};

struct IRegionsOfInterestControl :
	IInspectable,
	impl_IRegionsOfInterestControl<IRegionsOfInterestControl>
{
	IRegionsOfInterestControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRegionsOfInterestControl>>(m_ptr); }
};

struct IMediaDeviceController :
	IInspectable,
	impl_IMediaDeviceController<IMediaDeviceController>
{
	IMediaDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaDeviceController>>(m_ptr); }
};

struct IAudioDeviceController :
	IInspectable,
	impl_IAudioDeviceController<IAudioDeviceController>,
	Requires<IAudioDeviceController, Windows::Media::Devices::IMediaDeviceController>
{
	IAudioDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioDeviceController>>(m_ptr); }
};

struct IVideoDeviceController :
	IInspectable,
	impl_IVideoDeviceController<IVideoDeviceController>,
	Requires<IVideoDeviceController, Windows::Media::Devices::IMediaDeviceController>
{
	IVideoDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoDeviceController>>(m_ptr); }
};

struct IAdvancedVideoCaptureDeviceController2 :
	IInspectable,
	impl_IAdvancedVideoCaptureDeviceController2<IAdvancedVideoCaptureDeviceController2>
{
	IAdvancedVideoCaptureDeviceController2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAdvancedVideoCaptureDeviceController2>>(m_ptr); }
};

struct IMediaDeviceControl :
	IInspectable,
	impl_IMediaDeviceControl<IMediaDeviceControl>
{
	IMediaDeviceControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaDeviceControl>>(m_ptr); }
};

struct IMediaDeviceControlCapabilities :
	IInspectable,
	impl_IMediaDeviceControlCapabilities<IMediaDeviceControlCapabilities>
{
	IMediaDeviceControlCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaDeviceControlCapabilities>>(m_ptr); }
};

struct IAdvancedVideoCaptureDeviceController :
	IInspectable,
	impl_IAdvancedVideoCaptureDeviceController<IAdvancedVideoCaptureDeviceController>
{
	IAdvancedVideoCaptureDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAdvancedVideoCaptureDeviceController>>(m_ptr); }
};

struct ILowLagPhotoSequenceControl :
	IInspectable,
	impl_ILowLagPhotoSequenceControl<ILowLagPhotoSequenceControl>
{
	ILowLagPhotoSequenceControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagPhotoSequenceControl>>(m_ptr); }
};

struct ILowLagPhotoControl :
	IInspectable,
	impl_ILowLagPhotoControl<ILowLagPhotoControl>
{
	ILowLagPhotoControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagPhotoControl>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

struct IAudioEffect :
	IInspectable,
	impl_IAudioEffect<IAudioEffect>
{
	IAudioEffect(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEffect>>(m_ptr); }
};

struct IAudioEffectsManagerStatics :
	IInspectable,
	impl_IAudioEffectsManagerStatics<IAudioEffectsManagerStatics>
{
	IAudioEffectsManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEffectsManagerStatics>>(m_ptr); }
};

struct IAudioRenderEffectsManager :
	IInspectable,
	impl_IAudioRenderEffectsManager<IAudioRenderEffectsManager>
{
	IAudioRenderEffectsManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioRenderEffectsManager>>(m_ptr); }
};

struct IAudioCaptureEffectsManager :
	IInspectable,
	impl_IAudioCaptureEffectsManager<IAudioCaptureEffectsManager>
{
	IAudioCaptureEffectsManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioCaptureEffectsManager>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

struct IMediaRatio :
	IInspectable,
	impl_IMediaRatio<IMediaRatio>
{
	IMediaRatio(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaRatio>>(m_ptr); }
};

struct IMediaEncodingProperties :
	IInspectable,
	impl_IMediaEncodingProperties<IMediaEncodingProperties>
{
	IMediaEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingProperties>>(m_ptr); }
};

struct IAudioEncodingProperties :
	IInspectable,
	impl_IAudioEncodingProperties<IAudioEncodingProperties>,
	Requires<IAudioEncodingProperties, Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	IAudioEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEncodingProperties>>(m_ptr); }
};

struct IAudioEncodingPropertiesWithFormatUserData :
	IInspectable,
	impl_IAudioEncodingPropertiesWithFormatUserData<IAudioEncodingPropertiesWithFormatUserData>
{
	IAudioEncodingPropertiesWithFormatUserData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEncodingPropertiesWithFormatUserData>>(m_ptr); }
};

struct IAudioEncodingPropertiesStatics :
	IInspectable,
	impl_IAudioEncodingPropertiesStatics<IAudioEncodingPropertiesStatics>
{
	IAudioEncodingPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEncodingPropertiesStatics>>(m_ptr); }
};

struct IVideoEncodingProperties :
	IInspectable,
	impl_IVideoEncodingProperties<IVideoEncodingProperties>,
	Requires<IVideoEncodingProperties, Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	IVideoEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoEncodingProperties>>(m_ptr); }
};

struct IMediaEncodingSubtypesStatics :
	IInspectable,
	impl_IMediaEncodingSubtypesStatics<IMediaEncodingSubtypesStatics>
{
	IMediaEncodingSubtypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingSubtypesStatics>>(m_ptr); }
};

struct IH264ProfileIdsStatics :
	IInspectable,
	impl_IH264ProfileIdsStatics<IH264ProfileIdsStatics>
{
	IH264ProfileIdsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IH264ProfileIdsStatics>>(m_ptr); }
};

struct IMpeg2ProfileIdsStatics :
	IInspectable,
	impl_IMpeg2ProfileIdsStatics<IMpeg2ProfileIdsStatics>
{
	IMpeg2ProfileIdsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMpeg2ProfileIdsStatics>>(m_ptr); }
};

struct IVideoEncodingProperties2 :
	IInspectable,
	impl_IVideoEncodingProperties2<IVideoEncodingProperties2>
{
	IVideoEncodingProperties2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoEncodingProperties2>>(m_ptr); }
};

struct IVideoEncodingPropertiesStatics :
	IInspectable,
	impl_IVideoEncodingPropertiesStatics<IVideoEncodingPropertiesStatics>
{
	IVideoEncodingPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoEncodingPropertiesStatics>>(m_ptr); }
};

struct IImageEncodingProperties :
	IInspectable,
	impl_IImageEncodingProperties<IImageEncodingProperties>,
	Requires<IImageEncodingProperties, Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	IImageEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageEncodingProperties>>(m_ptr); }
};

struct IImageEncodingPropertiesStatics :
	IInspectable,
	impl_IImageEncodingPropertiesStatics<IImageEncodingPropertiesStatics>
{
	IImageEncodingPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageEncodingPropertiesStatics>>(m_ptr); }
};

struct IImageEncodingPropertiesStatics2 :
	IInspectable,
	impl_IImageEncodingPropertiesStatics2<IImageEncodingPropertiesStatics2>
{
	IImageEncodingPropertiesStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageEncodingPropertiesStatics2>>(m_ptr); }
};

struct IContainerEncodingProperties :
	IInspectable,
	impl_IContainerEncodingProperties<IContainerEncodingProperties>,
	Requires<IContainerEncodingProperties, Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	IContainerEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContainerEncodingProperties>>(m_ptr); }
};

struct IMediaEncodingProfileStatics :
	IInspectable,
	impl_IMediaEncodingProfileStatics<IMediaEncodingProfileStatics>
{
	IMediaEncodingProfileStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingProfileStatics>>(m_ptr); }
};

struct IMediaEncodingProfileStatics2 :
	IInspectable,
	impl_IMediaEncodingProfileStatics2<IMediaEncodingProfileStatics2>
{
	IMediaEncodingProfileStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingProfileStatics2>>(m_ptr); }
};

struct IMediaEncodingProfile :
	IInspectable,
	impl_IMediaEncodingProfile<IMediaEncodingProfile>
{
	IMediaEncodingProfile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingProfile>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

struct ISourceChangeRequestedEventArgs :
	IInspectable,
	impl_ISourceChangeRequestedEventArgs<ISourceChangeRequestedEventArgs>
{
	ISourceChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISourceChangeRequestedEventArgs>>(m_ptr); }
};

struct IPlaybackRateChangeRequestedEventArgs :
	IInspectable,
	impl_IPlaybackRateChangeRequestedEventArgs<IPlaybackRateChangeRequestedEventArgs>
{
	IPlaybackRateChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlaybackRateChangeRequestedEventArgs>>(m_ptr); }
};

struct ICurrentTimeChangeRequestedEventArgs :
	IInspectable,
	impl_ICurrentTimeChangeRequestedEventArgs<ICurrentTimeChangeRequestedEventArgs>
{
	ICurrentTimeChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentTimeChangeRequestedEventArgs>>(m_ptr); }
};

struct IMuteChangeRequestedEventArgs :
	IInspectable,
	impl_IMuteChangeRequestedEventArgs<IMuteChangeRequestedEventArgs>
{
	IMuteChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMuteChangeRequestedEventArgs>>(m_ptr); }
};

struct IVolumeChangeRequestedEventArgs :
	IInspectable,
	impl_IVolumeChangeRequestedEventArgs<IVolumeChangeRequestedEventArgs>
{
	IVolumeChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVolumeChangeRequestedEventArgs>>(m_ptr); }
};

struct IPlayToReceiver :
	IInspectable,
	impl_IPlayToReceiver<IPlayToReceiver>
{
	IPlayToReceiver(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToReceiver>>(m_ptr); }
};

struct IPlayToSource :
	IInspectable,
	impl_IPlayToSource<IPlayToSource>
{
	IPlayToSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSource>>(m_ptr); }
};

struct IPlayToSourceWithPreferredSourceUri :
	IInspectable,
	impl_IPlayToSourceWithPreferredSourceUri<IPlayToSourceWithPreferredSourceUri>
{
	IPlayToSourceWithPreferredSourceUri(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceWithPreferredSourceUri>>(m_ptr); }
};

struct IPlayToConnectionStateChangedEventArgs :
	IInspectable,
	impl_IPlayToConnectionStateChangedEventArgs<IPlayToConnectionStateChangedEventArgs>
{
	IPlayToConnectionStateChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToConnectionStateChangedEventArgs>>(m_ptr); }
};

struct IPlayToConnectionTransferredEventArgs :
	IInspectable,
	impl_IPlayToConnectionTransferredEventArgs<IPlayToConnectionTransferredEventArgs>
{
	IPlayToConnectionTransferredEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToConnectionTransferredEventArgs>>(m_ptr); }
};

struct IPlayToConnectionErrorEventArgs :
	IInspectable,
	impl_IPlayToConnectionErrorEventArgs<IPlayToConnectionErrorEventArgs>
{
	IPlayToConnectionErrorEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToConnectionErrorEventArgs>>(m_ptr); }
};

struct IPlayToConnection :
	IInspectable,
	impl_IPlayToConnection<IPlayToConnection>
{
	IPlayToConnection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToConnection>>(m_ptr); }
};

struct IPlayToSourceSelectedEventArgs :
	IInspectable,
	impl_IPlayToSourceSelectedEventArgs<IPlayToSourceSelectedEventArgs>
{
	IPlayToSourceSelectedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceSelectedEventArgs>>(m_ptr); }
};

struct IPlayToSourceDeferral :
	IInspectable,
	impl_IPlayToSourceDeferral<IPlayToSourceDeferral>
{
	IPlayToSourceDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceDeferral>>(m_ptr); }
};

struct IPlayToSourceRequest :
	IInspectable,
	impl_IPlayToSourceRequest<IPlayToSourceRequest>
{
	IPlayToSourceRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceRequest>>(m_ptr); }
};

struct IPlayToSourceRequestedEventArgs :
	IInspectable,
	impl_IPlayToSourceRequestedEventArgs<IPlayToSourceRequestedEventArgs>
{
	IPlayToSourceRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceRequestedEventArgs>>(m_ptr); }
};

struct IPlayToManager :
	IInspectable,
	impl_IPlayToManager<IPlayToManager>
{
	IPlayToManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToManager>>(m_ptr); }
};

struct IPlayToManagerStatics :
	IInspectable,
	impl_IPlayToManagerStatics<IPlayToManagerStatics>
{
	IPlayToManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToManagerStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

struct IPlaylist :
	IInspectable,
	impl_IPlaylist<IPlaylist>
{
	IPlaylist(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlaylist>>(m_ptr); }
};

struct IPlaylistStatics :
	IInspectable,
	impl_IPlaylistStatics<IPlaylistStatics>
{
	IPlaylistStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlaylistStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

struct IServiceRequestedEventHandler :
	IUnknown,
	impl_IServiceRequestedEventHandler<IServiceRequestedEventHandler>
{
	IServiceRequestedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IServiceRequestedEventHandler>>(m_ptr); }
};

struct IRebootNeededEventHandler :
	IUnknown,
	impl_IRebootNeededEventHandler<IRebootNeededEventHandler>
{
	IRebootNeededEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRebootNeededEventHandler>>(m_ptr); }
};

struct IComponentLoadFailedEventHandler :
	IUnknown,
	impl_IComponentLoadFailedEventHandler<IComponentLoadFailedEventHandler>
{
	IComponentLoadFailedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComponentLoadFailedEventHandler>>(m_ptr); }
};

struct IMediaProtectionManager :
	IInspectable,
	impl_IMediaProtectionManager<IMediaProtectionManager>
{
	IMediaProtectionManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaProtectionManager>>(m_ptr); }
};

struct IMediaProtectionServiceCompletion :
	IInspectable,
	impl_IMediaProtectionServiceCompletion<IMediaProtectionServiceCompletion>
{
	IMediaProtectionServiceCompletion(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaProtectionServiceCompletion>>(m_ptr); }
};

struct IServiceRequestedEventArgs :
	IInspectable,
	impl_IServiceRequestedEventArgs<IServiceRequestedEventArgs>
{
	IServiceRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IServiceRequestedEventArgs>>(m_ptr); }
};

struct IMediaProtectionServiceRequest :
	IInspectable,
	impl_IMediaProtectionServiceRequest<IMediaProtectionServiceRequest>
{
	IMediaProtectionServiceRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaProtectionServiceRequest>>(m_ptr); }
};

struct IComponentLoadFailedEventArgs :
	IInspectable,
	impl_IComponentLoadFailedEventArgs<IComponentLoadFailedEventArgs>
{
	IComponentLoadFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComponentLoadFailedEventArgs>>(m_ptr); }
};

struct IRevocationAndRenewalInformation :
	IInspectable,
	impl_IRevocationAndRenewalInformation<IRevocationAndRenewalInformation>
{
	IRevocationAndRenewalInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRevocationAndRenewalInformation>>(m_ptr); }
};

struct IRevocationAndRenewalItem :
	IInspectable,
	impl_IRevocationAndRenewalItem<IRevocationAndRenewalItem>
{
	IRevocationAndRenewalItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRevocationAndRenewalItem>>(m_ptr); }
};

struct IComponentRenewalStatics :
	IInspectable,
	impl_IComponentRenewalStatics<IComponentRenewalStatics>
{
	IComponentRenewalStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComponentRenewalStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

struct IVoiceInformation :
	IInspectable,
	impl_IVoiceInformation<IVoiceInformation>
{
	IVoiceInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVoiceInformation>>(m_ptr); }
};

struct IInstalledVoicesStatic :
	IInspectable,
	impl_IInstalledVoicesStatic<IInstalledVoicesStatic>
{
	IInstalledVoicesStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInstalledVoicesStatic>>(m_ptr); }
};

struct ISpeechSynthesisStream :
	IInspectable,
	impl_ISpeechSynthesisStream<ISpeechSynthesisStream>,
	Requires<ISpeechSynthesisStream, Windows::Storage::Streams::IRandomAccessStreamWithContentType, Windows::Storage::Streams::IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream, Windows::Storage::Streams::IContentTypeProvider>
{
	ISpeechSynthesisStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpeechSynthesisStream>>(m_ptr); }
};

struct ISpeechSynthesizer :
	IInspectable,
	impl_ISpeechSynthesizer<ISpeechSynthesizer>
{
	ISpeechSynthesizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpeechSynthesizer>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

struct IDeviceControllerFinderHandler :
	IUnknown,
	impl_IDeviceControllerFinderHandler<IDeviceControllerFinderHandler>
{
	IDeviceControllerFinderHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceControllerFinderHandler>>(m_ptr); }
};

struct IConnectionStatusHandler :
	IUnknown,
	impl_IConnectionStatusHandler<IConnectionStatusHandler>
{
	IConnectionStatusHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionStatusHandler>>(m_ptr); }
};

struct IDeviceController :
	IInspectable,
	impl_IDeviceController<IDeviceController>
{
	IDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceController>>(m_ptr); }
};

struct IBasicDevice :
	IInspectable,
	impl_IBasicDevice<IBasicDevice>
{
	IBasicDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBasicDevice>>(m_ptr); }
};

struct IActiveBasicDevice :
	IInspectable,
	impl_IActiveBasicDevice<IActiveBasicDevice>,
	Requires<IActiveBasicDevice, IBasicDevice>
{
	IActiveBasicDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActiveBasicDevice>>(m_ptr); }
};

struct IDeviceIcon :
	IInspectable,
	impl_IDeviceIcon<IDeviceIcon>
{
	IDeviceIcon(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceIcon>>(m_ptr); }
};

struct IActiveBasicDeviceStatics :
	IInspectable,
	impl_IActiveBasicDeviceStatics<IActiveBasicDeviceStatics>
{
	IActiveBasicDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActiveBasicDeviceStatics>>(m_ptr); }
};

struct IDevicePair :
	IInspectable,
	impl_IDevicePair<IDevicePair>
{
	IDevicePair(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDevicePair>>(m_ptr); }
};

struct ITransportParametersUpdateHandler :
	IUnknown,
	impl_ITransportParametersUpdateHandler<ITransportParametersUpdateHandler>
{
	ITransportParametersUpdateHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransportParametersUpdateHandler>>(m_ptr); }
};

struct IRenderingParametersUpdateHandler :
	IUnknown,
	impl_IRenderingParametersUpdateHandler<IRenderingParametersUpdateHandler>
{
	IRenderingParametersUpdateHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRenderingParametersUpdateHandler>>(m_ptr); }
};

struct IMediaRenderer :
	IInspectable,
	impl_IMediaRenderer<IMediaRenderer>,
	Requires<IMediaRenderer, IBasicDevice>
{
	IMediaRenderer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaRenderer>>(m_ptr); }
};

struct IMediaRendererActionInformation :
	IInspectable,
	impl_IMediaRendererActionInformation<IMediaRendererActionInformation>
{
	IMediaRendererActionInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaRendererActionInformation>>(m_ptr); }
};

struct ITransportParameters :
	IInspectable,
	impl_ITransportParameters<ITransportParameters>
{
	ITransportParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransportParameters>>(m_ptr); }
};

struct IMediaRendererFactory :
	IInspectable,
	impl_IMediaRendererFactory<IMediaRendererFactory>
{
	IMediaRendererFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaRendererFactory>>(m_ptr); }
};

struct IStreamSelectorStatics :
	IInspectable,
	impl_IStreamSelectorStatics<IStreamSelectorStatics>
{
	IStreamSelectorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSelectorStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

struct IMediaTranscoder2 :
	IInspectable,
	impl_IMediaTranscoder2<IMediaTranscoder2>
{
	IMediaTranscoder2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaTranscoder2>>(m_ptr); }
};

struct IMediaTranscoder :
	IInspectable,
	impl_IMediaTranscoder<IMediaTranscoder>
{
	IMediaTranscoder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaTranscoder>>(m_ptr); }
};

struct IPrepareTranscodeResult :
	IInspectable,
	impl_IPrepareTranscodeResult<IPrepareTranscodeResult>
{
	IPrepareTranscodeResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrepareTranscodeResult>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking {

struct IHostNameStatics :
	IInspectable,
	impl_IHostNameStatics<IHostNameStatics>
{
	IHostNameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHostNameStatics>>(m_ptr); }
};

struct IHostName :
	IInspectable,
	impl_IHostName<IHostName>
{
	IHostName(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHostName>>(m_ptr); }
};

struct IHostNameFactory :
	IInspectable,
	impl_IHostNameFactory<IHostNameFactory>
{
	IHostNameFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHostNameFactory>>(m_ptr); }
};

struct IEndpointPair :
	IInspectable,
	impl_IEndpointPair<IEndpointPair>
{
	IEndpointPair(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEndpointPair>>(m_ptr); }
};

struct IEndpointPairFactory :
	IInspectable,
	impl_IEndpointPairFactory<IEndpointPairFactory>
{
	IEndpointPairFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEndpointPairFactory>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

struct IBackgroundTransferBase :
	IInspectable,
	impl_IBackgroundTransferBase<IBackgroundTransferBase>
{
	IBackgroundTransferBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferBase>>(m_ptr); }
};

struct IUnconstrainedTransferRequestResult :
	IInspectable,
	impl_IUnconstrainedTransferRequestResult<IUnconstrainedTransferRequestResult>
{
	IUnconstrainedTransferRequestResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnconstrainedTransferRequestResult>>(m_ptr); }
};

struct IBackgroundDownloaderUserConsent :
	IInspectable,
	impl_IBackgroundDownloaderUserConsent<IBackgroundDownloaderUserConsent>
{
	IBackgroundDownloaderUserConsent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloaderUserConsent>>(m_ptr); }
};

struct IBackgroundUploaderUserConsent :
	IInspectable,
	impl_IBackgroundUploaderUserConsent<IBackgroundUploaderUserConsent>
{
	IBackgroundUploaderUserConsent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploaderUserConsent>>(m_ptr); }
};

struct IBackgroundDownloader :
	IInspectable,
	impl_IBackgroundDownloader<IBackgroundDownloader>,
	Requires<IBackgroundDownloader, Windows::Networking::BackgroundTransfer::IBackgroundTransferBase>
{
	IBackgroundDownloader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloader>>(m_ptr); }
};

struct IBackgroundDownloader2 :
	IInspectable,
	impl_IBackgroundDownloader2<IBackgroundDownloader2>
{
	IBackgroundDownloader2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloader2>>(m_ptr); }
};

struct IBackgroundUploader :
	IInspectable,
	impl_IBackgroundUploader<IBackgroundUploader>,
	Requires<IBackgroundUploader, Windows::Networking::BackgroundTransfer::IBackgroundTransferBase>
{
	IBackgroundUploader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploader>>(m_ptr); }
};

struct IBackgroundUploader2 :
	IInspectable,
	impl_IBackgroundUploader2<IBackgroundUploader2>
{
	IBackgroundUploader2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploader2>>(m_ptr); }
};

struct IBackgroundTransferOperation :
	IInspectable,
	impl_IBackgroundTransferOperation<IBackgroundTransferOperation>
{
	IBackgroundTransferOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferOperation>>(m_ptr); }
};

struct IBackgroundTransferOperationPriority :
	IInspectable,
	impl_IBackgroundTransferOperationPriority<IBackgroundTransferOperationPriority>
{
	IBackgroundTransferOperationPriority(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferOperationPriority>>(m_ptr); }
};

struct IDownloadOperation :
	IInspectable,
	impl_IDownloadOperation<IDownloadOperation>,
	Requires<IDownloadOperation, Windows::Networking::BackgroundTransfer::IBackgroundTransferOperation>
{
	IDownloadOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDownloadOperation>>(m_ptr); }
};

struct IDownloadOperation2 :
	IInspectable,
	impl_IDownloadOperation2<IDownloadOperation2>
{
	IDownloadOperation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDownloadOperation2>>(m_ptr); }
};

struct IUploadOperation :
	IInspectable,
	impl_IUploadOperation<IUploadOperation>,
	Requires<IUploadOperation, Windows::Networking::BackgroundTransfer::IBackgroundTransferOperation>
{
	IUploadOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUploadOperation>>(m_ptr); }
};

struct IUploadOperation2 :
	IInspectable,
	impl_IUploadOperation2<IUploadOperation2>
{
	IUploadOperation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUploadOperation2>>(m_ptr); }
};

struct IBackgroundDownloaderStaticMethods :
	IInspectable,
	impl_IBackgroundDownloaderStaticMethods<IBackgroundDownloaderStaticMethods>
{
	IBackgroundDownloaderStaticMethods(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloaderStaticMethods>>(m_ptr); }
};

struct IBackgroundDownloaderStaticMethods2 :
	IInspectable,
	impl_IBackgroundDownloaderStaticMethods2<IBackgroundDownloaderStaticMethods2>
{
	IBackgroundDownloaderStaticMethods2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloaderStaticMethods2>>(m_ptr); }
};

struct IBackgroundUploaderStaticMethods :
	IInspectable,
	impl_IBackgroundUploaderStaticMethods<IBackgroundUploaderStaticMethods>
{
	IBackgroundUploaderStaticMethods(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploaderStaticMethods>>(m_ptr); }
};

struct IBackgroundUploaderStaticMethods2 :
	IInspectable,
	impl_IBackgroundUploaderStaticMethods2<IBackgroundUploaderStaticMethods2>
{
	IBackgroundUploaderStaticMethods2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploaderStaticMethods2>>(m_ptr); }
};

struct IResponseInformation :
	IInspectable,
	impl_IResponseInformation<IResponseInformation>
{
	IResponseInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResponseInformation>>(m_ptr); }
};

struct IBackgroundTransferErrorStaticMethods :
	IInspectable,
	impl_IBackgroundTransferErrorStaticMethods<IBackgroundTransferErrorStaticMethods>
{
	IBackgroundTransferErrorStaticMethods(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferErrorStaticMethods>>(m_ptr); }
};

struct IBackgroundTransferContentPart :
	IInspectable,
	impl_IBackgroundTransferContentPart<IBackgroundTransferContentPart>
{
	IBackgroundTransferContentPart(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferContentPart>>(m_ptr); }
};

struct IBackgroundTransferContentPartFactory :
	IInspectable,
	impl_IBackgroundTransferContentPartFactory<IBackgroundTransferContentPartFactory>
{
	IBackgroundTransferContentPartFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferContentPartFactory>>(m_ptr); }
};

struct IBackgroundTransferGroup :
	IInspectable,
	impl_IBackgroundTransferGroup<IBackgroundTransferGroup>
{
	IBackgroundTransferGroup(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferGroup>>(m_ptr); }
};

struct IBackgroundTransferGroupStatics :
	IInspectable,
	impl_IBackgroundTransferGroupStatics<IBackgroundTransferGroupStatics>
{
	IBackgroundTransferGroupStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferGroupStatics>>(m_ptr); }
};

struct IContentPrefetcherTime :
	IInspectable,
	impl_IContentPrefetcherTime<IContentPrefetcherTime>
{
	IContentPrefetcherTime(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPrefetcherTime>>(m_ptr); }
};

struct IContentPrefetcher :
	IInspectable,
	impl_IContentPrefetcher<IContentPrefetcher>
{
	IContentPrefetcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPrefetcher>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

struct INetworkStatusChangedEventHandler :
	IUnknown,
	impl_INetworkStatusChangedEventHandler<INetworkStatusChangedEventHandler>
{
	INetworkStatusChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkStatusChangedEventHandler>>(m_ptr); }
};

struct IDataPlanUsage :
	IInspectable,
	impl_IDataPlanUsage<IDataPlanUsage>
{
	IDataPlanUsage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPlanUsage>>(m_ptr); }
};

struct IDataPlanStatus :
	IInspectable,
	impl_IDataPlanStatus<IDataPlanStatus>
{
	IDataPlanStatus(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPlanStatus>>(m_ptr); }
};

struct IConnectionCost :
	IInspectable,
	impl_IConnectionCost<IConnectionCost>
{
	IConnectionCost(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionCost>>(m_ptr); }
};

struct INetworkSecuritySettings :
	IInspectable,
	impl_INetworkSecuritySettings<INetworkSecuritySettings>
{
	INetworkSecuritySettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkSecuritySettings>>(m_ptr); }
};

struct IConnectionProfile :
	IInspectable,
	impl_IConnectionProfile<IConnectionProfile>
{
	IConnectionProfile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionProfile>>(m_ptr); }
};

struct IWwanConnectionProfileDetails :
	IInspectable,
	impl_IWwanConnectionProfileDetails<IWwanConnectionProfileDetails>
{
	IWwanConnectionProfileDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWwanConnectionProfileDetails>>(m_ptr); }
};

struct IWlanConnectionProfileDetails :
	IInspectable,
	impl_IWlanConnectionProfileDetails<IWlanConnectionProfileDetails>
{
	IWlanConnectionProfileDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWlanConnectionProfileDetails>>(m_ptr); }
};

struct IConnectivityInterval :
	IInspectable,
	impl_IConnectivityInterval<IConnectivityInterval>
{
	IConnectivityInterval(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectivityInterval>>(m_ptr); }
};

struct INetworkUsage :
	IInspectable,
	impl_INetworkUsage<INetworkUsage>
{
	INetworkUsage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkUsage>>(m_ptr); }
};

struct IConnectionProfile2 :
	IInspectable,
	impl_IConnectionProfile2<IConnectionProfile2>
{
	IConnectionProfile2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionProfile2>>(m_ptr); }
};

struct ILanIdentifierData :
	IInspectable,
	impl_ILanIdentifierData<ILanIdentifierData>
{
	ILanIdentifierData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanIdentifierData>>(m_ptr); }
};

struct ILanIdentifier :
	IInspectable,
	impl_ILanIdentifier<ILanIdentifier>
{
	ILanIdentifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanIdentifier>>(m_ptr); }
};

struct INetworkInformationStatics :
	IInspectable,
	impl_INetworkInformationStatics<INetworkInformationStatics>
{
	INetworkInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkInformationStatics>>(m_ptr); }
};

struct IConnectionProfileFilter :
	IInspectable,
	impl_IConnectionProfileFilter<IConnectionProfileFilter>
{
	IConnectionProfileFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionProfileFilter>>(m_ptr); }
};

struct INetworkInformationStatics2 :
	IInspectable,
	impl_INetworkInformationStatics2<INetworkInformationStatics2>
{
	INetworkInformationStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkInformationStatics2>>(m_ptr); }
};

struct INetworkItem :
	IInspectable,
	impl_INetworkItem<INetworkItem>
{
	INetworkItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkItem>>(m_ptr); }
};

struct INetworkAdapter :
	IInspectable,
	impl_INetworkAdapter<INetworkAdapter>
{
	INetworkAdapter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkAdapter>>(m_ptr); }
};

struct IIPInformation :
	IInspectable,
	impl_IIPInformation<IIPInformation>
{
	IIPInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIPInformation>>(m_ptr); }
};

struct IProxyConfiguration :
	IInspectable,
	impl_IProxyConfiguration<IProxyConfiguration>
{
	IProxyConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProxyConfiguration>>(m_ptr); }
};

struct IConnectionSession :
	IInspectable,
	impl_IConnectionSession<IConnectionSession>
{
	IConnectionSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionSession>>(m_ptr); }
};

struct IRoutePolicy :
	IInspectable,
	impl_IRoutePolicy<IRoutePolicy>
{
	IRoutePolicy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRoutePolicy>>(m_ptr); }
};

struct IRoutePolicyFactory :
	IInspectable,
	impl_IRoutePolicyFactory<IRoutePolicyFactory>
{
	IRoutePolicyFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRoutePolicyFactory>>(m_ptr); }
};

struct ICellularApnContext :
	IInspectable,
	impl_ICellularApnContext<ICellularApnContext>
{
	ICellularApnContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICellularApnContext>>(m_ptr); }
};

struct IConnectivityManagerStatics :
	IInspectable,
	impl_IConnectivityManagerStatics<IConnectivityManagerStatics>
{
	IConnectivityManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectivityManagerStatics>>(m_ptr); }
};

struct INetworkStateChangeEventDetails :
	IInspectable,
	impl_INetworkStateChangeEventDetails<INetworkStateChangeEventDetails>
{
	INetworkStateChangeEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkStateChangeEventDetails>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

struct IMobileBroadbandAccountStatics :
	IInspectable,
	impl_IMobileBroadbandAccountStatics<IMobileBroadbandAccountStatics>
{
	IMobileBroadbandAccountStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccountStatics>>(m_ptr); }
};

struct IMobileBroadbandAccount :
	IInspectable,
	impl_IMobileBroadbandAccount<IMobileBroadbandAccount>
{
	IMobileBroadbandAccount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccount>>(m_ptr); }
};

struct IMobileBroadbandAccount2 :
	IInspectable,
	impl_IMobileBroadbandAccount2<IMobileBroadbandAccount2>
{
	IMobileBroadbandAccount2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccount2>>(m_ptr); }
};

struct IMobileBroadbandDeviceInformation :
	IInspectable,
	impl_IMobileBroadbandDeviceInformation<IMobileBroadbandDeviceInformation>
{
	IMobileBroadbandDeviceInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandDeviceInformation>>(m_ptr); }
};

struct IMobileBroadbandNetwork :
	IInspectable,
	impl_IMobileBroadbandNetwork<IMobileBroadbandNetwork>
{
	IMobileBroadbandNetwork(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandNetwork>>(m_ptr); }
};

struct INetworkOperatorNotificationEventDetails :
	IInspectable,
	impl_INetworkOperatorNotificationEventDetails<INetworkOperatorNotificationEventDetails>
{
	INetworkOperatorNotificationEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorNotificationEventDetails>>(m_ptr); }
};

struct INetworkOperatorTetheringEntitlementCheck :
	IInspectable,
	impl_INetworkOperatorTetheringEntitlementCheck<INetworkOperatorTetheringEntitlementCheck>
{
	INetworkOperatorTetheringEntitlementCheck(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringEntitlementCheck>>(m_ptr); }
};

struct INetworkOperatorTetheringAccessPointConfiguration :
	IInspectable,
	impl_INetworkOperatorTetheringAccessPointConfiguration<INetworkOperatorTetheringAccessPointConfiguration>
{
	INetworkOperatorTetheringAccessPointConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringAccessPointConfiguration>>(m_ptr); }
};

struct INetworkOperatorTetheringOperationResult :
	IInspectable,
	impl_INetworkOperatorTetheringOperationResult<INetworkOperatorTetheringOperationResult>
{
	INetworkOperatorTetheringOperationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringOperationResult>>(m_ptr); }
};

struct INetworkOperatorTetheringManagerStatics :
	IInspectable,
	impl_INetworkOperatorTetheringManagerStatics<INetworkOperatorTetheringManagerStatics>
{
	INetworkOperatorTetheringManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringManagerStatics>>(m_ptr); }
};

struct INetworkOperatorTetheringManager :
	IInspectable,
	impl_INetworkOperatorTetheringManager<INetworkOperatorTetheringManager>
{
	INetworkOperatorTetheringManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringManager>>(m_ptr); }
};

struct IMobileBroadbandAccountEventArgs :
	IInspectable,
	impl_IMobileBroadbandAccountEventArgs<IMobileBroadbandAccountEventArgs>
{
	IMobileBroadbandAccountEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccountEventArgs>>(m_ptr); }
};

struct IMobileBroadbandAccountUpdatedEventArgs :
	IInspectable,
	impl_IMobileBroadbandAccountUpdatedEventArgs<IMobileBroadbandAccountUpdatedEventArgs>
{
	IMobileBroadbandAccountUpdatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccountUpdatedEventArgs>>(m_ptr); }
};

struct IMobileBroadbandAccountWatcher :
	IInspectable,
	impl_IMobileBroadbandAccountWatcher<IMobileBroadbandAccountWatcher>
{
	IMobileBroadbandAccountWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccountWatcher>>(m_ptr); }
};

struct IHotspotAuthenticationEventDetails :
	IInspectable,
	impl_IHotspotAuthenticationEventDetails<IHotspotAuthenticationEventDetails>
{
	IHotspotAuthenticationEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotAuthenticationEventDetails>>(m_ptr); }
};

struct IHotspotAuthenticationContextStatics :
	IInspectable,
	impl_IHotspotAuthenticationContextStatics<IHotspotAuthenticationContextStatics>
{
	IHotspotAuthenticationContextStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotAuthenticationContextStatics>>(m_ptr); }
};

struct IHotspotAuthenticationContext :
	IInspectable,
	impl_IHotspotAuthenticationContext<IHotspotAuthenticationContext>
{
	IHotspotAuthenticationContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotAuthenticationContext>>(m_ptr); }
};

struct IHotspotCredentialsAuthenticationResult :
	IInspectable,
	impl_IHotspotCredentialsAuthenticationResult<IHotspotCredentialsAuthenticationResult>
{
	IHotspotCredentialsAuthenticationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotCredentialsAuthenticationResult>>(m_ptr); }
};

struct IHotspotAuthenticationContext2 :
	IInspectable,
	impl_IHotspotAuthenticationContext2<IHotspotAuthenticationContext2>
{
	IHotspotAuthenticationContext2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotAuthenticationContext2>>(m_ptr); }
};

struct IProvisionFromXmlDocumentResults :
	IInspectable,
	impl_IProvisionFromXmlDocumentResults<IProvisionFromXmlDocumentResults>
{
	IProvisionFromXmlDocumentResults(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProvisionFromXmlDocumentResults>>(m_ptr); }
};

struct IProvisionedProfile :
	IInspectable,
	impl_IProvisionedProfile<IProvisionedProfile>
{
	IProvisionedProfile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProvisionedProfile>>(m_ptr); }
};

struct IProvisioningAgent :
	IInspectable,
	impl_IProvisioningAgent<IProvisioningAgent>
{
	IProvisioningAgent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProvisioningAgent>>(m_ptr); }
};

struct IProvisioningAgentStaticMethods :
	IInspectable,
	impl_IProvisioningAgentStaticMethods<IProvisioningAgentStaticMethods>
{
	IProvisioningAgentStaticMethods(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProvisioningAgentStaticMethods>>(m_ptr); }
};

struct IUssdMessage :
	IInspectable,
	impl_IUssdMessage<IUssdMessage>
{
	IUssdMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdMessage>>(m_ptr); }
};

struct IUssdMessageFactory :
	IInspectable,
	impl_IUssdMessageFactory<IUssdMessageFactory>
{
	IUssdMessageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdMessageFactory>>(m_ptr); }
};

struct IUssdReply :
	IInspectable,
	impl_IUssdReply<IUssdReply>
{
	IUssdReply(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdReply>>(m_ptr); }
};

struct IUssdSession :
	IInspectable,
	impl_IUssdSession<IUssdSession>
{
	IUssdSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdSession>>(m_ptr); }
};

struct IUssdSessionStatics :
	IInspectable,
	impl_IUssdSessionStatics<IUssdSessionStatics>
{
	IUssdSessionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdSessionStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

struct IMessageReceivedHandler :
	IUnknown,
	impl_IMessageReceivedHandler<IMessageReceivedHandler>
{
	IMessageReceivedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageReceivedHandler>>(m_ptr); }
};

struct IMessageTransmittedHandler :
	IUnknown,
	impl_IMessageTransmittedHandler<IMessageTransmittedHandler>
{
	IMessageTransmittedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageTransmittedHandler>>(m_ptr); }
};

struct IDeviceArrivedEventHandler :
	IUnknown,
	impl_IDeviceArrivedEventHandler<IDeviceArrivedEventHandler>
{
	IDeviceArrivedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceArrivedEventHandler>>(m_ptr); }
};

struct IDeviceDepartedEventHandler :
	IUnknown,
	impl_IDeviceDepartedEventHandler<IDeviceDepartedEventHandler>
{
	IDeviceDepartedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceDepartedEventHandler>>(m_ptr); }
};

struct IProximityMessage :
	IInspectable,
	impl_IProximityMessage<IProximityMessage>
{
	IProximityMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProximityMessage>>(m_ptr); }
};

struct IProximityDevice :
	IInspectable,
	impl_IProximityDevice<IProximityDevice>
{
	IProximityDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProximityDevice>>(m_ptr); }
};

struct IProximityDeviceStatics :
	IInspectable,
	impl_IProximityDeviceStatics<IProximityDeviceStatics>
{
	IProximityDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProximityDeviceStatics>>(m_ptr); }
};

struct ITriggeredConnectionStateChangedEventArgs :
	IInspectable,
	impl_ITriggeredConnectionStateChangedEventArgs<ITriggeredConnectionStateChangedEventArgs>
{
	ITriggeredConnectionStateChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITriggeredConnectionStateChangedEventArgs>>(m_ptr); }
};

struct IPeerInformation :
	IInspectable,
	impl_IPeerInformation<IPeerInformation>
{
	IPeerInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerInformation>>(m_ptr); }
};

struct IPeerInformation3 :
	IInspectable,
	impl_IPeerInformation3<IPeerInformation3>
{
	IPeerInformation3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerInformation3>>(m_ptr); }
};

struct IConnectionRequestedEventArgs :
	IInspectable,
	impl_IConnectionRequestedEventArgs<IConnectionRequestedEventArgs>
{
	IConnectionRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionRequestedEventArgs>>(m_ptr); }
};

struct IPeerWatcher :
	IInspectable,
	impl_IPeerWatcher<IPeerWatcher>
{
	IPeerWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerWatcher>>(m_ptr); }
};

struct IPeerFinderStatics :
	IInspectable,
	impl_IPeerFinderStatics<IPeerFinderStatics>
{
	IPeerFinderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerFinderStatics>>(m_ptr); }
};

struct IPeerFinderStatics2 :
	IInspectable,
	impl_IPeerFinderStatics2<IPeerFinderStatics2>
{
	IPeerFinderStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerFinderStatics2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

struct IPushNotificationChannelManagerStatics :
	IInspectable,
	impl_IPushNotificationChannelManagerStatics<IPushNotificationChannelManagerStatics>
{
	IPushNotificationChannelManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPushNotificationChannelManagerStatics>>(m_ptr); }
};

struct IPushNotificationChannel :
	IInspectable,
	impl_IPushNotificationChannel<IPushNotificationChannel>
{
	IPushNotificationChannel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPushNotificationChannel>>(m_ptr); }
};

struct IPushNotificationReceivedEventArgs :
	IInspectable,
	impl_IPushNotificationReceivedEventArgs<IPushNotificationReceivedEventArgs>
{
	IPushNotificationReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPushNotificationReceivedEventArgs>>(m_ptr); }
};

struct IRawNotification :
	IInspectable,
	impl_IRawNotification<IRawNotification>
{
	IRawNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRawNotification>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

struct IControlChannelTrigger :
	IInspectable,
	impl_IControlChannelTrigger<IControlChannelTrigger>
{
	IControlChannelTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlChannelTrigger>>(m_ptr); }
};

struct IControlChannelTriggerFactory :
	IInspectable,
	impl_IControlChannelTriggerFactory<IControlChannelTriggerFactory>
{
	IControlChannelTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlChannelTriggerFactory>>(m_ptr); }
};

struct IControlChannelTriggerEventDetails :
	IInspectable,
	impl_IControlChannelTriggerEventDetails<IControlChannelTriggerEventDetails>
{
	IControlChannelTriggerEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlChannelTriggerEventDetails>>(m_ptr); }
};

struct IControlChannelTriggerResetEventDetails :
	IInspectable,
	impl_IControlChannelTriggerResetEventDetails<IControlChannelTriggerResetEventDetails>
{
	IControlChannelTriggerResetEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlChannelTriggerResetEventDetails>>(m_ptr); }
};

struct IDatagramSocketMessageReceivedEventArgs :
	IInspectable,
	impl_IDatagramSocketMessageReceivedEventArgs<IDatagramSocketMessageReceivedEventArgs>
{
	IDatagramSocketMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketMessageReceivedEventArgs>>(m_ptr); }
};

struct IMessageWebSocketMessageReceivedEventArgs :
	IInspectable,
	impl_IMessageWebSocketMessageReceivedEventArgs<IMessageWebSocketMessageReceivedEventArgs>
{
	IMessageWebSocketMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageWebSocketMessageReceivedEventArgs>>(m_ptr); }
};

struct IWebSocketClosedEventArgs :
	IInspectable,
	impl_IWebSocketClosedEventArgs<IWebSocketClosedEventArgs>
{
	IWebSocketClosedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocketClosedEventArgs>>(m_ptr); }
};

struct IDatagramSocketInformation :
	IInspectable,
	impl_IDatagramSocketInformation<IDatagramSocketInformation>
{
	IDatagramSocketInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketInformation>>(m_ptr); }
};

struct IDatagramSocketControl :
	IInspectable,
	impl_IDatagramSocketControl<IDatagramSocketControl>
{
	IDatagramSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketControl>>(m_ptr); }
};

struct IDatagramSocketControl2 :
	IInspectable,
	impl_IDatagramSocketControl2<IDatagramSocketControl2>
{
	IDatagramSocketControl2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketControl2>>(m_ptr); }
};

struct IDatagramSocketStatics :
	IInspectable,
	impl_IDatagramSocketStatics<IDatagramSocketStatics>
{
	IDatagramSocketStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketStatics>>(m_ptr); }
};

struct IDatagramSocket :
	IInspectable,
	impl_IDatagramSocket<IDatagramSocket>
{
	IDatagramSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocket>>(m_ptr); }
};

struct IDatagramSocket2 :
	IInspectable,
	impl_IDatagramSocket2<IDatagramSocket2>
{
	IDatagramSocket2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocket2>>(m_ptr); }
};

struct IStreamSocketInformation :
	IInspectable,
	impl_IStreamSocketInformation<IStreamSocketInformation>
{
	IStreamSocketInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketInformation>>(m_ptr); }
};

struct IStreamSocketInformation2 :
	IInspectable,
	impl_IStreamSocketInformation2<IStreamSocketInformation2>
{
	IStreamSocketInformation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketInformation2>>(m_ptr); }
};

struct IStreamSocketControl :
	IInspectable,
	impl_IStreamSocketControl<IStreamSocketControl>
{
	IStreamSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketControl>>(m_ptr); }
};

struct IStreamSocketControl2 :
	IInspectable,
	impl_IStreamSocketControl2<IStreamSocketControl2>
{
	IStreamSocketControl2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketControl2>>(m_ptr); }
};

struct IStreamSocket :
	IInspectable,
	impl_IStreamSocket<IStreamSocket>
{
	IStreamSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocket>>(m_ptr); }
};

struct IStreamSocket2 :
	IInspectable,
	impl_IStreamSocket2<IStreamSocket2>
{
	IStreamSocket2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocket2>>(m_ptr); }
};

struct IStreamSocketListenerControl :
	IInspectable,
	impl_IStreamSocketListenerControl<IStreamSocketListenerControl>
{
	IStreamSocketListenerControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListenerControl>>(m_ptr); }
};

struct IStreamSocketListenerInformation :
	IInspectable,
	impl_IStreamSocketListenerInformation<IStreamSocketListenerInformation>
{
	IStreamSocketListenerInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListenerInformation>>(m_ptr); }
};

struct IStreamSocketListenerConnectionReceivedEventArgs :
	IInspectable,
	impl_IStreamSocketListenerConnectionReceivedEventArgs<IStreamSocketListenerConnectionReceivedEventArgs>
{
	IStreamSocketListenerConnectionReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListenerConnectionReceivedEventArgs>>(m_ptr); }
};

struct IStreamSocketListener :
	IInspectable,
	impl_IStreamSocketListener<IStreamSocketListener>
{
	IStreamSocketListener(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListener>>(m_ptr); }
};

struct IStreamSocketListener2 :
	IInspectable,
	impl_IStreamSocketListener2<IStreamSocketListener2>
{
	IStreamSocketListener2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListener2>>(m_ptr); }
};

struct IWebSocketControl :
	IInspectable,
	impl_IWebSocketControl<IWebSocketControl>
{
	IWebSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocketControl>>(m_ptr); }
};

struct IWebSocketInformation :
	IInspectable,
	impl_IWebSocketInformation<IWebSocketInformation>
{
	IWebSocketInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocketInformation>>(m_ptr); }
};

struct IWebSocket :
	IInspectable,
	impl_IWebSocket<IWebSocket>
{
	IWebSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocket>>(m_ptr); }
};

struct IMessageWebSocketControl :
	IInspectable,
	impl_IMessageWebSocketControl<IMessageWebSocketControl>,
	Requires<IMessageWebSocketControl, Windows::Networking::Sockets::IWebSocketControl>
{
	IMessageWebSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageWebSocketControl>>(m_ptr); }
};

struct IMessageWebSocket :
	IInspectable,
	impl_IMessageWebSocket<IMessageWebSocket>,
	Requires<IMessageWebSocket, Windows::Networking::Sockets::IWebSocket>
{
	IMessageWebSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageWebSocket>>(m_ptr); }
};

struct IStreamWebSocketControl :
	IInspectable,
	impl_IStreamWebSocketControl<IStreamWebSocketControl>,
	Requires<IStreamWebSocketControl, Windows::Networking::Sockets::IWebSocketControl>
{
	IStreamWebSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamWebSocketControl>>(m_ptr); }
};

struct IStreamWebSocket :
	IInspectable,
	impl_IStreamWebSocket<IStreamWebSocket>,
	Requires<IStreamWebSocket, Windows::Networking::Sockets::IWebSocket>
{
	IStreamWebSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamWebSocket>>(m_ptr); }
};

struct ISocketErrorStatics :
	IInspectable,
	impl_ISocketErrorStatics<ISocketErrorStatics>
{
	ISocketErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISocketErrorStatics>>(m_ptr); }
};

struct IWebSocketErrorStatics :
	IInspectable,
	impl_IWebSocketErrorStatics<IWebSocketErrorStatics>
{
	IWebSocketErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocketErrorStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

struct IOnlineIdServiceTicketRequest :
	IInspectable,
	impl_IOnlineIdServiceTicketRequest<IOnlineIdServiceTicketRequest>
{
	IOnlineIdServiceTicketRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOnlineIdServiceTicketRequest>>(m_ptr); }
};

struct IOnlineIdServiceTicketRequestFactory :
	IInspectable,
	impl_IOnlineIdServiceTicketRequestFactory<IOnlineIdServiceTicketRequestFactory>
{
	IOnlineIdServiceTicketRequestFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOnlineIdServiceTicketRequestFactory>>(m_ptr); }
};

struct IOnlineIdServiceTicket :
	IInspectable,
	impl_IOnlineIdServiceTicket<IOnlineIdServiceTicket>
{
	IOnlineIdServiceTicket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOnlineIdServiceTicket>>(m_ptr); }
};

struct IUserIdentity :
	IInspectable,
	impl_IUserIdentity<IUserIdentity>
{
	IUserIdentity(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserIdentity>>(m_ptr); }
};

struct IOnlineIdAuthenticator :
	IInspectable,
	impl_IOnlineIdAuthenticator<IOnlineIdAuthenticator>
{
	IOnlineIdAuthenticator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOnlineIdAuthenticator>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

struct IWebAuthenticationResult :
	IInspectable,
	impl_IWebAuthenticationResult<IWebAuthenticationResult>
{
	IWebAuthenticationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAuthenticationResult>>(m_ptr); }
};

struct IWebAuthenticationBrokerStatics :
	IInspectable,
	impl_IWebAuthenticationBrokerStatics<IWebAuthenticationBrokerStatics>
{
	IWebAuthenticationBrokerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAuthenticationBrokerStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

struct IPasswordCredential :
	IInspectable,
	impl_IPasswordCredential<IPasswordCredential>
{
	IPasswordCredential(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordCredential>>(m_ptr); }
};

struct ICredentialFactory :
	IInspectable,
	impl_ICredentialFactory<ICredentialFactory>
{
	ICredentialFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialFactory>>(m_ptr); }
};

struct IPasswordVault :
	IInspectable,
	impl_IPasswordVault<IPasswordVault>
{
	IPasswordVault(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordVault>>(m_ptr); }
};

struct IWebAccountProviderFactory :
	IInspectable,
	impl_IWebAccountProviderFactory<IWebAccountProviderFactory>
{
	IWebAccountProviderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProviderFactory>>(m_ptr); }
};

struct IWebAccountFactory :
	IInspectable,
	impl_IWebAccountFactory<IWebAccountFactory>
{
	IWebAccountFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountFactory>>(m_ptr); }
};

struct IWebAccountProvider :
	IInspectable,
	impl_IWebAccountProvider<IWebAccountProvider>
{
	IWebAccountProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProvider>>(m_ptr); }
};

struct IWebAccount :
	IInspectable,
	impl_IWebAccount<IWebAccount>
{
	IWebAccount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccount>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

struct IUserConsentVerifierStatics :
	IInspectable,
	impl_IUserConsentVerifierStatics<IUserConsentVerifierStatics>
{
	IUserConsentVerifierStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserConsentVerifierStatics>>(m_ptr); }
};

struct ICredentialPickerOptions :
	IInspectable,
	impl_ICredentialPickerOptions<ICredentialPickerOptions>
{
	ICredentialPickerOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialPickerOptions>>(m_ptr); }
};

struct ICredentialPickerStatics :
	IInspectable,
	impl_ICredentialPickerStatics<ICredentialPickerStatics>
{
	ICredentialPickerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialPickerStatics>>(m_ptr); }
};

struct ICredentialPickerResults :
	IInspectable,
	impl_ICredentialPickerResults<ICredentialPickerResults>
{
	ICredentialPickerResults(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialPickerResults>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

struct ICryptographicBufferStatics :
	IInspectable,
	impl_ICryptographicBufferStatics<ICryptographicBufferStatics>
{
	ICryptographicBufferStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICryptographicBufferStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

struct ICertificateRequestProperties :
	IInspectable,
	impl_ICertificateRequestProperties<ICertificateRequestProperties>
{
	ICertificateRequestProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateRequestProperties>>(m_ptr); }
};

struct ICertificateRequestProperties2 :
	IInspectable,
	impl_ICertificateRequestProperties2<ICertificateRequestProperties2>
{
	ICertificateRequestProperties2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateRequestProperties2>>(m_ptr); }
};

struct ICertificateEnrollmentManagerStatics :
	IInspectable,
	impl_ICertificateEnrollmentManagerStatics<ICertificateEnrollmentManagerStatics>
{
	ICertificateEnrollmentManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateEnrollmentManagerStatics>>(m_ptr); }
};

struct ICertificateEnrollmentManagerStatics2 :
	IInspectable,
	impl_ICertificateEnrollmentManagerStatics2<ICertificateEnrollmentManagerStatics2>
{
	ICertificateEnrollmentManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateEnrollmentManagerStatics2>>(m_ptr); }
};

struct IKeyAttestationHelperStatics :
	IInspectable,
	impl_IKeyAttestationHelperStatics<IKeyAttestationHelperStatics>
{
	IKeyAttestationHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyAttestationHelperStatics>>(m_ptr); }
};

struct ICertificateStoresStatics :
	IInspectable,
	impl_ICertificateStoresStatics<ICertificateStoresStatics>
{
	ICertificateStoresStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateStoresStatics>>(m_ptr); }
};

struct IUserCertificateEnrollmentManager :
	IInspectable,
	impl_IUserCertificateEnrollmentManager<IUserCertificateEnrollmentManager>
{
	IUserCertificateEnrollmentManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserCertificateEnrollmentManager>>(m_ptr); }
};

struct ICertificateStore :
	IInspectable,
	impl_ICertificateStore<ICertificateStore>
{
	ICertificateStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateStore>>(m_ptr); }
};

struct IKeyAlgorithmNamesStatics :
	IInspectable,
	impl_IKeyAlgorithmNamesStatics<IKeyAlgorithmNamesStatics>
{
	IKeyAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyAlgorithmNamesStatics>>(m_ptr); }
};

struct IKeyStorageProviderNamesStatics :
	IInspectable,
	impl_IKeyStorageProviderNamesStatics<IKeyStorageProviderNamesStatics>
{
	IKeyStorageProviderNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyStorageProviderNamesStatics>>(m_ptr); }
};

struct IChainBuildingParameters :
	IInspectable,
	impl_IChainBuildingParameters<IChainBuildingParameters>
{
	IChainBuildingParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IChainBuildingParameters>>(m_ptr); }
};

struct IChainValidationParameters :
	IInspectable,
	impl_IChainValidationParameters<IChainValidationParameters>
{
	IChainValidationParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IChainValidationParameters>>(m_ptr); }
};

struct ICertificateQuery :
	IInspectable,
	impl_ICertificateQuery<ICertificateQuery>
{
	ICertificateQuery(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateQuery>>(m_ptr); }
};

struct ICertificateChain :
	IInspectable,
	impl_ICertificateChain<ICertificateChain>
{
	ICertificateChain(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateChain>>(m_ptr); }
};

struct ICertificate :
	IInspectable,
	impl_ICertificate<ICertificate>
{
	ICertificate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificate>>(m_ptr); }
};

struct ICertificateFactory :
	IInspectable,
	impl_ICertificateFactory<ICertificateFactory>
{
	ICertificateFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateFactory>>(m_ptr); }
};

struct ICmsTimestampInfo :
	IInspectable,
	impl_ICmsTimestampInfo<ICmsTimestampInfo>
{
	ICmsTimestampInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsTimestampInfo>>(m_ptr); }
};

struct ICmsSignerInfo :
	IInspectable,
	impl_ICmsSignerInfo<ICmsSignerInfo>
{
	ICmsSignerInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsSignerInfo>>(m_ptr); }
};

struct ICmsAttachedSignature :
	IInspectable,
	impl_ICmsAttachedSignature<ICmsAttachedSignature>
{
	ICmsAttachedSignature(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsAttachedSignature>>(m_ptr); }
};

struct ICmsAttachedSignatureFactory :
	IInspectable,
	impl_ICmsAttachedSignatureFactory<ICmsAttachedSignatureFactory>
{
	ICmsAttachedSignatureFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsAttachedSignatureFactory>>(m_ptr); }
};

struct ICmsAttachedSignatureStatics :
	IInspectable,
	impl_ICmsAttachedSignatureStatics<ICmsAttachedSignatureStatics>
{
	ICmsAttachedSignatureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsAttachedSignatureStatics>>(m_ptr); }
};

struct ICmsDetachedSignature :
	IInspectable,
	impl_ICmsDetachedSignature<ICmsDetachedSignature>
{
	ICmsDetachedSignature(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsDetachedSignature>>(m_ptr); }
};

struct ICmsDetachedSignatureFactory :
	IInspectable,
	impl_ICmsDetachedSignatureFactory<ICmsDetachedSignatureFactory>
{
	ICmsDetachedSignatureFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsDetachedSignatureFactory>>(m_ptr); }
};

struct ICmsDetachedSignatureStatics :
	IInspectable,
	impl_ICmsDetachedSignatureStatics<ICmsDetachedSignatureStatics>
{
	ICmsDetachedSignatureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsDetachedSignatureStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

struct IKeyDerivationParameters :
	IInspectable,
	impl_IKeyDerivationParameters<IKeyDerivationParameters>
{
	IKeyDerivationParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationParameters>>(m_ptr); }
};

struct IKeyDerivationParametersStatics :
	IInspectable,
	impl_IKeyDerivationParametersStatics<IKeyDerivationParametersStatics>
{
	IKeyDerivationParametersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationParametersStatics>>(m_ptr); }
};

struct ICryptographicKey :
	IInspectable,
	impl_ICryptographicKey<ICryptographicKey>
{
	ICryptographicKey(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICryptographicKey>>(m_ptr); }
};

struct IHashComputation :
	IInspectable,
	impl_IHashComputation<IHashComputation>
{
	IHashComputation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHashComputation>>(m_ptr); }
};

struct IHashAlgorithmProvider :
	IInspectable,
	impl_IHashAlgorithmProvider<IHashAlgorithmProvider>
{
	IHashAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHashAlgorithmProvider>>(m_ptr); }
};

struct IMacAlgorithmProvider :
	IInspectable,
	impl_IMacAlgorithmProvider<IMacAlgorithmProvider>
{
	IMacAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMacAlgorithmProvider>>(m_ptr); }
};

struct IMacAlgorithmProvider2 :
	IInspectable,
	impl_IMacAlgorithmProvider2<IMacAlgorithmProvider2>
{
	IMacAlgorithmProvider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMacAlgorithmProvider2>>(m_ptr); }
};

struct IKeyDerivationAlgorithmProvider :
	IInspectable,
	impl_IKeyDerivationAlgorithmProvider<IKeyDerivationAlgorithmProvider>
{
	IKeyDerivationAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationAlgorithmProvider>>(m_ptr); }
};

struct ISymmetricKeyAlgorithmProvider :
	IInspectable,
	impl_ISymmetricKeyAlgorithmProvider<ISymmetricKeyAlgorithmProvider>
{
	ISymmetricKeyAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISymmetricKeyAlgorithmProvider>>(m_ptr); }
};

struct IAsymmetricKeyAlgorithmProvider :
	IInspectable,
	impl_IAsymmetricKeyAlgorithmProvider<IAsymmetricKeyAlgorithmProvider>
{
	IAsymmetricKeyAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsymmetricKeyAlgorithmProvider>>(m_ptr); }
};

struct IPersistedKeyProviderStatics :
	IInspectable,
	impl_IPersistedKeyProviderStatics<IPersistedKeyProviderStatics>
{
	IPersistedKeyProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPersistedKeyProviderStatics>>(m_ptr); }
};

struct IEncryptedAndAuthenticatedData :
	IInspectable,
	impl_IEncryptedAndAuthenticatedData<IEncryptedAndAuthenticatedData>
{
	IEncryptedAndAuthenticatedData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEncryptedAndAuthenticatedData>>(m_ptr); }
};

struct ICryptographicEngineStatics :
	IInspectable,
	impl_ICryptographicEngineStatics<ICryptographicEngineStatics>
{
	ICryptographicEngineStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICryptographicEngineStatics>>(m_ptr); }
};

struct ICryptographicEngineStatics2 :
	IInspectable,
	impl_ICryptographicEngineStatics2<ICryptographicEngineStatics2>
{
	ICryptographicEngineStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICryptographicEngineStatics2>>(m_ptr); }
};

struct IHashAlgorithmProviderStatics :
	IInspectable,
	impl_IHashAlgorithmProviderStatics<IHashAlgorithmProviderStatics>
{
	IHashAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHashAlgorithmProviderStatics>>(m_ptr); }
};

struct IMacAlgorithmProviderStatics :
	IInspectable,
	impl_IMacAlgorithmProviderStatics<IMacAlgorithmProviderStatics>
{
	IMacAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMacAlgorithmProviderStatics>>(m_ptr); }
};

struct IKeyDerivationAlgorithmProviderStatics :
	IInspectable,
	impl_IKeyDerivationAlgorithmProviderStatics<IKeyDerivationAlgorithmProviderStatics>
{
	IKeyDerivationAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationAlgorithmProviderStatics>>(m_ptr); }
};

struct ISymmetricKeyAlgorithmProviderStatics :
	IInspectable,
	impl_ISymmetricKeyAlgorithmProviderStatics<ISymmetricKeyAlgorithmProviderStatics>
{
	ISymmetricKeyAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISymmetricKeyAlgorithmProviderStatics>>(m_ptr); }
};

struct IAsymmetricKeyAlgorithmProviderStatics :
	IInspectable,
	impl_IAsymmetricKeyAlgorithmProviderStatics<IAsymmetricKeyAlgorithmProviderStatics>
{
	IAsymmetricKeyAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsymmetricKeyAlgorithmProviderStatics>>(m_ptr); }
};

struct IHashAlgorithmNamesStatics :
	IInspectable,
	impl_IHashAlgorithmNamesStatics<IHashAlgorithmNamesStatics>
{
	IHashAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHashAlgorithmNamesStatics>>(m_ptr); }
};

struct IMacAlgorithmNamesStatics :
	IInspectable,
	impl_IMacAlgorithmNamesStatics<IMacAlgorithmNamesStatics>
{
	IMacAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMacAlgorithmNamesStatics>>(m_ptr); }
};

struct ISymmetricAlgorithmNamesStatics :
	IInspectable,
	impl_ISymmetricAlgorithmNamesStatics<ISymmetricAlgorithmNamesStatics>
{
	ISymmetricAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISymmetricAlgorithmNamesStatics>>(m_ptr); }
};

struct IAsymmetricAlgorithmNamesStatics :
	IInspectable,
	impl_IAsymmetricAlgorithmNamesStatics<IAsymmetricAlgorithmNamesStatics>
{
	IAsymmetricAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsymmetricAlgorithmNamesStatics>>(m_ptr); }
};

struct IKeyDerivationAlgorithmNamesStatics :
	IInspectable,
	impl_IKeyDerivationAlgorithmNamesStatics<IKeyDerivationAlgorithmNamesStatics>
{
	IKeyDerivationAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationAlgorithmNamesStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

struct IDataProtectionProvider :
	IInspectable,
	impl_IDataProtectionProvider<IDataProtectionProvider>
{
	IDataProtectionProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProtectionProvider>>(m_ptr); }
};

struct IDataProtectionProviderFactory :
	IInspectable,
	impl_IDataProtectionProviderFactory<IDataProtectionProviderFactory>
{
	IDataProtectionProviderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProtectionProviderFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

struct IFileRevocationManagerStatics :
	IInspectable,
	impl_IFileRevocationManagerStatics<IFileRevocationManagerStatics>
{
	IFileRevocationManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileRevocationManagerStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

struct IEasClientDeviceInformation :
	IInspectable,
	impl_IEasClientDeviceInformation<IEasClientDeviceInformation>
{
	IEasClientDeviceInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasClientDeviceInformation>>(m_ptr); }
};

struct IEasClientSecurityPolicy :
	IInspectable,
	impl_IEasClientSecurityPolicy<IEasClientSecurityPolicy>
{
	IEasClientSecurityPolicy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasClientSecurityPolicy>>(m_ptr); }
};

struct IEasComplianceResults :
	IInspectable,
	impl_IEasComplianceResults<IEasComplianceResults>
{
	IEasComplianceResults(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasComplianceResults>>(m_ptr); }
};

struct IEasComplianceResults2 :
	IInspectable,
	impl_IEasComplianceResults2<IEasComplianceResults2>,
	Requires<IEasComplianceResults2, Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults>
{
	IEasComplianceResults2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasComplianceResults2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage {

struct IStreamedFileDataRequestedHandler :
	IUnknown,
	impl_IStreamedFileDataRequestedHandler<IStreamedFileDataRequestedHandler>
{
	IStreamedFileDataRequestedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamedFileDataRequestedHandler>>(m_ptr); }
};

struct IApplicationDataSetVersionHandler :
	IUnknown,
	impl_IApplicationDataSetVersionHandler<IApplicationDataSetVersionHandler>
{
	IApplicationDataSetVersionHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataSetVersionHandler>>(m_ptr); }
};

struct IStorageLibraryStatics :
	IInspectable,
	impl_IStorageLibraryStatics<IStorageLibraryStatics>
{
	IStorageLibraryStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageLibraryStatics>>(m_ptr); }
};

struct IStorageLibrary :
	IInspectable,
	impl_IStorageLibrary<IStorageLibrary>
{
	IStorageLibrary(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageLibrary>>(m_ptr); }
};

struct IKnownFoldersStatics :
	IInspectable,
	impl_IKnownFoldersStatics<IKnownFoldersStatics>
{
	IKnownFoldersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownFoldersStatics>>(m_ptr); }
};

struct IKnownFoldersPlaylistsStatics :
	IInspectable,
	impl_IKnownFoldersPlaylistsStatics<IKnownFoldersPlaylistsStatics>
{
	IKnownFoldersPlaylistsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownFoldersPlaylistsStatics>>(m_ptr); }
};

struct IKnownFoldersCameraRollStatics :
	IInspectable,
	impl_IKnownFoldersCameraRollStatics<IKnownFoldersCameraRollStatics>
{
	IKnownFoldersCameraRollStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownFoldersCameraRollStatics>>(m_ptr); }
};

struct IKnownFoldersSavedPicturesStatics :
	IInspectable,
	impl_IKnownFoldersSavedPicturesStatics<IKnownFoldersSavedPicturesStatics>
{
	IKnownFoldersSavedPicturesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownFoldersSavedPicturesStatics>>(m_ptr); }
};

struct IDownloadsFolderStatics :
	IInspectable,
	impl_IDownloadsFolderStatics<IDownloadsFolderStatics>
{
	IDownloadsFolderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDownloadsFolderStatics>>(m_ptr); }
};

struct IStreamedFileDataRequest :
	IInspectable,
	impl_IStreamedFileDataRequest<IStreamedFileDataRequest>
{
	IStreamedFileDataRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamedFileDataRequest>>(m_ptr); }
};

struct IStorageFileStatics :
	IInspectable,
	impl_IStorageFileStatics<IStorageFileStatics>
{
	IStorageFileStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFileStatics>>(m_ptr); }
};

struct IStorageItem :
	IInspectable,
	impl_IStorageItem<IStorageItem>
{
	IStorageItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItem>>(m_ptr); }
};

struct IStorageFolder :
	IInspectable,
	impl_IStorageFolder<IStorageFolder>,
	Requires<IStorageFolder, Windows::Storage::IStorageItem>
{
	IStorageFolder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolder>>(m_ptr); }
};

struct IStorageFile :
	IInspectable,
	impl_IStorageFile<IStorageFile>,
	Requires<IStorageFile, Windows::Storage::IStorageItem, Windows::Storage::Streams::IRandomAccessStreamReference, Windows::Storage::Streams::IInputStreamReference>
{
	IStorageFile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFile>>(m_ptr); }
};

struct IStorageFolderStatics :
	IInspectable,
	impl_IStorageFolderStatics<IStorageFolderStatics>
{
	IStorageFolderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolderStatics>>(m_ptr); }
};

struct IStorageItem2 :
	IInspectable,
	impl_IStorageItem2<IStorageItem2>,
	Requires<IStorageItem2, Windows::Storage::IStorageItem>
{
	IStorageItem2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItem2>>(m_ptr); }
};

struct IStorageItemProperties :
	IInspectable,
	impl_IStorageItemProperties<IStorageItemProperties>
{
	IStorageItemProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemProperties>>(m_ptr); }
};

struct IStorageItemProperties2 :
	IInspectable,
	impl_IStorageItemProperties2<IStorageItemProperties2>,
	Requires<IStorageItemProperties2, Windows::Storage::IStorageItemProperties>
{
	IStorageItemProperties2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemProperties2>>(m_ptr); }
};

struct IStorageItemPropertiesWithProvider :
	IInspectable,
	impl_IStorageItemPropertiesWithProvider<IStorageItemPropertiesWithProvider>,
	Requires<IStorageItemPropertiesWithProvider, Windows::Storage::IStorageItemProperties>
{
	IStorageItemPropertiesWithProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemPropertiesWithProvider>>(m_ptr); }
};

struct IStorageFilePropertiesWithAvailability :
	IInspectable,
	impl_IStorageFilePropertiesWithAvailability<IStorageFilePropertiesWithAvailability>
{
	IStorageFilePropertiesWithAvailability(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFilePropertiesWithAvailability>>(m_ptr); }
};

struct IStorageProvider :
	IInspectable,
	impl_IStorageProvider<IStorageProvider>
{
	IStorageProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageProvider>>(m_ptr); }
};

struct IStorageFolder2 :
	IInspectable,
	impl_IStorageFolder2<IStorageFolder2>
{
	IStorageFolder2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolder2>>(m_ptr); }
};

struct IFileIOStatics :
	IInspectable,
	impl_IFileIOStatics<IFileIOStatics>
{
	IFileIOStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileIOStatics>>(m_ptr); }
};

struct IPathIOStatics :
	IInspectable,
	impl_IPathIOStatics<IPathIOStatics>
{
	IPathIOStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathIOStatics>>(m_ptr); }
};

struct ICachedFileManagerStatics :
	IInspectable,
	impl_ICachedFileManagerStatics<ICachedFileManagerStatics>
{
	ICachedFileManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICachedFileManagerStatics>>(m_ptr); }
};

struct ISystemAudioProperties :
	IInspectable,
	impl_ISystemAudioProperties<ISystemAudioProperties>
{
	ISystemAudioProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemAudioProperties>>(m_ptr); }
};

struct ISystemGPSProperties :
	IInspectable,
	impl_ISystemGPSProperties<ISystemGPSProperties>
{
	ISystemGPSProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemGPSProperties>>(m_ptr); }
};

struct ISystemImageProperties :
	IInspectable,
	impl_ISystemImageProperties<ISystemImageProperties>
{
	ISystemImageProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemImageProperties>>(m_ptr); }
};

struct ISystemMediaProperties :
	IInspectable,
	impl_ISystemMediaProperties<ISystemMediaProperties>
{
	ISystemMediaProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaProperties>>(m_ptr); }
};

struct ISystemMusicProperties :
	IInspectable,
	impl_ISystemMusicProperties<ISystemMusicProperties>
{
	ISystemMusicProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMusicProperties>>(m_ptr); }
};

struct ISystemPhotoProperties :
	IInspectable,
	impl_ISystemPhotoProperties<ISystemPhotoProperties>
{
	ISystemPhotoProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemPhotoProperties>>(m_ptr); }
};

struct ISystemVideoProperties :
	IInspectable,
	impl_ISystemVideoProperties<ISystemVideoProperties>
{
	ISystemVideoProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemVideoProperties>>(m_ptr); }
};

struct ISystemProperties :
	IInspectable,
	impl_ISystemProperties<ISystemProperties>
{
	ISystemProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemProperties>>(m_ptr); }
};

struct IStorageStreamTransaction :
	IInspectable,
	impl_IStorageStreamTransaction<IStorageStreamTransaction>
{
	IStorageStreamTransaction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageStreamTransaction>>(m_ptr); }
};

struct IApplicationDataStatics :
	IInspectable,
	impl_IApplicationDataStatics<IApplicationDataStatics>
{
	IApplicationDataStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataStatics>>(m_ptr); }
};

struct IApplicationData :
	IInspectable,
	impl_IApplicationData<IApplicationData>
{
	IApplicationData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationData>>(m_ptr); }
};

struct ISetVersionRequest :
	IInspectable,
	impl_ISetVersionRequest<ISetVersionRequest>
{
	ISetVersionRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetVersionRequest>>(m_ptr); }
};

struct ISetVersionDeferral :
	IInspectable,
	impl_ISetVersionDeferral<ISetVersionDeferral>
{
	ISetVersionDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetVersionDeferral>>(m_ptr); }
};

struct IApplicationDataContainer :
	IInspectable,
	impl_IApplicationDataContainer<IApplicationDataContainer>
{
	IApplicationDataContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataContainer>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

struct IItemRemovedEventArgs :
	IInspectable,
	impl_IItemRemovedEventArgs<IItemRemovedEventArgs>
{
	IItemRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemRemovedEventArgs>>(m_ptr); }
};

struct IStorageItemAccessList :
	IInspectable,
	impl_IStorageItemAccessList<IStorageItemAccessList>
{
	IStorageItemAccessList(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemAccessList>>(m_ptr); }
};

struct IStorageItemMostRecentlyUsedList :
	IInspectable,
	impl_IStorageItemMostRecentlyUsedList<IStorageItemMostRecentlyUsedList>,
	Requires<IStorageItemMostRecentlyUsedList, Windows::Storage::AccessCache::IStorageItemAccessList>
{
	IStorageItemMostRecentlyUsedList(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemMostRecentlyUsedList>>(m_ptr); }
};

struct IStorageApplicationPermissionsStatics :
	IInspectable,
	impl_IStorageApplicationPermissionsStatics<IStorageApplicationPermissionsStatics>
{
	IStorageApplicationPermissionsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageApplicationPermissionsStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

struct IStorageItemInformation :
	IInspectable,
	impl_IStorageItemInformation<IStorageItemInformation>
{
	IStorageItemInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemInformation>>(m_ptr); }
};

struct IFileInformationFactoryFactory :
	IInspectable,
	impl_IFileInformationFactoryFactory<IFileInformationFactoryFactory>
{
	IFileInformationFactoryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileInformationFactoryFactory>>(m_ptr); }
};

struct IFileInformationFactory :
	IInspectable,
	impl_IFileInformationFactory<IFileInformationFactory>
{
	IFileInformationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileInformationFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

struct ICompressor :
	IInspectable,
	impl_ICompressor<ICompressor>,
	Requires<ICompressor, Windows::Storage::Streams::IOutputStream>
{
	ICompressor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompressor>>(m_ptr); }
};

struct IDecompressor :
	IInspectable,
	impl_IDecompressor<IDecompressor>,
	Requires<IDecompressor, Windows::Storage::Streams::IInputStream>
{
	IDecompressor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDecompressor>>(m_ptr); }
};

struct ICompressorFactory :
	IInspectable,
	impl_ICompressorFactory<ICompressorFactory>
{
	ICompressorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompressorFactory>>(m_ptr); }
};

struct IDecompressorFactory :
	IInspectable,
	impl_IDecompressorFactory<IDecompressorFactory>
{
	IDecompressorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDecompressorFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

struct IThumbnailProperties :
	IInspectable,
	impl_IThumbnailProperties<IThumbnailProperties>
{
	IThumbnailProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThumbnailProperties>>(m_ptr); }
};

struct IStorageItemExtraProperties :
	IInspectable,
	impl_IStorageItemExtraProperties<IStorageItemExtraProperties>
{
	IStorageItemExtraProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemExtraProperties>>(m_ptr); }
};

struct IStorageItemContentProperties :
	IInspectable,
	impl_IStorageItemContentProperties<IStorageItemContentProperties>,
	Requires<IStorageItemContentProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IStorageItemContentProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemContentProperties>>(m_ptr); }
};

struct IMusicProperties :
	IInspectable,
	impl_IMusicProperties<IMusicProperties>,
	Requires<IMusicProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IMusicProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMusicProperties>>(m_ptr); }
};

struct IImageProperties :
	IInspectable,
	impl_IImageProperties<IImageProperties>,
	Requires<IImageProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IImageProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageProperties>>(m_ptr); }
};

struct IVideoProperties :
	IInspectable,
	impl_IVideoProperties<IVideoProperties>,
	Requires<IVideoProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IVideoProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoProperties>>(m_ptr); }
};

struct IDocumentProperties :
	IInspectable,
	impl_IDocumentProperties<IDocumentProperties>,
	Requires<IDocumentProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IDocumentProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDocumentProperties>>(m_ptr); }
};

struct IBasicProperties :
	IInspectable,
	impl_IBasicProperties<IBasicProperties>
{
	IBasicProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBasicProperties>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

struct IFileOpenPicker :
	IInspectable,
	impl_IFileOpenPicker<IFileOpenPicker>
{
	IFileOpenPicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileOpenPicker>>(m_ptr); }
};

struct IFileSavePicker :
	IInspectable,
	impl_IFileSavePicker<IFileSavePicker>
{
	IFileSavePicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileSavePicker>>(m_ptr); }
};

struct IFolderPicker :
	IInspectable,
	impl_IFolderPicker<IFolderPicker>
{
	IFolderPicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFolderPicker>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

struct IFileRemovedEventArgs :
	IInspectable,
	impl_IFileRemovedEventArgs<IFileRemovedEventArgs>
{
	IFileRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileRemovedEventArgs>>(m_ptr); }
};

struct IFileOpenPickerUI :
	IInspectable,
	impl_IFileOpenPickerUI<IFileOpenPickerUI>
{
	IFileOpenPickerUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileOpenPickerUI>>(m_ptr); }
};

struct IPickerClosingEventArgs :
	IInspectable,
	impl_IPickerClosingEventArgs<IPickerClosingEventArgs>
{
	IPickerClosingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPickerClosingEventArgs>>(m_ptr); }
};

struct IPickerClosingOperation :
	IInspectable,
	impl_IPickerClosingOperation<IPickerClosingOperation>
{
	IPickerClosingOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPickerClosingOperation>>(m_ptr); }
};

struct IPickerClosingDeferral :
	IInspectable,
	impl_IPickerClosingDeferral<IPickerClosingDeferral>
{
	IPickerClosingDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPickerClosingDeferral>>(m_ptr); }
};

struct IFileSavePickerUI :
	IInspectable,
	impl_IFileSavePickerUI<IFileSavePickerUI>
{
	IFileSavePickerUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileSavePickerUI>>(m_ptr); }
};

struct ITargetFileRequestedEventArgs :
	IInspectable,
	impl_ITargetFileRequestedEventArgs<ITargetFileRequestedEventArgs>
{
	ITargetFileRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITargetFileRequestedEventArgs>>(m_ptr); }
};

struct ITargetFileRequest :
	IInspectable,
	impl_ITargetFileRequest<ITargetFileRequest>
{
	ITargetFileRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITargetFileRequest>>(m_ptr); }
};

struct ITargetFileRequestDeferral :
	IInspectable,
	impl_ITargetFileRequestDeferral<ITargetFileRequestDeferral>
{
	ITargetFileRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITargetFileRequestDeferral>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

struct ICachedFileUpdaterUI :
	IInspectable,
	impl_ICachedFileUpdaterUI<ICachedFileUpdaterUI>
{
	ICachedFileUpdaterUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICachedFileUpdaterUI>>(m_ptr); }
};

struct IFileUpdateRequestedEventArgs :
	IInspectable,
	impl_IFileUpdateRequestedEventArgs<IFileUpdateRequestedEventArgs>
{
	IFileUpdateRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileUpdateRequestedEventArgs>>(m_ptr); }
};

struct IFileUpdateRequest :
	IInspectable,
	impl_IFileUpdateRequest<IFileUpdateRequest>
{
	IFileUpdateRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileUpdateRequest>>(m_ptr); }
};

struct IFileUpdateRequestDeferral :
	IInspectable,
	impl_IFileUpdateRequestDeferral<IFileUpdateRequestDeferral>
{
	IFileUpdateRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileUpdateRequestDeferral>>(m_ptr); }
};

struct ICachedFileUpdaterStatics :
	IInspectable,
	impl_ICachedFileUpdaterStatics<ICachedFileUpdaterStatics>
{
	ICachedFileUpdaterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICachedFileUpdaterStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

struct IContentIndexerStatics :
	IInspectable,
	impl_IContentIndexerStatics<IContentIndexerStatics>
{
	IContentIndexerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentIndexerStatics>>(m_ptr); }
};

struct IIndexableContent :
	IInspectable,
	impl_IIndexableContent<IIndexableContent>
{
	IIndexableContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIndexableContent>>(m_ptr); }
};

struct IContentIndexer :
	IInspectable,
	impl_IContentIndexer<IContentIndexer>
{
	IContentIndexer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentIndexer>>(m_ptr); }
};

struct IValueAndLanguage :
	IInspectable,
	impl_IValueAndLanguage<IValueAndLanguage>
{
	IValueAndLanguage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IValueAndLanguage>>(m_ptr); }
};

struct IContentIndexerQueryOperations :
	IInspectable,
	impl_IContentIndexerQueryOperations<IContentIndexerQueryOperations>
{
	IContentIndexerQueryOperations(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentIndexerQueryOperations>>(m_ptr); }
};

struct IContentIndexerQuery :
	IInspectable,
	impl_IContentIndexerQuery<IContentIndexerQuery>
{
	IContentIndexerQuery(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentIndexerQuery>>(m_ptr); }
};

struct IQueryOptions :
	IInspectable,
	impl_IQueryOptions<IQueryOptions>
{
	IQueryOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQueryOptions>>(m_ptr); }
};

struct IQueryOptionsWithProviderFilter :
	IInspectable,
	impl_IQueryOptionsWithProviderFilter<IQueryOptionsWithProviderFilter>
{
	IQueryOptionsWithProviderFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQueryOptionsWithProviderFilter>>(m_ptr); }
};

struct IQueryOptionsFactory :
	IInspectable,
	impl_IQueryOptionsFactory<IQueryOptionsFactory>
{
	IQueryOptionsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQueryOptionsFactory>>(m_ptr); }
};

struct IStorageQueryResultBase :
	IInspectable,
	impl_IStorageQueryResultBase<IStorageQueryResultBase>
{
	IStorageQueryResultBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageQueryResultBase>>(m_ptr); }
};

struct IStorageFileQueryResult :
	IInspectable,
	impl_IStorageFileQueryResult<IStorageFileQueryResult>,
	Requires<IStorageFileQueryResult, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageFileQueryResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFileQueryResult>>(m_ptr); }
};

struct IStorageFileQueryResult2 :
	IInspectable,
	impl_IStorageFileQueryResult2<IStorageFileQueryResult2>,
	Requires<IStorageFileQueryResult2, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageFileQueryResult2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFileQueryResult2>>(m_ptr); }
};

struct IStorageFolderQueryResult :
	IInspectable,
	impl_IStorageFolderQueryResult<IStorageFolderQueryResult>,
	Requires<IStorageFolderQueryResult, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageFolderQueryResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolderQueryResult>>(m_ptr); }
};

struct IStorageItemQueryResult :
	IInspectable,
	impl_IStorageItemQueryResult<IStorageItemQueryResult>,
	Requires<IStorageItemQueryResult, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageItemQueryResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemQueryResult>>(m_ptr); }
};

struct IStorageFolderQueryOperations :
	IInspectable,
	impl_IStorageFolderQueryOperations<IStorageFolderQueryOperations>
{
	IStorageFolderQueryOperations(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolderQueryOperations>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

struct IDataReader :
	IInspectable,
	impl_IDataReader<IDataReader>
{
	IDataReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataReader>>(m_ptr); }
};

struct IDataReaderFactory :
	IInspectable,
	impl_IDataReaderFactory<IDataReaderFactory>
{
	IDataReaderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataReaderFactory>>(m_ptr); }
};

struct IDataReaderStatics :
	IInspectable,
	impl_IDataReaderStatics<IDataReaderStatics>
{
	IDataReaderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataReaderStatics>>(m_ptr); }
};

struct IDataWriter :
	IInspectable,
	impl_IDataWriter<IDataWriter>
{
	IDataWriter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataWriter>>(m_ptr); }
};

struct IDataWriterFactory :
	IInspectable,
	impl_IDataWriterFactory<IDataWriterFactory>
{
	IDataWriterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataWriterFactory>>(m_ptr); }
};

struct IRandomAccessStreamStatics :
	IInspectable,
	impl_IRandomAccessStreamStatics<IRandomAccessStreamStatics>
{
	IRandomAccessStreamStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStreamStatics>>(m_ptr); }
};

struct IBufferFactory :
	IInspectable,
	impl_IBufferFactory<IBufferFactory>
{
	IBufferFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBufferFactory>>(m_ptr); }
};

struct IBuffer :
	IInspectable,
	impl_IBuffer<IBuffer>
{
	IBuffer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBuffer>>(m_ptr); }
};

struct IContentTypeProvider :
	IInspectable,
	impl_IContentTypeProvider<IContentTypeProvider>
{
	IContentTypeProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentTypeProvider>>(m_ptr); }
};

struct IRandomAccessStreamReference :
	IInspectable,
	impl_IRandomAccessStreamReference<IRandomAccessStreamReference>
{
	IRandomAccessStreamReference(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStreamReference>>(m_ptr); }
};

struct IInputStreamReference :
	IInspectable,
	impl_IInputStreamReference<IInputStreamReference>
{
	IInputStreamReference(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputStreamReference>>(m_ptr); }
};

struct IRandomAccessStreamReferenceStatics :
	IInspectable,
	impl_IRandomAccessStreamReferenceStatics<IRandomAccessStreamReferenceStatics>
{
	IRandomAccessStreamReferenceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStreamReferenceStatics>>(m_ptr); }
};

struct IInputStream :
	IInspectable,
	impl_IInputStream<IInputStream>
{
	IInputStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputStream>>(m_ptr); }
};

struct IOutputStream :
	IInspectable,
	impl_IOutputStream<IOutputStream>
{
	IOutputStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOutputStream>>(m_ptr); }
};

struct IRandomAccessStream :
	IInspectable,
	impl_IRandomAccessStream<IRandomAccessStream>,
	Requires<IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream>
{
	IRandomAccessStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStream>>(m_ptr); }
};

struct IRandomAccessStreamWithContentType :
	IInspectable,
	impl_IRandomAccessStreamWithContentType<IRandomAccessStreamWithContentType>,
	Requires<IRandomAccessStreamWithContentType, Windows::Storage::Streams::IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream, Windows::Storage::Streams::IContentTypeProvider>
{
	IRandomAccessStreamWithContentType(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStreamWithContentType>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System {

struct ILauncherUIOptions :
	IInspectable,
	impl_ILauncherUIOptions<ILauncherUIOptions>
{
	ILauncherUIOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILauncherUIOptions>>(m_ptr); }
};

struct ILauncherOptions :
	IInspectable,
	impl_ILauncherOptions<ILauncherOptions>
{
	ILauncherOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILauncherOptions>>(m_ptr); }
};

struct ILauncherViewOptions :
	IInspectable,
	impl_ILauncherViewOptions<ILauncherViewOptions>
{
	ILauncherViewOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILauncherViewOptions>>(m_ptr); }
};

struct ILauncherStatics :
	IInspectable,
	impl_ILauncherStatics<ILauncherStatics>
{
	ILauncherStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILauncherStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

struct IDisplayRequest :
	IInspectable,
	impl_IDisplayRequest<IDisplayRequest>
{
	IDisplayRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDisplayRequest>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

struct IHardwareToken :
	IInspectable,
	impl_IHardwareToken<IHardwareToken>
{
	IHardwareToken(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHardwareToken>>(m_ptr); }
};

struct IHardwareIdentificationStatics :
	IInspectable,
	impl_IHardwareIdentificationStatics<IHardwareIdentificationStatics>
{
	IHardwareIdentificationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHardwareIdentificationStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

struct ISmbiosInformationStatics :
	IInspectable,
	impl_ISmbiosInformationStatics<ISmbiosInformationStatics>
{
	ISmbiosInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmbiosInformationStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

struct IInteractiveSessionStatics :
	IInspectable,
	impl_IInteractiveSessionStatics<IInteractiveSessionStatics>
{
	IInteractiveSessionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInteractiveSessionStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

struct ITimerElapsedHandler :
	IUnknown,
	impl_ITimerElapsedHandler<ITimerElapsedHandler>
{
	ITimerElapsedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimerElapsedHandler>>(m_ptr); }
};

struct ITimerDestroyedHandler :
	IUnknown,
	impl_ITimerDestroyedHandler<ITimerDestroyedHandler>
{
	ITimerDestroyedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimerDestroyedHandler>>(m_ptr); }
};

struct IWorkItemHandler :
	IUnknown,
	impl_IWorkItemHandler<IWorkItemHandler>
{
	IWorkItemHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWorkItemHandler>>(m_ptr); }
};

struct IThreadPoolStatics :
	IInspectable,
	impl_IThreadPoolStatics<IThreadPoolStatics>
{
	IThreadPoolStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThreadPoolStatics>>(m_ptr); }
};

struct IThreadPoolTimer :
	IInspectable,
	impl_IThreadPoolTimer<IThreadPoolTimer>
{
	IThreadPoolTimer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThreadPoolTimer>>(m_ptr); }
};

struct IThreadPoolTimerStatics :
	IInspectable,
	impl_IThreadPoolTimerStatics<IThreadPoolTimerStatics>
{
	IThreadPoolTimerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThreadPoolTimerStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

struct ISignalHandler :
	IUnknown,
	impl_ISignalHandler<ISignalHandler>
{
	ISignalHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignalHandler>>(m_ptr); }
};

struct ISignalNotifierStatics :
	IInspectable,
	impl_ISignalNotifierStatics<ISignalNotifierStatics>
{
	ISignalNotifierStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignalNotifierStatics>>(m_ptr); }
};

struct IPreallocatedWorkItemFactory :
	IInspectable,
	impl_IPreallocatedWorkItemFactory<IPreallocatedWorkItemFactory>
{
	IPreallocatedWorkItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPreallocatedWorkItemFactory>>(m_ptr); }
};

struct IPreallocatedWorkItem :
	IInspectable,
	impl_IPreallocatedWorkItem<IPreallocatedWorkItem>
{
	IPreallocatedWorkItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPreallocatedWorkItem>>(m_ptr); }
};

struct ISignalNotifier :
	IInspectable,
	impl_ISignalNotifier<ISignalNotifier>
{
	ISignalNotifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignalNotifier>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

struct IAdvertisingManagerStatics :
	IInspectable,
	impl_IAdvertisingManagerStatics<IAdvertisingManagerStatics>
{
	IAdvertisingManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAdvertisingManagerStatics>>(m_ptr); }
};

struct IUserInformationStatics :
	IInspectable,
	impl_IUserInformationStatics<IUserInformationStatics>
{
	IUserInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserInformationStatics>>(m_ptr); }
};

struct ILockScreenStatics :
	IInspectable,
	impl_ILockScreenStatics<ILockScreenStatics>
{
	ILockScreenStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenStatics>>(m_ptr); }
};

struct ILockScreenImageFeedStatics :
	IInspectable,
	impl_ILockScreenImageFeedStatics<ILockScreenImageFeedStatics>
{
	ILockScreenImageFeedStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenImageFeedStatics>>(m_ptr); }
};

struct IGlobalizationPreferencesStatics :
	IInspectable,
	impl_IGlobalizationPreferencesStatics<IGlobalizationPreferencesStatics>
{
	IGlobalizationPreferencesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGlobalizationPreferencesStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI {

struct IColorHelper :
	IInspectable,
	impl_IColorHelper<IColorHelper>
{
	IColorHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorHelper>>(m_ptr); }
};

struct IColorHelperStatics :
	IInspectable,
	impl_IColorHelperStatics<IColorHelperStatics>
{
	IColorHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorHelperStatics>>(m_ptr); }
};

struct IColors :
	IInspectable,
	impl_IColors<IColors>
{
	IColors(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColors>>(m_ptr); }
};

struct IColorsStatics :
	IInspectable,
	impl_IColorsStatics<IColorsStatics>
{
	IColorsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorsStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

struct IWebAccountProviderCommandInvokedHandler :
	IUnknown,
	impl_IWebAccountProviderCommandInvokedHandler<IWebAccountProviderCommandInvokedHandler>
{
	IWebAccountProviderCommandInvokedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProviderCommandInvokedHandler>>(m_ptr); }
};

struct IWebAccountCommandInvokedHandler :
	IUnknown,
	impl_IWebAccountCommandInvokedHandler<IWebAccountCommandInvokedHandler>
{
	IWebAccountCommandInvokedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountCommandInvokedHandler>>(m_ptr); }
};

struct ICredentialCommandCredentialDeletedHandler :
	IUnknown,
	impl_ICredentialCommandCredentialDeletedHandler<ICredentialCommandCredentialDeletedHandler>
{
	ICredentialCommandCredentialDeletedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialCommandCredentialDeletedHandler>>(m_ptr); }
};

struct ISettingsCommandFactory :
	IInspectable,
	impl_ISettingsCommandFactory<ISettingsCommandFactory>
{
	ISettingsCommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsCommandFactory>>(m_ptr); }
};

struct ISettingsCommandStatics :
	IInspectable,
	impl_ISettingsCommandStatics<ISettingsCommandStatics>
{
	ISettingsCommandStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsCommandStatics>>(m_ptr); }
};

struct ISettingsPaneCommandsRequest :
	IInspectable,
	impl_ISettingsPaneCommandsRequest<ISettingsPaneCommandsRequest>
{
	ISettingsPaneCommandsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsPaneCommandsRequest>>(m_ptr); }
};

struct ISettingsPaneCommandsRequestedEventArgs :
	IInspectable,
	impl_ISettingsPaneCommandsRequestedEventArgs<ISettingsPaneCommandsRequestedEventArgs>
{
	ISettingsPaneCommandsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsPaneCommandsRequestedEventArgs>>(m_ptr); }
};

struct ISettingsPaneStatics :
	IInspectable,
	impl_ISettingsPaneStatics<ISettingsPaneStatics>
{
	ISettingsPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsPaneStatics>>(m_ptr); }
};

struct ISettingsPane :
	IInspectable,
	impl_ISettingsPane<ISettingsPane>
{
	ISettingsPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsPane>>(m_ptr); }
};

struct IWebAccountProviderCommandFactory :
	IInspectable,
	impl_IWebAccountProviderCommandFactory<IWebAccountProviderCommandFactory>
{
	IWebAccountProviderCommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProviderCommandFactory>>(m_ptr); }
};

struct IWebAccountCommandFactory :
	IInspectable,
	impl_IWebAccountCommandFactory<IWebAccountCommandFactory>
{
	IWebAccountCommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountCommandFactory>>(m_ptr); }
};

struct ICredentialCommandFactory :
	IInspectable,
	impl_ICredentialCommandFactory<ICredentialCommandFactory>
{
	ICredentialCommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialCommandFactory>>(m_ptr); }
};

struct IWebAccountProviderCommand :
	IInspectable,
	impl_IWebAccountProviderCommand<IWebAccountProviderCommand>
{
	IWebAccountProviderCommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProviderCommand>>(m_ptr); }
};

struct IWebAccountInvokedArgs :
	IInspectable,
	impl_IWebAccountInvokedArgs<IWebAccountInvokedArgs>
{
	IWebAccountInvokedArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountInvokedArgs>>(m_ptr); }
};

struct IWebAccountCommand :
	IInspectable,
	impl_IWebAccountCommand<IWebAccountCommand>
{
	IWebAccountCommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountCommand>>(m_ptr); }
};

struct ICredentialCommand :
	IInspectable,
	impl_ICredentialCommand<ICredentialCommand>
{
	ICredentialCommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialCommand>>(m_ptr); }
};

struct IAccountsSettingsPaneEventDeferral :
	IInspectable,
	impl_IAccountsSettingsPaneEventDeferral<IAccountsSettingsPaneEventDeferral>
{
	IAccountsSettingsPaneEventDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccountsSettingsPaneEventDeferral>>(m_ptr); }
};

struct IAccountsSettingsPaneCommandsRequestedEventArgs :
	IInspectable,
	impl_IAccountsSettingsPaneCommandsRequestedEventArgs<IAccountsSettingsPaneCommandsRequestedEventArgs>
{
	IAccountsSettingsPaneCommandsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccountsSettingsPaneCommandsRequestedEventArgs>>(m_ptr); }
};

struct IAccountsSettingsPaneStatics :
	IInspectable,
	impl_IAccountsSettingsPaneStatics<IAccountsSettingsPaneStatics>
{
	IAccountsSettingsPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccountsSettingsPaneStatics>>(m_ptr); }
};

struct IAccountsSettingsPane :
	IInspectable,
	impl_IAccountsSettingsPane<IAccountsSettingsPane>
{
	IAccountsSettingsPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccountsSettingsPane>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

struct IDispatchedHandler :
	IUnknown,
	impl_IDispatchedHandler<IDispatchedHandler>
{
	IDispatchedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDispatchedHandler>>(m_ptr); }
};

struct IIdleDispatchedHandler :
	IUnknown,
	impl_IIdleDispatchedHandler<IIdleDispatchedHandler>
{
	IIdleDispatchedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIdleDispatchedHandler>>(m_ptr); }
};

struct ICoreWindowEventArgs :
	IInspectable,
	impl_ICoreWindowEventArgs<ICoreWindowEventArgs>
{
	ICoreWindowEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowEventArgs>>(m_ptr); }
};

struct IAutomationProviderRequestedEventArgs :
	IInspectable,
	impl_IAutomationProviderRequestedEventArgs<IAutomationProviderRequestedEventArgs>,
	Requires<IAutomationProviderRequestedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IAutomationProviderRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationProviderRequestedEventArgs>>(m_ptr); }
};

struct ICharacterReceivedEventArgs :
	IInspectable,
	impl_ICharacterReceivedEventArgs<ICharacterReceivedEventArgs>,
	Requires<ICharacterReceivedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	ICharacterReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICharacterReceivedEventArgs>>(m_ptr); }
};

struct IInputEnabledEventArgs :
	IInspectable,
	impl_IInputEnabledEventArgs<IInputEnabledEventArgs>,
	Requires<IInputEnabledEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IInputEnabledEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputEnabledEventArgs>>(m_ptr); }
};

struct IKeyEventArgs :
	IInspectable,
	impl_IKeyEventArgs<IKeyEventArgs>,
	Requires<IKeyEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IKeyEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyEventArgs>>(m_ptr); }
};

struct IPointerEventArgs :
	IInspectable,
	impl_IPointerEventArgs<IPointerEventArgs>,
	Requires<IPointerEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IPointerEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerEventArgs>>(m_ptr); }
};

struct ITouchHitTestingEventArgs :
	IInspectable,
	impl_ITouchHitTestingEventArgs<ITouchHitTestingEventArgs>,
	Requires<ITouchHitTestingEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	ITouchHitTestingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITouchHitTestingEventArgs>>(m_ptr); }
};

struct IWindowActivatedEventArgs :
	IInspectable,
	impl_IWindowActivatedEventArgs<IWindowActivatedEventArgs>,
	Requires<IWindowActivatedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IWindowActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowActivatedEventArgs>>(m_ptr); }
};

struct IWindowSizeChangedEventArgs :
	IInspectable,
	impl_IWindowSizeChangedEventArgs<IWindowSizeChangedEventArgs>,
	Requires<IWindowSizeChangedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IWindowSizeChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowSizeChangedEventArgs>>(m_ptr); }
};

struct IVisibilityChangedEventArgs :
	IInspectable,
	impl_IVisibilityChangedEventArgs<IVisibilityChangedEventArgs>,
	Requires<IVisibilityChangedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IVisibilityChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisibilityChangedEventArgs>>(m_ptr); }
};

struct ICoreWindow :
	IInspectable,
	impl_ICoreWindow<ICoreWindow>
{
	ICoreWindow(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindow>>(m_ptr); }
};

struct ICoreWindowStatic :
	IInspectable,
	impl_ICoreWindowStatic<ICoreWindowStatic>
{
	ICoreWindowStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowStatic>>(m_ptr); }
};

struct IAcceleratorKeyEventArgs :
	IInspectable,
	impl_IAcceleratorKeyEventArgs<IAcceleratorKeyEventArgs>,
	Requires<IAcceleratorKeyEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IAcceleratorKeyEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAcceleratorKeyEventArgs>>(m_ptr); }
};

struct ICoreAcceleratorKeys :
	IInspectable,
	impl_ICoreAcceleratorKeys<ICoreAcceleratorKeys>
{
	ICoreAcceleratorKeys(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreAcceleratorKeys>>(m_ptr); }
};

struct ICoreDispatcher :
	IInspectable,
	impl_ICoreDispatcher<ICoreDispatcher>,
	Requires<ICoreDispatcher, Windows::UI::Core::ICoreAcceleratorKeys>
{
	ICoreDispatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreDispatcher>>(m_ptr); }
};

struct ICoreDispatcherWithTaskPriority :
	IInspectable,
	impl_ICoreDispatcherWithTaskPriority<ICoreDispatcherWithTaskPriority>
{
	ICoreDispatcherWithTaskPriority(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreDispatcherWithTaskPriority>>(m_ptr); }
};

struct IIdleDispatchedHandlerArgs :
	IInspectable,
	impl_IIdleDispatchedHandlerArgs<IIdleDispatchedHandlerArgs>
{
	IIdleDispatchedHandlerArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIdleDispatchedHandlerArgs>>(m_ptr); }
};

struct ICoreCursor :
	IInspectable,
	impl_ICoreCursor<ICoreCursor>
{
	ICoreCursor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreCursor>>(m_ptr); }
};

struct ICoreCursorFactory :
	IInspectable,
	impl_ICoreCursorFactory<ICoreCursorFactory>
{
	ICoreCursorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreCursorFactory>>(m_ptr); }
};

struct IInitializeWithCoreWindow :
	IInspectable,
	impl_IInitializeWithCoreWindow<IInitializeWithCoreWindow>
{
	IInitializeWithCoreWindow(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInitializeWithCoreWindow>>(m_ptr); }
};

struct ICoreWindowResizeManager :
	IInspectable,
	impl_ICoreWindowResizeManager<ICoreWindowResizeManager>
{
	ICoreWindowResizeManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowResizeManager>>(m_ptr); }
};

struct ICoreWindowResizeManagerLayoutCapability :
	IInspectable,
	impl_ICoreWindowResizeManagerLayoutCapability<ICoreWindowResizeManagerLayoutCapability>
{
	ICoreWindowResizeManagerLayoutCapability(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowResizeManagerLayoutCapability>>(m_ptr); }
};

struct ICoreWindowResizeManagerStatics :
	IInspectable,
	impl_ICoreWindowResizeManagerStatics<ICoreWindowResizeManagerStatics>
{
	ICoreWindowResizeManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowResizeManagerStatics>>(m_ptr); }
};

struct ICoreInputSourceBase :
	IInspectable,
	impl_ICoreInputSourceBase<ICoreInputSourceBase>
{
	ICoreInputSourceBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreInputSourceBase>>(m_ptr); }
};

struct ICorePointerInputSource :
	IInspectable,
	impl_ICorePointerInputSource<ICorePointerInputSource>
{
	ICorePointerInputSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICorePointerInputSource>>(m_ptr); }
};

struct ICoreKeyboardInputSource :
	IInspectable,
	impl_ICoreKeyboardInputSource<ICoreKeyboardInputSource>
{
	ICoreKeyboardInputSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreKeyboardInputSource>>(m_ptr); }
};

struct ICoreComponentFocusable :
	IInspectable,
	impl_ICoreComponentFocusable<ICoreComponentFocusable>
{
	ICoreComponentFocusable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreComponentFocusable>>(m_ptr); }
};

struct ICoreTouchHitTesting :
	IInspectable,
	impl_ICoreTouchHitTesting<ICoreTouchHitTesting>
{
	ICoreTouchHitTesting(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreTouchHitTesting>>(m_ptr); }
};

struct ICoreWindowPopupShowingEventArgs :
	IInspectable,
	impl_ICoreWindowPopupShowingEventArgs<ICoreWindowPopupShowingEventArgs>
{
	ICoreWindowPopupShowingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowPopupShowingEventArgs>>(m_ptr); }
};

struct ICoreWindowDialog :
	IInspectable,
	impl_ICoreWindowDialog<ICoreWindowDialog>
{
	ICoreWindowDialog(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowDialog>>(m_ptr); }
};

struct ICoreWindowDialogFactory :
	IInspectable,
	impl_ICoreWindowDialogFactory<ICoreWindowDialogFactory>
{
	ICoreWindowDialogFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowDialogFactory>>(m_ptr); }
};

struct ICoreWindowFlyout :
	IInspectable,
	impl_ICoreWindowFlyout<ICoreWindowFlyout>
{
	ICoreWindowFlyout(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowFlyout>>(m_ptr); }
};

struct ICoreWindowFlyoutFactory :
	IInspectable,
	impl_ICoreWindowFlyoutFactory<ICoreWindowFlyoutFactory>
{
	ICoreWindowFlyoutFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowFlyoutFactory>>(m_ptr); }
};

struct ICoreWindowFactory :
	IInspectable,
	impl_ICoreWindowFactory<ICoreWindowFactory>
{
	ICoreWindowFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

struct IPropertyAnimation :
	IInspectable,
	impl_IPropertyAnimation<IPropertyAnimation>
{
	IPropertyAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyAnimation>>(m_ptr); }
};

struct IScaleAnimation :
	IInspectable,
	impl_IScaleAnimation<IScaleAnimation>,
	Requires<IScaleAnimation, Windows::UI::Core::AnimationMetrics::IPropertyAnimation>
{
	IScaleAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScaleAnimation>>(m_ptr); }
};

struct IOpacityAnimation :
	IInspectable,
	impl_IOpacityAnimation<IOpacityAnimation>,
	Requires<IOpacityAnimation, Windows::UI::Core::AnimationMetrics::IPropertyAnimation>
{
	IOpacityAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOpacityAnimation>>(m_ptr); }
};

struct IAnimationDescription :
	IInspectable,
	impl_IAnimationDescription<IAnimationDescription>
{
	IAnimationDescription(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAnimationDescription>>(m_ptr); }
};

struct IAnimationDescriptionFactory :
	IInspectable,
	impl_IAnimationDescriptionFactory<IAnimationDescriptionFactory>
{
	IAnimationDescriptionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAnimationDescriptionFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

struct IEdgeGestureEventArgs :
	IInspectable,
	impl_IEdgeGestureEventArgs<IEdgeGestureEventArgs>
{
	IEdgeGestureEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEdgeGestureEventArgs>>(m_ptr); }
};

struct IEdgeGestureStatics :
	IInspectable,
	impl_IEdgeGestureStatics<IEdgeGestureStatics>
{
	IEdgeGestureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEdgeGestureStatics>>(m_ptr); }
};

struct IEdgeGesture :
	IInspectable,
	impl_IEdgeGesture<IEdgeGesture>
{
	IEdgeGesture(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEdgeGesture>>(m_ptr); }
};

struct ITappedEventArgs :
	IInspectable,
	impl_ITappedEventArgs<ITappedEventArgs>
{
	ITappedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITappedEventArgs>>(m_ptr); }
};

struct IRightTappedEventArgs :
	IInspectable,
	impl_IRightTappedEventArgs<IRightTappedEventArgs>
{
	IRightTappedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRightTappedEventArgs>>(m_ptr); }
};

struct IHoldingEventArgs :
	IInspectable,
	impl_IHoldingEventArgs<IHoldingEventArgs>
{
	IHoldingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHoldingEventArgs>>(m_ptr); }
};

struct IDraggingEventArgs :
	IInspectable,
	impl_IDraggingEventArgs<IDraggingEventArgs>
{
	IDraggingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDraggingEventArgs>>(m_ptr); }
};

struct IManipulationStartedEventArgs :
	IInspectable,
	impl_IManipulationStartedEventArgs<IManipulationStartedEventArgs>
{
	IManipulationStartedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationStartedEventArgs>>(m_ptr); }
};

struct IManipulationUpdatedEventArgs :
	IInspectable,
	impl_IManipulationUpdatedEventArgs<IManipulationUpdatedEventArgs>
{
	IManipulationUpdatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationUpdatedEventArgs>>(m_ptr); }
};

struct IManipulationInertiaStartingEventArgs :
	IInspectable,
	impl_IManipulationInertiaStartingEventArgs<IManipulationInertiaStartingEventArgs>
{
	IManipulationInertiaStartingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationInertiaStartingEventArgs>>(m_ptr); }
};

struct IManipulationCompletedEventArgs :
	IInspectable,
	impl_IManipulationCompletedEventArgs<IManipulationCompletedEventArgs>
{
	IManipulationCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationCompletedEventArgs>>(m_ptr); }
};

struct ICrossSlidingEventArgs :
	IInspectable,
	impl_ICrossSlidingEventArgs<ICrossSlidingEventArgs>
{
	ICrossSlidingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICrossSlidingEventArgs>>(m_ptr); }
};

struct IMouseWheelParameters :
	IInspectable,
	impl_IMouseWheelParameters<IMouseWheelParameters>
{
	IMouseWheelParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseWheelParameters>>(m_ptr); }
};

struct IGestureRecognizer :
	IInspectable,
	impl_IGestureRecognizer<IGestureRecognizer>
{
	IGestureRecognizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGestureRecognizer>>(m_ptr); }
};

struct IPointerPointStatics :
	IInspectable,
	impl_IPointerPointStatics<IPointerPointStatics>
{
	IPointerPointStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerPointStatics>>(m_ptr); }
};

struct IPointerPointTransform :
	IInspectable,
	impl_IPointerPointTransform<IPointerPointTransform>
{
	IPointerPointTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerPointTransform>>(m_ptr); }
};

struct IPointerPoint :
	IInspectable,
	impl_IPointerPoint<IPointerPoint>
{
	IPointerPoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerPoint>>(m_ptr); }
};

struct IPointerPointProperties :
	IInspectable,
	impl_IPointerPointProperties<IPointerPointProperties>
{
	IPointerPointProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerPointProperties>>(m_ptr); }
};

struct IPointerVisualizationSettings :
	IInspectable,
	impl_IPointerVisualizationSettings<IPointerVisualizationSettings>
{
	IPointerVisualizationSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerVisualizationSettings>>(m_ptr); }
};

struct IPointerVisualizationSettingsStatics :
	IInspectable,
	impl_IPointerVisualizationSettingsStatics<IPointerVisualizationSettingsStatics>
{
	IPointerVisualizationSettingsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerVisualizationSettingsStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

struct IInkDrawingAttributes :
	IInspectable,
	impl_IInkDrawingAttributes<IInkDrawingAttributes>
{
	IInkDrawingAttributes(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkDrawingAttributes>>(m_ptr); }
};

struct IInkStrokeRenderingSegment :
	IInspectable,
	impl_IInkStrokeRenderingSegment<IInkStrokeRenderingSegment>
{
	IInkStrokeRenderingSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkStrokeRenderingSegment>>(m_ptr); }
};

struct IInkStroke :
	IInspectable,
	impl_IInkStroke<IInkStroke>
{
	IInkStroke(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkStroke>>(m_ptr); }
};

struct IInkStrokeBuilder :
	IInspectable,
	impl_IInkStrokeBuilder<IInkStrokeBuilder>
{
	IInkStrokeBuilder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkStrokeBuilder>>(m_ptr); }
};

struct IInkRecognitionResult :
	IInspectable,
	impl_IInkRecognitionResult<IInkRecognitionResult>
{
	IInkRecognitionResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkRecognitionResult>>(m_ptr); }
};

struct IInkStrokeContainer :
	IInspectable,
	impl_IInkStrokeContainer<IInkStrokeContainer>
{
	IInkStrokeContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkStrokeContainer>>(m_ptr); }
};

struct IInkRecognizer :
	IInspectable,
	impl_IInkRecognizer<IInkRecognizer>
{
	IInkRecognizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkRecognizer>>(m_ptr); }
};

struct IInkRecognizerContainer :
	IInspectable,
	impl_IInkRecognizerContainer<IInkRecognizerContainer>
{
	IInkRecognizerContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkRecognizerContainer>>(m_ptr); }
};

struct IInkManager :
	IInspectable,
	impl_IInkManager<IInkManager>,
	Requires<IInkManager, Windows::UI::Input::Inking::IInkStrokeContainer, Windows::UI::Input::Inking::IInkRecognizerContainer>
{
	IInkManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkManager>>(m_ptr); }
	using impl_IInkRecognizerContainer::RecognizeAsync;
	using impl_IInkManager::RecognizeAsync;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

struct IToastDismissedEventArgs :
	IInspectable,
	impl_IToastDismissedEventArgs<IToastDismissedEventArgs>
{
	IToastDismissedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastDismissedEventArgs>>(m_ptr); }
};

struct IToastFailedEventArgs :
	IInspectable,
	impl_IToastFailedEventArgs<IToastFailedEventArgs>
{
	IToastFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastFailedEventArgs>>(m_ptr); }
};

struct IToastActivatedEventArgs :
	IInspectable,
	impl_IToastActivatedEventArgs<IToastActivatedEventArgs>
{
	IToastActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastActivatedEventArgs>>(m_ptr); }
};

struct ITileUpdateManagerStatics :
	IInspectable,
	impl_ITileUpdateManagerStatics<ITileUpdateManagerStatics>
{
	ITileUpdateManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileUpdateManagerStatics>>(m_ptr); }
};

struct ITileUpdater :
	IInspectable,
	impl_ITileUpdater<ITileUpdater>
{
	ITileUpdater(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileUpdater>>(m_ptr); }
};

struct ITileUpdater2 :
	IInspectable,
	impl_ITileUpdater2<ITileUpdater2>
{
	ITileUpdater2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileUpdater2>>(m_ptr); }
};

struct IBadgeUpdateManagerStatics :
	IInspectable,
	impl_IBadgeUpdateManagerStatics<IBadgeUpdateManagerStatics>
{
	IBadgeUpdateManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBadgeUpdateManagerStatics>>(m_ptr); }
};

struct IBadgeUpdater :
	IInspectable,
	impl_IBadgeUpdater<IBadgeUpdater>
{
	IBadgeUpdater(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBadgeUpdater>>(m_ptr); }
};

struct IToastNotificationManagerStatics :
	IInspectable,
	impl_IToastNotificationManagerStatics<IToastNotificationManagerStatics>
{
	IToastNotificationManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastNotificationManagerStatics>>(m_ptr); }
};

struct IToastNotifier :
	IInspectable,
	impl_IToastNotifier<IToastNotifier>
{
	IToastNotifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastNotifier>>(m_ptr); }
};

struct ITileNotificationFactory :
	IInspectable,
	impl_ITileNotificationFactory<ITileNotificationFactory>
{
	ITileNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileNotificationFactory>>(m_ptr); }
};

struct ITileNotification :
	IInspectable,
	impl_ITileNotification<ITileNotification>
{
	ITileNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileNotification>>(m_ptr); }
};

struct IBadgeNotificationFactory :
	IInspectable,
	impl_IBadgeNotificationFactory<IBadgeNotificationFactory>
{
	IBadgeNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBadgeNotificationFactory>>(m_ptr); }
};

struct IBadgeNotification :
	IInspectable,
	impl_IBadgeNotification<IBadgeNotification>
{
	IBadgeNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBadgeNotification>>(m_ptr); }
};

struct IToastNotificationFactory :
	IInspectable,
	impl_IToastNotificationFactory<IToastNotificationFactory>
{
	IToastNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastNotificationFactory>>(m_ptr); }
};

struct IToastNotification :
	IInspectable,
	impl_IToastNotification<IToastNotification>
{
	IToastNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastNotification>>(m_ptr); }
};

struct IScheduledToastNotificationFactory :
	IInspectable,
	impl_IScheduledToastNotificationFactory<IScheduledToastNotificationFactory>
{
	IScheduledToastNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScheduledToastNotificationFactory>>(m_ptr); }
};

struct IScheduledToastNotification :
	IInspectable,
	impl_IScheduledToastNotification<IScheduledToastNotification>
{
	IScheduledToastNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScheduledToastNotification>>(m_ptr); }
};

struct IScheduledTileNotificationFactory :
	IInspectable,
	impl_IScheduledTileNotificationFactory<IScheduledTileNotificationFactory>
{
	IScheduledTileNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScheduledTileNotificationFactory>>(m_ptr); }
};

struct IScheduledTileNotification :
	IInspectable,
	impl_IScheduledTileNotification<IScheduledTileNotification>
{
	IScheduledTileNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScheduledTileNotification>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

struct IUICommandInvokedHandler :
	IUnknown,
	impl_IUICommandInvokedHandler<IUICommandInvokedHandler>
{
	IUICommandInvokedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUICommandInvokedHandler>>(m_ptr); }
};

struct IMessageDialog :
	IInspectable,
	impl_IMessageDialog<IMessageDialog>
{
	IMessageDialog(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageDialog>>(m_ptr); }
};

struct IMessageDialogFactory :
	IInspectable,
	impl_IMessageDialogFactory<IMessageDialogFactory>
{
	IMessageDialogFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageDialogFactory>>(m_ptr); }
};

struct IUICommand :
	IInspectable,
	impl_IUICommand<IUICommand>
{
	IUICommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUICommand>>(m_ptr); }
};

struct IUICommandFactory :
	IInspectable,
	impl_IUICommandFactory<IUICommandFactory>
{
	IUICommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUICommandFactory>>(m_ptr); }
};

struct IPopupMenu :
	IInspectable,
	impl_IPopupMenu<IPopupMenu>
{
	IPopupMenu(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopupMenu>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

struct ISecondaryTile :
	IInspectable,
	impl_ISecondaryTile<ISecondaryTile>
{
	ISecondaryTile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTile>>(m_ptr); }
};

struct ISecondaryTile2 :
	IInspectable,
	impl_ISecondaryTile2<ISecondaryTile2>,
	Requires<ISecondaryTile2, Windows::UI::StartScreen::ISecondaryTile>
{
	ISecondaryTile2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTile2>>(m_ptr); }
};

struct ISecondaryTileVisualElements :
	IInspectable,
	impl_ISecondaryTileVisualElements<ISecondaryTileVisualElements>
{
	ISecondaryTileVisualElements(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTileVisualElements>>(m_ptr); }
};

struct ISecondaryTileFactory :
	IInspectable,
	impl_ISecondaryTileFactory<ISecondaryTileFactory>
{
	ISecondaryTileFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTileFactory>>(m_ptr); }
};

struct ISecondaryTileFactory2 :
	IInspectable,
	impl_ISecondaryTileFactory2<ISecondaryTileFactory2>,
	Requires<ISecondaryTileFactory2, Windows::UI::StartScreen::ISecondaryTileFactory>
{
	ISecondaryTileFactory2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTileFactory2>>(m_ptr); }
};

struct ISecondaryTileStatics :
	IInspectable,
	impl_ISecondaryTileStatics<ISecondaryTileStatics>
{
	ISecondaryTileStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTileStatics>>(m_ptr); }
};

struct IVisualElementsRequestedEventArgs :
	IInspectable,
	impl_IVisualElementsRequestedEventArgs<IVisualElementsRequestedEventArgs>
{
	IVisualElementsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualElementsRequestedEventArgs>>(m_ptr); }
};

struct IVisualElementsRequest :
	IInspectable,
	impl_IVisualElementsRequest<IVisualElementsRequest>
{
	IVisualElementsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualElementsRequest>>(m_ptr); }
};

struct IVisualElementsRequestDeferral :
	IInspectable,
	impl_IVisualElementsRequestDeferral<IVisualElementsRequestDeferral>
{
	IVisualElementsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualElementsRequestDeferral>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

struct ITextConstantsStatics :
	IInspectable,
	impl_ITextConstantsStatics<ITextConstantsStatics>
{
	ITextConstantsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextConstantsStatics>>(m_ptr); }
};

struct ITextDocument :
	IInspectable,
	impl_ITextDocument<ITextDocument>
{
	ITextDocument(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextDocument>>(m_ptr); }
};

struct ITextRange :
	IInspectable,
	impl_ITextRange<ITextRange>
{
	ITextRange(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextRange>>(m_ptr); }
};

struct ITextSelection :
	IInspectable,
	impl_ITextSelection<ITextSelection>,
	Requires<ITextSelection, Windows::UI::Text::ITextRange>
{
	ITextSelection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextSelection>>(m_ptr); }
};

struct ITextCharacterFormat :
	IInspectable,
	impl_ITextCharacterFormat<ITextCharacterFormat>
{
	ITextCharacterFormat(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextCharacterFormat>>(m_ptr); }
};

struct ITextParagraphFormat :
	IInspectable,
	impl_ITextParagraphFormat<ITextParagraphFormat>
{
	ITextParagraphFormat(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextParagraphFormat>>(m_ptr); }
};

struct IFontWeights :
	IInspectable,
	impl_IFontWeights<IFontWeights>
{
	IFontWeights(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFontWeights>>(m_ptr); }
};

struct IFontWeightsStatics :
	IInspectable,
	impl_IFontWeightsStatics<IFontWeightsStatics>
{
	IFontWeightsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFontWeightsStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

struct IApplicationViewSwitcherStatics :
	IInspectable,
	impl_IApplicationViewSwitcherStatics<IApplicationViewSwitcherStatics>
{
	IApplicationViewSwitcherStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewSwitcherStatics>>(m_ptr); }
};

struct IApplicationViewInteropStatics :
	IInspectable,
	impl_IApplicationViewInteropStatics<IApplicationViewInteropStatics>
{
	IApplicationViewInteropStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewInteropStatics>>(m_ptr); }
};

struct IApplicationViewStatics2 :
	IInspectable,
	impl_IApplicationViewStatics2<IApplicationViewStatics2>
{
	IApplicationViewStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewStatics2>>(m_ptr); }
};

struct IApplicationView :
	IInspectable,
	impl_IApplicationView<IApplicationView>
{
	IApplicationView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationView>>(m_ptr); }
};

struct IApplicationViewConsolidatedEventArgs :
	IInspectable,
	impl_IApplicationViewConsolidatedEventArgs<IApplicationViewConsolidatedEventArgs>
{
	IApplicationViewConsolidatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewConsolidatedEventArgs>>(m_ptr); }
};

struct IProjectionManagerStatics :
	IInspectable,
	impl_IProjectionManagerStatics<IProjectionManagerStatics>
{
	IProjectionManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProjectionManagerStatics>>(m_ptr); }
};

struct IInputPaneVisibilityEventArgs :
	IInspectable,
	impl_IInputPaneVisibilityEventArgs<IInputPaneVisibilityEventArgs>
{
	IInputPaneVisibilityEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputPaneVisibilityEventArgs>>(m_ptr); }
};

struct IInputPane :
	IInspectable,
	impl_IInputPane<IInputPane>
{
	IInputPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputPane>>(m_ptr); }
};

struct IInputPaneStatics :
	IInspectable,
	impl_IInputPaneStatics<IInputPaneStatics>
{
	IInputPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputPaneStatics>>(m_ptr); }
};

struct IAccessibilitySettings :
	IInspectable,
	impl_IAccessibilitySettings<IAccessibilitySettings>
{
	IAccessibilitySettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccessibilitySettings>>(m_ptr); }
};

struct IUISettings :
	IInspectable,
	impl_IUISettings<IUISettings>
{
	IUISettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUISettings>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

struct IActivatedEventHandler :
	IUnknown,
	impl_IActivatedEventHandler<IActivatedEventHandler>
{
	IActivatedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedEventHandler>>(m_ptr); }
};

struct IResumingEventHandler :
	IUnknown,
	impl_IResumingEventHandler<IResumingEventHandler>
{
	IResumingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResumingEventHandler>>(m_ptr); }
};

struct ISuspendingEventHandler :
	IUnknown,
	impl_ISuspendingEventHandler<ISuspendingEventHandler>
{
	ISuspendingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISuspendingEventHandler>>(m_ptr); }
};

struct INavigatedEventHandler :
	IUnknown,
	impl_INavigatedEventHandler<INavigatedEventHandler>
{
	INavigatedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigatedEventHandler>>(m_ptr); }
};

struct IActivatedDeferral :
	IInspectable,
	impl_IActivatedDeferral<IActivatedDeferral>
{
	IActivatedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedDeferral>>(m_ptr); }
};

struct IActivatedOperation :
	IInspectable,
	impl_IActivatedOperation<IActivatedOperation>
{
	IActivatedOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedOperation>>(m_ptr); }
};

struct IActivatedEventArgsDeferral :
	IInspectable,
	impl_IActivatedEventArgsDeferral<IActivatedEventArgsDeferral>
{
	IActivatedEventArgsDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedEventArgsDeferral>>(m_ptr); }
};

struct IWebUINavigatedEventArgs :
	IInspectable,
	impl_IWebUINavigatedEventArgs<IWebUINavigatedEventArgs>
{
	IWebUINavigatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUINavigatedEventArgs>>(m_ptr); }
};

struct IWebUIBackgroundTaskInstance :
	IInspectable,
	impl_IWebUIBackgroundTaskInstance<IWebUIBackgroundTaskInstance>
{
	IWebUIBackgroundTaskInstance(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUIBackgroundTaskInstance>>(m_ptr); }
};

struct IWebUIBackgroundTaskInstanceStatics :
	IInspectable,
	impl_IWebUIBackgroundTaskInstanceStatics<IWebUIBackgroundTaskInstanceStatics>
{
	IWebUIBackgroundTaskInstanceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUIBackgroundTaskInstanceStatics>>(m_ptr); }
};

struct IWebUINavigatedDeferral :
	IInspectable,
	impl_IWebUINavigatedDeferral<IWebUINavigatedDeferral>
{
	IWebUINavigatedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUINavigatedDeferral>>(m_ptr); }
};

struct IWebUINavigatedOperation :
	IInspectable,
	impl_IWebUINavigatedOperation<IWebUINavigatedOperation>
{
	IWebUINavigatedOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUINavigatedOperation>>(m_ptr); }
};

struct IWebUIActivationStatics :
	IInspectable,
	impl_IWebUIActivationStatics<IWebUIActivationStatics>
{
	IWebUIActivationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUIActivationStatics>>(m_ptr); }
};

struct IHtmlPrintDocumentSource :
	IInspectable,
	impl_IHtmlPrintDocumentSource<IHtmlPrintDocumentSource>,
	Requires<IHtmlPrintDocumentSource, Windows::Graphics::Printing::IPrintDocumentSource>
{
	IHtmlPrintDocumentSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHtmlPrintDocumentSource>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml {

struct ICreateDefaultValueCallback :
	IUnknown,
	impl_ICreateDefaultValueCallback<ICreateDefaultValueCallback>
{
	ICreateDefaultValueCallback(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICreateDefaultValueCallback>>(m_ptr); }
};

struct IPropertyChangedCallback :
	IUnknown,
	impl_IPropertyChangedCallback<IPropertyChangedCallback>
{
	IPropertyChangedCallback(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyChangedCallback>>(m_ptr); }
};

struct IApplicationInitializationCallback :
	IUnknown,
	impl_IApplicationInitializationCallback<IApplicationInitializationCallback>
{
	IApplicationInitializationCallback(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationInitializationCallback>>(m_ptr); }
};

struct IBindingFailedEventHandler :
	IUnknown,
	impl_IBindingFailedEventHandler<IBindingFailedEventHandler>
{
	IBindingFailedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingFailedEventHandler>>(m_ptr); }
};

struct IDependencyPropertyChangedEventHandler :
	IUnknown,
	impl_IDependencyPropertyChangedEventHandler<IDependencyPropertyChangedEventHandler>
{
	IDependencyPropertyChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDependencyPropertyChangedEventHandler>>(m_ptr); }
};

struct IDragEventHandler :
	IUnknown,
	impl_IDragEventHandler<IDragEventHandler>
{
	IDragEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragEventHandler>>(m_ptr); }
};

struct IExceptionRoutedEventHandler :
	IUnknown,
	impl_IExceptionRoutedEventHandler<IExceptionRoutedEventHandler>
{
	IExceptionRoutedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExceptionRoutedEventHandler>>(m_ptr); }
};

struct IRoutedEventHandler :
	IUnknown,
	impl_IRoutedEventHandler<IRoutedEventHandler>
{
	IRoutedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRoutedEventHandler>>(m_ptr); }
};

struct ISizeChangedEventHandler :
	IUnknown,
	impl_ISizeChangedEventHandler<ISizeChangedEventHandler>
{
	ISizeChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISizeChangedEventHandler>>(m_ptr); }
};

struct ISuspendingEventHandler :
	IUnknown,
	impl_ISuspendingEventHandler<ISuspendingEventHandler>
{
	ISuspendingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISuspendingEventHandler>>(m_ptr); }
};

struct IUnhandledExceptionEventHandler :
	IUnknown,
	impl_IUnhandledExceptionEventHandler<IUnhandledExceptionEventHandler>
{
	IUnhandledExceptionEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnhandledExceptionEventHandler>>(m_ptr); }
};

struct IVisualStateChangedEventHandler :
	IUnknown,
	impl_IVisualStateChangedEventHandler<IVisualStateChangedEventHandler>
{
	IVisualStateChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualStateChangedEventHandler>>(m_ptr); }
};

struct IWindowActivatedEventHandler :
	IUnknown,
	impl_IWindowActivatedEventHandler<IWindowActivatedEventHandler>
{
	IWindowActivatedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowActivatedEventHandler>>(m_ptr); }
};

struct IWindowClosedEventHandler :
	IUnknown,
	impl_IWindowClosedEventHandler<IWindowClosedEventHandler>
{
	IWindowClosedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowClosedEventHandler>>(m_ptr); }
};

struct IWindowSizeChangedEventHandler :
	IUnknown,
	impl_IWindowSizeChangedEventHandler<IWindowSizeChangedEventHandler>
{
	IWindowSizeChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowSizeChangedEventHandler>>(m_ptr); }
};

struct IWindowVisibilityChangedEventHandler :
	IUnknown,
	impl_IWindowVisibilityChangedEventHandler<IWindowVisibilityChangedEventHandler>
{
	IWindowVisibilityChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowVisibilityChangedEventHandler>>(m_ptr); }
};

struct ICornerRadiusHelper :
	IInspectable,
	impl_ICornerRadiusHelper<ICornerRadiusHelper>
{
	ICornerRadiusHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICornerRadiusHelper>>(m_ptr); }
};

struct ICornerRadiusHelperStatics :
	IInspectable,
	impl_ICornerRadiusHelperStatics<ICornerRadiusHelperStatics>
{
	ICornerRadiusHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICornerRadiusHelperStatics>>(m_ptr); }
};

struct IDurationHelper :
	IInspectable,
	impl_IDurationHelper<IDurationHelper>
{
	IDurationHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDurationHelper>>(m_ptr); }
};

struct IDurationHelperStatics :
	IInspectable,
	impl_IDurationHelperStatics<IDurationHelperStatics>
{
	IDurationHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDurationHelperStatics>>(m_ptr); }
};

struct IGridLengthHelper :
	IInspectable,
	impl_IGridLengthHelper<IGridLengthHelper>
{
	IGridLengthHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridLengthHelper>>(m_ptr); }
};

struct IGridLengthHelperStatics :
	IInspectable,
	impl_IGridLengthHelperStatics<IGridLengthHelperStatics>
{
	IGridLengthHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridLengthHelperStatics>>(m_ptr); }
};

struct IPointHelper :
	IInspectable,
	impl_IPointHelper<IPointHelper>
{
	IPointHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointHelper>>(m_ptr); }
};

struct IPointHelperStatics :
	IInspectable,
	impl_IPointHelperStatics<IPointHelperStatics>
{
	IPointHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointHelperStatics>>(m_ptr); }
};

struct IRectHelper :
	IInspectable,
	impl_IRectHelper<IRectHelper>
{
	IRectHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRectHelper>>(m_ptr); }
};

struct IRectHelperStatics :
	IInspectable,
	impl_IRectHelperStatics<IRectHelperStatics>
{
	IRectHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRectHelperStatics>>(m_ptr); }
};

struct ISizeHelper :
	IInspectable,
	impl_ISizeHelper<ISizeHelper>
{
	ISizeHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISizeHelper>>(m_ptr); }
};

struct ISizeHelperStatics :
	IInspectable,
	impl_ISizeHelperStatics<ISizeHelperStatics>
{
	ISizeHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISizeHelperStatics>>(m_ptr); }
};

struct IThicknessHelper :
	IInspectable,
	impl_IThicknessHelper<IThicknessHelper>
{
	IThicknessHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThicknessHelper>>(m_ptr); }
};

struct IThicknessHelperStatics :
	IInspectable,
	impl_IThicknessHelperStatics<IThicknessHelperStatics>
{
	IThicknessHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThicknessHelperStatics>>(m_ptr); }
};

struct IApplicationInitializationCallbackParams :
	IInspectable,
	impl_IApplicationInitializationCallbackParams<IApplicationInitializationCallbackParams>
{
	IApplicationInitializationCallbackParams(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationInitializationCallbackParams>>(m_ptr); }
};

struct IBindingFailedEventArgs :
	IInspectable,
	impl_IBindingFailedEventArgs<IBindingFailedEventArgs>
{
	IBindingFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingFailedEventArgs>>(m_ptr); }
};

struct IDataContextChangedEventArgs :
	IInspectable,
	impl_IDataContextChangedEventArgs<IDataContextChangedEventArgs>
{
	IDataContextChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataContextChangedEventArgs>>(m_ptr); }
};

struct IDataTemplate :
	IInspectable,
	impl_IDataTemplate<IDataTemplate>
{
	IDataTemplate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTemplate>>(m_ptr); }
};

struct IDataTemplateFactory :
	IInspectable,
	impl_IDataTemplateFactory<IDataTemplateFactory>
{
	IDataTemplateFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTemplateFactory>>(m_ptr); }
};

struct IDataTemplateKey :
	IInspectable,
	impl_IDataTemplateKey<IDataTemplateKey>
{
	IDataTemplateKey(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTemplateKey>>(m_ptr); }
};

struct IDataTemplateKeyFactory :
	IInspectable,
	impl_IDataTemplateKeyFactory<IDataTemplateKeyFactory>
{
	IDataTemplateKeyFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTemplateKeyFactory>>(m_ptr); }
};

struct IDebugSettings :
	IInspectable,
	impl_IDebugSettings<IDebugSettings>
{
	IDebugSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDebugSettings>>(m_ptr); }
};

struct IDebugSettings2 :
	IInspectable,
	impl_IDebugSettings2<IDebugSettings2>
{
	IDebugSettings2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDebugSettings2>>(m_ptr); }
};

struct IDependencyObject :
	IInspectable,
	impl_IDependencyObject<IDependencyObject>
{
	IDependencyObject(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDependencyObject>>(m_ptr); }
};

struct IDependencyObjectFactory :
	IInspectable,
	impl_IDependencyObjectFactory<IDependencyObjectFactory>
{
	IDependencyObjectFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDependencyObjectFactory>>(m_ptr); }
};

struct IDependencyObjectCollectionFactory :
	IInspectable,
	impl_IDependencyObjectCollectionFactory<IDependencyObjectCollectionFactory>
{
	IDependencyObjectCollectionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDependencyObjectCollectionFactory>>(m_ptr); }
};

struct IDependencyProperty :
	IInspectable,
	impl_IDependencyProperty<IDependencyProperty>
{
	IDependencyProperty(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDependencyProperty>>(m_ptr); }
};

struct IDependencyPropertyStatics :
	IInspectable,
	impl_IDependencyPropertyStatics<IDependencyPropertyStatics>
{
	IDependencyPropertyStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDependencyPropertyStatics>>(m_ptr); }
};

struct IDependencyPropertyChangedEventArgs :
	IInspectable,
	impl_IDependencyPropertyChangedEventArgs<IDependencyPropertyChangedEventArgs>
{
	IDependencyPropertyChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDependencyPropertyChangedEventArgs>>(m_ptr); }
};

struct IDispatcherTimer :
	IInspectable,
	impl_IDispatcherTimer<IDispatcherTimer>
{
	IDispatcherTimer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDispatcherTimer>>(m_ptr); }
};

struct IDispatcherTimerFactory :
	IInspectable,
	impl_IDispatcherTimerFactory<IDispatcherTimerFactory>
{
	IDispatcherTimerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDispatcherTimerFactory>>(m_ptr); }
};

struct IDragEventArgs :
	IInspectable,
	impl_IDragEventArgs<IDragEventArgs>
{
	IDragEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragEventArgs>>(m_ptr); }
};

struct IEventTrigger :
	IInspectable,
	impl_IEventTrigger<IEventTrigger>
{
	IEventTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEventTrigger>>(m_ptr); }
};

struct IExceptionRoutedEventArgs :
	IInspectable,
	impl_IExceptionRoutedEventArgs<IExceptionRoutedEventArgs>
{
	IExceptionRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExceptionRoutedEventArgs>>(m_ptr); }
};

struct IExceptionRoutedEventArgsFactory :
	IInspectable,
	impl_IExceptionRoutedEventArgsFactory<IExceptionRoutedEventArgsFactory>
{
	IExceptionRoutedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExceptionRoutedEventArgsFactory>>(m_ptr); }
};

struct IApplication :
	IInspectable,
	impl_IApplication<IApplication>
{
	IApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplication>>(m_ptr); }
};

struct IApplicationOverrides :
	IInspectable,
	impl_IApplicationOverrides<IApplicationOverrides>
{
	IApplicationOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationOverrides>>(m_ptr); }
};

struct IApplicationStatics :
	IInspectable,
	impl_IApplicationStatics<IApplicationStatics>
{
	IApplicationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationStatics>>(m_ptr); }
};

struct IApplicationFactory :
	IInspectable,
	impl_IApplicationFactory<IApplicationFactory>
{
	IApplicationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationFactory>>(m_ptr); }
};

struct IFrameworkElement :
	IInspectable,
	impl_IFrameworkElement<IFrameworkElement>
{
	IFrameworkElement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElement>>(m_ptr); }
};

struct IFrameworkElementOverrides :
	IInspectable,
	impl_IFrameworkElementOverrides<IFrameworkElementOverrides>
{
	IFrameworkElementOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElementOverrides>>(m_ptr); }
};

struct IFrameworkElementStatics :
	IInspectable,
	impl_IFrameworkElementStatics<IFrameworkElementStatics>
{
	IFrameworkElementStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElementStatics>>(m_ptr); }
};

struct IFrameworkElementFactory :
	IInspectable,
	impl_IFrameworkElementFactory<IFrameworkElementFactory>
{
	IFrameworkElementFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElementFactory>>(m_ptr); }
};

struct IFrameworkElement2 :
	IInspectable,
	impl_IFrameworkElement2<IFrameworkElement2>
{
	IFrameworkElement2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElement2>>(m_ptr); }
};

struct IFrameworkElementOverrides2 :
	IInspectable,
	impl_IFrameworkElementOverrides2<IFrameworkElementOverrides2>
{
	IFrameworkElementOverrides2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElementOverrides2>>(m_ptr); }
};

struct IFrameworkElementStatics2 :
	IInspectable,
	impl_IFrameworkElementStatics2<IFrameworkElementStatics2>
{
	IFrameworkElementStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElementStatics2>>(m_ptr); }
};

struct IFrameworkTemplate :
	IInspectable,
	impl_IFrameworkTemplate<IFrameworkTemplate>
{
	IFrameworkTemplate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkTemplate>>(m_ptr); }
};

struct IFrameworkTemplateFactory :
	IInspectable,
	impl_IFrameworkTemplateFactory<IFrameworkTemplateFactory>
{
	IFrameworkTemplateFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkTemplateFactory>>(m_ptr); }
};

struct IFrameworkView :
	IInspectable,
	impl_IFrameworkView<IFrameworkView>
{
	IFrameworkView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkView>>(m_ptr); }
};

struct IFrameworkViewSource :
	IInspectable,
	impl_IFrameworkViewSource<IFrameworkViewSource>
{
	IFrameworkViewSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkViewSource>>(m_ptr); }
};

struct IMediaFailedRoutedEventArgs :
	IInspectable,
	impl_IMediaFailedRoutedEventArgs<IMediaFailedRoutedEventArgs>
{
	IMediaFailedRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaFailedRoutedEventArgs>>(m_ptr); }
};

struct IPropertyMetadata :
	IInspectable,
	impl_IPropertyMetadata<IPropertyMetadata>
{
	IPropertyMetadata(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyMetadata>>(m_ptr); }
};

struct IPropertyMetadataStatics :
	IInspectable,
	impl_IPropertyMetadataStatics<IPropertyMetadataStatics>
{
	IPropertyMetadataStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyMetadataStatics>>(m_ptr); }
};

struct IPropertyMetadataFactory :
	IInspectable,
	impl_IPropertyMetadataFactory<IPropertyMetadataFactory>
{
	IPropertyMetadataFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyMetadataFactory>>(m_ptr); }
};

struct IPropertyPath :
	IInspectable,
	impl_IPropertyPath<IPropertyPath>
{
	IPropertyPath(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyPath>>(m_ptr); }
};

struct IPropertyPathFactory :
	IInspectable,
	impl_IPropertyPathFactory<IPropertyPathFactory>
{
	IPropertyPathFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyPathFactory>>(m_ptr); }
};

struct IResourceDictionary :
	IInspectable,
	impl_IResourceDictionary<IResourceDictionary>
{
	IResourceDictionary(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceDictionary>>(m_ptr); }
};

struct IResourceDictionaryFactory :
	IInspectable,
	impl_IResourceDictionaryFactory<IResourceDictionaryFactory>
{
	IResourceDictionaryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceDictionaryFactory>>(m_ptr); }
};

struct IRoutedEvent :
	IInspectable,
	impl_IRoutedEvent<IRoutedEvent>
{
	IRoutedEvent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRoutedEvent>>(m_ptr); }
};

struct IRoutedEventArgs :
	IInspectable,
	impl_IRoutedEventArgs<IRoutedEventArgs>
{
	IRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRoutedEventArgs>>(m_ptr); }
};

struct IRoutedEventArgsFactory :
	IInspectable,
	impl_IRoutedEventArgsFactory<IRoutedEventArgsFactory>
{
	IRoutedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRoutedEventArgsFactory>>(m_ptr); }
};

struct ISetter :
	IInspectable,
	impl_ISetter<ISetter>
{
	ISetter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetter>>(m_ptr); }
};

struct ISetterFactory :
	IInspectable,
	impl_ISetterFactory<ISetterFactory>
{
	ISetterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetterFactory>>(m_ptr); }
};

struct ISetterBase :
	IInspectable,
	impl_ISetterBase<ISetterBase>
{
	ISetterBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetterBase>>(m_ptr); }
};

struct ISetterBaseFactory :
	IInspectable,
	impl_ISetterBaseFactory<ISetterBaseFactory>
{
	ISetterBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetterBaseFactory>>(m_ptr); }
};

struct ISetterBaseCollection :
	IInspectable,
	impl_ISetterBaseCollection<ISetterBaseCollection>,
	Requires<ISetterBaseCollection, Windows::Foundation::Collections::IVector<Windows::UI::Xaml::SetterBase>, Windows::Foundation::Collections::IIterable<Windows::UI::Xaml::SetterBase>>
{
	ISetterBaseCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetterBaseCollection>>(m_ptr); }
};

struct ISizeChangedEventArgs :
	IInspectable,
	impl_ISizeChangedEventArgs<ISizeChangedEventArgs>
{
	ISizeChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISizeChangedEventArgs>>(m_ptr); }
};

struct IStyle :
	IInspectable,
	impl_IStyle<IStyle>
{
	IStyle(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStyle>>(m_ptr); }
};

struct IStyleFactory :
	IInspectable,
	impl_IStyleFactory<IStyleFactory>
{
	IStyleFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStyleFactory>>(m_ptr); }
};

struct ITriggerAction :
	IInspectable,
	impl_ITriggerAction<ITriggerAction>
{
	ITriggerAction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITriggerAction>>(m_ptr); }
};

struct ITriggerActionFactory :
	IInspectable,
	impl_ITriggerActionFactory<ITriggerActionFactory>
{
	ITriggerActionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITriggerActionFactory>>(m_ptr); }
};

struct ITriggerBase :
	IInspectable,
	impl_ITriggerBase<ITriggerBase>
{
	ITriggerBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITriggerBase>>(m_ptr); }
};

struct ITriggerBaseFactory :
	IInspectable,
	impl_ITriggerBaseFactory<ITriggerBaseFactory>
{
	ITriggerBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITriggerBaseFactory>>(m_ptr); }
};

struct IUIElement :
	IInspectable,
	impl_IUIElement<IUIElement>
{
	IUIElement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUIElement>>(m_ptr); }
};

struct IUIElementOverrides :
	IInspectable,
	impl_IUIElementOverrides<IUIElementOverrides>
{
	IUIElementOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUIElementOverrides>>(m_ptr); }
};

struct IUIElementStatics :
	IInspectable,
	impl_IUIElementStatics<IUIElementStatics>
{
	IUIElementStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUIElementStatics>>(m_ptr); }
};

struct IUIElementFactory :
	IInspectable,
	impl_IUIElementFactory<IUIElementFactory>
{
	IUIElementFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUIElementFactory>>(m_ptr); }
};

struct IUIElement2 :
	IInspectable,
	impl_IUIElement2<IUIElement2>
{
	IUIElement2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUIElement2>>(m_ptr); }
};

struct IUIElementStatics2 :
	IInspectable,
	impl_IUIElementStatics2<IUIElementStatics2>
{
	IUIElementStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUIElementStatics2>>(m_ptr); }
};

struct IUnhandledExceptionEventArgs :
	IInspectable,
	impl_IUnhandledExceptionEventArgs<IUnhandledExceptionEventArgs>
{
	IUnhandledExceptionEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnhandledExceptionEventArgs>>(m_ptr); }
};

struct IVisualState :
	IInspectable,
	impl_IVisualState<IVisualState>
{
	IVisualState(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualState>>(m_ptr); }
};

struct IVisualStateChangedEventArgs :
	IInspectable,
	impl_IVisualStateChangedEventArgs<IVisualStateChangedEventArgs>
{
	IVisualStateChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualStateChangedEventArgs>>(m_ptr); }
};

struct IVisualStateGroup :
	IInspectable,
	impl_IVisualStateGroup<IVisualStateGroup>
{
	IVisualStateGroup(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualStateGroup>>(m_ptr); }
};

struct IVisualStateManager :
	IInspectable,
	impl_IVisualStateManager<IVisualStateManager>
{
	IVisualStateManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualStateManager>>(m_ptr); }
};

struct IVisualStateManagerOverrides :
	IInspectable,
	impl_IVisualStateManagerOverrides<IVisualStateManagerOverrides>
{
	IVisualStateManagerOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualStateManagerOverrides>>(m_ptr); }
};

struct IVisualStateManagerProtected :
	IInspectable,
	impl_IVisualStateManagerProtected<IVisualStateManagerProtected>
{
	IVisualStateManagerProtected(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualStateManagerProtected>>(m_ptr); }
};

struct IVisualStateManagerStatics :
	IInspectable,
	impl_IVisualStateManagerStatics<IVisualStateManagerStatics>
{
	IVisualStateManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualStateManagerStatics>>(m_ptr); }
};

struct IVisualStateManagerFactory :
	IInspectable,
	impl_IVisualStateManagerFactory<IVisualStateManagerFactory>
{
	IVisualStateManagerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualStateManagerFactory>>(m_ptr); }
};

struct IVisualTransition :
	IInspectable,
	impl_IVisualTransition<IVisualTransition>
{
	IVisualTransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualTransition>>(m_ptr); }
};

struct IVisualTransitionFactory :
	IInspectable,
	impl_IVisualTransitionFactory<IVisualTransitionFactory>
{
	IVisualTransitionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualTransitionFactory>>(m_ptr); }
};

struct IWindow :
	IInspectable,
	impl_IWindow<IWindow>
{
	IWindow(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindow>>(m_ptr); }
};

struct IWindowStatics :
	IInspectable,
	impl_IWindowStatics<IWindowStatics>
{
	IWindowStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowStatics>>(m_ptr); }
};

struct IWindowCreatedEventArgs :
	IInspectable,
	impl_IWindowCreatedEventArgs<IWindowCreatedEventArgs>
{
	IWindowCreatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowCreatedEventArgs>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation {

struct IAutomationProperty :
	IInspectable,
	impl_IAutomationProperty<IAutomationProperty>
{
	IAutomationProperty(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationProperty>>(m_ptr); }
};

struct IAutomationProperties :
	IInspectable,
	impl_IAutomationProperties<IAutomationProperties>
{
	IAutomationProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationProperties>>(m_ptr); }
};

struct IAutomationPropertiesStatics :
	IInspectable,
	impl_IAutomationPropertiesStatics<IAutomationPropertiesStatics>
{
	IAutomationPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationPropertiesStatics>>(m_ptr); }
};

struct IAutomationPropertiesStatics2 :
	IInspectable,
	impl_IAutomationPropertiesStatics2<IAutomationPropertiesStatics2>
{
	IAutomationPropertiesStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationPropertiesStatics2>>(m_ptr); }
};

struct IAutomationElementIdentifiersStatics :
	IInspectable,
	impl_IAutomationElementIdentifiersStatics<IAutomationElementIdentifiersStatics>
{
	IAutomationElementIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationElementIdentifiersStatics>>(m_ptr); }
};

struct IAutomationElementIdentifiersStatics2 :
	IInspectable,
	impl_IAutomationElementIdentifiersStatics2<IAutomationElementIdentifiersStatics2>
{
	IAutomationElementIdentifiersStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationElementIdentifiersStatics2>>(m_ptr); }
};

struct IAutomationElementIdentifiers :
	IInspectable,
	impl_IAutomationElementIdentifiers<IAutomationElementIdentifiers>
{
	IAutomationElementIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationElementIdentifiers>>(m_ptr); }
};

struct IAnnotationPatternIdentifiersStatics :
	IInspectable,
	impl_IAnnotationPatternIdentifiersStatics<IAnnotationPatternIdentifiersStatics>
{
	IAnnotationPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAnnotationPatternIdentifiersStatics>>(m_ptr); }
};

struct IAnnotationPatternIdentifiers :
	IInspectable,
	impl_IAnnotationPatternIdentifiers<IAnnotationPatternIdentifiers>
{
	IAnnotationPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAnnotationPatternIdentifiers>>(m_ptr); }
};

struct IDockPatternIdentifiersStatics :
	IInspectable,
	impl_IDockPatternIdentifiersStatics<IDockPatternIdentifiersStatics>
{
	IDockPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDockPatternIdentifiersStatics>>(m_ptr); }
};

struct IDockPatternIdentifiers :
	IInspectable,
	impl_IDockPatternIdentifiers<IDockPatternIdentifiers>
{
	IDockPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDockPatternIdentifiers>>(m_ptr); }
};

struct IDragPatternIdentifiersStatics :
	IInspectable,
	impl_IDragPatternIdentifiersStatics<IDragPatternIdentifiersStatics>
{
	IDragPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragPatternIdentifiersStatics>>(m_ptr); }
};

struct IDragPatternIdentifiers :
	IInspectable,
	impl_IDragPatternIdentifiers<IDragPatternIdentifiers>
{
	IDragPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragPatternIdentifiers>>(m_ptr); }
};

struct IDropTargetPatternIdentifiersStatics :
	IInspectable,
	impl_IDropTargetPatternIdentifiersStatics<IDropTargetPatternIdentifiersStatics>
{
	IDropTargetPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDropTargetPatternIdentifiersStatics>>(m_ptr); }
};

struct IDropTargetPatternIdentifiers :
	IInspectable,
	impl_IDropTargetPatternIdentifiers<IDropTargetPatternIdentifiers>
{
	IDropTargetPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDropTargetPatternIdentifiers>>(m_ptr); }
};

struct IExpandCollapsePatternIdentifiersStatics :
	IInspectable,
	impl_IExpandCollapsePatternIdentifiersStatics<IExpandCollapsePatternIdentifiersStatics>
{
	IExpandCollapsePatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExpandCollapsePatternIdentifiersStatics>>(m_ptr); }
};

struct IExpandCollapsePatternIdentifiers :
	IInspectable,
	impl_IExpandCollapsePatternIdentifiers<IExpandCollapsePatternIdentifiers>
{
	IExpandCollapsePatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExpandCollapsePatternIdentifiers>>(m_ptr); }
};

struct IGridItemPatternIdentifiersStatics :
	IInspectable,
	impl_IGridItemPatternIdentifiersStatics<IGridItemPatternIdentifiersStatics>
{
	IGridItemPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridItemPatternIdentifiersStatics>>(m_ptr); }
};

struct IGridItemPatternIdentifiers :
	IInspectable,
	impl_IGridItemPatternIdentifiers<IGridItemPatternIdentifiers>
{
	IGridItemPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridItemPatternIdentifiers>>(m_ptr); }
};

struct IGridPatternIdentifiersStatics :
	IInspectable,
	impl_IGridPatternIdentifiersStatics<IGridPatternIdentifiersStatics>
{
	IGridPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridPatternIdentifiersStatics>>(m_ptr); }
};

struct IGridPatternIdentifiers :
	IInspectable,
	impl_IGridPatternIdentifiers<IGridPatternIdentifiers>
{
	IGridPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridPatternIdentifiers>>(m_ptr); }
};

struct IMultipleViewPatternIdentifiersStatics :
	IInspectable,
	impl_IMultipleViewPatternIdentifiersStatics<IMultipleViewPatternIdentifiersStatics>
{
	IMultipleViewPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMultipleViewPatternIdentifiersStatics>>(m_ptr); }
};

struct IMultipleViewPatternIdentifiers :
	IInspectable,
	impl_IMultipleViewPatternIdentifiers<IMultipleViewPatternIdentifiers>
{
	IMultipleViewPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMultipleViewPatternIdentifiers>>(m_ptr); }
};

struct IRangeValuePatternIdentifiersStatics :
	IInspectable,
	impl_IRangeValuePatternIdentifiersStatics<IRangeValuePatternIdentifiersStatics>
{
	IRangeValuePatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeValuePatternIdentifiersStatics>>(m_ptr); }
};

struct IRangeValuePatternIdentifiers :
	IInspectable,
	impl_IRangeValuePatternIdentifiers<IRangeValuePatternIdentifiers>
{
	IRangeValuePatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeValuePatternIdentifiers>>(m_ptr); }
};

struct IScrollPatternIdentifiersStatics :
	IInspectable,
	impl_IScrollPatternIdentifiersStatics<IScrollPatternIdentifiersStatics>
{
	IScrollPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollPatternIdentifiersStatics>>(m_ptr); }
};

struct IScrollPatternIdentifiers :
	IInspectable,
	impl_IScrollPatternIdentifiers<IScrollPatternIdentifiers>
{
	IScrollPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollPatternIdentifiers>>(m_ptr); }
};

struct ISelectionItemPatternIdentifiersStatics :
	IInspectable,
	impl_ISelectionItemPatternIdentifiersStatics<ISelectionItemPatternIdentifiersStatics>
{
	ISelectionItemPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectionItemPatternIdentifiersStatics>>(m_ptr); }
};

struct ISelectionItemPatternIdentifiers :
	IInspectable,
	impl_ISelectionItemPatternIdentifiers<ISelectionItemPatternIdentifiers>
{
	ISelectionItemPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectionItemPatternIdentifiers>>(m_ptr); }
};

struct ISelectionPatternIdentifiersStatics :
	IInspectable,
	impl_ISelectionPatternIdentifiersStatics<ISelectionPatternIdentifiersStatics>
{
	ISelectionPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectionPatternIdentifiersStatics>>(m_ptr); }
};

struct ISelectionPatternIdentifiers :
	IInspectable,
	impl_ISelectionPatternIdentifiers<ISelectionPatternIdentifiers>
{
	ISelectionPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectionPatternIdentifiers>>(m_ptr); }
};

struct ITableItemPatternIdentifiersStatics :
	IInspectable,
	impl_ITableItemPatternIdentifiersStatics<ITableItemPatternIdentifiersStatics>
{
	ITableItemPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITableItemPatternIdentifiersStatics>>(m_ptr); }
};

struct ITableItemPatternIdentifiers :
	IInspectable,
	impl_ITableItemPatternIdentifiers<ITableItemPatternIdentifiers>
{
	ITableItemPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITableItemPatternIdentifiers>>(m_ptr); }
};

struct ITablePatternIdentifiersStatics :
	IInspectable,
	impl_ITablePatternIdentifiersStatics<ITablePatternIdentifiersStatics>
{
	ITablePatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITablePatternIdentifiersStatics>>(m_ptr); }
};

struct ITablePatternIdentifiers :
	IInspectable,
	impl_ITablePatternIdentifiers<ITablePatternIdentifiers>
{
	ITablePatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITablePatternIdentifiers>>(m_ptr); }
};

struct ITogglePatternIdentifiersStatics :
	IInspectable,
	impl_ITogglePatternIdentifiersStatics<ITogglePatternIdentifiersStatics>
{
	ITogglePatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITogglePatternIdentifiersStatics>>(m_ptr); }
};

struct ITogglePatternIdentifiers :
	IInspectable,
	impl_ITogglePatternIdentifiers<ITogglePatternIdentifiers>
{
	ITogglePatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITogglePatternIdentifiers>>(m_ptr); }
};

struct ITransformPatternIdentifiersStatics :
	IInspectable,
	impl_ITransformPatternIdentifiersStatics<ITransformPatternIdentifiersStatics>
{
	ITransformPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransformPatternIdentifiersStatics>>(m_ptr); }
};

struct ITransformPatternIdentifiers :
	IInspectable,
	impl_ITransformPatternIdentifiers<ITransformPatternIdentifiers>
{
	ITransformPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransformPatternIdentifiers>>(m_ptr); }
};

struct IValuePatternIdentifiersStatics :
	IInspectable,
	impl_IValuePatternIdentifiersStatics<IValuePatternIdentifiersStatics>
{
	IValuePatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IValuePatternIdentifiersStatics>>(m_ptr); }
};

struct IValuePatternIdentifiers :
	IInspectable,
	impl_IValuePatternIdentifiers<IValuePatternIdentifiers>
{
	IValuePatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IValuePatternIdentifiers>>(m_ptr); }
};

struct IWindowPatternIdentifiersStatics :
	IInspectable,
	impl_IWindowPatternIdentifiersStatics<IWindowPatternIdentifiersStatics>
{
	IWindowPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowPatternIdentifiersStatics>>(m_ptr); }
};

struct IWindowPatternIdentifiers :
	IInspectable,
	impl_IWindowPatternIdentifiers<IWindowPatternIdentifiers>
{
	IWindowPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowPatternIdentifiers>>(m_ptr); }
};

struct ITransformPattern2IdentifiersStatics :
	IInspectable,
	impl_ITransformPattern2IdentifiersStatics<ITransformPattern2IdentifiersStatics>
{
	ITransformPattern2IdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransformPattern2IdentifiersStatics>>(m_ptr); }
};

struct ITransformPattern2Identifiers :
	IInspectable,
	impl_ITransformPattern2Identifiers<ITransformPattern2Identifiers>
{
	ITransformPattern2Identifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransformPattern2Identifiers>>(m_ptr); }
};

struct ISpreadsheetItemPatternIdentifiersStatics :
	IInspectable,
	impl_ISpreadsheetItemPatternIdentifiersStatics<ISpreadsheetItemPatternIdentifiersStatics>
{
	ISpreadsheetItemPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpreadsheetItemPatternIdentifiersStatics>>(m_ptr); }
};

struct ISpreadsheetItemPatternIdentifiers :
	IInspectable,
	impl_ISpreadsheetItemPatternIdentifiers<ISpreadsheetItemPatternIdentifiers>
{
	ISpreadsheetItemPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpreadsheetItemPatternIdentifiers>>(m_ptr); }
};

struct IStylesPatternIdentifiersStatics :
	IInspectable,
	impl_IStylesPatternIdentifiersStatics<IStylesPatternIdentifiersStatics>
{
	IStylesPatternIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStylesPatternIdentifiersStatics>>(m_ptr); }
};

struct IStylesPatternIdentifiers :
	IInspectable,
	impl_IStylesPatternIdentifiers<IStylesPatternIdentifiers>
{
	IStylesPatternIdentifiers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStylesPatternIdentifiers>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation { namespace Peers {

struct IButtonAutomationPeer :
	IInspectable,
	impl_IButtonAutomationPeer<IButtonAutomationPeer>
{
	IButtonAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonAutomationPeer>>(m_ptr); }
};

struct IButtonAutomationPeerFactory :
	IInspectable,
	impl_IButtonAutomationPeerFactory<IButtonAutomationPeerFactory>
{
	IButtonAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonAutomationPeerFactory>>(m_ptr); }
};

struct IButtonBaseAutomationPeer :
	IInspectable,
	impl_IButtonBaseAutomationPeer<IButtonBaseAutomationPeer>
{
	IButtonBaseAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonBaseAutomationPeer>>(m_ptr); }
};

struct IButtonBaseAutomationPeerFactory :
	IInspectable,
	impl_IButtonBaseAutomationPeerFactory<IButtonBaseAutomationPeerFactory>
{
	IButtonBaseAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonBaseAutomationPeerFactory>>(m_ptr); }
};

struct ICaptureElementAutomationPeer :
	IInspectable,
	impl_ICaptureElementAutomationPeer<ICaptureElementAutomationPeer>
{
	ICaptureElementAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICaptureElementAutomationPeer>>(m_ptr); }
};

struct ICaptureElementAutomationPeerFactory :
	IInspectable,
	impl_ICaptureElementAutomationPeerFactory<ICaptureElementAutomationPeerFactory>
{
	ICaptureElementAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICaptureElementAutomationPeerFactory>>(m_ptr); }
};

struct ICheckBoxAutomationPeer :
	IInspectable,
	impl_ICheckBoxAutomationPeer<ICheckBoxAutomationPeer>
{
	ICheckBoxAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICheckBoxAutomationPeer>>(m_ptr); }
};

struct ICheckBoxAutomationPeerFactory :
	IInspectable,
	impl_ICheckBoxAutomationPeerFactory<ICheckBoxAutomationPeerFactory>
{
	ICheckBoxAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICheckBoxAutomationPeerFactory>>(m_ptr); }
};

struct IComboBoxAutomationPeer :
	IInspectable,
	impl_IComboBoxAutomationPeer<IComboBoxAutomationPeer>
{
	IComboBoxAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxAutomationPeer>>(m_ptr); }
};

struct IComboBoxAutomationPeerFactory :
	IInspectable,
	impl_IComboBoxAutomationPeerFactory<IComboBoxAutomationPeerFactory>
{
	IComboBoxAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxAutomationPeerFactory>>(m_ptr); }
};

struct IComboBoxItemAutomationPeer :
	IInspectable,
	impl_IComboBoxItemAutomationPeer<IComboBoxItemAutomationPeer>
{
	IComboBoxItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxItemAutomationPeer>>(m_ptr); }
};

struct IComboBoxItemAutomationPeerFactory :
	IInspectable,
	impl_IComboBoxItemAutomationPeerFactory<IComboBoxItemAutomationPeerFactory>
{
	IComboBoxItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxItemAutomationPeerFactory>>(m_ptr); }
};

struct IComboBoxItemDataAutomationPeer :
	IInspectable,
	impl_IComboBoxItemDataAutomationPeer<IComboBoxItemDataAutomationPeer>
{
	IComboBoxItemDataAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxItemDataAutomationPeer>>(m_ptr); }
};

struct IComboBoxItemDataAutomationPeerFactory :
	IInspectable,
	impl_IComboBoxItemDataAutomationPeerFactory<IComboBoxItemDataAutomationPeerFactory>
{
	IComboBoxItemDataAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxItemDataAutomationPeerFactory>>(m_ptr); }
};

struct IFlipViewAutomationPeer :
	IInspectable,
	impl_IFlipViewAutomationPeer<IFlipViewAutomationPeer>
{
	IFlipViewAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewAutomationPeer>>(m_ptr); }
};

struct IFlipViewAutomationPeerFactory :
	IInspectable,
	impl_IFlipViewAutomationPeerFactory<IFlipViewAutomationPeerFactory>
{
	IFlipViewAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewAutomationPeerFactory>>(m_ptr); }
};

struct IFlipViewItemAutomationPeer :
	IInspectable,
	impl_IFlipViewItemAutomationPeer<IFlipViewItemAutomationPeer>
{
	IFlipViewItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewItemAutomationPeer>>(m_ptr); }
};

struct IFlipViewItemAutomationPeerFactory :
	IInspectable,
	impl_IFlipViewItemAutomationPeerFactory<IFlipViewItemAutomationPeerFactory>
{
	IFlipViewItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewItemAutomationPeerFactory>>(m_ptr); }
};

struct IFlipViewItemDataAutomationPeer :
	IInspectable,
	impl_IFlipViewItemDataAutomationPeer<IFlipViewItemDataAutomationPeer>
{
	IFlipViewItemDataAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewItemDataAutomationPeer>>(m_ptr); }
};

struct IFlipViewItemDataAutomationPeerFactory :
	IInspectable,
	impl_IFlipViewItemDataAutomationPeerFactory<IFlipViewItemDataAutomationPeerFactory>
{
	IFlipViewItemDataAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewItemDataAutomationPeerFactory>>(m_ptr); }
};

struct IGridViewAutomationPeer :
	IInspectable,
	impl_IGridViewAutomationPeer<IGridViewAutomationPeer>
{
	IGridViewAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewAutomationPeer>>(m_ptr); }
};

struct IGridViewAutomationPeerFactory :
	IInspectable,
	impl_IGridViewAutomationPeerFactory<IGridViewAutomationPeerFactory>
{
	IGridViewAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewAutomationPeerFactory>>(m_ptr); }
};

struct IGridViewItemAutomationPeer :
	IInspectable,
	impl_IGridViewItemAutomationPeer<IGridViewItemAutomationPeer>
{
	IGridViewItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItemAutomationPeer>>(m_ptr); }
};

struct IGridViewItemAutomationPeerFactory :
	IInspectable,
	impl_IGridViewItemAutomationPeerFactory<IGridViewItemAutomationPeerFactory>
{
	IGridViewItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItemAutomationPeerFactory>>(m_ptr); }
};

struct IGridViewItemDataAutomationPeer :
	IInspectable,
	impl_IGridViewItemDataAutomationPeer<IGridViewItemDataAutomationPeer>
{
	IGridViewItemDataAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItemDataAutomationPeer>>(m_ptr); }
};

struct IGridViewItemDataAutomationPeerFactory :
	IInspectable,
	impl_IGridViewItemDataAutomationPeerFactory<IGridViewItemDataAutomationPeerFactory>
{
	IGridViewItemDataAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItemDataAutomationPeerFactory>>(m_ptr); }
};

struct IGroupItemAutomationPeer :
	IInspectable,
	impl_IGroupItemAutomationPeer<IGroupItemAutomationPeer>
{
	IGroupItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupItemAutomationPeer>>(m_ptr); }
};

struct IGroupItemAutomationPeerFactory :
	IInspectable,
	impl_IGroupItemAutomationPeerFactory<IGroupItemAutomationPeerFactory>
{
	IGroupItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupItemAutomationPeerFactory>>(m_ptr); }
};

struct IHyperlinkButtonAutomationPeer :
	IInspectable,
	impl_IHyperlinkButtonAutomationPeer<IHyperlinkButtonAutomationPeer>
{
	IHyperlinkButtonAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHyperlinkButtonAutomationPeer>>(m_ptr); }
};

struct IHyperlinkButtonAutomationPeerFactory :
	IInspectable,
	impl_IHyperlinkButtonAutomationPeerFactory<IHyperlinkButtonAutomationPeerFactory>
{
	IHyperlinkButtonAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHyperlinkButtonAutomationPeerFactory>>(m_ptr); }
};

struct IImageAutomationPeer :
	IInspectable,
	impl_IImageAutomationPeer<IImageAutomationPeer>
{
	IImageAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageAutomationPeer>>(m_ptr); }
};

struct IImageAutomationPeerFactory :
	IInspectable,
	impl_IImageAutomationPeerFactory<IImageAutomationPeerFactory>
{
	IImageAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageAutomationPeerFactory>>(m_ptr); }
};

struct IItemAutomationPeer :
	IInspectable,
	impl_IItemAutomationPeer<IItemAutomationPeer>
{
	IItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemAutomationPeer>>(m_ptr); }
};

struct IItemAutomationPeerFactory :
	IInspectable,
	impl_IItemAutomationPeerFactory<IItemAutomationPeerFactory>
{
	IItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemAutomationPeerFactory>>(m_ptr); }
};

struct IItemsControlAutomationPeer :
	IInspectable,
	impl_IItemsControlAutomationPeer<IItemsControlAutomationPeer>
{
	IItemsControlAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsControlAutomationPeer>>(m_ptr); }
};

struct IItemsControlAutomationPeerFactory :
	IInspectable,
	impl_IItemsControlAutomationPeerFactory<IItemsControlAutomationPeerFactory>
{
	IItemsControlAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsControlAutomationPeerFactory>>(m_ptr); }
};

struct IListBoxAutomationPeer :
	IInspectable,
	impl_IListBoxAutomationPeer<IListBoxAutomationPeer>
{
	IListBoxAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxAutomationPeer>>(m_ptr); }
};

struct IListBoxAutomationPeerFactory :
	IInspectable,
	impl_IListBoxAutomationPeerFactory<IListBoxAutomationPeerFactory>
{
	IListBoxAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxAutomationPeerFactory>>(m_ptr); }
};

struct IListBoxItemAutomationPeer :
	IInspectable,
	impl_IListBoxItemAutomationPeer<IListBoxItemAutomationPeer>
{
	IListBoxItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxItemAutomationPeer>>(m_ptr); }
};

struct IListBoxItemAutomationPeerFactory :
	IInspectable,
	impl_IListBoxItemAutomationPeerFactory<IListBoxItemAutomationPeerFactory>
{
	IListBoxItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxItemAutomationPeerFactory>>(m_ptr); }
};

struct IListBoxItemDataAutomationPeer :
	IInspectable,
	impl_IListBoxItemDataAutomationPeer<IListBoxItemDataAutomationPeer>
{
	IListBoxItemDataAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxItemDataAutomationPeer>>(m_ptr); }
};

struct IListBoxItemDataAutomationPeerFactory :
	IInspectable,
	impl_IListBoxItemDataAutomationPeerFactory<IListBoxItemDataAutomationPeerFactory>
{
	IListBoxItemDataAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxItemDataAutomationPeerFactory>>(m_ptr); }
};

struct IListViewAutomationPeer :
	IInspectable,
	impl_IListViewAutomationPeer<IListViewAutomationPeer>
{
	IListViewAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewAutomationPeer>>(m_ptr); }
};

struct IListViewAutomationPeerFactory :
	IInspectable,
	impl_IListViewAutomationPeerFactory<IListViewAutomationPeerFactory>
{
	IListViewAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewAutomationPeerFactory>>(m_ptr); }
};

struct IListViewBaseAutomationPeer :
	IInspectable,
	impl_IListViewBaseAutomationPeer<IListViewBaseAutomationPeer>
{
	IListViewBaseAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBaseAutomationPeer>>(m_ptr); }
};

struct IListViewBaseAutomationPeerFactory :
	IInspectable,
	impl_IListViewBaseAutomationPeerFactory<IListViewBaseAutomationPeerFactory>
{
	IListViewBaseAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBaseAutomationPeerFactory>>(m_ptr); }
};

struct IListViewItemAutomationPeer :
	IInspectable,
	impl_IListViewItemAutomationPeer<IListViewItemAutomationPeer>
{
	IListViewItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItemAutomationPeer>>(m_ptr); }
};

struct IListViewItemAutomationPeerFactory :
	IInspectable,
	impl_IListViewItemAutomationPeerFactory<IListViewItemAutomationPeerFactory>
{
	IListViewItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItemAutomationPeerFactory>>(m_ptr); }
};

struct IListViewItemDataAutomationPeer :
	IInspectable,
	impl_IListViewItemDataAutomationPeer<IListViewItemDataAutomationPeer>
{
	IListViewItemDataAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItemDataAutomationPeer>>(m_ptr); }
};

struct IListViewItemDataAutomationPeerFactory :
	IInspectable,
	impl_IListViewItemDataAutomationPeerFactory<IListViewItemDataAutomationPeerFactory>
{
	IListViewItemDataAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItemDataAutomationPeerFactory>>(m_ptr); }
};

struct IMediaElementAutomationPeer :
	IInspectable,
	impl_IMediaElementAutomationPeer<IMediaElementAutomationPeer>
{
	IMediaElementAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaElementAutomationPeer>>(m_ptr); }
};

struct IMediaElementAutomationPeerFactory :
	IInspectable,
	impl_IMediaElementAutomationPeerFactory<IMediaElementAutomationPeerFactory>
{
	IMediaElementAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaElementAutomationPeerFactory>>(m_ptr); }
};

struct IPasswordBoxAutomationPeer :
	IInspectable,
	impl_IPasswordBoxAutomationPeer<IPasswordBoxAutomationPeer>
{
	IPasswordBoxAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordBoxAutomationPeer>>(m_ptr); }
};

struct IPasswordBoxAutomationPeerFactory :
	IInspectable,
	impl_IPasswordBoxAutomationPeerFactory<IPasswordBoxAutomationPeerFactory>
{
	IPasswordBoxAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordBoxAutomationPeerFactory>>(m_ptr); }
};

struct IProgressBarAutomationPeer :
	IInspectable,
	impl_IProgressBarAutomationPeer<IProgressBarAutomationPeer>
{
	IProgressBarAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressBarAutomationPeer>>(m_ptr); }
};

struct IProgressBarAutomationPeerFactory :
	IInspectable,
	impl_IProgressBarAutomationPeerFactory<IProgressBarAutomationPeerFactory>
{
	IProgressBarAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressBarAutomationPeerFactory>>(m_ptr); }
};

struct IProgressRingAutomationPeer :
	IInspectable,
	impl_IProgressRingAutomationPeer<IProgressRingAutomationPeer>
{
	IProgressRingAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressRingAutomationPeer>>(m_ptr); }
};

struct IProgressRingAutomationPeerFactory :
	IInspectable,
	impl_IProgressRingAutomationPeerFactory<IProgressRingAutomationPeerFactory>
{
	IProgressRingAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressRingAutomationPeerFactory>>(m_ptr); }
};

struct IRadioButtonAutomationPeer :
	IInspectable,
	impl_IRadioButtonAutomationPeer<IRadioButtonAutomationPeer>
{
	IRadioButtonAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRadioButtonAutomationPeer>>(m_ptr); }
};

struct IRadioButtonAutomationPeerFactory :
	IInspectable,
	impl_IRadioButtonAutomationPeerFactory<IRadioButtonAutomationPeerFactory>
{
	IRadioButtonAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRadioButtonAutomationPeerFactory>>(m_ptr); }
};

struct IRangeBaseAutomationPeer :
	IInspectable,
	impl_IRangeBaseAutomationPeer<IRangeBaseAutomationPeer>
{
	IRangeBaseAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeBaseAutomationPeer>>(m_ptr); }
};

struct IRangeBaseAutomationPeerFactory :
	IInspectable,
	impl_IRangeBaseAutomationPeerFactory<IRangeBaseAutomationPeerFactory>
{
	IRangeBaseAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeBaseAutomationPeerFactory>>(m_ptr); }
};

struct IRepeatButtonAutomationPeer :
	IInspectable,
	impl_IRepeatButtonAutomationPeer<IRepeatButtonAutomationPeer>
{
	IRepeatButtonAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRepeatButtonAutomationPeer>>(m_ptr); }
};

struct IRepeatButtonAutomationPeerFactory :
	IInspectable,
	impl_IRepeatButtonAutomationPeerFactory<IRepeatButtonAutomationPeerFactory>
{
	IRepeatButtonAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRepeatButtonAutomationPeerFactory>>(m_ptr); }
};

struct IRichEditBoxAutomationPeer :
	IInspectable,
	impl_IRichEditBoxAutomationPeer<IRichEditBoxAutomationPeer>
{
	IRichEditBoxAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichEditBoxAutomationPeer>>(m_ptr); }
};

struct IRichEditBoxAutomationPeerFactory :
	IInspectable,
	impl_IRichEditBoxAutomationPeerFactory<IRichEditBoxAutomationPeerFactory>
{
	IRichEditBoxAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichEditBoxAutomationPeerFactory>>(m_ptr); }
};

struct IRichTextBlockAutomationPeer :
	IInspectable,
	impl_IRichTextBlockAutomationPeer<IRichTextBlockAutomationPeer>
{
	IRichTextBlockAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockAutomationPeer>>(m_ptr); }
};

struct IRichTextBlockAutomationPeerFactory :
	IInspectable,
	impl_IRichTextBlockAutomationPeerFactory<IRichTextBlockAutomationPeerFactory>
{
	IRichTextBlockAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockAutomationPeerFactory>>(m_ptr); }
};

struct IRichTextBlockOverflowAutomationPeer :
	IInspectable,
	impl_IRichTextBlockOverflowAutomationPeer<IRichTextBlockOverflowAutomationPeer>
{
	IRichTextBlockOverflowAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockOverflowAutomationPeer>>(m_ptr); }
};

struct IRichTextBlockOverflowAutomationPeerFactory :
	IInspectable,
	impl_IRichTextBlockOverflowAutomationPeerFactory<IRichTextBlockOverflowAutomationPeerFactory>
{
	IRichTextBlockOverflowAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockOverflowAutomationPeerFactory>>(m_ptr); }
};

struct IScrollBarAutomationPeer :
	IInspectable,
	impl_IScrollBarAutomationPeer<IScrollBarAutomationPeer>
{
	IScrollBarAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollBarAutomationPeer>>(m_ptr); }
};

struct IScrollBarAutomationPeerFactory :
	IInspectable,
	impl_IScrollBarAutomationPeerFactory<IScrollBarAutomationPeerFactory>
{
	IScrollBarAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollBarAutomationPeerFactory>>(m_ptr); }
};

struct IScrollViewerAutomationPeer :
	IInspectable,
	impl_IScrollViewerAutomationPeer<IScrollViewerAutomationPeer>
{
	IScrollViewerAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollViewerAutomationPeer>>(m_ptr); }
};

struct IScrollViewerAutomationPeerFactory :
	IInspectable,
	impl_IScrollViewerAutomationPeerFactory<IScrollViewerAutomationPeerFactory>
{
	IScrollViewerAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollViewerAutomationPeerFactory>>(m_ptr); }
};

struct ISelectorAutomationPeer :
	IInspectable,
	impl_ISelectorAutomationPeer<ISelectorAutomationPeer>
{
	ISelectorAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectorAutomationPeer>>(m_ptr); }
};

struct ISelectorAutomationPeerFactory :
	IInspectable,
	impl_ISelectorAutomationPeerFactory<ISelectorAutomationPeerFactory>
{
	ISelectorAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectorAutomationPeerFactory>>(m_ptr); }
};

struct ISelectorItemAutomationPeer :
	IInspectable,
	impl_ISelectorItemAutomationPeer<ISelectorItemAutomationPeer>
{
	ISelectorItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectorItemAutomationPeer>>(m_ptr); }
};

struct ISelectorItemAutomationPeerFactory :
	IInspectable,
	impl_ISelectorItemAutomationPeerFactory<ISelectorItemAutomationPeerFactory>
{
	ISelectorItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectorItemAutomationPeerFactory>>(m_ptr); }
};

struct ISemanticZoomAutomationPeer :
	IInspectable,
	impl_ISemanticZoomAutomationPeer<ISemanticZoomAutomationPeer>
{
	ISemanticZoomAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticZoomAutomationPeer>>(m_ptr); }
};

struct ISemanticZoomAutomationPeerFactory :
	IInspectable,
	impl_ISemanticZoomAutomationPeerFactory<ISemanticZoomAutomationPeerFactory>
{
	ISemanticZoomAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticZoomAutomationPeerFactory>>(m_ptr); }
};

struct ISettingsFlyoutAutomationPeer :
	IInspectable,
	impl_ISettingsFlyoutAutomationPeer<ISettingsFlyoutAutomationPeer>
{
	ISettingsFlyoutAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsFlyoutAutomationPeer>>(m_ptr); }
};

struct ISettingsFlyoutAutomationPeerFactory :
	IInspectable,
	impl_ISettingsFlyoutAutomationPeerFactory<ISettingsFlyoutAutomationPeerFactory>
{
	ISettingsFlyoutAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsFlyoutAutomationPeerFactory>>(m_ptr); }
};

struct ISliderAutomationPeer :
	IInspectable,
	impl_ISliderAutomationPeer<ISliderAutomationPeer>
{
	ISliderAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISliderAutomationPeer>>(m_ptr); }
};

struct ISliderAutomationPeerFactory :
	IInspectable,
	impl_ISliderAutomationPeerFactory<ISliderAutomationPeerFactory>
{
	ISliderAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISliderAutomationPeerFactory>>(m_ptr); }
};

struct ITextBlockAutomationPeer :
	IInspectable,
	impl_ITextBlockAutomationPeer<ITextBlockAutomationPeer>
{
	ITextBlockAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBlockAutomationPeer>>(m_ptr); }
};

struct ITextBlockAutomationPeerFactory :
	IInspectable,
	impl_ITextBlockAutomationPeerFactory<ITextBlockAutomationPeerFactory>
{
	ITextBlockAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBlockAutomationPeerFactory>>(m_ptr); }
};

struct ITextBoxAutomationPeer :
	IInspectable,
	impl_ITextBoxAutomationPeer<ITextBoxAutomationPeer>
{
	ITextBoxAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBoxAutomationPeer>>(m_ptr); }
};

struct ITextBoxAutomationPeerFactory :
	IInspectable,
	impl_ITextBoxAutomationPeerFactory<ITextBoxAutomationPeerFactory>
{
	ITextBoxAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBoxAutomationPeerFactory>>(m_ptr); }
};

struct IThumbAutomationPeer :
	IInspectable,
	impl_IThumbAutomationPeer<IThumbAutomationPeer>
{
	IThumbAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThumbAutomationPeer>>(m_ptr); }
};

struct IThumbAutomationPeerFactory :
	IInspectable,
	impl_IThumbAutomationPeerFactory<IThumbAutomationPeerFactory>
{
	IThumbAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThumbAutomationPeerFactory>>(m_ptr); }
};

struct IToggleButtonAutomationPeer :
	IInspectable,
	impl_IToggleButtonAutomationPeer<IToggleButtonAutomationPeer>
{
	IToggleButtonAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleButtonAutomationPeer>>(m_ptr); }
};

struct IToggleButtonAutomationPeerFactory :
	IInspectable,
	impl_IToggleButtonAutomationPeerFactory<IToggleButtonAutomationPeerFactory>
{
	IToggleButtonAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleButtonAutomationPeerFactory>>(m_ptr); }
};

struct IToggleSwitchAutomationPeer :
	IInspectable,
	impl_IToggleSwitchAutomationPeer<IToggleSwitchAutomationPeer>
{
	IToggleSwitchAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleSwitchAutomationPeer>>(m_ptr); }
};

struct IToggleSwitchAutomationPeerFactory :
	IInspectable,
	impl_IToggleSwitchAutomationPeerFactory<IToggleSwitchAutomationPeerFactory>
{
	IToggleSwitchAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleSwitchAutomationPeerFactory>>(m_ptr); }
};

struct IAppBarAutomationPeer :
	IInspectable,
	impl_IAppBarAutomationPeer<IAppBarAutomationPeer>
{
	IAppBarAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarAutomationPeer>>(m_ptr); }
};

struct IAppBarAutomationPeerFactory :
	IInspectable,
	impl_IAppBarAutomationPeerFactory<IAppBarAutomationPeerFactory>
{
	IAppBarAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarAutomationPeerFactory>>(m_ptr); }
};

struct IAppBarButtonAutomationPeer :
	IInspectable,
	impl_IAppBarButtonAutomationPeer<IAppBarButtonAutomationPeer>
{
	IAppBarButtonAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarButtonAutomationPeer>>(m_ptr); }
};

struct IAppBarButtonAutomationPeerFactory :
	IInspectable,
	impl_IAppBarButtonAutomationPeerFactory<IAppBarButtonAutomationPeerFactory>
{
	IAppBarButtonAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarButtonAutomationPeerFactory>>(m_ptr); }
};

struct IAppBarToggleButtonAutomationPeer :
	IInspectable,
	impl_IAppBarToggleButtonAutomationPeer<IAppBarToggleButtonAutomationPeer>
{
	IAppBarToggleButtonAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarToggleButtonAutomationPeer>>(m_ptr); }
};

struct IAppBarToggleButtonAutomationPeerFactory :
	IInspectable,
	impl_IAppBarToggleButtonAutomationPeerFactory<IAppBarToggleButtonAutomationPeerFactory>
{
	IAppBarToggleButtonAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarToggleButtonAutomationPeerFactory>>(m_ptr); }
};

struct IDatePickerAutomationPeer :
	IInspectable,
	impl_IDatePickerAutomationPeer<IDatePickerAutomationPeer>
{
	IDatePickerAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatePickerAutomationPeer>>(m_ptr); }
};

struct IDatePickerAutomationPeerFactory :
	IInspectable,
	impl_IDatePickerAutomationPeerFactory<IDatePickerAutomationPeerFactory>
{
	IDatePickerAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatePickerAutomationPeerFactory>>(m_ptr); }
};

struct IFlyoutPresenterAutomationPeer :
	IInspectable,
	impl_IFlyoutPresenterAutomationPeer<IFlyoutPresenterAutomationPeer>
{
	IFlyoutPresenterAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutPresenterAutomationPeer>>(m_ptr); }
};

struct IFlyoutPresenterAutomationPeerFactory :
	IInspectable,
	impl_IFlyoutPresenterAutomationPeerFactory<IFlyoutPresenterAutomationPeerFactory>
{
	IFlyoutPresenterAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutPresenterAutomationPeerFactory>>(m_ptr); }
};

struct IGridViewHeaderItemAutomationPeer :
	IInspectable,
	impl_IGridViewHeaderItemAutomationPeer<IGridViewHeaderItemAutomationPeer>
{
	IGridViewHeaderItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewHeaderItemAutomationPeer>>(m_ptr); }
};

struct IGridViewHeaderItemAutomationPeerFactory :
	IInspectable,
	impl_IGridViewHeaderItemAutomationPeerFactory<IGridViewHeaderItemAutomationPeerFactory>
{
	IGridViewHeaderItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewHeaderItemAutomationPeerFactory>>(m_ptr); }
};

struct IHubAutomationPeer :
	IInspectable,
	impl_IHubAutomationPeer<IHubAutomationPeer>
{
	IHubAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubAutomationPeer>>(m_ptr); }
};

struct IHubAutomationPeerFactory :
	IInspectable,
	impl_IHubAutomationPeerFactory<IHubAutomationPeerFactory>
{
	IHubAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubAutomationPeerFactory>>(m_ptr); }
};

struct IHubSectionAutomationPeer :
	IInspectable,
	impl_IHubSectionAutomationPeer<IHubSectionAutomationPeer>
{
	IHubSectionAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubSectionAutomationPeer>>(m_ptr); }
};

struct IHubSectionAutomationPeerFactory :
	IInspectable,
	impl_IHubSectionAutomationPeerFactory<IHubSectionAutomationPeerFactory>
{
	IHubSectionAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubSectionAutomationPeerFactory>>(m_ptr); }
};

struct IListViewBaseHeaderItemAutomationPeer :
	IInspectable,
	impl_IListViewBaseHeaderItemAutomationPeer<IListViewBaseHeaderItemAutomationPeer>
{
	IListViewBaseHeaderItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBaseHeaderItemAutomationPeer>>(m_ptr); }
};

struct IListViewBaseHeaderItemAutomationPeerFactory :
	IInspectable,
	impl_IListViewBaseHeaderItemAutomationPeerFactory<IListViewBaseHeaderItemAutomationPeerFactory>
{
	IListViewBaseHeaderItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBaseHeaderItemAutomationPeerFactory>>(m_ptr); }
};

struct IListViewHeaderItemAutomationPeer :
	IInspectable,
	impl_IListViewHeaderItemAutomationPeer<IListViewHeaderItemAutomationPeer>
{
	IListViewHeaderItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewHeaderItemAutomationPeer>>(m_ptr); }
};

struct IListViewHeaderItemAutomationPeerFactory :
	IInspectable,
	impl_IListViewHeaderItemAutomationPeerFactory<IListViewHeaderItemAutomationPeerFactory>
{
	IListViewHeaderItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewHeaderItemAutomationPeerFactory>>(m_ptr); }
};

struct IMenuFlyoutItemAutomationPeer :
	IInspectable,
	impl_IMenuFlyoutItemAutomationPeer<IMenuFlyoutItemAutomationPeer>
{
	IMenuFlyoutItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutItemAutomationPeer>>(m_ptr); }
};

struct IMenuFlyoutItemAutomationPeerFactory :
	IInspectable,
	impl_IMenuFlyoutItemAutomationPeerFactory<IMenuFlyoutItemAutomationPeerFactory>
{
	IMenuFlyoutItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutItemAutomationPeerFactory>>(m_ptr); }
};

struct IMenuFlyoutPresenterAutomationPeer :
	IInspectable,
	impl_IMenuFlyoutPresenterAutomationPeer<IMenuFlyoutPresenterAutomationPeer>
{
	IMenuFlyoutPresenterAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutPresenterAutomationPeer>>(m_ptr); }
};

struct IMenuFlyoutPresenterAutomationPeerFactory :
	IInspectable,
	impl_IMenuFlyoutPresenterAutomationPeerFactory<IMenuFlyoutPresenterAutomationPeerFactory>
{
	IMenuFlyoutPresenterAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutPresenterAutomationPeerFactory>>(m_ptr); }
};

struct ISearchBoxAutomationPeer :
	IInspectable,
	impl_ISearchBoxAutomationPeer<ISearchBoxAutomationPeer>
{
	ISearchBoxAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchBoxAutomationPeer>>(m_ptr); }
};

struct ISearchBoxAutomationPeerFactory :
	IInspectable,
	impl_ISearchBoxAutomationPeerFactory<ISearchBoxAutomationPeerFactory>
{
	ISearchBoxAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchBoxAutomationPeerFactory>>(m_ptr); }
};

struct ITimePickerAutomationPeer :
	IInspectable,
	impl_ITimePickerAutomationPeer<ITimePickerAutomationPeer>
{
	ITimePickerAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimePickerAutomationPeer>>(m_ptr); }
};

struct ITimePickerAutomationPeerFactory :
	IInspectable,
	impl_ITimePickerAutomationPeerFactory<ITimePickerAutomationPeerFactory>
{
	ITimePickerAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimePickerAutomationPeerFactory>>(m_ptr); }
};

struct IToggleMenuFlyoutItemAutomationPeer :
	IInspectable,
	impl_IToggleMenuFlyoutItemAutomationPeer<IToggleMenuFlyoutItemAutomationPeer>
{
	IToggleMenuFlyoutItemAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleMenuFlyoutItemAutomationPeer>>(m_ptr); }
};

struct IToggleMenuFlyoutItemAutomationPeerFactory :
	IInspectable,
	impl_IToggleMenuFlyoutItemAutomationPeerFactory<IToggleMenuFlyoutItemAutomationPeerFactory>
{
	IToggleMenuFlyoutItemAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleMenuFlyoutItemAutomationPeerFactory>>(m_ptr); }
};

struct IAutomationPeer :
	IInspectable,
	impl_IAutomationPeer<IAutomationPeer>
{
	IAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationPeer>>(m_ptr); }
};

struct IAutomationPeerOverrides :
	IInspectable,
	impl_IAutomationPeerOverrides<IAutomationPeerOverrides>
{
	IAutomationPeerOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationPeerOverrides>>(m_ptr); }
};

struct IAutomationPeerProtected :
	IInspectable,
	impl_IAutomationPeerProtected<IAutomationPeerProtected>
{
	IAutomationPeerProtected(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationPeerProtected>>(m_ptr); }
};

struct IAutomationPeerStatics :
	IInspectable,
	impl_IAutomationPeerStatics<IAutomationPeerStatics>
{
	IAutomationPeerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationPeerStatics>>(m_ptr); }
};

struct IAutomationPeerFactory :
	IInspectable,
	impl_IAutomationPeerFactory<IAutomationPeerFactory>
{
	IAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationPeerFactory>>(m_ptr); }
};

struct IAutomationPeer2 :
	IInspectable,
	impl_IAutomationPeer2<IAutomationPeer2>
{
	IAutomationPeer2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationPeer2>>(m_ptr); }
};

struct IAutomationPeerOverrides2 :
	IInspectable,
	impl_IAutomationPeerOverrides2<IAutomationPeerOverrides2>
{
	IAutomationPeerOverrides2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationPeerOverrides2>>(m_ptr); }
};

struct IFrameworkElementAutomationPeer :
	IInspectable,
	impl_IFrameworkElementAutomationPeer<IFrameworkElementAutomationPeer>
{
	IFrameworkElementAutomationPeer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElementAutomationPeer>>(m_ptr); }
};

struct IFrameworkElementAutomationPeerStatics :
	IInspectable,
	impl_IFrameworkElementAutomationPeerStatics<IFrameworkElementAutomationPeerStatics>
{
	IFrameworkElementAutomationPeerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElementAutomationPeerStatics>>(m_ptr); }
};

struct IFrameworkElementAutomationPeerFactory :
	IInspectable,
	impl_IFrameworkElementAutomationPeerFactory<IFrameworkElementAutomationPeerFactory>
{
	IFrameworkElementAutomationPeerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkElementAutomationPeerFactory>>(m_ptr); }
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation { namespace Provider {

struct IAnnotationProvider :
	IInspectable,
	impl_IAnnotationProvider<IAnnotationProvider>
{
	IAnnotationProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAnnotationProvider>>(m_ptr); }
};

struct IDockProvider :
	IInspectable,
	impl_IDockProvider<IDockProvider>
{
	IDockProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDockProvider>>(m_ptr); }
};

struct IDragProvider :
	IInspectable,
	impl_IDragProvider<IDragProvider>
{
	IDragProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragProvider>>(m_ptr); }
};

struct IDropTargetProvider :
	IInspectable,
	impl_IDropTargetProvider<IDropTargetProvider>
{
	IDropTargetProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDropTargetProvider>>(m_ptr); }
};

struct IExpandCollapseProvider :
	IInspectable,
	impl_IExpandCollapseProvider<IExpandCollapseProvider>
{
	IExpandCollapseProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExpandCollapseProvider>>(m_ptr); }
};

struct IGridItemProvider :
	IInspectable,
	impl_IGridItemProvider<IGridItemProvider>
{
	IGridItemProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridItemProvider>>(m_ptr); }
};

struct IGridProvider :
	IInspectable,
	impl_IGridProvider<IGridProvider>
{
	IGridProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridProvider>>(m_ptr); }
};

struct IInvokeProvider :
	IInspectable,
	impl_IInvokeProvider<IInvokeProvider>
{
	IInvokeProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInvokeProvider>>(m_ptr); }
};

struct IItemContainerProvider :
	IInspectable,
	impl_IItemContainerProvider<IItemContainerProvider>
{
	IItemContainerProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemContainerProvider>>(m_ptr); }
};

struct IMultipleViewProvider :
	IInspectable,
	impl_IMultipleViewProvider<IMultipleViewProvider>
{
	IMultipleViewProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMultipleViewProvider>>(m_ptr); }
};

struct IObjectModelProvider :
	IInspectable,
	impl_IObjectModelProvider<IObjectModelProvider>
{
	IObjectModelProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IObjectModelProvider>>(m_ptr); }
};

struct IRangeValueProvider :
	IInspectable,
	impl_IRangeValueProvider<IRangeValueProvider>
{
	IRangeValueProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeValueProvider>>(m_ptr); }
};

struct IIRawElementProviderSimple :
	IInspectable,
	impl_IIRawElementProviderSimple<IIRawElementProviderSimple>
{
	IIRawElementProviderSimple(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIRawElementProviderSimple>>(m_ptr); }
};

struct IScrollItemProvider :
	IInspectable,
	impl_IScrollItemProvider<IScrollItemProvider>
{
	IScrollItemProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollItemProvider>>(m_ptr); }
};

struct IScrollProvider :
	IInspectable,
	impl_IScrollProvider<IScrollProvider>
{
	IScrollProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollProvider>>(m_ptr); }
};

struct ISelectionItemProvider :
	IInspectable,
	impl_ISelectionItemProvider<ISelectionItemProvider>
{
	ISelectionItemProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectionItemProvider>>(m_ptr); }
};

struct ISelectionProvider :
	IInspectable,
	impl_ISelectionProvider<ISelectionProvider>
{
	ISelectionProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectionProvider>>(m_ptr); }
};

struct ISpreadsheetItemProvider :
	IInspectable,
	impl_ISpreadsheetItemProvider<ISpreadsheetItemProvider>
{
	ISpreadsheetItemProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpreadsheetItemProvider>>(m_ptr); }
};

struct ISpreadsheetProvider :
	IInspectable,
	impl_ISpreadsheetProvider<ISpreadsheetProvider>
{
	ISpreadsheetProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpreadsheetProvider>>(m_ptr); }
};

struct IStylesProvider :
	IInspectable,
	impl_IStylesProvider<IStylesProvider>
{
	IStylesProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStylesProvider>>(m_ptr); }
};

struct ISynchronizedInputProvider :
	IInspectable,
	impl_ISynchronizedInputProvider<ISynchronizedInputProvider>
{
	ISynchronizedInputProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISynchronizedInputProvider>>(m_ptr); }
};

struct ITableItemProvider :
	IInspectable,
	impl_ITableItemProvider<ITableItemProvider>
{
	ITableItemProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITableItemProvider>>(m_ptr); }
};

struct ITableProvider :
	IInspectable,
	impl_ITableProvider<ITableProvider>
{
	ITableProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITableProvider>>(m_ptr); }
};

struct ITextChildProvider :
	IInspectable,
	impl_ITextChildProvider<ITextChildProvider>
{
	ITextChildProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextChildProvider>>(m_ptr); }
};

struct ITextRangeProvider :
	IInspectable,
	impl_ITextRangeProvider<ITextRangeProvider>
{
	ITextRangeProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextRangeProvider>>(m_ptr); }
};

struct ITextProvider :
	IInspectable,
	impl_ITextProvider<ITextProvider>
{
	ITextProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextProvider>>(m_ptr); }
};

struct ITextProvider2 :
	IInspectable,
	impl_ITextProvider2<ITextProvider2>,
	Requires<ITextProvider2, Windows::UI::Xaml::Automation::Provider::ITextProvider>
{
	ITextProvider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextProvider2>>(m_ptr); }
};

struct ITextRangeProvider2 :
	IInspectable,
	impl_ITextRangeProvider2<ITextRangeProvider2>,
	Requires<ITextRangeProvider2, Windows::UI::Xaml::Automation::Provider::ITextRangeProvider>
{
	ITextRangeProvider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextRangeProvider2>>(m_ptr); }
};

struct IToggleProvider :
	IInspectable,
	impl_IToggleProvider<IToggleProvider>
{
	IToggleProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleProvider>>(m_ptr); }
};

struct ITransformProvider :
	IInspectable,
	impl_ITransformProvider<ITransformProvider>
{
	ITransformProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransformProvider>>(m_ptr); }
};

struct ITransformProvider2 :
	IInspectable,
	impl_ITransformProvider2<ITransformProvider2>,
	Requires<ITransformProvider2, Windows::UI::Xaml::Automation::Provider::ITransformProvider>
{
	ITransformProvider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransformProvider2>>(m_ptr); }
};

struct IValueProvider :
	IInspectable,
	impl_IValueProvider<IValueProvider>
{
	IValueProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IValueProvider>>(m_ptr); }
};

struct IVirtualizedItemProvider :
	IInspectable,
	impl_IVirtualizedItemProvider<IVirtualizedItemProvider>
{
	IVirtualizedItemProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualizedItemProvider>>(m_ptr); }
};

struct IWindowProvider :
	IInspectable,
	impl_IWindowProvider<IWindowProvider>
{
	IWindowProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowProvider>>(m_ptr); }
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Controls {

struct IBackClickEventHandler :
	IUnknown,
	impl_IBackClickEventHandler<IBackClickEventHandler>
{
	IBackClickEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackClickEventHandler>>(m_ptr); }
};

struct ICleanUpVirtualizedItemEventHandler :
	IUnknown,
	impl_ICleanUpVirtualizedItemEventHandler<ICleanUpVirtualizedItemEventHandler>
{
	ICleanUpVirtualizedItemEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICleanUpVirtualizedItemEventHandler>>(m_ptr); }
};

struct IContextMenuOpeningEventHandler :
	IUnknown,
	impl_IContextMenuOpeningEventHandler<IContextMenuOpeningEventHandler>
{
	IContextMenuOpeningEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContextMenuOpeningEventHandler>>(m_ptr); }
};

struct IDragItemsStartingEventHandler :
	IUnknown,
	impl_IDragItemsStartingEventHandler<IDragItemsStartingEventHandler>
{
	IDragItemsStartingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragItemsStartingEventHandler>>(m_ptr); }
};

struct IItemClickEventHandler :
	IUnknown,
	impl_IItemClickEventHandler<IItemClickEventHandler>
{
	IItemClickEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemClickEventHandler>>(m_ptr); }
};

struct INotifyEventHandler :
	IUnknown,
	impl_INotifyEventHandler<INotifyEventHandler>
{
	INotifyEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INotifyEventHandler>>(m_ptr); }
};

struct ISelectionChangedEventHandler :
	IUnknown,
	impl_ISelectionChangedEventHandler<ISelectionChangedEventHandler>
{
	ISelectionChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectionChangedEventHandler>>(m_ptr); }
};

struct ISemanticZoomViewChangedEventHandler :
	IUnknown,
	impl_ISemanticZoomViewChangedEventHandler<ISemanticZoomViewChangedEventHandler>
{
	ISemanticZoomViewChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticZoomViewChangedEventHandler>>(m_ptr); }
};

struct ITextChangedEventHandler :
	IUnknown,
	impl_ITextChangedEventHandler<ITextChangedEventHandler>
{
	ITextChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextChangedEventHandler>>(m_ptr); }
};

struct ITextControlPasteEventHandler :
	IUnknown,
	impl_ITextControlPasteEventHandler<ITextControlPasteEventHandler>
{
	ITextControlPasteEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextControlPasteEventHandler>>(m_ptr); }
};

struct IHubSectionHeaderClickEventHandler :
	IUnknown,
	impl_IHubSectionHeaderClickEventHandler<IHubSectionHeaderClickEventHandler>
{
	IHubSectionHeaderClickEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubSectionHeaderClickEventHandler>>(m_ptr); }
};

struct ISectionsInViewChangedEventHandler :
	IUnknown,
	impl_ISectionsInViewChangedEventHandler<ISectionsInViewChangedEventHandler>
{
	ISectionsInViewChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISectionsInViewChangedEventHandler>>(m_ptr); }
};

struct IWebViewNavigationFailedEventHandler :
	IUnknown,
	impl_IWebViewNavigationFailedEventHandler<IWebViewNavigationFailedEventHandler>
{
	IWebViewNavigationFailedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewNavigationFailedEventHandler>>(m_ptr); }
};

struct IBackClickEventArgs :
	IInspectable,
	impl_IBackClickEventArgs<IBackClickEventArgs>
{
	IBackClickEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackClickEventArgs>>(m_ptr); }
};

struct IBorder :
	IInspectable,
	impl_IBorder<IBorder>
{
	IBorder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBorder>>(m_ptr); }
};

struct IBorderStatics :
	IInspectable,
	impl_IBorderStatics<IBorderStatics>
{
	IBorderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBorderStatics>>(m_ptr); }
};

struct IButton :
	IInspectable,
	impl_IButton<IButton>
{
	IButton(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButton>>(m_ptr); }
};

struct IButtonFactory :
	IInspectable,
	impl_IButtonFactory<IButtonFactory>
{
	IButtonFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonFactory>>(m_ptr); }
};

struct IButtonWithFlyout :
	IInspectable,
	impl_IButtonWithFlyout<IButtonWithFlyout>
{
	IButtonWithFlyout(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonWithFlyout>>(m_ptr); }
};

struct IButtonStaticsWithFlyout :
	IInspectable,
	impl_IButtonStaticsWithFlyout<IButtonStaticsWithFlyout>
{
	IButtonStaticsWithFlyout(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonStaticsWithFlyout>>(m_ptr); }
};

struct ICanvas :
	IInspectable,
	impl_ICanvas<ICanvas>
{
	ICanvas(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICanvas>>(m_ptr); }
};

struct ICanvasStatics :
	IInspectable,
	impl_ICanvasStatics<ICanvasStatics>
{
	ICanvasStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICanvasStatics>>(m_ptr); }
};

struct ICanvasFactory :
	IInspectable,
	impl_ICanvasFactory<ICanvasFactory>
{
	ICanvasFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICanvasFactory>>(m_ptr); }
};

struct ICaptureElement :
	IInspectable,
	impl_ICaptureElement<ICaptureElement>
{
	ICaptureElement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICaptureElement>>(m_ptr); }
};

struct ICaptureElementStatics :
	IInspectable,
	impl_ICaptureElementStatics<ICaptureElementStatics>
{
	ICaptureElementStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICaptureElementStatics>>(m_ptr); }
};

struct ICheckBox :
	IInspectable,
	impl_ICheckBox<ICheckBox>
{
	ICheckBox(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICheckBox>>(m_ptr); }
};

struct ICheckBoxFactory :
	IInspectable,
	impl_ICheckBoxFactory<ICheckBoxFactory>
{
	ICheckBoxFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICheckBoxFactory>>(m_ptr); }
};

struct ICleanUpVirtualizedItemEventArgs :
	IInspectable,
	impl_ICleanUpVirtualizedItemEventArgs<ICleanUpVirtualizedItemEventArgs>
{
	ICleanUpVirtualizedItemEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICleanUpVirtualizedItemEventArgs>>(m_ptr); }
};

struct IColumnDefinition :
	IInspectable,
	impl_IColumnDefinition<IColumnDefinition>
{
	IColumnDefinition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColumnDefinition>>(m_ptr); }
};

struct IColumnDefinitionStatics :
	IInspectable,
	impl_IColumnDefinitionStatics<IColumnDefinitionStatics>
{
	IColumnDefinitionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColumnDefinitionStatics>>(m_ptr); }
};

struct IComboBox :
	IInspectable,
	impl_IComboBox<IComboBox>
{
	IComboBox(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBox>>(m_ptr); }
};

struct IComboBoxOverrides :
	IInspectable,
	impl_IComboBoxOverrides<IComboBoxOverrides>
{
	IComboBoxOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxOverrides>>(m_ptr); }
};

struct IComboBoxStatics :
	IInspectable,
	impl_IComboBoxStatics<IComboBoxStatics>
{
	IComboBoxStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxStatics>>(m_ptr); }
};

struct IComboBoxFactory :
	IInspectable,
	impl_IComboBoxFactory<IComboBoxFactory>
{
	IComboBoxFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxFactory>>(m_ptr); }
};

struct IComboBox2 :
	IInspectable,
	impl_IComboBox2<IComboBox2>
{
	IComboBox2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBox2>>(m_ptr); }
};

struct IComboBoxStatics2 :
	IInspectable,
	impl_IComboBoxStatics2<IComboBoxStatics2>
{
	IComboBoxStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxStatics2>>(m_ptr); }
};

struct IComboBoxItem :
	IInspectable,
	impl_IComboBoxItem<IComboBoxItem>
{
	IComboBoxItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxItem>>(m_ptr); }
};

struct IComboBoxItemFactory :
	IInspectable,
	impl_IComboBoxItemFactory<IComboBoxItemFactory>
{
	IComboBoxItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxItemFactory>>(m_ptr); }
};

struct IContainerContentChangingEventArgs :
	IInspectable,
	impl_IContainerContentChangingEventArgs<IContainerContentChangingEventArgs>
{
	IContainerContentChangingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContainerContentChangingEventArgs>>(m_ptr); }
};

struct IContentControl :
	IInspectable,
	impl_IContentControl<IContentControl>
{
	IContentControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentControl>>(m_ptr); }
};

struct IContentControlOverrides :
	IInspectable,
	impl_IContentControlOverrides<IContentControlOverrides>
{
	IContentControlOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentControlOverrides>>(m_ptr); }
};

struct IContentControlStatics :
	IInspectable,
	impl_IContentControlStatics<IContentControlStatics>
{
	IContentControlStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentControlStatics>>(m_ptr); }
};

struct IContentControlFactory :
	IInspectable,
	impl_IContentControlFactory<IContentControlFactory>
{
	IContentControlFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentControlFactory>>(m_ptr); }
};

struct IContentControl2 :
	IInspectable,
	impl_IContentControl2<IContentControl2>
{
	IContentControl2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentControl2>>(m_ptr); }
};

struct IContentPresenter :
	IInspectable,
	impl_IContentPresenter<IContentPresenter>
{
	IContentPresenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPresenter>>(m_ptr); }
};

struct IContentPresenterOverrides :
	IInspectable,
	impl_IContentPresenterOverrides<IContentPresenterOverrides>
{
	IContentPresenterOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPresenterOverrides>>(m_ptr); }
};

struct IContentPresenterStatics :
	IInspectable,
	impl_IContentPresenterStatics<IContentPresenterStatics>
{
	IContentPresenterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPresenterStatics>>(m_ptr); }
};

struct IContentPresenterFactory :
	IInspectable,
	impl_IContentPresenterFactory<IContentPresenterFactory>
{
	IContentPresenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPresenterFactory>>(m_ptr); }
};

struct IContentPresenter2 :
	IInspectable,
	impl_IContentPresenter2<IContentPresenter2>
{
	IContentPresenter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPresenter2>>(m_ptr); }
};

struct IContentPresenterStatics2 :
	IInspectable,
	impl_IContentPresenterStatics2<IContentPresenterStatics2>
{
	IContentPresenterStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPresenterStatics2>>(m_ptr); }
};

struct IContextMenuEventArgs :
	IInspectable,
	impl_IContextMenuEventArgs<IContextMenuEventArgs>
{
	IContextMenuEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContextMenuEventArgs>>(m_ptr); }
};

struct IDataTemplateSelector :
	IInspectable,
	impl_IDataTemplateSelector<IDataTemplateSelector>
{
	IDataTemplateSelector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTemplateSelector>>(m_ptr); }
};

struct IDataTemplateSelectorOverrides :
	IInspectable,
	impl_IDataTemplateSelectorOverrides<IDataTemplateSelectorOverrides>
{
	IDataTemplateSelectorOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTemplateSelectorOverrides>>(m_ptr); }
};

struct IDataTemplateSelectorFactory :
	IInspectable,
	impl_IDataTemplateSelectorFactory<IDataTemplateSelectorFactory>
{
	IDataTemplateSelectorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTemplateSelectorFactory>>(m_ptr); }
};

struct IDataTemplateSelector2 :
	IInspectable,
	impl_IDataTemplateSelector2<IDataTemplateSelector2>
{
	IDataTemplateSelector2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTemplateSelector2>>(m_ptr); }
};

struct IDataTemplateSelectorOverrides2 :
	IInspectable,
	impl_IDataTemplateSelectorOverrides2<IDataTemplateSelectorOverrides2>
{
	IDataTemplateSelectorOverrides2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTemplateSelectorOverrides2>>(m_ptr); }
};

struct IDatePicker :
	IInspectable,
	impl_IDatePicker<IDatePicker>
{
	IDatePicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatePicker>>(m_ptr); }
};

struct IDatePickerStatics :
	IInspectable,
	impl_IDatePickerStatics<IDatePickerStatics>
{
	IDatePickerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatePickerStatics>>(m_ptr); }
};

struct IDatePickerFactory :
	IInspectable,
	impl_IDatePickerFactory<IDatePickerFactory>
{
	IDatePickerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatePickerFactory>>(m_ptr); }
};

struct IDatePickerValueChangedEventArgs :
	IInspectable,
	impl_IDatePickerValueChangedEventArgs<IDatePickerValueChangedEventArgs>
{
	IDatePickerValueChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatePickerValueChangedEventArgs>>(m_ptr); }
};

struct IDragItemsStartingEventArgs :
	IInspectable,
	impl_IDragItemsStartingEventArgs<IDragItemsStartingEventArgs>
{
	IDragItemsStartingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragItemsStartingEventArgs>>(m_ptr); }
};

struct IFlipView :
	IInspectable,
	impl_IFlipView<IFlipView>
{
	IFlipView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipView>>(m_ptr); }
};

struct IFlipViewFactory :
	IInspectable,
	impl_IFlipViewFactory<IFlipViewFactory>
{
	IFlipViewFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewFactory>>(m_ptr); }
};

struct IFlipView2 :
	IInspectable,
	impl_IFlipView2<IFlipView2>
{
	IFlipView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipView2>>(m_ptr); }
};

struct IFlipViewStatics2 :
	IInspectable,
	impl_IFlipViewStatics2<IFlipViewStatics2>
{
	IFlipViewStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewStatics2>>(m_ptr); }
};

struct IFlipViewItem :
	IInspectable,
	impl_IFlipViewItem<IFlipViewItem>
{
	IFlipViewItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewItem>>(m_ptr); }
};

struct IFlipViewItemFactory :
	IInspectable,
	impl_IFlipViewItemFactory<IFlipViewItemFactory>
{
	IFlipViewItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlipViewItemFactory>>(m_ptr); }
};

struct IGrid :
	IInspectable,
	impl_IGrid<IGrid>
{
	IGrid(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGrid>>(m_ptr); }
};

struct IGridStatics :
	IInspectable,
	impl_IGridStatics<IGridStatics>
{
	IGridStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridStatics>>(m_ptr); }
};

struct IGridFactory :
	IInspectable,
	impl_IGridFactory<IGridFactory>
{
	IGridFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridFactory>>(m_ptr); }
};

struct IGridView :
	IInspectable,
	impl_IGridView<IGridView>
{
	IGridView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridView>>(m_ptr); }
};

struct IGridViewFactory :
	IInspectable,
	impl_IGridViewFactory<IGridViewFactory>
{
	IGridViewFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewFactory>>(m_ptr); }
};

struct IGridViewItem :
	IInspectable,
	impl_IGridViewItem<IGridViewItem>
{
	IGridViewItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItem>>(m_ptr); }
};

struct IGridViewItemFactory :
	IInspectable,
	impl_IGridViewItemFactory<IGridViewItemFactory>
{
	IGridViewItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItemFactory>>(m_ptr); }
};

struct IGroupItem :
	IInspectable,
	impl_IGroupItem<IGroupItem>
{
	IGroupItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupItem>>(m_ptr); }
};

struct IGroupItemFactory :
	IInspectable,
	impl_IGroupItemFactory<IGroupItemFactory>
{
	IGroupItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupItemFactory>>(m_ptr); }
};

struct IGroupStyle :
	IInspectable,
	impl_IGroupStyle<IGroupStyle>
{
	IGroupStyle(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupStyle>>(m_ptr); }
};

struct IGroupStyleFactory :
	IInspectable,
	impl_IGroupStyleFactory<IGroupStyleFactory>
{
	IGroupStyleFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupStyleFactory>>(m_ptr); }
};

struct IGroupStyle2 :
	IInspectable,
	impl_IGroupStyle2<IGroupStyle2>
{
	IGroupStyle2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupStyle2>>(m_ptr); }
};

struct IGroupStyleSelector :
	IInspectable,
	impl_IGroupStyleSelector<IGroupStyleSelector>
{
	IGroupStyleSelector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupStyleSelector>>(m_ptr); }
};

struct IGroupStyleSelectorOverrides :
	IInspectable,
	impl_IGroupStyleSelectorOverrides<IGroupStyleSelectorOverrides>
{
	IGroupStyleSelectorOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupStyleSelectorOverrides>>(m_ptr); }
};

struct IGroupStyleSelectorFactory :
	IInspectable,
	impl_IGroupStyleSelectorFactory<IGroupStyleSelectorFactory>
{
	IGroupStyleSelectorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGroupStyleSelectorFactory>>(m_ptr); }
};

struct IHyperlinkButton :
	IInspectable,
	impl_IHyperlinkButton<IHyperlinkButton>
{
	IHyperlinkButton(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHyperlinkButton>>(m_ptr); }
};

struct IHyperlinkButtonStatics :
	IInspectable,
	impl_IHyperlinkButtonStatics<IHyperlinkButtonStatics>
{
	IHyperlinkButtonStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHyperlinkButtonStatics>>(m_ptr); }
};

struct IHyperlinkButtonFactory :
	IInspectable,
	impl_IHyperlinkButtonFactory<IHyperlinkButtonFactory>
{
	IHyperlinkButtonFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHyperlinkButtonFactory>>(m_ptr); }
};

struct IItemContainerMapping :
	IInspectable,
	impl_IItemContainerMapping<IItemContainerMapping>
{
	IItemContainerMapping(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemContainerMapping>>(m_ptr); }
};

struct IImage :
	IInspectable,
	impl_IImage<IImage>
{
	IImage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImage>>(m_ptr); }
};

struct IImageStatics :
	IInspectable,
	impl_IImageStatics<IImageStatics>
{
	IImageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageStatics>>(m_ptr); }
};

struct INavigate :
	IInspectable,
	impl_INavigate<INavigate>
{
	INavigate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigate>>(m_ptr); }
};

struct ISemanticZoomInformation :
	IInspectable,
	impl_ISemanticZoomInformation<ISemanticZoomInformation>
{
	ISemanticZoomInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticZoomInformation>>(m_ptr); }
};

struct IItemClickEventArgs :
	IInspectable,
	impl_IItemClickEventArgs<IItemClickEventArgs>
{
	IItemClickEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemClickEventArgs>>(m_ptr); }
};

struct IItemContainerGenerator :
	IInspectable,
	impl_IItemContainerGenerator<IItemContainerGenerator>
{
	IItemContainerGenerator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemContainerGenerator>>(m_ptr); }
};

struct IItemsControl :
	IInspectable,
	impl_IItemsControl<IItemsControl>
{
	IItemsControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsControl>>(m_ptr); }
};

struct IItemsControlOverrides :
	IInspectable,
	impl_IItemsControlOverrides<IItemsControlOverrides>
{
	IItemsControlOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsControlOverrides>>(m_ptr); }
};

struct IItemsControlStatics :
	IInspectable,
	impl_IItemsControlStatics<IItemsControlStatics>
{
	IItemsControlStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsControlStatics>>(m_ptr); }
};

struct IItemsControlFactory :
	IInspectable,
	impl_IItemsControlFactory<IItemsControlFactory>
{
	IItemsControlFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsControlFactory>>(m_ptr); }
};

struct IItemsControl2 :
	IInspectable,
	impl_IItemsControl2<IItemsControl2>
{
	IItemsControl2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsControl2>>(m_ptr); }
};

struct IItemsPanelTemplate :
	IInspectable,
	impl_IItemsPanelTemplate<IItemsPanelTemplate>
{
	IItemsPanelTemplate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsPanelTemplate>>(m_ptr); }
};

struct IItemsPresenter :
	IInspectable,
	impl_IItemsPresenter<IItemsPresenter>
{
	IItemsPresenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsPresenter>>(m_ptr); }
};

struct IItemsPresenterStatics :
	IInspectable,
	impl_IItemsPresenterStatics<IItemsPresenterStatics>
{
	IItemsPresenterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsPresenterStatics>>(m_ptr); }
};

struct IItemsPresenter2 :
	IInspectable,
	impl_IItemsPresenter2<IItemsPresenter2>
{
	IItemsPresenter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsPresenter2>>(m_ptr); }
};

struct IItemsPresenterStatics2 :
	IInspectable,
	impl_IItemsPresenterStatics2<IItemsPresenterStatics2>
{
	IItemsPresenterStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsPresenterStatics2>>(m_ptr); }
};

struct IListBox :
	IInspectable,
	impl_IListBox<IListBox>
{
	IListBox(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBox>>(m_ptr); }
};

struct IListBoxStatics :
	IInspectable,
	impl_IListBoxStatics<IListBoxStatics>
{
	IListBoxStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxStatics>>(m_ptr); }
};

struct IListBoxFactory :
	IInspectable,
	impl_IListBoxFactory<IListBoxFactory>
{
	IListBoxFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxFactory>>(m_ptr); }
};

struct IListBoxItem :
	IInspectable,
	impl_IListBoxItem<IListBoxItem>
{
	IListBoxItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxItem>>(m_ptr); }
};

struct IListBoxItemFactory :
	IInspectable,
	impl_IListBoxItemFactory<IListBoxItemFactory>
{
	IListBoxItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListBoxItemFactory>>(m_ptr); }
};

struct IListView :
	IInspectable,
	impl_IListView<IListView>
{
	IListView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListView>>(m_ptr); }
};

struct IListViewFactory :
	IInspectable,
	impl_IListViewFactory<IListViewFactory>
{
	IListViewFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewFactory>>(m_ptr); }
};

struct IListViewBase :
	IInspectable,
	impl_IListViewBase<IListViewBase>
{
	IListViewBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBase>>(m_ptr); }
};

struct IListViewBaseStatics :
	IInspectable,
	impl_IListViewBaseStatics<IListViewBaseStatics>
{
	IListViewBaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBaseStatics>>(m_ptr); }
};

struct IListViewBaseFactory :
	IInspectable,
	impl_IListViewBaseFactory<IListViewBaseFactory>
{
	IListViewBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBaseFactory>>(m_ptr); }
};

struct IListViewBase2 :
	IInspectable,
	impl_IListViewBase2<IListViewBase2>
{
	IListViewBase2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBase2>>(m_ptr); }
};

struct IListViewBaseStatics2 :
	IInspectable,
	impl_IListViewBaseStatics2<IListViewBaseStatics2>
{
	IListViewBaseStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBaseStatics2>>(m_ptr); }
};

struct IListViewItem :
	IInspectable,
	impl_IListViewItem<IListViewItem>
{
	IListViewItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItem>>(m_ptr); }
};

struct IListViewItemFactory :
	IInspectable,
	impl_IListViewItemFactory<IListViewItemFactory>
{
	IListViewItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItemFactory>>(m_ptr); }
};

struct IMediaElement :
	IInspectable,
	impl_IMediaElement<IMediaElement>
{
	IMediaElement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaElement>>(m_ptr); }
};

struct IMediaElementStatics :
	IInspectable,
	impl_IMediaElementStatics<IMediaElementStatics>
{
	IMediaElementStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaElementStatics>>(m_ptr); }
};

struct IMediaElement2 :
	IInspectable,
	impl_IMediaElement2<IMediaElement2>
{
	IMediaElement2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaElement2>>(m_ptr); }
};

struct IMediaElementStatics2 :
	IInspectable,
	impl_IMediaElementStatics2<IMediaElementStatics2>
{
	IMediaElementStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaElementStatics2>>(m_ptr); }
};

struct INotifyEventArgs :
	IInspectable,
	impl_INotifyEventArgs<INotifyEventArgs>
{
	INotifyEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INotifyEventArgs>>(m_ptr); }
};

struct INotifyEventArgs2 :
	IInspectable,
	impl_INotifyEventArgs2<INotifyEventArgs2>
{
	INotifyEventArgs2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INotifyEventArgs2>>(m_ptr); }
};

struct IPanel :
	IInspectable,
	impl_IPanel<IPanel>
{
	IPanel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPanel>>(m_ptr); }
};

struct IPanelStatics :
	IInspectable,
	impl_IPanelStatics<IPanelStatics>
{
	IPanelStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPanelStatics>>(m_ptr); }
};

struct IPanelFactory :
	IInspectable,
	impl_IPanelFactory<IPanelFactory>
{
	IPanelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPanelFactory>>(m_ptr); }
};

struct IPasswordBox :
	IInspectable,
	impl_IPasswordBox<IPasswordBox>
{
	IPasswordBox(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordBox>>(m_ptr); }
};

struct IPasswordBoxStatics :
	IInspectable,
	impl_IPasswordBoxStatics<IPasswordBoxStatics>
{
	IPasswordBoxStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordBoxStatics>>(m_ptr); }
};

struct IPasswordBox2 :
	IInspectable,
	impl_IPasswordBox2<IPasswordBox2>
{
	IPasswordBox2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordBox2>>(m_ptr); }
};

struct IPasswordBoxStatics2 :
	IInspectable,
	impl_IPasswordBoxStatics2<IPasswordBoxStatics2>
{
	IPasswordBoxStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordBoxStatics2>>(m_ptr); }
};

struct IProgressBar :
	IInspectable,
	impl_IProgressBar<IProgressBar>
{
	IProgressBar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressBar>>(m_ptr); }
};

struct IProgressBarStatics :
	IInspectable,
	impl_IProgressBarStatics<IProgressBarStatics>
{
	IProgressBarStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressBarStatics>>(m_ptr); }
};

struct IProgressBarFactory :
	IInspectable,
	impl_IProgressBarFactory<IProgressBarFactory>
{
	IProgressBarFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressBarFactory>>(m_ptr); }
};

struct IProgressRing :
	IInspectable,
	impl_IProgressRing<IProgressRing>
{
	IProgressRing(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressRing>>(m_ptr); }
};

struct IProgressRingStatics :
	IInspectable,
	impl_IProgressRingStatics<IProgressRingStatics>
{
	IProgressRingStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressRingStatics>>(m_ptr); }
};

struct IRadioButton :
	IInspectable,
	impl_IRadioButton<IRadioButton>
{
	IRadioButton(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRadioButton>>(m_ptr); }
};

struct IRadioButtonStatics :
	IInspectable,
	impl_IRadioButtonStatics<IRadioButtonStatics>
{
	IRadioButtonStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRadioButtonStatics>>(m_ptr); }
};

struct IRadioButtonFactory :
	IInspectable,
	impl_IRadioButtonFactory<IRadioButtonFactory>
{
	IRadioButtonFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRadioButtonFactory>>(m_ptr); }
};

struct IRichEditBox :
	IInspectable,
	impl_IRichEditBox<IRichEditBox>
{
	IRichEditBox(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichEditBox>>(m_ptr); }
};

struct IRichEditBoxStatics :
	IInspectable,
	impl_IRichEditBoxStatics<IRichEditBoxStatics>
{
	IRichEditBoxStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichEditBoxStatics>>(m_ptr); }
};

struct IRichEditBoxFactory :
	IInspectable,
	impl_IRichEditBoxFactory<IRichEditBoxFactory>
{
	IRichEditBoxFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichEditBoxFactory>>(m_ptr); }
};

struct IRichEditBox2 :
	IInspectable,
	impl_IRichEditBox2<IRichEditBox2>
{
	IRichEditBox2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichEditBox2>>(m_ptr); }
};

struct IRichEditBoxStatics2 :
	IInspectable,
	impl_IRichEditBoxStatics2<IRichEditBoxStatics2>
{
	IRichEditBoxStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichEditBoxStatics2>>(m_ptr); }
};

struct IRichTextBlock :
	IInspectable,
	impl_IRichTextBlock<IRichTextBlock>
{
	IRichTextBlock(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlock>>(m_ptr); }
};

struct IRichTextBlockStatics :
	IInspectable,
	impl_IRichTextBlockStatics<IRichTextBlockStatics>
{
	IRichTextBlockStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockStatics>>(m_ptr); }
};

struct IRichTextBlock2 :
	IInspectable,
	impl_IRichTextBlock2<IRichTextBlock2>
{
	IRichTextBlock2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlock2>>(m_ptr); }
};

struct IRichTextBlockStatics2 :
	IInspectable,
	impl_IRichTextBlockStatics2<IRichTextBlockStatics2>
{
	IRichTextBlockStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockStatics2>>(m_ptr); }
};

struct IRichTextBlockOverflow :
	IInspectable,
	impl_IRichTextBlockOverflow<IRichTextBlockOverflow>
{
	IRichTextBlockOverflow(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockOverflow>>(m_ptr); }
};

struct IRichTextBlockOverflowStatics :
	IInspectable,
	impl_IRichTextBlockOverflowStatics<IRichTextBlockOverflowStatics>
{
	IRichTextBlockOverflowStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockOverflowStatics>>(m_ptr); }
};

struct IRichTextBlockOverflow2 :
	IInspectable,
	impl_IRichTextBlockOverflow2<IRichTextBlockOverflow2>
{
	IRichTextBlockOverflow2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockOverflow2>>(m_ptr); }
};

struct IRichTextBlockOverflowStatics2 :
	IInspectable,
	impl_IRichTextBlockOverflowStatics2<IRichTextBlockOverflowStatics2>
{
	IRichTextBlockOverflowStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRichTextBlockOverflowStatics2>>(m_ptr); }
};

struct IRowDefinition :
	IInspectable,
	impl_IRowDefinition<IRowDefinition>
{
	IRowDefinition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRowDefinition>>(m_ptr); }
};

struct IRowDefinitionStatics :
	IInspectable,
	impl_IRowDefinitionStatics<IRowDefinitionStatics>
{
	IRowDefinitionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRowDefinitionStatics>>(m_ptr); }
};

struct IScrollContentPresenter :
	IInspectable,
	impl_IScrollContentPresenter<IScrollContentPresenter>
{
	IScrollContentPresenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollContentPresenter>>(m_ptr); }
};

struct IScrollViewer :
	IInspectable,
	impl_IScrollViewer<IScrollViewer>
{
	IScrollViewer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollViewer>>(m_ptr); }
};

struct IScrollViewerStatics :
	IInspectable,
	impl_IScrollViewerStatics<IScrollViewerStatics>
{
	IScrollViewerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollViewerStatics>>(m_ptr); }
};

struct IScrollViewer2 :
	IInspectable,
	impl_IScrollViewer2<IScrollViewer2>
{
	IScrollViewer2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollViewer2>>(m_ptr); }
};

struct IScrollViewerStatics2 :
	IInspectable,
	impl_IScrollViewerStatics2<IScrollViewerStatics2>
{
	IScrollViewerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollViewerStatics2>>(m_ptr); }
};

struct IScrollViewerView :
	IInspectable,
	impl_IScrollViewerView<IScrollViewerView>
{
	IScrollViewerView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollViewerView>>(m_ptr); }
};

struct IScrollViewerViewChangedEventArgs :
	IInspectable,
	impl_IScrollViewerViewChangedEventArgs<IScrollViewerViewChangedEventArgs>
{
	IScrollViewerViewChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollViewerViewChangedEventArgs>>(m_ptr); }
};

struct IScrollViewerViewChangingEventArgs :
	IInspectable,
	impl_IScrollViewerViewChangingEventArgs<IScrollViewerViewChangingEventArgs>
{
	IScrollViewerViewChangingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollViewerViewChangingEventArgs>>(m_ptr); }
};

struct ISelectionChangedEventArgs :
	IInspectable,
	impl_ISelectionChangedEventArgs<ISelectionChangedEventArgs>
{
	ISelectionChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectionChangedEventArgs>>(m_ptr); }
};

struct ISelectionChangedEventArgsFactory :
	IInspectable,
	impl_ISelectionChangedEventArgsFactory<ISelectionChangedEventArgsFactory>
{
	ISelectionChangedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectionChangedEventArgsFactory>>(m_ptr); }
};

struct ISemanticZoom :
	IInspectable,
	impl_ISemanticZoom<ISemanticZoom>
{
	ISemanticZoom(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticZoom>>(m_ptr); }
};

struct ISemanticZoomStatics :
	IInspectable,
	impl_ISemanticZoomStatics<ISemanticZoomStatics>
{
	ISemanticZoomStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticZoomStatics>>(m_ptr); }
};

struct ISemanticZoomLocation :
	IInspectable,
	impl_ISemanticZoomLocation<ISemanticZoomLocation>
{
	ISemanticZoomLocation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticZoomLocation>>(m_ptr); }
};

struct ISemanticZoomViewChangedEventArgs :
	IInspectable,
	impl_ISemanticZoomViewChangedEventArgs<ISemanticZoomViewChangedEventArgs>
{
	ISemanticZoomViewChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticZoomViewChangedEventArgs>>(m_ptr); }
};

struct ISettingsFlyout :
	IInspectable,
	impl_ISettingsFlyout<ISettingsFlyout>
{
	ISettingsFlyout(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsFlyout>>(m_ptr); }
};

struct ISettingsFlyoutStatics :
	IInspectable,
	impl_ISettingsFlyoutStatics<ISettingsFlyoutStatics>
{
	ISettingsFlyoutStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsFlyoutStatics>>(m_ptr); }
};

struct ISettingsFlyoutFactory :
	IInspectable,
	impl_ISettingsFlyoutFactory<ISettingsFlyoutFactory>
{
	ISettingsFlyoutFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsFlyoutFactory>>(m_ptr); }
};

struct ISlider :
	IInspectable,
	impl_ISlider<ISlider>
{
	ISlider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISlider>>(m_ptr); }
};

struct ISliderStatics :
	IInspectable,
	impl_ISliderStatics<ISliderStatics>
{
	ISliderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISliderStatics>>(m_ptr); }
};

struct ISliderFactory :
	IInspectable,
	impl_ISliderFactory<ISliderFactory>
{
	ISliderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISliderFactory>>(m_ptr); }
};

struct ISlider2 :
	IInspectable,
	impl_ISlider2<ISlider2>
{
	ISlider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISlider2>>(m_ptr); }
};

struct ISliderStatics2 :
	IInspectable,
	impl_ISliderStatics2<ISliderStatics2>
{
	ISliderStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISliderStatics2>>(m_ptr); }
};

struct IStackPanel :
	IInspectable,
	impl_IStackPanel<IStackPanel>
{
	IStackPanel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStackPanel>>(m_ptr); }
};

struct IStackPanelStatics :
	IInspectable,
	impl_IStackPanelStatics<IStackPanelStatics>
{
	IStackPanelStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStackPanelStatics>>(m_ptr); }
};

struct IStackPanelFactory :
	IInspectable,
	impl_IStackPanelFactory<IStackPanelFactory>
{
	IStackPanelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStackPanelFactory>>(m_ptr); }
};

struct IStyleSelector :
	IInspectable,
	impl_IStyleSelector<IStyleSelector>
{
	IStyleSelector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStyleSelector>>(m_ptr); }
};

struct IStyleSelectorOverrides :
	IInspectable,
	impl_IStyleSelectorOverrides<IStyleSelectorOverrides>
{
	IStyleSelectorOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStyleSelectorOverrides>>(m_ptr); }
};

struct IStyleSelectorFactory :
	IInspectable,
	impl_IStyleSelectorFactory<IStyleSelectorFactory>
{
	IStyleSelectorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStyleSelectorFactory>>(m_ptr); }
};

struct ITextBlock :
	IInspectable,
	impl_ITextBlock<ITextBlock>
{
	ITextBlock(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBlock>>(m_ptr); }
};

struct ITextBlockStatics :
	IInspectable,
	impl_ITextBlockStatics<ITextBlockStatics>
{
	ITextBlockStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBlockStatics>>(m_ptr); }
};

struct ITextBlock2 :
	IInspectable,
	impl_ITextBlock2<ITextBlock2>
{
	ITextBlock2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBlock2>>(m_ptr); }
};

struct ITextBlockStatics2 :
	IInspectable,
	impl_ITextBlockStatics2<ITextBlockStatics2>
{
	ITextBlockStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBlockStatics2>>(m_ptr); }
};

struct ITextBox :
	IInspectable,
	impl_ITextBox<ITextBox>
{
	ITextBox(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBox>>(m_ptr); }
};

struct ITextBoxStatics :
	IInspectable,
	impl_ITextBoxStatics<ITextBoxStatics>
{
	ITextBoxStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBoxStatics>>(m_ptr); }
};

struct ITextBoxFactory :
	IInspectable,
	impl_ITextBoxFactory<ITextBoxFactory>
{
	ITextBoxFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBoxFactory>>(m_ptr); }
};

struct ITextBox2 :
	IInspectable,
	impl_ITextBox2<ITextBox2>
{
	ITextBox2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBox2>>(m_ptr); }
};

struct ITextBoxStatics2 :
	IInspectable,
	impl_ITextBoxStatics2<ITextBoxStatics2>
{
	ITextBoxStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextBoxStatics2>>(m_ptr); }
};

struct ITextChangedEventArgs :
	IInspectable,
	impl_ITextChangedEventArgs<ITextChangedEventArgs>
{
	ITextChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextChangedEventArgs>>(m_ptr); }
};

struct ITextControlPasteEventArgs :
	IInspectable,
	impl_ITextControlPasteEventArgs<ITextControlPasteEventArgs>
{
	ITextControlPasteEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextControlPasteEventArgs>>(m_ptr); }
};

struct IToggleSwitch :
	IInspectable,
	impl_IToggleSwitch<IToggleSwitch>
{
	IToggleSwitch(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleSwitch>>(m_ptr); }
};

struct IToggleSwitchOverrides :
	IInspectable,
	impl_IToggleSwitchOverrides<IToggleSwitchOverrides>
{
	IToggleSwitchOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleSwitchOverrides>>(m_ptr); }
};

struct IToggleSwitchStatics :
	IInspectable,
	impl_IToggleSwitchStatics<IToggleSwitchStatics>
{
	IToggleSwitchStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleSwitchStatics>>(m_ptr); }
};

struct IToolTip :
	IInspectable,
	impl_IToolTip<IToolTip>
{
	IToolTip(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToolTip>>(m_ptr); }
};

struct IToolTipStatics :
	IInspectable,
	impl_IToolTipStatics<IToolTipStatics>
{
	IToolTipStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToolTipStatics>>(m_ptr); }
};

struct IToolTipFactory :
	IInspectable,
	impl_IToolTipFactory<IToolTipFactory>
{
	IToolTipFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToolTipFactory>>(m_ptr); }
};

struct IToolTipService :
	IInspectable,
	impl_IToolTipService<IToolTipService>
{
	IToolTipService(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToolTipService>>(m_ptr); }
};

struct IToolTipServiceStatics :
	IInspectable,
	impl_IToolTipServiceStatics<IToolTipServiceStatics>
{
	IToolTipServiceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToolTipServiceStatics>>(m_ptr); }
};

struct IUIElementCollection :
	IInspectable,
	impl_IUIElementCollection<IUIElementCollection>
{
	IUIElementCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUIElementCollection>>(m_ptr); }
};

struct IUserControl :
	IInspectable,
	impl_IUserControl<IUserControl>
{
	IUserControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserControl>>(m_ptr); }
};

struct IUserControlStatics :
	IInspectable,
	impl_IUserControlStatics<IUserControlStatics>
{
	IUserControlStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserControlStatics>>(m_ptr); }
};

struct IUserControlFactory :
	IInspectable,
	impl_IUserControlFactory<IUserControlFactory>
{
	IUserControlFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserControlFactory>>(m_ptr); }
};

struct IVariableSizedWrapGrid :
	IInspectable,
	impl_IVariableSizedWrapGrid<IVariableSizedWrapGrid>
{
	IVariableSizedWrapGrid(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVariableSizedWrapGrid>>(m_ptr); }
};

struct IVariableSizedWrapGridStatics :
	IInspectable,
	impl_IVariableSizedWrapGridStatics<IVariableSizedWrapGridStatics>
{
	IVariableSizedWrapGridStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVariableSizedWrapGridStatics>>(m_ptr); }
};

struct IViewbox :
	IInspectable,
	impl_IViewbox<IViewbox>
{
	IViewbox(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IViewbox>>(m_ptr); }
};

struct IViewboxStatics :
	IInspectable,
	impl_IViewboxStatics<IViewboxStatics>
{
	IViewboxStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IViewboxStatics>>(m_ptr); }
};

struct IVirtualizingPanel :
	IInspectable,
	impl_IVirtualizingPanel<IVirtualizingPanel>
{
	IVirtualizingPanel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualizingPanel>>(m_ptr); }
};

struct IVirtualizingPanelOverrides :
	IInspectable,
	impl_IVirtualizingPanelOverrides<IVirtualizingPanelOverrides>
{
	IVirtualizingPanelOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualizingPanelOverrides>>(m_ptr); }
};

struct IVirtualizingPanelProtected :
	IInspectable,
	impl_IVirtualizingPanelProtected<IVirtualizingPanelProtected>
{
	IVirtualizingPanelProtected(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualizingPanelProtected>>(m_ptr); }
};

struct IVirtualizingPanelFactory :
	IInspectable,
	impl_IVirtualizingPanelFactory<IVirtualizingPanelFactory>
{
	IVirtualizingPanelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualizingPanelFactory>>(m_ptr); }
};

struct IVirtualizingStackPanel :
	IInspectable,
	impl_IVirtualizingStackPanel<IVirtualizingStackPanel>
{
	IVirtualizingStackPanel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualizingStackPanel>>(m_ptr); }
};

struct IVirtualizingStackPanelOverrides :
	IInspectable,
	impl_IVirtualizingStackPanelOverrides<IVirtualizingStackPanelOverrides>
{
	IVirtualizingStackPanelOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualizingStackPanelOverrides>>(m_ptr); }
};

struct IVirtualizingStackPanelStatics :
	IInspectable,
	impl_IVirtualizingStackPanelStatics<IVirtualizingStackPanelStatics>
{
	IVirtualizingStackPanelStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualizingStackPanelStatics>>(m_ptr); }
};

struct IAppBar :
	IInspectable,
	impl_IAppBar<IAppBar>
{
	IAppBar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBar>>(m_ptr); }
};

struct IAppBarOverrides :
	IInspectable,
	impl_IAppBarOverrides<IAppBarOverrides>
{
	IAppBarOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarOverrides>>(m_ptr); }
};

struct IAppBarStatics :
	IInspectable,
	impl_IAppBarStatics<IAppBarStatics>
{
	IAppBarStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarStatics>>(m_ptr); }
};

struct IAppBarFactory :
	IInspectable,
	impl_IAppBarFactory<IAppBarFactory>
{
	IAppBarFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarFactory>>(m_ptr); }
};

struct IAppBarButton :
	IInspectable,
	impl_IAppBarButton<IAppBarButton>
{
	IAppBarButton(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarButton>>(m_ptr); }
};

struct IAppBarButtonStatics :
	IInspectable,
	impl_IAppBarButtonStatics<IAppBarButtonStatics>
{
	IAppBarButtonStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarButtonStatics>>(m_ptr); }
};

struct IAppBarButtonFactory :
	IInspectable,
	impl_IAppBarButtonFactory<IAppBarButtonFactory>
{
	IAppBarButtonFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarButtonFactory>>(m_ptr); }
};

struct IAppBarSeparator :
	IInspectable,
	impl_IAppBarSeparator<IAppBarSeparator>
{
	IAppBarSeparator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarSeparator>>(m_ptr); }
};

struct IAppBarSeparatorStatics :
	IInspectable,
	impl_IAppBarSeparatorStatics<IAppBarSeparatorStatics>
{
	IAppBarSeparatorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarSeparatorStatics>>(m_ptr); }
};

struct IAppBarSeparatorFactory :
	IInspectable,
	impl_IAppBarSeparatorFactory<IAppBarSeparatorFactory>
{
	IAppBarSeparatorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarSeparatorFactory>>(m_ptr); }
};

struct IAppBarToggleButton :
	IInspectable,
	impl_IAppBarToggleButton<IAppBarToggleButton>
{
	IAppBarToggleButton(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarToggleButton>>(m_ptr); }
};

struct IAppBarToggleButtonStatics :
	IInspectable,
	impl_IAppBarToggleButtonStatics<IAppBarToggleButtonStatics>
{
	IAppBarToggleButtonStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarToggleButtonStatics>>(m_ptr); }
};

struct IAppBarToggleButtonFactory :
	IInspectable,
	impl_IAppBarToggleButtonFactory<IAppBarToggleButtonFactory>
{
	IAppBarToggleButtonFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppBarToggleButtonFactory>>(m_ptr); }
};

struct IBitmapIcon :
	IInspectable,
	impl_IBitmapIcon<IBitmapIcon>
{
	IBitmapIcon(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapIcon>>(m_ptr); }
};

struct IBitmapIconStatics :
	IInspectable,
	impl_IBitmapIconStatics<IBitmapIconStatics>
{
	IBitmapIconStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapIconStatics>>(m_ptr); }
};

struct IBitmapIconFactory :
	IInspectable,
	impl_IBitmapIconFactory<IBitmapIconFactory>
{
	IBitmapIconFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapIconFactory>>(m_ptr); }
};

struct ICommandBar :
	IInspectable,
	impl_ICommandBar<ICommandBar>
{
	ICommandBar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICommandBar>>(m_ptr); }
};

struct ICommandBarElement :
	IInspectable,
	impl_ICommandBarElement<ICommandBarElement>
{
	ICommandBarElement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICommandBarElement>>(m_ptr); }
};

struct ICommandBarStatics :
	IInspectable,
	impl_ICommandBarStatics<ICommandBarStatics>
{
	ICommandBarStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICommandBarStatics>>(m_ptr); }
};

struct ICommandBarFactory :
	IInspectable,
	impl_ICommandBarFactory<ICommandBarFactory>
{
	ICommandBarFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICommandBarFactory>>(m_ptr); }
};

struct IFlyout :
	IInspectable,
	impl_IFlyout<IFlyout>
{
	IFlyout(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyout>>(m_ptr); }
};

struct IFlyoutStatics :
	IInspectable,
	impl_IFlyoutStatics<IFlyoutStatics>
{
	IFlyoutStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutStatics>>(m_ptr); }
};

struct IFlyoutFactory :
	IInspectable,
	impl_IFlyoutFactory<IFlyoutFactory>
{
	IFlyoutFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutFactory>>(m_ptr); }
};

struct IFlyoutPresenter :
	IInspectable,
	impl_IFlyoutPresenter<IFlyoutPresenter>
{
	IFlyoutPresenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutPresenter>>(m_ptr); }
};

struct IFlyoutPresenterFactory :
	IInspectable,
	impl_IFlyoutPresenterFactory<IFlyoutPresenterFactory>
{
	IFlyoutPresenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutPresenterFactory>>(m_ptr); }
};

struct IFontIcon :
	IInspectable,
	impl_IFontIcon<IFontIcon>
{
	IFontIcon(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFontIcon>>(m_ptr); }
};

struct IFontIconStatics :
	IInspectable,
	impl_IFontIconStatics<IFontIconStatics>
{
	IFontIconStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFontIconStatics>>(m_ptr); }
};

struct IFontIconFactory :
	IInspectable,
	impl_IFontIconFactory<IFontIconFactory>
{
	IFontIconFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFontIconFactory>>(m_ptr); }
};

struct IFrame :
	IInspectable,
	impl_IFrame<IFrame>
{
	IFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrame>>(m_ptr); }
};

struct IFrameStatics :
	IInspectable,
	impl_IFrameStatics<IFrameStatics>
{
	IFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameStatics>>(m_ptr); }
};

struct IFrameFactory :
	IInspectable,
	impl_IFrameFactory<IFrameFactory>
{
	IFrameFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameFactory>>(m_ptr); }
};

struct IFrame2 :
	IInspectable,
	impl_IFrame2<IFrame2>
{
	IFrame2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrame2>>(m_ptr); }
};

struct IFrameStatics2 :
	IInspectable,
	impl_IFrameStatics2<IFrameStatics2>
{
	IFrameStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameStatics2>>(m_ptr); }
};

struct IGridViewHeaderItem :
	IInspectable,
	impl_IGridViewHeaderItem<IGridViewHeaderItem>
{
	IGridViewHeaderItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewHeaderItem>>(m_ptr); }
};

struct IGridViewHeaderItemFactory :
	IInspectable,
	impl_IGridViewHeaderItemFactory<IGridViewHeaderItemFactory>
{
	IGridViewHeaderItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewHeaderItemFactory>>(m_ptr); }
};

struct IHub :
	IInspectable,
	impl_IHub<IHub>
{
	IHub(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHub>>(m_ptr); }
};

struct IHubStatics :
	IInspectable,
	impl_IHubStatics<IHubStatics>
{
	IHubStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubStatics>>(m_ptr); }
};

struct IHubFactory :
	IInspectable,
	impl_IHubFactory<IHubFactory>
{
	IHubFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubFactory>>(m_ptr); }
};

struct IHubSection :
	IInspectable,
	impl_IHubSection<IHubSection>
{
	IHubSection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubSection>>(m_ptr); }
};

struct IHubSectionStatics :
	IInspectable,
	impl_IHubSectionStatics<IHubSectionStatics>
{
	IHubSectionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubSectionStatics>>(m_ptr); }
};

struct IHubSectionFactory :
	IInspectable,
	impl_IHubSectionFactory<IHubSectionFactory>
{
	IHubSectionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubSectionFactory>>(m_ptr); }
};

struct IHubSectionHeaderClickEventArgs :
	IInspectable,
	impl_IHubSectionHeaderClickEventArgs<IHubSectionHeaderClickEventArgs>
{
	IHubSectionHeaderClickEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHubSectionHeaderClickEventArgs>>(m_ptr); }
};

struct IIconElement :
	IInspectable,
	impl_IIconElement<IIconElement>
{
	IIconElement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIconElement>>(m_ptr); }
};

struct IIconElementStatics :
	IInspectable,
	impl_IIconElementStatics<IIconElementStatics>
{
	IIconElementStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIconElementStatics>>(m_ptr); }
};

struct IIconElementFactory :
	IInspectable,
	impl_IIconElementFactory<IIconElementFactory>
{
	IIconElementFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIconElementFactory>>(m_ptr); }
};

struct IItemsStackPanel :
	IInspectable,
	impl_IItemsStackPanel<IItemsStackPanel>
{
	IItemsStackPanel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsStackPanel>>(m_ptr); }
};

struct IItemsStackPanelStatics :
	IInspectable,
	impl_IItemsStackPanelStatics<IItemsStackPanelStatics>
{
	IItemsStackPanelStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsStackPanelStatics>>(m_ptr); }
};

struct IItemsWrapGrid :
	IInspectable,
	impl_IItemsWrapGrid<IItemsWrapGrid>
{
	IItemsWrapGrid(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsWrapGrid>>(m_ptr); }
};

struct IItemsWrapGridStatics :
	IInspectable,
	impl_IItemsWrapGridStatics<IItemsWrapGridStatics>
{
	IItemsWrapGridStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsWrapGridStatics>>(m_ptr); }
};

struct IListViewBaseHeaderItem :
	IInspectable,
	impl_IListViewBaseHeaderItem<IListViewBaseHeaderItem>
{
	IListViewBaseHeaderItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBaseHeaderItem>>(m_ptr); }
};

struct IListViewBaseHeaderItemFactory :
	IInspectable,
	impl_IListViewBaseHeaderItemFactory<IListViewBaseHeaderItemFactory>
{
	IListViewBaseHeaderItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewBaseHeaderItemFactory>>(m_ptr); }
};

struct IListViewHeaderItem :
	IInspectable,
	impl_IListViewHeaderItem<IListViewHeaderItem>
{
	IListViewHeaderItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewHeaderItem>>(m_ptr); }
};

struct IListViewHeaderItemFactory :
	IInspectable,
	impl_IListViewHeaderItemFactory<IListViewHeaderItemFactory>
{
	IListViewHeaderItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewHeaderItemFactory>>(m_ptr); }
};

struct IMenuFlyout :
	IInspectable,
	impl_IMenuFlyout<IMenuFlyout>
{
	IMenuFlyout(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyout>>(m_ptr); }
};

struct IMenuFlyoutStatics :
	IInspectable,
	impl_IMenuFlyoutStatics<IMenuFlyoutStatics>
{
	IMenuFlyoutStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutStatics>>(m_ptr); }
};

struct IMenuFlyoutFactory :
	IInspectable,
	impl_IMenuFlyoutFactory<IMenuFlyoutFactory>
{
	IMenuFlyoutFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutFactory>>(m_ptr); }
};

struct IMenuFlyoutItem :
	IInspectable,
	impl_IMenuFlyoutItem<IMenuFlyoutItem>
{
	IMenuFlyoutItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutItem>>(m_ptr); }
};

struct IMenuFlyoutItemStatics :
	IInspectable,
	impl_IMenuFlyoutItemStatics<IMenuFlyoutItemStatics>
{
	IMenuFlyoutItemStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutItemStatics>>(m_ptr); }
};

struct IMenuFlyoutItemFactory :
	IInspectable,
	impl_IMenuFlyoutItemFactory<IMenuFlyoutItemFactory>
{
	IMenuFlyoutItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutItemFactory>>(m_ptr); }
};

struct IMenuFlyoutItemBase :
	IInspectable,
	impl_IMenuFlyoutItemBase<IMenuFlyoutItemBase>
{
	IMenuFlyoutItemBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutItemBase>>(m_ptr); }
};

struct IMenuFlyoutItemBaseFactory :
	IInspectable,
	impl_IMenuFlyoutItemBaseFactory<IMenuFlyoutItemBaseFactory>
{
	IMenuFlyoutItemBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutItemBaseFactory>>(m_ptr); }
};

struct IMenuFlyoutPresenter :
	IInspectable,
	impl_IMenuFlyoutPresenter<IMenuFlyoutPresenter>
{
	IMenuFlyoutPresenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutPresenter>>(m_ptr); }
};

struct IMenuFlyoutPresenterFactory :
	IInspectable,
	impl_IMenuFlyoutPresenterFactory<IMenuFlyoutPresenterFactory>
{
	IMenuFlyoutPresenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutPresenterFactory>>(m_ptr); }
};

struct IMenuFlyoutSeparator :
	IInspectable,
	impl_IMenuFlyoutSeparator<IMenuFlyoutSeparator>
{
	IMenuFlyoutSeparator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutSeparator>>(m_ptr); }
};

struct IMenuFlyoutSeparatorFactory :
	IInspectable,
	impl_IMenuFlyoutSeparatorFactory<IMenuFlyoutSeparatorFactory>
{
	IMenuFlyoutSeparatorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMenuFlyoutSeparatorFactory>>(m_ptr); }
};

struct IPage :
	IInspectable,
	impl_IPage<IPage>
{
	IPage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPage>>(m_ptr); }
};

struct IPageOverrides :
	IInspectable,
	impl_IPageOverrides<IPageOverrides>
{
	IPageOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPageOverrides>>(m_ptr); }
};

struct IPageStatics :
	IInspectable,
	impl_IPageStatics<IPageStatics>
{
	IPageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPageStatics>>(m_ptr); }
};

struct IPageFactory :
	IInspectable,
	impl_IPageFactory<IPageFactory>
{
	IPageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPageFactory>>(m_ptr); }
};

struct IPathIcon :
	IInspectable,
	impl_IPathIcon<IPathIcon>
{
	IPathIcon(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathIcon>>(m_ptr); }
};

struct IPathIconStatics :
	IInspectable,
	impl_IPathIconStatics<IPathIconStatics>
{
	IPathIconStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathIconStatics>>(m_ptr); }
};

struct IPathIconFactory :
	IInspectable,
	impl_IPathIconFactory<IPathIconFactory>
{
	IPathIconFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathIconFactory>>(m_ptr); }
};

struct ISearchBox :
	IInspectable,
	impl_ISearchBox<ISearchBox>
{
	ISearchBox(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchBox>>(m_ptr); }
};

struct ISearchBoxStatics :
	IInspectable,
	impl_ISearchBoxStatics<ISearchBoxStatics>
{
	ISearchBoxStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchBoxStatics>>(m_ptr); }
};

struct ISearchBoxFactory :
	IInspectable,
	impl_ISearchBoxFactory<ISearchBoxFactory>
{
	ISearchBoxFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchBoxFactory>>(m_ptr); }
};

struct ISearchBoxQueryChangedEventArgs :
	IInspectable,
	impl_ISearchBoxQueryChangedEventArgs<ISearchBoxQueryChangedEventArgs>
{
	ISearchBoxQueryChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchBoxQueryChangedEventArgs>>(m_ptr); }
};

struct ISearchBoxQuerySubmittedEventArgs :
	IInspectable,
	impl_ISearchBoxQuerySubmittedEventArgs<ISearchBoxQuerySubmittedEventArgs>
{
	ISearchBoxQuerySubmittedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchBoxQuerySubmittedEventArgs>>(m_ptr); }
};

struct ISearchBoxResultSuggestionChosenEventArgs :
	IInspectable,
	impl_ISearchBoxResultSuggestionChosenEventArgs<ISearchBoxResultSuggestionChosenEventArgs>
{
	ISearchBoxResultSuggestionChosenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchBoxResultSuggestionChosenEventArgs>>(m_ptr); }
};

struct ISearchBoxSuggestionsRequestedEventArgs :
	IInspectable,
	impl_ISearchBoxSuggestionsRequestedEventArgs<ISearchBoxSuggestionsRequestedEventArgs>
{
	ISearchBoxSuggestionsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchBoxSuggestionsRequestedEventArgs>>(m_ptr); }
};

struct ISectionsInViewChangedEventArgs :
	IInspectable,
	impl_ISectionsInViewChangedEventArgs<ISectionsInViewChangedEventArgs>
{
	ISectionsInViewChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISectionsInViewChangedEventArgs>>(m_ptr); }
};

struct ISectionsInViewChangedEventArgsFactory :
	IInspectable,
	impl_ISectionsInViewChangedEventArgsFactory<ISectionsInViewChangedEventArgsFactory>
{
	ISectionsInViewChangedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISectionsInViewChangedEventArgsFactory>>(m_ptr); }
};

struct ISwapChainBackgroundPanel :
	IInspectable,
	impl_ISwapChainBackgroundPanel<ISwapChainBackgroundPanel>
{
	ISwapChainBackgroundPanel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwapChainBackgroundPanel>>(m_ptr); }
};

struct ISwapChainBackgroundPanelFactory :
	IInspectable,
	impl_ISwapChainBackgroundPanelFactory<ISwapChainBackgroundPanelFactory>
{
	ISwapChainBackgroundPanelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwapChainBackgroundPanelFactory>>(m_ptr); }
};

struct ISwapChainBackgroundPanel2 :
	IInspectable,
	impl_ISwapChainBackgroundPanel2<ISwapChainBackgroundPanel2>
{
	ISwapChainBackgroundPanel2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwapChainBackgroundPanel2>>(m_ptr); }
};

struct ISwapChainPanel :
	IInspectable,
	impl_ISwapChainPanel<ISwapChainPanel>
{
	ISwapChainPanel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwapChainPanel>>(m_ptr); }
};

struct ISwapChainPanelStatics :
	IInspectable,
	impl_ISwapChainPanelStatics<ISwapChainPanelStatics>
{
	ISwapChainPanelStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwapChainPanelStatics>>(m_ptr); }
};

struct ISwapChainPanelFactory :
	IInspectable,
	impl_ISwapChainPanelFactory<ISwapChainPanelFactory>
{
	ISwapChainPanelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwapChainPanelFactory>>(m_ptr); }
};

struct ISymbolIcon :
	IInspectable,
	impl_ISymbolIcon<ISymbolIcon>
{
	ISymbolIcon(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISymbolIcon>>(m_ptr); }
};

struct ISymbolIconStatics :
	IInspectable,
	impl_ISymbolIconStatics<ISymbolIconStatics>
{
	ISymbolIconStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISymbolIconStatics>>(m_ptr); }
};

struct ISymbolIconFactory :
	IInspectable,
	impl_ISymbolIconFactory<ISymbolIconFactory>
{
	ISymbolIconFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISymbolIconFactory>>(m_ptr); }
};

struct ITimePicker :
	IInspectable,
	impl_ITimePicker<ITimePicker>
{
	ITimePicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimePicker>>(m_ptr); }
};

struct ITimePickerStatics :
	IInspectable,
	impl_ITimePickerStatics<ITimePickerStatics>
{
	ITimePickerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimePickerStatics>>(m_ptr); }
};

struct ITimePickerFactory :
	IInspectable,
	impl_ITimePickerFactory<ITimePickerFactory>
{
	ITimePickerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimePickerFactory>>(m_ptr); }
};

struct ITimePickerValueChangedEventArgs :
	IInspectable,
	impl_ITimePickerValueChangedEventArgs<ITimePickerValueChangedEventArgs>
{
	ITimePickerValueChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimePickerValueChangedEventArgs>>(m_ptr); }
};

struct IToggleMenuFlyoutItem :
	IInspectable,
	impl_IToggleMenuFlyoutItem<IToggleMenuFlyoutItem>
{
	IToggleMenuFlyoutItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleMenuFlyoutItem>>(m_ptr); }
};

struct IToggleMenuFlyoutItemStatics :
	IInspectable,
	impl_IToggleMenuFlyoutItemStatics<IToggleMenuFlyoutItemStatics>
{
	IToggleMenuFlyoutItemStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleMenuFlyoutItemStatics>>(m_ptr); }
};

struct IToggleMenuFlyoutItemFactory :
	IInspectable,
	impl_IToggleMenuFlyoutItemFactory<IToggleMenuFlyoutItemFactory>
{
	IToggleMenuFlyoutItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleMenuFlyoutItemFactory>>(m_ptr); }
};

struct IWebView :
	IInspectable,
	impl_IWebView<IWebView>
{
	IWebView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebView>>(m_ptr); }
};

struct IWebViewStatics :
	IInspectable,
	impl_IWebViewStatics<IWebViewStatics>
{
	IWebViewStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewStatics>>(m_ptr); }
};

struct IWebView2 :
	IInspectable,
	impl_IWebView2<IWebView2>
{
	IWebView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebView2>>(m_ptr); }
};

struct IWebViewStatics2 :
	IInspectable,
	impl_IWebViewStatics2<IWebViewStatics2>
{
	IWebViewStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewStatics2>>(m_ptr); }
};

struct IWebViewBrush :
	IInspectable,
	impl_IWebViewBrush<IWebViewBrush>
{
	IWebViewBrush(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewBrush>>(m_ptr); }
};

struct IWebViewBrushStatics :
	IInspectable,
	impl_IWebViewBrushStatics<IWebViewBrushStatics>
{
	IWebViewBrushStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewBrushStatics>>(m_ptr); }
};

struct IWebViewContentLoadingEventArgs :
	IInspectable,
	impl_IWebViewContentLoadingEventArgs<IWebViewContentLoadingEventArgs>
{
	IWebViewContentLoadingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewContentLoadingEventArgs>>(m_ptr); }
};

struct IWebViewDOMContentLoadedEventArgs :
	IInspectable,
	impl_IWebViewDOMContentLoadedEventArgs<IWebViewDOMContentLoadedEventArgs>
{
	IWebViewDOMContentLoadedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewDOMContentLoadedEventArgs>>(m_ptr); }
};

struct IWebViewLongRunningScriptDetectedEventArgs :
	IInspectable,
	impl_IWebViewLongRunningScriptDetectedEventArgs<IWebViewLongRunningScriptDetectedEventArgs>
{
	IWebViewLongRunningScriptDetectedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewLongRunningScriptDetectedEventArgs>>(m_ptr); }
};

struct IWebViewNavigationCompletedEventArgs :
	IInspectable,
	impl_IWebViewNavigationCompletedEventArgs<IWebViewNavigationCompletedEventArgs>
{
	IWebViewNavigationCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewNavigationCompletedEventArgs>>(m_ptr); }
};

struct IWebViewNavigationFailedEventArgs :
	IInspectable,
	impl_IWebViewNavigationFailedEventArgs<IWebViewNavigationFailedEventArgs>
{
	IWebViewNavigationFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewNavigationFailedEventArgs>>(m_ptr); }
};

struct IWebViewNavigationStartingEventArgs :
	IInspectable,
	impl_IWebViewNavigationStartingEventArgs<IWebViewNavigationStartingEventArgs>
{
	IWebViewNavigationStartingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewNavigationStartingEventArgs>>(m_ptr); }
};

struct IWebViewUnviewableContentIdentifiedEventArgs :
	IInspectable,
	impl_IWebViewUnviewableContentIdentifiedEventArgs<IWebViewUnviewableContentIdentifiedEventArgs>
{
	IWebViewUnviewableContentIdentifiedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebViewUnviewableContentIdentifiedEventArgs>>(m_ptr); }
};

struct IWrapGrid :
	IInspectable,
	impl_IWrapGrid<IWrapGrid>
{
	IWrapGrid(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWrapGrid>>(m_ptr); }
};

struct IWrapGridStatics :
	IInspectable,
	impl_IWrapGridStatics<IWrapGridStatics>
{
	IWrapGridStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWrapGridStatics>>(m_ptr); }
};

struct IControl :
	IInspectable,
	impl_IControl<IControl>
{
	IControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControl>>(m_ptr); }
};

struct IControlOverrides :
	IInspectable,
	impl_IControlOverrides<IControlOverrides>
{
	IControlOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlOverrides>>(m_ptr); }
};

struct IControlProtected :
	IInspectable,
	impl_IControlProtected<IControlProtected>
{
	IControlProtected(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlProtected>>(m_ptr); }
};

struct IControlStatics :
	IInspectable,
	impl_IControlStatics<IControlStatics>
{
	IControlStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlStatics>>(m_ptr); }
};

struct IControlFactory :
	IInspectable,
	impl_IControlFactory<IControlFactory>
{
	IControlFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlFactory>>(m_ptr); }
};

struct IControlTemplate :
	IInspectable,
	impl_IControlTemplate<IControlTemplate>
{
	IControlTemplate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlTemplate>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Controls { namespace Primitives {

struct IDragCompletedEventHandler :
	IUnknown,
	impl_IDragCompletedEventHandler<IDragCompletedEventHandler>
{
	IDragCompletedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragCompletedEventHandler>>(m_ptr); }
};

struct IDragDeltaEventHandler :
	IUnknown,
	impl_IDragDeltaEventHandler<IDragDeltaEventHandler>
{
	IDragDeltaEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragDeltaEventHandler>>(m_ptr); }
};

struct IDragStartedEventHandler :
	IUnknown,
	impl_IDragStartedEventHandler<IDragStartedEventHandler>
{
	IDragStartedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragStartedEventHandler>>(m_ptr); }
};

struct IItemsChangedEventHandler :
	IUnknown,
	impl_IItemsChangedEventHandler<IItemsChangedEventHandler>
{
	IItemsChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsChangedEventHandler>>(m_ptr); }
};

struct IRangeBaseValueChangedEventHandler :
	IUnknown,
	impl_IRangeBaseValueChangedEventHandler<IRangeBaseValueChangedEventHandler>
{
	IRangeBaseValueChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeBaseValueChangedEventHandler>>(m_ptr); }
};

struct IScrollEventHandler :
	IUnknown,
	impl_IScrollEventHandler<IScrollEventHandler>
{
	IScrollEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollEventHandler>>(m_ptr); }
};

struct IButtonBase :
	IInspectable,
	impl_IButtonBase<IButtonBase>
{
	IButtonBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonBase>>(m_ptr); }
};

struct IButtonBaseStatics :
	IInspectable,
	impl_IButtonBaseStatics<IButtonBaseStatics>
{
	IButtonBaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonBaseStatics>>(m_ptr); }
};

struct IButtonBaseFactory :
	IInspectable,
	impl_IButtonBaseFactory<IButtonBaseFactory>
{
	IButtonBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IButtonBaseFactory>>(m_ptr); }
};

struct ICarouselPanel :
	IInspectable,
	impl_ICarouselPanel<ICarouselPanel>
{
	ICarouselPanel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICarouselPanel>>(m_ptr); }
};

struct ICarouselPanelFactory :
	IInspectable,
	impl_ICarouselPanelFactory<ICarouselPanelFactory>
{
	ICarouselPanelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICarouselPanelFactory>>(m_ptr); }
};

struct IComboBoxTemplateSettings :
	IInspectable,
	impl_IComboBoxTemplateSettings<IComboBoxTemplateSettings>
{
	IComboBoxTemplateSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComboBoxTemplateSettings>>(m_ptr); }
};

struct IDragCompletedEventArgs :
	IInspectable,
	impl_IDragCompletedEventArgs<IDragCompletedEventArgs>
{
	IDragCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragCompletedEventArgs>>(m_ptr); }
};

struct IDragCompletedEventArgsFactory :
	IInspectable,
	impl_IDragCompletedEventArgsFactory<IDragCompletedEventArgsFactory>
{
	IDragCompletedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragCompletedEventArgsFactory>>(m_ptr); }
};

struct IDragDeltaEventArgs :
	IInspectable,
	impl_IDragDeltaEventArgs<IDragDeltaEventArgs>
{
	IDragDeltaEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragDeltaEventArgs>>(m_ptr); }
};

struct IDragDeltaEventArgsFactory :
	IInspectable,
	impl_IDragDeltaEventArgsFactory<IDragDeltaEventArgsFactory>
{
	IDragDeltaEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragDeltaEventArgsFactory>>(m_ptr); }
};

struct IDragStartedEventArgs :
	IInspectable,
	impl_IDragStartedEventArgs<IDragStartedEventArgs>
{
	IDragStartedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragStartedEventArgs>>(m_ptr); }
};

struct IDragStartedEventArgsFactory :
	IInspectable,
	impl_IDragStartedEventArgsFactory<IDragStartedEventArgsFactory>
{
	IDragStartedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragStartedEventArgsFactory>>(m_ptr); }
};

struct IFlyoutBase :
	IInspectable,
	impl_IFlyoutBase<IFlyoutBase>
{
	IFlyoutBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutBase>>(m_ptr); }
};

struct IFlyoutBaseOverrides :
	IInspectable,
	impl_IFlyoutBaseOverrides<IFlyoutBaseOverrides>
{
	IFlyoutBaseOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutBaseOverrides>>(m_ptr); }
};

struct IFlyoutBaseStatics :
	IInspectable,
	impl_IFlyoutBaseStatics<IFlyoutBaseStatics>
{
	IFlyoutBaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutBaseStatics>>(m_ptr); }
};

struct IFlyoutBaseFactory :
	IInspectable,
	impl_IFlyoutBaseFactory<IFlyoutBaseFactory>
{
	IFlyoutBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlyoutBaseFactory>>(m_ptr); }
};

struct IGridViewItemTemplateSettings :
	IInspectable,
	impl_IGridViewItemTemplateSettings<IGridViewItemTemplateSettings>
{
	IGridViewItemTemplateSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItemTemplateSettings>>(m_ptr); }
};

struct IScrollSnapPointsInfo :
	IInspectable,
	impl_IScrollSnapPointsInfo<IScrollSnapPointsInfo>
{
	IScrollSnapPointsInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollSnapPointsInfo>>(m_ptr); }
};

struct IItemsChangedEventArgs :
	IInspectable,
	impl_IItemsChangedEventArgs<IItemsChangedEventArgs>
{
	IItemsChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemsChangedEventArgs>>(m_ptr); }
};

struct IListViewItemTemplateSettings :
	IInspectable,
	impl_IListViewItemTemplateSettings<IListViewItemTemplateSettings>
{
	IListViewItemTemplateSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItemTemplateSettings>>(m_ptr); }
};

struct IOrientedVirtualizingPanel :
	IInspectable,
	impl_IOrientedVirtualizingPanel<IOrientedVirtualizingPanel>
{
	IOrientedVirtualizingPanel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientedVirtualizingPanel>>(m_ptr); }
};

struct IOrientedVirtualizingPanelFactory :
	IInspectable,
	impl_IOrientedVirtualizingPanelFactory<IOrientedVirtualizingPanelFactory>
{
	IOrientedVirtualizingPanelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientedVirtualizingPanelFactory>>(m_ptr); }
};

struct IPopup :
	IInspectable,
	impl_IPopup<IPopup>
{
	IPopup(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopup>>(m_ptr); }
};

struct IPopupStatics :
	IInspectable,
	impl_IPopupStatics<IPopupStatics>
{
	IPopupStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopupStatics>>(m_ptr); }
};

struct IProgressBarTemplateSettings :
	IInspectable,
	impl_IProgressBarTemplateSettings<IProgressBarTemplateSettings>
{
	IProgressBarTemplateSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressBarTemplateSettings>>(m_ptr); }
};

struct IProgressRingTemplateSettings :
	IInspectable,
	impl_IProgressRingTemplateSettings<IProgressRingTemplateSettings>
{
	IProgressRingTemplateSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProgressRingTemplateSettings>>(m_ptr); }
};

struct IRangeBase :
	IInspectable,
	impl_IRangeBase<IRangeBase>
{
	IRangeBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeBase>>(m_ptr); }
};

struct IRangeBaseOverrides :
	IInspectable,
	impl_IRangeBaseOverrides<IRangeBaseOverrides>
{
	IRangeBaseOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeBaseOverrides>>(m_ptr); }
};

struct IRangeBaseStatics :
	IInspectable,
	impl_IRangeBaseStatics<IRangeBaseStatics>
{
	IRangeBaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeBaseStatics>>(m_ptr); }
};

struct IRangeBaseFactory :
	IInspectable,
	impl_IRangeBaseFactory<IRangeBaseFactory>
{
	IRangeBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeBaseFactory>>(m_ptr); }
};

struct IRangeBaseValueChangedEventArgs :
	IInspectable,
	impl_IRangeBaseValueChangedEventArgs<IRangeBaseValueChangedEventArgs>
{
	IRangeBaseValueChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRangeBaseValueChangedEventArgs>>(m_ptr); }
};

struct IRepeatButton :
	IInspectable,
	impl_IRepeatButton<IRepeatButton>
{
	IRepeatButton(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRepeatButton>>(m_ptr); }
};

struct IRepeatButtonStatics :
	IInspectable,
	impl_IRepeatButtonStatics<IRepeatButtonStatics>
{
	IRepeatButtonStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRepeatButtonStatics>>(m_ptr); }
};

struct IScrollBar :
	IInspectable,
	impl_IScrollBar<IScrollBar>
{
	IScrollBar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollBar>>(m_ptr); }
};

struct IScrollBarStatics :
	IInspectable,
	impl_IScrollBarStatics<IScrollBarStatics>
{
	IScrollBarStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollBarStatics>>(m_ptr); }
};

struct IScrollEventArgs :
	IInspectable,
	impl_IScrollEventArgs<IScrollEventArgs>
{
	IScrollEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScrollEventArgs>>(m_ptr); }
};

struct ISelector :
	IInspectable,
	impl_ISelector<ISelector>
{
	ISelector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelector>>(m_ptr); }
};

struct ISelectorStatics :
	IInspectable,
	impl_ISelectorStatics<ISelectorStatics>
{
	ISelectorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectorStatics>>(m_ptr); }
};

struct ISelectorFactory :
	IInspectable,
	impl_ISelectorFactory<ISelectorFactory>
{
	ISelectorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectorFactory>>(m_ptr); }
};

struct ISelectorItem :
	IInspectable,
	impl_ISelectorItem<ISelectorItem>
{
	ISelectorItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectorItem>>(m_ptr); }
};

struct ISelectorItemStatics :
	IInspectable,
	impl_ISelectorItemStatics<ISelectorItemStatics>
{
	ISelectorItemStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectorItemStatics>>(m_ptr); }
};

struct ISelectorItemFactory :
	IInspectable,
	impl_ISelectorItemFactory<ISelectorItemFactory>
{
	ISelectorItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectorItemFactory>>(m_ptr); }
};

struct ISettingsFlyoutTemplateSettings :
	IInspectable,
	impl_ISettingsFlyoutTemplateSettings<ISettingsFlyoutTemplateSettings>
{
	ISettingsFlyoutTemplateSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsFlyoutTemplateSettings>>(m_ptr); }
};

struct IThumb :
	IInspectable,
	impl_IThumb<IThumb>
{
	IThumb(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThumb>>(m_ptr); }
};

struct IThumbStatics :
	IInspectable,
	impl_IThumbStatics<IThumbStatics>
{
	IThumbStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThumbStatics>>(m_ptr); }
};

struct ITickBar :
	IInspectable,
	impl_ITickBar<ITickBar>
{
	ITickBar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITickBar>>(m_ptr); }
};

struct ITickBarStatics :
	IInspectable,
	impl_ITickBarStatics<ITickBarStatics>
{
	ITickBarStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITickBarStatics>>(m_ptr); }
};

struct IToggleButton :
	IInspectable,
	impl_IToggleButton<IToggleButton>
{
	IToggleButton(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleButton>>(m_ptr); }
};

struct IToggleButtonOverrides :
	IInspectable,
	impl_IToggleButtonOverrides<IToggleButtonOverrides>
{
	IToggleButtonOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleButtonOverrides>>(m_ptr); }
};

struct IToggleButtonStatics :
	IInspectable,
	impl_IToggleButtonStatics<IToggleButtonStatics>
{
	IToggleButtonStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleButtonStatics>>(m_ptr); }
};

struct IToggleButtonFactory :
	IInspectable,
	impl_IToggleButtonFactory<IToggleButtonFactory>
{
	IToggleButtonFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleButtonFactory>>(m_ptr); }
};

struct IToggleSwitchTemplateSettings :
	IInspectable,
	impl_IToggleSwitchTemplateSettings<IToggleSwitchTemplateSettings>
{
	IToggleSwitchTemplateSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToggleSwitchTemplateSettings>>(m_ptr); }
};

struct IToolTipTemplateSettings :
	IInspectable,
	impl_IToolTipTemplateSettings<IToolTipTemplateSettings>
{
	IToolTipTemplateSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToolTipTemplateSettings>>(m_ptr); }
};

struct IGridViewItemPresenter :
	IInspectable,
	impl_IGridViewItemPresenter<IGridViewItemPresenter>
{
	IGridViewItemPresenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItemPresenter>>(m_ptr); }
};

struct IGridViewItemPresenterStatics :
	IInspectable,
	impl_IGridViewItemPresenterStatics<IGridViewItemPresenterStatics>
{
	IGridViewItemPresenterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItemPresenterStatics>>(m_ptr); }
};

struct IGridViewItemPresenterFactory :
	IInspectable,
	impl_IGridViewItemPresenterFactory<IGridViewItemPresenterFactory>
{
	IGridViewItemPresenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGridViewItemPresenterFactory>>(m_ptr); }
};

struct IListViewItemPresenter :
	IInspectable,
	impl_IListViewItemPresenter<IListViewItemPresenter>
{
	IListViewItemPresenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItemPresenter>>(m_ptr); }
};

struct IListViewItemPresenterStatics :
	IInspectable,
	impl_IListViewItemPresenterStatics<IListViewItemPresenterStatics>
{
	IListViewItemPresenterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItemPresenterStatics>>(m_ptr); }
};

struct IListViewItemPresenterFactory :
	IInspectable,
	impl_IListViewItemPresenterFactory<IListViewItemPresenterFactory>
{
	IListViewItemPresenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListViewItemPresenterFactory>>(m_ptr); }
};

struct IGeneratorPositionHelper :
	IInspectable,
	impl_IGeneratorPositionHelper<IGeneratorPositionHelper>
{
	IGeneratorPositionHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeneratorPositionHelper>>(m_ptr); }
};

struct IGeneratorPositionHelperStatics :
	IInspectable,
	impl_IGeneratorPositionHelperStatics<IGeneratorPositionHelperStatics>
{
	IGeneratorPositionHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeneratorPositionHelperStatics>>(m_ptr); }
};

struct ILayoutInformation :
	IInspectable,
	impl_ILayoutInformation<ILayoutInformation>
{
	ILayoutInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILayoutInformation>>(m_ptr); }
};

struct ILayoutInformationStatics :
	IInspectable,
	impl_ILayoutInformationStatics<ILayoutInformationStatics>
{
	ILayoutInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILayoutInformationStatics>>(m_ptr); }
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Data {

struct ICurrentChangingEventHandler :
	IUnknown,
	impl_ICurrentChangingEventHandler<ICurrentChangingEventHandler>
{
	ICurrentChangingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentChangingEventHandler>>(m_ptr); }
};

struct IPropertyChangedEventHandler :
	IUnknown,
	impl_IPropertyChangedEventHandler<IPropertyChangedEventHandler>
{
	IPropertyChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyChangedEventHandler>>(m_ptr); }
};

struct IBinding :
	IInspectable,
	impl_IBinding<IBinding>
{
	IBinding(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBinding>>(m_ptr); }
};

struct IValueConverter :
	IInspectable,
	impl_IValueConverter<IValueConverter>
{
	IValueConverter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IValueConverter>>(m_ptr); }
};

struct IBindingFactory :
	IInspectable,
	impl_IBindingFactory<IBindingFactory>
{
	IBindingFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingFactory>>(m_ptr); }
};

struct IBinding2 :
	IInspectable,
	impl_IBinding2<IBinding2>
{
	IBinding2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBinding2>>(m_ptr); }
};

struct IBindingBase :
	IInspectable,
	impl_IBindingBase<IBindingBase>
{
	IBindingBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingBase>>(m_ptr); }
};

struct IBindingBaseFactory :
	IInspectable,
	impl_IBindingBaseFactory<IBindingBaseFactory>
{
	IBindingBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingBaseFactory>>(m_ptr); }
};

struct IBindingExpression :
	IInspectable,
	impl_IBindingExpression<IBindingExpression>
{
	IBindingExpression(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingExpression>>(m_ptr); }
};

struct IBindingExpressionFactory :
	IInspectable,
	impl_IBindingExpressionFactory<IBindingExpressionFactory>
{
	IBindingExpressionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingExpressionFactory>>(m_ptr); }
};

struct IBindingExpressionBase :
	IInspectable,
	impl_IBindingExpressionBase<IBindingExpressionBase>
{
	IBindingExpressionBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingExpressionBase>>(m_ptr); }
};

struct IBindingExpressionBaseFactory :
	IInspectable,
	impl_IBindingExpressionBaseFactory<IBindingExpressionBaseFactory>
{
	IBindingExpressionBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingExpressionBaseFactory>>(m_ptr); }
};

struct ICollectionViewSource :
	IInspectable,
	impl_ICollectionViewSource<ICollectionViewSource>
{
	ICollectionViewSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICollectionViewSource>>(m_ptr); }
};

struct ICollectionView :
	IInspectable,
	impl_ICollectionView<ICollectionView>,
	Requires<ICollectionView, Windows::Foundation::Collections::IObservableVector<IInspectable>, Windows::Foundation::Collections::IVector<IInspectable>, Windows::Foundation::Collections::IIterable<IInspectable>>
{
	ICollectionView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICollectionView>>(m_ptr); }
};

struct ICollectionViewSourceStatics :
	IInspectable,
	impl_ICollectionViewSourceStatics<ICollectionViewSourceStatics>
{
	ICollectionViewSourceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICollectionViewSourceStatics>>(m_ptr); }
};

struct ICurrentChangingEventArgs :
	IInspectable,
	impl_ICurrentChangingEventArgs<ICurrentChangingEventArgs>
{
	ICurrentChangingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentChangingEventArgs>>(m_ptr); }
};

struct ICurrentChangingEventArgsFactory :
	IInspectable,
	impl_ICurrentChangingEventArgsFactory<ICurrentChangingEventArgsFactory>
{
	ICurrentChangingEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentChangingEventArgsFactory>>(m_ptr); }
};

struct ICollectionViewGroup :
	IInspectable,
	impl_ICollectionViewGroup<ICollectionViewGroup>
{
	ICollectionViewGroup(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICollectionViewGroup>>(m_ptr); }
};

struct ICustomProperty :
	IInspectable,
	impl_ICustomProperty<ICustomProperty>
{
	ICustomProperty(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomProperty>>(m_ptr); }
};

struct ICustomPropertyProvider :
	IInspectable,
	impl_ICustomPropertyProvider<ICustomPropertyProvider>
{
	ICustomPropertyProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomPropertyProvider>>(m_ptr); }
};

struct INotifyPropertyChanged :
	IInspectable,
	impl_INotifyPropertyChanged<INotifyPropertyChanged>
{
	INotifyPropertyChanged(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INotifyPropertyChanged>>(m_ptr); }
};

struct IPropertyChangedEventArgs :
	IInspectable,
	impl_IPropertyChangedEventArgs<IPropertyChangedEventArgs>
{
	IPropertyChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyChangedEventArgs>>(m_ptr); }
};

struct IPropertyChangedEventArgsFactory :
	IInspectable,
	impl_IPropertyChangedEventArgsFactory<IPropertyChangedEventArgsFactory>
{
	IPropertyChangedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyChangedEventArgsFactory>>(m_ptr); }
};

struct IRelativeSource :
	IInspectable,
	impl_IRelativeSource<IRelativeSource>
{
	IRelativeSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRelativeSource>>(m_ptr); }
};

struct IRelativeSourceFactory :
	IInspectable,
	impl_IRelativeSourceFactory<IRelativeSourceFactory>
{
	IRelativeSourceFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRelativeSourceFactory>>(m_ptr); }
};

struct IBindingOperations :
	IInspectable,
	impl_IBindingOperations<IBindingOperations>
{
	IBindingOperations(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingOperations>>(m_ptr); }
};

struct IBindingOperationsStatics :
	IInspectable,
	impl_IBindingOperationsStatics<IBindingOperationsStatics>
{
	IBindingOperationsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindingOperationsStatics>>(m_ptr); }
};

struct ISupportIncrementalLoading :
	IInspectable,
	impl_ISupportIncrementalLoading<ISupportIncrementalLoading>
{
	ISupportIncrementalLoading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISupportIncrementalLoading>>(m_ptr); }
};

struct ICollectionViewFactory :
	IInspectable,
	impl_ICollectionViewFactory<ICollectionViewFactory>
{
	ICollectionViewFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICollectionViewFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Documents {

struct IBlock :
	IInspectable,
	impl_IBlock<IBlock>
{
	IBlock(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBlock>>(m_ptr); }
};

struct IBlockStatics :
	IInspectable,
	impl_IBlockStatics<IBlockStatics>
{
	IBlockStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBlockStatics>>(m_ptr); }
};

struct IBlockFactory :
	IInspectable,
	impl_IBlockFactory<IBlockFactory>
{
	IBlockFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBlockFactory>>(m_ptr); }
};

struct IBold :
	IInspectable,
	impl_IBold<IBold>
{
	IBold(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBold>>(m_ptr); }
};

struct IGlyphs :
	IInspectable,
	impl_IGlyphs<IGlyphs>
{
	IGlyphs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGlyphs>>(m_ptr); }
};

struct IGlyphsStatics :
	IInspectable,
	impl_IGlyphsStatics<IGlyphsStatics>
{
	IGlyphsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGlyphsStatics>>(m_ptr); }
};

struct IInline :
	IInspectable,
	impl_IInline<IInline>
{
	IInline(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInline>>(m_ptr); }
};

struct IInlineFactory :
	IInspectable,
	impl_IInlineFactory<IInlineFactory>
{
	IInlineFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInlineFactory>>(m_ptr); }
};

struct IInlineUIContainer :
	IInspectable,
	impl_IInlineUIContainer<IInlineUIContainer>
{
	IInlineUIContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInlineUIContainer>>(m_ptr); }
};

struct IItalic :
	IInspectable,
	impl_IItalic<IItalic>
{
	IItalic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItalic>>(m_ptr); }
};

struct ILineBreak :
	IInspectable,
	impl_ILineBreak<ILineBreak>
{
	ILineBreak(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILineBreak>>(m_ptr); }
};

struct IParagraph :
	IInspectable,
	impl_IParagraph<IParagraph>
{
	IParagraph(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IParagraph>>(m_ptr); }
};

struct IParagraphStatics :
	IInspectable,
	impl_IParagraphStatics<IParagraphStatics>
{
	IParagraphStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IParagraphStatics>>(m_ptr); }
};

struct IRun :
	IInspectable,
	impl_IRun<IRun>
{
	IRun(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRun>>(m_ptr); }
};

struct IRunStatics :
	IInspectable,
	impl_IRunStatics<IRunStatics>
{
	IRunStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRunStatics>>(m_ptr); }
};

struct ISpan :
	IInspectable,
	impl_ISpan<ISpan>
{
	ISpan(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpan>>(m_ptr); }
};

struct ISpanFactory :
	IInspectable,
	impl_ISpanFactory<ISpanFactory>
{
	ISpanFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpanFactory>>(m_ptr); }
};

struct ITextElement :
	IInspectable,
	impl_ITextElement<ITextElement>
{
	ITextElement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextElement>>(m_ptr); }
};

struct ITextElementOverrides :
	IInspectable,
	impl_ITextElementOverrides<ITextElementOverrides>
{
	ITextElementOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextElementOverrides>>(m_ptr); }
};

struct ITextElementStatics :
	IInspectable,
	impl_ITextElementStatics<ITextElementStatics>
{
	ITextElementStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextElementStatics>>(m_ptr); }
};

struct ITextElementFactory :
	IInspectable,
	impl_ITextElementFactory<ITextElementFactory>
{
	ITextElementFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextElementFactory>>(m_ptr); }
};

struct ITextPointer :
	IInspectable,
	impl_ITextPointer<ITextPointer>
{
	ITextPointer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextPointer>>(m_ptr); }
};

struct ITypography :
	IInspectable,
	impl_ITypography<ITypography>
{
	ITypography(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITypography>>(m_ptr); }
};

struct ITypographyStatics :
	IInspectable,
	impl_ITypographyStatics<ITypographyStatics>
{
	ITypographyStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITypographyStatics>>(m_ptr); }
};

struct IUnderline :
	IInspectable,
	impl_IUnderline<IUnderline>
{
	IUnderline(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnderline>>(m_ptr); }
};

struct IHyperlink :
	IInspectable,
	impl_IHyperlink<IHyperlink>
{
	IHyperlink(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHyperlink>>(m_ptr); }
};

struct IHyperlinkStatics :
	IInspectable,
	impl_IHyperlinkStatics<IHyperlinkStatics>
{
	IHyperlinkStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHyperlinkStatics>>(m_ptr); }
};

struct IHyperlinkClickEventArgs :
	IInspectable,
	impl_IHyperlinkClickEventArgs<IHyperlinkClickEventArgs>
{
	IHyperlinkClickEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHyperlinkClickEventArgs>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Hosting {

struct IXamlUIPresenterHost :
	IInspectable,
	impl_IXamlUIPresenterHost<IXamlUIPresenterHost>
{
	IXamlUIPresenterHost(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlUIPresenterHost>>(m_ptr); }
};

struct IXamlUIPresenterHost2 :
	IInspectable,
	impl_IXamlUIPresenterHost2<IXamlUIPresenterHost2>
{
	IXamlUIPresenterHost2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlUIPresenterHost2>>(m_ptr); }
};

struct IXamlUIPresenter :
	IInspectable,
	impl_IXamlUIPresenter<IXamlUIPresenter>
{
	IXamlUIPresenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlUIPresenter>>(m_ptr); }
};

struct IXamlUIPresenterStatics :
	IInspectable,
	impl_IXamlUIPresenterStatics<IXamlUIPresenterStatics>
{
	IXamlUIPresenterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlUIPresenterStatics>>(m_ptr); }
};

struct IXamlUIPresenterStatics2 :
	IInspectable,
	impl_IXamlUIPresenterStatics2<IXamlUIPresenterStatics2>
{
	IXamlUIPresenterStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlUIPresenterStatics2>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Input {

struct IDoubleTappedEventHandler :
	IUnknown,
	impl_IDoubleTappedEventHandler<IDoubleTappedEventHandler>
{
	IDoubleTappedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDoubleTappedEventHandler>>(m_ptr); }
};

struct IHoldingEventHandler :
	IUnknown,
	impl_IHoldingEventHandler<IHoldingEventHandler>
{
	IHoldingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHoldingEventHandler>>(m_ptr); }
};

struct IKeyEventHandler :
	IUnknown,
	impl_IKeyEventHandler<IKeyEventHandler>
{
	IKeyEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyEventHandler>>(m_ptr); }
};

struct IManipulationCompletedEventHandler :
	IUnknown,
	impl_IManipulationCompletedEventHandler<IManipulationCompletedEventHandler>
{
	IManipulationCompletedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationCompletedEventHandler>>(m_ptr); }
};

struct IManipulationDeltaEventHandler :
	IUnknown,
	impl_IManipulationDeltaEventHandler<IManipulationDeltaEventHandler>
{
	IManipulationDeltaEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationDeltaEventHandler>>(m_ptr); }
};

struct IManipulationInertiaStartingEventHandler :
	IUnknown,
	impl_IManipulationInertiaStartingEventHandler<IManipulationInertiaStartingEventHandler>
{
	IManipulationInertiaStartingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationInertiaStartingEventHandler>>(m_ptr); }
};

struct IManipulationStartedEventHandler :
	IUnknown,
	impl_IManipulationStartedEventHandler<IManipulationStartedEventHandler>
{
	IManipulationStartedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationStartedEventHandler>>(m_ptr); }
};

struct IManipulationStartingEventHandler :
	IUnknown,
	impl_IManipulationStartingEventHandler<IManipulationStartingEventHandler>
{
	IManipulationStartingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationStartingEventHandler>>(m_ptr); }
};

struct IPointerEventHandler :
	IUnknown,
	impl_IPointerEventHandler<IPointerEventHandler>
{
	IPointerEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerEventHandler>>(m_ptr); }
};

struct IRightTappedEventHandler :
	IUnknown,
	impl_IRightTappedEventHandler<IRightTappedEventHandler>
{
	IRightTappedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRightTappedEventHandler>>(m_ptr); }
};

struct ITappedEventHandler :
	IUnknown,
	impl_ITappedEventHandler<ITappedEventHandler>
{
	ITappedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITappedEventHandler>>(m_ptr); }
};

struct IDoubleTappedRoutedEventArgs :
	IInspectable,
	impl_IDoubleTappedRoutedEventArgs<IDoubleTappedRoutedEventArgs>
{
	IDoubleTappedRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDoubleTappedRoutedEventArgs>>(m_ptr); }
};

struct IFocusManager :
	IInspectable,
	impl_IFocusManager<IFocusManager>
{
	IFocusManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFocusManager>>(m_ptr); }
};

struct IFocusManagerStatics :
	IInspectable,
	impl_IFocusManagerStatics<IFocusManagerStatics>
{
	IFocusManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFocusManagerStatics>>(m_ptr); }
};

struct IFocusManagerStatics2 :
	IInspectable,
	impl_IFocusManagerStatics2<IFocusManagerStatics2>
{
	IFocusManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFocusManagerStatics2>>(m_ptr); }
};

struct IHoldingRoutedEventArgs :
	IInspectable,
	impl_IHoldingRoutedEventArgs<IHoldingRoutedEventArgs>
{
	IHoldingRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHoldingRoutedEventArgs>>(m_ptr); }
};

struct ICommand :
	IInspectable,
	impl_ICommand<ICommand>
{
	ICommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICommand>>(m_ptr); }
};

struct IInertiaExpansionBehavior :
	IInspectable,
	impl_IInertiaExpansionBehavior<IInertiaExpansionBehavior>
{
	IInertiaExpansionBehavior(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInertiaExpansionBehavior>>(m_ptr); }
};

struct IInertiaRotationBehavior :
	IInspectable,
	impl_IInertiaRotationBehavior<IInertiaRotationBehavior>
{
	IInertiaRotationBehavior(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInertiaRotationBehavior>>(m_ptr); }
};

struct IInertiaTranslationBehavior :
	IInspectable,
	impl_IInertiaTranslationBehavior<IInertiaTranslationBehavior>
{
	IInertiaTranslationBehavior(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInertiaTranslationBehavior>>(m_ptr); }
};

struct IInputScope :
	IInspectable,
	impl_IInputScope<IInputScope>
{
	IInputScope(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputScope>>(m_ptr); }
};

struct IInputScopeName :
	IInspectable,
	impl_IInputScopeName<IInputScopeName>
{
	IInputScopeName(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputScopeName>>(m_ptr); }
};

struct IInputScopeNameFactory :
	IInspectable,
	impl_IInputScopeNameFactory<IInputScopeNameFactory>
{
	IInputScopeNameFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputScopeNameFactory>>(m_ptr); }
};

struct IKeyRoutedEventArgs :
	IInspectable,
	impl_IKeyRoutedEventArgs<IKeyRoutedEventArgs>
{
	IKeyRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyRoutedEventArgs>>(m_ptr); }
};

struct IManipulationCompletedRoutedEventArgs :
	IInspectable,
	impl_IManipulationCompletedRoutedEventArgs<IManipulationCompletedRoutedEventArgs>
{
	IManipulationCompletedRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationCompletedRoutedEventArgs>>(m_ptr); }
};

struct IManipulationDeltaRoutedEventArgs :
	IInspectable,
	impl_IManipulationDeltaRoutedEventArgs<IManipulationDeltaRoutedEventArgs>
{
	IManipulationDeltaRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationDeltaRoutedEventArgs>>(m_ptr); }
};

struct IManipulationInertiaStartingRoutedEventArgs :
	IInspectable,
	impl_IManipulationInertiaStartingRoutedEventArgs<IManipulationInertiaStartingRoutedEventArgs>
{
	IManipulationInertiaStartingRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationInertiaStartingRoutedEventArgs>>(m_ptr); }
};

struct IManipulationPivot :
	IInspectable,
	impl_IManipulationPivot<IManipulationPivot>
{
	IManipulationPivot(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationPivot>>(m_ptr); }
};

struct IManipulationPivotFactory :
	IInspectable,
	impl_IManipulationPivotFactory<IManipulationPivotFactory>
{
	IManipulationPivotFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationPivotFactory>>(m_ptr); }
};

struct IManipulationStartedRoutedEventArgs :
	IInspectable,
	impl_IManipulationStartedRoutedEventArgs<IManipulationStartedRoutedEventArgs>
{
	IManipulationStartedRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationStartedRoutedEventArgs>>(m_ptr); }
};

struct IManipulationStartedRoutedEventArgsFactory :
	IInspectable,
	impl_IManipulationStartedRoutedEventArgsFactory<IManipulationStartedRoutedEventArgsFactory>
{
	IManipulationStartedRoutedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationStartedRoutedEventArgsFactory>>(m_ptr); }
};

struct IManipulationStartingRoutedEventArgs :
	IInspectable,
	impl_IManipulationStartingRoutedEventArgs<IManipulationStartingRoutedEventArgs>
{
	IManipulationStartingRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationStartingRoutedEventArgs>>(m_ptr); }
};

struct IPointer :
	IInspectable,
	impl_IPointer<IPointer>
{
	IPointer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointer>>(m_ptr); }
};

struct IPointerRoutedEventArgs :
	IInspectable,
	impl_IPointerRoutedEventArgs<IPointerRoutedEventArgs>
{
	IPointerRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerRoutedEventArgs>>(m_ptr); }
};

struct IRightTappedRoutedEventArgs :
	IInspectable,
	impl_IRightTappedRoutedEventArgs<IRightTappedRoutedEventArgs>
{
	IRightTappedRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRightTappedRoutedEventArgs>>(m_ptr); }
};

struct ITappedRoutedEventArgs :
	IInspectable,
	impl_ITappedRoutedEventArgs<ITappedRoutedEventArgs>
{
	ITappedRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITappedRoutedEventArgs>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Interop {

struct INotifyCollectionChangedEventHandler :
	IUnknown,
	impl_INotifyCollectionChangedEventHandler<INotifyCollectionChangedEventHandler>
{
	INotifyCollectionChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INotifyCollectionChangedEventHandler>>(m_ptr); }
};

struct IBindableVectorChangedEventHandler :
	IUnknown,
	impl_IBindableVectorChangedEventHandler<IBindableVectorChangedEventHandler>
{
	IBindableVectorChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindableVectorChangedEventHandler>>(m_ptr); }
};

struct IBindableIterable :
	IInspectable,
	impl_IBindableIterable<IBindableIterable>
{
	IBindableIterable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindableIterable>>(m_ptr); }
};

struct IBindableIterator :
	IInspectable,
	impl_IBindableIterator<IBindableIterator>
{
	IBindableIterator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindableIterator>>(m_ptr); }
};

struct IBindableVector :
	IInspectable,
	impl_IBindableVector<IBindableVector>,
	Requires<IBindableVector, Windows::UI::Xaml::Interop::IBindableIterable>
{
	IBindableVector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindableVector>>(m_ptr); }
};

struct IBindableVectorView :
	IInspectable,
	impl_IBindableVectorView<IBindableVectorView>,
	Requires<IBindableVectorView, Windows::UI::Xaml::Interop::IBindableIterable>
{
	IBindableVectorView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindableVectorView>>(m_ptr); }
};

struct INotifyCollectionChanged :
	IInspectable,
	impl_INotifyCollectionChanged<INotifyCollectionChanged>
{
	INotifyCollectionChanged(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INotifyCollectionChanged>>(m_ptr); }
};

struct INotifyCollectionChangedEventArgs :
	IInspectable,
	impl_INotifyCollectionChangedEventArgs<INotifyCollectionChangedEventArgs>
{
	INotifyCollectionChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INotifyCollectionChangedEventArgs>>(m_ptr); }
};

struct INotifyCollectionChangedEventArgsFactory :
	IInspectable,
	impl_INotifyCollectionChangedEventArgsFactory<INotifyCollectionChangedEventArgsFactory>
{
	INotifyCollectionChangedEventArgsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INotifyCollectionChangedEventArgsFactory>>(m_ptr); }
};

struct IBindableObservableVector :
	IInspectable,
	impl_IBindableObservableVector<IBindableObservableVector>,
	Requires<IBindableObservableVector, Windows::UI::Xaml::Interop::IBindableVector, Windows::UI::Xaml::Interop::IBindableIterable>
{
	IBindableObservableVector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBindableObservableVector>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Markup {

struct IXamlReader :
	IInspectable,
	impl_IXamlReader<IXamlReader>
{
	IXamlReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlReader>>(m_ptr); }
};

struct IXamlReaderStatics :
	IInspectable,
	impl_IXamlReaderStatics<IXamlReaderStatics>
{
	IXamlReaderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlReaderStatics>>(m_ptr); }
};

struct IComponentConnector :
	IInspectable,
	impl_IComponentConnector<IComponentConnector>
{
	IComponentConnector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComponentConnector>>(m_ptr); }
};

struct IXamlType :
	IInspectable,
	impl_IXamlType<IXamlType>
{
	IXamlType(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlType>>(m_ptr); }
};

struct IXamlMember :
	IInspectable,
	impl_IXamlMember<IXamlMember>
{
	IXamlMember(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlMember>>(m_ptr); }
};

struct IXamlMetadataProvider :
	IInspectable,
	impl_IXamlMetadataProvider<IXamlMetadataProvider>
{
	IXamlMetadataProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlMetadataProvider>>(m_ptr); }
};

struct IXamlBinaryWriter :
	IInspectable,
	impl_IXamlBinaryWriter<IXamlBinaryWriter>
{
	IXamlBinaryWriter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlBinaryWriter>>(m_ptr); }
};

struct IXamlBinaryWriterStatics :
	IInspectable,
	impl_IXamlBinaryWriterStatics<IXamlBinaryWriterStatics>
{
	IXamlBinaryWriterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXamlBinaryWriterStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media {

struct IRateChangedRoutedEventHandler :
	IUnknown,
	impl_IRateChangedRoutedEventHandler<IRateChangedRoutedEventHandler>
{
	IRateChangedRoutedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRateChangedRoutedEventHandler>>(m_ptr); }
};

struct ITimelineMarkerRoutedEventHandler :
	IUnknown,
	impl_ITimelineMarkerRoutedEventHandler<ITimelineMarkerRoutedEventHandler>
{
	ITimelineMarkerRoutedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimelineMarkerRoutedEventHandler>>(m_ptr); }
};

struct IMatrixHelper :
	IInspectable,
	impl_IMatrixHelper<IMatrixHelper>
{
	IMatrixHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMatrixHelper>>(m_ptr); }
};

struct IMatrixHelperStatics :
	IInspectable,
	impl_IMatrixHelperStatics<IMatrixHelperStatics>
{
	IMatrixHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMatrixHelperStatics>>(m_ptr); }
};

struct IArcSegment :
	IInspectable,
	impl_IArcSegment<IArcSegment>
{
	IArcSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IArcSegment>>(m_ptr); }
};

struct IArcSegmentStatics :
	IInspectable,
	impl_IArcSegmentStatics<IArcSegmentStatics>
{
	IArcSegmentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IArcSegmentStatics>>(m_ptr); }
};

struct IBezierSegment :
	IInspectable,
	impl_IBezierSegment<IBezierSegment>
{
	IBezierSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBezierSegment>>(m_ptr); }
};

struct IBezierSegmentStatics :
	IInspectable,
	impl_IBezierSegmentStatics<IBezierSegmentStatics>
{
	IBezierSegmentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBezierSegmentStatics>>(m_ptr); }
};

struct IBitmapCache :
	IInspectable,
	impl_IBitmapCache<IBitmapCache>
{
	IBitmapCache(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapCache>>(m_ptr); }
};

struct IBrush :
	IInspectable,
	impl_IBrush<IBrush>
{
	IBrush(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBrush>>(m_ptr); }
};

struct IBrushStatics :
	IInspectable,
	impl_IBrushStatics<IBrushStatics>
{
	IBrushStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBrushStatics>>(m_ptr); }
};

struct IBrushFactory :
	IInspectable,
	impl_IBrushFactory<IBrushFactory>
{
	IBrushFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBrushFactory>>(m_ptr); }
};

struct ICacheMode :
	IInspectable,
	impl_ICacheMode<ICacheMode>
{
	ICacheMode(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICacheMode>>(m_ptr); }
};

struct ICacheModeFactory :
	IInspectable,
	impl_ICacheModeFactory<ICacheModeFactory>
{
	ICacheModeFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICacheModeFactory>>(m_ptr); }
};

struct ICompositeTransform :
	IInspectable,
	impl_ICompositeTransform<ICompositeTransform>
{
	ICompositeTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompositeTransform>>(m_ptr); }
};

struct ICompositeTransformStatics :
	IInspectable,
	impl_ICompositeTransformStatics<ICompositeTransformStatics>
{
	ICompositeTransformStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompositeTransformStatics>>(m_ptr); }
};

struct IEllipseGeometry :
	IInspectable,
	impl_IEllipseGeometry<IEllipseGeometry>
{
	IEllipseGeometry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEllipseGeometry>>(m_ptr); }
};

struct IEllipseGeometryStatics :
	IInspectable,
	impl_IEllipseGeometryStatics<IEllipseGeometryStatics>
{
	IEllipseGeometryStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEllipseGeometryStatics>>(m_ptr); }
};

struct IFontFamily :
	IInspectable,
	impl_IFontFamily<IFontFamily>
{
	IFontFamily(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFontFamily>>(m_ptr); }
};

struct IFontFamilyFactory :
	IInspectable,
	impl_IFontFamilyFactory<IFontFamilyFactory>
{
	IFontFamilyFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFontFamilyFactory>>(m_ptr); }
};

struct IGeneralTransform :
	IInspectable,
	impl_IGeneralTransform<IGeneralTransform>
{
	IGeneralTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeneralTransform>>(m_ptr); }
};

struct IGeneralTransformOverrides :
	IInspectable,
	impl_IGeneralTransformOverrides<IGeneralTransformOverrides>
{
	IGeneralTransformOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeneralTransformOverrides>>(m_ptr); }
};

struct IGeneralTransformFactory :
	IInspectable,
	impl_IGeneralTransformFactory<IGeneralTransformFactory>
{
	IGeneralTransformFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeneralTransformFactory>>(m_ptr); }
};

struct IGeometry :
	IInspectable,
	impl_IGeometry<IGeometry>
{
	IGeometry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeometry>>(m_ptr); }
};

struct IGeometryStatics :
	IInspectable,
	impl_IGeometryStatics<IGeometryStatics>
{
	IGeometryStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeometryStatics>>(m_ptr); }
};

struct IGeometryFactory :
	IInspectable,
	impl_IGeometryFactory<IGeometryFactory>
{
	IGeometryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeometryFactory>>(m_ptr); }
};

struct IGeometryGroup :
	IInspectable,
	impl_IGeometryGroup<IGeometryGroup>
{
	IGeometryGroup(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeometryGroup>>(m_ptr); }
};

struct IGeometryGroupStatics :
	IInspectable,
	impl_IGeometryGroupStatics<IGeometryGroupStatics>
{
	IGeometryGroupStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeometryGroupStatics>>(m_ptr); }
};

struct IGradientBrush :
	IInspectable,
	impl_IGradientBrush<IGradientBrush>
{
	IGradientBrush(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGradientBrush>>(m_ptr); }
};

struct IGradientBrushStatics :
	IInspectable,
	impl_IGradientBrushStatics<IGradientBrushStatics>
{
	IGradientBrushStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGradientBrushStatics>>(m_ptr); }
};

struct IGradientBrushFactory :
	IInspectable,
	impl_IGradientBrushFactory<IGradientBrushFactory>
{
	IGradientBrushFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGradientBrushFactory>>(m_ptr); }
};

struct IGradientStop :
	IInspectable,
	impl_IGradientStop<IGradientStop>
{
	IGradientStop(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGradientStop>>(m_ptr); }
};

struct IGradientStopStatics :
	IInspectable,
	impl_IGradientStopStatics<IGradientStopStatics>
{
	IGradientStopStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGradientStopStatics>>(m_ptr); }
};

struct IImageBrush :
	IInspectable,
	impl_IImageBrush<IImageBrush>
{
	IImageBrush(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageBrush>>(m_ptr); }
};

struct IImageBrushStatics :
	IInspectable,
	impl_IImageBrushStatics<IImageBrushStatics>
{
	IImageBrushStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageBrushStatics>>(m_ptr); }
};

struct IImageSource :
	IInspectable,
	impl_IImageSource<IImageSource>
{
	IImageSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageSource>>(m_ptr); }
};

struct IImageSourceFactory :
	IInspectable,
	impl_IImageSourceFactory<IImageSourceFactory>
{
	IImageSourceFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageSourceFactory>>(m_ptr); }
};

struct ILinearGradientBrush :
	IInspectable,
	impl_ILinearGradientBrush<ILinearGradientBrush>
{
	ILinearGradientBrush(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILinearGradientBrush>>(m_ptr); }
};

struct ILinearGradientBrushStatics :
	IInspectable,
	impl_ILinearGradientBrushStatics<ILinearGradientBrushStatics>
{
	ILinearGradientBrushStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILinearGradientBrushStatics>>(m_ptr); }
};

struct ILinearGradientBrushFactory :
	IInspectable,
	impl_ILinearGradientBrushFactory<ILinearGradientBrushFactory>
{
	ILinearGradientBrushFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILinearGradientBrushFactory>>(m_ptr); }
};

struct ILineGeometry :
	IInspectable,
	impl_ILineGeometry<ILineGeometry>
{
	ILineGeometry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILineGeometry>>(m_ptr); }
};

struct ILineGeometryStatics :
	IInspectable,
	impl_ILineGeometryStatics<ILineGeometryStatics>
{
	ILineGeometryStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILineGeometryStatics>>(m_ptr); }
};

struct ILineSegment :
	IInspectable,
	impl_ILineSegment<ILineSegment>
{
	ILineSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILineSegment>>(m_ptr); }
};

struct ILineSegmentStatics :
	IInspectable,
	impl_ILineSegmentStatics<ILineSegmentStatics>
{
	ILineSegmentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILineSegmentStatics>>(m_ptr); }
};

struct IMatrix3DProjection :
	IInspectable,
	impl_IMatrix3DProjection<IMatrix3DProjection>
{
	IMatrix3DProjection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMatrix3DProjection>>(m_ptr); }
};

struct IMatrix3DProjectionStatics :
	IInspectable,
	impl_IMatrix3DProjectionStatics<IMatrix3DProjectionStatics>
{
	IMatrix3DProjectionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMatrix3DProjectionStatics>>(m_ptr); }
};

struct IMatrixTransform :
	IInspectable,
	impl_IMatrixTransform<IMatrixTransform>
{
	IMatrixTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMatrixTransform>>(m_ptr); }
};

struct IMatrixTransformStatics :
	IInspectable,
	impl_IMatrixTransformStatics<IMatrixTransformStatics>
{
	IMatrixTransformStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMatrixTransformStatics>>(m_ptr); }
};

struct IPathFigure :
	IInspectable,
	impl_IPathFigure<IPathFigure>
{
	IPathFigure(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathFigure>>(m_ptr); }
};

struct IPathFigureStatics :
	IInspectable,
	impl_IPathFigureStatics<IPathFigureStatics>
{
	IPathFigureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathFigureStatics>>(m_ptr); }
};

struct IPathGeometry :
	IInspectable,
	impl_IPathGeometry<IPathGeometry>
{
	IPathGeometry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathGeometry>>(m_ptr); }
};

struct IPathGeometryStatics :
	IInspectable,
	impl_IPathGeometryStatics<IPathGeometryStatics>
{
	IPathGeometryStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathGeometryStatics>>(m_ptr); }
};

struct IPathSegment :
	IInspectable,
	impl_IPathSegment<IPathSegment>
{
	IPathSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathSegment>>(m_ptr); }
};

struct IPathSegmentFactory :
	IInspectable,
	impl_IPathSegmentFactory<IPathSegmentFactory>
{
	IPathSegmentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathSegmentFactory>>(m_ptr); }
};

struct IPlaneProjection :
	IInspectable,
	impl_IPlaneProjection<IPlaneProjection>
{
	IPlaneProjection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlaneProjection>>(m_ptr); }
};

struct IPlaneProjectionStatics :
	IInspectable,
	impl_IPlaneProjectionStatics<IPlaneProjectionStatics>
{
	IPlaneProjectionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlaneProjectionStatics>>(m_ptr); }
};

struct IPolyBezierSegment :
	IInspectable,
	impl_IPolyBezierSegment<IPolyBezierSegment>
{
	IPolyBezierSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolyBezierSegment>>(m_ptr); }
};

struct IPolyBezierSegmentStatics :
	IInspectable,
	impl_IPolyBezierSegmentStatics<IPolyBezierSegmentStatics>
{
	IPolyBezierSegmentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolyBezierSegmentStatics>>(m_ptr); }
};

struct IPolyLineSegment :
	IInspectable,
	impl_IPolyLineSegment<IPolyLineSegment>
{
	IPolyLineSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolyLineSegment>>(m_ptr); }
};

struct IPolyLineSegmentStatics :
	IInspectable,
	impl_IPolyLineSegmentStatics<IPolyLineSegmentStatics>
{
	IPolyLineSegmentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolyLineSegmentStatics>>(m_ptr); }
};

struct IPolyQuadraticBezierSegment :
	IInspectable,
	impl_IPolyQuadraticBezierSegment<IPolyQuadraticBezierSegment>
{
	IPolyQuadraticBezierSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolyQuadraticBezierSegment>>(m_ptr); }
};

struct IPolyQuadraticBezierSegmentStatics :
	IInspectable,
	impl_IPolyQuadraticBezierSegmentStatics<IPolyQuadraticBezierSegmentStatics>
{
	IPolyQuadraticBezierSegmentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolyQuadraticBezierSegmentStatics>>(m_ptr); }
};

struct IProjection :
	IInspectable,
	impl_IProjection<IProjection>
{
	IProjection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProjection>>(m_ptr); }
};

struct IProjectionFactory :
	IInspectable,
	impl_IProjectionFactory<IProjectionFactory>
{
	IProjectionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProjectionFactory>>(m_ptr); }
};

struct IQuadraticBezierSegment :
	IInspectable,
	impl_IQuadraticBezierSegment<IQuadraticBezierSegment>
{
	IQuadraticBezierSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQuadraticBezierSegment>>(m_ptr); }
};

struct IQuadraticBezierSegmentStatics :
	IInspectable,
	impl_IQuadraticBezierSegmentStatics<IQuadraticBezierSegmentStatics>
{
	IQuadraticBezierSegmentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQuadraticBezierSegmentStatics>>(m_ptr); }
};

struct IRateChangedRoutedEventArgs :
	IInspectable,
	impl_IRateChangedRoutedEventArgs<IRateChangedRoutedEventArgs>
{
	IRateChangedRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRateChangedRoutedEventArgs>>(m_ptr); }
};

struct IRectangleGeometry :
	IInspectable,
	impl_IRectangleGeometry<IRectangleGeometry>
{
	IRectangleGeometry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRectangleGeometry>>(m_ptr); }
};

struct IRectangleGeometryStatics :
	IInspectable,
	impl_IRectangleGeometryStatics<IRectangleGeometryStatics>
{
	IRectangleGeometryStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRectangleGeometryStatics>>(m_ptr); }
};

struct IRenderingEventArgs :
	IInspectable,
	impl_IRenderingEventArgs<IRenderingEventArgs>
{
	IRenderingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRenderingEventArgs>>(m_ptr); }
};

struct IRotateTransform :
	IInspectable,
	impl_IRotateTransform<IRotateTransform>
{
	IRotateTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRotateTransform>>(m_ptr); }
};

struct IRotateTransformStatics :
	IInspectable,
	impl_IRotateTransformStatics<IRotateTransformStatics>
{
	IRotateTransformStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRotateTransformStatics>>(m_ptr); }
};

struct IScaleTransform :
	IInspectable,
	impl_IScaleTransform<IScaleTransform>
{
	IScaleTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScaleTransform>>(m_ptr); }
};

struct IScaleTransformStatics :
	IInspectable,
	impl_IScaleTransformStatics<IScaleTransformStatics>
{
	IScaleTransformStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScaleTransformStatics>>(m_ptr); }
};

struct ISkewTransform :
	IInspectable,
	impl_ISkewTransform<ISkewTransform>
{
	ISkewTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISkewTransform>>(m_ptr); }
};

struct ISkewTransformStatics :
	IInspectable,
	impl_ISkewTransformStatics<ISkewTransformStatics>
{
	ISkewTransformStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISkewTransformStatics>>(m_ptr); }
};

struct ISolidColorBrush :
	IInspectable,
	impl_ISolidColorBrush<ISolidColorBrush>
{
	ISolidColorBrush(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISolidColorBrush>>(m_ptr); }
};

struct ISolidColorBrushStatics :
	IInspectable,
	impl_ISolidColorBrushStatics<ISolidColorBrushStatics>
{
	ISolidColorBrushStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISolidColorBrushStatics>>(m_ptr); }
};

struct ISolidColorBrushFactory :
	IInspectable,
	impl_ISolidColorBrushFactory<ISolidColorBrushFactory>
{
	ISolidColorBrushFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISolidColorBrushFactory>>(m_ptr); }
};

struct ITileBrush :
	IInspectable,
	impl_ITileBrush<ITileBrush>
{
	ITileBrush(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileBrush>>(m_ptr); }
};

struct ITileBrushStatics :
	IInspectable,
	impl_ITileBrushStatics<ITileBrushStatics>
{
	ITileBrushStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileBrushStatics>>(m_ptr); }
};

struct ITileBrushFactory :
	IInspectable,
	impl_ITileBrushFactory<ITileBrushFactory>
{
	ITileBrushFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileBrushFactory>>(m_ptr); }
};

struct ITimelineMarker :
	IInspectable,
	impl_ITimelineMarker<ITimelineMarker>
{
	ITimelineMarker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimelineMarker>>(m_ptr); }
};

struct ITimelineMarkerStatics :
	IInspectable,
	impl_ITimelineMarkerStatics<ITimelineMarkerStatics>
{
	ITimelineMarkerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimelineMarkerStatics>>(m_ptr); }
};

struct ITimelineMarkerRoutedEventArgs :
	IInspectable,
	impl_ITimelineMarkerRoutedEventArgs<ITimelineMarkerRoutedEventArgs>
{
	ITimelineMarkerRoutedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimelineMarkerRoutedEventArgs>>(m_ptr); }
};

struct ITransform :
	IInspectable,
	impl_ITransform<ITransform>
{
	ITransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransform>>(m_ptr); }
};

struct ITransformFactory :
	IInspectable,
	impl_ITransformFactory<ITransformFactory>
{
	ITransformFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransformFactory>>(m_ptr); }
};

struct ITransformGroup :
	IInspectable,
	impl_ITransformGroup<ITransformGroup>
{
	ITransformGroup(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransformGroup>>(m_ptr); }
};

struct ITransformGroupStatics :
	IInspectable,
	impl_ITransformGroupStatics<ITransformGroupStatics>
{
	ITransformGroupStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransformGroupStatics>>(m_ptr); }
};

struct ITranslateTransform :
	IInspectable,
	impl_ITranslateTransform<ITranslateTransform>
{
	ITranslateTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITranslateTransform>>(m_ptr); }
};

struct ITranslateTransformStatics :
	IInspectable,
	impl_ITranslateTransformStatics<ITranslateTransformStatics>
{
	ITranslateTransformStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITranslateTransformStatics>>(m_ptr); }
};

struct IVisualTreeHelper :
	IInspectable,
	impl_IVisualTreeHelper<IVisualTreeHelper>
{
	IVisualTreeHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualTreeHelper>>(m_ptr); }
};

struct IVisualTreeHelperStatics :
	IInspectable,
	impl_IVisualTreeHelperStatics<IVisualTreeHelperStatics>
{
	IVisualTreeHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualTreeHelperStatics>>(m_ptr); }
};

struct IVisualTreeHelperStatics2 :
	IInspectable,
	impl_IVisualTreeHelperStatics2<IVisualTreeHelperStatics2>
{
	IVisualTreeHelperStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualTreeHelperStatics2>>(m_ptr); }
};

struct ICompositionTarget :
	IInspectable,
	impl_ICompositionTarget<ICompositionTarget>
{
	ICompositionTarget(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompositionTarget>>(m_ptr); }
};

struct ICompositionTargetStatics :
	IInspectable,
	impl_ICompositionTargetStatics<ICompositionTargetStatics>
{
	ICompositionTargetStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompositionTargetStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Animation {

struct IKeyTimeHelper :
	IInspectable,
	impl_IKeyTimeHelper<IKeyTimeHelper>
{
	IKeyTimeHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyTimeHelper>>(m_ptr); }
};

struct IKeyTimeHelperStatics :
	IInspectable,
	impl_IKeyTimeHelperStatics<IKeyTimeHelperStatics>
{
	IKeyTimeHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyTimeHelperStatics>>(m_ptr); }
};

struct IRepeatBehaviorHelper :
	IInspectable,
	impl_IRepeatBehaviorHelper<IRepeatBehaviorHelper>
{
	IRepeatBehaviorHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRepeatBehaviorHelper>>(m_ptr); }
};

struct IRepeatBehaviorHelperStatics :
	IInspectable,
	impl_IRepeatBehaviorHelperStatics<IRepeatBehaviorHelperStatics>
{
	IRepeatBehaviorHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRepeatBehaviorHelperStatics>>(m_ptr); }
};

struct IAddDeleteThemeTransition :
	IInspectable,
	impl_IAddDeleteThemeTransition<IAddDeleteThemeTransition>
{
	IAddDeleteThemeTransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAddDeleteThemeTransition>>(m_ptr); }
};

struct IBackEase :
	IInspectable,
	impl_IBackEase<IBackEase>
{
	IBackEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackEase>>(m_ptr); }
};

struct IBackEaseStatics :
	IInspectable,
	impl_IBackEaseStatics<IBackEaseStatics>
{
	IBackEaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackEaseStatics>>(m_ptr); }
};

struct IBeginStoryboard :
	IInspectable,
	impl_IBeginStoryboard<IBeginStoryboard>
{
	IBeginStoryboard(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBeginStoryboard>>(m_ptr); }
};

struct IBeginStoryboardStatics :
	IInspectable,
	impl_IBeginStoryboardStatics<IBeginStoryboardStatics>
{
	IBeginStoryboardStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBeginStoryboardStatics>>(m_ptr); }
};

struct IBounceEase :
	IInspectable,
	impl_IBounceEase<IBounceEase>
{
	IBounceEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBounceEase>>(m_ptr); }
};

struct IBounceEaseStatics :
	IInspectable,
	impl_IBounceEaseStatics<IBounceEaseStatics>
{
	IBounceEaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBounceEaseStatics>>(m_ptr); }
};

struct ICircleEase :
	IInspectable,
	impl_ICircleEase<ICircleEase>
{
	ICircleEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICircleEase>>(m_ptr); }
};

struct IColorAnimation :
	IInspectable,
	impl_IColorAnimation<IColorAnimation>
{
	IColorAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorAnimation>>(m_ptr); }
};

struct IColorAnimationStatics :
	IInspectable,
	impl_IColorAnimationStatics<IColorAnimationStatics>
{
	IColorAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorAnimationStatics>>(m_ptr); }
};

struct IColorAnimationUsingKeyFrames :
	IInspectable,
	impl_IColorAnimationUsingKeyFrames<IColorAnimationUsingKeyFrames>
{
	IColorAnimationUsingKeyFrames(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorAnimationUsingKeyFrames>>(m_ptr); }
};

struct IColorAnimationUsingKeyFramesStatics :
	IInspectable,
	impl_IColorAnimationUsingKeyFramesStatics<IColorAnimationUsingKeyFramesStatics>
{
	IColorAnimationUsingKeyFramesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorAnimationUsingKeyFramesStatics>>(m_ptr); }
};

struct IColorKeyFrame :
	IInspectable,
	impl_IColorKeyFrame<IColorKeyFrame>
{
	IColorKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorKeyFrame>>(m_ptr); }
};

struct IColorKeyFrameStatics :
	IInspectable,
	impl_IColorKeyFrameStatics<IColorKeyFrameStatics>
{
	IColorKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorKeyFrameStatics>>(m_ptr); }
};

struct IColorKeyFrameFactory :
	IInspectable,
	impl_IColorKeyFrameFactory<IColorKeyFrameFactory>
{
	IColorKeyFrameFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorKeyFrameFactory>>(m_ptr); }
};

struct IContentThemeTransition :
	IInspectable,
	impl_IContentThemeTransition<IContentThemeTransition>
{
	IContentThemeTransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentThemeTransition>>(m_ptr); }
};

struct IContentThemeTransitionStatics :
	IInspectable,
	impl_IContentThemeTransitionStatics<IContentThemeTransitionStatics>
{
	IContentThemeTransitionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentThemeTransitionStatics>>(m_ptr); }
};

struct ICubicEase :
	IInspectable,
	impl_ICubicEase<ICubicEase>
{
	ICubicEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICubicEase>>(m_ptr); }
};

struct IDiscreteColorKeyFrame :
	IInspectable,
	impl_IDiscreteColorKeyFrame<IDiscreteColorKeyFrame>
{
	IDiscreteColorKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDiscreteColorKeyFrame>>(m_ptr); }
};

struct IDiscreteDoubleKeyFrame :
	IInspectable,
	impl_IDiscreteDoubleKeyFrame<IDiscreteDoubleKeyFrame>
{
	IDiscreteDoubleKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDiscreteDoubleKeyFrame>>(m_ptr); }
};

struct IDiscreteObjectKeyFrame :
	IInspectable,
	impl_IDiscreteObjectKeyFrame<IDiscreteObjectKeyFrame>
{
	IDiscreteObjectKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDiscreteObjectKeyFrame>>(m_ptr); }
};

struct IDiscretePointKeyFrame :
	IInspectable,
	impl_IDiscretePointKeyFrame<IDiscretePointKeyFrame>
{
	IDiscretePointKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDiscretePointKeyFrame>>(m_ptr); }
};

struct IDoubleAnimation :
	IInspectable,
	impl_IDoubleAnimation<IDoubleAnimation>
{
	IDoubleAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDoubleAnimation>>(m_ptr); }
};

struct IDoubleAnimationStatics :
	IInspectable,
	impl_IDoubleAnimationStatics<IDoubleAnimationStatics>
{
	IDoubleAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDoubleAnimationStatics>>(m_ptr); }
};

struct IDoubleAnimationUsingKeyFrames :
	IInspectable,
	impl_IDoubleAnimationUsingKeyFrames<IDoubleAnimationUsingKeyFrames>
{
	IDoubleAnimationUsingKeyFrames(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDoubleAnimationUsingKeyFrames>>(m_ptr); }
};

struct IDoubleAnimationUsingKeyFramesStatics :
	IInspectable,
	impl_IDoubleAnimationUsingKeyFramesStatics<IDoubleAnimationUsingKeyFramesStatics>
{
	IDoubleAnimationUsingKeyFramesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDoubleAnimationUsingKeyFramesStatics>>(m_ptr); }
};

struct IDoubleKeyFrame :
	IInspectable,
	impl_IDoubleKeyFrame<IDoubleKeyFrame>
{
	IDoubleKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDoubleKeyFrame>>(m_ptr); }
};

struct IDoubleKeyFrameStatics :
	IInspectable,
	impl_IDoubleKeyFrameStatics<IDoubleKeyFrameStatics>
{
	IDoubleKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDoubleKeyFrameStatics>>(m_ptr); }
};

struct IDoubleKeyFrameFactory :
	IInspectable,
	impl_IDoubleKeyFrameFactory<IDoubleKeyFrameFactory>
{
	IDoubleKeyFrameFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDoubleKeyFrameFactory>>(m_ptr); }
};

struct IDragItemThemeAnimation :
	IInspectable,
	impl_IDragItemThemeAnimation<IDragItemThemeAnimation>
{
	IDragItemThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragItemThemeAnimation>>(m_ptr); }
};

struct IDragItemThemeAnimationStatics :
	IInspectable,
	impl_IDragItemThemeAnimationStatics<IDragItemThemeAnimationStatics>
{
	IDragItemThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragItemThemeAnimationStatics>>(m_ptr); }
};

struct IDragOverThemeAnimation :
	IInspectable,
	impl_IDragOverThemeAnimation<IDragOverThemeAnimation>
{
	IDragOverThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragOverThemeAnimation>>(m_ptr); }
};

struct IDragOverThemeAnimationStatics :
	IInspectable,
	impl_IDragOverThemeAnimationStatics<IDragOverThemeAnimationStatics>
{
	IDragOverThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDragOverThemeAnimationStatics>>(m_ptr); }
};

struct IDropTargetItemThemeAnimation :
	IInspectable,
	impl_IDropTargetItemThemeAnimation<IDropTargetItemThemeAnimation>
{
	IDropTargetItemThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDropTargetItemThemeAnimation>>(m_ptr); }
};

struct IDropTargetItemThemeAnimationStatics :
	IInspectable,
	impl_IDropTargetItemThemeAnimationStatics<IDropTargetItemThemeAnimationStatics>
{
	IDropTargetItemThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDropTargetItemThemeAnimationStatics>>(m_ptr); }
};

struct IEasingColorKeyFrame :
	IInspectable,
	impl_IEasingColorKeyFrame<IEasingColorKeyFrame>
{
	IEasingColorKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasingColorKeyFrame>>(m_ptr); }
};

struct IEasingColorKeyFrameStatics :
	IInspectable,
	impl_IEasingColorKeyFrameStatics<IEasingColorKeyFrameStatics>
{
	IEasingColorKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasingColorKeyFrameStatics>>(m_ptr); }
};

struct IEasingDoubleKeyFrame :
	IInspectable,
	impl_IEasingDoubleKeyFrame<IEasingDoubleKeyFrame>
{
	IEasingDoubleKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasingDoubleKeyFrame>>(m_ptr); }
};

struct IEasingDoubleKeyFrameStatics :
	IInspectable,
	impl_IEasingDoubleKeyFrameStatics<IEasingDoubleKeyFrameStatics>
{
	IEasingDoubleKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasingDoubleKeyFrameStatics>>(m_ptr); }
};

struct IEasingFunctionBase :
	IInspectable,
	impl_IEasingFunctionBase<IEasingFunctionBase>
{
	IEasingFunctionBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasingFunctionBase>>(m_ptr); }
};

struct IEasingFunctionBaseStatics :
	IInspectable,
	impl_IEasingFunctionBaseStatics<IEasingFunctionBaseStatics>
{
	IEasingFunctionBaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasingFunctionBaseStatics>>(m_ptr); }
};

struct IEasingFunctionBaseFactory :
	IInspectable,
	impl_IEasingFunctionBaseFactory<IEasingFunctionBaseFactory>
{
	IEasingFunctionBaseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasingFunctionBaseFactory>>(m_ptr); }
};

struct IEasingPointKeyFrame :
	IInspectable,
	impl_IEasingPointKeyFrame<IEasingPointKeyFrame>
{
	IEasingPointKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasingPointKeyFrame>>(m_ptr); }
};

struct IEasingPointKeyFrameStatics :
	IInspectable,
	impl_IEasingPointKeyFrameStatics<IEasingPointKeyFrameStatics>
{
	IEasingPointKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasingPointKeyFrameStatics>>(m_ptr); }
};

struct IEdgeUIThemeTransition :
	IInspectable,
	impl_IEdgeUIThemeTransition<IEdgeUIThemeTransition>
{
	IEdgeUIThemeTransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEdgeUIThemeTransition>>(m_ptr); }
};

struct IEdgeUIThemeTransitionStatics :
	IInspectable,
	impl_IEdgeUIThemeTransitionStatics<IEdgeUIThemeTransitionStatics>
{
	IEdgeUIThemeTransitionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEdgeUIThemeTransitionStatics>>(m_ptr); }
};

struct IElasticEase :
	IInspectable,
	impl_IElasticEase<IElasticEase>
{
	IElasticEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IElasticEase>>(m_ptr); }
};

struct IElasticEaseStatics :
	IInspectable,
	impl_IElasticEaseStatics<IElasticEaseStatics>
{
	IElasticEaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IElasticEaseStatics>>(m_ptr); }
};

struct IEntranceThemeTransition :
	IInspectable,
	impl_IEntranceThemeTransition<IEntranceThemeTransition>
{
	IEntranceThemeTransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEntranceThemeTransition>>(m_ptr); }
};

struct IEntranceThemeTransitionStatics :
	IInspectable,
	impl_IEntranceThemeTransitionStatics<IEntranceThemeTransitionStatics>
{
	IEntranceThemeTransitionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEntranceThemeTransitionStatics>>(m_ptr); }
};

struct IExponentialEase :
	IInspectable,
	impl_IExponentialEase<IExponentialEase>
{
	IExponentialEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExponentialEase>>(m_ptr); }
};

struct IExponentialEaseStatics :
	IInspectable,
	impl_IExponentialEaseStatics<IExponentialEaseStatics>
{
	IExponentialEaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExponentialEaseStatics>>(m_ptr); }
};

struct IFadeInThemeAnimation :
	IInspectable,
	impl_IFadeInThemeAnimation<IFadeInThemeAnimation>
{
	IFadeInThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFadeInThemeAnimation>>(m_ptr); }
};

struct IFadeInThemeAnimationStatics :
	IInspectable,
	impl_IFadeInThemeAnimationStatics<IFadeInThemeAnimationStatics>
{
	IFadeInThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFadeInThemeAnimationStatics>>(m_ptr); }
};

struct IFadeOutThemeAnimation :
	IInspectable,
	impl_IFadeOutThemeAnimation<IFadeOutThemeAnimation>
{
	IFadeOutThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFadeOutThemeAnimation>>(m_ptr); }
};

struct IFadeOutThemeAnimationStatics :
	IInspectable,
	impl_IFadeOutThemeAnimationStatics<IFadeOutThemeAnimationStatics>
{
	IFadeOutThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFadeOutThemeAnimationStatics>>(m_ptr); }
};

struct IKeySpline :
	IInspectable,
	impl_IKeySpline<IKeySpline>
{
	IKeySpline(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeySpline>>(m_ptr); }
};

struct ILinearColorKeyFrame :
	IInspectable,
	impl_ILinearColorKeyFrame<ILinearColorKeyFrame>
{
	ILinearColorKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILinearColorKeyFrame>>(m_ptr); }
};

struct ILinearDoubleKeyFrame :
	IInspectable,
	impl_ILinearDoubleKeyFrame<ILinearDoubleKeyFrame>
{
	ILinearDoubleKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILinearDoubleKeyFrame>>(m_ptr); }
};

struct ILinearPointKeyFrame :
	IInspectable,
	impl_ILinearPointKeyFrame<ILinearPointKeyFrame>
{
	ILinearPointKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILinearPointKeyFrame>>(m_ptr); }
};

struct INavigationTransitionInfo :
	IInspectable,
	impl_INavigationTransitionInfo<INavigationTransitionInfo>
{
	INavigationTransitionInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigationTransitionInfo>>(m_ptr); }
};

struct INavigationTransitionInfoOverrides :
	IInspectable,
	impl_INavigationTransitionInfoOverrides<INavigationTransitionInfoOverrides>
{
	INavigationTransitionInfoOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigationTransitionInfoOverrides>>(m_ptr); }
};

struct INavigationTransitionInfoFactory :
	IInspectable,
	impl_INavigationTransitionInfoFactory<INavigationTransitionInfoFactory>
{
	INavigationTransitionInfoFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigationTransitionInfoFactory>>(m_ptr); }
};

struct IObjectAnimationUsingKeyFrames :
	IInspectable,
	impl_IObjectAnimationUsingKeyFrames<IObjectAnimationUsingKeyFrames>
{
	IObjectAnimationUsingKeyFrames(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IObjectAnimationUsingKeyFrames>>(m_ptr); }
};

struct IObjectAnimationUsingKeyFramesStatics :
	IInspectable,
	impl_IObjectAnimationUsingKeyFramesStatics<IObjectAnimationUsingKeyFramesStatics>
{
	IObjectAnimationUsingKeyFramesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IObjectAnimationUsingKeyFramesStatics>>(m_ptr); }
};

struct IObjectKeyFrame :
	IInspectable,
	impl_IObjectKeyFrame<IObjectKeyFrame>
{
	IObjectKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IObjectKeyFrame>>(m_ptr); }
};

struct IObjectKeyFrameStatics :
	IInspectable,
	impl_IObjectKeyFrameStatics<IObjectKeyFrameStatics>
{
	IObjectKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IObjectKeyFrameStatics>>(m_ptr); }
};

struct IObjectKeyFrameFactory :
	IInspectable,
	impl_IObjectKeyFrameFactory<IObjectKeyFrameFactory>
{
	IObjectKeyFrameFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IObjectKeyFrameFactory>>(m_ptr); }
};

struct IPaneThemeTransition :
	IInspectable,
	impl_IPaneThemeTransition<IPaneThemeTransition>
{
	IPaneThemeTransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPaneThemeTransition>>(m_ptr); }
};

struct IPaneThemeTransitionStatics :
	IInspectable,
	impl_IPaneThemeTransitionStatics<IPaneThemeTransitionStatics>
{
	IPaneThemeTransitionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPaneThemeTransitionStatics>>(m_ptr); }
};

struct IPointAnimation :
	IInspectable,
	impl_IPointAnimation<IPointAnimation>
{
	IPointAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointAnimation>>(m_ptr); }
};

struct IPointAnimationStatics :
	IInspectable,
	impl_IPointAnimationStatics<IPointAnimationStatics>
{
	IPointAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointAnimationStatics>>(m_ptr); }
};

struct IPointAnimationUsingKeyFrames :
	IInspectable,
	impl_IPointAnimationUsingKeyFrames<IPointAnimationUsingKeyFrames>
{
	IPointAnimationUsingKeyFrames(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointAnimationUsingKeyFrames>>(m_ptr); }
};

struct IPointAnimationUsingKeyFramesStatics :
	IInspectable,
	impl_IPointAnimationUsingKeyFramesStatics<IPointAnimationUsingKeyFramesStatics>
{
	IPointAnimationUsingKeyFramesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointAnimationUsingKeyFramesStatics>>(m_ptr); }
};

struct IPointerDownThemeAnimation :
	IInspectable,
	impl_IPointerDownThemeAnimation<IPointerDownThemeAnimation>
{
	IPointerDownThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerDownThemeAnimation>>(m_ptr); }
};

struct IPointerDownThemeAnimationStatics :
	IInspectable,
	impl_IPointerDownThemeAnimationStatics<IPointerDownThemeAnimationStatics>
{
	IPointerDownThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerDownThemeAnimationStatics>>(m_ptr); }
};

struct IPointerUpThemeAnimation :
	IInspectable,
	impl_IPointerUpThemeAnimation<IPointerUpThemeAnimation>
{
	IPointerUpThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerUpThemeAnimation>>(m_ptr); }
};

struct IPointerUpThemeAnimationStatics :
	IInspectable,
	impl_IPointerUpThemeAnimationStatics<IPointerUpThemeAnimationStatics>
{
	IPointerUpThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerUpThemeAnimationStatics>>(m_ptr); }
};

struct IPointKeyFrame :
	IInspectable,
	impl_IPointKeyFrame<IPointKeyFrame>
{
	IPointKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointKeyFrame>>(m_ptr); }
};

struct IPointKeyFrameStatics :
	IInspectable,
	impl_IPointKeyFrameStatics<IPointKeyFrameStatics>
{
	IPointKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointKeyFrameStatics>>(m_ptr); }
};

struct IPointKeyFrameFactory :
	IInspectable,
	impl_IPointKeyFrameFactory<IPointKeyFrameFactory>
{
	IPointKeyFrameFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointKeyFrameFactory>>(m_ptr); }
};

struct IPopInThemeAnimation :
	IInspectable,
	impl_IPopInThemeAnimation<IPopInThemeAnimation>
{
	IPopInThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopInThemeAnimation>>(m_ptr); }
};

struct IPopInThemeAnimationStatics :
	IInspectable,
	impl_IPopInThemeAnimationStatics<IPopInThemeAnimationStatics>
{
	IPopInThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopInThemeAnimationStatics>>(m_ptr); }
};

struct IPopOutThemeAnimation :
	IInspectable,
	impl_IPopOutThemeAnimation<IPopOutThemeAnimation>
{
	IPopOutThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopOutThemeAnimation>>(m_ptr); }
};

struct IPopOutThemeAnimationStatics :
	IInspectable,
	impl_IPopOutThemeAnimationStatics<IPopOutThemeAnimationStatics>
{
	IPopOutThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopOutThemeAnimationStatics>>(m_ptr); }
};

struct IPopupThemeTransition :
	IInspectable,
	impl_IPopupThemeTransition<IPopupThemeTransition>
{
	IPopupThemeTransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopupThemeTransition>>(m_ptr); }
};

struct IPopupThemeTransitionStatics :
	IInspectable,
	impl_IPopupThemeTransitionStatics<IPopupThemeTransitionStatics>
{
	IPopupThemeTransitionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopupThemeTransitionStatics>>(m_ptr); }
};

struct IPowerEase :
	IInspectable,
	impl_IPowerEase<IPowerEase>
{
	IPowerEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPowerEase>>(m_ptr); }
};

struct IPowerEaseStatics :
	IInspectable,
	impl_IPowerEaseStatics<IPowerEaseStatics>
{
	IPowerEaseStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPowerEaseStatics>>(m_ptr); }
};

struct IQuadraticEase :
	IInspectable,
	impl_IQuadraticEase<IQuadraticEase>
{
	IQuadraticEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQuadraticEase>>(m_ptr); }
};

struct IQuarticEase :
	IInspectable,
	impl_IQuarticEase<IQuarticEase>
{
	IQuarticEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQuarticEase>>(m_ptr); }
};

struct IQuinticEase :
	IInspectable,
	impl_IQuinticEase<IQuinticEase>
{
	IQuinticEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQuinticEase>>(m_ptr); }
};

struct IReorderThemeTransition :
	IInspectable,
	impl_IReorderThemeTransition<IReorderThemeTransition>
{
	IReorderThemeTransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IReorderThemeTransition>>(m_ptr); }
};

struct IRepositionThemeAnimation :
	IInspectable,
	impl_IRepositionThemeAnimation<IRepositionThemeAnimation>
{
	IRepositionThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRepositionThemeAnimation>>(m_ptr); }
};

struct IRepositionThemeAnimationStatics :
	IInspectable,
	impl_IRepositionThemeAnimationStatics<IRepositionThemeAnimationStatics>
{
	IRepositionThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRepositionThemeAnimationStatics>>(m_ptr); }
};

struct IRepositionThemeTransition :
	IInspectable,
	impl_IRepositionThemeTransition<IRepositionThemeTransition>
{
	IRepositionThemeTransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRepositionThemeTransition>>(m_ptr); }
};

struct ISineEase :
	IInspectable,
	impl_ISineEase<ISineEase>
{
	ISineEase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISineEase>>(m_ptr); }
};

struct ISplineColorKeyFrame :
	IInspectable,
	impl_ISplineColorKeyFrame<ISplineColorKeyFrame>
{
	ISplineColorKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplineColorKeyFrame>>(m_ptr); }
};

struct ISplineColorKeyFrameStatics :
	IInspectable,
	impl_ISplineColorKeyFrameStatics<ISplineColorKeyFrameStatics>
{
	ISplineColorKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplineColorKeyFrameStatics>>(m_ptr); }
};

struct ISplineDoubleKeyFrame :
	IInspectable,
	impl_ISplineDoubleKeyFrame<ISplineDoubleKeyFrame>
{
	ISplineDoubleKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplineDoubleKeyFrame>>(m_ptr); }
};

struct ISplineDoubleKeyFrameStatics :
	IInspectable,
	impl_ISplineDoubleKeyFrameStatics<ISplineDoubleKeyFrameStatics>
{
	ISplineDoubleKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplineDoubleKeyFrameStatics>>(m_ptr); }
};

struct ISplinePointKeyFrame :
	IInspectable,
	impl_ISplinePointKeyFrame<ISplinePointKeyFrame>
{
	ISplinePointKeyFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplinePointKeyFrame>>(m_ptr); }
};

struct ISplinePointKeyFrameStatics :
	IInspectable,
	impl_ISplinePointKeyFrameStatics<ISplinePointKeyFrameStatics>
{
	ISplinePointKeyFrameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplinePointKeyFrameStatics>>(m_ptr); }
};

struct ISplitCloseThemeAnimation :
	IInspectable,
	impl_ISplitCloseThemeAnimation<ISplitCloseThemeAnimation>
{
	ISplitCloseThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplitCloseThemeAnimation>>(m_ptr); }
};

struct ISplitCloseThemeAnimationStatics :
	IInspectable,
	impl_ISplitCloseThemeAnimationStatics<ISplitCloseThemeAnimationStatics>
{
	ISplitCloseThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplitCloseThemeAnimationStatics>>(m_ptr); }
};

struct ISplitOpenThemeAnimation :
	IInspectable,
	impl_ISplitOpenThemeAnimation<ISplitOpenThemeAnimation>
{
	ISplitOpenThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplitOpenThemeAnimation>>(m_ptr); }
};

struct ISplitOpenThemeAnimationStatics :
	IInspectable,
	impl_ISplitOpenThemeAnimationStatics<ISplitOpenThemeAnimationStatics>
{
	ISplitOpenThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplitOpenThemeAnimationStatics>>(m_ptr); }
};

struct IStoryboard :
	IInspectable,
	impl_IStoryboard<IStoryboard>
{
	IStoryboard(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStoryboard>>(m_ptr); }
};

struct IStoryboardStatics :
	IInspectable,
	impl_IStoryboardStatics<IStoryboardStatics>
{
	IStoryboardStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStoryboardStatics>>(m_ptr); }
};

struct ISwipeBackThemeAnimation :
	IInspectable,
	impl_ISwipeBackThemeAnimation<ISwipeBackThemeAnimation>
{
	ISwipeBackThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwipeBackThemeAnimation>>(m_ptr); }
};

struct ISwipeBackThemeAnimationStatics :
	IInspectable,
	impl_ISwipeBackThemeAnimationStatics<ISwipeBackThemeAnimationStatics>
{
	ISwipeBackThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwipeBackThemeAnimationStatics>>(m_ptr); }
};

struct ISwipeHintThemeAnimation :
	IInspectable,
	impl_ISwipeHintThemeAnimation<ISwipeHintThemeAnimation>
{
	ISwipeHintThemeAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwipeHintThemeAnimation>>(m_ptr); }
};

struct ISwipeHintThemeAnimationStatics :
	IInspectable,
	impl_ISwipeHintThemeAnimationStatics<ISwipeHintThemeAnimationStatics>
{
	ISwipeHintThemeAnimationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISwipeHintThemeAnimationStatics>>(m_ptr); }
};

struct ITimeline :
	IInspectable,
	impl_ITimeline<ITimeline>
{
	ITimeline(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimeline>>(m_ptr); }
};

struct ITimelineStatics :
	IInspectable,
	impl_ITimelineStatics<ITimelineStatics>
{
	ITimelineStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimelineStatics>>(m_ptr); }
};

struct ITimelineFactory :
	IInspectable,
	impl_ITimelineFactory<ITimelineFactory>
{
	ITimelineFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimelineFactory>>(m_ptr); }
};

struct ITransition :
	IInspectable,
	impl_ITransition<ITransition>
{
	ITransition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransition>>(m_ptr); }
};

struct ITransitionFactory :
	IInspectable,
	impl_ITransitionFactory<ITransitionFactory>
{
	ITransitionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransitionFactory>>(m_ptr); }
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Imaging {

struct IDownloadProgressEventHandler :
	IUnknown,
	impl_IDownloadProgressEventHandler<IDownloadProgressEventHandler>
{
	IDownloadProgressEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDownloadProgressEventHandler>>(m_ptr); }
};

struct IBitmapImage :
	IInspectable,
	impl_IBitmapImage<IBitmapImage>
{
	IBitmapImage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapImage>>(m_ptr); }
};

struct IBitmapImageStatics :
	IInspectable,
	impl_IBitmapImageStatics<IBitmapImageStatics>
{
	IBitmapImageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapImageStatics>>(m_ptr); }
};

struct IBitmapImageFactory :
	IInspectable,
	impl_IBitmapImageFactory<IBitmapImageFactory>
{
	IBitmapImageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapImageFactory>>(m_ptr); }
};

struct IBitmapImage2 :
	IInspectable,
	impl_IBitmapImage2<IBitmapImage2>
{
	IBitmapImage2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapImage2>>(m_ptr); }
};

struct IBitmapImageStatics2 :
	IInspectable,
	impl_IBitmapImageStatics2<IBitmapImageStatics2>
{
	IBitmapImageStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapImageStatics2>>(m_ptr); }
};

struct IBitmapSource :
	IInspectable,
	impl_IBitmapSource<IBitmapSource>
{
	IBitmapSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapSource>>(m_ptr); }
};

struct IBitmapSourceStatics :
	IInspectable,
	impl_IBitmapSourceStatics<IBitmapSourceStatics>
{
	IBitmapSourceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapSourceStatics>>(m_ptr); }
};

struct IBitmapSourceFactory :
	IInspectable,
	impl_IBitmapSourceFactory<IBitmapSourceFactory>
{
	IBitmapSourceFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapSourceFactory>>(m_ptr); }
};

struct IDownloadProgressEventArgs :
	IInspectable,
	impl_IDownloadProgressEventArgs<IDownloadProgressEventArgs>
{
	IDownloadProgressEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDownloadProgressEventArgs>>(m_ptr); }
};

struct IRenderTargetBitmap :
	IInspectable,
	impl_IRenderTargetBitmap<IRenderTargetBitmap>
{
	IRenderTargetBitmap(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRenderTargetBitmap>>(m_ptr); }
};

struct IRenderTargetBitmapStatics :
	IInspectable,
	impl_IRenderTargetBitmapStatics<IRenderTargetBitmapStatics>
{
	IRenderTargetBitmapStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRenderTargetBitmapStatics>>(m_ptr); }
};

struct ISurfaceImageSource :
	IInspectable,
	impl_ISurfaceImageSource<ISurfaceImageSource>
{
	ISurfaceImageSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISurfaceImageSource>>(m_ptr); }
};

struct ISurfaceImageSourceFactory :
	IInspectable,
	impl_ISurfaceImageSourceFactory<ISurfaceImageSourceFactory>
{
	ISurfaceImageSourceFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISurfaceImageSourceFactory>>(m_ptr); }
};

struct IVirtualSurfaceImageSource :
	IInspectable,
	impl_IVirtualSurfaceImageSource<IVirtualSurfaceImageSource>
{
	IVirtualSurfaceImageSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualSurfaceImageSource>>(m_ptr); }
};

struct IVirtualSurfaceImageSourceFactory :
	IInspectable,
	impl_IVirtualSurfaceImageSourceFactory<IVirtualSurfaceImageSourceFactory>
{
	IVirtualSurfaceImageSourceFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVirtualSurfaceImageSourceFactory>>(m_ptr); }
};

struct IWriteableBitmap :
	IInspectable,
	impl_IWriteableBitmap<IWriteableBitmap>
{
	IWriteableBitmap(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWriteableBitmap>>(m_ptr); }
};

struct IWriteableBitmapFactory :
	IInspectable,
	impl_IWriteableBitmapFactory<IWriteableBitmapFactory>
{
	IWriteableBitmapFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWriteableBitmapFactory>>(m_ptr); }
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Media3D {

struct IMatrix3DHelper :
	IInspectable,
	impl_IMatrix3DHelper<IMatrix3DHelper>
{
	IMatrix3DHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMatrix3DHelper>>(m_ptr); }
};

struct IMatrix3DHelperStatics :
	IInspectable,
	impl_IMatrix3DHelperStatics<IMatrix3DHelperStatics>
{
	IMatrix3DHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMatrix3DHelperStatics>>(m_ptr); }
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Navigation {

struct ILoadCompletedEventHandler :
	IUnknown,
	impl_ILoadCompletedEventHandler<ILoadCompletedEventHandler>
{
	ILoadCompletedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoadCompletedEventHandler>>(m_ptr); }
};

struct INavigatedEventHandler :
	IUnknown,
	impl_INavigatedEventHandler<INavigatedEventHandler>
{
	INavigatedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigatedEventHandler>>(m_ptr); }
};

struct INavigatingCancelEventHandler :
	IUnknown,
	impl_INavigatingCancelEventHandler<INavigatingCancelEventHandler>
{
	INavigatingCancelEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigatingCancelEventHandler>>(m_ptr); }
};

struct INavigationFailedEventHandler :
	IUnknown,
	impl_INavigationFailedEventHandler<INavigationFailedEventHandler>
{
	INavigationFailedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigationFailedEventHandler>>(m_ptr); }
};

struct INavigationStoppedEventHandler :
	IUnknown,
	impl_INavigationStoppedEventHandler<INavigationStoppedEventHandler>
{
	INavigationStoppedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigationStoppedEventHandler>>(m_ptr); }
};

struct INavigatingCancelEventArgs :
	IInspectable,
	impl_INavigatingCancelEventArgs<INavigatingCancelEventArgs>
{
	INavigatingCancelEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigatingCancelEventArgs>>(m_ptr); }
};

struct INavigatingCancelEventArgs2 :
	IInspectable,
	impl_INavigatingCancelEventArgs2<INavigatingCancelEventArgs2>
{
	INavigatingCancelEventArgs2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigatingCancelEventArgs2>>(m_ptr); }
};

struct INavigationEventArgs :
	IInspectable,
	impl_INavigationEventArgs<INavigationEventArgs>
{
	INavigationEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigationEventArgs>>(m_ptr); }
};

struct INavigationEventArgs2 :
	IInspectable,
	impl_INavigationEventArgs2<INavigationEventArgs2>
{
	INavigationEventArgs2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigationEventArgs2>>(m_ptr); }
};

struct INavigationFailedEventArgs :
	IInspectable,
	impl_INavigationFailedEventArgs<INavigationFailedEventArgs>
{
	INavigationFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigationFailedEventArgs>>(m_ptr); }
};

struct IPageStackEntry :
	IInspectable,
	impl_IPageStackEntry<IPageStackEntry>
{
	IPageStackEntry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPageStackEntry>>(m_ptr); }
};

struct IPageStackEntryStatics :
	IInspectable,
	impl_IPageStackEntryStatics<IPageStackEntryStatics>
{
	IPageStackEntryStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPageStackEntryStatics>>(m_ptr); }
};

struct IPageStackEntryFactory :
	IInspectable,
	impl_IPageStackEntryFactory<IPageStackEntryFactory>
{
	IPageStackEntryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPageStackEntryFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Printing {

struct IAddPagesEventHandler :
	IUnknown,
	impl_IAddPagesEventHandler<IAddPagesEventHandler>
{
	IAddPagesEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAddPagesEventHandler>>(m_ptr); }
};

struct IGetPreviewPageEventHandler :
	IUnknown,
	impl_IGetPreviewPageEventHandler<IGetPreviewPageEventHandler>
{
	IGetPreviewPageEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGetPreviewPageEventHandler>>(m_ptr); }
};

struct IPaginateEventHandler :
	IUnknown,
	impl_IPaginateEventHandler<IPaginateEventHandler>
{
	IPaginateEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPaginateEventHandler>>(m_ptr); }
};

struct IAddPagesEventArgs :
	IInspectable,
	impl_IAddPagesEventArgs<IAddPagesEventArgs>
{
	IAddPagesEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAddPagesEventArgs>>(m_ptr); }
};

struct IGetPreviewPageEventArgs :
	IInspectable,
	impl_IGetPreviewPageEventArgs<IGetPreviewPageEventArgs>
{
	IGetPreviewPageEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGetPreviewPageEventArgs>>(m_ptr); }
};

struct IPaginateEventArgs :
	IInspectable,
	impl_IPaginateEventArgs<IPaginateEventArgs>
{
	IPaginateEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPaginateEventArgs>>(m_ptr); }
};

struct IPrintDocument :
	IInspectable,
	impl_IPrintDocument<IPrintDocument>
{
	IPrintDocument(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintDocument>>(m_ptr); }
};

struct IPrintDocumentStatics :
	IInspectable,
	impl_IPrintDocumentStatics<IPrintDocumentStatics>
{
	IPrintDocumentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintDocumentStatics>>(m_ptr); }
};

struct IPrintDocumentFactory :
	IInspectable,
	impl_IPrintDocumentFactory<IPrintDocumentFactory>
{
	IPrintDocumentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintDocumentFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Resources {

struct ICustomXamlResourceLoader :
	IInspectable,
	impl_ICustomXamlResourceLoader<ICustomXamlResourceLoader>
{
	ICustomXamlResourceLoader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomXamlResourceLoader>>(m_ptr); }
};

struct ICustomXamlResourceLoaderOverrides :
	IInspectable,
	impl_ICustomXamlResourceLoaderOverrides<ICustomXamlResourceLoaderOverrides>
{
	ICustomXamlResourceLoaderOverrides(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomXamlResourceLoaderOverrides>>(m_ptr); }
};

struct ICustomXamlResourceLoaderStatics :
	IInspectable,
	impl_ICustomXamlResourceLoaderStatics<ICustomXamlResourceLoaderStatics>
{
	ICustomXamlResourceLoaderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomXamlResourceLoaderStatics>>(m_ptr); }
};

struct ICustomXamlResourceLoaderFactory :
	IInspectable,
	impl_ICustomXamlResourceLoaderFactory<ICustomXamlResourceLoaderFactory>
{
	ICustomXamlResourceLoaderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomXamlResourceLoaderFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Shapes {

struct IEllipse :
	IInspectable,
	impl_IEllipse<IEllipse>
{
	IEllipse(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEllipse>>(m_ptr); }
};

struct ILine :
	IInspectable,
	impl_ILine<ILine>
{
	ILine(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILine>>(m_ptr); }
};

struct ILineStatics :
	IInspectable,
	impl_ILineStatics<ILineStatics>
{
	ILineStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILineStatics>>(m_ptr); }
};

struct IPath :
	IInspectable,
	impl_IPath<IPath>
{
	IPath(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPath>>(m_ptr); }
};

struct IPathStatics :
	IInspectable,
	impl_IPathStatics<IPathStatics>
{
	IPathStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathStatics>>(m_ptr); }
};

struct IPathFactory :
	IInspectable,
	impl_IPathFactory<IPathFactory>
{
	IPathFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathFactory>>(m_ptr); }
};

struct IPolygon :
	IInspectable,
	impl_IPolygon<IPolygon>
{
	IPolygon(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolygon>>(m_ptr); }
};

struct IPolygonStatics :
	IInspectable,
	impl_IPolygonStatics<IPolygonStatics>
{
	IPolygonStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolygonStatics>>(m_ptr); }
};

struct IPolyline :
	IInspectable,
	impl_IPolyline<IPolyline>
{
	IPolyline(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolyline>>(m_ptr); }
};

struct IPolylineStatics :
	IInspectable,
	impl_IPolylineStatics<IPolylineStatics>
{
	IPolylineStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPolylineStatics>>(m_ptr); }
};

struct IRectangle :
	IInspectable,
	impl_IRectangle<IRectangle>
{
	IRectangle(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRectangle>>(m_ptr); }
};

struct IRectangleStatics :
	IInspectable,
	impl_IRectangleStatics<IRectangleStatics>
{
	IRectangleStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRectangleStatics>>(m_ptr); }
};

struct IShape :
	IInspectable,
	impl_IShape<IShape>
{
	IShape(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IShape>>(m_ptr); }
};

struct IShapeStatics :
	IInspectable,
	impl_IShapeStatics<IShapeStatics>
{
	IShapeStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IShapeStatics>>(m_ptr); }
};

struct IShapeFactory :
	IInspectable,
	impl_IShapeFactory<IShapeFactory>
{
	IShapeFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IShapeFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Web {

struct IUriToStreamResolver :
	IInspectable,
	impl_IUriToStreamResolver<IUriToStreamResolver>
{
	IUriToStreamResolver(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriToStreamResolver>>(m_ptr); }
};

struct IWebErrorStatics :
	IInspectable,
	impl_IWebErrorStatics<IWebErrorStatics>
{
	IWebErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebErrorStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

struct IResourceCollection :
	IInspectable,
	impl_IResourceCollection<IResourceCollection>,
	Requires<IResourceCollection, Windows::Web::Syndication::ISyndicationNode>
{
	IResourceCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceCollection>>(m_ptr); }
};

struct IWorkspace :
	IInspectable,
	impl_IWorkspace<IWorkspace>,
	Requires<IWorkspace, Windows::Web::Syndication::ISyndicationNode>
{
	IWorkspace(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWorkspace>>(m_ptr); }
};

struct IServiceDocument :
	IInspectable,
	impl_IServiceDocument<IServiceDocument>,
	Requires<IServiceDocument, Windows::Web::Syndication::ISyndicationNode>
{
	IServiceDocument(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IServiceDocument>>(m_ptr); }
};

struct IAtomPubClient :
	IInspectable,
	impl_IAtomPubClient<IAtomPubClient>,
	Requires<IAtomPubClient, Windows::Web::Syndication::ISyndicationClient>
{
	IAtomPubClient(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAtomPubClient>>(m_ptr); }
};

struct IAtomPubClientFactory :
	IInspectable,
	impl_IAtomPubClientFactory<IAtomPubClientFactory>
{
	IAtomPubClientFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAtomPubClientFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

struct IHttpClientFactory :
	IInspectable,
	impl_IHttpClientFactory<IHttpClientFactory>
{
	IHttpClientFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpClientFactory>>(m_ptr); }
};

struct IHttpClient :
	IInspectable,
	impl_IHttpClient<IHttpClient>
{
	IHttpClient(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpClient>>(m_ptr); }
};

struct IHttpContent :
	IInspectable,
	impl_IHttpContent<IHttpContent>
{
	IHttpContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContent>>(m_ptr); }
};

struct IHttpCookieManager :
	IInspectable,
	impl_IHttpCookieManager<IHttpCookieManager>
{
	IHttpCookieManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookieManager>>(m_ptr); }
};

struct IHttpCookieFactory :
	IInspectable,
	impl_IHttpCookieFactory<IHttpCookieFactory>
{
	IHttpCookieFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookieFactory>>(m_ptr); }
};

struct IHttpCookie :
	IInspectable,
	impl_IHttpCookie<IHttpCookie>
{
	IHttpCookie(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookie>>(m_ptr); }
};

struct IHttpMethodStatics :
	IInspectable,
	impl_IHttpMethodStatics<IHttpMethodStatics>
{
	IHttpMethodStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMethodStatics>>(m_ptr); }
};

struct IHttpMethodFactory :
	IInspectable,
	impl_IHttpMethodFactory<IHttpMethodFactory>
{
	IHttpMethodFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMethodFactory>>(m_ptr); }
};

struct IHttpMethod :
	IInspectable,
	impl_IHttpMethod<IHttpMethod>
{
	IHttpMethod(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMethod>>(m_ptr); }
};

struct IHttpTransportInformation :
	IInspectable,
	impl_IHttpTransportInformation<IHttpTransportInformation>
{
	IHttpTransportInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransportInformation>>(m_ptr); }
};

struct IHttpRequestMessageFactory :
	IInspectable,
	impl_IHttpRequestMessageFactory<IHttpRequestMessageFactory>
{
	IHttpRequestMessageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpRequestMessageFactory>>(m_ptr); }
};

struct IHttpRequestMessage :
	IInspectable,
	impl_IHttpRequestMessage<IHttpRequestMessage>
{
	IHttpRequestMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpRequestMessage>>(m_ptr); }
};

struct IHttpResponseMessageFactory :
	IInspectable,
	impl_IHttpResponseMessageFactory<IHttpResponseMessageFactory>
{
	IHttpResponseMessageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpResponseMessageFactory>>(m_ptr); }
};

struct IHttpResponseMessage :
	IInspectable,
	impl_IHttpResponseMessage<IHttpResponseMessage>
{
	IHttpResponseMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpResponseMessage>>(m_ptr); }
};

struct IHttpStringContentFactory :
	IInspectable,
	impl_IHttpStringContentFactory<IHttpStringContentFactory>
{
	IHttpStringContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpStringContentFactory>>(m_ptr); }
};

struct IHttpBufferContentFactory :
	IInspectable,
	impl_IHttpBufferContentFactory<IHttpBufferContentFactory>
{
	IHttpBufferContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpBufferContentFactory>>(m_ptr); }
};

struct IHttpStreamContentFactory :
	IInspectable,
	impl_IHttpStreamContentFactory<IHttpStreamContentFactory>
{
	IHttpStreamContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpStreamContentFactory>>(m_ptr); }
};

struct IHttpFormUrlEncodedContentFactory :
	IInspectable,
	impl_IHttpFormUrlEncodedContentFactory<IHttpFormUrlEncodedContentFactory>
{
	IHttpFormUrlEncodedContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpFormUrlEncodedContentFactory>>(m_ptr); }
};

struct IHttpMultipartContentFactory :
	IInspectable,
	impl_IHttpMultipartContentFactory<IHttpMultipartContentFactory>
{
	IHttpMultipartContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMultipartContentFactory>>(m_ptr); }
};

struct IHttpMultipartContent :
	IInspectable,
	impl_IHttpMultipartContent<IHttpMultipartContent>,
	Requires<IHttpMultipartContent, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	IHttpMultipartContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMultipartContent>>(m_ptr); }
};

struct IHttpMultipartFormDataContentFactory :
	IInspectable,
	impl_IHttpMultipartFormDataContentFactory<IHttpMultipartFormDataContentFactory>
{
	IHttpMultipartFormDataContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMultipartFormDataContentFactory>>(m_ptr); }
};

struct IHttpMultipartFormDataContent :
	IInspectable,
	impl_IHttpMultipartFormDataContent<IHttpMultipartFormDataContent>,
	Requires<IHttpMultipartFormDataContent, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	IHttpMultipartFormDataContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMultipartFormDataContent>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

struct IHttpFilter :
	IInspectable,
	impl_IHttpFilter<IHttpFilter>
{
	IHttpFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpFilter>>(m_ptr); }
};

struct IHttpCacheControl :
	IInspectable,
	impl_IHttpCacheControl<IHttpCacheControl>
{
	IHttpCacheControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCacheControl>>(m_ptr); }
};

struct IHttpBaseProtocolFilter :
	IInspectable,
	impl_IHttpBaseProtocolFilter<IHttpBaseProtocolFilter>,
	Requires<IHttpBaseProtocolFilter, Windows::Web::Http::Filters::IHttpFilter>
{
	IHttpBaseProtocolFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpBaseProtocolFilter>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

struct IHttpContentHeaderCollection :
	IInspectable,
	impl_IHttpContentHeaderCollection<IHttpContentHeaderCollection>,
	Requires<IHttpContentHeaderCollection, Windows::Foundation::Collections::IMap<String, String>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>>>
{
	IHttpContentHeaderCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentHeaderCollection>>(m_ptr); }
};

struct IHttpRequestHeaderCollection :
	IInspectable,
	impl_IHttpRequestHeaderCollection<IHttpRequestHeaderCollection>,
	Requires<IHttpRequestHeaderCollection, Windows::Foundation::Collections::IMap<String, String>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>>>
{
	IHttpRequestHeaderCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpRequestHeaderCollection>>(m_ptr); }
};

struct IHttpResponseHeaderCollection :
	IInspectable,
	impl_IHttpResponseHeaderCollection<IHttpResponseHeaderCollection>,
	Requires<IHttpResponseHeaderCollection, Windows::Foundation::Collections::IMap<String, String>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>>>
{
	IHttpResponseHeaderCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpResponseHeaderCollection>>(m_ptr); }
};

struct IHttpCacheDirectiveHeaderValueCollection :
	IInspectable,
	impl_IHttpCacheDirectiveHeaderValueCollection<IHttpCacheDirectiveHeaderValueCollection>,
	Requires<IHttpCacheDirectiveHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpNameValueHeaderValue>>
{
	IHttpCacheDirectiveHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCacheDirectiveHeaderValueCollection>>(m_ptr); }
};

struct IHttpChallengeHeaderValueStatics :
	IInspectable,
	impl_IHttpChallengeHeaderValueStatics<IHttpChallengeHeaderValueStatics>
{
	IHttpChallengeHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpChallengeHeaderValueStatics>>(m_ptr); }
};

struct IHttpChallengeHeaderValueFactory :
	IInspectable,
	impl_IHttpChallengeHeaderValueFactory<IHttpChallengeHeaderValueFactory>
{
	IHttpChallengeHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpChallengeHeaderValueFactory>>(m_ptr); }
};

struct IHttpChallengeHeaderValue :
	IInspectable,
	impl_IHttpChallengeHeaderValue<IHttpChallengeHeaderValue>
{
	IHttpChallengeHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpChallengeHeaderValue>>(m_ptr); }
};

struct IHttpChallengeHeaderValueCollection :
	IInspectable,
	impl_IHttpChallengeHeaderValueCollection<IHttpChallengeHeaderValueCollection>,
	Requires<IHttpChallengeHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpChallengeHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpChallengeHeaderValue>>
{
	IHttpChallengeHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpChallengeHeaderValueCollection>>(m_ptr); }
};

struct IHttpCredentialsHeaderValueStatics :
	IInspectable,
	impl_IHttpCredentialsHeaderValueStatics<IHttpCredentialsHeaderValueStatics>
{
	IHttpCredentialsHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCredentialsHeaderValueStatics>>(m_ptr); }
};

struct IHttpCredentialsHeaderValueFactory :
	IInspectable,
	impl_IHttpCredentialsHeaderValueFactory<IHttpCredentialsHeaderValueFactory>
{
	IHttpCredentialsHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCredentialsHeaderValueFactory>>(m_ptr); }
};

struct IHttpCredentialsHeaderValue :
	IInspectable,
	impl_IHttpCredentialsHeaderValue<IHttpCredentialsHeaderValue>
{
	IHttpCredentialsHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCredentialsHeaderValue>>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValueStatics :
	IInspectable,
	impl_IHttpConnectionOptionHeaderValueStatics<IHttpConnectionOptionHeaderValueStatics>
{
	IHttpConnectionOptionHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpConnectionOptionHeaderValueStatics>>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValueFactory :
	IInspectable,
	impl_IHttpConnectionOptionHeaderValueFactory<IHttpConnectionOptionHeaderValueFactory>
{
	IHttpConnectionOptionHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpConnectionOptionHeaderValueFactory>>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValue :
	IInspectable,
	impl_IHttpConnectionOptionHeaderValue<IHttpConnectionOptionHeaderValue>
{
	IHttpConnectionOptionHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpConnectionOptionHeaderValue>>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValueCollection :
	IInspectable,
	impl_IHttpConnectionOptionHeaderValueCollection<IHttpConnectionOptionHeaderValueCollection>,
	Requires<IHttpConnectionOptionHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue>>
{
	IHttpConnectionOptionHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpConnectionOptionHeaderValueCollection>>(m_ptr); }
};

struct IHttpContentCodingHeaderValueStatics :
	IInspectable,
	impl_IHttpContentCodingHeaderValueStatics<IHttpContentCodingHeaderValueStatics>
{
	IHttpContentCodingHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingHeaderValueStatics>>(m_ptr); }
};

struct IHttpContentCodingHeaderValueFactory :
	IInspectable,
	impl_IHttpContentCodingHeaderValueFactory<IHttpContentCodingHeaderValueFactory>
{
	IHttpContentCodingHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingHeaderValueFactory>>(m_ptr); }
};

struct IHttpContentCodingHeaderValue :
	IInspectable,
	impl_IHttpContentCodingHeaderValue<IHttpContentCodingHeaderValue>
{
	IHttpContentCodingHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingHeaderValue>>(m_ptr); }
};

struct IHttpContentCodingHeaderValueCollection :
	IInspectable,
	impl_IHttpContentCodingHeaderValueCollection<IHttpContentCodingHeaderValueCollection>,
	Requires<IHttpContentCodingHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpContentCodingHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpContentCodingHeaderValue>>
{
	IHttpContentCodingHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingHeaderValueCollection>>(m_ptr); }
};

struct IHttpContentDispositionHeaderValueStatics :
	IInspectable,
	impl_IHttpContentDispositionHeaderValueStatics<IHttpContentDispositionHeaderValueStatics>
{
	IHttpContentDispositionHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentDispositionHeaderValueStatics>>(m_ptr); }
};

struct IHttpContentDispositionHeaderValueFactory :
	IInspectable,
	impl_IHttpContentDispositionHeaderValueFactory<IHttpContentDispositionHeaderValueFactory>
{
	IHttpContentDispositionHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentDispositionHeaderValueFactory>>(m_ptr); }
};

struct IHttpContentDispositionHeaderValue :
	IInspectable,
	impl_IHttpContentDispositionHeaderValue<IHttpContentDispositionHeaderValue>
{
	IHttpContentDispositionHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentDispositionHeaderValue>>(m_ptr); }
};

struct IHttpContentRangeHeaderValueStatics :
	IInspectable,
	impl_IHttpContentRangeHeaderValueStatics<IHttpContentRangeHeaderValueStatics>
{
	IHttpContentRangeHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentRangeHeaderValueStatics>>(m_ptr); }
};

struct IHttpContentRangeHeaderValueFactory :
	IInspectable,
	impl_IHttpContentRangeHeaderValueFactory<IHttpContentRangeHeaderValueFactory>
{
	IHttpContentRangeHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentRangeHeaderValueFactory>>(m_ptr); }
};

struct IHttpContentRangeHeaderValue :
	IInspectable,
	impl_IHttpContentRangeHeaderValue<IHttpContentRangeHeaderValue>
{
	IHttpContentRangeHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentRangeHeaderValue>>(m_ptr); }
};

struct IHttpCookiePairHeaderValueStatics :
	IInspectable,
	impl_IHttpCookiePairHeaderValueStatics<IHttpCookiePairHeaderValueStatics>
{
	IHttpCookiePairHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookiePairHeaderValueStatics>>(m_ptr); }
};

struct IHttpCookiePairHeaderValueFactory :
	IInspectable,
	impl_IHttpCookiePairHeaderValueFactory<IHttpCookiePairHeaderValueFactory>
{
	IHttpCookiePairHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookiePairHeaderValueFactory>>(m_ptr); }
};

struct IHttpCookiePairHeaderValue :
	IInspectable,
	impl_IHttpCookiePairHeaderValue<IHttpCookiePairHeaderValue>
{
	IHttpCookiePairHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookiePairHeaderValue>>(m_ptr); }
};

struct IHttpCookiePairHeaderValueCollection :
	IInspectable,
	impl_IHttpCookiePairHeaderValueCollection<IHttpCookiePairHeaderValueCollection>,
	Requires<IHttpCookiePairHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpCookiePairHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpCookiePairHeaderValue>>
{
	IHttpCookiePairHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookiePairHeaderValueCollection>>(m_ptr); }
};

struct IHttpDateOrDeltaHeaderValueStatics :
	IInspectable,
	impl_IHttpDateOrDeltaHeaderValueStatics<IHttpDateOrDeltaHeaderValueStatics>
{
	IHttpDateOrDeltaHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpDateOrDeltaHeaderValueStatics>>(m_ptr); }
};

struct IHttpDateOrDeltaHeaderValue :
	IInspectable,
	impl_IHttpDateOrDeltaHeaderValue<IHttpDateOrDeltaHeaderValue>
{
	IHttpDateOrDeltaHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpDateOrDeltaHeaderValue>>(m_ptr); }
};

struct IHttpExpectationHeaderValueStatics :
	IInspectable,
	impl_IHttpExpectationHeaderValueStatics<IHttpExpectationHeaderValueStatics>
{
	IHttpExpectationHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpExpectationHeaderValueStatics>>(m_ptr); }
};

struct IHttpExpectationHeaderValueFactory :
	IInspectable,
	impl_IHttpExpectationHeaderValueFactory<IHttpExpectationHeaderValueFactory>
{
	IHttpExpectationHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpExpectationHeaderValueFactory>>(m_ptr); }
};

struct IHttpExpectationHeaderValue :
	IInspectable,
	impl_IHttpExpectationHeaderValue<IHttpExpectationHeaderValue>
{
	IHttpExpectationHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpExpectationHeaderValue>>(m_ptr); }
};

struct IHttpExpectationHeaderValueCollection :
	IInspectable,
	impl_IHttpExpectationHeaderValueCollection<IHttpExpectationHeaderValueCollection>,
	Requires<IHttpExpectationHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpExpectationHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpExpectationHeaderValue>>
{
	IHttpExpectationHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpExpectationHeaderValueCollection>>(m_ptr); }
};

struct IHttpLanguageHeaderValueCollection :
	IInspectable,
	impl_IHttpLanguageHeaderValueCollection<IHttpLanguageHeaderValueCollection>,
	Requires<IHttpLanguageHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Globalization::Language>, Windows::Foundation::Collections::IIterable<Windows::Globalization::Language>>
{
	IHttpLanguageHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageHeaderValueCollection>>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValueStatics :
	IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValueStatics<IHttpLanguageRangeWithQualityHeaderValueStatics>
{
	IHttpLanguageRangeWithQualityHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageRangeWithQualityHeaderValueStatics>>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValueFactory :
	IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValueFactory<IHttpLanguageRangeWithQualityHeaderValueFactory>
{
	IHttpLanguageRangeWithQualityHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageRangeWithQualityHeaderValueFactory>>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValue :
	IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValue<IHttpLanguageRangeWithQualityHeaderValue>
{
	IHttpLanguageRangeWithQualityHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageRangeWithQualityHeaderValue>>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValueCollection :
	IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValueCollection<IHttpLanguageRangeWithQualityHeaderValueCollection>,
	Requires<IHttpLanguageRangeWithQualityHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue>>
{
	IHttpLanguageRangeWithQualityHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageRangeWithQualityHeaderValueCollection>>(m_ptr); }
};

struct IHttpMediaTypeHeaderValueStatics :
	IInspectable,
	impl_IHttpMediaTypeHeaderValueStatics<IHttpMediaTypeHeaderValueStatics>
{
	IHttpMediaTypeHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeHeaderValueStatics>>(m_ptr); }
};

struct IHttpMediaTypeHeaderValueFactory :
	IInspectable,
	impl_IHttpMediaTypeHeaderValueFactory<IHttpMediaTypeHeaderValueFactory>
{
	IHttpMediaTypeHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeHeaderValueFactory>>(m_ptr); }
};

struct IHttpMediaTypeHeaderValue :
	IInspectable,
	impl_IHttpMediaTypeHeaderValue<IHttpMediaTypeHeaderValue>
{
	IHttpMediaTypeHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeHeaderValue>>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValueStatics :
	IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValueStatics<IHttpMediaTypeWithQualityHeaderValueStatics>
{
	IHttpMediaTypeWithQualityHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeWithQualityHeaderValueStatics>>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValueFactory :
	IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValueFactory<IHttpMediaTypeWithQualityHeaderValueFactory>
{
	IHttpMediaTypeWithQualityHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeWithQualityHeaderValueFactory>>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValue :
	IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValue<IHttpMediaTypeWithQualityHeaderValue>
{
	IHttpMediaTypeWithQualityHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeWithQualityHeaderValue>>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValueCollection :
	IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValueCollection<IHttpMediaTypeWithQualityHeaderValueCollection>,
	Requires<IHttpMediaTypeWithQualityHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue>>
{
	IHttpMediaTypeWithQualityHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeWithQualityHeaderValueCollection>>(m_ptr); }
};

struct IHttpMethodHeaderValueCollection :
	IInspectable,
	impl_IHttpMethodHeaderValueCollection<IHttpMethodHeaderValueCollection>,
	Requires<IHttpMethodHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::HttpMethod>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::HttpMethod>>
{
	IHttpMethodHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMethodHeaderValueCollection>>(m_ptr); }
};

struct IHttpNameValueHeaderValueStatics :
	IInspectable,
	impl_IHttpNameValueHeaderValueStatics<IHttpNameValueHeaderValueStatics>
{
	IHttpNameValueHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpNameValueHeaderValueStatics>>(m_ptr); }
};

struct IHttpNameValueHeaderValueFactory :
	IInspectable,
	impl_IHttpNameValueHeaderValueFactory<IHttpNameValueHeaderValueFactory>
{
	IHttpNameValueHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpNameValueHeaderValueFactory>>(m_ptr); }
};

struct IHttpNameValueHeaderValue :
	IInspectable,
	impl_IHttpNameValueHeaderValue<IHttpNameValueHeaderValue>
{
	IHttpNameValueHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpNameValueHeaderValue>>(m_ptr); }
};

struct IHttpProductHeaderValueStatics :
	IInspectable,
	impl_IHttpProductHeaderValueStatics<IHttpProductHeaderValueStatics>
{
	IHttpProductHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductHeaderValueStatics>>(m_ptr); }
};

struct IHttpProductHeaderValueFactory :
	IInspectable,
	impl_IHttpProductHeaderValueFactory<IHttpProductHeaderValueFactory>
{
	IHttpProductHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductHeaderValueFactory>>(m_ptr); }
};

struct IHttpProductHeaderValue :
	IInspectable,
	impl_IHttpProductHeaderValue<IHttpProductHeaderValue>
{
	IHttpProductHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductHeaderValue>>(m_ptr); }
};

struct IHttpProductInfoHeaderValueStatics :
	IInspectable,
	impl_IHttpProductInfoHeaderValueStatics<IHttpProductInfoHeaderValueStatics>
{
	IHttpProductInfoHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductInfoHeaderValueStatics>>(m_ptr); }
};

struct IHttpProductInfoHeaderValueFactory :
	IInspectable,
	impl_IHttpProductInfoHeaderValueFactory<IHttpProductInfoHeaderValueFactory>
{
	IHttpProductInfoHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductInfoHeaderValueFactory>>(m_ptr); }
};

struct IHttpProductInfoHeaderValue :
	IInspectable,
	impl_IHttpProductInfoHeaderValue<IHttpProductInfoHeaderValue>
{
	IHttpProductInfoHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductInfoHeaderValue>>(m_ptr); }
};

struct IHttpProductInfoHeaderValueCollection :
	IInspectable,
	impl_IHttpProductInfoHeaderValueCollection<IHttpProductInfoHeaderValueCollection>,
	Requires<IHttpProductInfoHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpProductInfoHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpProductInfoHeaderValue>>
{
	IHttpProductInfoHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductInfoHeaderValueCollection>>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValueStatics :
	IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValueStatics<IHttpContentCodingWithQualityHeaderValueStatics>
{
	IHttpContentCodingWithQualityHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingWithQualityHeaderValueStatics>>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValueFactory :
	IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValueFactory<IHttpContentCodingWithQualityHeaderValueFactory>
{
	IHttpContentCodingWithQualityHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingWithQualityHeaderValueFactory>>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValue :
	IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValue<IHttpContentCodingWithQualityHeaderValue>
{
	IHttpContentCodingWithQualityHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingWithQualityHeaderValue>>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValueCollection :
	IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValueCollection<IHttpContentCodingWithQualityHeaderValueCollection>,
	Requires<IHttpContentCodingWithQualityHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue>>
{
	IHttpContentCodingWithQualityHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingWithQualityHeaderValueCollection>>(m_ptr); }
};

struct IHttpTransferCodingHeaderValueStatics :
	IInspectable,
	impl_IHttpTransferCodingHeaderValueStatics<IHttpTransferCodingHeaderValueStatics>
{
	IHttpTransferCodingHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransferCodingHeaderValueStatics>>(m_ptr); }
};

struct IHttpTransferCodingHeaderValueFactory :
	IInspectable,
	impl_IHttpTransferCodingHeaderValueFactory<IHttpTransferCodingHeaderValueFactory>
{
	IHttpTransferCodingHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransferCodingHeaderValueFactory>>(m_ptr); }
};

struct IHttpTransferCodingHeaderValue :
	IInspectable,
	impl_IHttpTransferCodingHeaderValue<IHttpTransferCodingHeaderValue>
{
	IHttpTransferCodingHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransferCodingHeaderValue>>(m_ptr); }
};

struct IHttpTransferCodingHeaderValueCollection :
	IInspectable,
	impl_IHttpTransferCodingHeaderValueCollection<IHttpTransferCodingHeaderValueCollection>,
	Requires<IHttpTransferCodingHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpTransferCodingHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpTransferCodingHeaderValue>>
{
	IHttpTransferCodingHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransferCodingHeaderValueCollection>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

struct ISyndicationAttribute :
	IInspectable,
	impl_ISyndicationAttribute<ISyndicationAttribute>
{
	ISyndicationAttribute(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationAttribute>>(m_ptr); }
};

struct ISyndicationAttributeFactory :
	IInspectable,
	impl_ISyndicationAttributeFactory<ISyndicationAttributeFactory>
{
	ISyndicationAttributeFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationAttributeFactory>>(m_ptr); }
};

struct ISyndicationNode :
	IInspectable,
	impl_ISyndicationNode<ISyndicationNode>
{
	ISyndicationNode(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationNode>>(m_ptr); }
};

struct ISyndicationNodeFactory :
	IInspectable,
	impl_ISyndicationNodeFactory<ISyndicationNodeFactory>
{
	ISyndicationNodeFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationNodeFactory>>(m_ptr); }
};

struct ISyndicationGenerator :
	IInspectable,
	impl_ISyndicationGenerator<ISyndicationGenerator>
{
	ISyndicationGenerator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationGenerator>>(m_ptr); }
};

struct ISyndicationGeneratorFactory :
	IInspectable,
	impl_ISyndicationGeneratorFactory<ISyndicationGeneratorFactory>
{
	ISyndicationGeneratorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationGeneratorFactory>>(m_ptr); }
};

struct ISyndicationText :
	IInspectable,
	impl_ISyndicationText<ISyndicationText>,
	Requires<ISyndicationText, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationText(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationText>>(m_ptr); }
};

struct ISyndicationTextFactory :
	IInspectable,
	impl_ISyndicationTextFactory<ISyndicationTextFactory>
{
	ISyndicationTextFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationTextFactory>>(m_ptr); }
};

struct ISyndicationContent :
	IInspectable,
	impl_ISyndicationContent<ISyndicationContent>,
	Requires<ISyndicationContent, Windows::Web::Syndication::ISyndicationText, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationContent>>(m_ptr); }
};

struct ISyndicationContentFactory :
	IInspectable,
	impl_ISyndicationContentFactory<ISyndicationContentFactory>
{
	ISyndicationContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationContentFactory>>(m_ptr); }
};

struct ISyndicationLink :
	IInspectable,
	impl_ISyndicationLink<ISyndicationLink>,
	Requires<ISyndicationLink, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationLink(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationLink>>(m_ptr); }
};

struct ISyndicationLinkFactory :
	IInspectable,
	impl_ISyndicationLinkFactory<ISyndicationLinkFactory>
{
	ISyndicationLinkFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationLinkFactory>>(m_ptr); }
};

struct ISyndicationPerson :
	IInspectable,
	impl_ISyndicationPerson<ISyndicationPerson>,
	Requires<ISyndicationPerson, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationPerson(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationPerson>>(m_ptr); }
};

struct ISyndicationPersonFactory :
	IInspectable,
	impl_ISyndicationPersonFactory<ISyndicationPersonFactory>
{
	ISyndicationPersonFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationPersonFactory>>(m_ptr); }
};

struct ISyndicationCategory :
	IInspectable,
	impl_ISyndicationCategory<ISyndicationCategory>,
	Requires<ISyndicationCategory, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationCategory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationCategory>>(m_ptr); }
};

struct ISyndicationCategoryFactory :
	IInspectable,
	impl_ISyndicationCategoryFactory<ISyndicationCategoryFactory>
{
	ISyndicationCategoryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationCategoryFactory>>(m_ptr); }
};

struct ISyndicationItem :
	IInspectable,
	impl_ISyndicationItem<ISyndicationItem>,
	Requires<ISyndicationItem, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationItem>>(m_ptr); }
};

struct ISyndicationItemFactory :
	IInspectable,
	impl_ISyndicationItemFactory<ISyndicationItemFactory>
{
	ISyndicationItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationItemFactory>>(m_ptr); }
};

struct ISyndicationFeed :
	IInspectable,
	impl_ISyndicationFeed<ISyndicationFeed>,
	Requires<ISyndicationFeed, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationFeed(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationFeed>>(m_ptr); }
};

struct ISyndicationFeedFactory :
	IInspectable,
	impl_ISyndicationFeedFactory<ISyndicationFeedFactory>
{
	ISyndicationFeedFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationFeedFactory>>(m_ptr); }
};

struct ISyndicationClient :
	IInspectable,
	impl_ISyndicationClient<ISyndicationClient>
{
	ISyndicationClient(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationClient>>(m_ptr); }
};

struct ISyndicationClientFactory :
	IInspectable,
	impl_ISyndicationClientFactory<ISyndicationClientFactory>
{
	ISyndicationClientFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationClientFactory>>(m_ptr); }
};

struct ISyndicationErrorStatics :
	IInspectable,
	impl_ISyndicationErrorStatics<ISyndicationErrorStatics>
{
	ISyndicationErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationErrorStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel {

struct SuspendingEventArgs :
	Windows::ApplicationModel::ISuspendingEventArgs
{
	SuspendingEventArgs(std::nullptr_t) noexcept {}
};

struct SuspendingDeferral :
	Windows::ApplicationModel::ISuspendingDeferral
{
	SuspendingDeferral(std::nullptr_t) noexcept {}
};

struct SuspendingOperation :
	Windows::ApplicationModel::ISuspendingOperation
{
	SuspendingOperation(std::nullptr_t) noexcept {}
};

struct PackageId :
	Windows::ApplicationModel::IPackageId
{
	PackageId(std::nullptr_t) noexcept {}
};

struct Package :
	Windows::ApplicationModel::IPackage,
	Requires<Package, Windows::ApplicationModel::IPackage2>
{
	Package(std::nullptr_t) noexcept {}
	static Windows::ApplicationModel::Package Current();
};

struct DesignMode
{
	DesignMode() = delete;
	static bool DesignModeEnabled();
};

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

struct SplashScreen :
	Windows::ApplicationModel::Activation::ISplashScreen
{
	SplashScreen(std::nullptr_t) noexcept {}
};

struct LaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,
	Requires<LaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs>
{
	LaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ISearchActivatedEventArgs,
	Requires<SearchActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails>
{
	SearchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ShareTargetActivatedEventArgs :
	Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs
{
	ShareTargetActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileActivatedEventArgs,
	Requires<FileActivatedEventArgs, Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	FileActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ProtocolActivatedEventArgs :
	Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,
	Requires<ProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	ProtocolActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileOpenPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs
{
	FileOpenPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileSavePickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs
{
	FileSavePickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct CachedFileUpdaterActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs
{
	CachedFileUpdaterActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs
{
	ContactPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct DeviceActivatedEventArgs :
	Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs,
	Requires<DeviceActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	DeviceActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs
{
	PrintTaskSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct CameraSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs
{
	CameraSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderAddAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs
{
	AppointmentsProviderAddAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderReplaceAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs
{
	AppointmentsProviderReplaceAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderRemoveAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs
{
	AppointmentsProviderRemoveAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderShowTimeFrameActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs
{
	AppointmentsProviderShowTimeFrameActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs
{
	ContactCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactMessageActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs
{
	ContactMessageActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactMapActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs
{
	ContactMapActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactPostActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs
{
	ContactPostActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactVideoCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs
{
	ContactVideoCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct RestrictedLaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs
{
	RestrictedLaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct LockScreenCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs,
	Requires<LockScreenCallActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	LockScreenCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

struct Appointment :
	Windows::ApplicationModel::Appointments::IAppointment
{
	Appointment(std::nullptr_t) noexcept {}
	Appointment();
};

struct AppointmentOrganizer :
	Windows::ApplicationModel::Appointments::IAppointmentParticipant
{
	AppointmentOrganizer(std::nullptr_t) noexcept {}
	AppointmentOrganizer();
};

struct AppointmentInvitee :
	Windows::ApplicationModel::Appointments::IAppointmentInvitee
{
	AppointmentInvitee(std::nullptr_t) noexcept {}
	AppointmentInvitee();
};

struct AppointmentRecurrence :
	Windows::ApplicationModel::Appointments::IAppointmentRecurrence
{
	AppointmentRecurrence(std::nullptr_t) noexcept {}
	AppointmentRecurrence();
};

struct AppointmentManager
{
	AppointmentManager() = delete;
	static Windows::Foundation::IAsyncOperation<String> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<String> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	static Windows::Foundation::IAsyncAction ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration);
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

struct AppointmentsProviderLaunchActionVerbs
{
	AppointmentsProviderLaunchActionVerbs() = delete;
	static String AddAppointment();
	static String ReplaceAppointment();
	static String RemoveAppointment();
	static String ShowTimeFrame();
};

struct AddAppointmentOperation :
	Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation
{
	AddAppointmentOperation(std::nullptr_t) noexcept {}
};

struct ReplaceAppointmentOperation :
	Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation
{
	ReplaceAppointmentOperation(std::nullptr_t) noexcept {}
};

struct RemoveAppointmentOperation :
	Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation
{
	RemoveAppointmentOperation(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

struct AlarmApplicationManager
{
	AlarmApplicationManager() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::AlarmAccessStatus> RequestAccessAsync();
	static Windows::ApplicationModel::Background::AlarmAccessStatus GetAccessStatus();
};

struct BackgroundExecutionManager
{
	BackgroundExecutionManager() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync();
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(String const & applicationId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(wchar_t const (&applicationId)[S0]);
	static void RemoveAccess();
	static void RemoveAccess(String const & applicationId);
	template <unsigned S0> static void RemoveAccess(wchar_t const (&applicationId)[S0]);
	static Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus();
	static Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(String const & applicationId);
	template <unsigned S0> static Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(wchar_t const (&applicationId)[S0]);
};

struct BackgroundTaskRegistration :
	Windows::ApplicationModel::Background::IBackgroundTaskRegistration
{
	BackgroundTaskRegistration(std::nullptr_t) noexcept {}
	static Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> AllTasks();
};

struct BackgroundTaskDeferral :
	Windows::ApplicationModel::Background::IBackgroundTaskDeferral
{
	BackgroundTaskDeferral(std::nullptr_t) noexcept {}
};

struct BackgroundTaskProgressEventArgs :
	Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs
{
	BackgroundTaskProgressEventArgs(std::nullptr_t) noexcept {}
};

struct BackgroundTaskCompletedEventArgs :
	Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs
{
	BackgroundTaskCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct BackgroundTaskBuilder :
	Windows::ApplicationModel::Background::IBackgroundTaskBuilder,
	Requires<BackgroundTaskBuilder, Windows::ApplicationModel::Background::IBackgroundTaskBuilder2>
{
	BackgroundTaskBuilder(std::nullptr_t) noexcept {}
	BackgroundTaskBuilder();
};

struct BackgroundWorkCost
{
	BackgroundWorkCost() = delete;
	static Windows::ApplicationModel::Background::BackgroundWorkCostValue CurrentBackgroundWorkCost();
};

struct SystemTrigger :
	Windows::ApplicationModel::Background::ISystemTrigger
{
	SystemTrigger(std::nullptr_t) noexcept {}
	SystemTrigger(Windows::ApplicationModel::Background::SystemTriggerType triggerType, bool oneShot);
};

struct SystemCondition :
	Windows::ApplicationModel::Background::ISystemCondition
{
	SystemCondition(std::nullptr_t) noexcept {}
	SystemCondition(Windows::ApplicationModel::Background::SystemConditionType conditionType);
};

struct NetworkOperatorNotificationTrigger :
	Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger
{
	NetworkOperatorNotificationTrigger(std::nullptr_t) noexcept {}
	NetworkOperatorNotificationTrigger(String const & networkAccountId);
	template <unsigned S0> NetworkOperatorNotificationTrigger(wchar_t const (&networkAccountId)[S0]);
};

struct TimeTrigger :
	Windows::ApplicationModel::Background::ITimeTrigger
{
	TimeTrigger(std::nullptr_t) noexcept {}
	TimeTrigger(unsigned freshnessTime, bool oneShot);
};

struct MaintenanceTrigger :
	Windows::ApplicationModel::Background::IMaintenanceTrigger
{
	MaintenanceTrigger(std::nullptr_t) noexcept {}
	MaintenanceTrigger(unsigned freshnessTime, bool oneShot);
};

struct DeviceUseTrigger :
	Windows::ApplicationModel::Background::IDeviceUseTrigger
{
	DeviceUseTrigger(std::nullptr_t) noexcept {}
	DeviceUseTrigger();
};

struct DeviceServicingTrigger :
	Windows::ApplicationModel::Background::IDeviceServicingTrigger
{
	DeviceServicingTrigger(std::nullptr_t) noexcept {}
	DeviceServicingTrigger();
};

struct LocationTrigger :
	Windows::ApplicationModel::Background::ILocationTrigger
{
	LocationTrigger(std::nullptr_t) noexcept {}
	LocationTrigger(Windows::ApplicationModel::Background::LocationTriggerType triggerType);
};

struct NetworkOperatorHotspotAuthenticationTrigger :
	Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger
{
	NetworkOperatorHotspotAuthenticationTrigger(std::nullptr_t) noexcept {}
	NetworkOperatorHotspotAuthenticationTrigger();
};

struct PushNotificationTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	PushNotificationTrigger(std::nullptr_t) noexcept {}
	PushNotificationTrigger();
	PushNotificationTrigger(String const & applicationId);
	template <unsigned S0> PushNotificationTrigger(wchar_t const (&applicationId)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

struct LockScreenCallEndCallDeferral :
	Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral
{
	LockScreenCallEndCallDeferral(std::nullptr_t) noexcept {}
};

struct LockScreenCallUI :
	Windows::ApplicationModel::Calls::ILockScreenCallUI
{
	LockScreenCallUI(std::nullptr_t) noexcept {}
};

struct LockScreenCallEndRequestedEventArgs :
	Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs
{
	LockScreenCallEndRequestedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

struct ContactCardDelayedDataLoader :
	Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader
{
	ContactCardDelayedDataLoader(std::nullptr_t) noexcept {}
};

struct ContactManager
{
	ContactManager() = delete;
	static void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection);
	static void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
};

struct ContactLaunchActionVerbs
{
	ContactLaunchActionVerbs() = delete;
	static String Call();
	static String Message();
	static String Map();
	static String Post();
	static String VideoCall();
};

struct Contact :
	Windows::ApplicationModel::Contacts::IContact,
	Requires<Contact, Windows::ApplicationModel::Contacts::IContact2, Windows::ApplicationModel::Contacts::IContactName>
{
	Contact(std::nullptr_t) noexcept {}
	Contact();
};

struct ContactPicker :
	Windows::ApplicationModel::Contacts::IContactPicker,
	Requires<ContactPicker, Windows::ApplicationModel::Contacts::IContactPicker2>
{
	ContactPicker(std::nullptr_t) noexcept {}
	ContactPicker();
};

struct ContactSignificantOther :
	Windows::ApplicationModel::Contacts::IContactSignificantOther
{
	ContactSignificantOther(std::nullptr_t) noexcept {}
	ContactSignificantOther();
};

struct ContactWebsite :
	Windows::ApplicationModel::Contacts::IContactWebsite
{
	ContactWebsite(std::nullptr_t) noexcept {}
	ContactWebsite();
};

struct ContactEmail :
	Windows::ApplicationModel::Contacts::IContactEmail
{
	ContactEmail(std::nullptr_t) noexcept {}
	ContactEmail();
};

struct ContactPhone :
	Windows::ApplicationModel::Contacts::IContactPhone
{
	ContactPhone(std::nullptr_t) noexcept {}
	ContactPhone();
};

struct ContactAddress :
	Windows::ApplicationModel::Contacts::IContactAddress
{
	ContactAddress(std::nullptr_t) noexcept {}
	ContactAddress();
};

struct ContactConnectedServiceAccount :
	Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount
{
	ContactConnectedServiceAccount(std::nullptr_t) noexcept {}
	ContactConnectedServiceAccount();
};

struct ContactDate :
	Windows::ApplicationModel::Contacts::IContactDate
{
	ContactDate(std::nullptr_t) noexcept {}
	ContactDate();
};

struct ContactJobInfo :
	Windows::ApplicationModel::Contacts::IContactJobInfo
{
	ContactJobInfo(std::nullptr_t) noexcept {}
	ContactJobInfo();
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

struct ContactRemovedEventArgs :
	Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs
{
	ContactRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactPickerUI :
	Windows::ApplicationModel::Contacts::Provider::IContactPickerUI,
	Requires<ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2>
{
	ContactPickerUI(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

struct CoreApplication
{
	CoreApplication() = delete;
	static EventRegistrationToken UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken UnhandledErrorDetected(F handler);
	static void UnhandledErrorDetected(EventRegistrationToken token);
	static Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> Views();
	static Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(String const & runtimeType, String const & entryPoint);
	template <unsigned S0, unsigned S1> static Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(wchar_t const (&runtimeType)[S0], wchar_t const (&entryPoint)[S1]);
	static Windows::ApplicationModel::Core::CoreApplicationView MainView();
	static String Id();
	static EventRegistrationToken Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler);
	template <typename F> static EventRegistrationToken Suspending(F handler);
	static void Suspending(EventRegistrationToken token);
	static EventRegistrationToken Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static EventRegistrationToken Resuming(F handler);
	static void Resuming(EventRegistrationToken token);
	static Windows::Foundation::Collections::IPropertySet Properties();
	static Windows::ApplicationModel::Core::CoreApplicationView GetCurrentView();
	static void Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource);
	static void RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback);
	static Windows::ApplicationModel::Core::CoreApplicationView CreateNewView();
	static void Exit();
	static EventRegistrationToken Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static EventRegistrationToken Exiting(F handler);
	static void Exiting(EventRegistrationToken token);
	static void IncrementApplicationUseCount();
	static void DecrementApplicationUseCount();
};

struct CoreApplicationView :
	Windows::ApplicationModel::Core::ICoreApplicationView,
	Requires<CoreApplicationView, Windows::ApplicationModel::Core::ICoreApplicationView2>
{
	CoreApplicationView(std::nullptr_t) noexcept {}
};

struct UnhandledErrorDetectedEventArgs :
	Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs
{
	UnhandledErrorDetectedEventArgs(std::nullptr_t) noexcept {}
};

struct UnhandledError :
	Windows::ApplicationModel::Core::IUnhandledError
{
	UnhandledError(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

struct StandardDataFormats
{
	StandardDataFormats() = delete;
	static String Text();
	static String Html();
	static String Rtf();
	static String Bitmap();
	static String StorageItems();
	static String WebLink();
	static String ApplicationLink();
};

struct DataPackagePropertySetView :
	Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView,
	Requires<DataPackagePropertySetView, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2>
{
	DataPackagePropertySetView(std::nullptr_t) noexcept {}
};

struct DataPackagePropertySet :
	Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet,
	Requires<DataPackagePropertySet, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2>
{
	DataPackagePropertySet(std::nullptr_t) noexcept {}
};

struct DataProviderDeferral :
	Windows::ApplicationModel::DataTransfer::IDataProviderDeferral
{
	DataProviderDeferral(std::nullptr_t) noexcept {}
};

struct DataProviderRequest :
	Windows::ApplicationModel::DataTransfer::IDataProviderRequest
{
	DataProviderRequest(std::nullptr_t) noexcept {}
};

struct OperationCompletedEventArgs :
	Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs
{
	OperationCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct DataPackageView :
	Windows::ApplicationModel::DataTransfer::IDataPackageView,
	Requires<DataPackageView, Windows::ApplicationModel::DataTransfer::IDataPackageView2>
{
	DataPackageView(std::nullptr_t) noexcept {}
};

struct DataPackage :
	Windows::ApplicationModel::DataTransfer::IDataPackage,
	Requires<DataPackage, Windows::ApplicationModel::DataTransfer::IDataPackage2>
{
	DataPackage(std::nullptr_t) noexcept {}
	DataPackage();
};

struct HtmlFormatHelper
{
	HtmlFormatHelper() = delete;
	static String GetStaticFragment(String const & htmlFormat);
	template <unsigned S0> static String GetStaticFragment(wchar_t const (&htmlFormat)[S0]);
	static String CreateHtmlFormat(String const & htmlFragment);
	template <unsigned S0> static String CreateHtmlFormat(wchar_t const (&htmlFragment)[S0]);
};

struct Clipboard
{
	Clipboard() = delete;
	static Windows::ApplicationModel::DataTransfer::DataPackageView GetContent();
	static void SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content);
	static void Flush();
	static void Clear();
	static EventRegistrationToken ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler);
	template <typename F> static EventRegistrationToken ContentChanged(F changeHandler);
	static void ContentChanged(EventRegistrationToken token);
};

struct DataRequestDeferral :
	Windows::ApplicationModel::DataTransfer::IDataRequestDeferral
{
	DataRequestDeferral(std::nullptr_t) noexcept {}
};

struct DataRequest :
	Windows::ApplicationModel::DataTransfer::IDataRequest
{
	DataRequest(std::nullptr_t) noexcept {}
};

struct DataRequestedEventArgs :
	Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs
{
	DataRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct TargetApplicationChosenEventArgs :
	Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs
{
	TargetApplicationChosenEventArgs(std::nullptr_t) noexcept {}
};

struct DataTransferManager :
	Windows::ApplicationModel::DataTransfer::IDataTransferManager
{
	DataTransferManager(std::nullptr_t) noexcept {}
	static void ShowShareUI();
	static Windows::ApplicationModel::DataTransfer::DataTransferManager GetForCurrentView();
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

struct QuickLink :
	Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink
{
	QuickLink(std::nullptr_t) noexcept {}
	QuickLink();
};

struct ShareOperation :
	Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation,
	Requires<ShareOperation, Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2>
{
	ShareOperation(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

struct ResourceLoader :
	Windows::ApplicationModel::Resources::IResourceLoader,
	Requires<ResourceLoader, Windows::ApplicationModel::Resources::IResourceLoader2>
{
	ResourceLoader(std::nullptr_t) noexcept {}
	ResourceLoader();
	static Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView();
	static Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView(String const & name);
	template <unsigned S0> static Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView(wchar_t const (&name)[S0]);
	static Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse();
	static Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse(String const & name);
	template <unsigned S0> static Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse(wchar_t const (&name)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

struct ResourceMap :
	Windows::ApplicationModel::Resources::Core::IResourceMap
{
	ResourceMap(std::nullptr_t) noexcept {}
};

struct ResourceContext :
	Windows::ApplicationModel::Resources::Core::IResourceContext
{
	ResourceContext(std::nullptr_t) noexcept {}
	ResourceContext();
	static Windows::ApplicationModel::Resources::Core::ResourceContext GetForCurrentView();
	static void SetGlobalQualifierValue(String const & key, String const & value);
	template <unsigned S0, unsigned S1> static void SetGlobalQualifierValue(wchar_t const (&key)[S0], wchar_t const (&value)[S1]);
	static void ResetGlobalQualifierValues();
	static void ResetGlobalQualifierValues(Windows::Foundation::Collections::IIterable<String> const & qualifierNames);
	static Windows::ApplicationModel::Resources::Core::ResourceContext GetForViewIndependentUse();
};

struct ResourceManager :
	Windows::ApplicationModel::Resources::Core::IResourceManager
{
	ResourceManager(std::nullptr_t) noexcept {}
	static Windows::ApplicationModel::Resources::Core::ResourceManager Current();
	static bool IsResourceReference(String const & resourceReference);
	template <unsigned S0> static bool IsResourceReference(wchar_t const (&resourceReference)[S0]);
};

struct ResourceQualifier :
	Windows::ApplicationModel::Resources::Core::IResourceQualifier
{
	ResourceQualifier(std::nullptr_t) noexcept {}
};

struct ResourceCandidate :
	Windows::ApplicationModel::Resources::Core::IResourceCandidate
{
	ResourceCandidate(std::nullptr_t) noexcept {}
};

struct NamedResource :
	Windows::ApplicationModel::Resources::Core::INamedResource
{
	NamedResource(std::nullptr_t) noexcept {}
};

struct ResourceMapIterator :
	Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::NamedResource>>
{
	ResourceMapIterator(std::nullptr_t) noexcept {}
};

struct ResourceMapMapView :
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap>
{
	ResourceMapMapView(std::nullptr_t) noexcept {}
};

struct ResourceMapMapViewIterator :
	Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::ResourceMap>>
{
	ResourceMapMapViewIterator(std::nullptr_t) noexcept {}
};

struct ResourceQualifierObservableMap :
	Windows::Foundation::Collections::IObservableMap<String, String>
{
	ResourceQualifierObservableMap(std::nullptr_t) noexcept {}
};

struct ResourceQualifierMapView :
	Windows::Foundation::Collections::IMapView<String, String>
{
	ResourceQualifierMapView(std::nullptr_t) noexcept {}
};

struct ResourceQualifierVectorView :
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier>
{
	ResourceQualifierVectorView(std::nullptr_t) noexcept {}
};

struct ResourceCandidateVectorView :
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate>
{
	ResourceCandidateVectorView(std::nullptr_t) noexcept {}
};

struct ResourceContextLanguagesVectorView :
	Windows::Foundation::Collections::IVectorView<String>
{
	ResourceContextLanguagesVectorView(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

struct IndexedResourceCandidate :
	Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate
{
	IndexedResourceCandidate(std::nullptr_t) noexcept {}
};

struct ResourceIndexer :
	Windows::ApplicationModel::Resources::Management::IResourceIndexer
{
	ResourceIndexer(std::nullptr_t) noexcept {}
	ResourceIndexer();
	ResourceIndexer(Windows::Foundation::Uri const & projectRoot);
	ResourceIndexer(Windows::Foundation::Uri const & projectRoot, Windows::Foundation::Uri const & extensionDllPath);
};

struct IndexedResourceQualifier :
	Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier
{
	IndexedResourceQualifier(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

struct SearchPaneQueryLinguisticDetails :
	Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails
{
	SearchPaneQueryLinguisticDetails(std::nullptr_t) noexcept {}
};

struct SearchPaneVisibilityChangedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs
{
	SearchPaneVisibilityChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchPaneQueryChangedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs
{
	SearchPaneQueryChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchPaneQuerySubmittedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs,
	Requires<SearchPaneQuerySubmittedEventArgs, Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>
{
	SearchPaneQuerySubmittedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchPaneResultSuggestionChosenEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs
{
	SearchPaneResultSuggestionChosenEventArgs(std::nullptr_t) noexcept {}
};

struct SearchSuggestionCollection :
	Windows::ApplicationModel::Search::ISearchSuggestionCollection
{
	SearchSuggestionCollection(std::nullptr_t) noexcept {}
};

struct SearchPaneSuggestionsRequestDeferral :
	Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral
{
	SearchPaneSuggestionsRequestDeferral(std::nullptr_t) noexcept {}
};

struct SearchPaneSuggestionsRequest :
	Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest
{
	SearchPaneSuggestionsRequest(std::nullptr_t) noexcept {}
};

struct SearchPaneSuggestionsRequestedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs
{
	SearchPaneSuggestionsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct LocalContentSuggestionSettings :
	Windows::ApplicationModel::Search::ILocalContentSuggestionSettings
{
	LocalContentSuggestionSettings(std::nullptr_t) noexcept {}
	LocalContentSuggestionSettings();
};

struct SearchPane :
	Windows::ApplicationModel::Search::ISearchPane
{
	SearchPane(std::nullptr_t) noexcept {}
	static void HideThisApplication();
	static Windows::ApplicationModel::Search::SearchPane GetForCurrentView();
};

struct SearchQueryLinguisticDetails :
	Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails
{
	SearchQueryLinguisticDetails(std::nullptr_t) noexcept {}
	SearchQueryLinguisticDetails(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned queryTextCompositionStart, unsigned queryTextCompositionLength);
};

struct SearchSuggestionsRequestDeferral :
	Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral
{
	SearchSuggestionsRequestDeferral(std::nullptr_t) noexcept {}
};

struct SearchSuggestionsRequest :
	Windows::ApplicationModel::Search::ISearchSuggestionsRequest
{
	SearchSuggestionsRequest(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

struct LicenseInformation :
	Windows::ApplicationModel::Store::ILicenseInformation
{
	LicenseInformation(std::nullptr_t) noexcept {}
};

struct ListingInformation :
	Windows::ApplicationModel::Store::IListingInformation
{
	ListingInformation(std::nullptr_t) noexcept {}
};

struct PurchaseResults :
	Windows::ApplicationModel::Store::IPurchaseResults
{
	PurchaseResults(std::nullptr_t) noexcept {}
};

struct ProductPurchaseDisplayProperties :
	Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties
{
	ProductPurchaseDisplayProperties(std::nullptr_t) noexcept {}
	ProductPurchaseDisplayProperties();
	ProductPurchaseDisplayProperties(String const & name);
	template <unsigned S0> ProductPurchaseDisplayProperties(wchar_t const (&name)[S0]);
};

struct UnfulfilledConsumable :
	Windows::ApplicationModel::Store::IUnfulfilledConsumable
{
	UnfulfilledConsumable(std::nullptr_t) noexcept {}
};

struct ProductLicense :
	Windows::ApplicationModel::Store::IProductLicense
{
	ProductLicense(std::nullptr_t) noexcept {}
};

struct ProductListing :
	Windows::ApplicationModel::Store::IProductListing,
	Requires<ProductListing, Windows::ApplicationModel::Store::IProductListingWithConsumables>
{
	ProductListing(std::nullptr_t) noexcept {}
};

struct CurrentApp
{
	CurrentApp() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(String const & productId, GUID transactionId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID transactionId);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> GetUnfulfilledConsumablesAsync();
	static Windows::ApplicationModel::Store::LicenseInformation LicenseInformation();
	static Windows::Foundation::Uri LinkUri();
	static GUID AppId();
	static Windows::Foundation::IAsyncOperation<String> RequestAppPurchaseAsync(bool includeReceipt);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> LoadListingInformationAsync();
	static Windows::Foundation::IAsyncOperation<String> GetAppReceiptAsync();
	static Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(String const & productId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(wchar_t const (&productId)[S0]);
};

struct CurrentAppSimulator
{
	CurrentAppSimulator() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(String const & productId, GUID transactionId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID transactionId);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> GetUnfulfilledConsumablesAsync();
	static Windows::ApplicationModel::Store::LicenseInformation LicenseInformation();
	static Windows::Foundation::Uri LinkUri();
	static GUID AppId();
	static Windows::Foundation::IAsyncOperation<String> RequestAppPurchaseAsync(bool includeReceipt);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> LoadListingInformationAsync();
	static Windows::Foundation::IAsyncOperation<String> GetAppReceiptAsync();
	static Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(String const & productId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(wchar_t const (&productId)[S0]);
	static Windows::Foundation::IAsyncAction ReloadSimulatorAsync(Windows::Storage::StorageFile const & simulatorSettingsFile);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

struct HtmlUtilities
{
	HtmlUtilities() = delete;
	static String ConvertToText(String const & html);
	template <unsigned S0> static String ConvertToText(wchar_t const (&html)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

struct JsonArray :
	Windows::Data::Json::IJsonArray,
	Requires<JsonArray, Windows::Foundation::Collections::IVector<Windows::Data::Json::IJsonValue>, Windows::Foundation::Collections::IIterable<Windows::Data::Json::IJsonValue>>
{
	JsonArray(std::nullptr_t) noexcept {}
	JsonArray();
	static Windows::Data::Json::JsonArray Parse(String const & input);
	template <unsigned S0> static Windows::Data::Json::JsonArray Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Data::Json::JsonArray & result);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonArray & result);
};

struct JsonObject :
	Windows::Data::Json::IJsonObject,
	Requires<JsonObject, Windows::Data::Json::IJsonObjectWithDefaultValues, Windows::Foundation::Collections::IMap<String, Windows::Data::Json::IJsonValue>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Data::Json::IJsonValue>>>
{
	JsonObject(std::nullptr_t) noexcept {}
	JsonObject();
	using impl_IJsonObject::GetNamedValue;
	using impl_IJsonObject::GetNamedObject;
	using impl_IJsonObject::GetNamedArray;
	using impl_IJsonObject::GetNamedString;
	using impl_IJsonObject::GetNamedNumber;
	using impl_IJsonObject::GetNamedBoolean;
	using impl_IJsonObjectWithDefaultValues::GetNamedValue;
	using impl_IJsonObjectWithDefaultValues::GetNamedObject;
	using impl_IJsonObjectWithDefaultValues::GetNamedString;
	using impl_IJsonObjectWithDefaultValues::GetNamedArray;
	using impl_IJsonObjectWithDefaultValues::GetNamedNumber;
	using impl_IJsonObjectWithDefaultValues::GetNamedBoolean;
	static Windows::Data::Json::JsonObject Parse(String const & input);
	template <unsigned S0> static Windows::Data::Json::JsonObject Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Data::Json::JsonObject & result);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonObject & result);
};

struct JsonValue :
	Windows::Data::Json::IJsonValue
{
	JsonValue(std::nullptr_t) noexcept {}
	static Windows::Data::Json::JsonValue Parse(String const & input);
	template <unsigned S0> static Windows::Data::Json::JsonValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Data::Json::JsonValue & result);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonValue & result);
	static Windows::Data::Json::JsonValue CreateBooleanValue(bool input);
	static Windows::Data::Json::JsonValue CreateNumberValue(double input);
	static Windows::Data::Json::JsonValue CreateStringValue(String const & input);
	template <unsigned S0> static Windows::Data::Json::JsonValue CreateStringValue(wchar_t const (&input)[S0]);
};

struct JsonError
{
	JsonError() = delete;
	static Windows::Data::Json::JsonErrorStatus GetJsonStatus(int hresult);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

struct PdfPageRenderOptions :
	Windows::Data::Pdf::IPdfPageRenderOptions
{
	PdfPageRenderOptions(std::nullptr_t) noexcept {}
	PdfPageRenderOptions();
};

struct PdfPageDimensions :
	Windows::Data::Pdf::IPdfPageDimensions
{
	PdfPageDimensions(std::nullptr_t) noexcept {}
};

struct PdfPage :
	Windows::Data::Pdf::IPdfPage
{
	PdfPage(std::nullptr_t) noexcept {}
};

struct PdfDocument :
	Windows::Data::Pdf::IPdfDocument
{
	PdfDocument(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, String const & password);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&password)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, String const & password);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, wchar_t const (&password)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

struct SemanticTextQuery :
	Windows::Data::Text::ISemanticTextQuery
{
	SemanticTextQuery(std::nullptr_t) noexcept {}
	SemanticTextQuery(String const & aqsFilter);
	template <unsigned S0> SemanticTextQuery(wchar_t const (&aqsFilter)[S0]);
	SemanticTextQuery(String const & aqsFilter, String const & filterLanguage);
	template <unsigned S0, unsigned S1> SemanticTextQuery(wchar_t const (&aqsFilter)[S0], wchar_t const (&filterLanguage)[S1]);
};

struct UnicodeCharacters
{
	UnicodeCharacters() = delete;
	static unsigned GetCodepointFromSurrogatePair(unsigned highSurrogate, unsigned lowSurrogate);
	static void GetSurrogatePairFromCodepoint(unsigned codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate);
	static bool IsHighSurrogate(unsigned codepoint);
	static bool IsLowSurrogate(unsigned codepoint);
	static bool IsSupplementary(unsigned codepoint);
	static bool IsNoncharacter(unsigned codepoint);
	static bool IsWhitespace(unsigned codepoint);
	static bool IsAlphabetic(unsigned codepoint);
	static bool IsCased(unsigned codepoint);
	static bool IsUppercase(unsigned codepoint);
	static bool IsLowercase(unsigned codepoint);
	static bool IsIdStart(unsigned codepoint);
	static bool IsIdContinue(unsigned codepoint);
	static bool IsGraphemeBase(unsigned codepoint);
	static bool IsGraphemeExtend(unsigned codepoint);
	static Windows::Data::Text::UnicodeNumericType GetNumericType(unsigned codepoint);
	static Windows::Data::Text::UnicodeGeneralCategory GetGeneralCategory(unsigned codepoint);
};

struct AlternateWordForm :
	Windows::Data::Text::IAlternateWordForm
{
	AlternateWordForm(std::nullptr_t) noexcept {}
};

struct WordSegment :
	Windows::Data::Text::IWordSegment
{
	WordSegment(std::nullptr_t) noexcept {}
};

struct WordsSegmenter :
	Windows::Data::Text::IWordsSegmenter
{
	WordsSegmenter(std::nullptr_t) noexcept {}
	WordsSegmenter(String const & language);
	template <unsigned S0> WordsSegmenter(wchar_t const (&language)[S0]);
};

struct SelectableWordSegment :
	Windows::Data::Text::ISelectableWordSegment
{
	SelectableWordSegment(std::nullptr_t) noexcept {}
};

struct SelectableWordsSegmenter :
	Windows::Data::Text::ISelectableWordsSegmenter
{
	SelectableWordsSegmenter(std::nullptr_t) noexcept {}
	SelectableWordsSegmenter(String const & language);
	template <unsigned S0> SelectableWordsSegmenter(wchar_t const (&language)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

struct XmlNodeList :
	Windows::Data::Xml::Dom::IXmlNodeList
{
	XmlNodeList(std::nullptr_t) noexcept {}
};

struct XmlNamedNodeMap :
	Windows::Data::Xml::Dom::IXmlNamedNodeMap
{
	XmlNamedNodeMap(std::nullptr_t) noexcept {}
};

struct XmlDocument :
	Windows::Data::Xml::Dom::IXmlDocument,
	Requires<XmlDocument, Windows::Data::Xml::Dom::IXmlDocumentIO>
{
	XmlDocument(std::nullptr_t) noexcept {}
	XmlDocument();
	static Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromUriAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings);
};

struct XmlAttribute :
	Windows::Data::Xml::Dom::IXmlAttribute
{
	XmlAttribute(std::nullptr_t) noexcept {}
};

struct XmlDocumentType :
	Windows::Data::Xml::Dom::IXmlDocumentType
{
	XmlDocumentType(std::nullptr_t) noexcept {}
};

struct XmlDomImplementation :
	Windows::Data::Xml::Dom::IXmlDomImplementation
{
	XmlDomImplementation(std::nullptr_t) noexcept {}
};

struct XmlElement :
	Windows::Data::Xml::Dom::IXmlElement
{
	XmlElement(std::nullptr_t) noexcept {}
};

struct XmlDocumentFragment :
	Windows::Data::Xml::Dom::IXmlDocumentFragment
{
	XmlDocumentFragment(std::nullptr_t) noexcept {}
};

struct XmlText :
	Windows::Data::Xml::Dom::IXmlText
{
	XmlText(std::nullptr_t) noexcept {}
};

struct XmlComment :
	Windows::Data::Xml::Dom::IXmlComment
{
	XmlComment(std::nullptr_t) noexcept {}
};

struct XmlProcessingInstruction :
	Windows::Data::Xml::Dom::IXmlProcessingInstruction
{
	XmlProcessingInstruction(std::nullptr_t) noexcept {}
};

struct XmlEntityReference :
	Windows::Data::Xml::Dom::IXmlEntityReference
{
	XmlEntityReference(std::nullptr_t) noexcept {}
};

struct XmlCDataSection :
	Windows::Data::Xml::Dom::IXmlCDataSection
{
	XmlCDataSection(std::nullptr_t) noexcept {}
};

struct XmlLoadSettings :
	Windows::Data::Xml::Dom::IXmlLoadSettings
{
	XmlLoadSettings(std::nullptr_t) noexcept {}
	XmlLoadSettings();
};

struct DtdNotation :
	Windows::Data::Xml::Dom::IDtdNotation
{
	DtdNotation(std::nullptr_t) noexcept {}
};

struct DtdEntity :
	Windows::Data::Xml::Dom::IDtdEntity
{
	DtdEntity(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

struct XsltProcessor :
	Windows::Data::Xml::Xsl::IXsltProcessor
{
	XsltProcessor(std::nullptr_t) noexcept {}
	XsltProcessor(Windows::Data::Xml::Dom::XmlDocument const & document);
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

struct DeviceUseDetails :
	Windows::Devices::Background::IDeviceUseDetails
{
	DeviceUseDetails(std::nullptr_t) noexcept {}
};

struct DeviceServicingDetails :
	Windows::Devices::Background::IDeviceServicingDetails
{
	DeviceServicingDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

struct KnownDeviceTypes
{
	KnownDeviceTypes() = delete;
	static unsigned short Unknown();
};

struct IOControlCode :
	Windows::Devices::Custom::IIOControlCode
{
	IOControlCode(std::nullptr_t) noexcept {}
	IOControlCode(unsigned short deviceType, unsigned short function, Windows::Devices::Custom::IOControlAccessMode accessMode, Windows::Devices::Custom::IOControlBufferingMethod bufferingMethod);
};

struct CustomDevice :
	Windows::Devices::Custom::ICustomDevice
{
	CustomDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector(GUID classGuid);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> FromIdAsync(String const & deviceId, Windows::Devices::Custom::DeviceAccessMode desiredAccess, Windows::Devices::Custom::DeviceSharingMode sharingMode);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Devices::Custom::DeviceAccessMode desiredAccess, Windows::Devices::Custom::DeviceSharingMode sharingMode);
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

struct DeviceThumbnail :
	Windows::Storage::Streams::IRandomAccessStreamWithContentType
{
	DeviceThumbnail(std::nullptr_t) noexcept {}
};

struct EnclosureLocation :
	Windows::Devices::Enumeration::IEnclosureLocation
{
	EnclosureLocation(std::nullptr_t) noexcept {}
};

struct DeviceInformationUpdate :
	Windows::Devices::Enumeration::IDeviceInformationUpdate
{
	DeviceInformationUpdate(std::nullptr_t) noexcept {}
};

struct DeviceInformationCollection :
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceInformation>
{
	DeviceInformationCollection(std::nullptr_t) noexcept {}
};

struct DeviceWatcher :
	Windows::Devices::Enumeration::IDeviceWatcher
{
	DeviceWatcher(std::nullptr_t) noexcept {}
};

struct DeviceInformation :
	Windows::Devices::Enumeration::IDeviceInformation
{
	DeviceInformation(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(wchar_t const (&deviceId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(String const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(Windows::Devices::Enumeration::DeviceClass deviceClass);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(String const & aqsFilter);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(wchar_t const (&aqsFilter)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher();
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(Windows::Devices::Enumeration::DeviceClass deviceClass);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(String const & aqsFilter);
	template <unsigned S0> static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(wchar_t const (&aqsFilter)[S0]);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	template <unsigned S0> static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
};

struct DeviceAccessChangedEventArgs :
	Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs
{
	DeviceAccessChangedEventArgs(std::nullptr_t) noexcept {}
};

struct DeviceAccessInformation :
	Windows::Devices::Enumeration::IDeviceAccessInformation
{
	DeviceAccessInformation(std::nullptr_t) noexcept {}
	static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(String const & deviceId);
	template <unsigned S0> static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(wchar_t const (&deviceId)[S0]);
	static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClassId(GUID deviceClassId);
	static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass deviceClass);
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

struct PnpObjectUpdate :
	Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate
{
	PnpObjectUpdate(std::nullptr_t) noexcept {}
};

struct PnpObjectCollection :
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::Pnp::PnpObject>
{
	PnpObjectCollection(std::nullptr_t) noexcept {}
};

struct PnpObjectWatcher :
	Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher
{
	PnpObjectWatcher(std::nullptr_t) noexcept {}
};

struct PnpObject :
	Windows::Devices::Enumeration::Pnp::IPnpObject
{
	PnpObject(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, String const & id, Windows::Foundation::Collections::IIterable<String> const & requestedProperties);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, wchar_t const (&id)[S0], Windows::Foundation::Collections::IIterable<String> const & requestedProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]);
	static Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties);
	static Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter);
	template <unsigned S0> static Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]);
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

struct Geopoint :
	Windows::Devices::Geolocation::IGeopoint
{
	Geopoint(std::nullptr_t) noexcept {}
	Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position);
	Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem);
	Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId);
};

struct GeocoordinateSatelliteData :
	Windows::Devices::Geolocation::IGeocoordinateSatelliteData
{
	GeocoordinateSatelliteData(std::nullptr_t) noexcept {}
};

struct Geocoordinate :
	Windows::Devices::Geolocation::IGeocoordinate,
	Requires<Geocoordinate, Windows::Devices::Geolocation::IGeocoordinateWithPositionData, Windows::Devices::Geolocation::IGeocoordinateWithPoint>
{
	Geocoordinate(std::nullptr_t) noexcept {}
};

struct CivicAddress :
	Windows::Devices::Geolocation::ICivicAddress
{
	CivicAddress(std::nullptr_t) noexcept {}
};

struct Geoposition :
	Windows::Devices::Geolocation::IGeoposition
{
	Geoposition(std::nullptr_t) noexcept {}
};

struct PositionChangedEventArgs :
	Windows::Devices::Geolocation::IPositionChangedEventArgs
{
	PositionChangedEventArgs(std::nullptr_t) noexcept {}
};

struct StatusChangedEventArgs :
	Windows::Devices::Geolocation::IStatusChangedEventArgs
{
	StatusChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Geolocator :
	Windows::Devices::Geolocation::IGeolocator,
	Requires<Geolocator, Windows::Devices::Geolocation::IGeolocatorWithScalarAccuracy>
{
	Geolocator(std::nullptr_t) noexcept {}
	Geolocator();
};

struct Geocircle :
	Windows::Devices::Geolocation::IGeocircle
{
	Geocircle(std::nullptr_t) noexcept {}
	Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius);
	Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem);
	Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId);
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

struct Geofence :
	Windows::Devices::Geolocation::Geofencing::IGeofence
{
	Geofence(std::nullptr_t) noexcept {}
	Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape);
	template <unsigned S0> Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape);
	Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse);
	template <unsigned S0> Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse);
	Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime);
	template <unsigned S0> Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime);
	Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration);
	template <unsigned S0> Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration);
};

struct GeofenceMonitor :
	Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor
{
	GeofenceMonitor(std::nullptr_t) noexcept {}
	static Windows::Devices::Geolocation::Geofencing::GeofenceMonitor Current();
};

struct GeofenceStateChangeReport :
	Windows::Devices::Geolocation::Geofencing::IGeofenceStateChangeReport
{
	GeofenceStateChangeReport(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

struct HidDevice :
	Windows::Devices::HumanInterfaceDevice::IHidDevice
{
	HidDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector(unsigned short usagePage, unsigned short usageId);
	static String GetDeviceSelector(unsigned short usagePage, unsigned short usageId, unsigned short vendorId, unsigned short productId);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> FromIdAsync(String const & deviceId, Windows::Storage::FileAccessMode accessMode);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Storage::FileAccessMode accessMode);
};

struct HidInputReport :
	Windows::Devices::HumanInterfaceDevice::IHidInputReport
{
	HidInputReport(std::nullptr_t) noexcept {}
};

struct HidFeatureReport :
	Windows::Devices::HumanInterfaceDevice::IHidFeatureReport
{
	HidFeatureReport(std::nullptr_t) noexcept {}
};

struct HidOutputReport :
	Windows::Devices::HumanInterfaceDevice::IHidOutputReport
{
	HidOutputReport(std::nullptr_t) noexcept {}
};

struct HidBooleanControlDescription :
	Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription
{
	HidBooleanControlDescription(std::nullptr_t) noexcept {}
};

struct HidNumericControlDescription :
	Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription
{
	HidNumericControlDescription(std::nullptr_t) noexcept {}
};

struct HidInputReportReceivedEventArgs :
	Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs
{
	HidInputReportReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct HidCollection :
	Windows::Devices::HumanInterfaceDevice::IHidCollection
{
	HidCollection(std::nullptr_t) noexcept {}
};

struct HidBooleanControl :
	Windows::Devices::HumanInterfaceDevice::IHidBooleanControl
{
	HidBooleanControl(std::nullptr_t) noexcept {}
};

struct HidNumericControl :
	Windows::Devices::HumanInterfaceDevice::IHidNumericControl
{
	HidNumericControl(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

struct PointerDevice :
	Windows::Devices::Input::IPointerDevice
{
	PointerDevice(std::nullptr_t) noexcept {}
	static Windows::Devices::Input::PointerDevice GetPointerDevice(unsigned pointerId);
	static Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> GetPointerDevices();
};

struct MouseDevice :
	Windows::Devices::Input::IMouseDevice
{
	MouseDevice(std::nullptr_t) noexcept {}
	static Windows::Devices::Input::MouseDevice GetForCurrentView();
};

struct MouseEventArgs :
	Windows::Devices::Input::IMouseEventArgs
{
	MouseEventArgs(std::nullptr_t) noexcept {}
};

struct MouseCapabilities :
	Windows::Devices::Input::IMouseCapabilities
{
	MouseCapabilities(std::nullptr_t) noexcept {}
	MouseCapabilities();
};

struct KeyboardCapabilities :
	Windows::Devices::Input::IKeyboardCapabilities
{
	KeyboardCapabilities(std::nullptr_t) noexcept {}
	KeyboardCapabilities();
};

struct TouchCapabilities :
	Windows::Devices::Input::ITouchCapabilities
{
	TouchCapabilities(std::nullptr_t) noexcept {}
	TouchCapabilities();
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

struct UnifiedPosErrorData :
	Windows::Devices::PointOfService::IUnifiedPosErrorData
{
	UnifiedPosErrorData(std::nullptr_t) noexcept {}
};

struct BarcodeScannerStatusUpdatedEventArgs :
	Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs
{
	BarcodeScannerStatusUpdatedEventArgs(std::nullptr_t) noexcept {}
};

struct BarcodeSymbologies
{
	BarcodeSymbologies() = delete;
	static unsigned Unknown();
	static unsigned Ean8();
	static unsigned Ean8Add2();
	static unsigned Ean8Add5();
	static unsigned Eanv();
	static unsigned EanvAdd2();
	static unsigned EanvAdd5();
	static unsigned Ean13();
	static unsigned Ean13Add2();
	static unsigned Ean13Add5();
	static unsigned Isbn();
	static unsigned IsbnAdd5();
	static unsigned Ismn();
	static unsigned IsmnAdd2();
	static unsigned IsmnAdd5();
	static unsigned Issn();
	static unsigned IssnAdd2();
	static unsigned IssnAdd5();
	static unsigned Ean99();
	static unsigned Ean99Add2();
	static unsigned Ean99Add5();
	static unsigned Upca();
	static unsigned UpcaAdd2();
	static unsigned UpcaAdd5();
	static unsigned Upce();
	static unsigned UpceAdd2();
	static unsigned UpceAdd5();
	static unsigned UpcCoupon();
	static unsigned TfStd();
	static unsigned TfDis();
	static unsigned TfInt();
	static unsigned TfInd();
	static unsigned TfMat();
	static unsigned TfIata();
	static unsigned Gs1DatabarType1();
	static unsigned Gs1DatabarType2();
	static unsigned Gs1DatabarType3();
	static unsigned Code39();
	static unsigned Code39Ex();
	static unsigned Trioptic39();
	static unsigned Code32();
	static unsigned Pzn();
	static unsigned Code93();
	static unsigned Code93Ex();
	static unsigned Code128();
	static unsigned Gs1128();
	static unsigned Gs1128Coupon();
	static unsigned UccEan128();
	static unsigned Sisac();
	static unsigned Isbt();
	static unsigned Codabar();
	static unsigned Code11();
	static unsigned Msi();
	static unsigned Plessey();
	static unsigned Telepen();
	static unsigned Code16k();
	static unsigned CodablockA();
	static unsigned CodablockF();
	static unsigned Codablock128();
	static unsigned Code49();
	static unsigned Aztec();
	static unsigned DataCode();
	static unsigned DataMatrix();
	static unsigned HanXin();
	static unsigned Maxicode();
	static unsigned MicroPdf417();
	static unsigned MicroQr();
	static unsigned Pdf417();
	static unsigned Qr();
	static unsigned MsTag();
	static unsigned Ccab();
	static unsigned Ccc();
	static unsigned Tlc39();
	static unsigned AusPost();
	static unsigned CanPost();
	static unsigned ChinaPost();
	static unsigned DutchKix();
	static unsigned InfoMail();
	static unsigned ItalianPost25();
	static unsigned ItalianPost39();
	static unsigned JapanPost();
	static unsigned KoreanPost();
	static unsigned SwedenPost();
	static unsigned UkPost();
	static unsigned UsIntelligent();
	static unsigned UsIntelligentPkg();
	static unsigned UsPlanet();
	static unsigned UsPostNet();
	static unsigned Us4StateFics();
	static unsigned OcrA();
	static unsigned OcrB();
	static unsigned Micr();
	static unsigned ExtendedBase();
	static String GetName(unsigned scanDataType);
};

struct BarcodeScannerReport :
	Windows::Devices::PointOfService::IBarcodeScannerReport
{
	BarcodeScannerReport(std::nullptr_t) noexcept {}
};

struct BarcodeScannerDataReceivedEventArgs :
	Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs
{
	BarcodeScannerDataReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct BarcodeScannerErrorOccurredEventArgs :
	Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs
{
	BarcodeScannerErrorOccurredEventArgs(std::nullptr_t) noexcept {}
};

struct BarcodeScannerImagePreviewReceivedEventArgs :
	Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs
{
	BarcodeScannerImagePreviewReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct BarcodeScannerCapabilities :
	Windows::Devices::PointOfService::IBarcodeScannerCapabilities
{
	BarcodeScannerCapabilities(std::nullptr_t) noexcept {}
};

struct BarcodeScanner :
	Windows::Devices::PointOfService::IBarcodeScanner
{
	BarcodeScanner(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> GetDefaultAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> FromIdAsync(wchar_t const (&deviceId)[S0]);
	static String GetDeviceSelector();
};

struct ClaimedBarcodeScanner :
	Windows::Devices::PointOfService::IClaimedBarcodeScanner
{
	ClaimedBarcodeScanner(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderEncryptionAlgorithms
{
	MagneticStripeReaderEncryptionAlgorithms() = delete;
	static unsigned None();
	static unsigned TripleDesDukpt();
	static unsigned ExtendedBase();
};

struct MagneticStripeReaderCardTypes
{
	MagneticStripeReaderCardTypes() = delete;
	static unsigned Unknown();
	static unsigned Bank();
	static unsigned Aamva();
	static unsigned ExtendedBase();
};

struct MagneticStripeReaderTrackData :
	Windows::Devices::PointOfService::IMagneticStripeReaderTrackData
{
	MagneticStripeReaderTrackData(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderReport :
	Windows::Devices::PointOfService::IMagneticStripeReaderReport
{
	MagneticStripeReaderReport(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderBankCardDataReceivedEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs
{
	MagneticStripeReaderBankCardDataReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderAamvaCardDataReceivedEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs
{
	MagneticStripeReaderAamvaCardDataReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs
{
	MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderErrorOccurredEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs
{
	MagneticStripeReaderErrorOccurredEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderStatusUpdatedEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs
{
	MagneticStripeReaderStatusUpdatedEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderCapabilities :
	Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities
{
	MagneticStripeReaderCapabilities(std::nullptr_t) noexcept {}
};

struct ClaimedMagneticStripeReader :
	Windows::Devices::PointOfService::IClaimedMagneticStripeReader
{
	ClaimedMagneticStripeReader(std::nullptr_t) noexcept {}
};

struct MagneticStripeReader :
	Windows::Devices::PointOfService::IMagneticStripeReader
{
	MagneticStripeReader(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> GetDefaultAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> FromIdAsync(wchar_t const (&deviceId)[S0]);
	static String GetDeviceSelector();
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

struct StorageDevice
{
	StorageDevice() = delete;
	static Windows::Storage::StorageFolder FromId(String const & deviceId);
	template <unsigned S0> static Windows::Storage::StorageFolder FromId(wchar_t const (&deviceId)[S0]);
	static String GetDeviceSelector();
};

struct ServiceDevice
{
	ServiceDevice() = delete;
	static String GetDeviceSelector(Windows::Devices::Portable::ServiceDeviceType serviceType);
	static String GetDeviceSelectorFromServiceId(GUID serviceId);
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

struct PrintTaskConfigurationSaveRequestedDeferral :
	Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral
{
	PrintTaskConfigurationSaveRequestedDeferral(std::nullptr_t) noexcept {}
};

struct PrintTaskConfigurationSaveRequest :
	Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest
{
	PrintTaskConfigurationSaveRequest(std::nullptr_t) noexcept {}
};

struct PrintTaskConfigurationSaveRequestedEventArgs :
	Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs
{
	PrintTaskConfigurationSaveRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskConfiguration :
	Windows::Devices::Printers::Extensions::IPrintTaskConfiguration
{
	PrintTaskConfiguration(std::nullptr_t) noexcept {}
};

struct PrintNotificationEventDetails :
	Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails
{
	PrintNotificationEventDetails(std::nullptr_t) noexcept {}
};

struct PrintExtensionContext
{
	PrintExtensionContext() = delete;
	static IInspectable FromDeviceId(String const & deviceId);
	template <unsigned S0> static IInspectable FromDeviceId(wchar_t const (&deviceId)[S0]);
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

struct Accelerometer :
	Windows::Devices::Sensors::IAccelerometer
{
	Accelerometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Accelerometer GetDefault();
};

struct AccelerometerReading :
	Windows::Devices::Sensors::IAccelerometerReading
{
	AccelerometerReading(std::nullptr_t) noexcept {}
};

struct AccelerometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs
{
	AccelerometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct AccelerometerShakenEventArgs :
	Windows::Devices::Sensors::IAccelerometerShakenEventArgs
{
	AccelerometerShakenEventArgs(std::nullptr_t) noexcept {}
};

struct Inclinometer :
	Windows::Devices::Sensors::IInclinometer
{
	Inclinometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Inclinometer GetDefault();
};

struct InclinometerReading :
	Windows::Devices::Sensors::IInclinometerReading,
	Requires<InclinometerReading, Windows::Devices::Sensors::IInclinometerReadingYawAccuracy>
{
	InclinometerReading(std::nullptr_t) noexcept {}
};

struct InclinometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs
{
	InclinometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Gyrometer :
	Windows::Devices::Sensors::IGyrometer
{
	Gyrometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Gyrometer GetDefault();
};

struct GyrometerReading :
	Windows::Devices::Sensors::IGyrometerReading
{
	GyrometerReading(std::nullptr_t) noexcept {}
};

struct GyrometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs
{
	GyrometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Compass :
	Windows::Devices::Sensors::ICompass
{
	Compass(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Compass GetDefault();
};

struct CompassReading :
	Windows::Devices::Sensors::ICompassReading,
	Requires<CompassReading, Windows::Devices::Sensors::ICompassReadingHeadingAccuracy>
{
	CompassReading(std::nullptr_t) noexcept {}
};

struct CompassReadingChangedEventArgs :
	Windows::Devices::Sensors::ICompassReadingChangedEventArgs
{
	CompassReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct LightSensor :
	Windows::Devices::Sensors::ILightSensor
{
	LightSensor(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::LightSensor GetDefault();
};

struct LightSensorReading :
	Windows::Devices::Sensors::ILightSensorReading
{
	LightSensorReading(std::nullptr_t) noexcept {}
};

struct LightSensorReadingChangedEventArgs :
	Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs
{
	LightSensorReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SensorRotationMatrix :
	Windows::Devices::Sensors::ISensorRotationMatrix
{
	SensorRotationMatrix(std::nullptr_t) noexcept {}
};

struct SensorQuaternion :
	Windows::Devices::Sensors::ISensorQuaternion
{
	SensorQuaternion(std::nullptr_t) noexcept {}
};

struct OrientationSensor :
	Windows::Devices::Sensors::IOrientationSensor
{
	OrientationSensor(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::OrientationSensor GetDefault();
};

struct OrientationSensorReading :
	Windows::Devices::Sensors::IOrientationSensorReading,
	Requires<OrientationSensorReading, Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy>
{
	OrientationSensorReading(std::nullptr_t) noexcept {}
};

struct OrientationSensorReadingChangedEventArgs :
	Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs
{
	OrientationSensorReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SimpleOrientationSensor :
	Windows::Devices::Sensors::ISimpleOrientationSensor
{
	SimpleOrientationSensor(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::SimpleOrientationSensor GetDefault();
};

struct SimpleOrientationSensorOrientationChangedEventArgs :
	Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs
{
	SimpleOrientationSensorOrientationChangedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

struct SmartCardReader :
	Windows::Devices::SmartCards::ISmartCardReader
{
	SmartCardReader(std::nullptr_t) noexcept {}
	static String GetDeviceSelector();
	static String GetDeviceSelector(Windows::Devices::SmartCards::SmartCardReaderKind kind);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> FromIdAsync(wchar_t const (&deviceId)[S0]);
};

struct SmartCard :
	Windows::Devices::SmartCards::ISmartCard
{
	SmartCard(std::nullptr_t) noexcept {}
};

struct CardAddedEventArgs :
	Windows::Devices::SmartCards::ICardAddedEventArgs
{
	CardAddedEventArgs(std::nullptr_t) noexcept {}
};

struct CardRemovedEventArgs :
	Windows::Devices::SmartCards::ICardRemovedEventArgs
{
	CardRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct SmartCardProvisioning :
	Windows::Devices::SmartCards::ISmartCardProvisioning
{
	SmartCardProvisioning(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> FromSmartCardAsync(Windows::Devices::SmartCards::SmartCard const & card);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID cardId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID cardId);
	static Windows::Foundation::IAsyncOperation<bool> RequestVirtualSmartCardDeletionAsync(Windows::Devices::SmartCards::SmartCard const & card);
};

struct SmartCardPinPolicy :
	Windows::Devices::SmartCards::ISmartCardPinPolicy
{
	SmartCardPinPolicy(std::nullptr_t) noexcept {}
	SmartCardPinPolicy();
};

struct SmartCardChallengeContext :
	Windows::Devices::SmartCards::ISmartCardChallengeContext
{
	SmartCardChallengeContext(std::nullptr_t) noexcept {}
};

struct SmartCardPinResetRequest :
	Windows::Devices::SmartCards::ISmartCardPinResetRequest
{
	SmartCardPinResetRequest(std::nullptr_t) noexcept {}
};

struct SmartCardPinResetDeferral :
	Windows::Devices::SmartCards::ISmartCardPinResetDeferral
{
	SmartCardPinResetDeferral(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

struct SmsBinaryMessage :
	Windows::Devices::Sms::ISmsBinaryMessage
{
	SmsBinaryMessage(std::nullptr_t) noexcept {}
	SmsBinaryMessage();
};

struct SmsTextMessage :
	Windows::Devices::Sms::ISmsTextMessage
{
	SmsTextMessage(std::nullptr_t) noexcept {}
	SmsTextMessage();
	static Windows::Devices::Sms::SmsTextMessage FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage);
};

struct DeleteSmsMessageOperation :
	Windows::Foundation::IAsyncAction
{
	DeleteSmsMessageOperation(std::nullptr_t) noexcept {}
};

struct DeleteSmsMessagesOperation :
	Windows::Foundation::IAsyncAction
{
	DeleteSmsMessagesOperation(std::nullptr_t) noexcept {}
};

struct GetSmsMessageOperation :
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage>
{
	GetSmsMessageOperation(std::nullptr_t) noexcept {}
};

struct GetSmsMessagesOperation :
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int>
{
	GetSmsMessagesOperation(std::nullptr_t) noexcept {}
};

struct SmsDeviceMessageStore :
	Windows::Devices::Sms::ISmsDeviceMessageStore
{
	SmsDeviceMessageStore(std::nullptr_t) noexcept {}
};

struct SendSmsMessageOperation :
	Windows::Foundation::IAsyncAction
{
	SendSmsMessageOperation(std::nullptr_t) noexcept {}
};

struct SmsMessageReceivedEventArgs :
	Windows::Devices::Sms::ISmsMessageReceivedEventArgs
{
	SmsMessageReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct SmsDevice :
	Windows::Devices::Sms::ISmsDevice
{
	SmsDevice(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(String const & networkAccountId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(wchar_t const (&networkAccountId)[S0]);
	static String GetDeviceSelector();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(wchar_t const (&deviceId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> GetDefaultAsync();
};

struct GetSmsDeviceOperation :
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice>
{
	GetSmsDeviceOperation(std::nullptr_t) noexcept {}
};

struct SmsReceivedEventDetails :
	Windows::Devices::Sms::ISmsReceivedEventDetails,
	Requires<SmsReceivedEventDetails, Windows::Devices::Sms::ISmsReceivedEventDetails2>
{
	SmsReceivedEventDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

struct UsbControlRequestType :
	Windows::Devices::Usb::IUsbControlRequestType
{
	UsbControlRequestType(std::nullptr_t) noexcept {}
	UsbControlRequestType();
};

struct UsbSetupPacket :
	Windows::Devices::Usb::IUsbSetupPacket
{
	UsbSetupPacket(std::nullptr_t) noexcept {}
	UsbSetupPacket();
	UsbSetupPacket(Windows::Storage::Streams::IBuffer const & eightByteBuffer);
};

struct UsbDeviceClass :
	Windows::Devices::Usb::IUsbDeviceClass
{
	UsbDeviceClass(std::nullptr_t) noexcept {}
	UsbDeviceClass();
};

struct UsbDeviceClasses :
	Windows::Devices::Usb::IUsbDeviceClasses
{
	UsbDeviceClasses(std::nullptr_t) noexcept {}
	static Windows::Devices::Usb::UsbDeviceClass CdcControl();
	static Windows::Devices::Usb::UsbDeviceClass Physical();
	static Windows::Devices::Usb::UsbDeviceClass PersonalHealthcare();
	static Windows::Devices::Usb::UsbDeviceClass ActiveSync();
	static Windows::Devices::Usb::UsbDeviceClass PalmSync();
	static Windows::Devices::Usb::UsbDeviceClass DeviceFirmwareUpdate();
	static Windows::Devices::Usb::UsbDeviceClass Irda();
	static Windows::Devices::Usb::UsbDeviceClass Measurement();
	static Windows::Devices::Usb::UsbDeviceClass VendorSpecific();
};

struct UsbDevice :
	Windows::Devices::Usb::IUsbDevice
{
	UsbDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector(unsigned vendorId, unsigned productId, GUID winUsbInterfaceClass);
	static String GetDeviceSelector(GUID winUsbInterfaceClass);
	static String GetDeviceSelector(unsigned vendorId, unsigned productId);
	static String GetDeviceClassSelector(Windows::Devices::Usb::UsbDeviceClass const & usbClass);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> FromIdAsync(wchar_t const (&deviceId)[S0]);
};

struct UsbInterface :
	Windows::Devices::Usb::IUsbInterface
{
	UsbInterface(std::nullptr_t) noexcept {}
};

struct UsbDeviceDescriptor :
	Windows::Devices::Usb::IUsbDeviceDescriptor
{
	UsbDeviceDescriptor(std::nullptr_t) noexcept {}
};

struct UsbConfiguration :
	Windows::Devices::Usb::IUsbConfiguration
{
	UsbConfiguration(std::nullptr_t) noexcept {}
};

struct UsbDescriptor :
	Windows::Devices::Usb::IUsbDescriptor
{
	UsbDescriptor(std::nullptr_t) noexcept {}
};

struct UsbConfigurationDescriptor :
	Windows::Devices::Usb::IUsbConfigurationDescriptor
{
	UsbConfigurationDescriptor(std::nullptr_t) noexcept {}
	static bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbConfigurationDescriptor & parsed);
	static Windows::Devices::Usb::UsbConfigurationDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor);
};

struct UsbInterfaceDescriptor :
	Windows::Devices::Usb::IUsbInterfaceDescriptor
{
	UsbInterfaceDescriptor(std::nullptr_t) noexcept {}
	static bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbInterfaceDescriptor & parsed);
	static Windows::Devices::Usb::UsbInterfaceDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor);
};

struct UsbBulkInEndpointDescriptor :
	Windows::Devices::Usb::IUsbBulkInEndpointDescriptor
{
	UsbBulkInEndpointDescriptor(std::nullptr_t) noexcept {}
};

struct UsbInterruptInEndpointDescriptor :
	Windows::Devices::Usb::IUsbInterruptInEndpointDescriptor
{
	UsbInterruptInEndpointDescriptor(std::nullptr_t) noexcept {}
};

struct UsbBulkOutEndpointDescriptor :
	Windows::Devices::Usb::IUsbBulkOutEndpointDescriptor
{
	UsbBulkOutEndpointDescriptor(std::nullptr_t) noexcept {}
};

struct UsbInterruptOutEndpointDescriptor :
	Windows::Devices::Usb::IUsbInterruptOutEndpointDescriptor
{
	UsbInterruptOutEndpointDescriptor(std::nullptr_t) noexcept {}
};

struct UsbEndpointDescriptor :
	Windows::Devices::Usb::IUsbEndpointDescriptor
{
	UsbEndpointDescriptor(std::nullptr_t) noexcept {}
	static bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbEndpointDescriptor & parsed);
	static Windows::Devices::Usb::UsbEndpointDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor);
};

struct UsbInterruptInEventArgs :
	Windows::Devices::Usb::IUsbInterruptInEventArgs
{
	UsbInterruptInEventArgs(std::nullptr_t) noexcept {}
};

struct UsbInterruptInPipe :
	Windows::Devices::Usb::IUsbInterruptInPipe
{
	UsbInterruptInPipe(std::nullptr_t) noexcept {}
};

struct UsbBulkInPipe :
	Windows::Devices::Usb::IUsbBulkInPipe
{
	UsbBulkInPipe(std::nullptr_t) noexcept {}
};

struct UsbBulkOutPipe :
	Windows::Devices::Usb::IUsbBulkOutPipe
{
	UsbBulkOutPipe(std::nullptr_t) noexcept {}
};

struct UsbInterruptOutPipe :
	Windows::Devices::Usb::IUsbInterruptOutPipe
{
	UsbInterruptOutPipe(std::nullptr_t) noexcept {}
};

struct UsbInterfaceSetting :
	Windows::Devices::Usb::IUsbInterfaceSetting
{
	UsbInterfaceSetting(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

struct WiFiDirectDevice :
	Windows::Devices::WiFiDirect::IWiFiDirectDevice
{
	WiFiDirectDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> FromIdAsync(wchar_t const (&deviceId)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Foundation {

struct WwwFormUrlDecoder :
	Windows::Foundation::IWwwFormUrlDecoderRuntimeClass
{
	WwwFormUrlDecoder(std::nullptr_t) noexcept {}
	WwwFormUrlDecoder(String const & query);
	template <unsigned S0> WwwFormUrlDecoder(wchar_t const (&query)[S0]);
};

struct Uri :
	Windows::Foundation::IUriRuntimeClass,
	Requires<Uri, Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri, Windows::Foundation::IStringable>
{
	Uri(std::nullptr_t) noexcept {}
	Uri(String const & uri);
	template <unsigned S0> Uri(wchar_t const (&uri)[S0]);
	Uri(String const & baseUri, String const & relativeUri);
	template <unsigned S0, unsigned S1> Uri(wchar_t const (&baseUri)[S0], wchar_t const (&relativeUri)[S1]);
	static String UnescapeComponent(String const & toUnescape);
	template <unsigned S0> static String UnescapeComponent(wchar_t const (&toUnescape)[S0]);
	static String EscapeComponent(String const & toEscape);
	template <unsigned S0> static String EscapeComponent(wchar_t const (&toEscape)[S0]);
};

struct WwwFormUrlDecoderEntry :
	Windows::Foundation::IWwwFormUrlDecoderEntry
{
	WwwFormUrlDecoderEntry(std::nullptr_t) noexcept {}
};

struct PropertyValue
{
	PropertyValue() = delete;
	static IInspectable CreateEmpty();
	static IInspectable CreateUInt8(byte value);
	static IInspectable CreateInt16(short value);
	static IInspectable CreateUInt16(unsigned short value);
	static IInspectable CreateInt32(int value);
	static IInspectable CreateUInt32(unsigned value);
	static IInspectable CreateInt64(long long value);
	static IInspectable CreateUInt64(unsigned long long value);
	static IInspectable CreateSingle(float value);
	static IInspectable CreateDouble(double value);
	static IInspectable CreateChar16(wchar_t value);
	static IInspectable CreateBoolean(bool value);
	static IInspectable CreateString(String const & value);
	template <unsigned S0> static IInspectable CreateString(wchar_t const (&value)[S0]);
	static IInspectable CreateInspectable(IInspectable const & value);
	static IInspectable CreateGuid(GUID value);
	static IInspectable CreateDateTime(Windows::Foundation::DateTime const & value);
	static IInspectable CreateTimeSpan(Windows::Foundation::TimeSpan const & value);
	static IInspectable CreatePoint(Windows::Foundation::Point const & value);
	static IInspectable CreateSize(Windows::Foundation::Size const & value);
	static IInspectable CreateRect(Windows::Foundation::Rect const & value);
};

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

struct PropertySet :
	Windows::Foundation::Collections::IPropertySet
{
	PropertySet(std::nullptr_t) noexcept {}
	PropertySet();
};

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

struct TracingStatusChangedEventArgs :
	Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs
{
	TracingStatusChangedEventArgs(std::nullptr_t) noexcept {}
};

struct AsyncCausalityTracer
{
	AsyncCausalityTracer() = delete;
	static void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, String const & operationName, unsigned long long relatedContext);
	template <unsigned S0> static void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, wchar_t const (&operationName)[S0], unsigned long long relatedContext);
	static void TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, AsyncStatus status);
	static void TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalityRelation relation);
	static void TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork work);
	static void TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, Windows::Foundation::Diagnostics::CausalitySynchronousWork work);
	static EventRegistrationToken TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken TracingStatusChanged(F handler);
	static void TracingStatusChanged(EventRegistrationToken cookie);
};

struct RuntimeBrokerErrorSettings :
	Windows::Foundation::Diagnostics::IErrorReportingSettings
{
	RuntimeBrokerErrorSettings(std::nullptr_t) noexcept {}
	RuntimeBrokerErrorSettings();
};

struct LoggingChannel :
	Windows::Foundation::Diagnostics::ILoggingChannel
{
	LoggingChannel(std::nullptr_t) noexcept {}
	LoggingChannel(String const & name);
	template <unsigned S0> LoggingChannel(wchar_t const (&name)[S0]);
};

struct LoggingActivity :
	Windows::Foundation::Diagnostics::ILoggingActivity
{
	LoggingActivity(std::nullptr_t) noexcept {}
	LoggingActivity(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel);
	template <unsigned S0> LoggingActivity(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel);
	LoggingActivity(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level);
	template <unsigned S0> LoggingActivity(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level);
};

struct LoggingSession :
	Windows::Foundation::Diagnostics::ILoggingSession
{
	LoggingSession(std::nullptr_t) noexcept {}
	LoggingSession(String const & name);
	template <unsigned S0> LoggingSession(wchar_t const (&name)[S0]);
};

struct LogFileGeneratedEventArgs :
	Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs
{
	LogFileGeneratedEventArgs(std::nullptr_t) noexcept {}
};

struct FileLoggingSession :
	Windows::Foundation::Diagnostics::IFileLoggingSession
{
	FileLoggingSession(std::nullptr_t) noexcept {}
	FileLoggingSession(String const & name);
	template <unsigned S0> FileLoggingSession(wchar_t const (&name)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Globalization {

struct JapanesePhoneme :
	Windows::Globalization::IJapanesePhoneme
{
	JapanesePhoneme(std::nullptr_t) noexcept {}
};

struct JapanesePhoneticAnalyzer
{
	JapanesePhoneticAnalyzer() = delete;
	static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(String const & input);
	template <unsigned S0> static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(wchar_t const (&input)[S0]);
	static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(String const & input, bool monoRuby);
	template <unsigned S0> static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(wchar_t const (&input)[S0], bool monoRuby);
};

struct CalendarIdentifiers
{
	CalendarIdentifiers() = delete;
	static String Gregorian();
	static String Hebrew();
	static String Hijri();
	static String Japanese();
	static String Julian();
	static String Korean();
	static String Taiwan();
	static String Thai();
	static String UmAlQura();
};

struct ClockIdentifiers
{
	ClockIdentifiers() = delete;
	static String TwelveHour();
	static String TwentyFourHour();
};

struct NumeralSystemIdentifiers
{
	NumeralSystemIdentifiers() = delete;
	static String Arab();
	static String ArabExt();
	static String Bali();
	static String Beng();
	static String Cham();
	static String Deva();
	static String FullWide();
	static String Gujr();
	static String Guru();
	static String HaniDec();
	static String Java();
	static String Kali();
	static String Khmr();
	static String Knda();
	static String Lana();
	static String LanaTham();
	static String Laoo();
	static String Latn();
	static String Lepc();
	static String Limb();
	static String Mlym();
	static String Mong();
	static String Mtei();
	static String Mymr();
	static String MymrShan();
	static String Nkoo();
	static String Olck();
	static String Orya();
	static String Saur();
	static String Sund();
	static String Talu();
	static String TamlDec();
	static String Telu();
	static String Thai();
	static String Tibt();
	static String Vaii();
};

struct CurrencyIdentifiers
{
	CurrencyIdentifiers() = delete;
	static String AED();
	static String AFN();
	static String ALL();
	static String AMD();
	static String ANG();
	static String AOA();
	static String ARS();
	static String AUD();
	static String AWG();
	static String AZN();
	static String BAM();
	static String BBD();
	static String BDT();
	static String BGN();
	static String BHD();
	static String BIF();
	static String BMD();
	static String BND();
	static String BOB();
	static String BRL();
	static String BSD();
	static String BTN();
	static String BWP();
	static String BYR();
	static String BZD();
	static String CAD();
	static String CDF();
	static String CHF();
	static String CLP();
	static String CNY();
	static String COP();
	static String CRC();
	static String CUP();
	static String CVE();
	static String CZK();
	static String DJF();
	static String DKK();
	static String DOP();
	static String DZD();
	static String EGP();
	static String ERN();
	static String ETB();
	static String EUR();
	static String FJD();
	static String FKP();
	static String GBP();
	static String GEL();
	static String GHS();
	static String GIP();
	static String GMD();
	static String GNF();
	static String GTQ();
	static String GYD();
	static String HKD();
	static String HNL();
	static String HRK();
	static String HTG();
	static String HUF();
	static String IDR();
	static String ILS();
	static String INR();
	static String IQD();
	static String IRR();
	static String ISK();
	static String JMD();
	static String JOD();
	static String JPY();
	static String KES();
	static String KGS();
	static String KHR();
	static String KMF();
	static String KPW();
	static String KRW();
	static String KWD();
	static String KYD();
	static String KZT();
	static String LAK();
	static String LBP();
	static String LKR();
	static String LRD();
	static String LSL();
	static String LTL();
	static String LVL();
	static String LYD();
	static String MAD();
	static String MDL();
	static String MGA();
	static String MKD();
	static String MMK();
	static String MNT();
	static String MOP();
	static String MRO();
	static String MUR();
	static String MVR();
	static String MWK();
	static String MXN();
	static String MYR();
	static String MZN();
	static String NAD();
	static String NGN();
	static String NIO();
	static String NOK();
	static String NPR();
	static String NZD();
	static String OMR();
	static String PAB();
	static String PEN();
	static String PGK();
	static String PHP();
	static String PKR();
	static String PLN();
	static String PYG();
	static String QAR();
	static String RON();
	static String RSD();
	static String RUB();
	static String RWF();
	static String SAR();
	static String SBD();
	static String SCR();
	static String SDG();
	static String SEK();
	static String SGD();
	static String SHP();
	static String SLL();
	static String SOS();
	static String SRD();
	static String STD();
	static String SYP();
	static String SZL();
	static String THB();
	static String TJS();
	static String TMT();
	static String TND();
	static String TOP();
	static String TRY();
	static String TTD();
	static String TWD();
	static String TZS();
	static String UAH();
	static String UGX();
	static String USD();
	static String UYU();
	static String UZS();
	static String VEF();
	static String VND();
	static String VUV();
	static String WST();
	static String XAF();
	static String XCD();
	static String XOF();
	static String XPF();
	static String XXX();
	static String YER();
	static String ZAR();
	static String ZMW();
	static String ZWL();
};

struct GeographicRegion :
	Windows::Globalization::IGeographicRegion
{
	GeographicRegion(std::nullptr_t) noexcept {}
	GeographicRegion();
	GeographicRegion(String const & geographicRegionCode);
	template <unsigned S0> GeographicRegion(wchar_t const (&geographicRegionCode)[S0]);
	static bool IsSupported(String const & geographicRegionCode);
	template <unsigned S0> static bool IsSupported(wchar_t const (&geographicRegionCode)[S0]);
};

struct Language :
	Windows::Globalization::ILanguage,
	Requires<Language, Windows::Globalization::ILanguageExtensionSubtags>
{
	Language(std::nullptr_t) noexcept {}
	Language(String const & languageTag);
	template <unsigned S0> Language(wchar_t const (&languageTag)[S0]);
	static bool IsWellFormed(String const & languageTag);
	template <unsigned S0> static bool IsWellFormed(wchar_t const (&languageTag)[S0]);
	static String CurrentInputMethodLanguageTag();
};

struct Calendar :
	Windows::Globalization::ICalendar,
	Requires<Calendar, Windows::Globalization::ITimeZoneOnCalendar>
{
	Calendar(std::nullptr_t) noexcept {}
	Calendar();
	Calendar(Windows::Foundation::Collections::IIterable<String> const & languages);
	Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock);
	template <unsigned S0, unsigned S1> Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1]);
	Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock, String const & timeZoneId);
	template <unsigned S0, unsigned S1, unsigned S2> Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1], wchar_t const (&timeZoneId)[S2]);
};

struct ApplicationLanguages
{
	ApplicationLanguages() = delete;
	static String PrimaryLanguageOverride();
	static void PrimaryLanguageOverride(String const & value);
	template <unsigned S0> static void PrimaryLanguageOverride(wchar_t const (&value)[S0]);
	static Windows::Foundation::Collections::IVectorView<String> Languages();
	static Windows::Foundation::Collections::IVectorView<String> ManifestLanguages();
};

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

struct CharacterGrouping :
	Windows::Globalization::Collation::ICharacterGrouping
{
	CharacterGrouping(std::nullptr_t) noexcept {}
};

struct CharacterGroupings :
	Windows::Globalization::Collation::ICharacterGroupings
{
	CharacterGroupings(std::nullptr_t) noexcept {}
	CharacterGroupings();
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

struct DateTimeFormatter :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter,
	Requires<DateTimeFormatter, Windows::Globalization::DateTimeFormatting::IDateTimeFormatter2>
{
	DateTimeFormatter(std::nullptr_t) noexcept {}
	DateTimeFormatter(String const & formatTemplate);
	template <unsigned S0> DateTimeFormatter(wchar_t const (&formatTemplate)[S0]);
	DateTimeFormatter(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages);
	template <unsigned S0> DateTimeFormatter(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages);
	DateTimeFormatter(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock);
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> DateTimeFormatter(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1], wchar_t const (&calendar)[S2], wchar_t const (&clock)[S3]);
	DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat);
	DateTimeFormatter(Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat);
	DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages);
	DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock);
	template <unsigned S0, unsigned S1, unsigned S2> DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0], wchar_t const (&calendar)[S1], wchar_t const (&clock)[S2]);
	using impl_IDateTimeFormatter::Format;
	using impl_IDateTimeFormatter2::Format;
	static Windows::Globalization::DateTimeFormatting::DateTimeFormatter LongDate();
	static Windows::Globalization::DateTimeFormatting::DateTimeFormatter LongTime();
	static Windows::Globalization::DateTimeFormatting::DateTimeFormatter ShortDate();
	static Windows::Globalization::DateTimeFormatting::DateTimeFormatter ShortTime();
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

struct LanguageFont :
	Windows::Globalization::Fonts::ILanguageFont
{
	LanguageFont(std::nullptr_t) noexcept {}
};

struct LanguageFontGroup :
	Windows::Globalization::Fonts::ILanguageFontGroup
{
	LanguageFontGroup(std::nullptr_t) noexcept {}
	LanguageFontGroup(String const & languageTag);
	template <unsigned S0> LanguageFontGroup(wchar_t const (&languageTag)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

struct SignificantDigitsNumberRounder :
	Windows::Globalization::NumberFormatting::INumberRounder,
	Requires<SignificantDigitsNumberRounder, Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder>
{
	SignificantDigitsNumberRounder(std::nullptr_t) noexcept {}
	SignificantDigitsNumberRounder();
};

struct IncrementNumberRounder :
	Windows::Globalization::NumberFormatting::INumberRounder,
	Requires<IncrementNumberRounder, Windows::Globalization::NumberFormatting::IIncrementNumberRounder>
{
	IncrementNumberRounder(std::nullptr_t) noexcept {}
	IncrementNumberRounder();
};

struct DecimalFormatter :
	Windows::Globalization::NumberFormatting::INumberFormatter,
	Requires<DecimalFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	DecimalFormatter(std::nullptr_t) noexcept {}
	DecimalFormatter();
	DecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion);
	template <unsigned S0> DecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]);
};

struct PercentFormatter :
	Windows::Globalization::NumberFormatting::INumberFormatter,
	Requires<PercentFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	PercentFormatter(std::nullptr_t) noexcept {}
	PercentFormatter();
	PercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion);
	template <unsigned S0> PercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]);
};

struct PermilleFormatter :
	Windows::Globalization::NumberFormatting::INumberFormatter,
	Requires<PermilleFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	PermilleFormatter(std::nullptr_t) noexcept {}
	PermilleFormatter();
	PermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion);
	template <unsigned S0> PermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]);
};

struct CurrencyFormatter :
	Windows::Globalization::NumberFormatting::ICurrencyFormatter,
	Requires<CurrencyFormatter, Windows::Globalization::NumberFormatting::ICurrencyFormatter2, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	CurrencyFormatter(std::nullptr_t) noexcept {}
	CurrencyFormatter(String const & currencyCode);
	template <unsigned S0> CurrencyFormatter(wchar_t const (&currencyCode)[S0]);
	CurrencyFormatter(String const & currencyCode, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion);
	template <unsigned S0, unsigned S1> CurrencyFormatter(wchar_t const (&currencyCode)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1]);
};

struct NumeralSystemTranslator :
	Windows::Globalization::NumberFormatting::INumeralSystemTranslator
{
	NumeralSystemTranslator(std::nullptr_t) noexcept {}
	NumeralSystemTranslator();
	NumeralSystemTranslator(Windows::Foundation::Collections::IIterable<String> const & languages);
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

struct DisplayInformation :
	Windows::Graphics::Display::IDisplayInformation
{
	DisplayInformation(std::nullptr_t) noexcept {}
	static Windows::Graphics::Display::DisplayInformation GetForCurrentView();
	static Windows::Graphics::Display::DisplayOrientations AutoRotationPreferences();
	static void AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations value);
	static EventRegistrationToken DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler);
	template <typename F> static EventRegistrationToken DisplayContentsInvalidated(F handler);
	static void DisplayContentsInvalidated(EventRegistrationToken token);
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

struct BitmapTransform :
	Windows::Graphics::Imaging::IBitmapTransform
{
	BitmapTransform(std::nullptr_t) noexcept {}
	BitmapTransform();
};

struct BitmapTypedValue :
	Windows::Graphics::Imaging::IBitmapTypedValue
{
	BitmapTypedValue(std::nullptr_t) noexcept {}
	BitmapTypedValue(IInspectable const & value, Windows::Foundation::PropertyType type);
};

struct BitmapPropertySet :
	Windows::Foundation::Collections::IMap<String, Windows::Graphics::Imaging::BitmapTypedValue>
{
	BitmapPropertySet(std::nullptr_t) noexcept {}
	BitmapPropertySet();
};

struct BitmapPropertiesView :
	Windows::Graphics::Imaging::IBitmapPropertiesView
{
	BitmapPropertiesView(std::nullptr_t) noexcept {}
};

struct BitmapProperties :
	Windows::Graphics::Imaging::IBitmapProperties
{
	BitmapProperties(std::nullptr_t) noexcept {}
};

struct PixelDataProvider :
	Windows::Graphics::Imaging::IPixelDataProvider
{
	PixelDataProvider(std::nullptr_t) noexcept {}
};

struct ImageStream :
	Windows::Storage::Streams::IRandomAccessStreamWithContentType
{
	ImageStream(std::nullptr_t) noexcept {}
};

struct BitmapFrame :
	Windows::Graphics::Imaging::IBitmapFrame
{
	BitmapFrame(std::nullptr_t) noexcept {}
};

struct BitmapCodecInformation :
	Windows::Graphics::Imaging::IBitmapCodecInformation
{
	BitmapCodecInformation(std::nullptr_t) noexcept {}
};

struct BitmapDecoder :
	Windows::Graphics::Imaging::IBitmapDecoder,
	Requires<BitmapDecoder, Windows::Graphics::Imaging::IBitmapFrame>
{
	BitmapDecoder(std::nullptr_t) noexcept {}
	static GUID BmpDecoderId();
	static GUID JpegDecoderId();
	static GUID PngDecoderId();
	static GUID TiffDecoderId();
	static GUID GifDecoderId();
	static GUID JpegXRDecoderId();
	static GUID IcoDecoderId();
	static Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> GetDecoderInformationEnumerator();
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> CreateAsync(Windows::Storage::Streams::IRandomAccessStream const & stream);
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> CreateAsync(GUID decoderId, Windows::Storage::Streams::IRandomAccessStream const & stream);
};

struct BitmapEncoder :
	Windows::Graphics::Imaging::IBitmapEncoder
{
	BitmapEncoder(std::nullptr_t) noexcept {}
	static GUID BmpEncoderId();
	static GUID JpegEncoderId();
	static GUID PngEncoderId();
	static GUID TiffEncoderId();
	static GUID GifEncoderId();
	static GUID JpegXREncoderId();
	static Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> GetEncoderInformationEnumerator();
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateAsync(GUID encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream);
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateAsync(GUID encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions);
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateForTranscodingAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder);
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateForInPlacePropertyEncodingAsync(Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder);
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

struct PrintTaskOptions :
	Windows::Graphics::Printing::IPrintTaskOptionsCore,
	Requires<PrintTaskOptions, Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties, Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>
{
	PrintTaskOptions(std::nullptr_t) noexcept {}
};

struct StandardPrintTaskOptions
{
	StandardPrintTaskOptions() = delete;
	static String MediaSize();
	static String MediaType();
	static String Orientation();
	static String PrintQuality();
	static String ColorMode();
	static String Duplex();
	static String Collation();
	static String Staple();
	static String HolePunch();
	static String Binding();
	static String Copies();
	static String NUp();
	static String InputBin();
};

struct PrintTaskProgressingEventArgs :
	Windows::Graphics::Printing::IPrintTaskProgressingEventArgs
{
	PrintTaskProgressingEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskCompletedEventArgs :
	Windows::Graphics::Printing::IPrintTaskCompletedEventArgs
{
	PrintTaskCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTask :
	Windows::Graphics::Printing::IPrintTask,
	Requires<PrintTask, Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport>
{
	PrintTask(std::nullptr_t) noexcept {}
};

struct PrintTaskSourceRequestedDeferral :
	Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral
{
	PrintTaskSourceRequestedDeferral(std::nullptr_t) noexcept {}
};

struct PrintTaskSourceRequestedArgs :
	Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs
{
	PrintTaskSourceRequestedArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskRequestedDeferral :
	Windows::Graphics::Printing::IPrintTaskRequestedDeferral
{
	PrintTaskRequestedDeferral(std::nullptr_t) noexcept {}
};

struct PrintTaskRequest :
	Windows::Graphics::Printing::IPrintTaskRequest
{
	PrintTaskRequest(std::nullptr_t) noexcept {}
};

struct PrintTaskRequestedEventArgs :
	Windows::Graphics::Printing::IPrintTaskRequestedEventArgs
{
	PrintTaskRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintManager :
	Windows::Graphics::Printing::IPrintManager
{
	PrintManager(std::nullptr_t) noexcept {}
	static Windows::Graphics::Printing::PrintManager GetForCurrentView();
	static Windows::Foundation::IAsyncOperation<bool> ShowPrintUIAsync();
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

struct PrintCopiesOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintCopiesOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintNumberOptionDetails>
{
	PrintCopiesOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintMediaSizeOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintMediaSizeOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintMediaSizeOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintMediaTypeOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintMediaTypeOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintMediaTypeOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintOrientationOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintOrientationOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintOrientationOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintQualityOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintQualityOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintQualityOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintColorModeOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintColorModeOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintColorModeOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintDuplexOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintDuplexOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintDuplexOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintCollationOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintCollationOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintCollationOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintStapleOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintStapleOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintStapleOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintHolePunchOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintHolePunchOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintHolePunchOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintBindingOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintBindingOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintBindingOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintCustomTextOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintCustomTextOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomTextOptionDetails>
{
	PrintCustomTextOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintCustomItemDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintCustomItemDetails
{
	PrintCustomItemDetails(std::nullptr_t) noexcept {}
};

struct PrintCustomItemListOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintCustomItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomItemListOptionDetails>
{
	PrintCustomItemListOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintTaskOptionChangedEventArgs :
	Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionChangedEventArgs
{
	PrintTaskOptionChangedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetails,
	Requires<PrintTaskOptionDetails, Windows::Graphics::Printing::IPrintTaskOptionsCore, Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>
{
	PrintTaskOptionDetails(std::nullptr_t) noexcept {}
	static Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails GetFromPrintTaskOptions(Windows::Graphics::Printing::PrintTaskOptions const & printTaskOptions);
};

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

struct ApplicationDataManager :
	Windows::Management::Core::IApplicationDataManager
{
	ApplicationDataManager(std::nullptr_t) noexcept {}
	static Windows::Storage::ApplicationData CreateForPackageFamily(String const & packageFamilyName);
	template <unsigned S0> static Windows::Storage::ApplicationData CreateForPackageFamily(wchar_t const (&packageFamilyName)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

struct DeploymentResult :
	Windows::Management::Deployment::IDeploymentResult
{
	DeploymentResult(std::nullptr_t) noexcept {}
};

struct PackageUserInformation :
	Windows::Management::Deployment::IPackageUserInformation
{
	PackageUserInformation(std::nullptr_t) noexcept {}
};

struct PackageManager :
	Windows::Management::Deployment::IPackageManager,
	Requires<PackageManager, Windows::Management::Deployment::IPackageManager2>
{
	PackageManager(std::nullptr_t) noexcept {}
	PackageManager();
	using impl_IPackageManager::RemovePackageAsync;
	using impl_IPackageManager::StagePackageAsync;
	using impl_IPackageManager2::RemovePackageAsync;
	using impl_IPackageManager2::StagePackageAsync;
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

struct WorkplaceSettings
{
	WorkplaceSettings() = delete;
	static bool IsMicrosoftAccountOptional();
};

}}}}

namespace Modern { namespace Windows { namespace Media {

struct MediaMarkerTypes
{
	MediaMarkerTypes() = delete;
	static String Bookmark();
};

struct MusicDisplayProperties :
	Windows::Media::IMusicDisplayProperties
{
	MusicDisplayProperties(std::nullptr_t) noexcept {}
};

struct VideoDisplayProperties :
	Windows::Media::IVideoDisplayProperties
{
	VideoDisplayProperties(std::nullptr_t) noexcept {}
};

struct ImageDisplayProperties :
	Windows::Media::IImageDisplayProperties
{
	ImageDisplayProperties(std::nullptr_t) noexcept {}
};

struct SystemMediaTransportControlsDisplayUpdater :
	Windows::Media::ISystemMediaTransportControlsDisplayUpdater
{
	SystemMediaTransportControlsDisplayUpdater(std::nullptr_t) noexcept {}
};

struct SystemMediaTransportControlsButtonPressedEventArgs :
	Windows::Media::ISystemMediaTransportControlsButtonPressedEventArgs
{
	SystemMediaTransportControlsButtonPressedEventArgs(std::nullptr_t) noexcept {}
};

struct SystemMediaTransportControlsPropertyChangedEventArgs :
	Windows::Media::ISystemMediaTransportControlsPropertyChangedEventArgs
{
	SystemMediaTransportControlsPropertyChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SystemMediaTransportControls :
	Windows::Media::ISystemMediaTransportControls
{
	SystemMediaTransportControls(std::nullptr_t) noexcept {}
	static Windows::Media::SystemMediaTransportControls GetForCurrentView();
};

struct MediaExtensionManager :
	Windows::Media::IMediaExtensionManager
{
	MediaExtensionManager(std::nullptr_t) noexcept {}
	MediaExtensionManager();
};

struct VideoEffects
{
	VideoEffects() = delete;
	static String VideoStabilization();
};

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

struct CameraCaptureUIPhotoCaptureSettings :
	Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings
{
	CameraCaptureUIPhotoCaptureSettings(std::nullptr_t) noexcept {}
};

struct CameraCaptureUIVideoCaptureSettings :
	Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings
{
	CameraCaptureUIVideoCaptureSettings(std::nullptr_t) noexcept {}
};

struct CameraCaptureUI :
	Windows::Media::Capture::ICameraCaptureUI
{
	CameraCaptureUI(std::nullptr_t) noexcept {}
	CameraCaptureUI();
};

struct CameraOptionsUI
{
	CameraOptionsUI() = delete;
	static void Show(Windows::Media::Capture::MediaCapture const & mediaCapture);
};

struct MediaCaptureFailedEventArgs :
	Windows::Media::Capture::IMediaCaptureFailedEventArgs
{
	MediaCaptureFailedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaCapture :
	Windows::Media::Capture::IMediaCapture,
	Requires<MediaCapture, Windows::Media::Capture::IMediaCaptureVideoPreview, Windows::Media::Capture::IMediaCapture2>
{
	MediaCapture(std::nullptr_t) noexcept {}
	MediaCapture();
};

struct MediaCaptureInitializationSettings :
	Windows::Media::Capture::IMediaCaptureInitializationSettings,
	Requires<MediaCaptureInitializationSettings, Windows::Media::Capture::IMediaCaptureInitializationSettings2>
{
	MediaCaptureInitializationSettings(std::nullptr_t) noexcept {}
	MediaCaptureInitializationSettings();
};

struct MediaCaptureSettings :
	Windows::Media::Capture::IMediaCaptureSettings,
	Requires<MediaCaptureSettings, Windows::Media::Capture::IMediaCaptureSettings2>
{
	MediaCaptureSettings(std::nullptr_t) noexcept {}
};

struct LowLagMediaRecording :
	Windows::Media::Capture::ILowLagMediaRecording
{
	LowLagMediaRecording(std::nullptr_t) noexcept {}
};

struct LowLagPhotoCapture :
	Windows::Media::Capture::ILowLagPhotoCapture
{
	LowLagPhotoCapture(std::nullptr_t) noexcept {}
};

struct LowLagPhotoSequenceCapture :
	Windows::Media::Capture::ILowLagPhotoSequenceCapture
{
	LowLagPhotoSequenceCapture(std::nullptr_t) noexcept {}
};

struct CapturedPhoto :
	Windows::Media::Capture::ICapturedPhoto
{
	CapturedPhoto(std::nullptr_t) noexcept {}
};

struct PhotoCapturedEventArgs :
	Windows::Media::Capture::IPhotoCapturedEventArgs
{
	PhotoCapturedEventArgs(std::nullptr_t) noexcept {}
};

struct CapturedFrame :
	Windows::Media::Capture::ICapturedFrame
{
	CapturedFrame(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

struct RatedContentDescription :
	Windows::Media::ContentRestrictions::IRatedContentDescription
{
	RatedContentDescription(std::nullptr_t) noexcept {}
	RatedContentDescription(String const & id, String const & title, Windows::Media::ContentRestrictions::RatedContentCategory category);
	template <unsigned S0, unsigned S1> RatedContentDescription(wchar_t const (&id)[S0], wchar_t const (&title)[S1], Windows::Media::ContentRestrictions::RatedContentCategory category);
};

struct ContentRestrictionsBrowsePolicy :
	Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy
{
	ContentRestrictionsBrowsePolicy(std::nullptr_t) noexcept {}
};

struct RatedContentRestrictions :
	Windows::Media::ContentRestrictions::IRatedContentRestrictions
{
	RatedContentRestrictions(std::nullptr_t) noexcept {}
	RatedContentRestrictions();
	RatedContentRestrictions(unsigned maxAgeRating);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

struct AudioStreamDescriptor :
	Windows::Media::Core::IAudioStreamDescriptor
{
	AudioStreamDescriptor(std::nullptr_t) noexcept {}
	AudioStreamDescriptor(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties);
};

struct VideoStreamDescriptor :
	Windows::Media::Core::IVideoStreamDescriptor
{
	VideoStreamDescriptor(std::nullptr_t) noexcept {}
	VideoStreamDescriptor(Windows::Media::MediaProperties::VideoEncodingProperties const & encodingProperties);
};

struct MediaStreamSource :
	Windows::Media::Core::IMediaStreamSource
{
	MediaStreamSource(std::nullptr_t) noexcept {}
	MediaStreamSource(Windows::Media::Core::IMediaStreamDescriptor const & descriptor);
	MediaStreamSource(Windows::Media::Core::IMediaStreamDescriptor const & descriptor, Windows::Media::Core::IMediaStreamDescriptor const & descriptor2);
};

struct MediaStreamSourceClosedEventArgs :
	Windows::Media::Core::IMediaStreamSourceClosedEventArgs
{
	MediaStreamSourceClosedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceStartingEventArgs :
	Windows::Media::Core::IMediaStreamSourceStartingEventArgs
{
	MediaStreamSourceStartingEventArgs(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSampleRequestedEventArgs :
	Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs
{
	MediaStreamSourceSampleRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSwitchStreamsRequestedEventArgs :
	Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs
{
	MediaStreamSourceSwitchStreamsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaStreamSamplePropertySet :
	Windows::Foundation::Collections::IMap<GUID, IInspectable>
{
	MediaStreamSamplePropertySet(std::nullptr_t) noexcept {}
};

struct MediaStreamSample :
	Windows::Media::Core::IMediaStreamSample
{
	MediaStreamSample(std::nullptr_t) noexcept {}
	static Windows::Media::Core::MediaStreamSample CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer, Windows::Foundation::TimeSpan const & timestamp);
	static Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, unsigned count, Windows::Foundation::TimeSpan const & timestamp);
};

struct MediaStreamSampleProtectionProperties :
	Windows::Media::Core::IMediaStreamSampleProtectionProperties
{
	MediaStreamSampleProtectionProperties(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceClosedRequest :
	Windows::Media::Core::IMediaStreamSourceClosedRequest
{
	MediaStreamSourceClosedRequest(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceStartingRequestDeferral :
	Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral
{
	MediaStreamSourceStartingRequestDeferral(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceStartingRequest :
	Windows::Media::Core::IMediaStreamSourceStartingRequest
{
	MediaStreamSourceStartingRequest(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSampleRequestDeferral :
	Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral
{
	MediaStreamSourceSampleRequestDeferral(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSampleRequest :
	Windows::Media::Core::IMediaStreamSourceSampleRequest
{
	MediaStreamSourceSampleRequest(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSwitchStreamsRequestDeferral :
	Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral
{
	MediaStreamSourceSwitchStreamsRequestDeferral(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSwitchStreamsRequest :
	Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest
{
	MediaStreamSourceSwitchStreamsRequest(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

struct DialRequestedEventArgs :
	Windows::Media::Devices::IDialRequestedEventArgs
{
	DialRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct RedialRequestedEventArgs :
	Windows::Media::Devices::IRedialRequestedEventArgs
{
	RedialRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct KeypadPressedEventArgs :
	Windows::Media::Devices::IKeypadPressedEventArgs
{
	KeypadPressedEventArgs(std::nullptr_t) noexcept {}
};

struct CallControl :
	Windows::Media::Devices::ICallControl
{
	CallControl(std::nullptr_t) noexcept {}
	static Windows::Media::Devices::CallControl GetDefault();
	static Windows::Media::Devices::CallControl FromId(String const & deviceId);
	template <unsigned S0> static Windows::Media::Devices::CallControl FromId(wchar_t const (&deviceId)[S0]);
};

struct DefaultAudioCaptureDeviceChangedEventArgs :
	Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs
{
	DefaultAudioCaptureDeviceChangedEventArgs(std::nullptr_t) noexcept {}
};

struct DefaultAudioRenderDeviceChangedEventArgs :
	Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs
{
	DefaultAudioRenderDeviceChangedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaDevice
{
	MediaDevice() = delete;
	static String GetAudioCaptureSelector();
	static String GetAudioRenderSelector();
	static String GetVideoCaptureSelector();
	static String GetDefaultAudioCaptureId(Windows::Media::Devices::AudioDeviceRole role);
	static String GetDefaultAudioRenderId(Windows::Media::Devices::AudioDeviceRole role);
	static EventRegistrationToken DefaultAudioCaptureDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken DefaultAudioCaptureDeviceChanged(F handler);
	static void DefaultAudioCaptureDeviceChanged(EventRegistrationToken cookie);
	static EventRegistrationToken DefaultAudioRenderDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken DefaultAudioRenderDeviceChanged(F handler);
	static void DefaultAudioRenderDeviceChanged(EventRegistrationToken cookie);
};

struct AudioDeviceController :
	Windows::Media::Devices::IAudioDeviceController
{
	AudioDeviceController(std::nullptr_t) noexcept {}
};

struct VideoDeviceController :
	Windows::Media::Devices::IVideoDeviceController,
	Requires<VideoDeviceController, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2>
{
	VideoDeviceController(std::nullptr_t) noexcept {}
};

struct SceneModeControl :
	Windows::Media::Devices::ISceneModeControl
{
	SceneModeControl(std::nullptr_t) noexcept {}
};

struct TorchControl :
	Windows::Media::Devices::ITorchControl
{
	TorchControl(std::nullptr_t) noexcept {}
};

struct FlashControl :
	Windows::Media::Devices::IFlashControl
{
	FlashControl(std::nullptr_t) noexcept {}
};

struct ExposureCompensationControl :
	Windows::Media::Devices::IExposureCompensationControl
{
	ExposureCompensationControl(std::nullptr_t) noexcept {}
};

struct IsoSpeedControl :
	Windows::Media::Devices::IIsoSpeedControl
{
	IsoSpeedControl(std::nullptr_t) noexcept {}
};

struct WhiteBalanceControl :
	Windows::Media::Devices::IWhiteBalanceControl
{
	WhiteBalanceControl(std::nullptr_t) noexcept {}
};

struct ExposureControl :
	Windows::Media::Devices::IExposureControl
{
	ExposureControl(std::nullptr_t) noexcept {}
};

struct FocusControl :
	Windows::Media::Devices::IFocusControl
{
	FocusControl(std::nullptr_t) noexcept {}
};

struct RegionOfInterest :
	Windows::Media::Devices::IRegionOfInterest
{
	RegionOfInterest(std::nullptr_t) noexcept {}
	RegionOfInterest();
};

struct RegionsOfInterestControl :
	Windows::Media::Devices::IRegionsOfInterestControl
{
	RegionsOfInterestControl(std::nullptr_t) noexcept {}
};

struct MediaDeviceControl :
	Windows::Media::Devices::IMediaDeviceControl
{
	MediaDeviceControl(std::nullptr_t) noexcept {}
};

struct LowLagPhotoSequenceControl :
	Windows::Media::Devices::ILowLagPhotoSequenceControl
{
	LowLagPhotoSequenceControl(std::nullptr_t) noexcept {}
};

struct LowLagPhotoControl :
	Windows::Media::Devices::ILowLagPhotoControl
{
	LowLagPhotoControl(std::nullptr_t) noexcept {}
};

struct MediaDeviceControlCapabilities :
	Windows::Media::Devices::IMediaDeviceControlCapabilities
{
	MediaDeviceControlCapabilities(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

struct AudioEffect :
	Windows::Media::Effects::IAudioEffect
{
	AudioEffect(std::nullptr_t) noexcept {}
};

struct AudioRenderEffectsManager :
	Windows::Media::Effects::IAudioRenderEffectsManager
{
	AudioRenderEffectsManager(std::nullptr_t) noexcept {}
};

struct AudioCaptureEffectsManager :
	Windows::Media::Effects::IAudioCaptureEffectsManager
{
	AudioCaptureEffectsManager(std::nullptr_t) noexcept {}
};

struct AudioEffectsManager
{
	AudioEffectsManager() = delete;
	static Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory category);
	template <unsigned S0> static Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory category);
	static Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory category, Windows::Media::AudioProcessing mode);
	template <unsigned S0> static Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory category, Windows::Media::AudioProcessing mode);
	static Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory category);
	template <unsigned S0> static Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory category);
	static Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory category, Windows::Media::AudioProcessing mode);
	template <unsigned S0> static Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory category, Windows::Media::AudioProcessing mode);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

struct MediaRatio :
	Windows::Media::MediaProperties::IMediaRatio
{
	MediaRatio(std::nullptr_t) noexcept {}
};

struct MediaPropertySet :
	Windows::Foundation::Collections::IMap<GUID, IInspectable>
{
	MediaPropertySet(std::nullptr_t) noexcept {}
	MediaPropertySet();
};

struct AudioEncodingProperties :
	Windows::Media::MediaProperties::IAudioEncodingProperties,
	Requires<AudioEncodingProperties, Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData>
{
	AudioEncodingProperties(std::nullptr_t) noexcept {}
	AudioEncodingProperties();
	static Windows::Media::MediaProperties::AudioEncodingProperties CreateAac(unsigned sampleRate, unsigned channelCount, unsigned bitrate);
	static Windows::Media::MediaProperties::AudioEncodingProperties CreateAacAdts(unsigned sampleRate, unsigned channelCount, unsigned bitrate);
	static Windows::Media::MediaProperties::AudioEncodingProperties CreateMp3(unsigned sampleRate, unsigned channelCount, unsigned bitrate);
	static Windows::Media::MediaProperties::AudioEncodingProperties CreatePcm(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample);
	static Windows::Media::MediaProperties::AudioEncodingProperties CreateWma(unsigned sampleRate, unsigned channelCount, unsigned bitrate);
};

struct MediaEncodingSubtypes
{
	MediaEncodingSubtypes() = delete;
	static String Aac();
	static String AacAdts();
	static String Ac3();
	static String AmrNb();
	static String AmrWb();
	static String Argb32();
	static String Asf();
	static String Avi();
	static String Bgra8();
	static String Bmp();
	static String Eac3();
	static String Float();
	static String Gif();
	static String H263();
	static String H264();
	static String H264Es();
	static String Hevc();
	static String HevcEs();
	static String Iyuv();
	static String Jpeg();
	static String JpegXr();
	static String Mjpg();
	static String Mpeg();
	static String Mpeg1();
	static String Mpeg2();
	static String Mp3();
	static String Mpeg4();
	static String Nv12();
	static String Pcm();
	static String Png();
	static String Rgb24();
	static String Rgb32();
	static String Tiff();
	static String Wave();
	static String Wma8();
	static String Wma9();
	static String Wmv3();
	static String Wvc1();
	static String Yuy2();
	static String Yv12();
};

struct H264ProfileIds
{
	H264ProfileIds() = delete;
	static int ConstrainedBaseline();
	static int Baseline();
	static int Extended();
	static int Main();
	static int High();
	static int High10();
	static int High422();
	static int High444();
	static int StereoHigh();
	static int MultiviewHigh();
};

struct Mpeg2ProfileIds
{
	Mpeg2ProfileIds() = delete;
	static int Simple();
	static int Main();
	static int SignalNoiseRatioScalable();
	static int SpatiallyScalable();
	static int High();
};

struct VideoEncodingProperties :
	Windows::Media::MediaProperties::IVideoEncodingProperties,
	Requires<VideoEncodingProperties, Windows::Media::MediaProperties::IVideoEncodingProperties2>
{
	VideoEncodingProperties(std::nullptr_t) noexcept {}
	VideoEncodingProperties();
	static Windows::Media::MediaProperties::VideoEncodingProperties CreateH264();
	static Windows::Media::MediaProperties::VideoEncodingProperties CreateMpeg2();
	static Windows::Media::MediaProperties::VideoEncodingProperties CreateUncompressed(String const & subtype, unsigned width, unsigned height);
	template <unsigned S0> static Windows::Media::MediaProperties::VideoEncodingProperties CreateUncompressed(wchar_t const (&subtype)[S0], unsigned width, unsigned height);
};

struct ImageEncodingProperties :
	Windows::Media::MediaProperties::IImageEncodingProperties
{
	ImageEncodingProperties(std::nullptr_t) noexcept {}
	ImageEncodingProperties();
	static Windows::Media::MediaProperties::ImageEncodingProperties CreateJpeg();
	static Windows::Media::MediaProperties::ImageEncodingProperties CreatePng();
	static Windows::Media::MediaProperties::ImageEncodingProperties CreateJpegXR();
	static Windows::Media::MediaProperties::ImageEncodingProperties CreateUncompressed(Windows::Media::MediaProperties::MediaPixelFormat format);
	static Windows::Media::MediaProperties::ImageEncodingProperties CreateBmp();
};

struct ContainerEncodingProperties :
	Windows::Media::MediaProperties::IContainerEncodingProperties
{
	ContainerEncodingProperties(std::nullptr_t) noexcept {}
	ContainerEncodingProperties();
};

struct MediaEncodingProfile :
	Windows::Media::MediaProperties::IMediaEncodingProfile
{
	MediaEncodingProfile(std::nullptr_t) noexcept {}
	MediaEncodingProfile();
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateM4a(Windows::Media::MediaProperties::AudioEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateMp3(Windows::Media::MediaProperties::AudioEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateWma(Windows::Media::MediaProperties::AudioEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateMp4(Windows::Media::MediaProperties::VideoEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateWmv(Windows::Media::MediaProperties::VideoEncodingQuality quality);
	static Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> CreateFromFileAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> CreateFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateWav(Windows::Media::MediaProperties::AudioEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateAvi(Windows::Media::MediaProperties::VideoEncodingQuality quality);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

struct SourceChangeRequestedEventArgs :
	Windows::Media::PlayTo::ISourceChangeRequestedEventArgs
{
	SourceChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PlaybackRateChangeRequestedEventArgs :
	Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs
{
	PlaybackRateChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct CurrentTimeChangeRequestedEventArgs :
	Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs
{
	CurrentTimeChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct MuteChangeRequestedEventArgs :
	Windows::Media::PlayTo::IMuteChangeRequestedEventArgs
{
	MuteChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct VolumeChangeRequestedEventArgs :
	Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs
{
	VolumeChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToReceiver :
	Windows::Media::PlayTo::IPlayToReceiver
{
	PlayToReceiver(std::nullptr_t) noexcept {}
	PlayToReceiver();
};

struct PlayToConnection :
	Windows::Media::PlayTo::IPlayToConnection
{
	PlayToConnection(std::nullptr_t) noexcept {}
};

struct PlayToSource :
	Windows::Media::PlayTo::IPlayToSource,
	Requires<PlayToSource, Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri>
{
	PlayToSource(std::nullptr_t) noexcept {}
};

struct PlayToConnectionStateChangedEventArgs :
	Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs
{
	PlayToConnectionStateChangedEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToConnectionTransferredEventArgs :
	Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs
{
	PlayToConnectionTransferredEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToConnectionErrorEventArgs :
	Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs
{
	PlayToConnectionErrorEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToSourceSelectedEventArgs :
	Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs
{
	PlayToSourceSelectedEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToSourceDeferral :
	Windows::Media::PlayTo::IPlayToSourceDeferral
{
	PlayToSourceDeferral(std::nullptr_t) noexcept {}
};

struct PlayToSourceRequest :
	Windows::Media::PlayTo::IPlayToSourceRequest
{
	PlayToSourceRequest(std::nullptr_t) noexcept {}
};

struct PlayToSourceRequestedEventArgs :
	Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs
{
	PlayToSourceRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToManager :
	Windows::Media::PlayTo::IPlayToManager
{
	PlayToManager(std::nullptr_t) noexcept {}
	static Windows::Media::PlayTo::PlayToManager GetForCurrentView();
	static void ShowPlayToUI();
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

struct Playlist :
	Windows::Media::Playlists::IPlaylist
{
	Playlist(std::nullptr_t) noexcept {}
	Playlist();
	static Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> LoadAsync(Windows::Storage::IStorageFile const & file);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

struct MediaProtectionManager :
	Windows::Media::Protection::IMediaProtectionManager
{
	MediaProtectionManager(std::nullptr_t) noexcept {}
	MediaProtectionManager();
};

struct ServiceRequestedEventArgs :
	Windows::Media::Protection::IServiceRequestedEventArgs
{
	ServiceRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct ComponentLoadFailedEventArgs :
	Windows::Media::Protection::IComponentLoadFailedEventArgs
{
	ComponentLoadFailedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaProtectionServiceCompletion :
	Windows::Media::Protection::IMediaProtectionServiceCompletion
{
	MediaProtectionServiceCompletion(std::nullptr_t) noexcept {}
};

struct RevocationAndRenewalInformation :
	Windows::Media::Protection::IRevocationAndRenewalInformation
{
	RevocationAndRenewalInformation(std::nullptr_t) noexcept {}
};

struct RevocationAndRenewalItem :
	Windows::Media::Protection::IRevocationAndRenewalItem
{
	RevocationAndRenewalItem(std::nullptr_t) noexcept {}
};

struct ComponentRenewal
{
	ComponentRenewal() = delete;
	static Windows::Foundation::IAsyncOperationWithProgress<Modern::Windows::Media::Protection::RenewalStatus, unsigned> RenewSystemComponentsAsync(Windows::Media::Protection::RevocationAndRenewalInformation const & information);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

struct VoiceInformation :
	Windows::Media::SpeechSynthesis::IVoiceInformation
{
	VoiceInformation(std::nullptr_t) noexcept {}
};

struct SpeechSynthesisStream :
	Windows::Media::SpeechSynthesis::ISpeechSynthesisStream
{
	SpeechSynthesisStream(std::nullptr_t) noexcept {}
};

struct SpeechSynthesizer :
	Windows::Media::SpeechSynthesis::ISpeechSynthesizer
{
	SpeechSynthesizer(std::nullptr_t) noexcept {}
	SpeechSynthesizer();
	static Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> AllVoices();
	static Windows::Media::SpeechSynthesis::VoiceInformation DefaultVoice();
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

struct BasicDevice :
	Windows::Media::Streaming::IBasicDevice
{
	BasicDevice(std::nullptr_t) noexcept {}
	BasicDevice();
};

struct ActiveBasicDevice :
	Windows::Media::Streaming::IActiveBasicDevice
{
	ActiveBasicDevice(std::nullptr_t) noexcept {}
	ActiveBasicDevice();
};

struct DevicePair :
	Windows::Media::Streaming::IDevicePair
{
	DevicePair(std::nullptr_t) noexcept {}
};

struct DeviceController :
	Windows::Media::Streaming::IDeviceController
{
	DeviceController(std::nullptr_t) noexcept {}
	DeviceController();
};

struct MediaRenderer :
	Windows::Media::Streaming::IMediaRenderer
{
	MediaRenderer(std::nullptr_t) noexcept {}
	MediaRenderer();
};

struct CreateMediaRendererOperation :
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::MediaRenderer>
{
	CreateMediaRendererOperation(std::nullptr_t) noexcept {}
};

struct StreamSelector
{
	StreamSelector() = delete;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

struct PrepareTranscodeResult :
	Windows::Media::Transcoding::IPrepareTranscodeResult
{
	PrepareTranscodeResult(std::nullptr_t) noexcept {}
};

struct MediaTranscoder :
	Windows::Media::Transcoding::IMediaTranscoder,
	Requires<MediaTranscoder, Windows::Media::Transcoding::IMediaTranscoder2>
{
	MediaTranscoder(std::nullptr_t) noexcept {}
	MediaTranscoder();
};

}}}}

namespace Modern { namespace Windows { namespace Networking {

struct EndpointPair :
	Windows::Networking::IEndpointPair
{
	EndpointPair(std::nullptr_t) noexcept {}
	EndpointPair(Windows::Networking::HostName const & localHostName, String const & localServiceName, Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName);
	template <unsigned S0, unsigned S1> EndpointPair(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0], Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S1]);
};

struct HostName :
	Windows::Networking::IHostName,
	Requires<HostName, Windows::Foundation::IStringable>
{
	HostName(std::nullptr_t) noexcept {}
	HostName(String const & hostName);
	template <unsigned S0> HostName(wchar_t const (&hostName)[S0]);
	static int Compare(String const & value1, String const & value2);
	template <unsigned S0, unsigned S1> static int Compare(wchar_t const (&value1)[S0], wchar_t const (&value2)[S1]);
};

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

struct DownloadOperation :
	Windows::Networking::BackgroundTransfer::IDownloadOperation,
	Requires<DownloadOperation, Windows::Networking::BackgroundTransfer::IBackgroundTransferOperationPriority, Windows::Networking::BackgroundTransfer::IDownloadOperation2>
{
	DownloadOperation(std::nullptr_t) noexcept {}
};

struct UnconstrainedTransferRequestResult :
	Windows::Networking::BackgroundTransfer::IUnconstrainedTransferRequestResult
{
	UnconstrainedTransferRequestResult(std::nullptr_t) noexcept {}
};

struct UploadOperation :
	Windows::Networking::BackgroundTransfer::IUploadOperation,
	Requires<UploadOperation, Windows::Networking::BackgroundTransfer::IBackgroundTransferOperationPriority, Windows::Networking::BackgroundTransfer::IUploadOperation2>
{
	UploadOperation(std::nullptr_t) noexcept {}
};

struct BackgroundTransferGroup :
	Windows::Networking::BackgroundTransfer::IBackgroundTransferGroup
{
	BackgroundTransferGroup(std::nullptr_t) noexcept {}
	static Windows::Networking::BackgroundTransfer::BackgroundTransferGroup CreateGroup(String const & name);
	template <unsigned S0> static Windows::Networking::BackgroundTransfer::BackgroundTransferGroup CreateGroup(wchar_t const (&name)[S0]);
};

struct BackgroundTransferContentPart :
	Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart
{
	BackgroundTransferContentPart(std::nullptr_t) noexcept {}
	BackgroundTransferContentPart();
	BackgroundTransferContentPart(String const & name);
	template <unsigned S0> BackgroundTransferContentPart(wchar_t const (&name)[S0]);
	BackgroundTransferContentPart(String const & name, String const & fileName);
	template <unsigned S0, unsigned S1> BackgroundTransferContentPart(wchar_t const (&name)[S0], wchar_t const (&fileName)[S1]);
};

struct ResponseInformation :
	Windows::Networking::BackgroundTransfer::IResponseInformation
{
	ResponseInformation(std::nullptr_t) noexcept {}
};

struct BackgroundDownloader :
	Windows::Networking::BackgroundTransfer::IBackgroundDownloader,
	Requires<BackgroundDownloader, Windows::Networking::BackgroundTransfer::IBackgroundDownloader2>
{
	BackgroundDownloader(std::nullptr_t) noexcept {}
	BackgroundDownloader();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> GetCurrentDownloadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group);
	static Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> RequestUnconstrainedDownloadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::DownloadOperation> const & operations);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> GetCurrentDownloadsAsync();
};

struct BackgroundUploader :
	Windows::Networking::BackgroundTransfer::IBackgroundUploader,
	Requires<BackgroundUploader, Windows::Networking::BackgroundTransfer::IBackgroundUploader2>
{
	BackgroundUploader(std::nullptr_t) noexcept {}
	BackgroundUploader();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> GetCurrentUploadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group);
	static Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> RequestUnconstrainedUploadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::UploadOperation> const & operations);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> GetCurrentUploadsAsync();
};

struct BackgroundTransferError
{
	BackgroundTransferError() = delete;
	static Windows::Web::WebErrorStatus GetStatus(int hresult);
};

struct ContentPrefetcher
{
	ContentPrefetcher() = delete;
	static Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> ContentUris();
	static void IndirectContentUri(Windows::Foundation::Uri const & value);
	static Windows::Foundation::Uri IndirectContentUri();
	static Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> LastSuccessfulPrefetchTime();
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

struct IPInformation :
	Windows::Networking::Connectivity::IIPInformation
{
	IPInformation(std::nullptr_t) noexcept {}
};

struct DataPlanUsage :
	Windows::Networking::Connectivity::IDataPlanUsage
{
	DataPlanUsage(std::nullptr_t) noexcept {}
};

struct ConnectionCost :
	Windows::Networking::Connectivity::IConnectionCost
{
	ConnectionCost(std::nullptr_t) noexcept {}
};

struct DataPlanStatus :
	Windows::Networking::Connectivity::IDataPlanStatus
{
	DataPlanStatus(std::nullptr_t) noexcept {}
};

struct NetworkAdapter :
	Windows::Networking::Connectivity::INetworkAdapter
{
	NetworkAdapter(std::nullptr_t) noexcept {}
};

struct NetworkSecuritySettings :
	Windows::Networking::Connectivity::INetworkSecuritySettings
{
	NetworkSecuritySettings(std::nullptr_t) noexcept {}
};

struct WwanConnectionProfileDetails :
	Windows::Networking::Connectivity::IWwanConnectionProfileDetails
{
	WwanConnectionProfileDetails(std::nullptr_t) noexcept {}
};

struct WlanConnectionProfileDetails :
	Windows::Networking::Connectivity::IWlanConnectionProfileDetails
{
	WlanConnectionProfileDetails(std::nullptr_t) noexcept {}
};

struct NetworkUsage :
	Windows::Networking::Connectivity::INetworkUsage
{
	NetworkUsage(std::nullptr_t) noexcept {}
};

struct ConnectivityInterval :
	Windows::Networking::Connectivity::IConnectivityInterval
{
	ConnectivityInterval(std::nullptr_t) noexcept {}
};

struct LanIdentifierData :
	Windows::Networking::Connectivity::ILanIdentifierData
{
	LanIdentifierData(std::nullptr_t) noexcept {}
};

struct ConnectionProfile :
	Windows::Networking::Connectivity::IConnectionProfile,
	Requires<ConnectionProfile, Windows::Networking::Connectivity::IConnectionProfile2>
{
	ConnectionProfile(std::nullptr_t) noexcept {}
};

struct LanIdentifier :
	Windows::Networking::Connectivity::ILanIdentifier
{
	LanIdentifier(std::nullptr_t) noexcept {}
};

struct ProxyConfiguration :
	Windows::Networking::Connectivity::IProxyConfiguration
{
	ProxyConfiguration(std::nullptr_t) noexcept {}
};

struct ConnectionProfileFilter :
	Windows::Networking::Connectivity::IConnectionProfileFilter
{
	ConnectionProfileFilter(std::nullptr_t) noexcept {}
	ConnectionProfileFilter();
};

struct NetworkItem :
	Windows::Networking::Connectivity::INetworkItem
{
	NetworkItem(std::nullptr_t) noexcept {}
};

struct RoutePolicy :
	Windows::Networking::Connectivity::IRoutePolicy
{
	RoutePolicy(std::nullptr_t) noexcept {}
	RoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType type);
};

struct CellularApnContext :
	Windows::Networking::Connectivity::ICellularApnContext
{
	CellularApnContext(std::nullptr_t) noexcept {}
	CellularApnContext();
};

struct ConnectionSession :
	Windows::Networking::Connectivity::IConnectionSession
{
	ConnectionSession(std::nullptr_t) noexcept {}
};

struct NetworkInformation
{
	NetworkInformation() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter);
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> GetConnectionProfiles();
	static Windows::Networking::Connectivity::ConnectionProfile GetInternetConnectionProfile();
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> GetLanIdentifiers();
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> GetHostNames();
	static Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions sortOptions);
	static EventRegistrationToken NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler);
	template <typename F> static EventRegistrationToken NetworkStatusChanged(F networkStatusHandler);
	static void NetworkStatusChanged(EventRegistrationToken eventCookie);
};

struct ConnectivityManager
{
	ConnectivityManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext);
	static void AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy);
	static void RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy);
};

struct NetworkStateChangeEventDetails :
	Windows::Networking::Connectivity::INetworkStateChangeEventDetails
{
	NetworkStateChangeEventDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

struct MobileBroadbandAccount :
	Windows::Networking::NetworkOperators::IMobileBroadbandAccount,
	Requires<MobileBroadbandAccount, Windows::Networking::NetworkOperators::IMobileBroadbandAccount2>
{
	MobileBroadbandAccount(std::nullptr_t) noexcept {}
	static Windows::Foundation::Collections::IVectorView<String> AvailableNetworkAccountIds();
	static Windows::Networking::NetworkOperators::MobileBroadbandAccount CreateFromNetworkAccountId(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::MobileBroadbandAccount CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]);
};

struct MobileBroadbandNetwork :
	Windows::Networking::NetworkOperators::IMobileBroadbandNetwork
{
	MobileBroadbandNetwork(std::nullptr_t) noexcept {}
};

struct MobileBroadbandDeviceInformation :
	Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation
{
	MobileBroadbandDeviceInformation(std::nullptr_t) noexcept {}
};

struct NetworkOperatorNotificationEventDetails :
	Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails,
	Requires<NetworkOperatorNotificationEventDetails, Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck>
{
	NetworkOperatorNotificationEventDetails(std::nullptr_t) noexcept {}
};

struct NetworkOperatorTetheringAccessPointConfiguration :
	Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration
{
	NetworkOperatorTetheringAccessPointConfiguration(std::nullptr_t) noexcept {}
	NetworkOperatorTetheringAccessPointConfiguration();
};

struct NetworkOperatorTetheringOperationResult :
	Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult
{
	NetworkOperatorTetheringOperationResult(std::nullptr_t) noexcept {}
};

struct NetworkOperatorTetheringManager :
	Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager
{
	NetworkOperatorTetheringManager(std::nullptr_t) noexcept {}
	static Windows::Networking::NetworkOperators::TetheringCapability GetTetheringCapability(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::TetheringCapability GetTetheringCapability(wchar_t const (&networkAccountId)[S0]);
	static Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager CreateFromNetworkAccountId(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]);
};

struct MobileBroadbandAccountEventArgs :
	Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs
{
	MobileBroadbandAccountEventArgs(std::nullptr_t) noexcept {}
};

struct MobileBroadbandAccountUpdatedEventArgs :
	Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs
{
	MobileBroadbandAccountUpdatedEventArgs(std::nullptr_t) noexcept {}
};

struct MobileBroadbandAccountWatcher :
	Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher
{
	MobileBroadbandAccountWatcher(std::nullptr_t) noexcept {}
	MobileBroadbandAccountWatcher();
};

struct HotspotAuthenticationEventDetails :
	Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails
{
	HotspotAuthenticationEventDetails(std::nullptr_t) noexcept {}
};

struct HotspotAuthenticationContext :
	Windows::Networking::NetworkOperators::IHotspotAuthenticationContext,
	Requires<HotspotAuthenticationContext, Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2>
{
	HotspotAuthenticationContext(std::nullptr_t) noexcept {}
	static bool TryGetAuthenticationContext(String const & evenToken, Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context);
	template <unsigned S0> static bool TryGetAuthenticationContext(wchar_t const (&evenToken)[S0], Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context);
};

struct HotspotCredentialsAuthenticationResult :
	Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult
{
	HotspotCredentialsAuthenticationResult(std::nullptr_t) noexcept {}
};

struct ProvisionFromXmlDocumentResults :
	Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults
{
	ProvisionFromXmlDocumentResults(std::nullptr_t) noexcept {}
};

struct ProvisionedProfile :
	Windows::Networking::NetworkOperators::IProvisionedProfile
{
	ProvisionedProfile(std::nullptr_t) noexcept {}
};

struct ProvisioningAgent :
	Windows::Networking::NetworkOperators::IProvisioningAgent
{
	ProvisioningAgent(std::nullptr_t) noexcept {}
	ProvisioningAgent();
	static Windows::Networking::NetworkOperators::ProvisioningAgent CreateFromNetworkAccountId(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::ProvisioningAgent CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]);
};

struct UssdMessage :
	Windows::Networking::NetworkOperators::IUssdMessage
{
	UssdMessage(std::nullptr_t) noexcept {}
	UssdMessage(String const & messageText);
	template <unsigned S0> UssdMessage(wchar_t const (&messageText)[S0]);
};

struct UssdReply :
	Windows::Networking::NetworkOperators::IUssdReply
{
	UssdReply(std::nullptr_t) noexcept {}
};

struct UssdSession :
	Windows::Networking::NetworkOperators::IUssdSession
{
	UssdSession(std::nullptr_t) noexcept {}
	static Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkAccountId(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]);
	static Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkInterfaceId(String const & networkInterfaceId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkInterfaceId(wchar_t const (&networkInterfaceId)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

struct ProximityMessage :
	Windows::Networking::Proximity::IProximityMessage
{
	ProximityMessage(std::nullptr_t) noexcept {}
};

struct ProximityDevice :
	Windows::Networking::Proximity::IProximityDevice
{
	ProximityDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector();
	static Windows::Networking::Proximity::ProximityDevice GetDefault();
	static Windows::Networking::Proximity::ProximityDevice FromId(String const & deviceId);
	template <unsigned S0> static Windows::Networking::Proximity::ProximityDevice FromId(wchar_t const (&deviceId)[S0]);
};

struct TriggeredConnectionStateChangedEventArgs :
	Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs
{
	TriggeredConnectionStateChangedEventArgs(std::nullptr_t) noexcept {}
};

struct PeerInformation :
	Windows::Networking::Proximity::IPeerInformation,
	Requires<PeerInformation, Windows::Networking::Proximity::IPeerInformation3>
{
	PeerInformation(std::nullptr_t) noexcept {}
};

struct ConnectionRequestedEventArgs :
	Windows::Networking::Proximity::IConnectionRequestedEventArgs
{
	ConnectionRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PeerWatcher :
	Windows::Networking::Proximity::IPeerWatcher
{
	PeerWatcher(std::nullptr_t) noexcept {}
};

struct PeerFinder
{
	PeerFinder() = delete;
	static Windows::Networking::Proximity::PeerRole Role();
	static void Role(Windows::Networking::Proximity::PeerRole value);
	static Windows::Storage::Streams::IBuffer DiscoveryData();
	static void DiscoveryData(Windows::Storage::Streams::IBuffer const & value);
	static Windows::Networking::Proximity::PeerWatcher CreateWatcher();
	static bool AllowBluetooth();
	static void AllowBluetooth(bool value);
	static bool AllowInfrastructure();
	static void AllowInfrastructure(bool value);
	static bool AllowWiFiDirect();
	static void AllowWiFiDirect(bool value);
	static String DisplayName();
	static void DisplayName(String const & value);
	template <unsigned S0> static void DisplayName(wchar_t const (&value)[S0]);
	static Windows::Networking::Proximity::PeerDiscoveryTypes SupportedDiscoveryTypes();
	static Windows::Foundation::Collections::IMap<String, String> AlternateIdentities();
	static void Start();
	static void Start(String const & peerMessage);
	template <unsigned S0> static void Start(wchar_t const (&peerMessage)[S0]);
	static void Stop();
	static EventRegistrationToken TriggeredConnectionStateChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken TriggeredConnectionStateChanged(F handler);
	static void TriggeredConnectionStateChanged(EventRegistrationToken cookie);
	static EventRegistrationToken ConnectionRequested(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken ConnectionRequested(F handler);
	static void ConnectionRequested(EventRegistrationToken cookie);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> FindAllPeersAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> ConnectAsync(Windows::Networking::Proximity::PeerInformation const & peerInformation);
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

struct PushNotificationChannel :
	Windows::Networking::PushNotifications::IPushNotificationChannel
{
	PushNotificationChannel(std::nullptr_t) noexcept {}
};

struct PushNotificationReceivedEventArgs :
	Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs
{
	PushNotificationReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct RawNotification :
	Windows::Networking::PushNotifications::IRawNotification
{
	RawNotification(std::nullptr_t) noexcept {}
};

struct PushNotificationChannelManager
{
	PushNotificationChannelManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(String const & applicationId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(wchar_t const (&applicationId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(String const & tileId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(wchar_t const (&tileId)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

struct ControlChannelTrigger :
	Windows::Networking::Sockets::IControlChannelTrigger
{
	ControlChannelTrigger(std::nullptr_t) noexcept {}
	ControlChannelTrigger(String const & channelId, unsigned serverKeepAliveIntervalInMinutes);
	template <unsigned S0> ControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned serverKeepAliveIntervalInMinutes);
	ControlChannelTrigger(String const & channelId, unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType);
	template <unsigned S0> ControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType);
};

struct DatagramSocketControl :
	Windows::Networking::Sockets::IDatagramSocketControl,
	Requires<DatagramSocketControl, Windows::Networking::Sockets::IDatagramSocketControl2>
{
	DatagramSocketControl(std::nullptr_t) noexcept {}
};

struct DatagramSocketInformation :
	Windows::Networking::Sockets::IDatagramSocketInformation
{
	DatagramSocketInformation(std::nullptr_t) noexcept {}
};

struct DatagramSocket :
	Windows::Networking::Sockets::IDatagramSocket,
	Requires<DatagramSocket, Windows::Networking::Sockets::IDatagramSocket2>
{
	DatagramSocket(std::nullptr_t) noexcept {}
	DatagramSocket();
	using impl_IDatagramSocket::BindServiceNameAsync;
	using impl_IDatagramSocket2::BindServiceNameAsync;
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::HostNameSortOptions sortOptions);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::HostNameSortOptions sortOptions);
};

struct DatagramSocketMessageReceivedEventArgs :
	Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs
{
	DatagramSocketMessageReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct StreamSocketControl :
	Windows::Networking::Sockets::IStreamSocketControl,
	Requires<StreamSocketControl, Windows::Networking::Sockets::IStreamSocketControl2>
{
	StreamSocketControl(std::nullptr_t) noexcept {}
};

struct StreamSocketInformation :
	Windows::Networking::Sockets::IStreamSocketInformation,
	Requires<StreamSocketInformation, Windows::Networking::Sockets::IStreamSocketInformation2>
{
	StreamSocketInformation(std::nullptr_t) noexcept {}
};

struct StreamSocket :
	Windows::Networking::Sockets::IStreamSocket,
	Requires<StreamSocket, Windows::Networking::Sockets::IStreamSocket2>
{
	StreamSocket(std::nullptr_t) noexcept {}
	StreamSocket();
	using impl_IStreamSocket::ConnectAsync;
	using impl_IStreamSocket2::ConnectAsync;
};

struct StreamSocketListenerControl :
	Windows::Networking::Sockets::IStreamSocketListenerControl
{
	StreamSocketListenerControl(std::nullptr_t) noexcept {}
};

struct StreamSocketListenerInformation :
	Windows::Networking::Sockets::IStreamSocketListenerInformation
{
	StreamSocketListenerInformation(std::nullptr_t) noexcept {}
};

struct StreamSocketListener :
	Windows::Networking::Sockets::IStreamSocketListener,
	Requires<StreamSocketListener, Windows::Networking::Sockets::IStreamSocketListener2>
{
	StreamSocketListener(std::nullptr_t) noexcept {}
	StreamSocketListener();
	using impl_IStreamSocketListener::BindServiceNameAsync;
	using impl_IStreamSocketListener2::BindServiceNameAsync;
};

struct StreamSocketListenerConnectionReceivedEventArgs :
	Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs
{
	StreamSocketListenerConnectionReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct WebSocketClosedEventArgs :
	Windows::Networking::Sockets::IWebSocketClosedEventArgs
{
	WebSocketClosedEventArgs(std::nullptr_t) noexcept {}
};

struct MessageWebSocketControl :
	Windows::Networking::Sockets::IMessageWebSocketControl
{
	MessageWebSocketControl(std::nullptr_t) noexcept {}
};

struct MessageWebSocketInformation :
	Windows::Networking::Sockets::IWebSocketInformation
{
	MessageWebSocketInformation(std::nullptr_t) noexcept {}
};

struct MessageWebSocket :
	Windows::Networking::Sockets::IMessageWebSocket
{
	MessageWebSocket(std::nullptr_t) noexcept {}
	MessageWebSocket();
};

struct MessageWebSocketMessageReceivedEventArgs :
	Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs
{
	MessageWebSocketMessageReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct StreamWebSocketControl :
	Windows::Networking::Sockets::IStreamWebSocketControl
{
	StreamWebSocketControl(std::nullptr_t) noexcept {}
};

struct StreamWebSocketInformation :
	Windows::Networking::Sockets::IWebSocketInformation
{
	StreamWebSocketInformation(std::nullptr_t) noexcept {}
};

struct StreamWebSocket :
	Windows::Networking::Sockets::IStreamWebSocket
{
	StreamWebSocket(std::nullptr_t) noexcept {}
	StreamWebSocket();
};

struct WebSocketKeepAlive :
	Windows::ApplicationModel::Background::IBackgroundTask
{
	WebSocketKeepAlive(std::nullptr_t) noexcept {}
	WebSocketKeepAlive();
};

struct SocketError
{
	SocketError() = delete;
	static Windows::Networking::Sockets::SocketErrorStatus GetStatus(int hresult);
};

struct WebSocketError
{
	WebSocketError() = delete;
	static Windows::Web::WebErrorStatus GetStatus(int hresult);
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

struct OnlineIdServiceTicketRequest :
	Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest
{
	OnlineIdServiceTicketRequest(std::nullptr_t) noexcept {}
	OnlineIdServiceTicketRequest(String const & service, String const & policy);
	template <unsigned S0, unsigned S1> OnlineIdServiceTicketRequest(wchar_t const (&service)[S0], wchar_t const (&policy)[S1]);
	OnlineIdServiceTicketRequest(String const & service);
	template <unsigned S0> OnlineIdServiceTicketRequest(wchar_t const (&service)[S0]);
};

struct OnlineIdServiceTicket :
	Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicket
{
	OnlineIdServiceTicket(std::nullptr_t) noexcept {}
};

struct UserAuthenticationOperation :
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::OnlineId::UserIdentity>
{
	UserAuthenticationOperation(std::nullptr_t) noexcept {}
};

struct SignOutUserOperation :
	Windows::Foundation::IAsyncAction
{
	SignOutUserOperation(std::nullptr_t) noexcept {}
};

struct UserIdentity :
	Windows::Security::Authentication::OnlineId::IUserIdentity
{
	UserIdentity(std::nullptr_t) noexcept {}
};

struct OnlineIdAuthenticator :
	Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator
{
	OnlineIdAuthenticator(std::nullptr_t) noexcept {}
	OnlineIdAuthenticator();
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

struct WebAuthenticationResult :
	Windows::Security::Authentication::Web::IWebAuthenticationResult
{
	WebAuthenticationResult(std::nullptr_t) noexcept {}
};

struct WebAuthenticationBroker
{
	WebAuthenticationBroker() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri);
	static Windows::Foundation::Uri GetCurrentApplicationCallbackUri();
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

struct PasswordCredential :
	Windows::Security::Credentials::IPasswordCredential
{
	PasswordCredential(std::nullptr_t) noexcept {}
	PasswordCredential();
	PasswordCredential(String const & resource, String const & userName, String const & password);
	template <unsigned S0, unsigned S1, unsigned S2> PasswordCredential(wchar_t const (&resource)[S0], wchar_t const (&userName)[S1], wchar_t const (&password)[S2]);
};

struct PasswordVault :
	Windows::Security::Credentials::IPasswordVault
{
	PasswordVault(std::nullptr_t) noexcept {}
	PasswordVault();
};

struct PasswordCredentialPropertyStore :
	Windows::Foundation::Collections::IPropertySet
{
	PasswordCredentialPropertyStore(std::nullptr_t) noexcept {}
	PasswordCredentialPropertyStore();
};

struct WebAccountProvider :
	Windows::Security::Credentials::IWebAccountProvider
{
	WebAccountProvider(std::nullptr_t) noexcept {}
	WebAccountProvider(String const & id, String const & displayName, Windows::Foundation::Uri const & iconUri);
	template <unsigned S0, unsigned S1> WebAccountProvider(wchar_t const (&id)[S0], wchar_t const (&displayName)[S1], Windows::Foundation::Uri const & iconUri);
};

struct WebAccount :
	Windows::Security::Credentials::IWebAccount
{
	WebAccount(std::nullptr_t) noexcept {}
	WebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, String const & userName, Windows::Security::Credentials::WebAccountState state);
	template <unsigned S0> WebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, wchar_t const (&userName)[S0], Windows::Security::Credentials::WebAccountState state);
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

struct UserConsentVerifier
{
	UserConsentVerifier() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> CheckAvailabilityAsync();
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> RequestVerificationAsync(String const & message);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> RequestVerificationAsync(wchar_t const (&message)[S0]);
};

struct CredentialPickerOptions :
	Windows::Security::Credentials::UI::ICredentialPickerOptions
{
	CredentialPickerOptions(std::nullptr_t) noexcept {}
	CredentialPickerOptions();
};

struct CredentialPickerResults :
	Windows::Security::Credentials::UI::ICredentialPickerResults
{
	CredentialPickerResults(std::nullptr_t) noexcept {}
};

struct CredentialPicker
{
	CredentialPicker() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(Windows::Security::Credentials::UI::CredentialPickerOptions const & options);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(String const & targetName, String const & message);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1]);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(String const & targetName, String const & message, String const & caption);
	template <unsigned S0, unsigned S1, unsigned S2> static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1], wchar_t const (&caption)[S2]);
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

struct CryptographicBuffer
{
	CryptographicBuffer() = delete;
	static bool Compare(Windows::Storage::Streams::IBuffer const & object1, Windows::Storage::Streams::IBuffer const & object2);
	static Windows::Storage::Streams::IBuffer GenerateRandom(unsigned length);
	static unsigned GenerateRandomNumber();
	static Windows::Storage::Streams::IBuffer DecodeFromHexString(String const & value);
	template <unsigned S0> static Windows::Storage::Streams::IBuffer DecodeFromHexString(wchar_t const (&value)[S0]);
	static String EncodeToHexString(Windows::Storage::Streams::IBuffer const & buffer);
	static Windows::Storage::Streams::IBuffer DecodeFromBase64String(String const & value);
	template <unsigned S0> static Windows::Storage::Streams::IBuffer DecodeFromBase64String(wchar_t const (&value)[S0]);
	static String EncodeToBase64String(Windows::Storage::Streams::IBuffer const & buffer);
	static Windows::Storage::Streams::IBuffer ConvertStringToBinary(String const & value, Windows::Security::Cryptography::BinaryStringEncoding encoding);
	template <unsigned S0> static Windows::Storage::Streams::IBuffer ConvertStringToBinary(wchar_t const (&value)[S0], Windows::Security::Cryptography::BinaryStringEncoding encoding);
	static String ConvertBinaryToString(Windows::Security::Cryptography::BinaryStringEncoding encoding, Windows::Storage::Streams::IBuffer const & buffer);
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

struct Certificate :
	Windows::Security::Cryptography::Certificates::ICertificate
{
	Certificate(std::nullptr_t) noexcept {}
	Certificate(Windows::Storage::Streams::IBuffer const & certBlob);
};

struct CertificateRequestProperties :
	Windows::Security::Cryptography::Certificates::ICertificateRequestProperties,
	Requires<CertificateRequestProperties, Windows::Security::Cryptography::Certificates::ICertificateRequestProperties2>
{
	CertificateRequestProperties(std::nullptr_t) noexcept {}
	CertificateRequestProperties();
};

struct UserCertificateEnrollmentManager :
	Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager
{
	UserCertificateEnrollmentManager(std::nullptr_t) noexcept {}
};

struct CertificateEnrollmentManager
{
	CertificateEnrollmentManager() = delete;
	static Windows::Foundation::IAsyncOperation<String> CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request);
	static Windows::Foundation::IAsyncAction InstallCertificateAsync(String const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions installOption);
	template <unsigned S0> static Windows::Foundation::IAsyncAction InstallCertificateAsync(wchar_t const (&certificate)[S0], Windows::Security::Cryptography::Certificates::InstallOptions installOption);
	static Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName);
	template <unsigned S0, unsigned S1, unsigned S2> static Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2]);
	static Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager UserCertificateEnrollmentManager();
	static Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName, String const & keyStorageProvider);
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> static Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2], wchar_t const (&keyStorageProvider)[S3]);
};

struct KeyAttestationHelper
{
	KeyAttestationHelper() = delete;
	static Windows::Foundation::IAsyncOperation<String> DecryptTpmAttestationCredentialAsync(String const & credential);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> DecryptTpmAttestationCredentialAsync(wchar_t const (&credential)[S0]);
	static String GetTpmAttestationCredentialId(String const & credential);
	template <unsigned S0> static String GetTpmAttestationCredentialId(wchar_t const (&credential)[S0]);
};

struct CertificateQuery :
	Windows::Security::Cryptography::Certificates::ICertificateQuery
{
	CertificateQuery(std::nullptr_t) noexcept {}
	CertificateQuery();
};

struct CertificateStore :
	Windows::Security::Cryptography::Certificates::ICertificateStore
{
	CertificateStore(std::nullptr_t) noexcept {}
};

struct CertificateStores
{
	CertificateStores() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query);
	static Windows::Security::Cryptography::Certificates::CertificateStore TrustedRootCertificationAuthorities();
	static Windows::Security::Cryptography::Certificates::CertificateStore IntermediateCertificationAuthorities();
	static Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(String const & storeName);
	template <unsigned S0> static Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(wchar_t const (&storeName)[S0]);
};

struct KeyAlgorithmNames
{
	KeyAlgorithmNames() = delete;
	static String Rsa();
	static String Dsa();
	static String Ecdh256();
	static String Ecdh384();
	static String Ecdh521();
	static String Ecdsa256();
	static String Ecdsa384();
	static String Ecdsa521();
};

struct KeyStorageProviderNames
{
	KeyStorageProviderNames() = delete;
	static String SoftwareKeyStorageProvider();
	static String SmartcardKeyStorageProvider();
	static String PlatformKeyStorageProvider();
};

struct ChainBuildingParameters :
	Windows::Security::Cryptography::Certificates::IChainBuildingParameters
{
	ChainBuildingParameters(std::nullptr_t) noexcept {}
	ChainBuildingParameters();
};

struct ChainValidationParameters :
	Windows::Security::Cryptography::Certificates::IChainValidationParameters
{
	ChainValidationParameters(std::nullptr_t) noexcept {}
	ChainValidationParameters();
};

struct CertificateChain :
	Windows::Security::Cryptography::Certificates::ICertificateChain
{
	CertificateChain(std::nullptr_t) noexcept {}
};

struct CmsTimestampInfo :
	Windows::Security::Cryptography::Certificates::ICmsTimestampInfo
{
	CmsTimestampInfo(std::nullptr_t) noexcept {}
};

struct CmsSignerInfo :
	Windows::Security::Cryptography::Certificates::ICmsSignerInfo
{
	CmsSignerInfo(std::nullptr_t) noexcept {}
	CmsSignerInfo();
};

struct CmsAttachedSignature :
	Windows::Security::Cryptography::Certificates::ICmsAttachedSignature
{
	CmsAttachedSignature(std::nullptr_t) noexcept {}
	CmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates);
};

struct CmsDetachedSignature :
	Windows::Security::Cryptography::Certificates::ICmsDetachedSignature
{
	CmsDetachedSignature(std::nullptr_t) noexcept {}
	CmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates);
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

struct KeyDerivationParameters :
	Windows::Security::Cryptography::Core::IKeyDerivationParameters
{
	KeyDerivationParameters(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned iterationCount);
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context);
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo);
};

struct CryptographicKey :
	Windows::Security::Cryptography::Core::ICryptographicKey
{
	CryptographicKey(std::nullptr_t) noexcept {}
};

struct CryptographicHash :
	Windows::Security::Cryptography::Core::IHashComputation
{
	CryptographicHash(std::nullptr_t) noexcept {}
};

struct PersistedKeyProvider
{
	PersistedKeyProvider() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding padding);
	static Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding);
	template <unsigned S0> static Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding padding);
};

struct EncryptedAndAuthenticatedData :
	Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData
{
	EncryptedAndAuthenticatedData(std::nullptr_t) noexcept {}
};

struct CryptographicEngine
{
	CryptographicEngine() = delete;
	static Windows::Storage::Streams::IBuffer Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv);
	static Windows::Storage::Streams::IBuffer Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv);
	static Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData);
	static Windows::Storage::Streams::IBuffer DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData);
	static Windows::Storage::Streams::IBuffer Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
	static bool VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature);
	static Windows::Storage::Streams::IBuffer DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned desiredKeySize);
	static Windows::Storage::Streams::IBuffer SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
	static bool VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
};

struct HashAlgorithmProvider :
	Windows::Security::Cryptography::Core::IHashAlgorithmProvider
{
	HashAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct MacAlgorithmProvider :
	Windows::Security::Cryptography::Core::IMacAlgorithmProvider,
	Requires<MacAlgorithmProvider, Windows::Security::Cryptography::Core::IMacAlgorithmProvider2>
{
	MacAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct KeyDerivationAlgorithmProvider :
	Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider
{
	KeyDerivationAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct SymmetricKeyAlgorithmProvider :
	Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider
{
	SymmetricKeyAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct AsymmetricKeyAlgorithmProvider :
	Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider
{
	AsymmetricKeyAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct HashAlgorithmNames
{
	HashAlgorithmNames() = delete;
	static String Md5();
	static String Sha1();
	static String Sha256();
	static String Sha384();
	static String Sha512();
};

struct MacAlgorithmNames
{
	MacAlgorithmNames() = delete;
	static String HmacMd5();
	static String HmacSha1();
	static String HmacSha256();
	static String HmacSha384();
	static String HmacSha512();
	static String AesCmac();
};

struct SymmetricAlgorithmNames
{
	SymmetricAlgorithmNames() = delete;
	static String DesCbc();
	static String DesEcb();
	static String TripleDesCbc();
	static String TripleDesEcb();
	static String Rc2Cbc();
	static String Rc2Ecb();
	static String AesCbc();
	static String AesEcb();
	static String AesGcm();
	static String AesCcm();
	static String AesCbcPkcs7();
	static String AesEcbPkcs7();
	static String DesCbcPkcs7();
	static String DesEcbPkcs7();
	static String TripleDesCbcPkcs7();
	static String TripleDesEcbPkcs7();
	static String Rc2CbcPkcs7();
	static String Rc2EcbPkcs7();
	static String Rc4();
};

struct AsymmetricAlgorithmNames
{
	AsymmetricAlgorithmNames() = delete;
	static String RsaPkcs1();
	static String RsaOaepSha1();
	static String RsaOaepSha256();
	static String RsaOaepSha384();
	static String RsaOaepSha512();
	static String EcdsaP256Sha256();
	static String EcdsaP384Sha384();
	static String EcdsaP521Sha512();
	static String DsaSha1();
	static String DsaSha256();
	static String RsaSignPkcs1Sha1();
	static String RsaSignPkcs1Sha256();
	static String RsaSignPkcs1Sha384();
	static String RsaSignPkcs1Sha512();
	static String RsaSignPssSha1();
	static String RsaSignPssSha256();
	static String RsaSignPssSha384();
	static String RsaSignPssSha512();
};

struct KeyDerivationAlgorithmNames
{
	KeyDerivationAlgorithmNames() = delete;
	static String Pbkdf2Md5();
	static String Pbkdf2Sha1();
	static String Pbkdf2Sha256();
	static String Pbkdf2Sha384();
	static String Pbkdf2Sha512();
	static String Sp800108CtrHmacMd5();
	static String Sp800108CtrHmacSha1();
	static String Sp800108CtrHmacSha256();
	static String Sp800108CtrHmacSha384();
	static String Sp800108CtrHmacSha512();
	static String Sp80056aConcatMd5();
	static String Sp80056aConcatSha1();
	static String Sp80056aConcatSha256();
	static String Sp80056aConcatSha384();
	static String Sp80056aConcatSha512();
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

struct DataProtectionProvider :
	Windows::Security::Cryptography::DataProtection::IDataProtectionProvider
{
	DataProtectionProvider(std::nullptr_t) noexcept {}
	DataProtectionProvider();
	DataProtectionProvider(String const & protectionDescriptor);
	template <unsigned S0> DataProtectionProvider(wchar_t const (&protectionDescriptor)[S0]);
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

struct FileRevocationManager
{
	FileRevocationManager() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, String const & enterpriseIdentity);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, wchar_t const (&enterpriseIdentity)[S0]);
	static Windows::Foundation::IAsyncOperation<bool> CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem);
	static void Revoke(String const & enterpriseIdentity);
	template <unsigned S0> static void Revoke(wchar_t const (&enterpriseIdentity)[S0]);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> GetStatusAsync(Windows::Storage::IStorageItem const & storageItem);
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

struct EasComplianceResults :
	Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults,
	Requires<EasComplianceResults, Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults2>
{
	EasComplianceResults(std::nullptr_t) noexcept {}
};

struct EasClientSecurityPolicy :
	Windows::Security::ExchangeActiveSyncProvisioning::IEasClientSecurityPolicy
{
	EasClientSecurityPolicy(std::nullptr_t) noexcept {}
	EasClientSecurityPolicy();
};

struct EasClientDeviceInformation :
	Windows::Security::ExchangeActiveSyncProvisioning::IEasClientDeviceInformation
{
	EasClientDeviceInformation(std::nullptr_t) noexcept {}
	EasClientDeviceInformation();
};

}}}}

namespace Modern { namespace Windows { namespace Storage {

struct StorageFile :
	Windows::Storage::IStorageFile,
	Requires<StorageFile, Windows::Storage::IStorageItemProperties, Windows::Storage::IStorageItemProperties2, Windows::Storage::IStorageItem2, Windows::Storage::IStorageItemPropertiesWithProvider, Windows::Storage::IStorageFilePropertiesWithAvailability>
{
	StorageFile(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(String const & path);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(wchar_t const (&path)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(String const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <typename F> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(String const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <unsigned S0, typename F> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <typename F> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(String const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
};

struct StorageFolder :
	Windows::Storage::IStorageFolder,
	Requires<StorageFolder, Windows::Storage::Search::IStorageFolderQueryOperations, Windows::Storage::IStorageItemProperties, Windows::Storage::IStorageItemProperties2, Windows::Storage::IStorageItem2, Windows::Storage::IStorageFolder2, Windows::Storage::IStorageItemPropertiesWithProvider>
{
	StorageFolder(std::nullptr_t) noexcept {}
	using impl_IStorageFolderQueryOperations::GetFilesAsync;
	using impl_IStorageFolderQueryOperations::GetFoldersAsync;
	using impl_IStorageFolderQueryOperations::GetItemsAsync;
	using impl_IStorageFolder::GetFilesAsync;
	using impl_IStorageFolder::GetFoldersAsync;
	using impl_IStorageFolder::GetItemsAsync;
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(String const & path);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(wchar_t const (&path)[S0]);
};

struct StorageLibrary :
	Windows::Storage::IStorageLibrary
{
	StorageLibrary(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> GetLibraryAsync(Windows::Storage::KnownLibraryId libraryId);
};

struct KnownFolders
{
	KnownFolders() = delete;
	static Windows::Storage::StorageFolder SavedPictures();
	static Windows::Storage::StorageFolder Playlists();
	static Windows::Storage::StorageFolder MusicLibrary();
	static Windows::Storage::StorageFolder PicturesLibrary();
	static Windows::Storage::StorageFolder VideosLibrary();
	static Windows::Storage::StorageFolder DocumentsLibrary();
	static Windows::Storage::StorageFolder HomeGroup();
	static Windows::Storage::StorageFolder RemovableDevices();
	static Windows::Storage::StorageFolder MediaServerDevices();
	static Windows::Storage::StorageFolder CameraRoll();
};

struct DownloadsFolder
{
	DownloadsFolder() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName, Windows::Storage::CreationCollisionOption option);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption option);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName, Windows::Storage::CreationCollisionOption option);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption option);
};

struct StreamedFileDataRequest :
	Windows::Storage::Streams::IOutputStream,
	Requires<StreamedFileDataRequest, Windows::Storage::IStreamedFileDataRequest>
{
	StreamedFileDataRequest(std::nullptr_t) noexcept {}
};

struct StorageStreamTransaction :
	Windows::Storage::IStorageStreamTransaction
{
	StorageStreamTransaction(std::nullptr_t) noexcept {}
};

struct StorageProvider :
	Windows::Storage::IStorageProvider
{
	StorageProvider(std::nullptr_t) noexcept {}
};

struct FileIO
{
	FileIO() = delete;
	static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]);
	static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents);
	template <unsigned S0> static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]);
	static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncAction WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer);
};

struct PathIO
{
	PathIO() = delete;
	static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(String const & absolutePath);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(wchar_t const (&absolutePath)[S0]);
	static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteTextAsync(String const & absolutePath, String const & contents);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncAction WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]);
	static Windows::Foundation::IAsyncAction WriteTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncAction WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendTextAsync(String const & absolutePath, String const & contents);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncAction AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]);
	static Windows::Foundation::IAsyncAction AppendTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncAction AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(String const & absolutePath);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(wchar_t const (&absolutePath)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines);
	template <unsigned S0> static Windows::Foundation::IAsyncAction AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncAction AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(String const & absolutePath);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(wchar_t const (&absolutePath)[S0]);
	static Windows::Foundation::IAsyncAction WriteBufferAsync(String const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteBufferAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::IBuffer const & buffer);
};

struct CachedFileManager
{
	CachedFileManager() = delete;
	static void DeferUpdates(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Provider::FileUpdateStatus> CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file);
};

struct SystemAudioProperties :
	Windows::Storage::ISystemAudioProperties
{
	SystemAudioProperties(std::nullptr_t) noexcept {}
};

struct SystemGPSProperties :
	Windows::Storage::ISystemGPSProperties
{
	SystemGPSProperties(std::nullptr_t) noexcept {}
};

struct SystemImageProperties :
	Windows::Storage::ISystemImageProperties
{
	SystemImageProperties(std::nullptr_t) noexcept {}
};

struct SystemMediaProperties :
	Windows::Storage::ISystemMediaProperties
{
	SystemMediaProperties(std::nullptr_t) noexcept {}
};

struct SystemMusicProperties :
	Windows::Storage::ISystemMusicProperties
{
	SystemMusicProperties(std::nullptr_t) noexcept {}
};

struct SystemPhotoProperties :
	Windows::Storage::ISystemPhotoProperties
{
	SystemPhotoProperties(std::nullptr_t) noexcept {}
};

struct SystemVideoProperties :
	Windows::Storage::ISystemVideoProperties
{
	SystemVideoProperties(std::nullptr_t) noexcept {}
};

struct SystemProperties
{
	SystemProperties() = delete;
	static String Author();
	static String Comment();
	static String ItemNameDisplay();
	static String Keywords();
	static String Rating();
	static String Title();
	static Windows::Storage::SystemAudioProperties Audio();
	static Windows::Storage::SystemGPSProperties GPS();
	static Windows::Storage::SystemMediaProperties Media();
	static Windows::Storage::SystemMusicProperties Music();
	static Windows::Storage::SystemPhotoProperties Photo();
	static Windows::Storage::SystemVideoProperties Video();
	static Windows::Storage::SystemImageProperties Image();
};

struct ApplicationData :
	Windows::Storage::IApplicationData
{
	ApplicationData(std::nullptr_t) noexcept {}
	static Windows::Storage::ApplicationData Current();
};

struct SetVersionRequest :
	Windows::Storage::ISetVersionRequest
{
	SetVersionRequest(std::nullptr_t) noexcept {}
};

struct ApplicationDataContainer :
	Windows::Storage::IApplicationDataContainer
{
	ApplicationDataContainer(std::nullptr_t) noexcept {}
};

struct SetVersionDeferral :
	Windows::Storage::ISetVersionDeferral
{
	SetVersionDeferral(std::nullptr_t) noexcept {}
};

struct ApplicationDataContainerSettings :
	Windows::Foundation::Collections::IPropertySet
{
	ApplicationDataContainerSettings(std::nullptr_t) noexcept {}
};

struct ApplicationDataCompositeValue :
	Windows::Foundation::Collections::IPropertySet
{
	ApplicationDataCompositeValue(std::nullptr_t) noexcept {}
	ApplicationDataCompositeValue();
};

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

struct AccessListEntryView :
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Storage::AccessCache::AccessListEntry>
{
	AccessListEntryView(std::nullptr_t) noexcept {}
};

struct StorageItemMostRecentlyUsedList :
	Windows::Storage::AccessCache::IStorageItemMostRecentlyUsedList
{
	StorageItemMostRecentlyUsedList(std::nullptr_t) noexcept {}
};

struct ItemRemovedEventArgs :
	Windows::Storage::AccessCache::IItemRemovedEventArgs
{
	ItemRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct StorageItemAccessList :
	Windows::Storage::AccessCache::IStorageItemAccessList
{
	StorageItemAccessList(std::nullptr_t) noexcept {}
};

struct StorageApplicationPermissions
{
	StorageApplicationPermissions() = delete;
	static Windows::Storage::AccessCache::StorageItemAccessList FutureAccessList();
	static Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList MostRecentlyUsedList();
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

struct FileInformationFactory :
	Windows::Storage::BulkAccess::IFileInformationFactory
{
	FileInformationFactory(std::nullptr_t) noexcept {}
	FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode);
	FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize);
	FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions thumbnailOptions);
	FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions thumbnailOptions, bool delayLoad);
};

struct FileInformation :
	Windows::Storage::BulkAccess::IStorageItemInformation,
	Requires<FileInformation, Windows::Storage::IStorageFile, Windows::Storage::Streams::IInputStreamReference, Windows::Storage::Streams::IRandomAccessStreamReference, Windows::Storage::IStorageItem, Windows::Storage::IStorageItemProperties, Windows::Storage::IStorageItem2, Windows::Storage::IStorageItemPropertiesWithProvider, Windows::Storage::IStorageFilePropertiesWithAvailability>
{
	FileInformation(std::nullptr_t) noexcept {}
};

struct FolderInformation :
	Windows::Storage::BulkAccess::IStorageItemInformation,
	Requires<FolderInformation, Windows::Storage::IStorageFolder, Windows::Storage::IStorageItem, Windows::Storage::IStorageItemProperties, Windows::Storage::Search::IStorageFolderQueryOperations, Windows::Storage::IStorageItem2, Windows::Storage::IStorageFolder2, Windows::Storage::IStorageItemPropertiesWithProvider>
{
	FolderInformation(std::nullptr_t) noexcept {}
	using impl_IStorageFolderQueryOperations::GetFilesAsync;
	using impl_IStorageFolderQueryOperations::GetFoldersAsync;
	using impl_IStorageFolderQueryOperations::GetItemsAsync;
	using impl_IStorageFolder::GetFilesAsync;
	using impl_IStorageFolder::GetFoldersAsync;
	using impl_IStorageFolder::GetItemsAsync;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

struct Compressor :
	Windows::Storage::Compression::ICompressor
{
	Compressor(std::nullptr_t) noexcept {}
	Compressor(Windows::Storage::Streams::IOutputStream const & underlyingStream);
	Compressor(Windows::Storage::Streams::IOutputStream const & underlyingStream, Windows::Storage::Compression::CompressAlgorithm algorithm, unsigned blockSize);
};

struct Decompressor :
	Windows::Storage::Compression::IDecompressor
{
	Decompressor(std::nullptr_t) noexcept {}
	Decompressor(Windows::Storage::Streams::IInputStream const & underlyingStream);
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

struct StorageItemThumbnail :
	Windows::Storage::Streams::IRandomAccessStreamWithContentType,
	Requires<StorageItemThumbnail, Windows::Storage::FileProperties::IThumbnailProperties>
{
	StorageItemThumbnail(std::nullptr_t) noexcept {}
};

struct MusicProperties :
	Windows::Storage::FileProperties::IMusicProperties
{
	MusicProperties(std::nullptr_t) noexcept {}
};

struct VideoProperties :
	Windows::Storage::FileProperties::IVideoProperties
{
	VideoProperties(std::nullptr_t) noexcept {}
};

struct ImageProperties :
	Windows::Storage::FileProperties::IImageProperties
{
	ImageProperties(std::nullptr_t) noexcept {}
};

struct DocumentProperties :
	Windows::Storage::FileProperties::IDocumentProperties
{
	DocumentProperties(std::nullptr_t) noexcept {}
};

struct StorageItemContentProperties :
	Windows::Storage::FileProperties::IStorageItemContentProperties
{
	StorageItemContentProperties(std::nullptr_t) noexcept {}
};

struct BasicProperties :
	Windows::Storage::FileProperties::IBasicProperties,
	Requires<BasicProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	BasicProperties(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

struct FilePickerSelectedFilesArray :
	Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>
{
	FilePickerSelectedFilesArray(std::nullptr_t) noexcept {}
};

struct FilePickerFileTypesOrderedMap :
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>>
{
	FilePickerFileTypesOrderedMap(std::nullptr_t) noexcept {}
};

struct FileExtensionVector :
	Windows::Foundation::Collections::IVector<String>
{
	FileExtensionVector(std::nullptr_t) noexcept {}
};

struct FileOpenPicker :
	Windows::Storage::Pickers::IFileOpenPicker
{
	FileOpenPicker(std::nullptr_t) noexcept {}
	FileOpenPicker();
};

struct FileSavePicker :
	Windows::Storage::Pickers::IFileSavePicker
{
	FileSavePicker(std::nullptr_t) noexcept {}
	FileSavePicker();
};

struct FolderPicker :
	Windows::Storage::Pickers::IFolderPicker
{
	FolderPicker(std::nullptr_t) noexcept {}
	FolderPicker();
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

struct FileRemovedEventArgs :
	Windows::Storage::Pickers::Provider::IFileRemovedEventArgs
{
	FileRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct FileOpenPickerUI :
	Windows::Storage::Pickers::Provider::IFileOpenPickerUI
{
	FileOpenPickerUI(std::nullptr_t) noexcept {}
};

struct PickerClosingEventArgs :
	Windows::Storage::Pickers::Provider::IPickerClosingEventArgs
{
	PickerClosingEventArgs(std::nullptr_t) noexcept {}
};

struct PickerClosingOperation :
	Windows::Storage::Pickers::Provider::IPickerClosingOperation
{
	PickerClosingOperation(std::nullptr_t) noexcept {}
};

struct PickerClosingDeferral :
	Windows::Storage::Pickers::Provider::IPickerClosingDeferral
{
	PickerClosingDeferral(std::nullptr_t) noexcept {}
};

struct FileSavePickerUI :
	Windows::Storage::Pickers::Provider::IFileSavePickerUI
{
	FileSavePickerUI(std::nullptr_t) noexcept {}
};

struct TargetFileRequestedEventArgs :
	Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs
{
	TargetFileRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct TargetFileRequest :
	Windows::Storage::Pickers::Provider::ITargetFileRequest
{
	TargetFileRequest(std::nullptr_t) noexcept {}
};

struct TargetFileRequestDeferral :
	Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral
{
	TargetFileRequestDeferral(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

struct CachedFileUpdaterUI :
	Windows::Storage::Provider::ICachedFileUpdaterUI
{
	CachedFileUpdaterUI(std::nullptr_t) noexcept {}
};

struct FileUpdateRequestedEventArgs :
	Windows::Storage::Provider::IFileUpdateRequestedEventArgs
{
	FileUpdateRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct FileUpdateRequest :
	Windows::Storage::Provider::IFileUpdateRequest
{
	FileUpdateRequest(std::nullptr_t) noexcept {}
};

struct FileUpdateRequestDeferral :
	Windows::Storage::Provider::IFileUpdateRequestDeferral
{
	FileUpdateRequestDeferral(std::nullptr_t) noexcept {}
};

struct CachedFileUpdater
{
	CachedFileUpdater() = delete;
	static void SetUpdateInformation(Windows::Storage::IStorageFile const & file, String const & contentId, Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options);
	template <unsigned S0> static void SetUpdateInformation(Windows::Storage::IStorageFile const & file, wchar_t const (&contentId)[S0], Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options);
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

struct ContentIndexer :
	Windows::Storage::Search::IContentIndexer,
	Requires<ContentIndexer, Windows::Storage::Search::IContentIndexerQueryOperations>
{
	ContentIndexer(std::nullptr_t) noexcept {}
	static Windows::Storage::Search::ContentIndexer GetIndexer(String const & indexName);
	template <unsigned S0> static Windows::Storage::Search::ContentIndexer GetIndexer(wchar_t const (&indexName)[S0]);
	static Windows::Storage::Search::ContentIndexer GetIndexer();
};

struct ValueAndLanguage :
	Windows::Storage::Search::IValueAndLanguage
{
	ValueAndLanguage(std::nullptr_t) noexcept {}
	ValueAndLanguage();
};

struct ContentIndexerQuery :
	Windows::Storage::Search::IContentIndexerQuery
{
	ContentIndexerQuery(std::nullptr_t) noexcept {}
};

struct IndexableContent :
	Windows::Storage::Search::IIndexableContent
{
	IndexableContent(std::nullptr_t) noexcept {}
	IndexableContent();
};

struct QueryOptions :
	Windows::Storage::Search::IQueryOptions,
	Requires<QueryOptions, Windows::Storage::Search::IQueryOptionsWithProviderFilter>
{
	QueryOptions(std::nullptr_t) noexcept {}
	QueryOptions();
	QueryOptions(Windows::Storage::Search::CommonFileQuery query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter);
	QueryOptions(Windows::Storage::Search::CommonFolderQuery query);
};

struct StorageFileQueryResult :
	Windows::Storage::Search::IStorageFileQueryResult,
	Requires<StorageFileQueryResult, Windows::Storage::Search::IStorageFileQueryResult2>
{
	StorageFileQueryResult(std::nullptr_t) noexcept {}
};

struct StorageFolderQueryResult :
	Windows::Storage::Search::IStorageFolderQueryResult
{
	StorageFolderQueryResult(std::nullptr_t) noexcept {}
};

struct StorageItemQueryResult :
	Windows::Storage::Search::IStorageItemQueryResult
{
	StorageItemQueryResult(std::nullptr_t) noexcept {}
};

struct SortEntryVector :
	Windows::Foundation::Collections::IVector<Modern::Windows::Storage::Search::SortEntry>
{
	SortEntryVector(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

struct DataReaderLoadOperation :
	Windows::Foundation::IAsyncOperation<unsigned>
{
	DataReaderLoadOperation(std::nullptr_t) noexcept {}
};

struct DataReader :
	Windows::Storage::Streams::IDataReader
{
	DataReader(std::nullptr_t) noexcept {}
	DataReader(Windows::Storage::Streams::IInputStream const & inputStream);
	static Windows::Storage::Streams::DataReader FromBuffer(Windows::Storage::Streams::IBuffer const & buffer);
};

struct DataWriterStoreOperation :
	Windows::Foundation::IAsyncOperation<unsigned>
{
	DataWriterStoreOperation(std::nullptr_t) noexcept {}
};

struct DataWriter :
	Windows::Storage::Streams::IDataWriter
{
	DataWriter(std::nullptr_t) noexcept {}
	DataWriter();
	DataWriter(Windows::Storage::Streams::IOutputStream const & outputStream);
};

struct RandomAccessStream
{
	RandomAccessStream() = delete;
	static Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination);
	static Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long bytesToCopy);
	static Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination);
};

struct Buffer :
	Windows::Storage::Streams::IBuffer
{
	Buffer(std::nullptr_t) noexcept {}
	Buffer(unsigned capacity);
};

struct RandomAccessStreamReference :
	Windows::Storage::Streams::IRandomAccessStreamReference
{
	RandomAccessStreamReference(std::nullptr_t) noexcept {}
	static Windows::Storage::Streams::RandomAccessStreamReference CreateFromFile(Windows::Storage::IStorageFile const & file);
	static Windows::Storage::Streams::RandomAccessStreamReference CreateFromUri(Windows::Foundation::Uri const & uri);
	static Windows::Storage::Streams::RandomAccessStreamReference CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream);
};

struct FileRandomAccessStream :
	Windows::Storage::Streams::IRandomAccessStream
{
	FileRandomAccessStream(std::nullptr_t) noexcept {}
};

struct FileInputStream :
	Windows::Storage::Streams::IInputStream
{
	FileInputStream(std::nullptr_t) noexcept {}
};

struct FileOutputStream :
	Windows::Storage::Streams::IOutputStream
{
	FileOutputStream(std::nullptr_t) noexcept {}
};

struct RandomAccessStreamOverStream :
	Windows::Storage::Streams::IRandomAccessStream
{
	RandomAccessStreamOverStream(std::nullptr_t) noexcept {}
};

struct InputStreamOverStream :
	Windows::Storage::Streams::IInputStream
{
	InputStreamOverStream(std::nullptr_t) noexcept {}
};

struct OutputStreamOverStream :
	Windows::Storage::Streams::IOutputStream
{
	OutputStreamOverStream(std::nullptr_t) noexcept {}
};

struct InMemoryRandomAccessStream :
	Windows::Storage::Streams::IRandomAccessStream
{
	InMemoryRandomAccessStream(std::nullptr_t) noexcept {}
	InMemoryRandomAccessStream();
};

}}}}

namespace Modern { namespace Windows { namespace System {

struct LauncherUIOptions :
	Windows::System::ILauncherUIOptions
{
	LauncherUIOptions(std::nullptr_t) noexcept {}
};

struct LauncherOptions :
	Windows::System::ILauncherOptions,
	Requires<LauncherOptions, Windows::System::ILauncherViewOptions>
{
	LauncherOptions(std::nullptr_t) noexcept {}
	LauncherOptions();
};

struct Launcher
{
	Launcher() = delete;
	static Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options);
	static Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options);
};

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

struct DisplayRequest :
	Windows::System::Display::IDisplayRequest
{
	DisplayRequest(std::nullptr_t) noexcept {}
	DisplayRequest();
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

struct HardwareToken :
	Windows::System::Profile::IHardwareToken
{
	HardwareToken(std::nullptr_t) noexcept {}
};

struct HardwareIdentification
{
	HardwareIdentification() = delete;
	static Windows::System::Profile::HardwareToken GetPackageSpecificToken(Windows::Storage::Streams::IBuffer const & nonce);
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

struct SmbiosInformation
{
	SmbiosInformation() = delete;
	static String SerialNumber();
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

struct InteractiveSession
{
	InteractiveSession() = delete;
	static bool IsRemote();
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

struct ThreadPoolTimer :
	Windows::System::Threading::IThreadPoolTimer
{
	ThreadPoolTimer(std::nullptr_t) noexcept {}
	static Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period);
	template <typename F> static Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period);
	static Windows::System::Threading::ThreadPoolTimer CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay);
	template <typename F> static Windows::System::Threading::ThreadPoolTimer CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay);
	static Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period, Windows::System::Threading::ITimerDestroyedHandler const & destroyed);
	template <typename F> static Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period, F destroyed);
	static Windows::System::Threading::ThreadPoolTimer CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay, Windows::System::Threading::ITimerDestroyedHandler const & destroyed);
	template <typename F> static Windows::System::Threading::ThreadPoolTimer CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay, F destroyed);
};

struct ThreadPool
{
	ThreadPool() = delete;
	static Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler);
	template <typename F> static Windows::Foundation::IAsyncAction RunAsync(F handler);
	static Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority);
	template <typename F> static Windows::Foundation::IAsyncAction RunAsync(F handler, Windows::System::Threading::WorkItemPriority priority);
	static Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options);
	template <typename F> static Windows::Foundation::IAsyncAction RunAsync(F handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options);
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

struct SignalNotifier :
	Windows::System::Threading::Core::ISignalNotifier
{
	SignalNotifier(std::nullptr_t) noexcept {}
	static Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler);
	template <unsigned S0> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler);
	template <typename F> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, F handler);
	template <unsigned S0, typename F> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], F handler);
	static Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout);
	template <unsigned S0> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout);
	template <typename F> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout);
	template <unsigned S0, typename F> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout);
	static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler);
	template <unsigned S0> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler);
	template <typename F> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, F handler);
	template <unsigned S0, typename F> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], F handler);
	static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout);
	template <unsigned S0> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout);
	template <typename F> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout);
	template <unsigned S0, typename F> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout);
};

struct PreallocatedWorkItem :
	Windows::System::Threading::Core::IPreallocatedWorkItem
{
	PreallocatedWorkItem(std::nullptr_t) noexcept {}
	PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler);
	template <typename F> PreallocatedWorkItem(F handler);
	PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority);
	template <typename F> PreallocatedWorkItem(F handler, Windows::System::Threading::WorkItemPriority priority);
	PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options);
	template <typename F> PreallocatedWorkItem(F handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options);
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

struct AdvertisingManager
{
	AdvertisingManager() = delete;
	static String AdvertisingId();
};

struct UserInformation
{
	UserInformation() = delete;
	static bool AccountPictureChangeEnabled();
	static bool NameAccessAllowed();
	static Windows::Storage::IStorageFile GetAccountPicture(Windows::System::UserProfile::AccountPictureKind kind);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPictureAsync(Windows::Storage::IStorageFile const & image);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPicturesAsync(Windows::Storage::IStorageFile const & smallImage, Windows::Storage::IStorageFile const & largeImage, Windows::Storage::IStorageFile const & video);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPictureFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & image);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPicturesFromStreamsAsync(Windows::Storage::Streams::IRandomAccessStream const & smallImage, Windows::Storage::Streams::IRandomAccessStream const & largeImage, Windows::Storage::Streams::IRandomAccessStream const & video);
	static EventRegistrationToken AccountPictureChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler);
	template <typename F> static EventRegistrationToken AccountPictureChanged(F changeHandler);
	static void AccountPictureChanged(EventRegistrationToken token);
	static Windows::Foundation::IAsyncOperation<String> GetDisplayNameAsync();
	static Windows::Foundation::IAsyncOperation<String> GetFirstNameAsync();
	static Windows::Foundation::IAsyncOperation<String> GetLastNameAsync();
	static Windows::Foundation::IAsyncOperation<String> GetPrincipalNameAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetSessionInitiationProtocolUriAsync();
	static Windows::Foundation::IAsyncOperation<String> GetDomainNameAsync();
};

struct LockScreen
{
	LockScreen() = delete;
	static Windows::Foundation::Uri OriginalImageFile();
	static Windows::Storage::Streams::IRandomAccessStream GetImageStream();
	static Windows::Foundation::IAsyncAction SetImageFileAsync(Windows::Storage::IStorageFile const & value);
	static Windows::Foundation::IAsyncAction SetImageStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & value);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetImageFeedResult> RequestSetImageFeedAsync(Windows::Foundation::Uri const & syndicationFeedUri);
	static bool TryRemoveImageFeed();
};

struct GlobalizationPreferences
{
	GlobalizationPreferences() = delete;
	static Windows::Foundation::Collections::IVectorView<String> Calendars();
	static Windows::Foundation::Collections::IVectorView<String> Clocks();
	static Windows::Foundation::Collections::IVectorView<String> Currencies();
	static Windows::Foundation::Collections::IVectorView<String> Languages();
	static String HomeGeographicRegion();
	static Windows::Globalization::DayOfWeek WeekStartsOn();
};

}}}}

namespace Modern { namespace Windows { namespace UI {

struct ColorHelper :
	Windows::UI::IColorHelper
{
	ColorHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Color FromArgb(byte a, byte r, byte g, byte b);
};

struct Colors :
	Windows::UI::IColors
{
	Colors(std::nullptr_t) noexcept {}
	static Windows::UI::Color AliceBlue();
	static Windows::UI::Color AntiqueWhite();
	static Windows::UI::Color Aqua();
	static Windows::UI::Color Aquamarine();
	static Windows::UI::Color Azure();
	static Windows::UI::Color Beige();
	static Windows::UI::Color Bisque();
	static Windows::UI::Color Black();
	static Windows::UI::Color BlanchedAlmond();
	static Windows::UI::Color Blue();
	static Windows::UI::Color BlueViolet();
	static Windows::UI::Color Brown();
	static Windows::UI::Color BurlyWood();
	static Windows::UI::Color CadetBlue();
	static Windows::UI::Color Chartreuse();
	static Windows::UI::Color Chocolate();
	static Windows::UI::Color Coral();
	static Windows::UI::Color CornflowerBlue();
	static Windows::UI::Color Cornsilk();
	static Windows::UI::Color Crimson();
	static Windows::UI::Color Cyan();
	static Windows::UI::Color DarkBlue();
	static Windows::UI::Color DarkCyan();
	static Windows::UI::Color DarkGoldenrod();
	static Windows::UI::Color DarkGray();
	static Windows::UI::Color DarkGreen();
	static Windows::UI::Color DarkKhaki();
	static Windows::UI::Color DarkMagenta();
	static Windows::UI::Color DarkOliveGreen();
	static Windows::UI::Color DarkOrange();
	static Windows::UI::Color DarkOrchid();
	static Windows::UI::Color DarkRed();
	static Windows::UI::Color DarkSalmon();
	static Windows::UI::Color DarkSeaGreen();
	static Windows::UI::Color DarkSlateBlue();
	static Windows::UI::Color DarkSlateGray();
	static Windows::UI::Color DarkTurquoise();
	static Windows::UI::Color DarkViolet();
	static Windows::UI::Color DeepPink();
	static Windows::UI::Color DeepSkyBlue();
	static Windows::UI::Color DimGray();
	static Windows::UI::Color DodgerBlue();
	static Windows::UI::Color Firebrick();
	static Windows::UI::Color FloralWhite();
	static Windows::UI::Color ForestGreen();
	static Windows::UI::Color Fuchsia();
	static Windows::UI::Color Gainsboro();
	static Windows::UI::Color GhostWhite();
	static Windows::UI::Color Gold();
	static Windows::UI::Color Goldenrod();
	static Windows::UI::Color Gray();
	static Windows::UI::Color Green();
	static Windows::UI::Color GreenYellow();
	static Windows::UI::Color Honeydew();
	static Windows::UI::Color HotPink();
	static Windows::UI::Color IndianRed();
	static Windows::UI::Color Indigo();
	static Windows::UI::Color Ivory();
	static Windows::UI::Color Khaki();
	static Windows::UI::Color Lavender();
	static Windows::UI::Color LavenderBlush();
	static Windows::UI::Color LawnGreen();
	static Windows::UI::Color LemonChiffon();
	static Windows::UI::Color LightBlue();
	static Windows::UI::Color LightCoral();
	static Windows::UI::Color LightCyan();
	static Windows::UI::Color LightGoldenrodYellow();
	static Windows::UI::Color LightGreen();
	static Windows::UI::Color LightGray();
	static Windows::UI::Color LightPink();
	static Windows::UI::Color LightSalmon();
	static Windows::UI::Color LightSeaGreen();
	static Windows::UI::Color LightSkyBlue();
	static Windows::UI::Color LightSlateGray();
	static Windows::UI::Color LightSteelBlue();
	static Windows::UI::Color LightYellow();
	static Windows::UI::Color Lime();
	static Windows::UI::Color LimeGreen();
	static Windows::UI::Color Linen();
	static Windows::UI::Color Magenta();
	static Windows::UI::Color Maroon();
	static Windows::UI::Color MediumAquamarine();
	static Windows::UI::Color MediumBlue();
	static Windows::UI::Color MediumOrchid();
	static Windows::UI::Color MediumPurple();
	static Windows::UI::Color MediumSeaGreen();
	static Windows::UI::Color MediumSlateBlue();
	static Windows::UI::Color MediumSpringGreen();
	static Windows::UI::Color MediumTurquoise();
	static Windows::UI::Color MediumVioletRed();
	static Windows::UI::Color MidnightBlue();
	static Windows::UI::Color MintCream();
	static Windows::UI::Color MistyRose();
	static Windows::UI::Color Moccasin();
	static Windows::UI::Color NavajoWhite();
	static Windows::UI::Color Navy();
	static Windows::UI::Color OldLace();
	static Windows::UI::Color Olive();
	static Windows::UI::Color OliveDrab();
	static Windows::UI::Color Orange();
	static Windows::UI::Color OrangeRed();
	static Windows::UI::Color Orchid();
	static Windows::UI::Color PaleGoldenrod();
	static Windows::UI::Color PaleGreen();
	static Windows::UI::Color PaleTurquoise();
	static Windows::UI::Color PaleVioletRed();
	static Windows::UI::Color PapayaWhip();
	static Windows::UI::Color PeachPuff();
	static Windows::UI::Color Peru();
	static Windows::UI::Color Pink();
	static Windows::UI::Color Plum();
	static Windows::UI::Color PowderBlue();
	static Windows::UI::Color Purple();
	static Windows::UI::Color Red();
	static Windows::UI::Color RosyBrown();
	static Windows::UI::Color RoyalBlue();
	static Windows::UI::Color SaddleBrown();
	static Windows::UI::Color Salmon();
	static Windows::UI::Color SandyBrown();
	static Windows::UI::Color SeaGreen();
	static Windows::UI::Color SeaShell();
	static Windows::UI::Color Sienna();
	static Windows::UI::Color Silver();
	static Windows::UI::Color SkyBlue();
	static Windows::UI::Color SlateBlue();
	static Windows::UI::Color SlateGray();
	static Windows::UI::Color Snow();
	static Windows::UI::Color SpringGreen();
	static Windows::UI::Color SteelBlue();
	static Windows::UI::Color Tan();
	static Windows::UI::Color Teal();
	static Windows::UI::Color Thistle();
	static Windows::UI::Color Tomato();
	static Windows::UI::Color Transparent();
	static Windows::UI::Color Turquoise();
	static Windows::UI::Color Violet();
	static Windows::UI::Color Wheat();
	static Windows::UI::Color White();
	static Windows::UI::Color WhiteSmoke();
	static Windows::UI::Color Yellow();
	static Windows::UI::Color YellowGreen();
};

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

struct SettingsCommand :
	Windows::UI::Popups::IUICommand
{
	SettingsCommand(std::nullptr_t) noexcept {}
	SettingsCommand(IInspectable const & settingsCommandId, String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & handler);
	template <unsigned S0> SettingsCommand(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & handler);
	template <typename F> SettingsCommand(IInspectable const & settingsCommandId, String const & label, F handler);
	template <unsigned S0, typename F> SettingsCommand(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], F handler);
	static Windows::UI::ApplicationSettings::SettingsCommand AccountsCommand();
};

struct SettingsPaneCommandsRequest :
	Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest
{
	SettingsPaneCommandsRequest(std::nullptr_t) noexcept {}
};

struct SettingsPaneCommandsRequestedEventArgs :
	Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs
{
	SettingsPaneCommandsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct SettingsPane :
	Windows::UI::ApplicationSettings::ISettingsPane
{
	SettingsPane(std::nullptr_t) noexcept {}
	static Windows::UI::ApplicationSettings::SettingsPane GetForCurrentView();
	static void Show();
	static Windows::UI::ApplicationSettings::SettingsEdgeLocation Edge();
};

struct WebAccountProviderCommand :
	Windows::UI::ApplicationSettings::IWebAccountProviderCommand
{
	WebAccountProviderCommand(std::nullptr_t) noexcept {}
	WebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler const & invoked);
	template <typename F> WebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, F invoked);
};

struct WebAccountCommand :
	Windows::UI::ApplicationSettings::IWebAccountCommand
{
	WebAccountCommand(std::nullptr_t) noexcept {}
	WebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler const & invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions actions);
	template <typename F> WebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, F invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions actions);
};

struct WebAccountInvokedArgs :
	Windows::UI::ApplicationSettings::IWebAccountInvokedArgs
{
	WebAccountInvokedArgs(std::nullptr_t) noexcept {}
};

struct CredentialCommand :
	Windows::UI::ApplicationSettings::ICredentialCommand
{
	CredentialCommand(std::nullptr_t) noexcept {}
	CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential);
	CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential, Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler const & deleted);
	template <typename F> CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential, F deleted);
};

struct AccountsSettingsPaneEventDeferral :
	Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral
{
	AccountsSettingsPaneEventDeferral(std::nullptr_t) noexcept {}
};

struct AccountsSettingsPaneCommandsRequestedEventArgs :
	Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs
{
	AccountsSettingsPaneCommandsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct AccountsSettingsPane :
	Windows::UI::ApplicationSettings::IAccountsSettingsPane
{
	AccountsSettingsPane(std::nullptr_t) noexcept {}
	static Windows::UI::ApplicationSettings::AccountsSettingsPane GetForCurrentView();
	static void Show();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

struct CoreDispatcher :
	Windows::UI::Core::ICoreDispatcher,
	Requires<CoreDispatcher, Windows::UI::Core::ICoreDispatcherWithTaskPriority>
{
	CoreDispatcher(std::nullptr_t) noexcept {}
};

struct CoreCursor :
	Windows::UI::Core::ICoreCursor
{
	CoreCursor(std::nullptr_t) noexcept {}
	CoreCursor(Windows::UI::Core::CoreCursorType type, unsigned id);
};

struct CoreWindow :
	Windows::UI::Core::ICoreWindow
{
	CoreWindow(std::nullptr_t) noexcept {}
	static Windows::UI::Core::CoreWindow GetForCurrentThread();
};

struct WindowActivatedEventArgs :
	Windows::UI::Core::IWindowActivatedEventArgs
{
	WindowActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AutomationProviderRequestedEventArgs :
	Windows::UI::Core::IAutomationProviderRequestedEventArgs
{
	AutomationProviderRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct CharacterReceivedEventArgs :
	Windows::UI::Core::ICharacterReceivedEventArgs
{
	CharacterReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct CoreWindowEventArgs :
	Windows::UI::Core::ICoreWindowEventArgs
{
	CoreWindowEventArgs(std::nullptr_t) noexcept {}
};

struct InputEnabledEventArgs :
	Windows::UI::Core::IInputEnabledEventArgs
{
	InputEnabledEventArgs(std::nullptr_t) noexcept {}
};

struct KeyEventArgs :
	Windows::UI::Core::IKeyEventArgs
{
	KeyEventArgs(std::nullptr_t) noexcept {}
};

struct PointerEventArgs :
	Windows::UI::Core::IPointerEventArgs
{
	PointerEventArgs(std::nullptr_t) noexcept {}
};

struct TouchHitTestingEventArgs :
	Windows::UI::Core::ITouchHitTestingEventArgs
{
	TouchHitTestingEventArgs(std::nullptr_t) noexcept {}
};

struct WindowSizeChangedEventArgs :
	Windows::UI::Core::IWindowSizeChangedEventArgs
{
	WindowSizeChangedEventArgs(std::nullptr_t) noexcept {}
};

struct VisibilityChangedEventArgs :
	Windows::UI::Core::IVisibilityChangedEventArgs
{
	VisibilityChangedEventArgs(std::nullptr_t) noexcept {}
};

struct IdleDispatchedHandlerArgs :
	Windows::UI::Core::IIdleDispatchedHandlerArgs
{
	IdleDispatchedHandlerArgs(std::nullptr_t) noexcept {}
};

struct AcceleratorKeyEventArgs :
	Windows::UI::Core::IAcceleratorKeyEventArgs
{
	AcceleratorKeyEventArgs(std::nullptr_t) noexcept {}
};

struct CoreAcceleratorKeys :
	Windows::UI::Core::ICoreAcceleratorKeys
{
	CoreAcceleratorKeys(std::nullptr_t) noexcept {}
};

struct CoreWindowResizeManager :
	Windows::UI::Core::ICoreWindowResizeManager,
	Requires<CoreWindowResizeManager, Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability>
{
	CoreWindowResizeManager(std::nullptr_t) noexcept {}
	static Windows::UI::Core::CoreWindowResizeManager GetForCurrentView();
};

struct CoreIndependentInputSource :
	Windows::UI::Core::ICoreInputSourceBase,
	Requires<CoreIndependentInputSource, Windows::UI::Core::ICorePointerInputSource>
{
	CoreIndependentInputSource(std::nullptr_t) noexcept {}
};

struct CoreComponentInputSource :
	Windows::UI::Core::ICoreInputSourceBase,
	Requires<CoreComponentInputSource, Windows::UI::Core::ICorePointerInputSource, Windows::UI::Core::ICoreKeyboardInputSource, Windows::UI::Core::ICoreComponentFocusable, Windows::UI::Core::ICoreTouchHitTesting>
{
	CoreComponentInputSource(std::nullptr_t) noexcept {}
};

struct CoreWindowPopupShowingEventArgs :
	Windows::UI::Core::ICoreWindowPopupShowingEventArgs
{
	CoreWindowPopupShowingEventArgs(std::nullptr_t) noexcept {}
};

struct CoreWindowDialog :
	Windows::UI::Core::ICoreWindowDialog
{
	CoreWindowDialog(std::nullptr_t) noexcept {}
	CoreWindowDialog();
	CoreWindowDialog(String const & title);
	template <unsigned S0> CoreWindowDialog(wchar_t const (&title)[S0]);
};

struct CoreWindowFlyout :
	Windows::UI::Core::ICoreWindowFlyout
{
	CoreWindowFlyout(std::nullptr_t) noexcept {}
	CoreWindowFlyout(Windows::Foundation::Point const & position);
	CoreWindowFlyout(Windows::Foundation::Point const & position, String const & title);
	template <unsigned S0> CoreWindowFlyout(Windows::Foundation::Point const & position, wchar_t const (&title)[S0]);
};

struct ImmersiveCoreWindowFactory :
	Windows::UI::Core::ICoreWindowFactory
{
	ImmersiveCoreWindowFactory(std::nullptr_t) noexcept {}
};

struct HostedCoreWindowFactory :
	Windows::UI::Core::ICoreWindowFactory
{
	HostedCoreWindowFactory(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

struct AnimationDescription :
	Windows::UI::Core::AnimationMetrics::IAnimationDescription
{
	AnimationDescription(std::nullptr_t) noexcept {}
	AnimationDescription(Windows::UI::Core::AnimationMetrics::AnimationEffect effect, Windows::UI::Core::AnimationMetrics::AnimationEffectTarget target);
};

struct PropertyAnimation :
	Windows::UI::Core::AnimationMetrics::IPropertyAnimation
{
	PropertyAnimation(std::nullptr_t) noexcept {}
};

struct ScaleAnimation :
	Windows::UI::Core::AnimationMetrics::IScaleAnimation
{
	ScaleAnimation(std::nullptr_t) noexcept {}
};

struct TranslationAnimation :
	Windows::UI::Core::AnimationMetrics::IPropertyAnimation
{
	TranslationAnimation(std::nullptr_t) noexcept {}
};

struct OpacityAnimation :
	Windows::UI::Core::AnimationMetrics::IOpacityAnimation
{
	OpacityAnimation(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

struct EdgeGestureEventArgs :
	Windows::UI::Input::IEdgeGestureEventArgs
{
	EdgeGestureEventArgs(std::nullptr_t) noexcept {}
};

struct EdgeGesture :
	Windows::UI::Input::IEdgeGesture
{
	EdgeGesture(std::nullptr_t) noexcept {}
	static Windows::UI::Input::EdgeGesture GetForCurrentView();
};

struct MouseWheelParameters :
	Windows::UI::Input::IMouseWheelParameters
{
	MouseWheelParameters(std::nullptr_t) noexcept {}
};

struct GestureRecognizer :
	Windows::UI::Input::IGestureRecognizer
{
	GestureRecognizer(std::nullptr_t) noexcept {}
	GestureRecognizer();
};

struct TappedEventArgs :
	Windows::UI::Input::ITappedEventArgs
{
	TappedEventArgs(std::nullptr_t) noexcept {}
};

struct RightTappedEventArgs :
	Windows::UI::Input::IRightTappedEventArgs
{
	RightTappedEventArgs(std::nullptr_t) noexcept {}
};

struct HoldingEventArgs :
	Windows::UI::Input::IHoldingEventArgs
{
	HoldingEventArgs(std::nullptr_t) noexcept {}
};

struct DraggingEventArgs :
	Windows::UI::Input::IDraggingEventArgs
{
	DraggingEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationStartedEventArgs :
	Windows::UI::Input::IManipulationStartedEventArgs
{
	ManipulationStartedEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationUpdatedEventArgs :
	Windows::UI::Input::IManipulationUpdatedEventArgs
{
	ManipulationUpdatedEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationInertiaStartingEventArgs :
	Windows::UI::Input::IManipulationInertiaStartingEventArgs
{
	ManipulationInertiaStartingEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationCompletedEventArgs :
	Windows::UI::Input::IManipulationCompletedEventArgs
{
	ManipulationCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct CrossSlidingEventArgs :
	Windows::UI::Input::ICrossSlidingEventArgs
{
	CrossSlidingEventArgs(std::nullptr_t) noexcept {}
};

struct PointerPoint :
	Windows::UI::Input::IPointerPoint
{
	PointerPoint(std::nullptr_t) noexcept {}
	static Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId);
	static Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId);
	static Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform);
	static Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform);
};

struct PointerPointProperties :
	Windows::UI::Input::IPointerPointProperties
{
	PointerPointProperties(std::nullptr_t) noexcept {}
};

struct PointerVisualizationSettings :
	Windows::UI::Input::IPointerVisualizationSettings
{
	PointerVisualizationSettings(std::nullptr_t) noexcept {}
	static Windows::UI::Input::PointerVisualizationSettings GetForCurrentView();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

struct InkDrawingAttributes :
	Windows::UI::Input::Inking::IInkDrawingAttributes
{
	InkDrawingAttributes(std::nullptr_t) noexcept {}
	InkDrawingAttributes();
};

struct InkStrokeRenderingSegment :
	Windows::UI::Input::Inking::IInkStrokeRenderingSegment
{
	InkStrokeRenderingSegment(std::nullptr_t) noexcept {}
};

struct InkStroke :
	Windows::UI::Input::Inking::IInkStroke
{
	InkStroke(std::nullptr_t) noexcept {}
};

struct InkStrokeBuilder :
	Windows::UI::Input::Inking::IInkStrokeBuilder
{
	InkStrokeBuilder(std::nullptr_t) noexcept {}
	InkStrokeBuilder();
};

struct InkRecognitionResult :
	Windows::UI::Input::Inking::IInkRecognitionResult
{
	InkRecognitionResult(std::nullptr_t) noexcept {}
};

struct InkStrokeContainer :
	Windows::UI::Input::Inking::IInkStrokeContainer
{
	InkStrokeContainer(std::nullptr_t) noexcept {}
	InkStrokeContainer();
};

struct InkRecognizer :
	Windows::UI::Input::Inking::IInkRecognizer
{
	InkRecognizer(std::nullptr_t) noexcept {}
};

struct InkRecognizerContainer :
	Windows::UI::Input::Inking::IInkRecognizerContainer
{
	InkRecognizerContainer(std::nullptr_t) noexcept {}
	InkRecognizerContainer();
};

struct InkManager :
	Windows::UI::Input::Inking::IInkManager
{
	InkManager(std::nullptr_t) noexcept {}
	InkManager();
	using impl_IInkRecognizerContainer::RecognizeAsync;
	using impl_IInkManager::RecognizeAsync;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

struct TileUpdater :
	Windows::UI::Notifications::ITileUpdater,
	Requires<TileUpdater, Windows::UI::Notifications::ITileUpdater2>
{
	TileUpdater(std::nullptr_t) noexcept {}
};

struct TileNotification :
	Windows::UI::Notifications::ITileNotification
{
	TileNotification(std::nullptr_t) noexcept {}
	TileNotification(Windows::Data::Xml::Dom::XmlDocument const & content);
};

struct ScheduledTileNotification :
	Windows::UI::Notifications::IScheduledTileNotification
{
	ScheduledTileNotification(std::nullptr_t) noexcept {}
	ScheduledTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime);
};

struct BadgeUpdater :
	Windows::UI::Notifications::IBadgeUpdater
{
	BadgeUpdater(std::nullptr_t) noexcept {}
};

struct BadgeNotification :
	Windows::UI::Notifications::IBadgeNotification
{
	BadgeNotification(std::nullptr_t) noexcept {}
	BadgeNotification(Windows::Data::Xml::Dom::XmlDocument const & content);
};

struct ToastNotifier :
	Windows::UI::Notifications::IToastNotifier
{
	ToastNotifier(std::nullptr_t) noexcept {}
};

struct ToastNotification :
	Windows::UI::Notifications::IToastNotification
{
	ToastNotification(std::nullptr_t) noexcept {}
	ToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content);
};

struct ScheduledToastNotification :
	Windows::UI::Notifications::IScheduledToastNotification
{
	ScheduledToastNotification(std::nullptr_t) noexcept {}
	ScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime);
	ScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime, Windows::Foundation::TimeSpan const & snoozeInterval, unsigned maximumSnoozeCount);
};

struct ToastDismissedEventArgs :
	Windows::UI::Notifications::IToastDismissedEventArgs
{
	ToastDismissedEventArgs(std::nullptr_t) noexcept {}
};

struct ToastFailedEventArgs :
	Windows::UI::Notifications::IToastFailedEventArgs
{
	ToastFailedEventArgs(std::nullptr_t) noexcept {}
};

struct TileUpdateManager
{
	TileUpdateManager() = delete;
	static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication();
	static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication(String const & applicationId);
	template <unsigned S0> static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication(wchar_t const (&applicationId)[S0]);
	static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForSecondaryTile(String const & tileId);
	template <unsigned S0> static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]);
	static Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::TileTemplateType type);
};

struct BadgeUpdateManager
{
	BadgeUpdateManager() = delete;
	static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication();
	static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication(String const & applicationId);
	template <unsigned S0> static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication(wchar_t const (&applicationId)[S0]);
	static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForSecondaryTile(String const & tileId);
	template <unsigned S0> static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]);
	static Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::BadgeTemplateType type);
};

struct ToastNotificationManager
{
	ToastNotificationManager() = delete;
	static Windows::UI::Notifications::ToastNotifier CreateToastNotifier();
	static Windows::UI::Notifications::ToastNotifier CreateToastNotifier(String const & applicationId);
	template <unsigned S0> static Windows::UI::Notifications::ToastNotifier CreateToastNotifier(wchar_t const (&applicationId)[S0]);
	static Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::ToastTemplateType type);
};

struct ToastActivatedEventArgs :
	Windows::UI::Notifications::IToastActivatedEventArgs
{
	ToastActivatedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

struct MessageDialog :
	Windows::UI::Popups::IMessageDialog
{
	MessageDialog(std::nullptr_t) noexcept {}
	MessageDialog(String const & content);
	template <unsigned S0> MessageDialog(wchar_t const (&content)[S0]);
	MessageDialog(String const & content, String const & title);
	template <unsigned S0, unsigned S1> MessageDialog(wchar_t const (&content)[S0], wchar_t const (&title)[S1]);
};

struct UICommand :
	Windows::UI::Popups::IUICommand
{
	UICommand(std::nullptr_t) noexcept {}
	UICommand();
	UICommand(String const & label);
	template <unsigned S0> UICommand(wchar_t const (&label)[S0]);
	UICommand(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action);
	template <unsigned S0> UICommand(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action);
	template <typename F> UICommand(String const & label, F action);
	template <unsigned S0, typename F> UICommand(wchar_t const (&label)[S0], F action);
	UICommand(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId);
	template <unsigned S0> UICommand(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId);
	template <typename F> UICommand(String const & label, F action, IInspectable const & commandId);
	template <unsigned S0, typename F> UICommand(wchar_t const (&label)[S0], F action, IInspectable const & commandId);
};

struct UICommandSeparator :
	Windows::UI::Popups::IUICommand
{
	UICommandSeparator(std::nullptr_t) noexcept {}
	UICommandSeparator();
};

struct PopupMenu :
	Windows::UI::Popups::IPopupMenu
{
	PopupMenu(std::nullptr_t) noexcept {}
	PopupMenu();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

struct SecondaryTileVisualElements :
	Windows::UI::StartScreen::ISecondaryTileVisualElements
{
	SecondaryTileVisualElements(std::nullptr_t) noexcept {}
};

struct SecondaryTile :
	Windows::UI::StartScreen::ISecondaryTile,
	Requires<SecondaryTile, Windows::UI::StartScreen::ISecondaryTile2>
{
	SecondaryTile(std::nullptr_t) noexcept {}
	SecondaryTile();
	SecondaryTile(String const & tileId);
	template <unsigned S0> SecondaryTile(wchar_t const (&tileId)[S0]);
	SecondaryTile(String const & tileId, String const & displayName, String const & arguments, Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize desiredSize);
	template <unsigned S0, unsigned S1, unsigned S2> SecondaryTile(wchar_t const (&tileId)[S0], wchar_t const (&displayName)[S1], wchar_t const (&arguments)[S2], Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize desiredSize);
	static bool Exists(String const & tileId);
	template <unsigned S0> static bool Exists(wchar_t const (&tileId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync(String const & applicationId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync(wchar_t const (&applicationId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllForPackageAsync();
};

struct VisualElementsRequestedEventArgs :
	Windows::UI::StartScreen::IVisualElementsRequestedEventArgs
{
	VisualElementsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct VisualElementsRequest :
	Windows::UI::StartScreen::IVisualElementsRequest
{
	VisualElementsRequest(std::nullptr_t) noexcept {}
};

struct VisualElementsRequestDeferral :
	Windows::UI::StartScreen::IVisualElementsRequestDeferral
{
	VisualElementsRequestDeferral(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

struct TextConstants
{
	TextConstants() = delete;
	static Windows::UI::Color AutoColor();
	static int MinUnitCount();
	static int MaxUnitCount();
	static Windows::UI::Color UndefinedColor();
	static float UndefinedFloatValue();
	static int UndefinedInt32Value();
	static Windows::UI::Text::FontStretch UndefinedFontStretch();
	static Windows::UI::Text::FontStyle UndefinedFontStyle();
};

struct FontWeights :
	Windows::UI::Text::IFontWeights
{
	FontWeights(std::nullptr_t) noexcept {}
	static Windows::UI::Text::FontWeight Black();
	static Windows::UI::Text::FontWeight Bold();
	static Windows::UI::Text::FontWeight ExtraBlack();
	static Windows::UI::Text::FontWeight ExtraBold();
	static Windows::UI::Text::FontWeight ExtraLight();
	static Windows::UI::Text::FontWeight Light();
	static Windows::UI::Text::FontWeight Medium();
	static Windows::UI::Text::FontWeight Normal();
	static Windows::UI::Text::FontWeight SemiBold();
	static Windows::UI::Text::FontWeight SemiLight();
	static Windows::UI::Text::FontWeight Thin();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

struct ApplicationView :
	Windows::UI::ViewManagement::IApplicationView
{
	ApplicationView(std::nullptr_t) noexcept {}
	static int GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window);
	static Windows::UI::ViewManagement::ApplicationView GetForCurrentView();
	static bool TerminateAppOnFinalViewClose();
	static void TerminateAppOnFinalViewClose(bool value);
};

struct ApplicationViewConsolidatedEventArgs :
	Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs
{
	ApplicationViewConsolidatedEventArgs(std::nullptr_t) noexcept {}
};

struct ApplicationViewSwitcher
{
	ApplicationViewSwitcher() = delete;
	static void DisableShowingMainViewOnActivation();
	static Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId);
	static Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference);
	static Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference, int anchorViewId, Windows::UI::ViewManagement::ViewSizePreference anchorSizePreference);
	static Windows::Foundation::IAsyncAction SwitchAsync(int viewId);
	static Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId);
	static Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options);
	static Windows::Foundation::IAsyncOperation<bool> PrepareForCustomAnimatedSwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options);
};

struct ProjectionManager
{
	ProjectionManager() = delete;
	static Windows::Foundation::IAsyncAction StartProjectingAsync(int projectionViewId, int anchorViewId);
	static Windows::Foundation::IAsyncAction SwapDisplaysForViewsAsync(int projectionViewId, int anchorViewId);
	static Windows::Foundation::IAsyncAction StopProjectingAsync(int projectionViewId, int anchorViewId);
	static bool ProjectionDisplayAvailable();
	static EventRegistrationToken ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static EventRegistrationToken ProjectionDisplayAvailableChanged(F handler);
	static void ProjectionDisplayAvailableChanged(EventRegistrationToken token);
};

struct InputPaneVisibilityEventArgs :
	Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs
{
	InputPaneVisibilityEventArgs(std::nullptr_t) noexcept {}
};

struct InputPane :
	Windows::UI::ViewManagement::IInputPane
{
	InputPane(std::nullptr_t) noexcept {}
	static Windows::UI::ViewManagement::InputPane GetForCurrentView();
};

struct AccessibilitySettings :
	Windows::UI::ViewManagement::IAccessibilitySettings
{
	AccessibilitySettings(std::nullptr_t) noexcept {}
	AccessibilitySettings();
};

struct UISettings :
	Windows::UI::ViewManagement::IUISettings
{
	UISettings(std::nullptr_t) noexcept {}
	UISettings();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

struct ActivatedDeferral :
	Windows::UI::WebUI::IActivatedDeferral
{
	ActivatedDeferral(std::nullptr_t) noexcept {}
};

struct ActivatedOperation :
	Windows::UI::WebUI::IActivatedOperation
{
	ActivatedOperation(std::nullptr_t) noexcept {}
};

struct WebUILaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,
	Requires<WebUILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUILaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUISearchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ISearchActivatedEventArgs,
	Requires<WebUISearchActivatedEventArgs, Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUISearchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIShareTargetActivatedEventArgs :
	Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs,
	Requires<WebUIShareTargetActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIShareTargetActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIFileActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileActivatedEventArgs,
	Requires<WebUIFileActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral, Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles>
{
	WebUIFileActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIProtocolActivatedEventArgs :
	Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,
	Requires<WebUIProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIProtocolActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIFileOpenPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs,
	Requires<WebUIFileOpenPickerActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIFileOpenPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIFileSavePickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs,
	Requires<WebUIFileSavePickerActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIFileSavePickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUICachedFileUpdaterActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs,
	Requires<WebUICachedFileUpdaterActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUICachedFileUpdaterActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs,
	Requires<WebUIContactPickerActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIDeviceActivatedEventArgs :
	Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs,
	Requires<WebUIDeviceActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIDeviceActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIPrintTaskSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs,
	Requires<WebUIPrintTaskSettingsActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIPrintTaskSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUICameraSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs,
	Requires<WebUICameraSettingsActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUICameraSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIAppointmentsProviderAddAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs,
	Requires<WebUIAppointmentsProviderAddAppointmentActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIAppointmentsProviderAddAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs,
	Requires<WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs,
	Requires<WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs,
	Requires<WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs,
	Requires<WebUIContactCallActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactMessageActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs,
	Requires<WebUIContactMessageActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactMessageActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactMapActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs,
	Requires<WebUIContactMapActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactMapActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactPostActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs,
	Requires<WebUIContactPostActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactPostActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactVideoCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs,
	Requires<WebUIContactVideoCallActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactVideoCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUILockScreenCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs,
	Requires<WebUILockScreenCallActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUILockScreenCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIRestrictedLaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs,
	Requires<WebUIRestrictedLaunchActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIRestrictedLaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUINavigatedOperation :
	Windows::UI::WebUI::IWebUINavigatedOperation
{
	WebUINavigatedOperation(std::nullptr_t) noexcept {}
};

struct SuspendingDeferral :
	Windows::ApplicationModel::ISuspendingDeferral
{
	SuspendingDeferral(std::nullptr_t) noexcept {}
};

struct SuspendingOperation :
	Windows::ApplicationModel::ISuspendingOperation
{
	SuspendingOperation(std::nullptr_t) noexcept {}
};

struct SuspendingEventArgs :
	Windows::ApplicationModel::ISuspendingEventArgs
{
	SuspendingEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIBackgroundTaskInstanceRuntimeClass :
	Windows::UI::WebUI::IWebUIBackgroundTaskInstance,
	Requires<WebUIBackgroundTaskInstanceRuntimeClass, Windows::ApplicationModel::Background::IBackgroundTaskInstance>
{
	WebUIBackgroundTaskInstanceRuntimeClass(std::nullptr_t) noexcept {}
};

struct WebUIBackgroundTaskInstance
{
	WebUIBackgroundTaskInstance() = delete;
	static Windows::UI::WebUI::IWebUIBackgroundTaskInstance Current();
};

struct WebUINavigatedDeferral :
	Windows::UI::WebUI::IWebUINavigatedDeferral
{
	WebUINavigatedDeferral(std::nullptr_t) noexcept {}
};

struct WebUINavigatedEventArgs :
	Windows::UI::WebUI::IWebUINavigatedEventArgs
{
	WebUINavigatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIApplication
{
	WebUIApplication() = delete;
	static EventRegistrationToken Activated(Windows::UI::WebUI::IActivatedEventHandler const & handler);
	template <typename F> static EventRegistrationToken Activated(F handler);
	static void Activated(EventRegistrationToken token);
	static EventRegistrationToken Suspending(Windows::UI::WebUI::ISuspendingEventHandler const & handler);
	template <typename F> static EventRegistrationToken Suspending(F handler);
	static void Suspending(EventRegistrationToken token);
	static EventRegistrationToken Resuming(Windows::UI::WebUI::IResumingEventHandler const & handler);
	template <typename F> static EventRegistrationToken Resuming(F handler);
	static void Resuming(EventRegistrationToken token);
	static EventRegistrationToken Navigated(Windows::UI::WebUI::INavigatedEventHandler const & handler);
	template <typename F> static EventRegistrationToken Navigated(F handler);
	static void Navigated(EventRegistrationToken token);
};

struct HtmlPrintDocumentSource :
	Windows::UI::WebUI::IHtmlPrintDocumentSource
{
	HtmlPrintDocumentSource(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml {

struct DependencyObject :
	Windows::UI::Xaml::IDependencyObject
{
	DependencyObject(std::nullptr_t) noexcept {}
};

struct UIElement :
	Windows::UI::Xaml::IUIElement,
	Bases<UIElement, Windows::UI::Xaml::DependencyObject>,
	Requires<UIElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides>
{
	UIElement(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty CompositeModeProperty();
	static Windows::UI::Xaml::RoutedEvent KeyDownEvent();
	static Windows::UI::Xaml::RoutedEvent KeyUpEvent();
	static Windows::UI::Xaml::RoutedEvent PointerEnteredEvent();
	static Windows::UI::Xaml::RoutedEvent PointerPressedEvent();
	static Windows::UI::Xaml::RoutedEvent PointerMovedEvent();
	static Windows::UI::Xaml::RoutedEvent PointerReleasedEvent();
	static Windows::UI::Xaml::RoutedEvent PointerExitedEvent();
	static Windows::UI::Xaml::RoutedEvent PointerCaptureLostEvent();
	static Windows::UI::Xaml::RoutedEvent PointerCanceledEvent();
	static Windows::UI::Xaml::RoutedEvent PointerWheelChangedEvent();
	static Windows::UI::Xaml::RoutedEvent TappedEvent();
	static Windows::UI::Xaml::RoutedEvent DoubleTappedEvent();
	static Windows::UI::Xaml::RoutedEvent HoldingEvent();
	static Windows::UI::Xaml::RoutedEvent RightTappedEvent();
	static Windows::UI::Xaml::RoutedEvent ManipulationStartingEvent();
	static Windows::UI::Xaml::RoutedEvent ManipulationInertiaStartingEvent();
	static Windows::UI::Xaml::RoutedEvent ManipulationStartedEvent();
	static Windows::UI::Xaml::RoutedEvent ManipulationDeltaEvent();
	static Windows::UI::Xaml::RoutedEvent ManipulationCompletedEvent();
	static Windows::UI::Xaml::RoutedEvent DragEnterEvent();
	static Windows::UI::Xaml::RoutedEvent DragLeaveEvent();
	static Windows::UI::Xaml::RoutedEvent DragOverEvent();
	static Windows::UI::Xaml::RoutedEvent DropEvent();
	static Windows::UI::Xaml::DependencyProperty AllowDropProperty();
	static Windows::UI::Xaml::DependencyProperty OpacityProperty();
	static Windows::UI::Xaml::DependencyProperty ClipProperty();
	static Windows::UI::Xaml::DependencyProperty RenderTransformProperty();
	static Windows::UI::Xaml::DependencyProperty ProjectionProperty();
	static Windows::UI::Xaml::DependencyProperty RenderTransformOriginProperty();
	static Windows::UI::Xaml::DependencyProperty IsHitTestVisibleProperty();
	static Windows::UI::Xaml::DependencyProperty VisibilityProperty();
	static Windows::UI::Xaml::DependencyProperty UseLayoutRoundingProperty();
	static Windows::UI::Xaml::DependencyProperty TransitionsProperty();
	static Windows::UI::Xaml::DependencyProperty CacheModeProperty();
	static Windows::UI::Xaml::DependencyProperty IsTapEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty IsDoubleTapEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty IsRightTapEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty IsHoldingEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty ManipulationModeProperty();
	static Windows::UI::Xaml::DependencyProperty PointerCapturesProperty();
};

struct RoutedEventArgs :
	Windows::UI::Xaml::IRoutedEventArgs
{
	RoutedEventArgs(std::nullptr_t) noexcept {}
	RoutedEventArgs();
};

struct DependencyProperty :
	Windows::UI::Xaml::IDependencyProperty
{
	DependencyProperty(std::nullptr_t) noexcept {}
	static IInspectable UnsetValue();
	static Windows::UI::Xaml::DependencyProperty Register(String const & name, Windows::UI::Xaml::Interop::TypeName const & propertyType, Windows::UI::Xaml::Interop::TypeName const & ownerType, Windows::UI::Xaml::PropertyMetadata const & typeMetadata);
	template <unsigned S0> static Windows::UI::Xaml::DependencyProperty Register(wchar_t const (&name)[S0], Windows::UI::Xaml::Interop::TypeName const & propertyType, Windows::UI::Xaml::Interop::TypeName const & ownerType, Windows::UI::Xaml::PropertyMetadata const & typeMetadata);
	static Windows::UI::Xaml::DependencyProperty RegisterAttached(String const & name, Windows::UI::Xaml::Interop::TypeName const & propertyType, Windows::UI::Xaml::Interop::TypeName const & ownerType, Windows::UI::Xaml::PropertyMetadata const & defaultMetadata);
	template <unsigned S0> static Windows::UI::Xaml::DependencyProperty RegisterAttached(wchar_t const (&name)[S0], Windows::UI::Xaml::Interop::TypeName const & propertyType, Windows::UI::Xaml::Interop::TypeName const & ownerType, Windows::UI::Xaml::PropertyMetadata const & defaultMetadata);
};

struct Window :
	Windows::UI::Xaml::IWindow
{
	Window(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Window Current();
};

struct TriggerAction :
	Windows::UI::Xaml::ITriggerAction,
	Bases<TriggerAction, Windows::UI::Xaml::DependencyObject>,
	Requires<TriggerAction, Windows::UI::Xaml::IDependencyObject>
{
	TriggerAction(std::nullptr_t) noexcept {}
};

struct FrameworkElement :
	Windows::UI::Xaml::IFrameworkElement,
	Bases<FrameworkElement, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement>,
	Requires<FrameworkElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	FrameworkElement(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty TagProperty();
	static Windows::UI::Xaml::DependencyProperty LanguageProperty();
	static Windows::UI::Xaml::DependencyProperty ActualWidthProperty();
	static Windows::UI::Xaml::DependencyProperty ActualHeightProperty();
	static Windows::UI::Xaml::DependencyProperty WidthProperty();
	static Windows::UI::Xaml::DependencyProperty HeightProperty();
	static Windows::UI::Xaml::DependencyProperty MinWidthProperty();
	static Windows::UI::Xaml::DependencyProperty MaxWidthProperty();
	static Windows::UI::Xaml::DependencyProperty MinHeightProperty();
	static Windows::UI::Xaml::DependencyProperty MaxHeightProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty MarginProperty();
	static Windows::UI::Xaml::DependencyProperty NameProperty();
	static Windows::UI::Xaml::DependencyProperty DataContextProperty();
	static Windows::UI::Xaml::DependencyProperty StyleProperty();
	static Windows::UI::Xaml::DependencyProperty FlowDirectionProperty();
	static Windows::UI::Xaml::DependencyProperty RequestedThemeProperty();
};

struct PropertyPath :
	Windows::UI::Xaml::IPropertyPath,
	Bases<PropertyPath, Windows::UI::Xaml::DependencyObject>,
	Requires<PropertyPath, Windows::UI::Xaml::IDependencyObject>
{
	PropertyPath(std::nullptr_t) noexcept {}
	PropertyPath(String const & path);
	template <unsigned S0> PropertyPath(wchar_t const (&path)[S0]);
};

struct DataTemplate :
	Windows::UI::Xaml::IDataTemplate,
	Bases<DataTemplate, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::FrameworkTemplate>,
	Requires<DataTemplate, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IFrameworkTemplate>
{
	DataTemplate(std::nullptr_t) noexcept {}
	DataTemplate();
};

struct DragEventArgs :
	Windows::UI::Xaml::IDragEventArgs,
	Bases<DragEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<DragEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	DragEventArgs(std::nullptr_t) noexcept {}
};

struct Style :
	Windows::UI::Xaml::IStyle,
	Bases<Style, Windows::UI::Xaml::DependencyObject>,
	Requires<Style, Windows::UI::Xaml::IDependencyObject>
{
	Style(std::nullptr_t) noexcept {}
	Style();
	Style(Windows::UI::Xaml::Interop::TypeName const & targetType);
};

struct FrameworkTemplate :
	Windows::UI::Xaml::IFrameworkTemplate,
	Bases<FrameworkTemplate, Windows::UI::Xaml::DependencyObject>,
	Requires<FrameworkTemplate, Windows::UI::Xaml::IDependencyObject>
{
	FrameworkTemplate(std::nullptr_t) noexcept {}
};

struct DependencyPropertyChangedEventArgs :
	Windows::UI::Xaml::IDependencyPropertyChangedEventArgs
{
	DependencyPropertyChangedEventArgs(std::nullptr_t) noexcept {}
};

struct ApplicationInitializationCallbackParams :
	Windows::UI::Xaml::IApplicationInitializationCallbackParams
{
	ApplicationInitializationCallbackParams(std::nullptr_t) noexcept {}
};

struct CornerRadiusHelper :
	Windows::UI::Xaml::ICornerRadiusHelper
{
	CornerRadiusHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::CornerRadius FromRadii(double topLeft, double topRight, double bottomRight, double bottomLeft);
	static Windows::UI::Xaml::CornerRadius FromUniformRadius(double uniformRadius);
};

struct DurationHelper :
	Windows::UI::Xaml::IDurationHelper
{
	DurationHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Duration Automatic();
	static Windows::UI::Xaml::Duration Forever();
	static int Compare(Windows::UI::Xaml::Duration const & duration1, Windows::UI::Xaml::Duration const & duration2);
	static Windows::UI::Xaml::Duration FromTimeSpan(Windows::Foundation::TimeSpan const & timeSpan);
	static bool GetHasTimeSpan(Windows::UI::Xaml::Duration const & target);
	static Windows::UI::Xaml::Duration Add(Windows::UI::Xaml::Duration const & target, Windows::UI::Xaml::Duration const & duration);
	static bool Equals(Windows::UI::Xaml::Duration const & target, Windows::UI::Xaml::Duration const & value);
	static Windows::UI::Xaml::Duration Subtract(Windows::UI::Xaml::Duration const & target, Windows::UI::Xaml::Duration const & duration);
};

struct GridLengthHelper :
	Windows::UI::Xaml::IGridLengthHelper
{
	GridLengthHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::GridLength Auto();
	static Windows::UI::Xaml::GridLength FromPixels(double pixels);
	static Windows::UI::Xaml::GridLength FromValueAndType(double value, Windows::UI::Xaml::GridUnitType type);
	static bool GetIsAbsolute(Windows::UI::Xaml::GridLength const & target);
	static bool GetIsAuto(Windows::UI::Xaml::GridLength const & target);
	static bool GetIsStar(Windows::UI::Xaml::GridLength const & target);
	static bool Equals(Windows::UI::Xaml::GridLength const & target, Windows::UI::Xaml::GridLength const & value);
};

struct PointHelper :
	Windows::UI::Xaml::IPointHelper
{
	PointHelper(std::nullptr_t) noexcept {}
	static Windows::Foundation::Point FromCoordinates(float x, float y);
};

struct RectHelper :
	Windows::UI::Xaml::IRectHelper
{
	RectHelper(std::nullptr_t) noexcept {}
	static Windows::Foundation::Rect Empty();
	static Windows::Foundation::Rect FromCoordinatesAndDimensions(float x, float y, float width, float height);
	static Windows::Foundation::Rect FromPoints(Windows::Foundation::Point const & point1, Windows::Foundation::Point const & point2);
	static Windows::Foundation::Rect FromLocationAndSize(Windows::Foundation::Point const & location, Windows::Foundation::Size const & size);
	static bool GetIsEmpty(Windows::Foundation::Rect const & target);
	static float GetBottom(Windows::Foundation::Rect const & target);
	static float GetLeft(Windows::Foundation::Rect const & target);
	static float GetRight(Windows::Foundation::Rect const & target);
	static float GetTop(Windows::Foundation::Rect const & target);
	static bool Contains(Windows::Foundation::Rect const & target, Windows::Foundation::Point const & point);
	static bool Equals(Windows::Foundation::Rect const & target, Windows::Foundation::Rect const & value);
	static Windows::Foundation::Rect Intersect(Windows::Foundation::Rect const & target, Windows::Foundation::Rect const & rect);
	static Windows::Foundation::Rect Union(Windows::Foundation::Rect const & target, Windows::Foundation::Point const & point);
	static Windows::Foundation::Rect Union(Windows::Foundation::Rect const & target, Windows::Foundation::Rect const & rect);
};

struct SizeHelper :
	Windows::UI::Xaml::ISizeHelper
{
	SizeHelper(std::nullptr_t) noexcept {}
	static Windows::Foundation::Size Empty();
	static Windows::Foundation::Size FromDimensions(float width, float height);
	static bool GetIsEmpty(Windows::Foundation::Size const & target);
	static bool Equals(Windows::Foundation::Size const & target, Windows::Foundation::Size const & value);
};

struct ThicknessHelper :
	Windows::UI::Xaml::IThicknessHelper
{
	ThicknessHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Thickness FromLengths(double left, double top, double right, double bottom);
	static Windows::UI::Xaml::Thickness FromUniformLength(double uniformLength);
};

struct BindingFailedEventArgs :
	Windows::UI::Xaml::IBindingFailedEventArgs
{
	BindingFailedEventArgs(std::nullptr_t) noexcept {}
};

struct UnhandledExceptionEventArgs :
	Windows::UI::Xaml::IUnhandledExceptionEventArgs
{
	UnhandledExceptionEventArgs(std::nullptr_t) noexcept {}
};

struct VisualStateChangedEventArgs :
	Windows::UI::Xaml::IVisualStateChangedEventArgs
{
	VisualStateChangedEventArgs(std::nullptr_t) noexcept {}
	VisualStateChangedEventArgs();
};

struct DataContextChangedEventArgs :
	Windows::UI::Xaml::IDataContextChangedEventArgs
{
	DataContextChangedEventArgs(std::nullptr_t) noexcept {}
};

struct DataTemplateKey :
	Windows::UI::Xaml::IDataTemplateKey
{
	DataTemplateKey(std::nullptr_t) noexcept {}
	DataTemplateKey();
	DataTemplateKey(IInspectable const & dataType);
};

struct DebugSettings :
	Windows::UI::Xaml::IDebugSettings,
	Requires<DebugSettings, Windows::UI::Xaml::IDebugSettings2>
{
	DebugSettings(std::nullptr_t) noexcept {}
};

struct DependencyObjectCollection :
	Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::DependencyObject>,
	Bases<DependencyObjectCollection, Windows::UI::Xaml::DependencyObject>,
	Requires<DependencyObjectCollection, Windows::UI::Xaml::IDependencyObject>
{
	DependencyObjectCollection(std::nullptr_t) noexcept {}
	DependencyObjectCollection();
};

struct PropertyMetadata :
	Windows::UI::Xaml::IPropertyMetadata
{
	PropertyMetadata(std::nullptr_t) noexcept {}
	PropertyMetadata(IInspectable const & defaultValue);
	PropertyMetadata(IInspectable const & defaultValue, Windows::UI::Xaml::IPropertyChangedCallback const & propertyChangedCallback);
	template <typename F> PropertyMetadata(IInspectable const & defaultValue, F propertyChangedCallback);
	static Windows::UI::Xaml::PropertyMetadata Create(IInspectable const & defaultValue);
	static Windows::UI::Xaml::PropertyMetadata Create(IInspectable const & defaultValue, Windows::UI::Xaml::IPropertyChangedCallback const & propertyChangedCallback);
	template <typename F> static Windows::UI::Xaml::PropertyMetadata Create(IInspectable const & defaultValue, F propertyChangedCallback);
	static Windows::UI::Xaml::PropertyMetadata Create(Windows::UI::Xaml::ICreateDefaultValueCallback const & createDefaultValueCallback);
	template <typename F> static Windows::UI::Xaml::PropertyMetadata Create(F createDefaultValueCallback);
	static Windows::UI::Xaml::PropertyMetadata Create(Windows::UI::Xaml::ICreateDefaultValueCallback const & createDefaultValueCallback, Windows::UI::Xaml::IPropertyChangedCallback const & propertyChangedCallback);
	template <typename F> static Windows::UI::Xaml::PropertyMetadata Create(F createDefaultValueCallback, F propertyChangedCallback);
};

struct DispatcherTimer :
	Windows::UI::Xaml::IDispatcherTimer
{
	DispatcherTimer(std::nullptr_t) noexcept {}
	DispatcherTimer();
};

struct RoutedEvent :
	Windows::UI::Xaml::IRoutedEvent
{
	RoutedEvent(std::nullptr_t) noexcept {}
};

struct TriggerActionCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::TriggerAction>
{
	TriggerActionCollection(std::nullptr_t) noexcept {}
	TriggerActionCollection();
};

struct ExceptionRoutedEventArgs :
	Windows::UI::Xaml::IExceptionRoutedEventArgs,
	Bases<ExceptionRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<ExceptionRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	ExceptionRoutedEventArgs(std::nullptr_t) noexcept {}
};

struct WindowCreatedEventArgs :
	Windows::UI::Xaml::IWindowCreatedEventArgs
{
	WindowCreatedEventArgs(std::nullptr_t) noexcept {}
};

struct Application :
	Windows::UI::Xaml::IApplication,
	Requires<Application, Windows::UI::Xaml::IApplicationOverrides>
{
	Application(std::nullptr_t) noexcept {}
	Application();
	static Windows::UI::Xaml::Application Current();
	static void Start(Windows::UI::Xaml::IApplicationInitializationCallback const & callback);
	template <typename F> static void Start(F callback);
	static void LoadComponent(IInspectable const & component, Windows::Foundation::Uri const & resourceLocator);
	static void LoadComponent(IInspectable const & component, Windows::Foundation::Uri const & resourceLocator, Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation componentResourceLocation);
};

struct TriggerCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::TriggerBase>
{
	TriggerCollection(std::nullptr_t) noexcept {}
};

struct FrameworkView :
	Windows::UI::Xaml::IFrameworkView,
	Requires<FrameworkView, Windows::ApplicationModel::Core::IFrameworkView>
{
	FrameworkView(std::nullptr_t) noexcept {}
	FrameworkView();
};

struct FrameworkViewSource :
	Windows::UI::Xaml::IFrameworkViewSource,
	Requires<FrameworkViewSource, Windows::ApplicationModel::Core::IFrameworkViewSource>
{
	FrameworkViewSource(std::nullptr_t) noexcept {}
	FrameworkViewSource();
};

struct MediaFailedRoutedEventArgs :
	Windows::UI::Xaml::IMediaFailedRoutedEventArgs,
	Bases<MediaFailedRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs, Windows::UI::Xaml::ExceptionRoutedEventArgs>,
	Requires<MediaFailedRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs, Windows::UI::Xaml::IExceptionRoutedEventArgs>
{
	MediaFailedRoutedEventArgs(std::nullptr_t) noexcept {}
};

struct ResourceDictionary :
	Windows::UI::Xaml::IResourceDictionary,
	Bases<ResourceDictionary, Windows::UI::Xaml::DependencyObject>,
	Requires<ResourceDictionary, Windows::UI::Xaml::IDependencyObject, Windows::Foundation::Collections::IMap<IInspectable, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<IInspectable, IInspectable>>>
{
	ResourceDictionary(std::nullptr_t) noexcept {}
	ResourceDictionary();
};

struct SetterBase :
	Windows::UI::Xaml::ISetterBase,
	Bases<SetterBase, Windows::UI::Xaml::DependencyObject>,
	Requires<SetterBase, Windows::UI::Xaml::IDependencyObject>
{
	SetterBase(std::nullptr_t) noexcept {}
};

struct Setter :
	Windows::UI::Xaml::ISetter,
	Bases<Setter, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::SetterBase>,
	Requires<Setter, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::ISetterBase>
{
	Setter(std::nullptr_t) noexcept {}
	Setter();
	Setter(Windows::UI::Xaml::DependencyProperty const & targetProperty, IInspectable const & value);
};

struct SetterBaseCollection :
	Windows::UI::Xaml::ISetterBaseCollection
{
	SetterBaseCollection(std::nullptr_t) noexcept {}
	SetterBaseCollection();
};

struct SizeChangedEventArgs :
	Windows::UI::Xaml::ISizeChangedEventArgs,
	Bases<SizeChangedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<SizeChangedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	SizeChangedEventArgs(std::nullptr_t) noexcept {}
};

struct TriggerBase :
	Windows::UI::Xaml::ITriggerBase,
	Bases<TriggerBase, Windows::UI::Xaml::DependencyObject>,
	Requires<TriggerBase, Windows::UI::Xaml::IDependencyObject>
{
	TriggerBase(std::nullptr_t) noexcept {}
};

struct EventTrigger :
	Windows::UI::Xaml::IEventTrigger,
	Bases<EventTrigger, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::TriggerBase>,
	Requires<EventTrigger, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::ITriggerBase>
{
	EventTrigger(std::nullptr_t) noexcept {}
	EventTrigger();
};

struct VisualState :
	Windows::UI::Xaml::IVisualState,
	Bases<VisualState, Windows::UI::Xaml::DependencyObject>,
	Requires<VisualState, Windows::UI::Xaml::IDependencyObject>
{
	VisualState(std::nullptr_t) noexcept {}
	VisualState();
};

struct VisualStateGroup :
	Windows::UI::Xaml::IVisualStateGroup,
	Bases<VisualStateGroup, Windows::UI::Xaml::DependencyObject>,
	Requires<VisualStateGroup, Windows::UI::Xaml::IDependencyObject>
{
	VisualStateGroup(std::nullptr_t) noexcept {}
	VisualStateGroup();
};

struct VisualStateManager :
	Windows::UI::Xaml::IVisualStateManager,
	Bases<VisualStateManager, Windows::UI::Xaml::DependencyObject>,
	Requires<VisualStateManager, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IVisualStateManagerOverrides>
{
	VisualStateManager(std::nullptr_t) noexcept {}
	VisualStateManager();
	static Windows::Foundation::Collections::IVector<Windows::UI::Xaml::VisualStateGroup> GetVisualStateGroups(Windows::UI::Xaml::FrameworkElement const & obj);
	static Windows::UI::Xaml::DependencyProperty CustomVisualStateManagerProperty();
	static Windows::UI::Xaml::VisualStateManager GetCustomVisualStateManager(Windows::UI::Xaml::FrameworkElement const & obj);
	static void SetCustomVisualStateManager(Windows::UI::Xaml::FrameworkElement const & obj, Windows::UI::Xaml::VisualStateManager const & value);
	static bool GoToState(Windows::UI::Xaml::Controls::Control const & control, String const & stateName, bool useTransitions);
	template <unsigned S0> static bool GoToState(Windows::UI::Xaml::Controls::Control const & control, wchar_t const (&stateName)[S0], bool useTransitions);
};

struct VisualTransition :
	Windows::UI::Xaml::IVisualTransition,
	Bases<VisualTransition, Windows::UI::Xaml::DependencyObject>,
	Requires<VisualTransition, Windows::UI::Xaml::IDependencyObject>
{
	VisualTransition(std::nullptr_t) noexcept {}
	VisualTransition();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation {

struct AutomationProperty :
	Windows::UI::Xaml::Automation::IAutomationProperty
{
	AutomationProperty(std::nullptr_t) noexcept {}
};

struct AutomationProperties :
	Windows::UI::Xaml::Automation::IAutomationProperties
{
	AutomationProperties(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty AccessibilityViewProperty();
	static Windows::UI::Xaml::Automation::Peers::AccessibilityView GetAccessibilityView(Windows::UI::Xaml::DependencyObject const & element);
	static void SetAccessibilityView(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Automation::Peers::AccessibilityView value);
	static Windows::UI::Xaml::DependencyProperty ControlledPeersProperty();
	static Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement> GetControlledPeers(Windows::UI::Xaml::DependencyObject const & element);
	static Windows::UI::Xaml::DependencyProperty AcceleratorKeyProperty();
	static String GetAcceleratorKey(Windows::UI::Xaml::DependencyObject const & element);
	static void SetAcceleratorKey(Windows::UI::Xaml::DependencyObject const & element, String const & value);
	template <unsigned S0> static void SetAcceleratorKey(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]);
	static Windows::UI::Xaml::DependencyProperty AccessKeyProperty();
	static String GetAccessKey(Windows::UI::Xaml::DependencyObject const & element);
	static void SetAccessKey(Windows::UI::Xaml::DependencyObject const & element, String const & value);
	template <unsigned S0> static void SetAccessKey(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]);
	static Windows::UI::Xaml::DependencyProperty AutomationIdProperty();
	static String GetAutomationId(Windows::UI::Xaml::DependencyObject const & element);
	static void SetAutomationId(Windows::UI::Xaml::DependencyObject const & element, String const & value);
	template <unsigned S0> static void SetAutomationId(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]);
	static Windows::UI::Xaml::DependencyProperty HelpTextProperty();
	static String GetHelpText(Windows::UI::Xaml::DependencyObject const & element);
	static void SetHelpText(Windows::UI::Xaml::DependencyObject const & element, String const & value);
	template <unsigned S0> static void SetHelpText(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]);
	static Windows::UI::Xaml::DependencyProperty IsRequiredForFormProperty();
	static bool GetIsRequiredForForm(Windows::UI::Xaml::DependencyObject const & element);
	static void SetIsRequiredForForm(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty ItemStatusProperty();
	static String GetItemStatus(Windows::UI::Xaml::DependencyObject const & element);
	static void SetItemStatus(Windows::UI::Xaml::DependencyObject const & element, String const & value);
	template <unsigned S0> static void SetItemStatus(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]);
	static Windows::UI::Xaml::DependencyProperty ItemTypeProperty();
	static String GetItemType(Windows::UI::Xaml::DependencyObject const & element);
	static void SetItemType(Windows::UI::Xaml::DependencyObject const & element, String const & value);
	template <unsigned S0> static void SetItemType(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]);
	static Windows::UI::Xaml::DependencyProperty LabeledByProperty();
	static Windows::UI::Xaml::UIElement GetLabeledBy(Windows::UI::Xaml::DependencyObject const & element);
	static void SetLabeledBy(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::UIElement const & value);
	static Windows::UI::Xaml::DependencyProperty NameProperty();
	static String GetName(Windows::UI::Xaml::DependencyObject const & element);
	static void SetName(Windows::UI::Xaml::DependencyObject const & element, String const & value);
	template <unsigned S0> static void SetName(Windows::UI::Xaml::DependencyObject const & element, wchar_t const (&value)[S0]);
	static Windows::UI::Xaml::DependencyProperty LiveSettingProperty();
	static Windows::UI::Xaml::Automation::Peers::AutomationLiveSetting GetLiveSetting(Windows::UI::Xaml::DependencyObject const & element);
	static void SetLiveSetting(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Automation::Peers::AutomationLiveSetting value);
};

struct AutomationElementIdentifiers :
	Windows::UI::Xaml::Automation::IAutomationElementIdentifiers
{
	AutomationElementIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty ControlledPeersProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty AcceleratorKeyProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty AccessKeyProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty AutomationIdProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty BoundingRectangleProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ClassNameProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ClickablePointProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ControlTypeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty HasKeyboardFocusProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty HelpTextProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsContentElementProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsControlElementProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsEnabledProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsKeyboardFocusableProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsOffscreenProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsPasswordProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsRequiredForFormProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ItemStatusProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ItemTypeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty LabeledByProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty LocalizedControlTypeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty NameProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty OrientationProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty LiveSettingProperty();
};

struct AnnotationPatternIdentifiers :
	Windows::UI::Xaml::Automation::IAnnotationPatternIdentifiers
{
	AnnotationPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty AnnotationTypeIdProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty AnnotationTypeNameProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty AuthorProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty DateTimeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty TargetProperty();
};

struct DockPatternIdentifiers :
	Windows::UI::Xaml::Automation::IDockPatternIdentifiers
{
	DockPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty DockPositionProperty();
};

struct DragPatternIdentifiers :
	Windows::UI::Xaml::Automation::IDragPatternIdentifiers
{
	DragPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty DropEffectProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty DropEffectsProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty GrabbedItemsProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsGrabbedProperty();
};

struct DropTargetPatternIdentifiers :
	Windows::UI::Xaml::Automation::IDropTargetPatternIdentifiers
{
	DropTargetPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty DropTargetEffectProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty DropTargetEffectsProperty();
};

struct ExpandCollapsePatternIdentifiers :
	Windows::UI::Xaml::Automation::IExpandCollapsePatternIdentifiers
{
	ExpandCollapsePatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty ExpandCollapseStateProperty();
};

struct GridItemPatternIdentifiers :
	Windows::UI::Xaml::Automation::IGridItemPatternIdentifiers
{
	GridItemPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty ColumnProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ColumnSpanProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ContainingGridProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty RowProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty RowSpanProperty();
};

struct GridPatternIdentifiers :
	Windows::UI::Xaml::Automation::IGridPatternIdentifiers
{
	GridPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty ColumnCountProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty RowCountProperty();
};

struct MultipleViewPatternIdentifiers :
	Windows::UI::Xaml::Automation::IMultipleViewPatternIdentifiers
{
	MultipleViewPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty CurrentViewProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty SupportedViewsProperty();
};

struct RangeValuePatternIdentifiers :
	Windows::UI::Xaml::Automation::IRangeValuePatternIdentifiers
{
	RangeValuePatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty IsReadOnlyProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty LargeChangeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty MaximumProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty MinimumProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty SmallChangeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ValueProperty();
};

struct ScrollPatternIdentifiers :
	Windows::UI::Xaml::Automation::IScrollPatternIdentifiers
{
	ScrollPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty HorizontallyScrollableProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty HorizontalScrollPercentProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty HorizontalViewSizeProperty();
	static double NoScroll();
	static Windows::UI::Xaml::Automation::AutomationProperty VerticallyScrollableProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty VerticalScrollPercentProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty VerticalViewSizeProperty();
};

struct SelectionItemPatternIdentifiers :
	Windows::UI::Xaml::Automation::ISelectionItemPatternIdentifiers
{
	SelectionItemPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty IsSelectedProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty SelectionContainerProperty();
};

struct SelectionPatternIdentifiers :
	Windows::UI::Xaml::Automation::ISelectionPatternIdentifiers
{
	SelectionPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty CanSelectMultipleProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsSelectionRequiredProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty SelectionProperty();
};

struct TableItemPatternIdentifiers :
	Windows::UI::Xaml::Automation::ITableItemPatternIdentifiers
{
	TableItemPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty ColumnHeaderItemsProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty RowHeaderItemsProperty();
};

struct TablePatternIdentifiers :
	Windows::UI::Xaml::Automation::ITablePatternIdentifiers
{
	TablePatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty ColumnHeadersProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty RowHeadersProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty RowOrColumnMajorProperty();
};

struct TogglePatternIdentifiers :
	Windows::UI::Xaml::Automation::ITogglePatternIdentifiers
{
	TogglePatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty ToggleStateProperty();
};

struct TransformPatternIdentifiers :
	Windows::UI::Xaml::Automation::ITransformPatternIdentifiers
{
	TransformPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty CanMoveProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty CanResizeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty CanRotateProperty();
};

struct ValuePatternIdentifiers :
	Windows::UI::Xaml::Automation::IValuePatternIdentifiers
{
	ValuePatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty IsReadOnlyProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ValueProperty();
};

struct WindowPatternIdentifiers :
	Windows::UI::Xaml::Automation::IWindowPatternIdentifiers
{
	WindowPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty CanMaximizeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty CanMinimizeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsModalProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty IsTopmostProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty WindowInteractionStateProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty WindowVisualStateProperty();
};

struct TransformPattern2Identifiers :
	Windows::UI::Xaml::Automation::ITransformPattern2Identifiers
{
	TransformPattern2Identifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty CanZoomProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ZoomLevelProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty MaxZoomProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty MinZoomProperty();
};

struct SpreadsheetItemPatternIdentifiers :
	Windows::UI::Xaml::Automation::ISpreadsheetItemPatternIdentifiers
{
	SpreadsheetItemPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty FormulaProperty();
};

struct StylesPatternIdentifiers :
	Windows::UI::Xaml::Automation::IStylesPatternIdentifiers
{
	StylesPatternIdentifiers(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Automation::AutomationProperty ExtendedPropertiesProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty FillColorProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty FillPatternColorProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty FillPatternStyleProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty ShapeProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty StyleIdProperty();
	static Windows::UI::Xaml::Automation::AutomationProperty StyleNameProperty();
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation { namespace Peers {

struct AutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IAutomationPeer,
	Bases<AutomationPeer, Windows::UI::Xaml::DependencyObject>,
	Requires<AutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::IDependencyObject>
{
	AutomationPeer(std::nullptr_t) noexcept {}
	static bool ListenerExists(Windows::UI::Xaml::Automation::Peers::AutomationEvents eventId);
};

struct FrameworkElementAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer,
	Bases<FrameworkElementAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer>,
	Requires<FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::IDependencyObject>
{
	FrameworkElementAutomationPeer(std::nullptr_t) noexcept {}
	FrameworkElementAutomationPeer(Windows::UI::Xaml::FrameworkElement const & owner);
	static Windows::UI::Xaml::Automation::Peers::AutomationPeer FromElement(Windows::UI::Xaml::UIElement const & element);
	static Windows::UI::Xaml::Automation::Peers::AutomationPeer CreatePeerForElement(Windows::UI::Xaml::UIElement const & element);
};

struct ButtonBaseAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer,
	Bases<ButtonBaseAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	ButtonBaseAutomationPeer(std::nullptr_t) noexcept {}
};

struct CaptureElementAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ICaptureElementAutomationPeer,
	Bases<CaptureElementAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<CaptureElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	CaptureElementAutomationPeer(std::nullptr_t) noexcept {}
	CaptureElementAutomationPeer(Windows::UI::Xaml::Controls::CaptureElement const & owner);
};

struct ComboBoxItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IComboBoxItemAutomationPeer,
	Bases<ComboBoxItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ComboBoxItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	ComboBoxItemAutomationPeer(std::nullptr_t) noexcept {}
	ComboBoxItemAutomationPeer(Windows::UI::Xaml::Controls::ComboBoxItem const & owner);
};

struct FlipViewItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IFlipViewItemAutomationPeer,
	Bases<FlipViewItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<FlipViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	FlipViewItemAutomationPeer(std::nullptr_t) noexcept {}
	FlipViewItemAutomationPeer(Windows::UI::Xaml::Controls::FlipViewItem const & owner);
};

struct GridViewItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IGridViewItemAutomationPeer,
	Bases<GridViewItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<GridViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	GridViewItemAutomationPeer(std::nullptr_t) noexcept {}
	GridViewItemAutomationPeer(Windows::UI::Xaml::Controls::GridViewItem const & owner);
};

struct GroupItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IGroupItemAutomationPeer,
	Bases<GroupItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<GroupItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	GroupItemAutomationPeer(std::nullptr_t) noexcept {}
	GroupItemAutomationPeer(Windows::UI::Xaml::Controls::GroupItem const & owner);
};

struct ImageAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IImageAutomationPeer,
	Bases<ImageAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ImageAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	ImageAutomationPeer(std::nullptr_t) noexcept {}
	ImageAutomationPeer(Windows::UI::Xaml::Controls::Image const & owner);
};

struct ListBoxItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IListBoxItemAutomationPeer,
	Bases<ListBoxItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ListBoxItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	ListBoxItemAutomationPeer(std::nullptr_t) noexcept {}
	ListBoxItemAutomationPeer(Windows::UI::Xaml::Controls::ListBoxItem const & owner);
};

struct ListViewItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IListViewItemAutomationPeer,
	Bases<ListViewItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ListViewItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	ListViewItemAutomationPeer(std::nullptr_t) noexcept {}
	ListViewItemAutomationPeer(Windows::UI::Xaml::Controls::ListViewItem const & owner);
};

struct MediaElementAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IMediaElementAutomationPeer,
	Bases<MediaElementAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<MediaElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	MediaElementAutomationPeer(std::nullptr_t) noexcept {}
	MediaElementAutomationPeer(Windows::UI::Xaml::Controls::MediaElement const & owner);
};

struct PasswordBoxAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IPasswordBoxAutomationPeer,
	Bases<PasswordBoxAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<PasswordBoxAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	PasswordBoxAutomationPeer(std::nullptr_t) noexcept {}
	PasswordBoxAutomationPeer(Windows::UI::Xaml::Controls::PasswordBox const & owner);
};

struct ProgressRingAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IProgressRingAutomationPeer,
	Bases<ProgressRingAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ProgressRingAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	ProgressRingAutomationPeer(std::nullptr_t) noexcept {}
	ProgressRingAutomationPeer(Windows::UI::Xaml::Controls::ProgressRing const & owner);
};

struct RichEditBoxAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IRichEditBoxAutomationPeer,
	Bases<RichEditBoxAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<RichEditBoxAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	RichEditBoxAutomationPeer(std::nullptr_t) noexcept {}
	RichEditBoxAutomationPeer(Windows::UI::Xaml::Controls::RichEditBox const & owner);
};

struct RichTextBlockAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IRichTextBlockAutomationPeer,
	Bases<RichTextBlockAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<RichTextBlockAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	RichTextBlockAutomationPeer(std::nullptr_t) noexcept {}
	RichTextBlockAutomationPeer(Windows::UI::Xaml::Controls::RichTextBlock const & owner);
};

struct RichTextBlockOverflowAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IRichTextBlockOverflowAutomationPeer,
	Bases<RichTextBlockOverflowAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<RichTextBlockOverflowAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	RichTextBlockOverflowAutomationPeer(std::nullptr_t) noexcept {}
	RichTextBlockOverflowAutomationPeer(Windows::UI::Xaml::Controls::RichTextBlockOverflow const & owner);
};

struct SettingsFlyoutAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ISettingsFlyoutAutomationPeer,
	Bases<SettingsFlyoutAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<SettingsFlyoutAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	SettingsFlyoutAutomationPeer(std::nullptr_t) noexcept {}
	SettingsFlyoutAutomationPeer(Windows::UI::Xaml::Controls::SettingsFlyout const & owner);
};

struct TextBlockAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ITextBlockAutomationPeer,
	Bases<TextBlockAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<TextBlockAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	TextBlockAutomationPeer(std::nullptr_t) noexcept {}
	TextBlockAutomationPeer(Windows::UI::Xaml::Controls::TextBlock const & owner);
};

struct TextBoxAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ITextBoxAutomationPeer,
	Bases<TextBoxAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<TextBoxAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	TextBoxAutomationPeer(std::nullptr_t) noexcept {}
	TextBoxAutomationPeer(Windows::UI::Xaml::Controls::TextBox const & owner);
};

struct ThumbAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IThumbAutomationPeer,
	Bases<ThumbAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ThumbAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	ThumbAutomationPeer(std::nullptr_t) noexcept {}
	ThumbAutomationPeer(Windows::UI::Xaml::Controls::Primitives::Thumb const & owner);
};

struct DatePickerAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IDatePickerAutomationPeer,
	Bases<DatePickerAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<DatePickerAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	DatePickerAutomationPeer(std::nullptr_t) noexcept {}
	DatePickerAutomationPeer(Windows::UI::Xaml::Controls::DatePicker const & owner);
};

struct FlyoutPresenterAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IFlyoutPresenterAutomationPeer,
	Bases<FlyoutPresenterAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<FlyoutPresenterAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	FlyoutPresenterAutomationPeer(std::nullptr_t) noexcept {}
	FlyoutPresenterAutomationPeer(Windows::UI::Xaml::Controls::FlyoutPresenter const & owner);
};

struct HubAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IHubAutomationPeer,
	Bases<HubAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<HubAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	HubAutomationPeer(std::nullptr_t) noexcept {}
	HubAutomationPeer(Windows::UI::Xaml::Controls::Hub const & owner);
};

struct HubSectionAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IHubSectionAutomationPeer,
	Bases<HubSectionAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<HubSectionAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	HubSectionAutomationPeer(std::nullptr_t) noexcept {}
	HubSectionAutomationPeer(Windows::UI::Xaml::Controls::HubSection const & owner);
};

struct ListViewBaseHeaderItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeer,
	Bases<ListViewBaseHeaderItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ListViewBaseHeaderItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	ListViewBaseHeaderItemAutomationPeer(std::nullptr_t) noexcept {}
};

struct GridViewHeaderItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IGridViewHeaderItemAutomationPeer,
	Bases<GridViewHeaderItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ListViewBaseHeaderItemAutomationPeer>,
	Requires<GridViewHeaderItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	GridViewHeaderItemAutomationPeer(std::nullptr_t) noexcept {}
	GridViewHeaderItemAutomationPeer(Windows::UI::Xaml::Controls::GridViewHeaderItem const & owner);
};

struct ListViewHeaderItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IListViewHeaderItemAutomationPeer,
	Bases<ListViewHeaderItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ListViewBaseHeaderItemAutomationPeer>,
	Requires<ListViewHeaderItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IListViewBaseHeaderItemAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	ListViewHeaderItemAutomationPeer(std::nullptr_t) noexcept {}
	ListViewHeaderItemAutomationPeer(Windows::UI::Xaml::Controls::ListViewHeaderItem const & owner);
};

struct SearchBoxAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ISearchBoxAutomationPeer,
	Bases<SearchBoxAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<SearchBoxAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	SearchBoxAutomationPeer(std::nullptr_t) noexcept {}
	SearchBoxAutomationPeer(Windows::UI::Xaml::Controls::SearchBox const & owner);
};

struct TimePickerAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ITimePickerAutomationPeer,
	Bases<TimePickerAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<TimePickerAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::IDependencyObject>
{
	TimePickerAutomationPeer(std::nullptr_t) noexcept {}
	TimePickerAutomationPeer(Windows::UI::Xaml::Controls::TimePicker const & owner);
};

struct ButtonAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeer,
	Bases<ButtonAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer>,
	Requires<ButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider, Windows::UI::Xaml::IDependencyObject>
{
	ButtonAutomationPeer(std::nullptr_t) noexcept {}
	ButtonAutomationPeer(Windows::UI::Xaml::Controls::Button const & owner);
};

struct HyperlinkButtonAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IHyperlinkButtonAutomationPeer,
	Bases<HyperlinkButtonAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer>,
	Requires<HyperlinkButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider, Windows::UI::Xaml::IDependencyObject>
{
	HyperlinkButtonAutomationPeer(std::nullptr_t) noexcept {}
	HyperlinkButtonAutomationPeer(Windows::UI::Xaml::Controls::HyperlinkButton const & owner);
};

struct RepeatButtonAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IRepeatButtonAutomationPeer,
	Bases<RepeatButtonAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer>,
	Requires<RepeatButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider, Windows::UI::Xaml::IDependencyObject>
{
	RepeatButtonAutomationPeer(std::nullptr_t) noexcept {}
	RepeatButtonAutomationPeer(Windows::UI::Xaml::Controls::Primitives::RepeatButton const & owner);
};

struct AppBarButtonAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IAppBarButtonAutomationPeer,
	Bases<AppBarButtonAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::ButtonAutomationPeer>,
	Requires<AppBarButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider, Windows::UI::Xaml::IDependencyObject>
{
	AppBarButtonAutomationPeer(std::nullptr_t) noexcept {}
	AppBarButtonAutomationPeer(Windows::UI::Xaml::Controls::AppBarButton const & owner);
};

struct MenuFlyoutItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IMenuFlyoutItemAutomationPeer,
	Bases<MenuFlyoutItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<MenuFlyoutItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Provider::IInvokeProvider, Windows::UI::Xaml::IDependencyObject>
{
	MenuFlyoutItemAutomationPeer(std::nullptr_t) noexcept {}
	MenuFlyoutItemAutomationPeer(Windows::UI::Xaml::Controls::MenuFlyoutItem const & owner);
};

struct ItemsControlAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer,
	Bases<ItemsControlAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::IDependencyObject>
{
	ItemsControlAutomationPeer(std::nullptr_t) noexcept {}
	ItemsControlAutomationPeer(Windows::UI::Xaml::Controls::ItemsControl const & owner);
};

struct MenuFlyoutPresenterAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IMenuFlyoutPresenterAutomationPeer,
	Bases<MenuFlyoutPresenterAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer>,
	Requires<MenuFlyoutPresenterAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::IDependencyObject>
{
	MenuFlyoutPresenterAutomationPeer(std::nullptr_t) noexcept {}
	MenuFlyoutPresenterAutomationPeer(Windows::UI::Xaml::Controls::MenuFlyoutPresenter const & owner);
};

struct RangeBaseAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer,
	Bases<RangeBaseAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<RangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Provider::IRangeValueProvider, Windows::UI::Xaml::IDependencyObject>
{
	RangeBaseAutomationPeer(std::nullptr_t) noexcept {}
	RangeBaseAutomationPeer(Windows::UI::Xaml::Controls::Primitives::RangeBase const & owner);
	using impl_IRangeValueProvider::SetValue;
	using impl_IDependencyObject::SetValue;
};

struct ProgressBarAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IProgressBarAutomationPeer,
	Bases<ProgressBarAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer>,
	Requires<ProgressBarAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IRangeValueProvider, Windows::UI::Xaml::IDependencyObject>
{
	ProgressBarAutomationPeer(std::nullptr_t) noexcept {}
	ProgressBarAutomationPeer(Windows::UI::Xaml::Controls::ProgressBar const & owner);
	using impl_IRangeValueProvider::SetValue;
	using impl_IDependencyObject::SetValue;
};

struct ScrollBarAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IScrollBarAutomationPeer,
	Bases<ScrollBarAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer>,
	Requires<ScrollBarAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IRangeValueProvider, Windows::UI::Xaml::IDependencyObject>
{
	ScrollBarAutomationPeer(std::nullptr_t) noexcept {}
	ScrollBarAutomationPeer(Windows::UI::Xaml::Controls::Primitives::ScrollBar const & owner);
	using impl_IRangeValueProvider::SetValue;
	using impl_IDependencyObject::SetValue;
};

struct SliderAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ISliderAutomationPeer,
	Bases<SliderAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::RangeBaseAutomationPeer>,
	Requires<SliderAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IRangeBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IRangeValueProvider, Windows::UI::Xaml::IDependencyObject>
{
	SliderAutomationPeer(std::nullptr_t) noexcept {}
	SliderAutomationPeer(Windows::UI::Xaml::Controls::Slider const & owner);
	using impl_IRangeValueProvider::SetValue;
	using impl_IDependencyObject::SetValue;
};

struct ScrollViewerAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IScrollViewerAutomationPeer,
	Bases<ScrollViewerAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ScrollViewerAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Provider::IScrollProvider, Windows::UI::Xaml::IDependencyObject>
{
	ScrollViewerAutomationPeer(std::nullptr_t) noexcept {}
	ScrollViewerAutomationPeer(Windows::UI::Xaml::Controls::ScrollViewer const & owner);
};

struct SelectorAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer,
	Bases<SelectorAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer>,
	Requires<SelectorAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Provider::ISelectionProvider, Windows::UI::Xaml::IDependencyObject>
{
	SelectorAutomationPeer(std::nullptr_t) noexcept {}
	SelectorAutomationPeer(Windows::UI::Xaml::Controls::Primitives::Selector const & owner);
};

struct FlipViewAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IFlipViewAutomationPeer,
	Bases<FlipViewAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer>,
	Requires<FlipViewAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionProvider, Windows::UI::Xaml::IDependencyObject>
{
	FlipViewAutomationPeer(std::nullptr_t) noexcept {}
	FlipViewAutomationPeer(Windows::UI::Xaml::Controls::FlipView const & owner);
};

struct ListBoxAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IListBoxAutomationPeer,
	Bases<ListBoxAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer>,
	Requires<ListBoxAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionProvider, Windows::UI::Xaml::IDependencyObject>
{
	ListBoxAutomationPeer(std::nullptr_t) noexcept {}
	ListBoxAutomationPeer(Windows::UI::Xaml::Controls::ListBox const & owner);
};

struct ListViewBaseAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeer,
	Bases<ListViewBaseAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer>,
	Requires<ListViewBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionProvider, Windows::UI::Xaml::Automation::Provider::IDropTargetProvider, Windows::UI::Xaml::IDependencyObject>
{
	ListViewBaseAutomationPeer(std::nullptr_t) noexcept {}
	ListViewBaseAutomationPeer(Windows::UI::Xaml::Controls::ListViewBase const & owner);
};

struct GridViewAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IGridViewAutomationPeer,
	Bases<GridViewAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer, Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer>,
	Requires<GridViewAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionProvider, Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IDropTargetProvider, Windows::UI::Xaml::IDependencyObject>
{
	GridViewAutomationPeer(std::nullptr_t) noexcept {}
	GridViewAutomationPeer(Windows::UI::Xaml::Controls::GridView const & owner);
};

struct ListViewAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IListViewAutomationPeer,
	Bases<ListViewAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer, Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer>,
	Requires<ListViewAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionProvider, Windows::UI::Xaml::Automation::Peers::IListViewBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IDropTargetProvider, Windows::UI::Xaml::IDependencyObject>
{
	ListViewAutomationPeer(std::nullptr_t) noexcept {}
	ListViewAutomationPeer(Windows::UI::Xaml::Controls::ListView const & owner);
};

struct SemanticZoomAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ISemanticZoomAutomationPeer,
	Bases<SemanticZoomAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<SemanticZoomAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider, Windows::UI::Xaml::IDependencyObject>
{
	SemanticZoomAutomationPeer(std::nullptr_t) noexcept {}
	SemanticZoomAutomationPeer(Windows::UI::Xaml::Controls::SemanticZoom const & owner);
};

struct ToggleButtonAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer,
	Bases<ToggleButtonAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer>,
	Requires<ToggleButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider, Windows::UI::Xaml::IDependencyObject>
{
	ToggleButtonAutomationPeer(std::nullptr_t) noexcept {}
	ToggleButtonAutomationPeer(Windows::UI::Xaml::Controls::Primitives::ToggleButton const & owner);
};

struct CheckBoxAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ICheckBoxAutomationPeer,
	Bases<CheckBoxAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer>,
	Requires<CheckBoxAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider, Windows::UI::Xaml::IDependencyObject>
{
	CheckBoxAutomationPeer(std::nullptr_t) noexcept {}
	CheckBoxAutomationPeer(Windows::UI::Xaml::Controls::CheckBox const & owner);
};

struct RadioButtonAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IRadioButtonAutomationPeer,
	Bases<RadioButtonAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer>,
	Requires<RadioButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider, Windows::UI::Xaml::IDependencyObject>
{
	RadioButtonAutomationPeer(std::nullptr_t) noexcept {}
	RadioButtonAutomationPeer(Windows::UI::Xaml::Controls::RadioButton const & owner);
};

struct ToggleSwitchAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IToggleSwitchAutomationPeer,
	Bases<ToggleSwitchAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ToggleSwitchAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider, Windows::UI::Xaml::IDependencyObject>
{
	ToggleSwitchAutomationPeer(std::nullptr_t) noexcept {}
	ToggleSwitchAutomationPeer(Windows::UI::Xaml::Controls::ToggleSwitch const & owner);
};

struct AppBarAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IAppBarAutomationPeer,
	Bases<AppBarAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<AppBarAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider, Windows::UI::Xaml::Automation::Provider::IToggleProvider, Windows::UI::Xaml::IDependencyObject>
{
	AppBarAutomationPeer(std::nullptr_t) noexcept {}
	AppBarAutomationPeer(Windows::UI::Xaml::Controls::AppBar const & owner);
};

struct AppBarToggleButtonAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IAppBarToggleButtonAutomationPeer,
	Bases<AppBarToggleButtonAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::ToggleButtonAutomationPeer>,
	Requires<AppBarToggleButtonAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IButtonBaseAutomationPeer, Windows::UI::Xaml::Automation::Peers::IToggleButtonAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider, Windows::UI::Xaml::IDependencyObject>
{
	AppBarToggleButtonAutomationPeer(std::nullptr_t) noexcept {}
	AppBarToggleButtonAutomationPeer(Windows::UI::Xaml::Controls::AppBarToggleButton const & owner);
};

struct ToggleMenuFlyoutItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IToggleMenuFlyoutItemAutomationPeer,
	Bases<ToggleMenuFlyoutItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer>,
	Requires<ToggleMenuFlyoutItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Provider::IToggleProvider, Windows::UI::Xaml::IDependencyObject>
{
	ToggleMenuFlyoutItemAutomationPeer(std::nullptr_t) noexcept {}
	ToggleMenuFlyoutItemAutomationPeer(Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem const & owner);
};

struct ComboBoxAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IComboBoxAutomationPeer,
	Bases<ComboBoxAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::FrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer>,
	Requires<ComboBoxAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IFrameworkElementAutomationPeer, Windows::UI::Xaml::Automation::Peers::IItemsControlAutomationPeer, Windows::UI::Xaml::Automation::Provider::IItemContainerProvider, Windows::UI::Xaml::Automation::Peers::ISelectorAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionProvider, Windows::UI::Xaml::Automation::Provider::IExpandCollapseProvider, Windows::UI::Xaml::Automation::Provider::IValueProvider, Windows::UI::Xaml::IDependencyObject>
{
	ComboBoxAutomationPeer(std::nullptr_t) noexcept {}
	ComboBoxAutomationPeer(Windows::UI::Xaml::Controls::ComboBox const & owner);
	using impl_IValueProvider::SetValue;
	using impl_IDependencyObject::SetValue;
};

struct ItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer,
	Bases<ItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer>,
	Requires<ItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider, Windows::UI::Xaml::IDependencyObject>
{
	ItemAutomationPeer(std::nullptr_t) noexcept {}
	ItemAutomationPeer(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::ItemsControlAutomationPeer const & parent);
};

struct SelectorItemAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer,
	Bases<SelectorItemAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer>,
	Requires<SelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider, Windows::UI::Xaml::IDependencyObject>
{
	SelectorItemAutomationPeer(std::nullptr_t) noexcept {}
	SelectorItemAutomationPeer(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::SelectorAutomationPeer const & parent);
};

struct ComboBoxItemDataAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IComboBoxItemDataAutomationPeer,
	Bases<ComboBoxItemDataAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer>,
	Requires<ComboBoxItemDataAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider, Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider, Windows::UI::Xaml::IDependencyObject>
{
	ComboBoxItemDataAutomationPeer(std::nullptr_t) noexcept {}
	ComboBoxItemDataAutomationPeer(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::ComboBoxAutomationPeer const & parent);
};

struct FlipViewItemDataAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IFlipViewItemDataAutomationPeer,
	Bases<FlipViewItemDataAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer>,
	Requires<FlipViewItemDataAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider, Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider, Windows::UI::Xaml::IDependencyObject>
{
	FlipViewItemDataAutomationPeer(std::nullptr_t) noexcept {}
	FlipViewItemDataAutomationPeer(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::FlipViewAutomationPeer const & parent);
};

struct GridViewItemDataAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IGridViewItemDataAutomationPeer,
	Bases<GridViewItemDataAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer>,
	Requires<GridViewItemDataAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider, Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider, Windows::UI::Xaml::IDependencyObject>
{
	GridViewItemDataAutomationPeer(std::nullptr_t) noexcept {}
	GridViewItemDataAutomationPeer(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::GridViewAutomationPeer const & parent);
};

struct ListBoxItemDataAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IListBoxItemDataAutomationPeer,
	Bases<ListBoxItemDataAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer>,
	Requires<ListBoxItemDataAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider, Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider, Windows::UI::Xaml::IDependencyObject>
{
	ListBoxItemDataAutomationPeer(std::nullptr_t) noexcept {}
	ListBoxItemDataAutomationPeer(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::ListBoxAutomationPeer const & parent);
};

struct ListViewItemDataAutomationPeer :
	Windows::UI::Xaml::Automation::Peers::IListViewItemDataAutomationPeer,
	Bases<ListViewItemDataAutomationPeer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Automation::Peers::AutomationPeer, Windows::UI::Xaml::Automation::Peers::ItemAutomationPeer, Windows::UI::Xaml::Automation::Peers::SelectorItemAutomationPeer>,
	Requires<ListViewItemDataAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer, Windows::UI::Xaml::Automation::Peers::IAutomationPeer2, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides, Windows::UI::Xaml::Automation::Peers::IAutomationPeerOverrides2, Windows::UI::Xaml::Automation::Peers::IItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::IVirtualizedItemProvider, Windows::UI::Xaml::Automation::Peers::ISelectorItemAutomationPeer, Windows::UI::Xaml::Automation::Provider::ISelectionItemProvider, Windows::UI::Xaml::Automation::Provider::IScrollItemProvider, Windows::UI::Xaml::IDependencyObject>
{
	ListViewItemDataAutomationPeer(std::nullptr_t) noexcept {}
	ListViewItemDataAutomationPeer(IInspectable const & item, Windows::UI::Xaml::Automation::Peers::ListViewBaseAutomationPeer const & parent);
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Automation { namespace Provider {

struct IRawElementProviderSimple :
	Windows::UI::Xaml::Automation::Provider::IIRawElementProviderSimple,
	Bases<IRawElementProviderSimple, Windows::UI::Xaml::DependencyObject>,
	Requires<IRawElementProviderSimple, Windows::UI::Xaml::IDependencyObject>
{
	IRawElementProviderSimple(std::nullptr_t) noexcept {}
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Controls {

struct Control :
	Windows::UI::Xaml::Controls::IControl,
	Bases<Control, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<Control, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Control(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty FontSizeProperty();
	static Windows::UI::Xaml::DependencyProperty FontFamilyProperty();
	static Windows::UI::Xaml::DependencyProperty FontWeightProperty();
	static Windows::UI::Xaml::DependencyProperty FontStyleProperty();
	static Windows::UI::Xaml::DependencyProperty FontStretchProperty();
	static Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty();
	static Windows::UI::Xaml::DependencyProperty ForegroundProperty();
	static Windows::UI::Xaml::DependencyProperty IsTabStopProperty();
	static Windows::UI::Xaml::DependencyProperty IsEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty TabIndexProperty();
	static Windows::UI::Xaml::DependencyProperty TabNavigationProperty();
	static Windows::UI::Xaml::DependencyProperty TemplateProperty();
	static Windows::UI::Xaml::DependencyProperty PaddingProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalContentAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalContentAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty BackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty BorderThicknessProperty();
	static Windows::UI::Xaml::DependencyProperty BorderBrushProperty();
	static Windows::UI::Xaml::DependencyProperty DefaultStyleKeyProperty();
	static Windows::UI::Xaml::DependencyProperty FocusStateProperty();
};

struct VirtualizingPanel :
	Windows::UI::Xaml::Controls::IVirtualizingPanel,
	Bases<VirtualizingPanel, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Panel>,
	Requires<VirtualizingPanel, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	VirtualizingPanel(std::nullptr_t) noexcept {}
};

struct ContentPresenter :
	Windows::UI::Xaml::Controls::IContentPresenter,
	Bases<ContentPresenter, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<ContentPresenter, Windows::UI::Xaml::Controls::IContentPresenter2, Windows::UI::Xaml::Controls::IContentPresenterOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ContentPresenter(std::nullptr_t) noexcept {}
	ContentPresenter();
	static Windows::UI::Xaml::DependencyProperty OpticalMarginAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty TextLineBoundsProperty();
	static Windows::UI::Xaml::DependencyProperty ContentProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTemplateSelectorProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTransitionsProperty();
	static Windows::UI::Xaml::DependencyProperty FontSizeProperty();
	static Windows::UI::Xaml::DependencyProperty FontFamilyProperty();
	static Windows::UI::Xaml::DependencyProperty FontWeightProperty();
	static Windows::UI::Xaml::DependencyProperty FontStyleProperty();
	static Windows::UI::Xaml::DependencyProperty FontStretchProperty();
	static Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty();
	static Windows::UI::Xaml::DependencyProperty ForegroundProperty();
};

struct ContentControl :
	Windows::UI::Xaml::Controls::IContentControl,
	Bases<ContentControl, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<ContentControl, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ContentControl(std::nullptr_t) noexcept {}
	ContentControl();
	static Windows::UI::Xaml::DependencyProperty ContentProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTemplateSelectorProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTransitionsProperty();
};

struct ItemsControl :
	Windows::UI::Xaml::Controls::IItemsControl,
	Bases<ItemsControl, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<ItemsControl, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ItemsControl(std::nullptr_t) noexcept {}
	ItemsControl();
	static Windows::UI::Xaml::DependencyProperty ItemsSourceProperty();
	static Windows::UI::Xaml::DependencyProperty ItemTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty ItemTemplateSelectorProperty();
	static Windows::UI::Xaml::DependencyProperty ItemsPanelProperty();
	static Windows::UI::Xaml::DependencyProperty DisplayMemberPathProperty();
	static Windows::UI::Xaml::DependencyProperty ItemContainerStyleProperty();
	static Windows::UI::Xaml::DependencyProperty ItemContainerStyleSelectorProperty();
	static Windows::UI::Xaml::DependencyProperty ItemContainerTransitionsProperty();
	static Windows::UI::Xaml::DependencyProperty GroupStyleSelectorProperty();
	static Windows::UI::Xaml::DependencyProperty IsGroupingProperty();
	static Windows::UI::Xaml::Controls::ItemsControl GetItemsOwner(Windows::UI::Xaml::DependencyObject const & element);
	static Windows::UI::Xaml::Controls::ItemsControl ItemsControlFromItemContainer(Windows::UI::Xaml::DependencyObject const & container);
};

struct BackClickEventArgs :
	Windows::UI::Xaml::Controls::IBackClickEventArgs
{
	BackClickEventArgs(std::nullptr_t) noexcept {}
	BackClickEventArgs();
};

struct DragItemsStartingEventArgs :
	Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs
{
	DragItemsStartingEventArgs(std::nullptr_t) noexcept {}
	DragItemsStartingEventArgs();
};

struct NotifyEventArgs :
	Windows::UI::Xaml::Controls::INotifyEventArgs,
	Requires<NotifyEventArgs, Windows::UI::Xaml::Controls::INotifyEventArgs2>
{
	NotifyEventArgs(std::nullptr_t) noexcept {}
};

struct SemanticZoomViewChangedEventArgs :
	Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs
{
	SemanticZoomViewChangedEventArgs(std::nullptr_t) noexcept {}
	SemanticZoomViewChangedEventArgs();
};

struct TextControlPasteEventArgs :
	Windows::UI::Xaml::Controls::ITextControlPasteEventArgs
{
	TextControlPasteEventArgs(std::nullptr_t) noexcept {}
};

struct ColumnDefinitionCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::ColumnDefinition>
{
	ColumnDefinitionCollection(std::nullptr_t) noexcept {}
};

struct ContainerContentChangingEventArgs :
	Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs
{
	ContainerContentChangingEventArgs(std::nullptr_t) noexcept {}
	ContainerContentChangingEventArgs();
};

struct DataTemplateSelector :
	Windows::UI::Xaml::Controls::IDataTemplateSelector,
	Requires<DataTemplateSelector, Windows::UI::Xaml::Controls::IDataTemplateSelector2, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>
{
	DataTemplateSelector(std::nullptr_t) noexcept {}
	DataTemplateSelector();
	using impl_IDataTemplateSelector::SelectTemplate;
	using impl_IDataTemplateSelectorOverrides::SelectTemplateCore;
	using impl_IDataTemplateSelector2::SelectTemplate;
	using impl_IDataTemplateSelectorOverrides2::SelectTemplateCore;
};

struct DatePickerValueChangedEventArgs :
	Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs
{
	DatePickerValueChangedEventArgs(std::nullptr_t) noexcept {}
};

struct RowDefinitionCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::RowDefinition>
{
	RowDefinitionCollection(std::nullptr_t) noexcept {}
};

struct StyleSelector :
	Windows::UI::Xaml::Controls::IStyleSelector,
	Requires<StyleSelector, Windows::UI::Xaml::Controls::IStyleSelectorOverrides>
{
	StyleSelector(std::nullptr_t) noexcept {}
	StyleSelector();
};

struct GroupStyle :
	Windows::UI::Xaml::Controls::IGroupStyle,
	Requires<GroupStyle, Windows::UI::Xaml::Controls::IGroupStyle2, Windows::UI::Xaml::Data::INotifyPropertyChanged>
{
	GroupStyle(std::nullptr_t) noexcept {}
	GroupStyle();
};

struct GroupStyleSelector :
	Windows::UI::Xaml::Controls::IGroupStyleSelector,
	Requires<GroupStyleSelector, Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
{
	GroupStyleSelector(std::nullptr_t) noexcept {}
	GroupStyleSelector();
};

struct SemanticZoomLocation :
	Windows::UI::Xaml::Controls::ISemanticZoomLocation
{
	SemanticZoomLocation(std::nullptr_t) noexcept {}
	SemanticZoomLocation();
};

struct ItemCollection :
	Windows::Foundation::Collections::IObservableVector<IInspectable>
{
	ItemCollection(std::nullptr_t) noexcept {}
};

struct ItemContainerGenerator :
	Windows::UI::Xaml::Controls::IItemContainerGenerator
{
	ItemContainerGenerator(std::nullptr_t) noexcept {}
};

struct UIElementCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement>,
	Requires<UIElementCollection, Windows::UI::Xaml::Controls::IUIElementCollection>
{
	UIElementCollection(std::nullptr_t) noexcept {}
};

struct ScrollViewerViewChangedEventArgs :
	Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs
{
	ScrollViewerViewChangedEventArgs(std::nullptr_t) noexcept {}
	ScrollViewerViewChangedEventArgs();
};

struct ScrollViewerViewChangingEventArgs :
	Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs
{
	ScrollViewerViewChangingEventArgs(std::nullptr_t) noexcept {}
};

struct ScrollViewerView :
	Windows::UI::Xaml::Controls::IScrollViewerView
{
	ScrollViewerView(std::nullptr_t) noexcept {}
};

struct ToolTipService :
	Windows::UI::Xaml::Controls::IToolTipService
{
	ToolTipService(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty PlacementProperty();
	static Windows::UI::Xaml::Controls::Primitives::PlacementMode GetPlacement(Windows::UI::Xaml::DependencyObject const & element);
	static void SetPlacement(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::Primitives::PlacementMode value);
	static Windows::UI::Xaml::DependencyProperty PlacementTargetProperty();
	static Windows::UI::Xaml::UIElement GetPlacementTarget(Windows::UI::Xaml::DependencyObject const & element);
	static void SetPlacementTarget(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::UIElement const & value);
	static Windows::UI::Xaml::DependencyProperty ToolTipProperty();
	static IInspectable GetToolTip(Windows::UI::Xaml::DependencyObject const & element);
	static void SetToolTip(Windows::UI::Xaml::DependencyObject const & element, IInspectable const & value);
};

struct HubSectionHeaderClickEventArgs :
	Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs
{
	HubSectionHeaderClickEventArgs(std::nullptr_t) noexcept {}
	HubSectionHeaderClickEventArgs();
};

struct SectionsInViewChangedEventArgs :
	Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs
{
	SectionsInViewChangedEventArgs(std::nullptr_t) noexcept {}
};

struct WebViewNavigationFailedEventArgs :
	Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs
{
	WebViewNavigationFailedEventArgs(std::nullptr_t) noexcept {}
};

struct HubSectionCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>
{
	HubSectionCollection(std::nullptr_t) noexcept {}
};

struct SearchBoxQueryChangedEventArgs :
	Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs
{
	SearchBoxQueryChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchBoxSuggestionsRequestedEventArgs :
	Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs
{
	SearchBoxSuggestionsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchBoxQuerySubmittedEventArgs :
	Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs
{
	SearchBoxQuerySubmittedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchBoxResultSuggestionChosenEventArgs :
	Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs
{
	SearchBoxResultSuggestionChosenEventArgs(std::nullptr_t) noexcept {}
	SearchBoxResultSuggestionChosenEventArgs();
};

struct TimePickerValueChangedEventArgs :
	Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs
{
	TimePickerValueChangedEventArgs(std::nullptr_t) noexcept {}
};

struct WebViewNavigationStartingEventArgs :
	Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs
{
	WebViewNavigationStartingEventArgs(std::nullptr_t) noexcept {}
};

struct WebViewContentLoadingEventArgs :
	Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs
{
	WebViewContentLoadingEventArgs(std::nullptr_t) noexcept {}
};

struct WebViewDOMContentLoadedEventArgs :
	Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs
{
	WebViewDOMContentLoadedEventArgs(std::nullptr_t) noexcept {}
};

struct WebViewNavigationCompletedEventArgs :
	Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs
{
	WebViewNavigationCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct WebViewLongRunningScriptDetectedEventArgs :
	Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs
{
	WebViewLongRunningScriptDetectedEventArgs(std::nullptr_t) noexcept {}
};

struct WebViewUnviewableContentIdentifiedEventArgs :
	Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs
{
	WebViewUnviewableContentIdentifiedEventArgs(std::nullptr_t) noexcept {}
};

struct ColumnDefinition :
	Windows::UI::Xaml::Controls::IColumnDefinition,
	Bases<ColumnDefinition, Windows::UI::Xaml::DependencyObject>,
	Requires<ColumnDefinition, Windows::UI::Xaml::IDependencyObject>
{
	ColumnDefinition(std::nullptr_t) noexcept {}
	ColumnDefinition();
	static Windows::UI::Xaml::DependencyProperty WidthProperty();
	static Windows::UI::Xaml::DependencyProperty MaxWidthProperty();
	static Windows::UI::Xaml::DependencyProperty MinWidthProperty();
};

struct RowDefinition :
	Windows::UI::Xaml::Controls::IRowDefinition,
	Bases<RowDefinition, Windows::UI::Xaml::DependencyObject>,
	Requires<RowDefinition, Windows::UI::Xaml::IDependencyObject>
{
	RowDefinition(std::nullptr_t) noexcept {}
	RowDefinition();
	static Windows::UI::Xaml::DependencyProperty HeightProperty();
	static Windows::UI::Xaml::DependencyProperty MaxHeightProperty();
	static Windows::UI::Xaml::DependencyProperty MinHeightProperty();
};

struct Flyout :
	Windows::UI::Xaml::Controls::IFlyout,
	Bases<Flyout, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Primitives::FlyoutBase>,
	Requires<Flyout, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, Windows::UI::Xaml::IDependencyObject>
{
	Flyout(std::nullptr_t) noexcept {}
	Flyout();
	static Windows::UI::Xaml::DependencyProperty ContentProperty();
	static Windows::UI::Xaml::DependencyProperty FlyoutPresenterStyleProperty();
};

struct MenuFlyout :
	Windows::UI::Xaml::Controls::IMenuFlyout,
	Bases<MenuFlyout, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Controls::Primitives::FlyoutBase>,
	Requires<MenuFlyout, Windows::UI::Xaml::Controls::Primitives::IFlyoutBase, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, Windows::UI::Xaml::IDependencyObject>
{
	MenuFlyout(std::nullptr_t) noexcept {}
	MenuFlyout();
	static Windows::UI::Xaml::DependencyProperty MenuFlyoutPresenterStyleProperty();
};

struct CleanUpVirtualizedItemEventArgs :
	Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs,
	Bases<CleanUpVirtualizedItemEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<CleanUpVirtualizedItemEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	CleanUpVirtualizedItemEventArgs(std::nullptr_t) noexcept {}
};

struct ContextMenuEventArgs :
	Windows::UI::Xaml::Controls::IContextMenuEventArgs,
	Bases<ContextMenuEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<ContextMenuEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	ContextMenuEventArgs(std::nullptr_t) noexcept {}
};

struct ItemClickEventArgs :
	Windows::UI::Xaml::Controls::IItemClickEventArgs,
	Bases<ItemClickEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<ItemClickEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	ItemClickEventArgs(std::nullptr_t) noexcept {}
	ItemClickEventArgs();
};

struct SelectionChangedEventArgs :
	Windows::UI::Xaml::Controls::ISelectionChangedEventArgs,
	Bases<SelectionChangedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<SelectionChangedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	SelectionChangedEventArgs(std::nullptr_t) noexcept {}
	SelectionChangedEventArgs(Windows::Foundation::Collections::IVector<IInspectable> const & removedItems, Windows::Foundation::Collections::IVector<IInspectable> const & addedItems);
};

struct TextChangedEventArgs :
	Windows::UI::Xaml::Controls::ITextChangedEventArgs,
	Bases<TextChangedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<TextChangedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	TextChangedEventArgs(std::nullptr_t) noexcept {}
};

struct ItemsPanelTemplate :
	Windows::UI::Xaml::Controls::IItemsPanelTemplate,
	Bases<ItemsPanelTemplate, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::FrameworkTemplate>,
	Requires<ItemsPanelTemplate, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IFrameworkTemplate>
{
	ItemsPanelTemplate(std::nullptr_t) noexcept {}
	ItemsPanelTemplate();
};

struct Border :
	Windows::UI::Xaml::Controls::IBorder,
	Bases<Border, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<Border, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Border(std::nullptr_t) noexcept {}
	Border();
	static Windows::UI::Xaml::DependencyProperty BorderBrushProperty();
	static Windows::UI::Xaml::DependencyProperty BorderThicknessProperty();
	static Windows::UI::Xaml::DependencyProperty BackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty CornerRadiusProperty();
	static Windows::UI::Xaml::DependencyProperty PaddingProperty();
	static Windows::UI::Xaml::DependencyProperty ChildTransitionsProperty();
};

struct CaptureElement :
	Windows::UI::Xaml::Controls::ICaptureElement,
	Bases<CaptureElement, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<CaptureElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	CaptureElement(std::nullptr_t) noexcept {}
	CaptureElement();
	static Windows::UI::Xaml::DependencyProperty SourceProperty();
	static Windows::UI::Xaml::DependencyProperty StretchProperty();
};

struct Image :
	Windows::UI::Xaml::Controls::IImage,
	Bases<Image, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<Image, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Image(std::nullptr_t) noexcept {}
	Image();
	static Windows::UI::Xaml::DependencyProperty SourceProperty();
	static Windows::UI::Xaml::DependencyProperty StretchProperty();
	static Windows::UI::Xaml::DependencyProperty NineGridProperty();
	static Windows::UI::Xaml::DependencyProperty PlayToSourceProperty();
};

struct Panel :
	Windows::UI::Xaml::Controls::IPanel,
	Bases<Panel, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<Panel, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Panel(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty BackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty IsItemsHostProperty();
	static Windows::UI::Xaml::DependencyProperty ChildrenTransitionsProperty();
};

struct Canvas :
	Windows::UI::Xaml::Controls::ICanvas,
	Bases<Canvas, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Panel>,
	Requires<Canvas, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Canvas(std::nullptr_t) noexcept {}
	Canvas();
	static Windows::UI::Xaml::DependencyProperty LeftProperty();
	static double GetLeft(Windows::UI::Xaml::UIElement const & element);
	static void SetLeft(Windows::UI::Xaml::UIElement const & element, double length);
	static Windows::UI::Xaml::DependencyProperty TopProperty();
	static double GetTop(Windows::UI::Xaml::UIElement const & element);
	static void SetTop(Windows::UI::Xaml::UIElement const & element, double length);
	static Windows::UI::Xaml::DependencyProperty ZIndexProperty();
	static int GetZIndex(Windows::UI::Xaml::UIElement const & element);
	static void SetZIndex(Windows::UI::Xaml::UIElement const & element, int value);
};

struct Grid :
	Windows::UI::Xaml::Controls::IGrid,
	Bases<Grid, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Panel>,
	Requires<Grid, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Grid(std::nullptr_t) noexcept {}
	Grid();
	static Windows::UI::Xaml::DependencyProperty RowProperty();
	static int GetRow(Windows::UI::Xaml::FrameworkElement const & element);
	static void SetRow(Windows::UI::Xaml::FrameworkElement const & element, int value);
	static Windows::UI::Xaml::DependencyProperty ColumnProperty();
	static int GetColumn(Windows::UI::Xaml::FrameworkElement const & element);
	static void SetColumn(Windows::UI::Xaml::FrameworkElement const & element, int value);
	static Windows::UI::Xaml::DependencyProperty RowSpanProperty();
	static int GetRowSpan(Windows::UI::Xaml::FrameworkElement const & element);
	static void SetRowSpan(Windows::UI::Xaml::FrameworkElement const & element, int value);
	static Windows::UI::Xaml::DependencyProperty ColumnSpanProperty();
	static int GetColumnSpan(Windows::UI::Xaml::FrameworkElement const & element);
	static void SetColumnSpan(Windows::UI::Xaml::FrameworkElement const & element, int value);
};

struct ItemsPresenter :
	Windows::UI::Xaml::Controls::IItemsPresenter,
	Bases<ItemsPresenter, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<ItemsPresenter, Windows::UI::Xaml::Controls::IItemsPresenter2, Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ItemsPresenter(std::nullptr_t) noexcept {}
	ItemsPresenter();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTransitionsProperty();
	static Windows::UI::Xaml::DependencyProperty PaddingProperty();
	static Windows::UI::Xaml::DependencyProperty FooterProperty();
	static Windows::UI::Xaml::DependencyProperty FooterTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty FooterTransitionsProperty();
};

struct MediaElement :
	Windows::UI::Xaml::Controls::IMediaElement,
	Bases<MediaElement, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<MediaElement, Windows::UI::Xaml::Controls::IMediaElement2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	MediaElement(std::nullptr_t) noexcept {}
	MediaElement();
	static Windows::UI::Xaml::DependencyProperty PosterSourceProperty();
	static Windows::UI::Xaml::DependencyProperty SourceProperty();
	static Windows::UI::Xaml::DependencyProperty IsMutedProperty();
	static Windows::UI::Xaml::DependencyProperty IsAudioOnlyProperty();
	static Windows::UI::Xaml::DependencyProperty AutoPlayProperty();
	static Windows::UI::Xaml::DependencyProperty VolumeProperty();
	static Windows::UI::Xaml::DependencyProperty BalanceProperty();
	static Windows::UI::Xaml::DependencyProperty NaturalVideoHeightProperty();
	static Windows::UI::Xaml::DependencyProperty NaturalVideoWidthProperty();
	static Windows::UI::Xaml::DependencyProperty NaturalDurationProperty();
	static Windows::UI::Xaml::DependencyProperty PositionProperty();
	static Windows::UI::Xaml::DependencyProperty DownloadProgressProperty();
	static Windows::UI::Xaml::DependencyProperty BufferingProgressProperty();
	static Windows::UI::Xaml::DependencyProperty DownloadProgressOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty CurrentStateProperty();
	static Windows::UI::Xaml::DependencyProperty CanSeekProperty();
	static Windows::UI::Xaml::DependencyProperty CanPauseProperty();
	static Windows::UI::Xaml::DependencyProperty AudioStreamCountProperty();
	static Windows::UI::Xaml::DependencyProperty AudioStreamIndexProperty();
	static Windows::UI::Xaml::DependencyProperty PlaybackRateProperty();
	static Windows::UI::Xaml::DependencyProperty IsLoopingProperty();
	static Windows::UI::Xaml::DependencyProperty PlayToSourceProperty();
	static Windows::UI::Xaml::DependencyProperty DefaultPlaybackRateProperty();
	static Windows::UI::Xaml::DependencyProperty AspectRatioWidthProperty();
	static Windows::UI::Xaml::DependencyProperty AspectRatioHeightProperty();
	static Windows::UI::Xaml::DependencyProperty RealTimePlaybackProperty();
	static Windows::UI::Xaml::DependencyProperty AudioCategoryProperty();
	static Windows::UI::Xaml::DependencyProperty AudioDeviceTypeProperty();
	static Windows::UI::Xaml::DependencyProperty ProtectionManagerProperty();
	static Windows::UI::Xaml::DependencyProperty Stereo3DVideoPackingModeProperty();
	static Windows::UI::Xaml::DependencyProperty Stereo3DVideoRenderModeProperty();
	static Windows::UI::Xaml::DependencyProperty IsStereo3DVideoProperty();
	static Windows::UI::Xaml::DependencyProperty ActualStereo3DVideoPackingModeProperty();
	static Windows::UI::Xaml::DependencyProperty AreTransportControlsEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty StretchProperty();
	static Windows::UI::Xaml::DependencyProperty IsFullWindowProperty();
	static Windows::UI::Xaml::DependencyProperty PlayToPreferredSourceUriProperty();
};

struct RichTextBlockOverflow :
	Windows::UI::Xaml::Controls::IRichTextBlockOverflow,
	Bases<RichTextBlockOverflow, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<RichTextBlockOverflow, Windows::UI::Xaml::Controls::IRichTextBlockOverflow2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	RichTextBlockOverflow(std::nullptr_t) noexcept {}
	RichTextBlockOverflow();
	static Windows::UI::Xaml::DependencyProperty OverflowContentTargetProperty();
	static Windows::UI::Xaml::DependencyProperty PaddingProperty();
	static Windows::UI::Xaml::DependencyProperty HasOverflowContentProperty();
	static Windows::UI::Xaml::DependencyProperty MaxLinesProperty();
};

struct RichTextBlock :
	Windows::UI::Xaml::Controls::IRichTextBlock,
	Bases<RichTextBlock, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<RichTextBlock, Windows::UI::Xaml::Controls::IRichTextBlock2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	RichTextBlock(std::nullptr_t) noexcept {}
	RichTextBlock();
	static Windows::UI::Xaml::DependencyProperty MaxLinesProperty();
	static Windows::UI::Xaml::DependencyProperty TextLineBoundsProperty();
	static Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty();
	static Windows::UI::Xaml::DependencyProperty OpticalMarginAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty TextReadingOrderProperty();
	static Windows::UI::Xaml::DependencyProperty FontSizeProperty();
	static Windows::UI::Xaml::DependencyProperty FontFamilyProperty();
	static Windows::UI::Xaml::DependencyProperty FontWeightProperty();
	static Windows::UI::Xaml::DependencyProperty FontStyleProperty();
	static Windows::UI::Xaml::DependencyProperty FontStretchProperty();
	static Windows::UI::Xaml::DependencyProperty ForegroundProperty();
	static Windows::UI::Xaml::DependencyProperty TextWrappingProperty();
	static Windows::UI::Xaml::DependencyProperty TextTrimmingProperty();
	static Windows::UI::Xaml::DependencyProperty TextAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty PaddingProperty();
	static Windows::UI::Xaml::DependencyProperty LineHeightProperty();
	static Windows::UI::Xaml::DependencyProperty LineStackingStrategyProperty();
	static Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty();
	static Windows::UI::Xaml::DependencyProperty OverflowContentTargetProperty();
	static Windows::UI::Xaml::DependencyProperty IsTextSelectionEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty HasOverflowContentProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedTextProperty();
	static Windows::UI::Xaml::DependencyProperty TextIndentProperty();
};

struct ScrollContentPresenter :
	Windows::UI::Xaml::Controls::IScrollContentPresenter,
	Bases<ScrollContentPresenter, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentPresenter>,
	Requires<ScrollContentPresenter, Windows::UI::Xaml::Controls::IContentPresenter, Windows::UI::Xaml::Controls::IContentPresenter2, Windows::UI::Xaml::Controls::IContentPresenterOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ScrollContentPresenter(std::nullptr_t) noexcept {}
	ScrollContentPresenter();
};

struct StackPanel :
	Windows::UI::Xaml::Controls::IStackPanel,
	Bases<StackPanel, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Panel>,
	Requires<StackPanel, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	StackPanel(std::nullptr_t) noexcept {}
	StackPanel();
	static Windows::UI::Xaml::DependencyProperty AreScrollSnapPointsRegularProperty();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
};

struct TextBlock :
	Windows::UI::Xaml::Controls::ITextBlock,
	Bases<TextBlock, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<TextBlock, Windows::UI::Xaml::Controls::ITextBlock2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	TextBlock(std::nullptr_t) noexcept {}
	TextBlock();
	static Windows::UI::Xaml::DependencyProperty FontSizeProperty();
	static Windows::UI::Xaml::DependencyProperty FontFamilyProperty();
	static Windows::UI::Xaml::DependencyProperty FontWeightProperty();
	static Windows::UI::Xaml::DependencyProperty FontStyleProperty();
	static Windows::UI::Xaml::DependencyProperty FontStretchProperty();
	static Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty();
	static Windows::UI::Xaml::DependencyProperty ForegroundProperty();
	static Windows::UI::Xaml::DependencyProperty TextWrappingProperty();
	static Windows::UI::Xaml::DependencyProperty TextTrimmingProperty();
	static Windows::UI::Xaml::DependencyProperty TextAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty TextProperty();
	static Windows::UI::Xaml::DependencyProperty PaddingProperty();
	static Windows::UI::Xaml::DependencyProperty LineHeightProperty();
	static Windows::UI::Xaml::DependencyProperty LineStackingStrategyProperty();
	static Windows::UI::Xaml::DependencyProperty IsTextSelectionEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedTextProperty();
	static Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty();
	static Windows::UI::Xaml::DependencyProperty MaxLinesProperty();
	static Windows::UI::Xaml::DependencyProperty TextLineBoundsProperty();
	static Windows::UI::Xaml::DependencyProperty OpticalMarginAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty TextReadingOrderProperty();
};

struct VariableSizedWrapGrid :
	Windows::UI::Xaml::Controls::IVariableSizedWrapGrid,
	Bases<VariableSizedWrapGrid, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Panel>,
	Requires<VariableSizedWrapGrid, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	VariableSizedWrapGrid(std::nullptr_t) noexcept {}
	VariableSizedWrapGrid();
	static Windows::UI::Xaml::DependencyProperty ItemHeightProperty();
	static Windows::UI::Xaml::DependencyProperty ItemWidthProperty();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalChildrenAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalChildrenAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty MaximumRowsOrColumnsProperty();
	static Windows::UI::Xaml::DependencyProperty RowSpanProperty();
	static int GetRowSpan(Windows::UI::Xaml::UIElement const & element);
	static void SetRowSpan(Windows::UI::Xaml::UIElement const & element, int value);
	static Windows::UI::Xaml::DependencyProperty ColumnSpanProperty();
	static int GetColumnSpan(Windows::UI::Xaml::UIElement const & element);
	static void SetColumnSpan(Windows::UI::Xaml::UIElement const & element, int value);
};

struct Viewbox :
	Windows::UI::Xaml::Controls::IViewbox,
	Bases<Viewbox, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<Viewbox, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Viewbox(std::nullptr_t) noexcept {}
	Viewbox();
	static Windows::UI::Xaml::DependencyProperty StretchProperty();
	static Windows::UI::Xaml::DependencyProperty StretchDirectionProperty();
};

struct VirtualizingStackPanel :
	Windows::UI::Xaml::Controls::IVirtualizingStackPanel,
	Bases<VirtualizingStackPanel, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::OrientedVirtualizingPanel, Windows::UI::Xaml::Controls::VirtualizingPanel, Windows::UI::Xaml::Controls::Panel>,
	Requires<VirtualizingStackPanel, Windows::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel, Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::Controls::IVirtualizingPanel, Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides, Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	VirtualizingStackPanel(std::nullptr_t) noexcept {}
	VirtualizingStackPanel();
	static Windows::UI::Xaml::DependencyProperty AreScrollSnapPointsRegularProperty();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
	static Windows::UI::Xaml::DependencyProperty VirtualizationModeProperty();
	static Windows::UI::Xaml::Controls::VirtualizationMode GetVirtualizationMode(Windows::UI::Xaml::DependencyObject const & element);
	static void SetVirtualizationMode(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::VirtualizationMode value);
	static Windows::UI::Xaml::DependencyProperty IsVirtualizingProperty();
	static bool GetIsVirtualizing(Windows::UI::Xaml::DependencyObject const & o);
};

struct IconElement :
	Windows::UI::Xaml::Controls::IIconElement,
	Bases<IconElement, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<IconElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	IconElement(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty ForegroundProperty();
};

struct BitmapIcon :
	Windows::UI::Xaml::Controls::IBitmapIcon,
	Bases<BitmapIcon, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::IconElement>,
	Requires<BitmapIcon, Windows::UI::Xaml::Controls::IIconElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	BitmapIcon(std::nullptr_t) noexcept {}
	BitmapIcon();
	static Windows::UI::Xaml::DependencyProperty UriSourceProperty();
};

struct FontIcon :
	Windows::UI::Xaml::Controls::IFontIcon,
	Bases<FontIcon, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::IconElement>,
	Requires<FontIcon, Windows::UI::Xaml::Controls::IIconElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	FontIcon(std::nullptr_t) noexcept {}
	FontIcon();
	static Windows::UI::Xaml::DependencyProperty GlyphProperty();
	static Windows::UI::Xaml::DependencyProperty FontSizeProperty();
	static Windows::UI::Xaml::DependencyProperty FontFamilyProperty();
	static Windows::UI::Xaml::DependencyProperty FontWeightProperty();
	static Windows::UI::Xaml::DependencyProperty FontStyleProperty();
};

struct ItemsStackPanel :
	Windows::UI::Xaml::Controls::IItemsStackPanel,
	Bases<ItemsStackPanel, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Panel>,
	Requires<ItemsStackPanel, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ItemsStackPanel(std::nullptr_t) noexcept {}
	ItemsStackPanel();
	static Windows::UI::Xaml::DependencyProperty GroupPaddingProperty();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
	static Windows::UI::Xaml::DependencyProperty GroupHeaderPlacementProperty();
	static Windows::UI::Xaml::DependencyProperty CacheLengthProperty();
};

struct ItemsWrapGrid :
	Windows::UI::Xaml::Controls::IItemsWrapGrid,
	Bases<ItemsWrapGrid, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Panel>,
	Requires<ItemsWrapGrid, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ItemsWrapGrid(std::nullptr_t) noexcept {}
	ItemsWrapGrid();
	static Windows::UI::Xaml::DependencyProperty GroupPaddingProperty();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
	static Windows::UI::Xaml::DependencyProperty MaximumRowsOrColumnsProperty();
	static Windows::UI::Xaml::DependencyProperty ItemWidthProperty();
	static Windows::UI::Xaml::DependencyProperty ItemHeightProperty();
	static Windows::UI::Xaml::DependencyProperty GroupHeaderPlacementProperty();
	static Windows::UI::Xaml::DependencyProperty CacheLengthProperty();
};

struct PathIcon :
	Windows::UI::Xaml::Controls::IPathIcon,
	Bases<PathIcon, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::IconElement>,
	Requires<PathIcon, Windows::UI::Xaml::Controls::IIconElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	PathIcon(std::nullptr_t) noexcept {}
	PathIcon();
	static Windows::UI::Xaml::DependencyProperty DataProperty();
};

struct SwapChainBackgroundPanel :
	Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel,
	Bases<SwapChainBackgroundPanel, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Panel, Windows::UI::Xaml::Controls::Grid>,
	Requires<SwapChainBackgroundPanel, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::Controls::IGrid, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	SwapChainBackgroundPanel(std::nullptr_t) noexcept {}
	SwapChainBackgroundPanel();
};

struct SwapChainPanel :
	Windows::UI::Xaml::Controls::ISwapChainPanel,
	Bases<SwapChainPanel, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Panel, Windows::UI::Xaml::Controls::Grid>,
	Requires<SwapChainPanel, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::Controls::IGrid, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	SwapChainPanel(std::nullptr_t) noexcept {}
	SwapChainPanel();
	static Windows::UI::Xaml::DependencyProperty CompositionScaleXProperty();
	static Windows::UI::Xaml::DependencyProperty CompositionScaleYProperty();
};

struct SymbolIcon :
	Windows::UI::Xaml::Controls::ISymbolIcon,
	Bases<SymbolIcon, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::IconElement>,
	Requires<SymbolIcon, Windows::UI::Xaml::Controls::IIconElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	SymbolIcon(std::nullptr_t) noexcept {}
	SymbolIcon();
	SymbolIcon(Windows::UI::Xaml::Controls::Symbol symbol);
	static Windows::UI::Xaml::DependencyProperty SymbolProperty();
};

struct WebView :
	Windows::UI::Xaml::Controls::IWebView,
	Bases<WebView, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<WebView, Windows::UI::Xaml::Controls::IWebView2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	WebView(std::nullptr_t) noexcept {}
	WebView();
	static Windows::UI::Xaml::DependencyProperty SourceProperty();
	static Windows::UI::Xaml::DependencyProperty CanGoBackProperty();
	static Windows::UI::Xaml::DependencyProperty CanGoForwardProperty();
	static Windows::UI::Xaml::DependencyProperty DocumentTitleProperty();
	static Windows::UI::Xaml::DependencyProperty DefaultBackgroundColorProperty();
};

struct WrapGrid :
	Windows::UI::Xaml::Controls::IWrapGrid,
	Bases<WrapGrid, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::OrientedVirtualizingPanel, Windows::UI::Xaml::Controls::VirtualizingPanel, Windows::UI::Xaml::Controls::Panel>,
	Requires<WrapGrid, Windows::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel, Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::Controls::IVirtualizingPanel, Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	WrapGrid(std::nullptr_t) noexcept {}
	WrapGrid();
	static Windows::UI::Xaml::DependencyProperty ItemWidthProperty();
	static Windows::UI::Xaml::DependencyProperty ItemHeightProperty();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalChildrenAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalChildrenAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty MaximumRowsOrColumnsProperty();
};

struct WebViewBrush :
	Windows::UI::Xaml::Controls::IWebViewBrush,
	Bases<WebViewBrush, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Brush, Windows::UI::Xaml::Media::TileBrush>,
	Requires<WebViewBrush, Windows::UI::Xaml::Media::IBrush, Windows::UI::Xaml::Media::ITileBrush, Windows::UI::Xaml::IDependencyObject>
{
	WebViewBrush(std::nullptr_t) noexcept {}
	WebViewBrush();
	static Windows::UI::Xaml::DependencyProperty SourceNameProperty();
};

struct ComboBoxItem :
	Windows::UI::Xaml::Controls::IComboBoxItem,
	Bases<ComboBoxItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<ComboBoxItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ComboBoxItem(std::nullptr_t) noexcept {}
	ComboBoxItem();
};

struct DatePicker :
	Windows::UI::Xaml::Controls::IDatePicker,
	Bases<DatePicker, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<DatePicker, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	DatePicker(std::nullptr_t) noexcept {}
	DatePicker();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty CalendarIdentifierProperty();
	static Windows::UI::Xaml::DependencyProperty DateProperty();
	static Windows::UI::Xaml::DependencyProperty DayVisibleProperty();
	static Windows::UI::Xaml::DependencyProperty MonthVisibleProperty();
	static Windows::UI::Xaml::DependencyProperty YearVisibleProperty();
	static Windows::UI::Xaml::DependencyProperty DayFormatProperty();
	static Windows::UI::Xaml::DependencyProperty MonthFormatProperty();
	static Windows::UI::Xaml::DependencyProperty YearFormatProperty();
	static Windows::UI::Xaml::DependencyProperty MinYearProperty();
	static Windows::UI::Xaml::DependencyProperty MaxYearProperty();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
};

struct FlipViewItem :
	Windows::UI::Xaml::Controls::IFlipViewItem,
	Bases<FlipViewItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<FlipViewItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	FlipViewItem(std::nullptr_t) noexcept {}
	FlipViewItem();
};

struct GridViewItem :
	Windows::UI::Xaml::Controls::IGridViewItem,
	Bases<GridViewItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<GridViewItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	GridViewItem(std::nullptr_t) noexcept {}
	GridViewItem();
};

struct GroupItem :
	Windows::UI::Xaml::Controls::IGroupItem,
	Bases<GroupItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<GroupItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	GroupItem(std::nullptr_t) noexcept {}
	GroupItem();
};

struct SemanticZoom :
	Windows::UI::Xaml::Controls::ISemanticZoom,
	Bases<SemanticZoom, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<SemanticZoom, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	SemanticZoom(std::nullptr_t) noexcept {}
	SemanticZoom();
	static Windows::UI::Xaml::DependencyProperty ZoomedInViewProperty();
	static Windows::UI::Xaml::DependencyProperty ZoomedOutViewProperty();
	static Windows::UI::Xaml::DependencyProperty IsZoomedInViewActiveProperty();
	static Windows::UI::Xaml::DependencyProperty CanChangeViewsProperty();
	static Windows::UI::Xaml::DependencyProperty IsZoomOutButtonEnabledProperty();
};

struct ListBoxItem :
	Windows::UI::Xaml::Controls::IListBoxItem,
	Bases<ListBoxItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<ListBoxItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ListBoxItem(std::nullptr_t) noexcept {}
	ListBoxItem();
};

struct ListViewItem :
	Windows::UI::Xaml::Controls::IListViewItem,
	Bases<ListViewItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::SelectorItem, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<ListViewItem, Windows::UI::Xaml::Controls::Primitives::ISelectorItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ListViewItem(std::nullptr_t) noexcept {}
	ListViewItem();
};

struct PasswordBox :
	Windows::UI::Xaml::Controls::IPasswordBox,
	Bases<PasswordBox, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<PasswordBox, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IPasswordBox2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	PasswordBox(std::nullptr_t) noexcept {}
	PasswordBox();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty();
	static Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty();
	static Windows::UI::Xaml::DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty();
	static Windows::UI::Xaml::DependencyProperty PasswordProperty();
	static Windows::UI::Xaml::DependencyProperty PasswordCharProperty();
	static Windows::UI::Xaml::DependencyProperty IsPasswordRevealButtonEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty MaxLengthProperty();
};

struct ProgressRing :
	Windows::UI::Xaml::Controls::IProgressRing,
	Bases<ProgressRing, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<ProgressRing, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ProgressRing(std::nullptr_t) noexcept {}
	ProgressRing();
	static Windows::UI::Xaml::DependencyProperty IsActiveProperty();
};

struct RichEditBox :
	Windows::UI::Xaml::Controls::IRichEditBox,
	Bases<RichEditBox, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<RichEditBox, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IRichEditBox2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	RichEditBox(std::nullptr_t) noexcept {}
	RichEditBox();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty();
	static Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty();
	static Windows::UI::Xaml::DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty();
	static Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty IsReadOnlyProperty();
	static Windows::UI::Xaml::DependencyProperty AcceptsReturnProperty();
	static Windows::UI::Xaml::DependencyProperty TextAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty TextWrappingProperty();
	static Windows::UI::Xaml::DependencyProperty IsSpellCheckEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty IsTextPredictionEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty InputScopeProperty();
};

struct ScrollViewer :
	Windows::UI::Xaml::Controls::IScrollViewer,
	Bases<ScrollViewer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<ScrollViewer, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IScrollViewer2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ScrollViewer(std::nullptr_t) noexcept {}
	ScrollViewer();
	static Windows::UI::Xaml::DependencyProperty HorizontalSnapPointsAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalSnapPointsAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalSnapPointsTypeProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalSnapPointsTypeProperty();
	static Windows::UI::Xaml::DependencyProperty ZoomSnapPointsTypeProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty ViewportWidthProperty();
	static Windows::UI::Xaml::DependencyProperty ScrollableWidthProperty();
	static Windows::UI::Xaml::DependencyProperty ComputedHorizontalScrollBarVisibilityProperty();
	static Windows::UI::Xaml::DependencyProperty ExtentWidthProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty ViewportHeightProperty();
	static Windows::UI::Xaml::DependencyProperty ScrollableHeightProperty();
	static Windows::UI::Xaml::DependencyProperty ComputedVerticalScrollBarVisibilityProperty();
	static Windows::UI::Xaml::DependencyProperty ExtentHeightProperty();
	static Windows::UI::Xaml::DependencyProperty MinZoomFactorProperty();
	static Windows::UI::Xaml::DependencyProperty MaxZoomFactorProperty();
	static Windows::UI::Xaml::DependencyProperty ZoomFactorProperty();
	static Windows::UI::Xaml::DependencyProperty ZoomSnapPointsProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalScrollBarVisibilityProperty();
	static Windows::UI::Xaml::Controls::ScrollBarVisibility GetHorizontalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const & element);
	static void SetHorizontalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility);
	static Windows::UI::Xaml::DependencyProperty VerticalScrollBarVisibilityProperty();
	static Windows::UI::Xaml::Controls::ScrollBarVisibility GetVerticalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const & element);
	static void SetVerticalScrollBarVisibility(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility);
	static Windows::UI::Xaml::DependencyProperty IsHorizontalRailEnabledProperty();
	static bool GetIsHorizontalRailEnabled(Windows::UI::Xaml::DependencyObject const & element);
	static void SetIsHorizontalRailEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isHorizontalRailEnabled);
	static Windows::UI::Xaml::DependencyProperty IsVerticalRailEnabledProperty();
	static bool GetIsVerticalRailEnabled(Windows::UI::Xaml::DependencyObject const & element);
	static void SetIsVerticalRailEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isVerticalRailEnabled);
	static Windows::UI::Xaml::DependencyProperty IsHorizontalScrollChainingEnabledProperty();
	static bool GetIsHorizontalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const & element);
	static void SetIsHorizontalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isHorizontalScrollChainingEnabled);
	static Windows::UI::Xaml::DependencyProperty IsVerticalScrollChainingEnabledProperty();
	static bool GetIsVerticalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const & element);
	static void SetIsVerticalScrollChainingEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isVerticalScrollChainingEnabled);
	static Windows::UI::Xaml::DependencyProperty IsZoomChainingEnabledProperty();
	static bool GetIsZoomChainingEnabled(Windows::UI::Xaml::DependencyObject const & element);
	static void SetIsZoomChainingEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isZoomChainingEnabled);
	static Windows::UI::Xaml::DependencyProperty IsScrollInertiaEnabledProperty();
	static bool GetIsScrollInertiaEnabled(Windows::UI::Xaml::DependencyObject const & element);
	static void SetIsScrollInertiaEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isScrollInertiaEnabled);
	static Windows::UI::Xaml::DependencyProperty IsZoomInertiaEnabledProperty();
	static bool GetIsZoomInertiaEnabled(Windows::UI::Xaml::DependencyObject const & element);
	static void SetIsZoomInertiaEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isZoomInertiaEnabled);
	static Windows::UI::Xaml::DependencyProperty HorizontalScrollModeProperty();
	static Windows::UI::Xaml::Controls::ScrollMode GetHorizontalScrollMode(Windows::UI::Xaml::DependencyObject const & element);
	static void SetHorizontalScrollMode(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode);
	static Windows::UI::Xaml::DependencyProperty VerticalScrollModeProperty();
	static Windows::UI::Xaml::Controls::ScrollMode GetVerticalScrollMode(Windows::UI::Xaml::DependencyObject const & element);
	static void SetVerticalScrollMode(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode);
	static Windows::UI::Xaml::DependencyProperty ZoomModeProperty();
	static Windows::UI::Xaml::Controls::ZoomMode GetZoomMode(Windows::UI::Xaml::DependencyObject const & element);
	static void SetZoomMode(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::Controls::ZoomMode zoomMode);
	static Windows::UI::Xaml::DependencyProperty IsDeferredScrollingEnabledProperty();
	static bool GetIsDeferredScrollingEnabled(Windows::UI::Xaml::DependencyObject const & element);
	static void SetIsDeferredScrollingEnabled(Windows::UI::Xaml::DependencyObject const & element, bool isDeferredScrollingEnabled);
	static Windows::UI::Xaml::DependencyProperty BringIntoViewOnFocusChangeProperty();
	static bool GetBringIntoViewOnFocusChange(Windows::UI::Xaml::DependencyObject const & element);
	static void SetBringIntoViewOnFocusChange(Windows::UI::Xaml::DependencyObject const & element, bool bringIntoViewOnFocusChange);
	static Windows::UI::Xaml::DependencyProperty TopLeftHeaderProperty();
	static Windows::UI::Xaml::DependencyProperty LeftHeaderProperty();
	static Windows::UI::Xaml::DependencyProperty TopHeaderProperty();
};

struct SettingsFlyout :
	Windows::UI::Xaml::Controls::ISettingsFlyout,
	Bases<SettingsFlyout, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<SettingsFlyout, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	SettingsFlyout(std::nullptr_t) noexcept {}
	SettingsFlyout();
	static Windows::UI::Xaml::DependencyProperty TitleProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderForegroundProperty();
	static Windows::UI::Xaml::DependencyProperty IconSourceProperty();
};

struct TextBox :
	Windows::UI::Xaml::Controls::ITextBox,
	Bases<TextBox, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<TextBox, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::ITextBox2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	TextBox(std::nullptr_t) noexcept {}
	TextBox();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty();
	static Windows::UI::Xaml::DependencyProperty SelectionHighlightColorProperty();
	static Windows::UI::Xaml::DependencyProperty PreventKeyboardDisplayOnProgrammaticFocusProperty();
	static Windows::UI::Xaml::DependencyProperty IsColorFontEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty TextProperty();
	static Windows::UI::Xaml::DependencyProperty MaxLengthProperty();
	static Windows::UI::Xaml::DependencyProperty IsReadOnlyProperty();
	static Windows::UI::Xaml::DependencyProperty AcceptsReturnProperty();
	static Windows::UI::Xaml::DependencyProperty TextAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty TextWrappingProperty();
	static Windows::UI::Xaml::DependencyProperty IsSpellCheckEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty IsTextPredictionEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty InputScopeProperty();
};

struct ToggleSwitch :
	Windows::UI::Xaml::Controls::IToggleSwitch,
	Bases<ToggleSwitch, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<ToggleSwitch, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IToggleSwitchOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ToggleSwitch(std::nullptr_t) noexcept {}
	ToggleSwitch();
	static Windows::UI::Xaml::DependencyProperty IsOnProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty OnContentProperty();
	static Windows::UI::Xaml::DependencyProperty OnContentTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty OffContentProperty();
	static Windows::UI::Xaml::DependencyProperty OffContentTemplateProperty();
};

struct ToolTip :
	Windows::UI::Xaml::Controls::IToolTip,
	Bases<ToolTip, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<ToolTip, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ToolTip(std::nullptr_t) noexcept {}
	ToolTip();
	static Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty IsOpenProperty();
	static Windows::UI::Xaml::DependencyProperty PlacementProperty();
	static Windows::UI::Xaml::DependencyProperty PlacementTargetProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty();
};

struct UserControl :
	Windows::UI::Xaml::Controls::IUserControl,
	Bases<UserControl, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<UserControl, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	UserControl(std::nullptr_t) noexcept {}
	UserControl();
	static Windows::UI::Xaml::DependencyProperty ContentProperty();
};

struct Button :
	Windows::UI::Xaml::Controls::IButton,
	Bases<Button, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::ButtonBase, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<Button, Windows::UI::Xaml::Controls::Primitives::IButtonBase, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IButtonWithFlyout, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Button(std::nullptr_t) noexcept {}
	Button();
	static Windows::UI::Xaml::DependencyProperty FlyoutProperty();
};

struct HyperlinkButton :
	Windows::UI::Xaml::Controls::IHyperlinkButton,
	Bases<HyperlinkButton, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::ButtonBase, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<HyperlinkButton, Windows::UI::Xaml::Controls::Primitives::IButtonBase, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	HyperlinkButton(std::nullptr_t) noexcept {}
	HyperlinkButton();
	static Windows::UI::Xaml::DependencyProperty NavigateUriProperty();
};

struct ProgressBar :
	Windows::UI::Xaml::Controls::IProgressBar,
	Bases<ProgressBar, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::RangeBase>,
	Requires<ProgressBar, Windows::UI::Xaml::Controls::Primitives::IRangeBase, Windows::UI::Xaml::Controls::Primitives::IRangeBaseOverrides, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ProgressBar(std::nullptr_t) noexcept {}
	ProgressBar();
	static Windows::UI::Xaml::DependencyProperty IsIndeterminateProperty();
	static Windows::UI::Xaml::DependencyProperty ShowErrorProperty();
	static Windows::UI::Xaml::DependencyProperty ShowPausedProperty();
};

struct Slider :
	Windows::UI::Xaml::Controls::ISlider,
	Bases<Slider, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::RangeBase>,
	Requires<Slider, Windows::UI::Xaml::Controls::Primitives::IRangeBase, Windows::UI::Xaml::Controls::Primitives::IRangeBaseOverrides, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::ISlider2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Slider(std::nullptr_t) noexcept {}
	Slider();
	static Windows::UI::Xaml::DependencyProperty IntermediateValueProperty();
	static Windows::UI::Xaml::DependencyProperty StepFrequencyProperty();
	static Windows::UI::Xaml::DependencyProperty SnapsToProperty();
	static Windows::UI::Xaml::DependencyProperty TickFrequencyProperty();
	static Windows::UI::Xaml::DependencyProperty TickPlacementProperty();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
	static Windows::UI::Xaml::DependencyProperty IsDirectionReversedProperty();
	static Windows::UI::Xaml::DependencyProperty IsThumbToolTipEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty ThumbToolTipValueConverterProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
};

struct ComboBox :
	Windows::UI::Xaml::Controls::IComboBox,
	Bases<ComboBox, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::Selector, Windows::UI::Xaml::Controls::ItemsControl>,
	Requires<ComboBox, Windows::UI::Xaml::Controls::Primitives::ISelector, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::Controls::IComboBox2, Windows::UI::Xaml::Controls::IComboBoxOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ComboBox(std::nullptr_t) noexcept {}
	ComboBox();
	static Windows::UI::Xaml::DependencyProperty IsDropDownOpenProperty();
	static Windows::UI::Xaml::DependencyProperty MaxDropDownHeightProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty();
};

struct ListViewBase :
	Windows::UI::Xaml::Controls::IListViewBase,
	Bases<ListViewBase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::Selector, Windows::UI::Xaml::Controls::ItemsControl>,
	Requires<ListViewBase, Windows::UI::Xaml::Controls::Primitives::ISelector, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::Controls::IListViewBase2, Windows::UI::Xaml::Controls::ISemanticZoomInformation, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ListViewBase(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty SelectionModeProperty();
	static Windows::UI::Xaml::DependencyProperty IsSwipeEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty CanDragItemsProperty();
	static Windows::UI::Xaml::DependencyProperty CanReorderItemsProperty();
	static Windows::UI::Xaml::DependencyProperty IsItemClickEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty DataFetchSizeProperty();
	static Windows::UI::Xaml::DependencyProperty IncrementalLoadingThresholdProperty();
	static Windows::UI::Xaml::DependencyProperty IncrementalLoadingTriggerProperty();
	static Windows::UI::Xaml::DependencyProperty SemanticZoomOwnerProperty();
	static Windows::UI::Xaml::DependencyProperty IsActiveViewProperty();
	static Windows::UI::Xaml::DependencyProperty IsZoomedInViewProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTransitionsProperty();
	static Windows::UI::Xaml::DependencyProperty ShowsScrollingPlaceholdersProperty();
	static Windows::UI::Xaml::DependencyProperty FooterProperty();
	static Windows::UI::Xaml::DependencyProperty FooterTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty FooterTransitionsProperty();
};

struct FlipView :
	Windows::UI::Xaml::Controls::IFlipView,
	Bases<FlipView, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::Selector, Windows::UI::Xaml::Controls::ItemsControl>,
	Requires<FlipView, Windows::UI::Xaml::Controls::Primitives::ISelector, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::Controls::IFlipView2, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	FlipView(std::nullptr_t) noexcept {}
	FlipView();
	static Windows::UI::Xaml::DependencyProperty UseTouchAnimationsForAllNavigationProperty();
};

struct GridView :
	Windows::UI::Xaml::Controls::IGridView,
	Bases<GridView, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::Selector, Windows::UI::Xaml::Controls::ItemsControl, Windows::UI::Xaml::Controls::ListViewBase>,
	Requires<GridView, Windows::UI::Xaml::Controls::Primitives::ISelector, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::Controls::IListViewBase, Windows::UI::Xaml::Controls::IListViewBase2, Windows::UI::Xaml::Controls::ISemanticZoomInformation, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	GridView(std::nullptr_t) noexcept {}
	GridView();
};

struct ListBox :
	Windows::UI::Xaml::Controls::IListBox,
	Bases<ListBox, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::Selector, Windows::UI::Xaml::Controls::ItemsControl>,
	Requires<ListBox, Windows::UI::Xaml::Controls::Primitives::ISelector, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ListBox(std::nullptr_t) noexcept {}
	ListBox();
	static Windows::UI::Xaml::DependencyProperty SelectionModeProperty();
};

struct ListView :
	Windows::UI::Xaml::Controls::IListView,
	Bases<ListView, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::Selector, Windows::UI::Xaml::Controls::ItemsControl, Windows::UI::Xaml::Controls::ListViewBase>,
	Requires<ListView, Windows::UI::Xaml::Controls::Primitives::ISelector, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::Controls::IListViewBase, Windows::UI::Xaml::Controls::IListViewBase2, Windows::UI::Xaml::Controls::ISemanticZoomInformation, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ListView(std::nullptr_t) noexcept {}
	ListView();
};

struct CheckBox :
	Windows::UI::Xaml::Controls::ICheckBox,
	Bases<CheckBox, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::ButtonBase, Windows::UI::Xaml::Controls::Primitives::ToggleButton, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<CheckBox, Windows::UI::Xaml::Controls::Primitives::IButtonBase, Windows::UI::Xaml::Controls::Primitives::IToggleButton, Windows::UI::Xaml::Controls::Primitives::IToggleButtonOverrides, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	CheckBox(std::nullptr_t) noexcept {}
	CheckBox();
};

struct RadioButton :
	Windows::UI::Xaml::Controls::IRadioButton,
	Bases<RadioButton, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::ButtonBase, Windows::UI::Xaml::Controls::Primitives::ToggleButton, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<RadioButton, Windows::UI::Xaml::Controls::Primitives::IButtonBase, Windows::UI::Xaml::Controls::Primitives::IToggleButton, Windows::UI::Xaml::Controls::Primitives::IToggleButtonOverrides, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	RadioButton(std::nullptr_t) noexcept {}
	RadioButton();
	static Windows::UI::Xaml::DependencyProperty GroupNameProperty();
};

struct AppBar :
	Windows::UI::Xaml::Controls::IAppBar,
	Bases<AppBar, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<AppBar, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IAppBarOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	AppBar(std::nullptr_t) noexcept {}
	AppBar();
	static Windows::UI::Xaml::DependencyProperty IsOpenProperty();
	static Windows::UI::Xaml::DependencyProperty IsStickyProperty();
};

struct AppBarButton :
	Windows::UI::Xaml::Controls::IAppBarButton,
	Bases<AppBarButton, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::ButtonBase, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::Button>,
	Requires<AppBarButton, Windows::UI::Xaml::Controls::Primitives::IButtonBase, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IButton, Windows::UI::Xaml::Controls::IButtonWithFlyout, Windows::UI::Xaml::Controls::ICommandBarElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	AppBarButton(std::nullptr_t) noexcept {}
	AppBarButton();
	static Windows::UI::Xaml::DependencyProperty LabelProperty();
	static Windows::UI::Xaml::DependencyProperty IconProperty();
	static Windows::UI::Xaml::DependencyProperty IsCompactProperty();
};

struct AppBarSeparator :
	Windows::UI::Xaml::Controls::IAppBarSeparator,
	Bases<AppBarSeparator, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<AppBarSeparator, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::ICommandBarElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	AppBarSeparator(std::nullptr_t) noexcept {}
	AppBarSeparator();
	static Windows::UI::Xaml::DependencyProperty IsCompactProperty();
};

struct AppBarToggleButton :
	Windows::UI::Xaml::Controls::IAppBarToggleButton,
	Bases<AppBarToggleButton, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::ButtonBase, Windows::UI::Xaml::Controls::Primitives::ToggleButton, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<AppBarToggleButton, Windows::UI::Xaml::Controls::Primitives::IButtonBase, Windows::UI::Xaml::Controls::Primitives::IToggleButton, Windows::UI::Xaml::Controls::Primitives::IToggleButtonOverrides, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::ICommandBarElement, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	AppBarToggleButton(std::nullptr_t) noexcept {}
	AppBarToggleButton();
	static Windows::UI::Xaml::DependencyProperty LabelProperty();
	static Windows::UI::Xaml::DependencyProperty IconProperty();
	static Windows::UI::Xaml::DependencyProperty IsCompactProperty();
};

struct CommandBar :
	Windows::UI::Xaml::Controls::ICommandBar,
	Bases<CommandBar, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::AppBar>,
	Requires<CommandBar, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IAppBar, Windows::UI::Xaml::Controls::IAppBarOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	CommandBar(std::nullptr_t) noexcept {}
	CommandBar();
	static Windows::UI::Xaml::DependencyProperty PrimaryCommandsProperty();
	static Windows::UI::Xaml::DependencyProperty SecondaryCommandsProperty();
};

struct FlyoutPresenter :
	Windows::UI::Xaml::Controls::IFlyoutPresenter,
	Bases<FlyoutPresenter, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<FlyoutPresenter, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	FlyoutPresenter(std::nullptr_t) noexcept {}
	FlyoutPresenter();
};

struct Frame :
	Windows::UI::Xaml::Controls::IFrame,
	Bases<Frame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<Frame, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IFrame2, Windows::UI::Xaml::Controls::INavigate, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Frame(std::nullptr_t) noexcept {}
	Frame();
	using impl_INavigate::Navigate;
	using impl_IFrame::Navigate;
	using impl_IFrame2::Navigate;
	static Windows::UI::Xaml::DependencyProperty BackStackProperty();
	static Windows::UI::Xaml::DependencyProperty ForwardStackProperty();
	static Windows::UI::Xaml::DependencyProperty CacheSizeProperty();
	static Windows::UI::Xaml::DependencyProperty CanGoBackProperty();
	static Windows::UI::Xaml::DependencyProperty CanGoForwardProperty();
	static Windows::UI::Xaml::DependencyProperty CurrentSourcePageTypeProperty();
	static Windows::UI::Xaml::DependencyProperty SourcePageTypeProperty();
	static Windows::UI::Xaml::DependencyProperty BackStackDepthProperty();
};

struct HubSection :
	Windows::UI::Xaml::Controls::IHubSection,
	Bases<HubSection, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<HubSection, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	HubSection(std::nullptr_t) noexcept {}
	HubSection();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty IsHeaderInteractiveProperty();
};

struct Hub :
	Windows::UI::Xaml::Controls::IHub,
	Bases<Hub, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<Hub, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::ISemanticZoomInformation, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Hub(std::nullptr_t) noexcept {}
	Hub();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
	static Windows::UI::Xaml::DependencyProperty DefaultSectionIndexProperty();
	static Windows::UI::Xaml::DependencyProperty SemanticZoomOwnerProperty();
	static Windows::UI::Xaml::DependencyProperty IsActiveViewProperty();
	static Windows::UI::Xaml::DependencyProperty IsZoomedInViewProperty();
};

struct ListViewBaseHeaderItem :
	Windows::UI::Xaml::Controls::IListViewBaseHeaderItem,
	Bases<ListViewBaseHeaderItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<ListViewBaseHeaderItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ListViewBaseHeaderItem(std::nullptr_t) noexcept {}
};

struct GridViewHeaderItem :
	Windows::UI::Xaml::Controls::IGridViewHeaderItem,
	Bases<GridViewHeaderItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::ListViewBaseHeaderItem>,
	Requires<GridViewHeaderItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IListViewBaseHeaderItem, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	GridViewHeaderItem(std::nullptr_t) noexcept {}
	GridViewHeaderItem();
};

struct ListViewHeaderItem :
	Windows::UI::Xaml::Controls::IListViewHeaderItem,
	Bases<ListViewHeaderItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl, Windows::UI::Xaml::Controls::ListViewBaseHeaderItem>,
	Requires<ListViewHeaderItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::Controls::IListViewBaseHeaderItem, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ListViewHeaderItem(std::nullptr_t) noexcept {}
	ListViewHeaderItem();
};

struct MenuFlyoutItemBase :
	Windows::UI::Xaml::Controls::IMenuFlyoutItemBase,
	Bases<MenuFlyoutItemBase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<MenuFlyoutItemBase, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	MenuFlyoutItemBase(std::nullptr_t) noexcept {}
};

struct MenuFlyoutItem :
	Windows::UI::Xaml::Controls::IMenuFlyoutItem,
	Bases<MenuFlyoutItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::MenuFlyoutItemBase>,
	Requires<MenuFlyoutItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IMenuFlyoutItemBase, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	MenuFlyoutItem(std::nullptr_t) noexcept {}
	MenuFlyoutItem();
	static Windows::UI::Xaml::DependencyProperty TextProperty();
	static Windows::UI::Xaml::DependencyProperty CommandProperty();
	static Windows::UI::Xaml::DependencyProperty CommandParameterProperty();
};

struct MenuFlyoutPresenter :
	Windows::UI::Xaml::Controls::IMenuFlyoutPresenter,
	Bases<MenuFlyoutPresenter, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ItemsControl>,
	Requires<MenuFlyoutPresenter, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	MenuFlyoutPresenter(std::nullptr_t) noexcept {}
	MenuFlyoutPresenter();
};

struct MenuFlyoutSeparator :
	Windows::UI::Xaml::Controls::IMenuFlyoutSeparator,
	Bases<MenuFlyoutSeparator, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::MenuFlyoutItemBase>,
	Requires<MenuFlyoutSeparator, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IMenuFlyoutItemBase, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	MenuFlyoutSeparator(std::nullptr_t) noexcept {}
	MenuFlyoutSeparator();
};

struct Page :
	Windows::UI::Xaml::Controls::IPage,
	Bases<Page, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::UserControl>,
	Requires<Page, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IUserControl, Windows::UI::Xaml::Controls::IPageOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Page(std::nullptr_t) noexcept {}
	Page();
	static Windows::UI::Xaml::DependencyProperty FrameProperty();
	static Windows::UI::Xaml::DependencyProperty TopAppBarProperty();
	static Windows::UI::Xaml::DependencyProperty BottomAppBarProperty();
};

struct SearchBox :
	Windows::UI::Xaml::Controls::ISearchBox,
	Bases<SearchBox, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<SearchBox, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	SearchBox(std::nullptr_t) noexcept {}
	SearchBox();
	static Windows::UI::Xaml::DependencyProperty SearchHistoryEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty SearchHistoryContextProperty();
	static Windows::UI::Xaml::DependencyProperty PlaceholderTextProperty();
	static Windows::UI::Xaml::DependencyProperty QueryTextProperty();
	static Windows::UI::Xaml::DependencyProperty FocusOnKeyboardInputProperty();
	static Windows::UI::Xaml::DependencyProperty ChooseSuggestionOnEnterProperty();
};

struct TimePicker :
	Windows::UI::Xaml::Controls::ITimePicker,
	Bases<TimePicker, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<TimePicker, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	TimePicker(std::nullptr_t) noexcept {}
	TimePicker();
	static Windows::UI::Xaml::DependencyProperty HeaderProperty();
	static Windows::UI::Xaml::DependencyProperty HeaderTemplateProperty();
	static Windows::UI::Xaml::DependencyProperty ClockIdentifierProperty();
	static Windows::UI::Xaml::DependencyProperty MinuteIncrementProperty();
	static Windows::UI::Xaml::DependencyProperty TimeProperty();
};

struct ToggleMenuFlyoutItem :
	Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem,
	Bases<ToggleMenuFlyoutItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::MenuFlyoutItemBase, Windows::UI::Xaml::Controls::MenuFlyoutItem>,
	Requires<ToggleMenuFlyoutItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IMenuFlyoutItemBase, Windows::UI::Xaml::Controls::IMenuFlyoutItem, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ToggleMenuFlyoutItem(std::nullptr_t) noexcept {}
	ToggleMenuFlyoutItem();
	static Windows::UI::Xaml::DependencyProperty IsCheckedProperty();
};

struct ControlTemplate :
	Windows::UI::Xaml::Controls::IControlTemplate,
	Bases<ControlTemplate, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::FrameworkTemplate>,
	Requires<ControlTemplate, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IFrameworkTemplate>
{
	ControlTemplate(std::nullptr_t) noexcept {}
	ControlTemplate();
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Controls { namespace Primitives {

struct Popup :
	Windows::UI::Xaml::Controls::Primitives::IPopup,
	Bases<Popup, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<Popup, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Popup(std::nullptr_t) noexcept {}
	Popup();
	static Windows::UI::Xaml::DependencyProperty ChildProperty();
	static Windows::UI::Xaml::DependencyProperty IsOpenProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty ChildTransitionsProperty();
	static Windows::UI::Xaml::DependencyProperty IsLightDismissEnabledProperty();
};

struct ItemsChangedEventArgs :
	Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs
{
	ItemsChangedEventArgs(std::nullptr_t) noexcept {}
};

struct FlyoutBase :
	Windows::UI::Xaml::Controls::Primitives::IFlyoutBase,
	Bases<FlyoutBase, Windows::UI::Xaml::DependencyObject>,
	Requires<FlyoutBase, Windows::UI::Xaml::Controls::Primitives::IFlyoutBaseOverrides, Windows::UI::Xaml::IDependencyObject>
{
	FlyoutBase(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty PlacementProperty();
	static Windows::UI::Xaml::DependencyProperty AttachedFlyoutProperty();
	static Windows::UI::Xaml::Controls::Primitives::FlyoutBase GetAttachedFlyout(Windows::UI::Xaml::FrameworkElement const & element);
	static void SetAttachedFlyout(Windows::UI::Xaml::FrameworkElement const & element, Windows::UI::Xaml::Controls::Primitives::FlyoutBase const & value);
	static void ShowAttachedFlyout(Windows::UI::Xaml::FrameworkElement const & flyoutOwner);
};

struct ComboBoxTemplateSettings :
	Windows::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings,
	Bases<ComboBoxTemplateSettings, Windows::UI::Xaml::DependencyObject>,
	Requires<ComboBoxTemplateSettings, Windows::UI::Xaml::IDependencyObject>
{
	ComboBoxTemplateSettings(std::nullptr_t) noexcept {}
};

struct GridViewItemTemplateSettings :
	Windows::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings,
	Bases<GridViewItemTemplateSettings, Windows::UI::Xaml::DependencyObject>,
	Requires<GridViewItemTemplateSettings, Windows::UI::Xaml::IDependencyObject>
{
	GridViewItemTemplateSettings(std::nullptr_t) noexcept {}
};

struct ListViewItemTemplateSettings :
	Windows::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings,
	Bases<ListViewItemTemplateSettings, Windows::UI::Xaml::DependencyObject>,
	Requires<ListViewItemTemplateSettings, Windows::UI::Xaml::IDependencyObject>
{
	ListViewItemTemplateSettings(std::nullptr_t) noexcept {}
};

struct ProgressBarTemplateSettings :
	Windows::UI::Xaml::Controls::Primitives::IProgressBarTemplateSettings,
	Bases<ProgressBarTemplateSettings, Windows::UI::Xaml::DependencyObject>,
	Requires<ProgressBarTemplateSettings, Windows::UI::Xaml::IDependencyObject>
{
	ProgressBarTemplateSettings(std::nullptr_t) noexcept {}
};

struct ProgressRingTemplateSettings :
	Windows::UI::Xaml::Controls::Primitives::IProgressRingTemplateSettings,
	Bases<ProgressRingTemplateSettings, Windows::UI::Xaml::DependencyObject>,
	Requires<ProgressRingTemplateSettings, Windows::UI::Xaml::IDependencyObject>
{
	ProgressRingTemplateSettings(std::nullptr_t) noexcept {}
};

struct SettingsFlyoutTemplateSettings :
	Windows::UI::Xaml::Controls::Primitives::ISettingsFlyoutTemplateSettings,
	Bases<SettingsFlyoutTemplateSettings, Windows::UI::Xaml::DependencyObject>,
	Requires<SettingsFlyoutTemplateSettings, Windows::UI::Xaml::IDependencyObject>
{
	SettingsFlyoutTemplateSettings(std::nullptr_t) noexcept {}
};

struct ToggleSwitchTemplateSettings :
	Windows::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings,
	Bases<ToggleSwitchTemplateSettings, Windows::UI::Xaml::DependencyObject>,
	Requires<ToggleSwitchTemplateSettings, Windows::UI::Xaml::IDependencyObject>
{
	ToggleSwitchTemplateSettings(std::nullptr_t) noexcept {}
};

struct ToolTipTemplateSettings :
	Windows::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings,
	Bases<ToolTipTemplateSettings, Windows::UI::Xaml::DependencyObject>,
	Requires<ToolTipTemplateSettings, Windows::UI::Xaml::IDependencyObject>
{
	ToolTipTemplateSettings(std::nullptr_t) noexcept {}
};

struct GeneratorPositionHelper :
	Windows::UI::Xaml::Controls::Primitives::IGeneratorPositionHelper
{
	GeneratorPositionHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Controls::Primitives::GeneratorPosition FromIndexAndOffset(int index, int offset);
};

struct DragCompletedEventArgs :
	Windows::UI::Xaml::Controls::Primitives::IDragCompletedEventArgs,
	Bases<DragCompletedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<DragCompletedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	DragCompletedEventArgs(std::nullptr_t) noexcept {}
	DragCompletedEventArgs(double horizontalChange, double verticalChange, bool canceled);
};

struct DragDeltaEventArgs :
	Windows::UI::Xaml::Controls::Primitives::IDragDeltaEventArgs,
	Bases<DragDeltaEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<DragDeltaEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	DragDeltaEventArgs(std::nullptr_t) noexcept {}
	DragDeltaEventArgs(double horizontalChange, double verticalChange);
};

struct DragStartedEventArgs :
	Windows::UI::Xaml::Controls::Primitives::IDragStartedEventArgs,
	Bases<DragStartedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<DragStartedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	DragStartedEventArgs(std::nullptr_t) noexcept {}
	DragStartedEventArgs(double horizontalOffset, double verticalOffset);
};

struct RangeBaseValueChangedEventArgs :
	Windows::UI::Xaml::Controls::Primitives::IRangeBaseValueChangedEventArgs,
	Bases<RangeBaseValueChangedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<RangeBaseValueChangedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	RangeBaseValueChangedEventArgs(std::nullptr_t) noexcept {}
};

struct ScrollEventArgs :
	Windows::UI::Xaml::Controls::Primitives::IScrollEventArgs,
	Bases<ScrollEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<ScrollEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	ScrollEventArgs(std::nullptr_t) noexcept {}
	ScrollEventArgs();
};

struct CarouselPanel :
	Windows::UI::Xaml::Controls::Primitives::ICarouselPanel,
	Bases<CarouselPanel, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::VirtualizingPanel, Windows::UI::Xaml::Controls::Panel>,
	Requires<CarouselPanel, Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::Controls::IVirtualizingPanel, Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	CarouselPanel(std::nullptr_t) noexcept {}
	CarouselPanel();
};

struct OrientedVirtualizingPanel :
	Windows::UI::Xaml::Controls::Primitives::IOrientedVirtualizingPanel,
	Bases<OrientedVirtualizingPanel, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::VirtualizingPanel, Windows::UI::Xaml::Controls::Panel>,
	Requires<OrientedVirtualizingPanel, Windows::UI::Xaml::Controls::Primitives::IScrollSnapPointsInfo, Windows::UI::Xaml::Controls::IPanel, Windows::UI::Xaml::Controls::IVirtualizingPanel, Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	OrientedVirtualizingPanel(std::nullptr_t) noexcept {}
};

struct TickBar :
	Windows::UI::Xaml::Controls::Primitives::ITickBar,
	Bases<TickBar, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<TickBar, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	TickBar(std::nullptr_t) noexcept {}
	TickBar();
	static Windows::UI::Xaml::DependencyProperty FillProperty();
};

struct GridViewItemPresenter :
	Windows::UI::Xaml::Controls::Primitives::IGridViewItemPresenter,
	Bases<GridViewItemPresenter, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentPresenter>,
	Requires<GridViewItemPresenter, Windows::UI::Xaml::Controls::IContentPresenter, Windows::UI::Xaml::Controls::IContentPresenter2, Windows::UI::Xaml::Controls::IContentPresenterOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	GridViewItemPresenter(std::nullptr_t) noexcept {}
	GridViewItemPresenter();
	static Windows::UI::Xaml::DependencyProperty SelectionCheckMarkVisualEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty CheckHintBrushProperty();
	static Windows::UI::Xaml::DependencyProperty CheckSelectingBrushProperty();
	static Windows::UI::Xaml::DependencyProperty CheckBrushProperty();
	static Windows::UI::Xaml::DependencyProperty DragBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty DragForegroundProperty();
	static Windows::UI::Xaml::DependencyProperty FocusBorderBrushProperty();
	static Windows::UI::Xaml::DependencyProperty PlaceholderBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty PointerOverBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedForegroundProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedPointerOverBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedPointerOverBorderBrushProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedBorderThicknessProperty();
	static Windows::UI::Xaml::DependencyProperty DisabledOpacityProperty();
	static Windows::UI::Xaml::DependencyProperty DragOpacityProperty();
	static Windows::UI::Xaml::DependencyProperty ReorderHintOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalContentAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalContentAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty PaddingProperty();
	static Windows::UI::Xaml::DependencyProperty PointerOverBackgroundMarginProperty();
	static Windows::UI::Xaml::DependencyProperty ContentMarginProperty();
};

struct ListViewItemPresenter :
	Windows::UI::Xaml::Controls::Primitives::IListViewItemPresenter,
	Bases<ListViewItemPresenter, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentPresenter>,
	Requires<ListViewItemPresenter, Windows::UI::Xaml::Controls::IContentPresenter, Windows::UI::Xaml::Controls::IContentPresenter2, Windows::UI::Xaml::Controls::IContentPresenterOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ListViewItemPresenter(std::nullptr_t) noexcept {}
	ListViewItemPresenter();
	static Windows::UI::Xaml::DependencyProperty SelectionCheckMarkVisualEnabledProperty();
	static Windows::UI::Xaml::DependencyProperty CheckHintBrushProperty();
	static Windows::UI::Xaml::DependencyProperty CheckSelectingBrushProperty();
	static Windows::UI::Xaml::DependencyProperty CheckBrushProperty();
	static Windows::UI::Xaml::DependencyProperty DragBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty DragForegroundProperty();
	static Windows::UI::Xaml::DependencyProperty FocusBorderBrushProperty();
	static Windows::UI::Xaml::DependencyProperty PlaceholderBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty PointerOverBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedForegroundProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedPointerOverBackgroundProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedPointerOverBorderBrushProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedBorderThicknessProperty();
	static Windows::UI::Xaml::DependencyProperty DisabledOpacityProperty();
	static Windows::UI::Xaml::DependencyProperty DragOpacityProperty();
	static Windows::UI::Xaml::DependencyProperty ReorderHintOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty HorizontalContentAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalContentAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty PaddingProperty();
	static Windows::UI::Xaml::DependencyProperty PointerOverBackgroundMarginProperty();
	static Windows::UI::Xaml::DependencyProperty ContentMarginProperty();
};

struct SelectorItem :
	Windows::UI::Xaml::Controls::Primitives::ISelectorItem,
	Bases<SelectorItem, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<SelectorItem, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	SelectorItem(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty IsSelectedProperty();
};

struct ButtonBase :
	Windows::UI::Xaml::Controls::Primitives::IButtonBase,
	Bases<ButtonBase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<ButtonBase, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ButtonBase(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty ClickModeProperty();
	static Windows::UI::Xaml::DependencyProperty IsPointerOverProperty();
	static Windows::UI::Xaml::DependencyProperty IsPressedProperty();
	static Windows::UI::Xaml::DependencyProperty CommandProperty();
	static Windows::UI::Xaml::DependencyProperty CommandParameterProperty();
};

struct RangeBase :
	Windows::UI::Xaml::Controls::Primitives::IRangeBase,
	Bases<RangeBase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<RangeBase, Windows::UI::Xaml::Controls::Primitives::IRangeBaseOverrides, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	RangeBase(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty MinimumProperty();
	static Windows::UI::Xaml::DependencyProperty MaximumProperty();
	static Windows::UI::Xaml::DependencyProperty SmallChangeProperty();
	static Windows::UI::Xaml::DependencyProperty LargeChangeProperty();
	static Windows::UI::Xaml::DependencyProperty ValueProperty();
};

struct RepeatButton :
	Windows::UI::Xaml::Controls::Primitives::IRepeatButton,
	Bases<RepeatButton, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::ButtonBase, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<RepeatButton, Windows::UI::Xaml::Controls::Primitives::IButtonBase, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	RepeatButton(std::nullptr_t) noexcept {}
	RepeatButton();
	static Windows::UI::Xaml::DependencyProperty DelayProperty();
	static Windows::UI::Xaml::DependencyProperty IntervalProperty();
};

struct ScrollBar :
	Windows::UI::Xaml::Controls::Primitives::IScrollBar,
	Bases<ScrollBar, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::RangeBase>,
	Requires<ScrollBar, Windows::UI::Xaml::Controls::Primitives::IRangeBase, Windows::UI::Xaml::Controls::Primitives::IRangeBaseOverrides, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ScrollBar(std::nullptr_t) noexcept {}
	ScrollBar();
	static Windows::UI::Xaml::DependencyProperty OrientationProperty();
	static Windows::UI::Xaml::DependencyProperty ViewportSizeProperty();
	static Windows::UI::Xaml::DependencyProperty IndicatorModeProperty();
};

struct Selector :
	Windows::UI::Xaml::Controls::Primitives::ISelector,
	Bases<Selector, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::ItemsControl>,
	Requires<Selector, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IItemsControl, Windows::UI::Xaml::Controls::IItemsControl2, Windows::UI::Xaml::Controls::IItemContainerMapping, Windows::UI::Xaml::Controls::IItemsControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Selector(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty SelectedIndexProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedItemProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedValueProperty();
	static Windows::UI::Xaml::DependencyProperty SelectedValuePathProperty();
	static Windows::UI::Xaml::DependencyProperty IsSynchronizedWithCurrentItemProperty();
	static bool GetIsSelectionActive(Windows::UI::Xaml::DependencyObject const & element);
};

struct Thumb :
	Windows::UI::Xaml::Controls::Primitives::IThumb,
	Bases<Thumb, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement>,
	Requires<Thumb, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Thumb(std::nullptr_t) noexcept {}
	Thumb();
	static Windows::UI::Xaml::DependencyProperty IsDraggingProperty();
};

struct ToggleButton :
	Windows::UI::Xaml::Controls::Primitives::IToggleButton,
	Bases<ToggleButton, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Controls::Primitives::ButtonBase, Windows::UI::Xaml::Controls::ContentControl>,
	Requires<ToggleButton, Windows::UI::Xaml::Controls::Primitives::IButtonBase, Windows::UI::Xaml::Controls::Primitives::IToggleButtonOverrides, Windows::UI::Xaml::Controls::IControl, Windows::UI::Xaml::Controls::IControlOverrides, Windows::UI::Xaml::Controls::IContentControl, Windows::UI::Xaml::Controls::IContentControl2, Windows::UI::Xaml::Controls::IContentControlOverrides, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	ToggleButton(std::nullptr_t) noexcept {}
	ToggleButton();
	static Windows::UI::Xaml::DependencyProperty IsCheckedProperty();
	static Windows::UI::Xaml::DependencyProperty IsThreeStateProperty();
};

struct LayoutInformation :
	Windows::UI::Xaml::Controls::Primitives::ILayoutInformation
{
	LayoutInformation(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::UIElement GetLayoutExceptionElement(IInspectable const & dispatcher);
	static Windows::Foundation::Rect GetLayoutSlot(Windows::UI::Xaml::FrameworkElement const & element);
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Data {

struct CurrentChangingEventArgs :
	Windows::UI::Xaml::Data::ICurrentChangingEventArgs
{
	CurrentChangingEventArgs(std::nullptr_t) noexcept {}
	CurrentChangingEventArgs();
	CurrentChangingEventArgs(bool isCancelable);
};

struct PropertyChangedEventArgs :
	Windows::UI::Xaml::Data::IPropertyChangedEventArgs
{
	PropertyChangedEventArgs(std::nullptr_t) noexcept {}
	PropertyChangedEventArgs(String const & name);
	template <unsigned S0> PropertyChangedEventArgs(wchar_t const (&name)[S0]);
};

struct BindingBase :
	Windows::UI::Xaml::Data::IBindingBase,
	Bases<BindingBase, Windows::UI::Xaml::DependencyObject>,
	Requires<BindingBase, Windows::UI::Xaml::IDependencyObject>
{
	BindingBase(std::nullptr_t) noexcept {}
	BindingBase();
};

struct Binding :
	Windows::UI::Xaml::Data::IBinding,
	Bases<Binding, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Data::BindingBase>,
	Requires<Binding, Windows::UI::Xaml::Data::IBindingBase, Windows::UI::Xaml::Data::IBinding2, Windows::UI::Xaml::IDependencyObject>
{
	Binding(std::nullptr_t) noexcept {}
	Binding();
};

struct BindingExpressionBase :
	Windows::UI::Xaml::Data::IBindingExpressionBase
{
	BindingExpressionBase(std::nullptr_t) noexcept {}
};

struct BindingExpression :
	Windows::UI::Xaml::Data::IBindingExpression,
	Bases<BindingExpression, Windows::UI::Xaml::Data::BindingExpressionBase>,
	Requires<BindingExpression, Windows::UI::Xaml::Data::IBindingExpressionBase>
{
	BindingExpression(std::nullptr_t) noexcept {}
};

struct CollectionViewSource :
	Windows::UI::Xaml::Data::ICollectionViewSource,
	Bases<CollectionViewSource, Windows::UI::Xaml::DependencyObject>,
	Requires<CollectionViewSource, Windows::UI::Xaml::IDependencyObject>
{
	CollectionViewSource(std::nullptr_t) noexcept {}
	CollectionViewSource();
	static Windows::UI::Xaml::DependencyProperty SourceProperty();
	static Windows::UI::Xaml::DependencyProperty ViewProperty();
	static Windows::UI::Xaml::DependencyProperty IsSourceGroupedProperty();
	static Windows::UI::Xaml::DependencyProperty ItemsPathProperty();
};

struct RelativeSource :
	Windows::UI::Xaml::Data::IRelativeSource,
	Bases<RelativeSource, Windows::UI::Xaml::DependencyObject>,
	Requires<RelativeSource, Windows::UI::Xaml::IDependencyObject>
{
	RelativeSource(std::nullptr_t) noexcept {}
	RelativeSource();
};

struct BindingOperations :
	Windows::UI::Xaml::Data::IBindingOperations
{
	BindingOperations(std::nullptr_t) noexcept {}
	static void SetBinding(Windows::UI::Xaml::DependencyObject const & target, Windows::UI::Xaml::DependencyProperty const & dp, Windows::UI::Xaml::Data::BindingBase const & binding);
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Documents {

struct BlockCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::Block>
{
	BlockCollection(std::nullptr_t) noexcept {}
};

struct InlineCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::Inline>
{
	InlineCollection(std::nullptr_t) noexcept {}
};

struct TextPointer :
	Windows::UI::Xaml::Documents::ITextPointer
{
	TextPointer(std::nullptr_t) noexcept {}
};

struct Typography :
	Windows::UI::Xaml::Documents::ITypography
{
	Typography(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty AnnotationAlternatesProperty();
	static int GetAnnotationAlternates(Windows::UI::Xaml::DependencyObject const & element);
	static void SetAnnotationAlternates(Windows::UI::Xaml::DependencyObject const & element, int value);
	static Windows::UI::Xaml::DependencyProperty EastAsianExpertFormsProperty();
	static bool GetEastAsianExpertForms(Windows::UI::Xaml::DependencyObject const & element);
	static void SetEastAsianExpertForms(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty EastAsianLanguageProperty();
	static Windows::UI::Xaml::FontEastAsianLanguage GetEastAsianLanguage(Windows::UI::Xaml::DependencyObject const & element);
	static void SetEastAsianLanguage(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontEastAsianLanguage value);
	static Windows::UI::Xaml::DependencyProperty EastAsianWidthsProperty();
	static Windows::UI::Xaml::FontEastAsianWidths GetEastAsianWidths(Windows::UI::Xaml::DependencyObject const & element);
	static void SetEastAsianWidths(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontEastAsianWidths value);
	static Windows::UI::Xaml::DependencyProperty StandardLigaturesProperty();
	static bool GetStandardLigatures(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStandardLigatures(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty ContextualLigaturesProperty();
	static bool GetContextualLigatures(Windows::UI::Xaml::DependencyObject const & element);
	static void SetContextualLigatures(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty DiscretionaryLigaturesProperty();
	static bool GetDiscretionaryLigatures(Windows::UI::Xaml::DependencyObject const & element);
	static void SetDiscretionaryLigatures(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty HistoricalLigaturesProperty();
	static bool GetHistoricalLigatures(Windows::UI::Xaml::DependencyObject const & element);
	static void SetHistoricalLigatures(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StandardSwashesProperty();
	static int GetStandardSwashes(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStandardSwashes(Windows::UI::Xaml::DependencyObject const & element, int value);
	static Windows::UI::Xaml::DependencyProperty ContextualSwashesProperty();
	static int GetContextualSwashes(Windows::UI::Xaml::DependencyObject const & element);
	static void SetContextualSwashes(Windows::UI::Xaml::DependencyObject const & element, int value);
	static Windows::UI::Xaml::DependencyProperty ContextualAlternatesProperty();
	static bool GetContextualAlternates(Windows::UI::Xaml::DependencyObject const & element);
	static void SetContextualAlternates(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticAlternatesProperty();
	static int GetStylisticAlternates(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticAlternates(Windows::UI::Xaml::DependencyObject const & element, int value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet1Property();
	static bool GetStylisticSet1(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet1(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet2Property();
	static bool GetStylisticSet2(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet2(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet3Property();
	static bool GetStylisticSet3(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet3(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet4Property();
	static bool GetStylisticSet4(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet4(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet5Property();
	static bool GetStylisticSet5(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet5(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet6Property();
	static bool GetStylisticSet6(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet6(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet7Property();
	static bool GetStylisticSet7(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet7(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet8Property();
	static bool GetStylisticSet8(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet8(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet9Property();
	static bool GetStylisticSet9(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet9(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet10Property();
	static bool GetStylisticSet10(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet10(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet11Property();
	static bool GetStylisticSet11(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet11(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet12Property();
	static bool GetStylisticSet12(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet12(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet13Property();
	static bool GetStylisticSet13(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet13(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet14Property();
	static bool GetStylisticSet14(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet14(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet15Property();
	static bool GetStylisticSet15(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet15(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet16Property();
	static bool GetStylisticSet16(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet16(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet17Property();
	static bool GetStylisticSet17(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet17(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet18Property();
	static bool GetStylisticSet18(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet18(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet19Property();
	static bool GetStylisticSet19(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet19(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty StylisticSet20Property();
	static bool GetStylisticSet20(Windows::UI::Xaml::DependencyObject const & element);
	static void SetStylisticSet20(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty CapitalsProperty();
	static Windows::UI::Xaml::FontCapitals GetCapitals(Windows::UI::Xaml::DependencyObject const & element);
	static void SetCapitals(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontCapitals value);
	static Windows::UI::Xaml::DependencyProperty CapitalSpacingProperty();
	static bool GetCapitalSpacing(Windows::UI::Xaml::DependencyObject const & element);
	static void SetCapitalSpacing(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty KerningProperty();
	static bool GetKerning(Windows::UI::Xaml::DependencyObject const & element);
	static void SetKerning(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty CaseSensitiveFormsProperty();
	static bool GetCaseSensitiveForms(Windows::UI::Xaml::DependencyObject const & element);
	static void SetCaseSensitiveForms(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty HistoricalFormsProperty();
	static bool GetHistoricalForms(Windows::UI::Xaml::DependencyObject const & element);
	static void SetHistoricalForms(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty FractionProperty();
	static Windows::UI::Xaml::FontFraction GetFraction(Windows::UI::Xaml::DependencyObject const & element);
	static void SetFraction(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontFraction value);
	static Windows::UI::Xaml::DependencyProperty NumeralStyleProperty();
	static Windows::UI::Xaml::FontNumeralStyle GetNumeralStyle(Windows::UI::Xaml::DependencyObject const & element);
	static void SetNumeralStyle(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontNumeralStyle value);
	static Windows::UI::Xaml::DependencyProperty NumeralAlignmentProperty();
	static Windows::UI::Xaml::FontNumeralAlignment GetNumeralAlignment(Windows::UI::Xaml::DependencyObject const & element);
	static void SetNumeralAlignment(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontNumeralAlignment value);
	static Windows::UI::Xaml::DependencyProperty SlashedZeroProperty();
	static bool GetSlashedZero(Windows::UI::Xaml::DependencyObject const & element);
	static void SetSlashedZero(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty MathematicalGreekProperty();
	static bool GetMathematicalGreek(Windows::UI::Xaml::DependencyObject const & element);
	static void SetMathematicalGreek(Windows::UI::Xaml::DependencyObject const & element, bool value);
	static Windows::UI::Xaml::DependencyProperty VariantsProperty();
	static Windows::UI::Xaml::FontVariants GetVariants(Windows::UI::Xaml::DependencyObject const & element);
	static void SetVariants(Windows::UI::Xaml::DependencyObject const & element, Windows::UI::Xaml::FontVariants value);
};

struct TextElement :
	Windows::UI::Xaml::Documents::ITextElement,
	Bases<TextElement, Windows::UI::Xaml::DependencyObject>,
	Requires<TextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::IDependencyObject>
{
	TextElement(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty FontSizeProperty();
	static Windows::UI::Xaml::DependencyProperty FontFamilyProperty();
	static Windows::UI::Xaml::DependencyProperty FontWeightProperty();
	static Windows::UI::Xaml::DependencyProperty FontStyleProperty();
	static Windows::UI::Xaml::DependencyProperty FontStretchProperty();
	static Windows::UI::Xaml::DependencyProperty CharacterSpacingProperty();
	static Windows::UI::Xaml::DependencyProperty ForegroundProperty();
	static Windows::UI::Xaml::DependencyProperty LanguageProperty();
};

struct Block :
	Windows::UI::Xaml::Documents::IBlock,
	Bases<Block, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement>,
	Requires<Block, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::IDependencyObject>
{
	Block(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty TextAlignmentProperty();
	static Windows::UI::Xaml::DependencyProperty LineHeightProperty();
	static Windows::UI::Xaml::DependencyProperty LineStackingStrategyProperty();
	static Windows::UI::Xaml::DependencyProperty MarginProperty();
};

struct Inline :
	Windows::UI::Xaml::Documents::IInline,
	Bases<Inline, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement>,
	Requires<Inline, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::IDependencyObject>
{
	Inline(std::nullptr_t) noexcept {}
};

struct InlineUIContainer :
	Windows::UI::Xaml::Documents::IInlineUIContainer,
	Bases<InlineUIContainer, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::Inline>,
	Requires<InlineUIContainer, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::IInline, Windows::UI::Xaml::IDependencyObject>
{
	InlineUIContainer(std::nullptr_t) noexcept {}
	InlineUIContainer();
};

struct LineBreak :
	Windows::UI::Xaml::Documents::ILineBreak,
	Bases<LineBreak, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::Inline>,
	Requires<LineBreak, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::IInline, Windows::UI::Xaml::IDependencyObject>
{
	LineBreak(std::nullptr_t) noexcept {}
	LineBreak();
};

struct Paragraph :
	Windows::UI::Xaml::Documents::IParagraph,
	Bases<Paragraph, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::Block>,
	Requires<Paragraph, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::IBlock, Windows::UI::Xaml::IDependencyObject>
{
	Paragraph(std::nullptr_t) noexcept {}
	Paragraph();
	static Windows::UI::Xaml::DependencyProperty TextIndentProperty();
};

struct Run :
	Windows::UI::Xaml::Documents::IRun,
	Bases<Run, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::Inline>,
	Requires<Run, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::IInline, Windows::UI::Xaml::IDependencyObject>
{
	Run(std::nullptr_t) noexcept {}
	Run();
	static Windows::UI::Xaml::DependencyProperty FlowDirectionProperty();
};

struct Span :
	Windows::UI::Xaml::Documents::ISpan,
	Bases<Span, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::Inline>,
	Requires<Span, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::IInline, Windows::UI::Xaml::IDependencyObject>
{
	Span(std::nullptr_t) noexcept {}
	Span();
};

struct Bold :
	Windows::UI::Xaml::Documents::IBold,
	Bases<Bold, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::Inline, Windows::UI::Xaml::Documents::Span>,
	Requires<Bold, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::IInline, Windows::UI::Xaml::Documents::ISpan, Windows::UI::Xaml::IDependencyObject>
{
	Bold(std::nullptr_t) noexcept {}
	Bold();
};

struct Italic :
	Windows::UI::Xaml::Documents::IItalic,
	Bases<Italic, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::Inline, Windows::UI::Xaml::Documents::Span>,
	Requires<Italic, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::IInline, Windows::UI::Xaml::Documents::ISpan, Windows::UI::Xaml::IDependencyObject>
{
	Italic(std::nullptr_t) noexcept {}
	Italic();
};

struct Underline :
	Windows::UI::Xaml::Documents::IUnderline,
	Bases<Underline, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::Inline, Windows::UI::Xaml::Documents::Span>,
	Requires<Underline, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::IInline, Windows::UI::Xaml::Documents::ISpan, Windows::UI::Xaml::IDependencyObject>
{
	Underline(std::nullptr_t) noexcept {}
	Underline();
};

struct Hyperlink :
	Windows::UI::Xaml::Documents::IHyperlink,
	Bases<Hyperlink, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Documents::TextElement, Windows::UI::Xaml::Documents::Inline, Windows::UI::Xaml::Documents::Span>,
	Requires<Hyperlink, Windows::UI::Xaml::Documents::ITextElement, Windows::UI::Xaml::Documents::ITextElementOverrides, Windows::UI::Xaml::Documents::IInline, Windows::UI::Xaml::Documents::ISpan, Windows::UI::Xaml::IDependencyObject>
{
	Hyperlink(std::nullptr_t) noexcept {}
	Hyperlink();
	static Windows::UI::Xaml::DependencyProperty NavigateUriProperty();
};

struct HyperlinkClickEventArgs :
	Windows::UI::Xaml::Documents::IHyperlinkClickEventArgs,
	Bases<HyperlinkClickEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<HyperlinkClickEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	HyperlinkClickEventArgs(std::nullptr_t) noexcept {}
};

struct Glyphs :
	Windows::UI::Xaml::Documents::IGlyphs,
	Bases<Glyphs, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<Glyphs, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Glyphs(std::nullptr_t) noexcept {}
	Glyphs();
	static Windows::UI::Xaml::DependencyProperty UnicodeStringProperty();
	static Windows::UI::Xaml::DependencyProperty IndicesProperty();
	static Windows::UI::Xaml::DependencyProperty FontUriProperty();
	static Windows::UI::Xaml::DependencyProperty StyleSimulationsProperty();
	static Windows::UI::Xaml::DependencyProperty FontRenderingEmSizeProperty();
	static Windows::UI::Xaml::DependencyProperty OriginXProperty();
	static Windows::UI::Xaml::DependencyProperty OriginYProperty();
	static Windows::UI::Xaml::DependencyProperty FillProperty();
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Hosting {

struct XamlUIPresenter :
	Windows::UI::Xaml::Hosting::IXamlUIPresenter
{
	XamlUIPresenter(std::nullptr_t) noexcept {}
	static bool CompleteTimelinesAutomatically();
	static void CompleteTimelinesAutomatically(bool value);
	static void SetHost(Windows::UI::Xaml::Hosting::IXamlUIPresenterHost const & host);
	static void NotifyWindowSizeChanged();
	static Windows::Foundation::Rect GetFlyoutPlacementTargetInfo(Windows::UI::Xaml::FrameworkElement const & placementTarget, Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode preferredPlacement, Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode & targetPreferredPlacement, bool & allowFallbacks);
	static Windows::Foundation::Rect GetFlyoutPlacement(Windows::Foundation::Rect const & placementTargetBounds, Windows::Foundation::Size const & controlSize, Windows::Foundation::Size const & minControlSize, Windows::Foundation::Rect const & containerRect, Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode targetPreferredPlacement, bool allowFallbacks, Windows::UI::Xaml::Controls::Primitives::FlyoutPlacementMode & chosenPlacement);
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Input {

struct Pointer :
	Windows::UI::Xaml::Input::IPointer
{
	Pointer(std::nullptr_t) noexcept {}
};

struct DoubleTappedRoutedEventArgs :
	Windows::UI::Xaml::Input::IDoubleTappedRoutedEventArgs,
	Bases<DoubleTappedRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<DoubleTappedRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	DoubleTappedRoutedEventArgs(std::nullptr_t) noexcept {}
	DoubleTappedRoutedEventArgs();
};

struct FocusManager :
	Windows::UI::Xaml::Input::IFocusManager
{
	FocusManager(std::nullptr_t) noexcept {}
	static bool TryMoveFocus(Windows::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection);
	static IInspectable GetFocusedElement();
};

struct HoldingRoutedEventArgs :
	Windows::UI::Xaml::Input::IHoldingRoutedEventArgs,
	Bases<HoldingRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<HoldingRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	HoldingRoutedEventArgs(std::nullptr_t) noexcept {}
	HoldingRoutedEventArgs();
};

struct InertiaExpansionBehavior :
	Windows::UI::Xaml::Input::IInertiaExpansionBehavior
{
	InertiaExpansionBehavior(std::nullptr_t) noexcept {}
};

struct InertiaRotationBehavior :
	Windows::UI::Xaml::Input::IInertiaRotationBehavior
{
	InertiaRotationBehavior(std::nullptr_t) noexcept {}
};

struct InertiaTranslationBehavior :
	Windows::UI::Xaml::Input::IInertiaTranslationBehavior
{
	InertiaTranslationBehavior(std::nullptr_t) noexcept {}
};

struct InputScope :
	Windows::UI::Xaml::Input::IInputScope,
	Bases<InputScope, Windows::UI::Xaml::DependencyObject>,
	Requires<InputScope, Windows::UI::Xaml::IDependencyObject>
{
	InputScope(std::nullptr_t) noexcept {}
	InputScope();
};

struct InputScopeName :
	Windows::UI::Xaml::Input::IInputScopeName,
	Bases<InputScopeName, Windows::UI::Xaml::DependencyObject>,
	Requires<InputScopeName, Windows::UI::Xaml::IDependencyObject>
{
	InputScopeName(std::nullptr_t) noexcept {}
	InputScopeName();
	InputScopeName(Windows::UI::Xaml::Input::InputScopeNameValue nameValue);
};

struct KeyRoutedEventArgs :
	Windows::UI::Xaml::Input::IKeyRoutedEventArgs,
	Bases<KeyRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<KeyRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	KeyRoutedEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationCompletedRoutedEventArgs :
	Windows::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs,
	Bases<ManipulationCompletedRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<ManipulationCompletedRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	ManipulationCompletedRoutedEventArgs(std::nullptr_t) noexcept {}
	ManipulationCompletedRoutedEventArgs();
};

struct ManipulationDeltaRoutedEventArgs :
	Windows::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs,
	Bases<ManipulationDeltaRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<ManipulationDeltaRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	ManipulationDeltaRoutedEventArgs(std::nullptr_t) noexcept {}
	ManipulationDeltaRoutedEventArgs();
};

struct ManipulationInertiaStartingRoutedEventArgs :
	Windows::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs,
	Bases<ManipulationInertiaStartingRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<ManipulationInertiaStartingRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	ManipulationInertiaStartingRoutedEventArgs(std::nullptr_t) noexcept {}
	ManipulationInertiaStartingRoutedEventArgs();
};

struct ManipulationPivot :
	Windows::UI::Xaml::Input::IManipulationPivot
{
	ManipulationPivot(std::nullptr_t) noexcept {}
	ManipulationPivot();
	ManipulationPivot(Windows::Foundation::Point const & center, double radius);
};

struct ManipulationStartedRoutedEventArgs :
	Windows::UI::Xaml::Input::IManipulationStartedRoutedEventArgs,
	Bases<ManipulationStartedRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<ManipulationStartedRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	ManipulationStartedRoutedEventArgs(std::nullptr_t) noexcept {}
	ManipulationStartedRoutedEventArgs();
};

struct ManipulationStartingRoutedEventArgs :
	Windows::UI::Xaml::Input::IManipulationStartingRoutedEventArgs,
	Bases<ManipulationStartingRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<ManipulationStartingRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	ManipulationStartingRoutedEventArgs(std::nullptr_t) noexcept {}
	ManipulationStartingRoutedEventArgs();
};

struct PointerRoutedEventArgs :
	Windows::UI::Xaml::Input::IPointerRoutedEventArgs,
	Bases<PointerRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<PointerRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	PointerRoutedEventArgs(std::nullptr_t) noexcept {}
};

struct RightTappedRoutedEventArgs :
	Windows::UI::Xaml::Input::IRightTappedRoutedEventArgs,
	Bases<RightTappedRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<RightTappedRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	RightTappedRoutedEventArgs(std::nullptr_t) noexcept {}
	RightTappedRoutedEventArgs();
};

struct TappedRoutedEventArgs :
	Windows::UI::Xaml::Input::ITappedRoutedEventArgs,
	Bases<TappedRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<TappedRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	TappedRoutedEventArgs(std::nullptr_t) noexcept {}
	TappedRoutedEventArgs();
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Interop {

struct NotifyCollectionChangedEventArgs :
	Windows::UI::Xaml::Interop::INotifyCollectionChangedEventArgs
{
	NotifyCollectionChangedEventArgs(std::nullptr_t) noexcept {}
	NotifyCollectionChangedEventArgs(Windows::UI::Xaml::Interop::NotifyCollectionChangedAction action, Windows::UI::Xaml::Interop::IBindableVector const & newItems, Windows::UI::Xaml::Interop::IBindableVector const & oldItems, int newIndex, int oldIndex);
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Markup {

struct XamlReader :
	Windows::UI::Xaml::Markup::IXamlReader
{
	XamlReader(std::nullptr_t) noexcept {}
	static IInspectable Load(String const & xaml);
	template <unsigned S0> static IInspectable Load(wchar_t const (&xaml)[S0]);
	static IInspectable LoadWithInitialTemplateValidation(String const & xaml);
	template <unsigned S0> static IInspectable LoadWithInitialTemplateValidation(wchar_t const (&xaml)[S0]);
};

struct XamlBinaryWriter :
	Windows::UI::Xaml::Markup::IXamlBinaryWriter
{
	XamlBinaryWriter(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Markup::XamlBinaryWriterErrorInformation Write(Windows::Foundation::Collections::IVector<Windows::Storage::Streams::IRandomAccessStream> const & inputStreams, Windows::Foundation::Collections::IVector<Windows::Storage::Streams::IRandomAccessStream> const & outputStreams, Windows::UI::Xaml::Markup::IXamlMetadataProvider const & xamlMetadataProvider);
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media {

struct MatrixHelper :
	Windows::UI::Xaml::Media::IMatrixHelper
{
	MatrixHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Media::Matrix Identity();
	static Windows::UI::Xaml::Media::Matrix FromElements(double m11, double m12, double m21, double m22, double offsetX, double offsetY);
	static bool GetIsIdentity(Windows::UI::Xaml::Media::Matrix const & target);
	static Windows::Foundation::Point Transform(Windows::UI::Xaml::Media::Matrix const & target, Windows::Foundation::Point const & point);
};

struct Brush :
	Windows::UI::Xaml::Media::IBrush,
	Bases<Brush, Windows::UI::Xaml::DependencyObject>,
	Requires<Brush, Windows::UI::Xaml::IDependencyObject>
{
	Brush(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty OpacityProperty();
	static Windows::UI::Xaml::DependencyProperty TransformProperty();
	static Windows::UI::Xaml::DependencyProperty RelativeTransformProperty();
};

struct CacheMode :
	Windows::UI::Xaml::Media::ICacheMode,
	Bases<CacheMode, Windows::UI::Xaml::DependencyObject>,
	Requires<CacheMode, Windows::UI::Xaml::IDependencyObject>
{
	CacheMode(std::nullptr_t) noexcept {}
};

struct BitmapCache :
	Windows::UI::Xaml::Media::IBitmapCache,
	Bases<BitmapCache, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::CacheMode>,
	Requires<BitmapCache, Windows::UI::Xaml::Media::ICacheMode, Windows::UI::Xaml::IDependencyObject>
{
	BitmapCache(std::nullptr_t) noexcept {}
	BitmapCache();
};

struct DoubleCollection :
	Windows::Foundation::Collections::IVector<double>
{
	DoubleCollection(std::nullptr_t) noexcept {}
	DoubleCollection();
};

struct FontFamily :
	Windows::UI::Xaml::Media::IFontFamily
{
	FontFamily(std::nullptr_t) noexcept {}
	FontFamily(String const & familyName);
	template <unsigned S0> FontFamily(wchar_t const (&familyName)[S0]);
};

struct GeneralTransform :
	Windows::UI::Xaml::Media::IGeneralTransform,
	Bases<GeneralTransform, Windows::UI::Xaml::DependencyObject>,
	Requires<GeneralTransform, Windows::UI::Xaml::Media::IGeneralTransformOverrides, Windows::UI::Xaml::IDependencyObject>
{
	GeneralTransform(std::nullptr_t) noexcept {}
};

struct Geometry :
	Windows::UI::Xaml::Media::IGeometry,
	Bases<Geometry, Windows::UI::Xaml::DependencyObject>,
	Requires<Geometry, Windows::UI::Xaml::IDependencyObject>
{
	Geometry(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Media::Geometry Empty();
	static double StandardFlatteningTolerance();
	static Windows::UI::Xaml::DependencyProperty TransformProperty();
};

struct EllipseGeometry :
	Windows::UI::Xaml::Media::IEllipseGeometry,
	Bases<EllipseGeometry, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Geometry>,
	Requires<EllipseGeometry, Windows::UI::Xaml::Media::IGeometry, Windows::UI::Xaml::IDependencyObject>
{
	EllipseGeometry(std::nullptr_t) noexcept {}
	EllipseGeometry();
	static Windows::UI::Xaml::DependencyProperty CenterProperty();
	static Windows::UI::Xaml::DependencyProperty RadiusXProperty();
	static Windows::UI::Xaml::DependencyProperty RadiusYProperty();
};

struct GeometryCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Geometry>
{
	GeometryCollection(std::nullptr_t) noexcept {}
	GeometryCollection();
};

struct GeometryGroup :
	Windows::UI::Xaml::Media::IGeometryGroup,
	Bases<GeometryGroup, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Geometry>,
	Requires<GeometryGroup, Windows::UI::Xaml::Media::IGeometry, Windows::UI::Xaml::IDependencyObject>
{
	GeometryGroup(std::nullptr_t) noexcept {}
	GeometryGroup();
	static Windows::UI::Xaml::DependencyProperty FillRuleProperty();
	static Windows::UI::Xaml::DependencyProperty ChildrenProperty();
};

struct GradientStopCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::GradientStop>
{
	GradientStopCollection(std::nullptr_t) noexcept {}
	GradientStopCollection();
};

struct GradientBrush :
	Windows::UI::Xaml::Media::IGradientBrush,
	Bases<GradientBrush, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Brush>,
	Requires<GradientBrush, Windows::UI::Xaml::Media::IBrush, Windows::UI::Xaml::IDependencyObject>
{
	GradientBrush(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty SpreadMethodProperty();
	static Windows::UI::Xaml::DependencyProperty MappingModeProperty();
	static Windows::UI::Xaml::DependencyProperty ColorInterpolationModeProperty();
	static Windows::UI::Xaml::DependencyProperty GradientStopsProperty();
};

struct GradientStop :
	Windows::UI::Xaml::Media::IGradientStop,
	Bases<GradientStop, Windows::UI::Xaml::DependencyObject>,
	Requires<GradientStop, Windows::UI::Xaml::IDependencyObject>
{
	GradientStop(std::nullptr_t) noexcept {}
	GradientStop();
	static Windows::UI::Xaml::DependencyProperty ColorProperty();
	static Windows::UI::Xaml::DependencyProperty OffsetProperty();
};

struct ImageSource :
	Windows::UI::Xaml::Media::IImageSource,
	Bases<ImageSource, Windows::UI::Xaml::DependencyObject>,
	Requires<ImageSource, Windows::UI::Xaml::IDependencyObject>
{
	ImageSource(std::nullptr_t) noexcept {}
};

struct LinearGradientBrush :
	Windows::UI::Xaml::Media::ILinearGradientBrush,
	Bases<LinearGradientBrush, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Brush, Windows::UI::Xaml::Media::GradientBrush>,
	Requires<LinearGradientBrush, Windows::UI::Xaml::Media::IBrush, Windows::UI::Xaml::Media::IGradientBrush, Windows::UI::Xaml::IDependencyObject>
{
	LinearGradientBrush(std::nullptr_t) noexcept {}
	LinearGradientBrush();
	LinearGradientBrush(Windows::UI::Xaml::Media::GradientStopCollection const & gradientStopCollection, double angle);
	static Windows::UI::Xaml::DependencyProperty StartPointProperty();
	static Windows::UI::Xaml::DependencyProperty EndPointProperty();
};

struct LineGeometry :
	Windows::UI::Xaml::Media::ILineGeometry,
	Bases<LineGeometry, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Geometry>,
	Requires<LineGeometry, Windows::UI::Xaml::Media::IGeometry, Windows::UI::Xaml::IDependencyObject>
{
	LineGeometry(std::nullptr_t) noexcept {}
	LineGeometry();
	static Windows::UI::Xaml::DependencyProperty StartPointProperty();
	static Windows::UI::Xaml::DependencyProperty EndPointProperty();
};

struct PathSegmentCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::PathSegment>
{
	PathSegmentCollection(std::nullptr_t) noexcept {}
	PathSegmentCollection();
};

struct PathFigure :
	Windows::UI::Xaml::Media::IPathFigure,
	Bases<PathFigure, Windows::UI::Xaml::DependencyObject>,
	Requires<PathFigure, Windows::UI::Xaml::IDependencyObject>
{
	PathFigure(std::nullptr_t) noexcept {}
	PathFigure();
	static Windows::UI::Xaml::DependencyProperty SegmentsProperty();
	static Windows::UI::Xaml::DependencyProperty StartPointProperty();
	static Windows::UI::Xaml::DependencyProperty IsClosedProperty();
	static Windows::UI::Xaml::DependencyProperty IsFilledProperty();
};

struct PathFigureCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::PathFigure>
{
	PathFigureCollection(std::nullptr_t) noexcept {}
	PathFigureCollection();
};

struct PathGeometry :
	Windows::UI::Xaml::Media::IPathGeometry,
	Bases<PathGeometry, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Geometry>,
	Requires<PathGeometry, Windows::UI::Xaml::Media::IGeometry, Windows::UI::Xaml::IDependencyObject>
{
	PathGeometry(std::nullptr_t) noexcept {}
	PathGeometry();
	static Windows::UI::Xaml::DependencyProperty FillRuleProperty();
	static Windows::UI::Xaml::DependencyProperty FiguresProperty();
};

struct PathSegment :
	Windows::UI::Xaml::Media::IPathSegment,
	Bases<PathSegment, Windows::UI::Xaml::DependencyObject>,
	Requires<PathSegment, Windows::UI::Xaml::IDependencyObject>
{
	PathSegment(std::nullptr_t) noexcept {}
};

struct ArcSegment :
	Windows::UI::Xaml::Media::IArcSegment,
	Bases<ArcSegment, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::PathSegment>,
	Requires<ArcSegment, Windows::UI::Xaml::Media::IPathSegment, Windows::UI::Xaml::IDependencyObject>
{
	ArcSegment(std::nullptr_t) noexcept {}
	ArcSegment();
	static Windows::UI::Xaml::DependencyProperty PointProperty();
	static Windows::UI::Xaml::DependencyProperty SizeProperty();
	static Windows::UI::Xaml::DependencyProperty RotationAngleProperty();
	static Windows::UI::Xaml::DependencyProperty IsLargeArcProperty();
	static Windows::UI::Xaml::DependencyProperty SweepDirectionProperty();
};

struct BezierSegment :
	Windows::UI::Xaml::Media::IBezierSegment,
	Bases<BezierSegment, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::PathSegment>,
	Requires<BezierSegment, Windows::UI::Xaml::Media::IPathSegment, Windows::UI::Xaml::IDependencyObject>
{
	BezierSegment(std::nullptr_t) noexcept {}
	BezierSegment();
	static Windows::UI::Xaml::DependencyProperty Point1Property();
	static Windows::UI::Xaml::DependencyProperty Point2Property();
	static Windows::UI::Xaml::DependencyProperty Point3Property();
};

struct LineSegment :
	Windows::UI::Xaml::Media::ILineSegment,
	Bases<LineSegment, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::PathSegment>,
	Requires<LineSegment, Windows::UI::Xaml::Media::IPathSegment, Windows::UI::Xaml::IDependencyObject>
{
	LineSegment(std::nullptr_t) noexcept {}
	LineSegment();
	static Windows::UI::Xaml::DependencyProperty PointProperty();
};

struct PointCollection :
	Windows::Foundation::Collections::IVector<Modern::Windows::Foundation::Point>
{
	PointCollection(std::nullptr_t) noexcept {}
	PointCollection();
};

struct PolyBezierSegment :
	Windows::UI::Xaml::Media::IPolyBezierSegment,
	Bases<PolyBezierSegment, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::PathSegment>,
	Requires<PolyBezierSegment, Windows::UI::Xaml::Media::IPathSegment, Windows::UI::Xaml::IDependencyObject>
{
	PolyBezierSegment(std::nullptr_t) noexcept {}
	PolyBezierSegment();
	static Windows::UI::Xaml::DependencyProperty PointsProperty();
};

struct PolyLineSegment :
	Windows::UI::Xaml::Media::IPolyLineSegment,
	Bases<PolyLineSegment, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::PathSegment>,
	Requires<PolyLineSegment, Windows::UI::Xaml::Media::IPathSegment, Windows::UI::Xaml::IDependencyObject>
{
	PolyLineSegment(std::nullptr_t) noexcept {}
	PolyLineSegment();
	static Windows::UI::Xaml::DependencyProperty PointsProperty();
};

struct PolyQuadraticBezierSegment :
	Windows::UI::Xaml::Media::IPolyQuadraticBezierSegment,
	Bases<PolyQuadraticBezierSegment, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::PathSegment>,
	Requires<PolyQuadraticBezierSegment, Windows::UI::Xaml::Media::IPathSegment, Windows::UI::Xaml::IDependencyObject>
{
	PolyQuadraticBezierSegment(std::nullptr_t) noexcept {}
	PolyQuadraticBezierSegment();
	static Windows::UI::Xaml::DependencyProperty PointsProperty();
};

struct Projection :
	Windows::UI::Xaml::Media::IProjection,
	Bases<Projection, Windows::UI::Xaml::DependencyObject>,
	Requires<Projection, Windows::UI::Xaml::IDependencyObject>
{
	Projection(std::nullptr_t) noexcept {}
};

struct Matrix3DProjection :
	Windows::UI::Xaml::Media::IMatrix3DProjection,
	Bases<Matrix3DProjection, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Projection>,
	Requires<Matrix3DProjection, Windows::UI::Xaml::Media::IProjection, Windows::UI::Xaml::IDependencyObject>
{
	Matrix3DProjection(std::nullptr_t) noexcept {}
	Matrix3DProjection();
	static Windows::UI::Xaml::DependencyProperty ProjectionMatrixProperty();
};

struct PlaneProjection :
	Windows::UI::Xaml::Media::IPlaneProjection,
	Bases<PlaneProjection, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Projection>,
	Requires<PlaneProjection, Windows::UI::Xaml::Media::IProjection, Windows::UI::Xaml::IDependencyObject>
{
	PlaneProjection(std::nullptr_t) noexcept {}
	PlaneProjection();
	static Windows::UI::Xaml::DependencyProperty LocalOffsetXProperty();
	static Windows::UI::Xaml::DependencyProperty LocalOffsetYProperty();
	static Windows::UI::Xaml::DependencyProperty LocalOffsetZProperty();
	static Windows::UI::Xaml::DependencyProperty RotationXProperty();
	static Windows::UI::Xaml::DependencyProperty RotationYProperty();
	static Windows::UI::Xaml::DependencyProperty RotationZProperty();
	static Windows::UI::Xaml::DependencyProperty CenterOfRotationXProperty();
	static Windows::UI::Xaml::DependencyProperty CenterOfRotationYProperty();
	static Windows::UI::Xaml::DependencyProperty CenterOfRotationZProperty();
	static Windows::UI::Xaml::DependencyProperty GlobalOffsetXProperty();
	static Windows::UI::Xaml::DependencyProperty GlobalOffsetYProperty();
	static Windows::UI::Xaml::DependencyProperty GlobalOffsetZProperty();
	static Windows::UI::Xaml::DependencyProperty ProjectionMatrixProperty();
};

struct QuadraticBezierSegment :
	Windows::UI::Xaml::Media::IQuadraticBezierSegment,
	Bases<QuadraticBezierSegment, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::PathSegment>,
	Requires<QuadraticBezierSegment, Windows::UI::Xaml::Media::IPathSegment, Windows::UI::Xaml::IDependencyObject>
{
	QuadraticBezierSegment(std::nullptr_t) noexcept {}
	QuadraticBezierSegment();
	static Windows::UI::Xaml::DependencyProperty Point1Property();
	static Windows::UI::Xaml::DependencyProperty Point2Property();
};

struct RateChangedRoutedEventArgs :
	Windows::UI::Xaml::Media::IRateChangedRoutedEventArgs,
	Bases<RateChangedRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<RateChangedRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	RateChangedRoutedEventArgs(std::nullptr_t) noexcept {}
	RateChangedRoutedEventArgs();
};

struct RectangleGeometry :
	Windows::UI::Xaml::Media::IRectangleGeometry,
	Bases<RectangleGeometry, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Geometry>,
	Requires<RectangleGeometry, Windows::UI::Xaml::Media::IGeometry, Windows::UI::Xaml::IDependencyObject>
{
	RectangleGeometry(std::nullptr_t) noexcept {}
	RectangleGeometry();
	static Windows::UI::Xaml::DependencyProperty RectProperty();
};

struct RenderingEventArgs :
	Windows::UI::Xaml::Media::IRenderingEventArgs
{
	RenderingEventArgs(std::nullptr_t) noexcept {}
};

struct SolidColorBrush :
	Windows::UI::Xaml::Media::ISolidColorBrush,
	Bases<SolidColorBrush, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Brush>,
	Requires<SolidColorBrush, Windows::UI::Xaml::Media::IBrush, Windows::UI::Xaml::IDependencyObject>
{
	SolidColorBrush(std::nullptr_t) noexcept {}
	SolidColorBrush();
	SolidColorBrush(Windows::UI::Color const & color);
	static Windows::UI::Xaml::DependencyProperty ColorProperty();
};

struct TileBrush :
	Windows::UI::Xaml::Media::ITileBrush,
	Bases<TileBrush, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Brush>,
	Requires<TileBrush, Windows::UI::Xaml::Media::IBrush, Windows::UI::Xaml::IDependencyObject>
{
	TileBrush(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty AlignmentXProperty();
	static Windows::UI::Xaml::DependencyProperty AlignmentYProperty();
	static Windows::UI::Xaml::DependencyProperty StretchProperty();
};

struct ImageBrush :
	Windows::UI::Xaml::Media::IImageBrush,
	Bases<ImageBrush, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Brush, Windows::UI::Xaml::Media::TileBrush>,
	Requires<ImageBrush, Windows::UI::Xaml::Media::IBrush, Windows::UI::Xaml::Media::ITileBrush, Windows::UI::Xaml::IDependencyObject>
{
	ImageBrush(std::nullptr_t) noexcept {}
	ImageBrush();
	static Windows::UI::Xaml::DependencyProperty ImageSourceProperty();
};

struct TimelineMarker :
	Windows::UI::Xaml::Media::ITimelineMarker,
	Bases<TimelineMarker, Windows::UI::Xaml::DependencyObject>,
	Requires<TimelineMarker, Windows::UI::Xaml::IDependencyObject>
{
	TimelineMarker(std::nullptr_t) noexcept {}
	TimelineMarker();
	static Windows::UI::Xaml::DependencyProperty TimeProperty();
	static Windows::UI::Xaml::DependencyProperty TypeProperty();
	static Windows::UI::Xaml::DependencyProperty TextProperty();
};

struct TimelineMarkerCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::TimelineMarker>
{
	TimelineMarkerCollection(std::nullptr_t) noexcept {}
	TimelineMarkerCollection();
};

struct TimelineMarkerRoutedEventArgs :
	Windows::UI::Xaml::Media::ITimelineMarkerRoutedEventArgs,
	Bases<TimelineMarkerRoutedEventArgs, Windows::UI::Xaml::RoutedEventArgs>,
	Requires<TimelineMarkerRoutedEventArgs, Windows::UI::Xaml::IRoutedEventArgs>
{
	TimelineMarkerRoutedEventArgs(std::nullptr_t) noexcept {}
	TimelineMarkerRoutedEventArgs();
};

struct Transform :
	Windows::UI::Xaml::Media::ITransform,
	Bases<Transform, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::GeneralTransform>,
	Requires<Transform, Windows::UI::Xaml::Media::IGeneralTransform, Windows::UI::Xaml::Media::IGeneralTransformOverrides, Windows::UI::Xaml::IDependencyObject>
{
	Transform(std::nullptr_t) noexcept {}
};

struct CompositeTransform :
	Windows::UI::Xaml::Media::ICompositeTransform,
	Bases<CompositeTransform, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::GeneralTransform, Windows::UI::Xaml::Media::Transform>,
	Requires<CompositeTransform, Windows::UI::Xaml::Media::IGeneralTransform, Windows::UI::Xaml::Media::IGeneralTransformOverrides, Windows::UI::Xaml::Media::ITransform, Windows::UI::Xaml::IDependencyObject>
{
	CompositeTransform(std::nullptr_t) noexcept {}
	CompositeTransform();
	static Windows::UI::Xaml::DependencyProperty CenterXProperty();
	static Windows::UI::Xaml::DependencyProperty CenterYProperty();
	static Windows::UI::Xaml::DependencyProperty ScaleXProperty();
	static Windows::UI::Xaml::DependencyProperty ScaleYProperty();
	static Windows::UI::Xaml::DependencyProperty SkewXProperty();
	static Windows::UI::Xaml::DependencyProperty SkewYProperty();
	static Windows::UI::Xaml::DependencyProperty RotationProperty();
	static Windows::UI::Xaml::DependencyProperty TranslateXProperty();
	static Windows::UI::Xaml::DependencyProperty TranslateYProperty();
};

struct MatrixTransform :
	Windows::UI::Xaml::Media::IMatrixTransform,
	Bases<MatrixTransform, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::GeneralTransform, Windows::UI::Xaml::Media::Transform>,
	Requires<MatrixTransform, Windows::UI::Xaml::Media::IGeneralTransform, Windows::UI::Xaml::Media::IGeneralTransformOverrides, Windows::UI::Xaml::Media::ITransform, Windows::UI::Xaml::IDependencyObject>
{
	MatrixTransform(std::nullptr_t) noexcept {}
	MatrixTransform();
	static Windows::UI::Xaml::DependencyProperty MatrixProperty();
};

struct RotateTransform :
	Windows::UI::Xaml::Media::IRotateTransform,
	Bases<RotateTransform, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::GeneralTransform, Windows::UI::Xaml::Media::Transform>,
	Requires<RotateTransform, Windows::UI::Xaml::Media::IGeneralTransform, Windows::UI::Xaml::Media::IGeneralTransformOverrides, Windows::UI::Xaml::Media::ITransform, Windows::UI::Xaml::IDependencyObject>
{
	RotateTransform(std::nullptr_t) noexcept {}
	RotateTransform();
	static Windows::UI::Xaml::DependencyProperty CenterXProperty();
	static Windows::UI::Xaml::DependencyProperty CenterYProperty();
	static Windows::UI::Xaml::DependencyProperty AngleProperty();
};

struct ScaleTransform :
	Windows::UI::Xaml::Media::IScaleTransform,
	Bases<ScaleTransform, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::GeneralTransform, Windows::UI::Xaml::Media::Transform>,
	Requires<ScaleTransform, Windows::UI::Xaml::Media::IGeneralTransform, Windows::UI::Xaml::Media::IGeneralTransformOverrides, Windows::UI::Xaml::Media::ITransform, Windows::UI::Xaml::IDependencyObject>
{
	ScaleTransform(std::nullptr_t) noexcept {}
	ScaleTransform();
	static Windows::UI::Xaml::DependencyProperty CenterXProperty();
	static Windows::UI::Xaml::DependencyProperty CenterYProperty();
	static Windows::UI::Xaml::DependencyProperty ScaleXProperty();
	static Windows::UI::Xaml::DependencyProperty ScaleYProperty();
};

struct SkewTransform :
	Windows::UI::Xaml::Media::ISkewTransform,
	Bases<SkewTransform, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::GeneralTransform, Windows::UI::Xaml::Media::Transform>,
	Requires<SkewTransform, Windows::UI::Xaml::Media::IGeneralTransform, Windows::UI::Xaml::Media::IGeneralTransformOverrides, Windows::UI::Xaml::Media::ITransform, Windows::UI::Xaml::IDependencyObject>
{
	SkewTransform(std::nullptr_t) noexcept {}
	SkewTransform();
	static Windows::UI::Xaml::DependencyProperty CenterXProperty();
	static Windows::UI::Xaml::DependencyProperty CenterYProperty();
	static Windows::UI::Xaml::DependencyProperty AngleXProperty();
	static Windows::UI::Xaml::DependencyProperty AngleYProperty();
};

struct TransformCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Transform>
{
	TransformCollection(std::nullptr_t) noexcept {}
	TransformCollection();
};

struct TransformGroup :
	Windows::UI::Xaml::Media::ITransformGroup,
	Bases<TransformGroup, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::GeneralTransform, Windows::UI::Xaml::Media::Transform>,
	Requires<TransformGroup, Windows::UI::Xaml::Media::IGeneralTransform, Windows::UI::Xaml::Media::IGeneralTransformOverrides, Windows::UI::Xaml::Media::ITransform, Windows::UI::Xaml::IDependencyObject>
{
	TransformGroup(std::nullptr_t) noexcept {}
	TransformGroup();
	static Windows::UI::Xaml::DependencyProperty ChildrenProperty();
};

struct TranslateTransform :
	Windows::UI::Xaml::Media::ITranslateTransform,
	Bases<TranslateTransform, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::GeneralTransform, Windows::UI::Xaml::Media::Transform>,
	Requires<TranslateTransform, Windows::UI::Xaml::Media::IGeneralTransform, Windows::UI::Xaml::Media::IGeneralTransformOverrides, Windows::UI::Xaml::Media::ITransform, Windows::UI::Xaml::IDependencyObject>
{
	TranslateTransform(std::nullptr_t) noexcept {}
	TranslateTransform();
	static Windows::UI::Xaml::DependencyProperty XProperty();
	static Windows::UI::Xaml::DependencyProperty YProperty();
};

struct VisualTreeHelper :
	Windows::UI::Xaml::Media::IVisualTreeHelper
{
	VisualTreeHelper(std::nullptr_t) noexcept {}
	static Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Controls::Primitives::Popup> GetOpenPopups(Windows::UI::Xaml::Window const & window);
	static Windows::Foundation::Collections::IIterable<Windows::UI::Xaml::UIElement> FindElementsInHostCoordinates(Windows::Foundation::Point const & intersectingPoint, Windows::UI::Xaml::UIElement const & subtree);
	static Windows::Foundation::Collections::IIterable<Windows::UI::Xaml::UIElement> FindElementsInHostCoordinates(Windows::Foundation::Rect const & intersectingRect, Windows::UI::Xaml::UIElement const & subtree);
	static Windows::Foundation::Collections::IIterable<Windows::UI::Xaml::UIElement> FindElementsInHostCoordinates(Windows::Foundation::Point const & intersectingPoint, Windows::UI::Xaml::UIElement const & subtree, bool includeAllElements);
	static Windows::Foundation::Collections::IIterable<Windows::UI::Xaml::UIElement> FindElementsInHostCoordinates(Windows::Foundation::Rect const & intersectingRect, Windows::UI::Xaml::UIElement const & subtree, bool includeAllElements);
	static Windows::UI::Xaml::DependencyObject GetChild(Windows::UI::Xaml::DependencyObject const & reference, int childIndex);
	static int GetChildrenCount(Windows::UI::Xaml::DependencyObject const & reference);
	static Windows::UI::Xaml::DependencyObject GetParent(Windows::UI::Xaml::DependencyObject const & reference);
	static void DisconnectChildrenRecursive(Windows::UI::Xaml::UIElement const & element);
};

struct CompositionTarget :
	Windows::UI::Xaml::Media::ICompositionTarget
{
	CompositionTarget(std::nullptr_t) noexcept {}
	static EventRegistrationToken Rendering(Windows::Foundation::IEventHandler<IInspectable> const & value);
	template <typename F> static EventRegistrationToken Rendering(F value);
	static void Rendering(EventRegistrationToken token);
	static EventRegistrationToken SurfaceContentsLost(Windows::Foundation::IEventHandler<IInspectable> const & value);
	template <typename F> static EventRegistrationToken SurfaceContentsLost(F value);
	static void SurfaceContentsLost(EventRegistrationToken token);
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Animation {

struct KeyTimeHelper :
	Windows::UI::Xaml::Media::Animation::IKeyTimeHelper
{
	KeyTimeHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Media::Animation::KeyTime FromTimeSpan(Windows::Foundation::TimeSpan const & timeSpan);
};

struct RepeatBehaviorHelper :
	Windows::UI::Xaml::Media::Animation::IRepeatBehaviorHelper
{
	RepeatBehaviorHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Media::Animation::RepeatBehavior Forever();
	static Windows::UI::Xaml::Media::Animation::RepeatBehavior FromCount(double count);
	static Windows::UI::Xaml::Media::Animation::RepeatBehavior FromDuration(Windows::Foundation::TimeSpan const & duration);
	static bool GetHasCount(Windows::UI::Xaml::Media::Animation::RepeatBehavior const & target);
	static bool GetHasDuration(Windows::UI::Xaml::Media::Animation::RepeatBehavior const & target);
	static bool Equals(Windows::UI::Xaml::Media::Animation::RepeatBehavior const & target, Windows::UI::Xaml::Media::Animation::RepeatBehavior const & value);
};

struct TransitionCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>
{
	TransitionCollection(std::nullptr_t) noexcept {}
	TransitionCollection();
};

struct BeginStoryboard :
	Windows::UI::Xaml::Media::Animation::IBeginStoryboard,
	Bases<BeginStoryboard, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::TriggerAction>,
	Requires<BeginStoryboard, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::ITriggerAction>
{
	BeginStoryboard(std::nullptr_t) noexcept {}
	BeginStoryboard();
	static Windows::UI::Xaml::DependencyProperty StoryboardProperty();
};

struct ColorKeyFrameCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::ColorKeyFrame>
{
	ColorKeyFrameCollection(std::nullptr_t) noexcept {}
	ColorKeyFrameCollection();
};

struct ColorKeyFrame :
	Windows::UI::Xaml::Media::Animation::IColorKeyFrame,
	Bases<ColorKeyFrame, Windows::UI::Xaml::DependencyObject>,
	Requires<ColorKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	ColorKeyFrame(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty ValueProperty();
	static Windows::UI::Xaml::DependencyProperty KeyTimeProperty();
};

struct DiscreteColorKeyFrame :
	Windows::UI::Xaml::Media::Animation::IDiscreteColorKeyFrame,
	Bases<DiscreteColorKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::ColorKeyFrame>,
	Requires<DiscreteColorKeyFrame, Windows::UI::Xaml::Media::Animation::IColorKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	DiscreteColorKeyFrame(std::nullptr_t) noexcept {}
	DiscreteColorKeyFrame();
};

struct DoubleKeyFrameCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::DoubleKeyFrame>
{
	DoubleKeyFrameCollection(std::nullptr_t) noexcept {}
	DoubleKeyFrameCollection();
};

struct DoubleKeyFrame :
	Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame,
	Bases<DoubleKeyFrame, Windows::UI::Xaml::DependencyObject>,
	Requires<DoubleKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	DoubleKeyFrame(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty ValueProperty();
	static Windows::UI::Xaml::DependencyProperty KeyTimeProperty();
};

struct DiscreteDoubleKeyFrame :
	Windows::UI::Xaml::Media::Animation::IDiscreteDoubleKeyFrame,
	Bases<DiscreteDoubleKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::DoubleKeyFrame>,
	Requires<DiscreteDoubleKeyFrame, Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	DiscreteDoubleKeyFrame(std::nullptr_t) noexcept {}
	DiscreteDoubleKeyFrame();
};

struct EasingColorKeyFrame :
	Windows::UI::Xaml::Media::Animation::IEasingColorKeyFrame,
	Bases<EasingColorKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::ColorKeyFrame>,
	Requires<EasingColorKeyFrame, Windows::UI::Xaml::Media::Animation::IColorKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	EasingColorKeyFrame(std::nullptr_t) noexcept {}
	EasingColorKeyFrame();
	static Windows::UI::Xaml::DependencyProperty EasingFunctionProperty();
};

struct EasingDoubleKeyFrame :
	Windows::UI::Xaml::Media::Animation::IEasingDoubleKeyFrame,
	Bases<EasingDoubleKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::DoubleKeyFrame>,
	Requires<EasingDoubleKeyFrame, Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	EasingDoubleKeyFrame(std::nullptr_t) noexcept {}
	EasingDoubleKeyFrame();
	static Windows::UI::Xaml::DependencyProperty EasingFunctionProperty();
};

struct EasingFunctionBase :
	Windows::UI::Xaml::Media::Animation::IEasingFunctionBase,
	Bases<EasingFunctionBase, Windows::UI::Xaml::DependencyObject>,
	Requires<EasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	EasingFunctionBase(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty EasingModeProperty();
};

struct BackEase :
	Windows::UI::Xaml::Media::Animation::IBackEase,
	Bases<BackEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<BackEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	BackEase(std::nullptr_t) noexcept {}
	BackEase();
	static Windows::UI::Xaml::DependencyProperty AmplitudeProperty();
};

struct BounceEase :
	Windows::UI::Xaml::Media::Animation::IBounceEase,
	Bases<BounceEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<BounceEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	BounceEase(std::nullptr_t) noexcept {}
	BounceEase();
	static Windows::UI::Xaml::DependencyProperty BouncesProperty();
	static Windows::UI::Xaml::DependencyProperty BouncinessProperty();
};

struct CircleEase :
	Windows::UI::Xaml::Media::Animation::ICircleEase,
	Bases<CircleEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<CircleEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	CircleEase(std::nullptr_t) noexcept {}
	CircleEase();
};

struct CubicEase :
	Windows::UI::Xaml::Media::Animation::ICubicEase,
	Bases<CubicEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<CubicEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	CubicEase(std::nullptr_t) noexcept {}
	CubicEase();
};

struct ElasticEase :
	Windows::UI::Xaml::Media::Animation::IElasticEase,
	Bases<ElasticEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<ElasticEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	ElasticEase(std::nullptr_t) noexcept {}
	ElasticEase();
	static Windows::UI::Xaml::DependencyProperty OscillationsProperty();
	static Windows::UI::Xaml::DependencyProperty SpringinessProperty();
};

struct ExponentialEase :
	Windows::UI::Xaml::Media::Animation::IExponentialEase,
	Bases<ExponentialEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<ExponentialEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	ExponentialEase(std::nullptr_t) noexcept {}
	ExponentialEase();
	static Windows::UI::Xaml::DependencyProperty ExponentProperty();
};

struct KeySpline :
	Windows::UI::Xaml::Media::Animation::IKeySpline,
	Bases<KeySpline, Windows::UI::Xaml::DependencyObject>,
	Requires<KeySpline, Windows::UI::Xaml::IDependencyObject>
{
	KeySpline(std::nullptr_t) noexcept {}
	KeySpline();
};

struct LinearColorKeyFrame :
	Windows::UI::Xaml::Media::Animation::ILinearColorKeyFrame,
	Bases<LinearColorKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::ColorKeyFrame>,
	Requires<LinearColorKeyFrame, Windows::UI::Xaml::Media::Animation::IColorKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	LinearColorKeyFrame(std::nullptr_t) noexcept {}
	LinearColorKeyFrame();
};

struct LinearDoubleKeyFrame :
	Windows::UI::Xaml::Media::Animation::ILinearDoubleKeyFrame,
	Bases<LinearDoubleKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::DoubleKeyFrame>,
	Requires<LinearDoubleKeyFrame, Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	LinearDoubleKeyFrame(std::nullptr_t) noexcept {}
	LinearDoubleKeyFrame();
};

struct NavigationTransitionInfo :
	Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo,
	Bases<NavigationTransitionInfo, Windows::UI::Xaml::DependencyObject>,
	Requires<NavigationTransitionInfo, Windows::UI::Xaml::Media::Animation::INavigationTransitionInfoOverrides, Windows::UI::Xaml::IDependencyObject>
{
	NavigationTransitionInfo(std::nullptr_t) noexcept {}
};

struct ObjectKeyFrameCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::ObjectKeyFrame>
{
	ObjectKeyFrameCollection(std::nullptr_t) noexcept {}
	ObjectKeyFrameCollection();
};

struct ObjectKeyFrame :
	Windows::UI::Xaml::Media::Animation::IObjectKeyFrame,
	Bases<ObjectKeyFrame, Windows::UI::Xaml::DependencyObject>,
	Requires<ObjectKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	ObjectKeyFrame(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty ValueProperty();
	static Windows::UI::Xaml::DependencyProperty KeyTimeProperty();
};

struct DiscreteObjectKeyFrame :
	Windows::UI::Xaml::Media::Animation::IDiscreteObjectKeyFrame,
	Bases<DiscreteObjectKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::ObjectKeyFrame>,
	Requires<DiscreteObjectKeyFrame, Windows::UI::Xaml::Media::Animation::IObjectKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	DiscreteObjectKeyFrame(std::nullptr_t) noexcept {}
	DiscreteObjectKeyFrame();
};

struct PointKeyFrameCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::PointKeyFrame>
{
	PointKeyFrameCollection(std::nullptr_t) noexcept {}
	PointKeyFrameCollection();
};

struct PointKeyFrame :
	Windows::UI::Xaml::Media::Animation::IPointKeyFrame,
	Bases<PointKeyFrame, Windows::UI::Xaml::DependencyObject>,
	Requires<PointKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	PointKeyFrame(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty ValueProperty();
	static Windows::UI::Xaml::DependencyProperty KeyTimeProperty();
};

struct DiscretePointKeyFrame :
	Windows::UI::Xaml::Media::Animation::IDiscretePointKeyFrame,
	Bases<DiscretePointKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::PointKeyFrame>,
	Requires<DiscretePointKeyFrame, Windows::UI::Xaml::Media::Animation::IPointKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	DiscretePointKeyFrame(std::nullptr_t) noexcept {}
	DiscretePointKeyFrame();
};

struct EasingPointKeyFrame :
	Windows::UI::Xaml::Media::Animation::IEasingPointKeyFrame,
	Bases<EasingPointKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::PointKeyFrame>,
	Requires<EasingPointKeyFrame, Windows::UI::Xaml::Media::Animation::IPointKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	EasingPointKeyFrame(std::nullptr_t) noexcept {}
	EasingPointKeyFrame();
	static Windows::UI::Xaml::DependencyProperty EasingFunctionProperty();
};

struct LinearPointKeyFrame :
	Windows::UI::Xaml::Media::Animation::ILinearPointKeyFrame,
	Bases<LinearPointKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::PointKeyFrame>,
	Requires<LinearPointKeyFrame, Windows::UI::Xaml::Media::Animation::IPointKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	LinearPointKeyFrame(std::nullptr_t) noexcept {}
	LinearPointKeyFrame();
};

struct PowerEase :
	Windows::UI::Xaml::Media::Animation::IPowerEase,
	Bases<PowerEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<PowerEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	PowerEase(std::nullptr_t) noexcept {}
	PowerEase();
	static Windows::UI::Xaml::DependencyProperty PowerProperty();
};

struct QuadraticEase :
	Windows::UI::Xaml::Media::Animation::IQuadraticEase,
	Bases<QuadraticEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<QuadraticEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	QuadraticEase(std::nullptr_t) noexcept {}
	QuadraticEase();
};

struct QuarticEase :
	Windows::UI::Xaml::Media::Animation::IQuarticEase,
	Bases<QuarticEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<QuarticEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	QuarticEase(std::nullptr_t) noexcept {}
	QuarticEase();
};

struct QuinticEase :
	Windows::UI::Xaml::Media::Animation::IQuinticEase,
	Bases<QuinticEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<QuinticEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	QuinticEase(std::nullptr_t) noexcept {}
	QuinticEase();
};

struct SineEase :
	Windows::UI::Xaml::Media::Animation::ISineEase,
	Bases<SineEase, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::EasingFunctionBase>,
	Requires<SineEase, Windows::UI::Xaml::Media::Animation::IEasingFunctionBase, Windows::UI::Xaml::IDependencyObject>
{
	SineEase(std::nullptr_t) noexcept {}
	SineEase();
};

struct SplineColorKeyFrame :
	Windows::UI::Xaml::Media::Animation::ISplineColorKeyFrame,
	Bases<SplineColorKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::ColorKeyFrame>,
	Requires<SplineColorKeyFrame, Windows::UI::Xaml::Media::Animation::IColorKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	SplineColorKeyFrame(std::nullptr_t) noexcept {}
	SplineColorKeyFrame();
	static Windows::UI::Xaml::DependencyProperty KeySplineProperty();
};

struct SplineDoubleKeyFrame :
	Windows::UI::Xaml::Media::Animation::ISplineDoubleKeyFrame,
	Bases<SplineDoubleKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::DoubleKeyFrame>,
	Requires<SplineDoubleKeyFrame, Windows::UI::Xaml::Media::Animation::IDoubleKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	SplineDoubleKeyFrame(std::nullptr_t) noexcept {}
	SplineDoubleKeyFrame();
	static Windows::UI::Xaml::DependencyProperty KeySplineProperty();
};

struct SplinePointKeyFrame :
	Windows::UI::Xaml::Media::Animation::ISplinePointKeyFrame,
	Bases<SplinePointKeyFrame, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::PointKeyFrame>,
	Requires<SplinePointKeyFrame, Windows::UI::Xaml::Media::Animation::IPointKeyFrame, Windows::UI::Xaml::IDependencyObject>
{
	SplinePointKeyFrame(std::nullptr_t) noexcept {}
	SplinePointKeyFrame();
	static Windows::UI::Xaml::DependencyProperty KeySplineProperty();
};

struct TimelineCollection :
	Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Timeline>
{
	TimelineCollection(std::nullptr_t) noexcept {}
	TimelineCollection();
};

struct Timeline :
	Windows::UI::Xaml::Media::Animation::ITimeline,
	Bases<Timeline, Windows::UI::Xaml::DependencyObject>,
	Requires<Timeline, Windows::UI::Xaml::IDependencyObject>
{
	Timeline(std::nullptr_t) noexcept {}
	static bool AllowDependentAnimations();
	static void AllowDependentAnimations(bool value);
	static Windows::UI::Xaml::DependencyProperty AutoReverseProperty();
	static Windows::UI::Xaml::DependencyProperty BeginTimeProperty();
	static Windows::UI::Xaml::DependencyProperty DurationProperty();
	static Windows::UI::Xaml::DependencyProperty SpeedRatioProperty();
	static Windows::UI::Xaml::DependencyProperty FillBehaviorProperty();
	static Windows::UI::Xaml::DependencyProperty RepeatBehaviorProperty();
};

struct Storyboard :
	Windows::UI::Xaml::Media::Animation::IStoryboard,
	Bases<Storyboard, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<Storyboard, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	Storyboard(std::nullptr_t) noexcept {}
	Storyboard();
	static Windows::UI::Xaml::DependencyProperty TargetPropertyProperty();
	static String GetTargetProperty(Windows::UI::Xaml::Media::Animation::Timeline const & element);
	static void SetTargetProperty(Windows::UI::Xaml::Media::Animation::Timeline const & element, String const & path);
	template <unsigned S0> static void SetTargetProperty(Windows::UI::Xaml::Media::Animation::Timeline const & element, wchar_t const (&path)[S0]);
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
	static String GetTargetName(Windows::UI::Xaml::Media::Animation::Timeline const & element);
	static void SetTargetName(Windows::UI::Xaml::Media::Animation::Timeline const & element, String const & name);
	template <unsigned S0> static void SetTargetName(Windows::UI::Xaml::Media::Animation::Timeline const & element, wchar_t const (&name)[S0]);
	static void SetTarget(Windows::UI::Xaml::Media::Animation::Timeline const & timeline, Windows::UI::Xaml::DependencyObject const & target);
};

struct ColorAnimation :
	Windows::UI::Xaml::Media::Animation::IColorAnimation,
	Bases<ColorAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<ColorAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	ColorAnimation(std::nullptr_t) noexcept {}
	ColorAnimation();
	static Windows::UI::Xaml::DependencyProperty FromProperty();
	static Windows::UI::Xaml::DependencyProperty ToProperty();
	static Windows::UI::Xaml::DependencyProperty ByProperty();
	static Windows::UI::Xaml::DependencyProperty EasingFunctionProperty();
	static Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty();
};

struct ColorAnimationUsingKeyFrames :
	Windows::UI::Xaml::Media::Animation::IColorAnimationUsingKeyFrames,
	Bases<ColorAnimationUsingKeyFrames, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<ColorAnimationUsingKeyFrames, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	ColorAnimationUsingKeyFrames(std::nullptr_t) noexcept {}
	ColorAnimationUsingKeyFrames();
	static Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty();
};

struct DoubleAnimation :
	Windows::UI::Xaml::Media::Animation::IDoubleAnimation,
	Bases<DoubleAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<DoubleAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	DoubleAnimation(std::nullptr_t) noexcept {}
	DoubleAnimation();
	static Windows::UI::Xaml::DependencyProperty FromProperty();
	static Windows::UI::Xaml::DependencyProperty ToProperty();
	static Windows::UI::Xaml::DependencyProperty ByProperty();
	static Windows::UI::Xaml::DependencyProperty EasingFunctionProperty();
	static Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty();
};

struct DoubleAnimationUsingKeyFrames :
	Windows::UI::Xaml::Media::Animation::IDoubleAnimationUsingKeyFrames,
	Bases<DoubleAnimationUsingKeyFrames, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<DoubleAnimationUsingKeyFrames, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	DoubleAnimationUsingKeyFrames(std::nullptr_t) noexcept {}
	DoubleAnimationUsingKeyFrames();
	static Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty();
};

struct DragItemThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IDragItemThemeAnimation,
	Bases<DragItemThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<DragItemThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	DragItemThemeAnimation(std::nullptr_t) noexcept {}
	DragItemThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
};

struct DragOverThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IDragOverThemeAnimation,
	Bases<DragOverThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<DragOverThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	DragOverThemeAnimation(std::nullptr_t) noexcept {}
	DragOverThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty ToOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty DirectionProperty();
};

struct DropTargetItemThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IDropTargetItemThemeAnimation,
	Bases<DropTargetItemThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<DropTargetItemThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	DropTargetItemThemeAnimation(std::nullptr_t) noexcept {}
	DropTargetItemThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
};

struct FadeInThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IFadeInThemeAnimation,
	Bases<FadeInThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<FadeInThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	FadeInThemeAnimation(std::nullptr_t) noexcept {}
	FadeInThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
};

struct FadeOutThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IFadeOutThemeAnimation,
	Bases<FadeOutThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<FadeOutThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	FadeOutThemeAnimation(std::nullptr_t) noexcept {}
	FadeOutThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
};

struct ObjectAnimationUsingKeyFrames :
	Windows::UI::Xaml::Media::Animation::IObjectAnimationUsingKeyFrames,
	Bases<ObjectAnimationUsingKeyFrames, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<ObjectAnimationUsingKeyFrames, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	ObjectAnimationUsingKeyFrames(std::nullptr_t) noexcept {}
	ObjectAnimationUsingKeyFrames();
	static Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty();
};

struct PointAnimation :
	Windows::UI::Xaml::Media::Animation::IPointAnimation,
	Bases<PointAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<PointAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	PointAnimation(std::nullptr_t) noexcept {}
	PointAnimation();
	static Windows::UI::Xaml::DependencyProperty FromProperty();
	static Windows::UI::Xaml::DependencyProperty ToProperty();
	static Windows::UI::Xaml::DependencyProperty ByProperty();
	static Windows::UI::Xaml::DependencyProperty EasingFunctionProperty();
	static Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty();
};

struct PointAnimationUsingKeyFrames :
	Windows::UI::Xaml::Media::Animation::IPointAnimationUsingKeyFrames,
	Bases<PointAnimationUsingKeyFrames, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<PointAnimationUsingKeyFrames, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	PointAnimationUsingKeyFrames(std::nullptr_t) noexcept {}
	PointAnimationUsingKeyFrames();
	static Windows::UI::Xaml::DependencyProperty EnableDependentAnimationProperty();
};

struct PointerDownThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IPointerDownThemeAnimation,
	Bases<PointerDownThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<PointerDownThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	PointerDownThemeAnimation(std::nullptr_t) noexcept {}
	PointerDownThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
};

struct PointerUpThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IPointerUpThemeAnimation,
	Bases<PointerUpThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<PointerUpThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	PointerUpThemeAnimation(std::nullptr_t) noexcept {}
	PointerUpThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
};

struct PopInThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IPopInThemeAnimation,
	Bases<PopInThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<PopInThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	PopInThemeAnimation(std::nullptr_t) noexcept {}
	PopInThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty();
};

struct PopOutThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IPopOutThemeAnimation,
	Bases<PopOutThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<PopOutThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	PopOutThemeAnimation(std::nullptr_t) noexcept {}
	PopOutThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
};

struct RepositionThemeAnimation :
	Windows::UI::Xaml::Media::Animation::IRepositionThemeAnimation,
	Bases<RepositionThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<RepositionThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	RepositionThemeAnimation(std::nullptr_t) noexcept {}
	RepositionThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty();
};

struct SplitCloseThemeAnimation :
	Windows::UI::Xaml::Media::Animation::ISplitCloseThemeAnimation,
	Bases<SplitCloseThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<SplitCloseThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	SplitCloseThemeAnimation(std::nullptr_t) noexcept {}
	SplitCloseThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty OpenedTargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty OpenedTargetProperty();
	static Windows::UI::Xaml::DependencyProperty ClosedTargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty ClosedTargetProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTargetProperty();
	static Windows::UI::Xaml::DependencyProperty OpenedLengthProperty();
	static Windows::UI::Xaml::DependencyProperty ClosedLengthProperty();
	static Windows::UI::Xaml::DependencyProperty OffsetFromCenterProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTranslationDirectionProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTranslationOffsetProperty();
};

struct SplitOpenThemeAnimation :
	Windows::UI::Xaml::Media::Animation::ISplitOpenThemeAnimation,
	Bases<SplitOpenThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<SplitOpenThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	SplitOpenThemeAnimation(std::nullptr_t) noexcept {}
	SplitOpenThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty OpenedTargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty OpenedTargetProperty();
	static Windows::UI::Xaml::DependencyProperty ClosedTargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty ClosedTargetProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTargetProperty();
	static Windows::UI::Xaml::DependencyProperty OpenedLengthProperty();
	static Windows::UI::Xaml::DependencyProperty ClosedLengthProperty();
	static Windows::UI::Xaml::DependencyProperty OffsetFromCenterProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTranslationDirectionProperty();
	static Windows::UI::Xaml::DependencyProperty ContentTranslationOffsetProperty();
};

struct SwipeBackThemeAnimation :
	Windows::UI::Xaml::Media::Animation::ISwipeBackThemeAnimation,
	Bases<SwipeBackThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<SwipeBackThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	SwipeBackThemeAnimation(std::nullptr_t) noexcept {}
	SwipeBackThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty();
};

struct SwipeHintThemeAnimation :
	Windows::UI::Xaml::Media::Animation::ISwipeHintThemeAnimation,
	Bases<SwipeHintThemeAnimation, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Timeline>,
	Requires<SwipeHintThemeAnimation, Windows::UI::Xaml::Media::Animation::ITimeline, Windows::UI::Xaml::IDependencyObject>
{
	SwipeHintThemeAnimation(std::nullptr_t) noexcept {}
	SwipeHintThemeAnimation();
	static Windows::UI::Xaml::DependencyProperty TargetNameProperty();
	static Windows::UI::Xaml::DependencyProperty ToHorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty ToVerticalOffsetProperty();
};

struct Transition :
	Windows::UI::Xaml::Media::Animation::ITransition,
	Bases<Transition, Windows::UI::Xaml::DependencyObject>,
	Requires<Transition, Windows::UI::Xaml::IDependencyObject>
{
	Transition(std::nullptr_t) noexcept {}
};

struct AddDeleteThemeTransition :
	Windows::UI::Xaml::Media::Animation::IAddDeleteThemeTransition,
	Bases<AddDeleteThemeTransition, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Transition>,
	Requires<AddDeleteThemeTransition, Windows::UI::Xaml::Media::Animation::ITransition, Windows::UI::Xaml::IDependencyObject>
{
	AddDeleteThemeTransition(std::nullptr_t) noexcept {}
	AddDeleteThemeTransition();
};

struct ContentThemeTransition :
	Windows::UI::Xaml::Media::Animation::IContentThemeTransition,
	Bases<ContentThemeTransition, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Transition>,
	Requires<ContentThemeTransition, Windows::UI::Xaml::Media::Animation::ITransition, Windows::UI::Xaml::IDependencyObject>
{
	ContentThemeTransition(std::nullptr_t) noexcept {}
	ContentThemeTransition();
	static Windows::UI::Xaml::DependencyProperty HorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty VerticalOffsetProperty();
};

struct EdgeUIThemeTransition :
	Windows::UI::Xaml::Media::Animation::IEdgeUIThemeTransition,
	Bases<EdgeUIThemeTransition, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Transition>,
	Requires<EdgeUIThemeTransition, Windows::UI::Xaml::Media::Animation::ITransition, Windows::UI::Xaml::IDependencyObject>
{
	EdgeUIThemeTransition(std::nullptr_t) noexcept {}
	EdgeUIThemeTransition();
	static Windows::UI::Xaml::DependencyProperty EdgeProperty();
};

struct EntranceThemeTransition :
	Windows::UI::Xaml::Media::Animation::IEntranceThemeTransition,
	Bases<EntranceThemeTransition, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Transition>,
	Requires<EntranceThemeTransition, Windows::UI::Xaml::Media::Animation::ITransition, Windows::UI::Xaml::IDependencyObject>
{
	EntranceThemeTransition(std::nullptr_t) noexcept {}
	EntranceThemeTransition();
	static Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty IsStaggeringEnabledProperty();
};

struct PaneThemeTransition :
	Windows::UI::Xaml::Media::Animation::IPaneThemeTransition,
	Bases<PaneThemeTransition, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Transition>,
	Requires<PaneThemeTransition, Windows::UI::Xaml::Media::Animation::ITransition, Windows::UI::Xaml::IDependencyObject>
{
	PaneThemeTransition(std::nullptr_t) noexcept {}
	PaneThemeTransition();
	static Windows::UI::Xaml::DependencyProperty EdgeProperty();
};

struct PopupThemeTransition :
	Windows::UI::Xaml::Media::Animation::IPopupThemeTransition,
	Bases<PopupThemeTransition, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Transition>,
	Requires<PopupThemeTransition, Windows::UI::Xaml::Media::Animation::ITransition, Windows::UI::Xaml::IDependencyObject>
{
	PopupThemeTransition(std::nullptr_t) noexcept {}
	PopupThemeTransition();
	static Windows::UI::Xaml::DependencyProperty FromHorizontalOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty FromVerticalOffsetProperty();
};

struct ReorderThemeTransition :
	Windows::UI::Xaml::Media::Animation::IReorderThemeTransition,
	Bases<ReorderThemeTransition, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Transition>,
	Requires<ReorderThemeTransition, Windows::UI::Xaml::Media::Animation::ITransition, Windows::UI::Xaml::IDependencyObject>
{
	ReorderThemeTransition(std::nullptr_t) noexcept {}
	ReorderThemeTransition();
};

struct RepositionThemeTransition :
	Windows::UI::Xaml::Media::Animation::IRepositionThemeTransition,
	Bases<RepositionThemeTransition, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::Animation::Transition>,
	Requires<RepositionThemeTransition, Windows::UI::Xaml::Media::Animation::ITransition, Windows::UI::Xaml::IDependencyObject>
{
	RepositionThemeTransition(std::nullptr_t) noexcept {}
	RepositionThemeTransition();
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Imaging {

struct DownloadProgressEventArgs :
	Windows::UI::Xaml::Media::Imaging::IDownloadProgressEventArgs
{
	DownloadProgressEventArgs(std::nullptr_t) noexcept {}
};

struct BitmapSource :
	Windows::UI::Xaml::Media::Imaging::IBitmapSource,
	Bases<BitmapSource, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::ImageSource>,
	Requires<BitmapSource, Windows::UI::Xaml::Media::IImageSource, Windows::UI::Xaml::IDependencyObject>
{
	BitmapSource(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty PixelWidthProperty();
	static Windows::UI::Xaml::DependencyProperty PixelHeightProperty();
};

struct BitmapImage :
	Windows::UI::Xaml::Media::Imaging::IBitmapImage,
	Bases<BitmapImage, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::ImageSource, Windows::UI::Xaml::Media::Imaging::BitmapSource>,
	Requires<BitmapImage, Windows::UI::Xaml::Media::IImageSource, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::Media::Imaging::IBitmapSource, Windows::UI::Xaml::Media::Imaging::IBitmapImage2>
{
	BitmapImage(std::nullptr_t) noexcept {}
	BitmapImage();
	BitmapImage(Windows::Foundation::Uri const & uriSource);
	static Windows::UI::Xaml::DependencyProperty DecodePixelTypeProperty();
	static Windows::UI::Xaml::DependencyProperty CreateOptionsProperty();
	static Windows::UI::Xaml::DependencyProperty UriSourceProperty();
	static Windows::UI::Xaml::DependencyProperty DecodePixelWidthProperty();
	static Windows::UI::Xaml::DependencyProperty DecodePixelHeightProperty();
};

struct RenderTargetBitmap :
	Windows::UI::Xaml::Media::Imaging::IRenderTargetBitmap,
	Bases<RenderTargetBitmap, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::ImageSource>,
	Requires<RenderTargetBitmap, Windows::UI::Xaml::Media::IImageSource, Windows::UI::Xaml::IDependencyObject>
{
	RenderTargetBitmap(std::nullptr_t) noexcept {}
	RenderTargetBitmap();
	static Windows::UI::Xaml::DependencyProperty PixelWidthProperty();
	static Windows::UI::Xaml::DependencyProperty PixelHeightProperty();
};

struct SurfaceImageSource :
	Windows::UI::Xaml::Media::Imaging::ISurfaceImageSource,
	Bases<SurfaceImageSource, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::ImageSource>,
	Requires<SurfaceImageSource, Windows::UI::Xaml::Media::IImageSource, Windows::UI::Xaml::IDependencyObject>
{
	SurfaceImageSource(std::nullptr_t) noexcept {}
	SurfaceImageSource(int pixelWidth, int pixelHeight);
	SurfaceImageSource(int pixelWidth, int pixelHeight, bool isOpaque);
};

struct VirtualSurfaceImageSource :
	Windows::UI::Xaml::Media::Imaging::IVirtualSurfaceImageSource,
	Bases<VirtualSurfaceImageSource, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::ImageSource, Windows::UI::Xaml::Media::Imaging::SurfaceImageSource>,
	Requires<VirtualSurfaceImageSource, Windows::UI::Xaml::Media::IImageSource, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::Media::Imaging::ISurfaceImageSource>
{
	VirtualSurfaceImageSource(std::nullptr_t) noexcept {}
	VirtualSurfaceImageSource(int pixelWidth, int pixelHeight);
	VirtualSurfaceImageSource(int pixelWidth, int pixelHeight, bool isOpaque);
};

struct WriteableBitmap :
	Windows::UI::Xaml::Media::Imaging::IWriteableBitmap,
	Bases<WriteableBitmap, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::Media::ImageSource, Windows::UI::Xaml::Media::Imaging::BitmapSource>,
	Requires<WriteableBitmap, Windows::UI::Xaml::Media::IImageSource, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::Media::Imaging::IBitmapSource>
{
	WriteableBitmap(std::nullptr_t) noexcept {}
	WriteableBitmap(int pixelWidth, int pixelHeight);
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Media { namespace Media3D {

struct Matrix3DHelper :
	Windows::UI::Xaml::Media::Media3D::IMatrix3DHelper
{
	Matrix3DHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::Media::Media3D::Matrix3D Identity();
	static Windows::UI::Xaml::Media::Media3D::Matrix3D Multiply(Windows::UI::Xaml::Media::Media3D::Matrix3D const & matrix1, Windows::UI::Xaml::Media::Media3D::Matrix3D const & matrix2);
	static Windows::UI::Xaml::Media::Media3D::Matrix3D FromElements(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double offsetX, double offsetY, double offsetZ, double m44);
	static bool GetHasInverse(Windows::UI::Xaml::Media::Media3D::Matrix3D const & target);
	static bool GetIsIdentity(Windows::UI::Xaml::Media::Media3D::Matrix3D const & target);
	static Windows::UI::Xaml::Media::Media3D::Matrix3D Invert(Windows::UI::Xaml::Media::Media3D::Matrix3D const & target);
};

}}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Navigation {

struct NavigationEventArgs :
	Windows::UI::Xaml::Navigation::INavigationEventArgs,
	Requires<NavigationEventArgs, Windows::UI::Xaml::Navigation::INavigationEventArgs2>
{
	NavigationEventArgs(std::nullptr_t) noexcept {}
};

struct NavigatingCancelEventArgs :
	Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs,
	Requires<NavigatingCancelEventArgs, Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs2>
{
	NavigatingCancelEventArgs(std::nullptr_t) noexcept {}
};

struct NavigationFailedEventArgs :
	Windows::UI::Xaml::Navigation::INavigationFailedEventArgs
{
	NavigationFailedEventArgs(std::nullptr_t) noexcept {}
};

struct PageStackEntry :
	Windows::UI::Xaml::Navigation::IPageStackEntry,
	Bases<PageStackEntry, Windows::UI::Xaml::DependencyObject>,
	Requires<PageStackEntry, Windows::UI::Xaml::IDependencyObject>
{
	PageStackEntry(std::nullptr_t) noexcept {}
	PageStackEntry(Windows::UI::Xaml::Interop::TypeName const & sourcePageType, IInspectable const & parameter, Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo const & navigationTransitionInfo);
	static Windows::UI::Xaml::DependencyProperty SourcePageTypeProperty();
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Printing {

struct AddPagesEventArgs :
	Windows::UI::Xaml::Printing::IAddPagesEventArgs
{
	AddPagesEventArgs(std::nullptr_t) noexcept {}
	AddPagesEventArgs();
};

struct GetPreviewPageEventArgs :
	Windows::UI::Xaml::Printing::IGetPreviewPageEventArgs
{
	GetPreviewPageEventArgs(std::nullptr_t) noexcept {}
	GetPreviewPageEventArgs();
};

struct PaginateEventArgs :
	Windows::UI::Xaml::Printing::IPaginateEventArgs
{
	PaginateEventArgs(std::nullptr_t) noexcept {}
	PaginateEventArgs();
};

struct PrintDocument :
	Windows::UI::Xaml::Printing::IPrintDocument,
	Bases<PrintDocument, Windows::UI::Xaml::DependencyObject>,
	Requires<PrintDocument, Windows::UI::Xaml::IDependencyObject>
{
	PrintDocument(std::nullptr_t) noexcept {}
	PrintDocument();
	static Windows::UI::Xaml::DependencyProperty DocumentSourceProperty();
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Resources {

struct CustomXamlResourceLoader :
	Windows::UI::Xaml::Resources::ICustomXamlResourceLoader,
	Requires<CustomXamlResourceLoader, Windows::UI::Xaml::Resources::ICustomXamlResourceLoaderOverrides>
{
	CustomXamlResourceLoader(std::nullptr_t) noexcept {}
	CustomXamlResourceLoader();
	static Windows::UI::Xaml::Resources::CustomXamlResourceLoader Current();
	static void Current(Windows::UI::Xaml::Resources::CustomXamlResourceLoader const & value);
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Xaml { namespace Shapes {

struct Shape :
	Windows::UI::Xaml::Shapes::IShape,
	Bases<Shape, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement>,
	Requires<Shape, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2>
{
	Shape(std::nullptr_t) noexcept {}
	static Windows::UI::Xaml::DependencyProperty FillProperty();
	static Windows::UI::Xaml::DependencyProperty StrokeProperty();
	static Windows::UI::Xaml::DependencyProperty StrokeMiterLimitProperty();
	static Windows::UI::Xaml::DependencyProperty StrokeThicknessProperty();
	static Windows::UI::Xaml::DependencyProperty StrokeStartLineCapProperty();
	static Windows::UI::Xaml::DependencyProperty StrokeEndLineCapProperty();
	static Windows::UI::Xaml::DependencyProperty StrokeLineJoinProperty();
	static Windows::UI::Xaml::DependencyProperty StrokeDashOffsetProperty();
	static Windows::UI::Xaml::DependencyProperty StrokeDashCapProperty();
	static Windows::UI::Xaml::DependencyProperty StrokeDashArrayProperty();
	static Windows::UI::Xaml::DependencyProperty StretchProperty();
};

struct Ellipse :
	Windows::UI::Xaml::Shapes::IEllipse,
	Bases<Ellipse, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Shapes::Shape>,
	Requires<Ellipse, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::Shapes::IShape>
{
	Ellipse(std::nullptr_t) noexcept {}
	Ellipse();
};

struct Line :
	Windows::UI::Xaml::Shapes::ILine,
	Bases<Line, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Shapes::Shape>,
	Requires<Line, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::Shapes::IShape>
{
	Line(std::nullptr_t) noexcept {}
	Line();
	static Windows::UI::Xaml::DependencyProperty X1Property();
	static Windows::UI::Xaml::DependencyProperty Y1Property();
	static Windows::UI::Xaml::DependencyProperty X2Property();
	static Windows::UI::Xaml::DependencyProperty Y2Property();
};

struct Path :
	Windows::UI::Xaml::Shapes::IPath,
	Bases<Path, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Shapes::Shape>,
	Requires<Path, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::Shapes::IShape>
{
	Path(std::nullptr_t) noexcept {}
	Path();
	static Windows::UI::Xaml::DependencyProperty DataProperty();
};

struct Polygon :
	Windows::UI::Xaml::Shapes::IPolygon,
	Bases<Polygon, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Shapes::Shape>,
	Requires<Polygon, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::Shapes::IShape>
{
	Polygon(std::nullptr_t) noexcept {}
	Polygon();
	static Windows::UI::Xaml::DependencyProperty FillRuleProperty();
	static Windows::UI::Xaml::DependencyProperty PointsProperty();
};

struct Polyline :
	Windows::UI::Xaml::Shapes::IPolyline,
	Bases<Polyline, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Shapes::Shape>,
	Requires<Polyline, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::Shapes::IShape>
{
	Polyline(std::nullptr_t) noexcept {}
	Polyline();
	static Windows::UI::Xaml::DependencyProperty FillRuleProperty();
	static Windows::UI::Xaml::DependencyProperty PointsProperty();
};

struct Rectangle :
	Windows::UI::Xaml::Shapes::IRectangle,
	Bases<Rectangle, Windows::UI::Xaml::DependencyObject, Windows::UI::Xaml::UIElement, Windows::UI::Xaml::FrameworkElement, Windows::UI::Xaml::Shapes::Shape>,
	Requires<Rectangle, Windows::UI::Xaml::IDependencyObject, Windows::UI::Xaml::IUIElement, Windows::UI::Xaml::IUIElement2, Windows::UI::Xaml::IUIElementOverrides, Windows::UI::Xaml::IFrameworkElement, Windows::UI::Xaml::IFrameworkElement2, Windows::UI::Xaml::IFrameworkElementOverrides, Windows::UI::Xaml::IFrameworkElementOverrides2, Windows::UI::Xaml::Shapes::IShape>
{
	Rectangle(std::nullptr_t) noexcept {}
	Rectangle();
	static Windows::UI::Xaml::DependencyProperty RadiusXProperty();
	static Windows::UI::Xaml::DependencyProperty RadiusYProperty();
};

}}}}}

namespace Modern { namespace Windows { namespace Web {

struct WebError
{
	WebError() = delete;
	static Windows::Web::WebErrorStatus GetStatus(int hresult);
};

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

struct ServiceDocument :
	Windows::Web::AtomPub::IServiceDocument
{
	ServiceDocument(std::nullptr_t) noexcept {}
};

struct ResourceCollection :
	Windows::Web::AtomPub::IResourceCollection
{
	ResourceCollection(std::nullptr_t) noexcept {}
};

struct Workspace :
	Windows::Web::AtomPub::IWorkspace
{
	Workspace(std::nullptr_t) noexcept {}
};

struct AtomPubClient :
	Windows::Web::AtomPub::IAtomPubClient
{
	AtomPubClient(std::nullptr_t) noexcept {}
	AtomPubClient();
	AtomPubClient(Windows::Security::Credentials::PasswordCredential const & serverCredential);
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

struct HttpCookieManager :
	Windows::Web::Http::IHttpCookieManager
{
	HttpCookieManager(std::nullptr_t) noexcept {}
};

struct HttpRequestMessage :
	Windows::Web::Http::IHttpRequestMessage,
	Requires<HttpRequestMessage, Windows::Foundation::IStringable>
{
	HttpRequestMessage(std::nullptr_t) noexcept {}
	HttpRequestMessage();
	HttpRequestMessage(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri);
};

struct HttpResponseMessage :
	Windows::Web::Http::IHttpResponseMessage,
	Requires<HttpResponseMessage, Windows::Foundation::IStringable>
{
	HttpResponseMessage(std::nullptr_t) noexcept {}
	HttpResponseMessage();
	HttpResponseMessage(Windows::Web::Http::HttpStatusCode statusCode);
};

struct HttpMethod :
	Windows::Web::Http::IHttpMethod,
	Requires<HttpMethod, Windows::Foundation::IStringable>
{
	HttpMethod(std::nullptr_t) noexcept {}
	HttpMethod(String const & method);
	template <unsigned S0> HttpMethod(wchar_t const (&method)[S0]);
	static Windows::Web::Http::HttpMethod Delete();
	static Windows::Web::Http::HttpMethod Get();
	static Windows::Web::Http::HttpMethod Head();
	static Windows::Web::Http::HttpMethod Options();
	static Windows::Web::Http::HttpMethod Patch();
	static Windows::Web::Http::HttpMethod Post();
	static Windows::Web::Http::HttpMethod Put();
};

struct HttpClient :
	Windows::Web::Http::IHttpClient,
	Requires<HttpClient, Windows::Foundation::IStringable>
{
	HttpClient(std::nullptr_t) noexcept {}
	HttpClient();
	HttpClient(Windows::Web::Http::Filters::IHttpFilter const & filter);
};

struct HttpCookie :
	Windows::Web::Http::IHttpCookie,
	Requires<HttpCookie, Windows::Foundation::IStringable>
{
	HttpCookie(std::nullptr_t) noexcept {}
	HttpCookie(String const & name, String const & domain, String const & path);
	template <unsigned S0, unsigned S1, unsigned S2> HttpCookie(wchar_t const (&name)[S0], wchar_t const (&domain)[S1], wchar_t const (&path)[S2]);
};

struct HttpCookieCollection :
	Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie>
{
	HttpCookieCollection(std::nullptr_t) noexcept {}
};

struct HttpTransportInformation :
	Windows::Web::Http::IHttpTransportInformation,
	Requires<HttpTransportInformation, Windows::Foundation::IStringable>
{
	HttpTransportInformation(std::nullptr_t) noexcept {}
};

struct HttpStringContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpStringContent, Windows::Foundation::IStringable>
{
	HttpStringContent(std::nullptr_t) noexcept {}
	HttpStringContent(String const & content);
	template <unsigned S0> HttpStringContent(wchar_t const (&content)[S0]);
	HttpStringContent(String const & content, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> HttpStringContent(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	HttpStringContent(String const & content, Windows::Storage::Streams::UnicodeEncoding encoding, String const & mediaType);
	template <unsigned S0, unsigned S1> HttpStringContent(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding encoding, wchar_t const (&mediaType)[S1]);
};

struct HttpBufferContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpBufferContent, Windows::Foundation::IStringable>
{
	HttpBufferContent(std::nullptr_t) noexcept {}
	HttpBufferContent(Windows::Storage::Streams::IBuffer const & content);
	HttpBufferContent(Windows::Storage::Streams::IBuffer const & content, unsigned offset, unsigned count);
};

struct HttpStreamContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpStreamContent, Windows::Foundation::IStringable>
{
	HttpStreamContent(std::nullptr_t) noexcept {}
	HttpStreamContent(Windows::Storage::Streams::IInputStream const & content);
};

struct HttpFormUrlEncodedContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpFormUrlEncodedContent, Windows::Foundation::IStringable>
{
	HttpFormUrlEncodedContent(std::nullptr_t) noexcept {}
	HttpFormUrlEncodedContent(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content);
};

struct HttpMultipartContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpMultipartContent, Windows::Web::Http::IHttpMultipartContent, Windows::Foundation::IStringable, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	HttpMultipartContent(std::nullptr_t) noexcept {}
	HttpMultipartContent();
	HttpMultipartContent(String const & subtype);
	template <unsigned S0> HttpMultipartContent(wchar_t const (&subtype)[S0]);
	HttpMultipartContent(String const & subtype, String const & boundary);
	template <unsigned S0, unsigned S1> HttpMultipartContent(wchar_t const (&subtype)[S0], wchar_t const (&boundary)[S1]);
};

struct HttpMultipartFormDataContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpMultipartFormDataContent, Windows::Web::Http::IHttpMultipartFormDataContent, Windows::Foundation::IStringable, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	HttpMultipartFormDataContent(std::nullptr_t) noexcept {}
	HttpMultipartFormDataContent();
	HttpMultipartFormDataContent(String const & boundary);
	template <unsigned S0> HttpMultipartFormDataContent(wchar_t const (&boundary)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

struct HttpCacheControl :
	Windows::Web::Http::Filters::IHttpCacheControl
{
	HttpCacheControl(std::nullptr_t) noexcept {}
};

struct HttpBaseProtocolFilter :
	Windows::Web::Http::Filters::IHttpBaseProtocolFilter
{
	HttpBaseProtocolFilter(std::nullptr_t) noexcept {}
	HttpBaseProtocolFilter();
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

struct HttpContentHeaderCollection :
	Windows::Web::Http::Headers::IHttpContentHeaderCollection,
	Requires<HttpContentHeaderCollection, Windows::Foundation::IStringable>
{
	HttpContentHeaderCollection(std::nullptr_t) noexcept {}
	HttpContentHeaderCollection();
};

struct HttpRequestHeaderCollection :
	Windows::Web::Http::Headers::IHttpRequestHeaderCollection,
	Requires<HttpRequestHeaderCollection, Windows::Foundation::IStringable>
{
	HttpRequestHeaderCollection(std::nullptr_t) noexcept {}
};

struct HttpResponseHeaderCollection :
	Windows::Web::Http::Headers::IHttpResponseHeaderCollection,
	Requires<HttpResponseHeaderCollection, Windows::Foundation::IStringable>
{
	HttpResponseHeaderCollection(std::nullptr_t) noexcept {}
};

struct HttpContentDispositionHeaderValue :
	Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue,
	Requires<HttpContentDispositionHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentDispositionHeaderValue(std::nullptr_t) noexcept {}
	HttpContentDispositionHeaderValue(String const & dispositionType);
	template <unsigned S0> HttpContentDispositionHeaderValue(wchar_t const (&dispositionType)[S0]);
	static Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue);
};

struct HttpContentCodingHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection,
	Requires<HttpContentCodingHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpContentCodingHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpLanguageHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection,
	Requires<HttpLanguageHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpLanguageHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpContentRangeHeaderValue :
	Windows::Web::Http::Headers::IHttpContentRangeHeaderValue,
	Requires<HttpContentRangeHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentRangeHeaderValue(std::nullptr_t) noexcept {}
	HttpContentRangeHeaderValue(unsigned long long length);
	HttpContentRangeHeaderValue(unsigned long long from, unsigned long long to);
	HttpContentRangeHeaderValue(unsigned long long from, unsigned long long to, unsigned long long length);
	static Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue);
};

struct HttpMediaTypeHeaderValue :
	Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue,
	Requires<HttpMediaTypeHeaderValue, Windows::Foundation::IStringable>
{
	HttpMediaTypeHeaderValue(std::nullptr_t) noexcept {}
	HttpMediaTypeHeaderValue(String const & mediaType);
	template <unsigned S0> HttpMediaTypeHeaderValue(wchar_t const (&mediaType)[S0]);
	static Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue);
};

struct HttpMediaTypeWithQualityHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection,
	Requires<HttpMediaTypeWithQualityHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpMediaTypeWithQualityHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpContentCodingWithQualityHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection,
	Requires<HttpContentCodingWithQualityHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpContentCodingWithQualityHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpLanguageRangeWithQualityHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection,
	Requires<HttpLanguageRangeWithQualityHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpLanguageRangeWithQualityHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpCredentialsHeaderValue :
	Windows::Web::Http::Headers::IHttpCredentialsHeaderValue,
	Requires<HttpCredentialsHeaderValue, Windows::Foundation::IStringable>
{
	HttpCredentialsHeaderValue(std::nullptr_t) noexcept {}
	HttpCredentialsHeaderValue(String const & scheme);
	template <unsigned S0> HttpCredentialsHeaderValue(wchar_t const (&scheme)[S0]);
	HttpCredentialsHeaderValue(String const & scheme, String const & token);
	template <unsigned S0, unsigned S1> HttpCredentialsHeaderValue(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]);
	static Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue);
};

struct HttpCacheDirectiveHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection,
	Requires<HttpCacheDirectiveHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpCacheDirectiveHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpConnectionOptionHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection,
	Requires<HttpConnectionOptionHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpConnectionOptionHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpCookiePairHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection,
	Requires<HttpCookiePairHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpCookiePairHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpExpectationHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection,
	Requires<HttpExpectationHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpExpectationHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpTransferCodingHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection,
	Requires<HttpTransferCodingHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpTransferCodingHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpProductInfoHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection,
	Requires<HttpProductInfoHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpProductInfoHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpMethodHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection,
	Requires<HttpMethodHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpMethodHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpChallengeHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection,
	Requires<HttpChallengeHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpChallengeHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpDateOrDeltaHeaderValue :
	Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue,
	Requires<HttpDateOrDeltaHeaderValue, Windows::Foundation::IStringable>
{
	HttpDateOrDeltaHeaderValue(std::nullptr_t) noexcept {}
	static Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue);
};

struct HttpNameValueHeaderValue :
	Windows::Web::Http::Headers::IHttpNameValueHeaderValue,
	Requires<HttpNameValueHeaderValue, Windows::Foundation::IStringable>
{
	HttpNameValueHeaderValue(std::nullptr_t) noexcept {}
	HttpNameValueHeaderValue(String const & name);
	template <unsigned S0> HttpNameValueHeaderValue(wchar_t const (&name)[S0]);
	HttpNameValueHeaderValue(String const & name, String const & value);
	template <unsigned S0, unsigned S1> HttpNameValueHeaderValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]);
	static Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue);
};

struct HttpChallengeHeaderValue :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValue,
	Requires<HttpChallengeHeaderValue, Windows::Foundation::IStringable>
{
	HttpChallengeHeaderValue(std::nullptr_t) noexcept {}
	HttpChallengeHeaderValue(String const & scheme);
	template <unsigned S0> HttpChallengeHeaderValue(wchar_t const (&scheme)[S0]);
	HttpChallengeHeaderValue(String const & scheme, String const & token);
	template <unsigned S0, unsigned S1> HttpChallengeHeaderValue(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]);
	static Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue);
};

struct HttpConnectionOptionHeaderValue :
	Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue,
	Requires<HttpConnectionOptionHeaderValue, Windows::Foundation::IStringable>
{
	HttpConnectionOptionHeaderValue(std::nullptr_t) noexcept {}
	HttpConnectionOptionHeaderValue(String const & token);
	template <unsigned S0> HttpConnectionOptionHeaderValue(wchar_t const (&token)[S0]);
	static Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue);
};

struct HttpContentCodingHeaderValue :
	Windows::Web::Http::Headers::IHttpContentCodingHeaderValue,
	Requires<HttpContentCodingHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentCodingHeaderValue(std::nullptr_t) noexcept {}
	HttpContentCodingHeaderValue(String const & contentCoding);
	template <unsigned S0> HttpContentCodingHeaderValue(wchar_t const (&contentCoding)[S0]);
	static Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue);
};

struct HttpCookiePairHeaderValue :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValue,
	Requires<HttpCookiePairHeaderValue, Windows::Foundation::IStringable>
{
	HttpCookiePairHeaderValue(std::nullptr_t) noexcept {}
	HttpCookiePairHeaderValue(String const & name);
	template <unsigned S0> HttpCookiePairHeaderValue(wchar_t const (&name)[S0]);
	HttpCookiePairHeaderValue(String const & name, String const & value);
	template <unsigned S0, unsigned S1> HttpCookiePairHeaderValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]);
	static Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue);
};

struct HttpExpectationHeaderValue :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValue,
	Requires<HttpExpectationHeaderValue, Windows::Foundation::IStringable>
{
	HttpExpectationHeaderValue(std::nullptr_t) noexcept {}
	HttpExpectationHeaderValue(String const & name);
	template <unsigned S0> HttpExpectationHeaderValue(wchar_t const (&name)[S0]);
	HttpExpectationHeaderValue(String const & name, String const & value);
	template <unsigned S0, unsigned S1> HttpExpectationHeaderValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]);
	static Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue);
};

struct HttpLanguageRangeWithQualityHeaderValue :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue,
	Requires<HttpLanguageRangeWithQualityHeaderValue, Windows::Foundation::IStringable>
{
	HttpLanguageRangeWithQualityHeaderValue(std::nullptr_t) noexcept {}
	HttpLanguageRangeWithQualityHeaderValue(String const & languageRange);
	template <unsigned S0> HttpLanguageRangeWithQualityHeaderValue(wchar_t const (&languageRange)[S0]);
	HttpLanguageRangeWithQualityHeaderValue(String const & languageRange, double quality);
	template <unsigned S0> HttpLanguageRangeWithQualityHeaderValue(wchar_t const (&languageRange)[S0], double quality);
	static Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue);
};

struct HttpMediaTypeWithQualityHeaderValue :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue,
	Requires<HttpMediaTypeWithQualityHeaderValue, Windows::Foundation::IStringable>
{
	HttpMediaTypeWithQualityHeaderValue(std::nullptr_t) noexcept {}
	HttpMediaTypeWithQualityHeaderValue(String const & mediaType);
	template <unsigned S0> HttpMediaTypeWithQualityHeaderValue(wchar_t const (&mediaType)[S0]);
	HttpMediaTypeWithQualityHeaderValue(String const & mediaType, double quality);
	template <unsigned S0> HttpMediaTypeWithQualityHeaderValue(wchar_t const (&mediaType)[S0], double quality);
	static Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue);
};

struct HttpProductHeaderValue :
	Windows::Web::Http::Headers::IHttpProductHeaderValue,
	Requires<HttpProductHeaderValue, Windows::Foundation::IStringable>
{
	HttpProductHeaderValue(std::nullptr_t) noexcept {}
	HttpProductHeaderValue(String const & productName);
	template <unsigned S0> HttpProductHeaderValue(wchar_t const (&productName)[S0]);
	HttpProductHeaderValue(String const & productName, String const & productVersion);
	template <unsigned S0, unsigned S1> HttpProductHeaderValue(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]);
	static Windows::Web::Http::Headers::HttpProductHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpProductHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue);
};

struct HttpProductInfoHeaderValue :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValue,
	Requires<HttpProductInfoHeaderValue, Windows::Foundation::IStringable>
{
	HttpProductInfoHeaderValue(std::nullptr_t) noexcept {}
	HttpProductInfoHeaderValue(String const & productComment);
	template <unsigned S0> HttpProductInfoHeaderValue(wchar_t const (&productComment)[S0]);
	HttpProductInfoHeaderValue(String const & productName, String const & productVersion);
	template <unsigned S0, unsigned S1> HttpProductInfoHeaderValue(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]);
	static Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue);
};

struct HttpContentCodingWithQualityHeaderValue :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue,
	Requires<HttpContentCodingWithQualityHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentCodingWithQualityHeaderValue(std::nullptr_t) noexcept {}
	HttpContentCodingWithQualityHeaderValue(String const & contentCoding);
	template <unsigned S0> HttpContentCodingWithQualityHeaderValue(wchar_t const (&contentCoding)[S0]);
	HttpContentCodingWithQualityHeaderValue(String const & contentCoding, double quality);
	template <unsigned S0> HttpContentCodingWithQualityHeaderValue(wchar_t const (&contentCoding)[S0], double quality);
	static Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue);
};

struct HttpTransferCodingHeaderValue :
	Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue,
	Requires<HttpTransferCodingHeaderValue, Windows::Foundation::IStringable>
{
	HttpTransferCodingHeaderValue(std::nullptr_t) noexcept {}
	HttpTransferCodingHeaderValue(String const & input);
	template <unsigned S0> HttpTransferCodingHeaderValue(wchar_t const (&input)[S0]);
	static Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue);
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

struct SyndicationAttribute :
	Windows::Web::Syndication::ISyndicationAttribute
{
	SyndicationAttribute(std::nullptr_t) noexcept {}
	SyndicationAttribute();
	SyndicationAttribute(String const & attributeName, String const & attributeNamespace, String const & attributeValue);
	template <unsigned S0, unsigned S1, unsigned S2> SyndicationAttribute(wchar_t const (&attributeName)[S0], wchar_t const (&attributeNamespace)[S1], wchar_t const (&attributeValue)[S2]);
};

struct SyndicationNode :
	Windows::Web::Syndication::ISyndicationNode
{
	SyndicationNode(std::nullptr_t) noexcept {}
	SyndicationNode();
	SyndicationNode(String const & nodeName, String const & nodeNamespace, String const & nodeValue);
	template <unsigned S0, unsigned S1, unsigned S2> SyndicationNode(wchar_t const (&nodeName)[S0], wchar_t const (&nodeNamespace)[S1], wchar_t const (&nodeValue)[S2]);
};

struct SyndicationGenerator :
	Windows::Web::Syndication::ISyndicationGenerator,
	Requires<SyndicationGenerator, Windows::Web::Syndication::ISyndicationNode>
{
	SyndicationGenerator(std::nullptr_t) noexcept {}
	SyndicationGenerator();
	SyndicationGenerator(String const & text);
	template <unsigned S0> SyndicationGenerator(wchar_t const (&text)[S0]);
};

struct SyndicationText :
	Windows::Web::Syndication::ISyndicationText
{
	SyndicationText(std::nullptr_t) noexcept {}
	SyndicationText();
	SyndicationText(String const & text);
	template <unsigned S0> SyndicationText(wchar_t const (&text)[S0]);
	SyndicationText(String const & text, Windows::Web::Syndication::SyndicationTextType type);
	template <unsigned S0> SyndicationText(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType type);
};

struct SyndicationContent :
	Windows::Web::Syndication::ISyndicationContent
{
	SyndicationContent(std::nullptr_t) noexcept {}
	SyndicationContent();
	SyndicationContent(String const & text, Windows::Web::Syndication::SyndicationTextType type);
	template <unsigned S0> SyndicationContent(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType type);
	SyndicationContent(Windows::Foundation::Uri const & sourceUri);
};

struct SyndicationLink :
	Windows::Web::Syndication::ISyndicationLink
{
	SyndicationLink(std::nullptr_t) noexcept {}
	SyndicationLink();
	SyndicationLink(Windows::Foundation::Uri const & uri);
	SyndicationLink(Windows::Foundation::Uri const & uri, String const & relationship, String const & title, String const & mediaType, unsigned length);
	template <unsigned S0, unsigned S1, unsigned S2> SyndicationLink(Windows::Foundation::Uri const & uri, wchar_t const (&relationship)[S0], wchar_t const (&title)[S1], wchar_t const (&mediaType)[S2], unsigned length);
};

struct SyndicationPerson :
	Windows::Web::Syndication::ISyndicationPerson
{
	SyndicationPerson(std::nullptr_t) noexcept {}
	SyndicationPerson();
	SyndicationPerson(String const & name);
	template <unsigned S0> SyndicationPerson(wchar_t const (&name)[S0]);
	SyndicationPerson(String const & name, String const & email, Windows::Foundation::Uri const & uri);
	template <unsigned S0, unsigned S1> SyndicationPerson(wchar_t const (&name)[S0], wchar_t const (&email)[S1], Windows::Foundation::Uri const & uri);
};

struct SyndicationCategory :
	Windows::Web::Syndication::ISyndicationCategory
{
	SyndicationCategory(std::nullptr_t) noexcept {}
	SyndicationCategory();
	SyndicationCategory(String const & term);
	template <unsigned S0> SyndicationCategory(wchar_t const (&term)[S0]);
	SyndicationCategory(String const & term, String const & scheme, String const & label);
	template <unsigned S0, unsigned S1, unsigned S2> SyndicationCategory(wchar_t const (&term)[S0], wchar_t const (&scheme)[S1], wchar_t const (&label)[S2]);
};

struct SyndicationFeed :
	Windows::Web::Syndication::ISyndicationFeed
{
	SyndicationFeed(std::nullptr_t) noexcept {}
	SyndicationFeed();
	SyndicationFeed(String const & title, String const & subtitle, Windows::Foundation::Uri const & uri);
	template <unsigned S0, unsigned S1> SyndicationFeed(wchar_t const (&title)[S0], wchar_t const (&subtitle)[S1], Windows::Foundation::Uri const & uri);
};

struct SyndicationItem :
	Windows::Web::Syndication::ISyndicationItem
{
	SyndicationItem(std::nullptr_t) noexcept {}
	SyndicationItem();
	SyndicationItem(String const & title, Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri);
	template <unsigned S0> SyndicationItem(wchar_t const (&title)[S0], Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri);
};

struct SyndicationClient :
	Windows::Web::Syndication::ISyndicationClient
{
	SyndicationClient(std::nullptr_t) noexcept {}
	SyndicationClient();
	SyndicationClient(Windows::Security::Credentials::PasswordCredential const & serverCredential);
};

struct SyndicationError
{
	SyndicationError() = delete;
	static Windows::Web::Syndication::SyndicationErrorStatus GetStatus(int hresult);
};

}}}}
