// Modern v1.26 - http://moderncpp.com
// Copyright (c) 2015 Kenny Kerr

#pragma once

namespace Modern { namespace Windows { namespace ApplicationModel {

struct ISuspendingDeferral;
struct ISuspendingOperation;
struct ISuspendingEventArgs;
struct IPackageId;
struct IPackage;
struct IPackage2;
struct IPackageStatics;
struct IDesignModeStatics;
struct SuspendingEventArgs;
struct SuspendingDeferral;
struct SuspendingOperation;
struct PackageId;
struct Package;
struct DesignMode;

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

struct ISplashScreen;
struct IActivatedEventArgs;
struct IApplicationViewActivatedEventArgs;
struct IPrelaunchActivatedEventArgs;
struct ILaunchActivatedEventArgs;
struct ISearchActivatedEventArgs;
struct ISearchActivatedEventArgsWithLinguisticDetails;
struct IShareTargetActivatedEventArgs;
struct IFileActivatedEventArgs;
struct IFileActivatedEventArgsWithNeighboringFiles;
struct IProtocolActivatedEventArgs;
struct IFileOpenPickerActivatedEventArgs;
struct IFileSavePickerActivatedEventArgs;
struct ICachedFileUpdaterActivatedEventArgs;
struct IContactPickerActivatedEventArgs;
struct IDeviceActivatedEventArgs;
struct IPrintTaskSettingsActivatedEventArgs;
struct ICameraSettingsActivatedEventArgs;
struct IAppointmentsProviderActivatedEventArgs;
struct IAppointmentsProviderAddAppointmentActivatedEventArgs;
struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
struct IAppointmentsProviderShowTimeFrameActivatedEventArgs;
struct IContactActivatedEventArgs;
struct IContactCallActivatedEventArgs;
struct IContactMessageActivatedEventArgs;
struct IContactMapActivatedEventArgs;
struct IContactPostActivatedEventArgs;
struct IContactVideoCallActivatedEventArgs;
struct IContactsProviderActivatedEventArgs;
struct IRestrictedLaunchActivatedEventArgs;
struct ILockScreenCallActivatedEventArgs;
struct SplashScreen;
struct LaunchActivatedEventArgs;
struct SearchActivatedEventArgs;
struct ShareTargetActivatedEventArgs;
struct FileActivatedEventArgs;
struct ProtocolActivatedEventArgs;
struct FileOpenPickerActivatedEventArgs;
struct FileSavePickerActivatedEventArgs;
struct CachedFileUpdaterActivatedEventArgs;
struct ContactPickerActivatedEventArgs;
struct DeviceActivatedEventArgs;
struct PrintTaskSettingsActivatedEventArgs;
struct CameraSettingsActivatedEventArgs;
struct AppointmentsProviderAddAppointmentActivatedEventArgs;
struct AppointmentsProviderReplaceAppointmentActivatedEventArgs;
struct AppointmentsProviderRemoveAppointmentActivatedEventArgs;
struct AppointmentsProviderShowTimeFrameActivatedEventArgs;
struct ContactCallActivatedEventArgs;
struct ContactMessageActivatedEventArgs;
struct ContactMapActivatedEventArgs;
struct ContactPostActivatedEventArgs;
struct ContactVideoCallActivatedEventArgs;
struct RestrictedLaunchActivatedEventArgs;
struct LockScreenCallActivatedEventArgs;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

struct IAppointmentManagerStatics;
struct IAppointmentParticipant;
struct IAppointmentInvitee;
struct IAppointmentRecurrence;
struct IAppointment;
struct Appointment;
struct AppointmentOrganizer;
struct AppointmentInvitee;
struct AppointmentRecurrence;
struct AppointmentManager;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

struct IAppointmentsProviderLaunchActionVerbsStatics;
struct IAddAppointmentOperation;
struct IReplaceAppointmentOperation;
struct IRemoveAppointmentOperation;
struct AppointmentsProviderLaunchActionVerbs;
struct AddAppointmentOperation;
struct ReplaceAppointmentOperation;
struct RemoveAppointmentOperation;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

struct IBackgroundTaskCanceledEventHandler;
struct IBackgroundTaskProgressEventHandler;
struct IBackgroundTaskCompletedEventHandler;
struct IAlarmApplicationManagerStatics;
struct IBackgroundExecutionManagerStatics;
struct IBackgroundTaskInstance;
struct IBackgroundWorkCostStatics;
struct IBackgroundTaskDeferral;
struct IBackgroundTaskInstance2;
struct IBackgroundTask;
struct IBackgroundTaskRegistration;
struct IBackgroundTaskRegistrationStatics;
struct IBackgroundTaskBuilder;
struct IBackgroundTrigger;
struct IBackgroundCondition;
struct IBackgroundTaskBuilder2;
struct IBackgroundTaskCompletedEventArgs;
struct IBackgroundTaskProgressEventArgs;
struct ISystemTrigger;
struct ISystemTriggerFactory;
struct ISystemCondition;
struct ISystemConditionFactory;
struct INetworkOperatorNotificationTrigger;
struct INetworkOperatorNotificationTriggerFactory;
struct ITimeTrigger;
struct ITimeTriggerFactory;
struct IMaintenanceTrigger;
struct IMaintenanceTriggerFactory;
struct IDeviceUseTrigger;
struct IDeviceServicingTrigger;
struct ILocationTrigger;
struct ILocationTriggerFactory;
struct INetworkOperatorHotspotAuthenticationTrigger;
struct IPushNotificationTriggerFactory;
struct AlarmApplicationManager;
struct BackgroundExecutionManager;
struct BackgroundTaskRegistration;
struct BackgroundTaskDeferral;
struct BackgroundTaskProgressEventArgs;
struct BackgroundTaskCompletedEventArgs;
struct BackgroundTaskBuilder;
struct BackgroundWorkCost;
struct SystemTrigger;
struct SystemCondition;
struct NetworkOperatorNotificationTrigger;
struct TimeTrigger;
struct MaintenanceTrigger;
struct DeviceUseTrigger;
struct DeviceServicingTrigger;
struct LocationTrigger;
struct NetworkOperatorHotspotAuthenticationTrigger;
struct PushNotificationTrigger;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

struct ILockScreenCallEndCallDeferral;
struct ILockScreenCallEndRequestedEventArgs;
struct ILockScreenCallUI;
struct LockScreenCallEndCallDeferral;
struct LockScreenCallUI;
struct LockScreenCallEndRequestedEventArgs;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

struct IContactManagerStatics;
struct IContactLaunchActionVerbsStatics;
struct IContactPicker;
struct IContactPicker2;
struct IContactSignificantOther;
struct IContactWebsite;
struct IContactEmail;
struct IContactPhone;
struct IContactAddress;
struct IContactConnectedServiceAccount;
struct IContactDate;
struct IContactName;
struct IContactJobInfo;
struct IContact;
struct IContact2;
struct IContactCardDelayedDataLoader;
struct ContactCardDelayedDataLoader;
struct ContactManager;
struct ContactLaunchActionVerbs;
struct Contact;
struct ContactPicker;
struct ContactSignificantOther;
struct ContactWebsite;
struct ContactEmail;
struct ContactPhone;
struct ContactAddress;
struct ContactConnectedServiceAccount;
struct ContactDate;
struct ContactJobInfo;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

struct IContactRemovedEventArgs;
struct IContactPickerUI;
struct IContactPickerUI2;
struct ContactRemovedEventArgs;
struct ContactPickerUI;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

struct IFrameworkView;
struct IFrameworkViewSource;
struct ICoreApplication;
struct ICoreApplicationUseCount;
struct ICoreApplicationExit;
struct ICoreImmersiveApplication;
struct ICoreImmersiveApplication2;
struct ICoreApplicationUnhandledError;
struct ICoreApplicationView;
struct ICoreApplicationView2;
struct IUnhandledErrorDetectedEventArgs;
struct IUnhandledError;
struct CoreApplication;
struct CoreApplicationView;
struct UnhandledErrorDetectedEventArgs;
struct UnhandledError;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

struct IDataProviderHandler;
struct IStandardDataFormatsStatics;
struct IStandardDataFormatsStatics2;
struct IDataPackagePropertySetView;
struct IDataPackagePropertySetView2;
struct IDataPackagePropertySet;
struct IDataPackagePropertySet2;
struct IDataProviderDeferral;
struct IDataProviderRequest;
struct IOperationCompletedEventArgs;
struct IDataPackageView;
struct IDataPackageView2;
struct IDataPackage;
struct IDataPackage2;
struct IHtmlFormatHelperStatics;
struct IClipboardStatics;
struct IDataRequestDeferral;
struct IDataRequest;
struct IDataRequestedEventArgs;
struct ITargetApplicationChosenEventArgs;
struct IDataTransferManager;
struct IDataTransferManagerStatics;
struct StandardDataFormats;
struct DataPackagePropertySetView;
struct DataPackagePropertySet;
struct DataProviderDeferral;
struct DataProviderRequest;
struct OperationCompletedEventArgs;
struct DataPackageView;
struct DataPackage;
struct HtmlFormatHelper;
struct Clipboard;
struct DataRequestDeferral;
struct DataRequest;
struct DataRequestedEventArgs;
struct TargetApplicationChosenEventArgs;
struct DataTransferManager;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

struct IQuickLink;
struct IShareOperation;
struct IShareOperation2;
struct QuickLink;
struct ShareOperation;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Infrastructure {

struct ISetWindowWithWindowFactory;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

struct IResourceLoader;
struct IResourceLoader2;
struct IResourceLoaderStatics2;
struct ResourceLoader;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

struct IResourceManager;
struct IResourceManagerStatics;
struct IResourceQualifier;
struct IResourceContext;
struct IResourceContextStatics2;
struct IResourceCandidate;
struct INamedResource;
struct IResourceMap;
struct ResourceMap;
struct ResourceContext;
struct ResourceManager;
struct ResourceQualifier;
struct ResourceCandidate;
struct NamedResource;
struct ResourceMapIterator;
struct ResourceMapMapView;
struct ResourceMapMapViewIterator;
struct ResourceQualifierObservableMap;
struct ResourceQualifierMapView;
struct ResourceQualifierVectorView;
struct ResourceCandidateVectorView;
struct ResourceContextLanguagesVectorView;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

struct IResourceIndexer;
struct IResourceIndexerFactory;
struct IResourceIndexerFactory2;
struct IIndexedResourceQualifier;
struct IIndexedResourceCandidate;
struct IndexedResourceCandidate;
struct ResourceIndexer;
struct IndexedResourceQualifier;

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

struct ISearchPaneQueryLinguisticDetails;
struct ISearchPaneVisibilityChangedEventArgs;
struct ISearchPaneQueryChangedEventArgs;
struct ISearchPaneQuerySubmittedEventArgs;
struct ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails;
struct ISearchPaneResultSuggestionChosenEventArgs;
struct ISearchSuggestionCollection;
struct ISearchPaneSuggestionsRequestDeferral;
struct ISearchPaneSuggestionsRequest;
struct ISearchPaneSuggestionsRequestedEventArgs;
struct ILocalContentSuggestionSettings;
struct ISearchPaneStatics;
struct ISearchPaneStaticsWithHideThisApplication;
struct ISearchPane;
struct ISearchQueryLinguisticDetailsFactory;
struct ISearchQueryLinguisticDetails;
struct ISearchSuggestionsRequestDeferral;
struct ISearchSuggestionsRequest;
struct SearchPaneQueryLinguisticDetails;
struct SearchPaneVisibilityChangedEventArgs;
struct SearchPaneQueryChangedEventArgs;
struct SearchPaneQuerySubmittedEventArgs;
struct SearchPaneResultSuggestionChosenEventArgs;
struct SearchSuggestionCollection;
struct SearchPaneSuggestionsRequestDeferral;
struct SearchPaneSuggestionsRequest;
struct SearchPaneSuggestionsRequestedEventArgs;
struct LocalContentSuggestionSettings;
struct SearchPane;
struct SearchQueryLinguisticDetails;
struct SearchSuggestionsRequestDeferral;
struct SearchSuggestionsRequest;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

struct ILicenseChangedEventHandler;
struct ICurrentApp;
struct ICurrentAppWithConsumables;
struct ICurrentAppSimulator;
struct ICurrentAppSimulatorWithConsumables;
struct IPurchaseResults;
struct ILicenseInformation;
struct IProductLicense;
struct IListingInformation;
struct IProductListing;
struct IProductListingWithConsumables;
struct IUnfulfilledConsumable;
struct IProductPurchaseDisplayProperties;
struct IProductPurchaseDisplayPropertiesFactory;
struct LicenseInformation;
struct ListingInformation;
struct PurchaseResults;
struct ProductPurchaseDisplayProperties;
struct UnfulfilledConsumable;
struct ProductLicense;
struct ProductListing;
struct CurrentApp;
struct CurrentAppSimulator;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

struct IHtmlUtilities;
struct HtmlUtilities;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

struct IJsonValue;
struct IJsonValueStatics;
struct IJsonObject;
struct IJsonObjectWithDefaultValues;
struct IJsonObjectStatics;
struct IJsonArray;
struct IJsonArrayStatics;
struct IJsonErrorStatics2;
struct JsonArray;
struct JsonObject;
struct JsonValue;
struct JsonError;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

struct IPdfPageDimensions;
struct IPdfPageRenderOptions;
struct IPdfPage;
struct IPdfDocument;
struct IPdfDocumentStatics;
struct PdfPageRenderOptions;
struct PdfPageDimensions;
struct PdfPage;
struct PdfDocument;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

struct IWordSegmentsTokenizingHandler;
struct ISelectableWordSegmentsTokenizingHandler;
struct ISemanticTextQueryFactory;
struct ISemanticTextQuery;
struct IUnicodeCharactersStatics;
struct IAlternateWordForm;
struct ISelectableWordSegment;
struct IWordSegment;
struct IWordsSegmenter;
struct IWordsSegmenterFactory;
struct ISelectableWordsSegmenter;
struct ISelectableWordsSegmenterFactory;
struct SemanticTextQuery;
struct UnicodeCharacters;
struct AlternateWordForm;
struct WordSegment;
struct WordsSegmenter;
struct SelectableWordSegment;
struct SelectableWordsSegmenter;

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

struct IXmlNodeSelector;
struct IXmlNodeSerializer;
struct IXmlNode;
struct IXmlDomImplementation;
struct IXmlDocumentType;
struct IXmlAttribute;
struct IXmlDocumentFragment;
struct IXmlElement;
struct IDtdNotation;
struct IDtdEntity;
struct IXmlEntityReference;
struct IXmlProcessingInstruction;
struct IXmlCharacterData;
struct IXmlComment;
struct IXmlText;
struct IXmlCDataSection;
struct IXmlDocument;
struct IXmlNamedNodeMap;
struct IXmlNodeList;
struct IXmlLoadSettings;
struct IXmlDocumentIO;
struct IXmlDocumentStatics;
struct XmlNodeList;
struct XmlNamedNodeMap;
struct XmlDocument;
struct XmlAttribute;
struct XmlDocumentType;
struct XmlDomImplementation;
struct XmlElement;
struct XmlDocumentFragment;
struct XmlText;
struct XmlComment;
struct XmlProcessingInstruction;
struct XmlEntityReference;
struct XmlCDataSection;
struct XmlLoadSettings;
struct DtdNotation;
struct DtdEntity;

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

struct IXsltProcessor;
struct IXsltProcessorFactory;
struct XsltProcessor;

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

struct IDeviceUseDetails;
struct IDeviceServicingDetails;
struct DeviceUseDetails;
struct DeviceServicingDetails;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

struct IKnownDeviceTypesStatics;
struct IIOControlCode;
struct IIOControlCodeFactory;
struct ICustomDeviceStatics;
struct ICustomDevice;
struct KnownDeviceTypes;
struct IOControlCode;
struct CustomDevice;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

struct IEnclosureLocation;
struct IDeviceInformationUpdate;
struct IDeviceWatcher;
struct IDeviceInformationStatics;
struct IDeviceInformation;
struct IDeviceAccessChangedEventArgs;
struct IDeviceAccessInformation;
struct IDeviceAccessInformationStatics;
struct DeviceThumbnail;
struct EnclosureLocation;
struct DeviceInformationUpdate;
struct DeviceInformationCollection;
struct DeviceWatcher;
struct DeviceInformation;
struct DeviceAccessChangedEventArgs;
struct DeviceAccessInformation;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

struct IPnpObjectUpdate;
struct IPnpObjectWatcher;
struct IPnpObjectStatics;
struct IPnpObject;
struct PnpObjectUpdate;
struct PnpObjectCollection;
struct PnpObjectWatcher;
struct PnpObject;

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

struct IGeoshape;
struct IGeopoint;
struct IGeopointFactory;
struct IGeocoordinateSatelliteData;
struct IGeocoordinate;
struct IGeocoordinateWithPositionData;
struct IGeocoordinateWithPoint;
struct ICivicAddress;
struct IGeoposition;
struct IPositionChangedEventArgs;
struct IStatusChangedEventArgs;
struct IGeolocator;
struct IGeolocatorWithScalarAccuracy;
struct IGeocircle;
struct IGeocircleFactory;
struct Geopoint;
struct GeocoordinateSatelliteData;
struct Geocoordinate;
struct CivicAddress;
struct Geoposition;
struct PositionChangedEventArgs;
struct StatusChangedEventArgs;
struct Geolocator;
struct Geocircle;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

struct IGeofenceFactory;
struct IGeofence;
struct IGeofenceStateChangeReport;
struct IGeofenceMonitorStatics;
struct IGeofenceMonitor;
struct Geofence;
struct GeofenceMonitor;
struct GeofenceStateChangeReport;

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

struct IHidDeviceStatics;
struct IHidBooleanControlDescription;
struct IHidNumericControlDescription;
struct IHidCollection;
struct IHidInputReport;
struct IHidOutputReport;
struct IHidFeatureReport;
struct IHidInputReportReceivedEventArgs;
struct IHidBooleanControl;
struct IHidNumericControl;
struct IHidDevice;
struct HidDevice;
struct HidInputReport;
struct HidFeatureReport;
struct HidOutputReport;
struct HidBooleanControlDescription;
struct HidNumericControlDescription;
struct HidInputReportReceivedEventArgs;
struct HidCollection;
struct HidBooleanControl;
struct HidNumericControl;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

struct IMouseCapabilities;
struct IKeyboardCapabilities;
struct ITouchCapabilities;
struct IPointerDeviceStatics;
struct IPointerDevice;
struct IMouseEventArgs;
struct IMouseDevice;
struct IMouseDeviceStatics;
struct PointerDevice;
struct MouseDevice;
struct MouseEventArgs;
struct MouseCapabilities;
struct KeyboardCapabilities;
struct TouchCapabilities;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

struct IUnifiedPosErrorData;
struct IBarcodeScannerStatusUpdatedEventArgs;
struct IBarcodeSymbologiesStatics;
struct IBarcodeScannerDataReceivedEventArgs;
struct IBarcodeScannerReport;
struct IBarcodeScannerErrorOccurredEventArgs;
struct IBarcodeScannerImagePreviewReceivedEventArgs;
struct IBarcodeScannerCapabilities;
struct IBarcodeScannerStatics;
struct IBarcodeScanner;
struct IMagneticStripeReaderEncryptionAlgorithmsStatics;
struct IMagneticStripeReaderCardTypesStatics;
struct IMagneticStripeReaderTrackData;
struct IMagneticStripeReaderReport;
struct IMagneticStripeReaderBankCardDataReceivedEventArgs;
struct IMagneticStripeReaderAamvaCardDataReceivedEventArgs;
struct IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
struct IMagneticStripeReaderErrorOccurredEventArgs;
struct IMagneticStripeReaderStatusUpdatedEventArgs;
struct IMagneticStripeReaderCapabilities;
struct IMagneticStripeReaderStatics;
struct IMagneticStripeReader;
struct IClaimedBarcodeScanner;
struct IClaimedMagneticStripeReader;
struct UnifiedPosErrorData;
struct BarcodeScannerStatusUpdatedEventArgs;
struct BarcodeSymbologies;
struct BarcodeScannerReport;
struct BarcodeScannerDataReceivedEventArgs;
struct BarcodeScannerErrorOccurredEventArgs;
struct BarcodeScannerImagePreviewReceivedEventArgs;
struct BarcodeScannerCapabilities;
struct BarcodeScanner;
struct ClaimedBarcodeScanner;
struct MagneticStripeReaderEncryptionAlgorithms;
struct MagneticStripeReaderCardTypes;
struct MagneticStripeReaderTrackData;
struct MagneticStripeReaderReport;
struct MagneticStripeReaderBankCardDataReceivedEventArgs;
struct MagneticStripeReaderAamvaCardDataReceivedEventArgs;
struct MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
struct MagneticStripeReaderErrorOccurredEventArgs;
struct MagneticStripeReaderStatusUpdatedEventArgs;
struct MagneticStripeReaderCapabilities;
struct ClaimedMagneticStripeReader;
struct MagneticStripeReader;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

struct IStorageDeviceStatics;
struct IServiceDeviceStatics;
struct StorageDevice;
struct ServiceDevice;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

struct IPrintTaskConfigurationSaveRequestedDeferral;
struct IPrintTaskConfigurationSaveRequest;
struct IPrintTaskConfigurationSaveRequestedEventArgs;
struct IPrintTaskConfiguration;
struct IPrintNotificationEventDetails;
struct IPrintExtensionContextStatic;
struct PrintTaskConfigurationSaveRequestedDeferral;
struct PrintTaskConfigurationSaveRequest;
struct PrintTaskConfigurationSaveRequestedEventArgs;
struct PrintTaskConfiguration;
struct PrintNotificationEventDetails;
struct PrintExtensionContext;

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

struct IAccelerometerStatics;
struct IAccelerometer;
struct IAccelerometerReading;
struct IAccelerometerReadingChangedEventArgs;
struct IAccelerometerShakenEventArgs;
struct IInclinometerStatics;
struct IInclinometer;
struct IInclinometerReading;
struct IInclinometerReadingYawAccuracy;
struct IInclinometerReadingChangedEventArgs;
struct IGyrometerStatics;
struct IGyrometer;
struct IGyrometerReading;
struct IGyrometerReadingChangedEventArgs;
struct ICompassStatics;
struct ICompass;
struct ICompassReading;
struct ICompassReadingHeadingAccuracy;
struct ICompassReadingChangedEventArgs;
struct ILightSensorStatics;
struct ILightSensor;
struct ILightSensorReading;
struct ILightSensorReadingChangedEventArgs;
struct ISensorRotationMatrix;
struct ISensorQuaternion;
struct IOrientationSensorStatics;
struct IOrientationSensor;
struct IOrientationSensorReading;
struct IOrientationSensorReadingYawAccuracy;
struct IOrientationSensorReadingChangedEventArgs;
struct ISimpleOrientationSensorStatics;
struct ISimpleOrientationSensor;
struct ISimpleOrientationSensorOrientationChangedEventArgs;
struct Accelerometer;
struct AccelerometerReading;
struct AccelerometerReadingChangedEventArgs;
struct AccelerometerShakenEventArgs;
struct Inclinometer;
struct InclinometerReading;
struct InclinometerReadingChangedEventArgs;
struct Gyrometer;
struct GyrometerReading;
struct GyrometerReadingChangedEventArgs;
struct Compass;
struct CompassReading;
struct CompassReadingChangedEventArgs;
struct LightSensor;
struct LightSensorReading;
struct LightSensorReadingChangedEventArgs;
struct SensorRotationMatrix;
struct SensorQuaternion;
struct OrientationSensor;
struct OrientationSensorReading;
struct OrientationSensorReadingChangedEventArgs;
struct SimpleOrientationSensor;
struct SimpleOrientationSensorOrientationChangedEventArgs;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

struct ISmartCardPinResetHandler;
struct ISmartCardReaderStatics;
struct ISmartCardReader;
struct ICardAddedEventArgs;
struct ICardRemovedEventArgs;
struct ISmartCard;
struct ISmartCardProvisioningStatics;
struct ISmartCardProvisioning;
struct ISmartCardPinResetRequest;
struct ISmartCardPinResetDeferral;
struct ISmartCardPinPolicy;
struct ISmartCardChallengeContext;
struct SmartCardReader;
struct SmartCard;
struct CardAddedEventArgs;
struct CardRemovedEventArgs;
struct SmartCardProvisioning;
struct SmartCardPinPolicy;
struct SmartCardChallengeContext;
struct SmartCardPinResetRequest;
struct SmartCardPinResetDeferral;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

struct ISmsMessageReceivedEventHandler;
struct ISmsDeviceStatusChangedEventHandler;
struct ISmsMessage;
struct ISmsBinaryMessage;
struct ISmsTextMessage;
struct ISmsTextMessageStatics;
struct ISmsDeviceMessageStore;
struct ISmsMessageReceivedEventArgs;
struct ISmsDeviceStatics;
struct ISmsDeviceStatics2;
struct ISmsDevice;
struct ISmsReceivedEventDetails;
struct ISmsReceivedEventDetails2;
struct SmsBinaryMessage;
struct SmsTextMessage;
struct DeleteSmsMessageOperation;
struct DeleteSmsMessagesOperation;
struct GetSmsMessageOperation;
struct GetSmsMessagesOperation;
struct SmsDeviceMessageStore;
struct SendSmsMessageOperation;
struct SmsMessageReceivedEventArgs;
struct SmsDevice;
struct GetSmsDeviceOperation;
struct SmsReceivedEventDetails;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

struct IUsbControlRequestType;
struct IUsbSetupPacketFactory;
struct IUsbSetupPacket;
struct IUsbDeviceClass;
struct IUsbDeviceClassesStatics;
struct IUsbDeviceClasses;
struct IUsbDeviceStatics;
struct IUsbDeviceDescriptor;
struct IUsbConfigurationDescriptor;
struct IUsbConfigurationDescriptorStatics;
struct IUsbInterfaceDescriptor;
struct IUsbInterfaceDescriptorStatics;
struct IUsbEndpointDescriptor;
struct IUsbEndpointDescriptorStatics;
struct IUsbDescriptor;
struct IUsbInterruptInEventArgs;
struct IUsbBulkInPipe;
struct IUsbInterruptInPipe;
struct IUsbBulkOutPipe;
struct IUsbInterruptOutPipe;
struct IUsbConfiguration;
struct IUsbInterface;
struct IUsbInterfaceSetting;
struct IUsbBulkInEndpointDescriptor;
struct IUsbInterruptInEndpointDescriptor;
struct IUsbBulkOutEndpointDescriptor;
struct IUsbInterruptOutEndpointDescriptor;
struct IUsbDevice;
struct UsbControlRequestType;
struct UsbSetupPacket;
struct UsbDeviceClass;
struct UsbDeviceClasses;
struct UsbDevice;
struct UsbInterface;
struct UsbDeviceDescriptor;
struct UsbConfiguration;
struct UsbDescriptor;
struct UsbConfigurationDescriptor;
struct UsbInterfaceDescriptor;
struct UsbBulkInEndpointDescriptor;
struct UsbInterruptInEndpointDescriptor;
struct UsbBulkOutEndpointDescriptor;
struct UsbInterruptOutEndpointDescriptor;
struct UsbEndpointDescriptor;
struct UsbInterruptInEventArgs;
struct UsbInterruptInPipe;
struct UsbBulkInPipe;
struct UsbBulkOutPipe;
struct UsbInterruptOutPipe;
struct UsbInterfaceSetting;

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

struct IWiFiDirectDeviceStatics;
struct IWiFiDirectDevice;
struct WiFiDirectDevice;

}}}}

namespace Modern { namespace Windows { namespace Foundation {

struct IAsyncActionCompletedHandler;
struct IUriRuntimeClass;
struct IUriRuntimeClassWithAbsoluteCanonicalUri;
struct IUriEscapeStatics;
struct IUriRuntimeClassFactory;
struct IWwwFormUrlDecoderEntry;
struct IWwwFormUrlDecoderRuntimeClass;
struct IWwwFormUrlDecoderRuntimeClassFactory;
struct IGetActivationFactory;
struct IClosable;
struct IPropertyValue;
struct IPropertyValueStatics;
struct IStringable;
struct IAsyncAction;
struct WwwFormUrlDecoder;
struct Uri;
struct WwwFormUrlDecoderEntry;
struct PropertyValue;

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

struct IPropertySet;
struct PropertySet;

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

struct ITracingStatusChangedEventArgs;
struct IAsyncCausalityTracerStatics;
struct IErrorReportingSettings;
struct ILoggingChannel;
struct ILoggingChannelFactory;
struct ILoggingActivity;
struct ILoggingActivityFactory;
struct ILoggingSession;
struct ILoggingSessionFactory;
struct ILogFileGeneratedEventArgs;
struct IFileLoggingSession;
struct IFileLoggingSessionFactory;
struct TracingStatusChangedEventArgs;
struct AsyncCausalityTracer;
struct RuntimeBrokerErrorSettings;
struct LoggingChannel;
struct LoggingActivity;
struct LoggingSession;
struct LogFileGeneratedEventArgs;
struct FileLoggingSession;

}}}}

namespace Modern { namespace Windows { namespace Globalization {

struct IJapanesePhoneticAnalyzerStatics;
struct IJapanesePhoneme;
struct ICalendarIdentifiersStatics;
struct IClockIdentifiersStatics;
struct INumeralSystemIdentifiersStatics;
struct ICurrencyIdentifiersStatics;
struct IGeographicRegion;
struct IGeographicRegionFactory;
struct IGeographicRegionStatics;
struct ILanguage;
struct ILanguageExtensionSubtags;
struct ILanguageFactory;
struct ILanguageStatics;
struct ICalendar;
struct ICalendarFactory2;
struct ITimeZoneOnCalendar;
struct ICalendarFactory;
struct IApplicationLanguagesStatics;
struct JapanesePhoneme;
struct JapanesePhoneticAnalyzer;
struct CalendarIdentifiers;
struct ClockIdentifiers;
struct NumeralSystemIdentifiers;
struct CurrencyIdentifiers;
struct GeographicRegion;
struct Language;
struct Calendar;
struct ApplicationLanguages;

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

struct ICharacterGrouping;
struct ICharacterGroupings;
struct CharacterGrouping;
struct CharacterGroupings;

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

struct IDateTimeFormatter;
struct IDateTimeFormatterFactory;
struct IDateTimeFormatterStatics;
struct IDateTimeFormatter2;
struct DateTimeFormatter;

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

struct ILanguageFontGroup;
struct ILanguageFontGroupFactory;
struct ILanguageFont;
struct LanguageFont;
struct LanguageFontGroup;

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

struct INumberRounder;
struct ISignificantDigitsNumberRounder;
struct IIncrementNumberRounder;
struct INumberFormatter;
struct INumberFormatter2;
struct INumberParser;
struct INumberFormatterOptions;
struct ISignificantDigitsOption;
struct INumberRounderOption;
struct ISignedZeroOption;
struct IDecimalFormatterFactory;
struct IPercentFormatterFactory;
struct IPermilleFormatterFactory;
struct ICurrencyFormatterFactory;
struct ICurrencyFormatter;
struct ICurrencyFormatter2;
struct INumeralSystemTranslatorFactory;
struct INumeralSystemTranslator;
struct SignificantDigitsNumberRounder;
struct IncrementNumberRounder;
struct DecimalFormatter;
struct PercentFormatter;
struct PermilleFormatter;
struct CurrencyFormatter;
struct NumeralSystemTranslator;

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

struct IDisplayInformationStatics;
struct IDisplayInformation;
struct DisplayInformation;

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

struct IBitmapTransform;
struct IBitmapTypedValue;
struct IBitmapTypedValueFactory;
struct IBitmapPropertiesView;
struct IBitmapProperties;
struct IPixelDataProvider;
struct IBitmapFrame;
struct IBitmapCodecInformation;
struct IBitmapDecoderStatics;
struct IBitmapDecoder;
struct IBitmapEncoderStatics;
struct IBitmapEncoder;
struct BitmapTransform;
struct BitmapTypedValue;
struct BitmapPropertySet;
struct BitmapPropertiesView;
struct BitmapProperties;
struct PixelDataProvider;
struct ImageStream;
struct BitmapFrame;
struct BitmapCodecInformation;
struct BitmapDecoder;
struct BitmapEncoder;

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

struct IPrintTaskSourceRequestedHandler;
struct IPrintTaskOptionsCoreProperties;
struct IPrintTaskOptionsCoreUIConfiguration;
struct IPrintTaskOptionsCore;
struct IStandardPrintTaskOptionsStatic;
struct IPrintDocumentSource;
struct IPrintTaskProgressingEventArgs;
struct IPrintTaskCompletedEventArgs;
struct IPrintTask;
struct IPrintTaskTargetDeviceSupport;
struct IPrintTaskSourceRequestedDeferral;
struct IPrintTaskSourceRequestedArgs;
struct IPrintTaskRequestedDeferral;
struct IPrintTaskRequest;
struct IPrintTaskRequestedEventArgs;
struct IPrintManagerStatic;
struct IPrintManager;
struct PrintTaskOptions;
struct StandardPrintTaskOptions;
struct PrintTaskProgressingEventArgs;
struct PrintTaskCompletedEventArgs;
struct PrintTask;
struct PrintTaskSourceRequestedDeferral;
struct PrintTaskSourceRequestedArgs;
struct PrintTaskRequestedDeferral;
struct PrintTaskRequest;
struct PrintTaskRequestedEventArgs;
struct PrintManager;

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

struct IPrintOptionDetails;
struct IPrintNumberOptionDetails;
struct IPrintTextOptionDetails;
struct IPrintItemListOptionDetails;
struct IPrintCustomOptionDetails;
struct IPrintCustomTextOptionDetails;
struct IPrintCustomItemDetails;
struct IPrintCustomItemListOptionDetails;
struct IPrintTaskOptionChangedEventArgs;
struct IPrintTaskOptionDetails;
struct IPrintTaskOptionDetailsStatic;
struct PrintCopiesOptionDetails;
struct PrintMediaSizeOptionDetails;
struct PrintMediaTypeOptionDetails;
struct PrintOrientationOptionDetails;
struct PrintQualityOptionDetails;
struct PrintColorModeOptionDetails;
struct PrintDuplexOptionDetails;
struct PrintCollationOptionDetails;
struct PrintStapleOptionDetails;
struct PrintHolePunchOptionDetails;
struct PrintBindingOptionDetails;
struct PrintCustomTextOptionDetails;
struct PrintCustomItemDetails;
struct PrintCustomItemListOptionDetails;
struct PrintTaskOptionChangedEventArgs;
struct PrintTaskOptionDetails;

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

struct IApplicationDataManagerStatics;
struct IApplicationDataManager;
struct ApplicationDataManager;

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

struct IDeploymentResult;
struct IPackageUserInformation;
struct IPackageManager;
struct IPackageManager2;
struct DeploymentResult;
struct PackageUserInformation;
struct PackageManager;

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

struct IWorkplaceSettingsStatics;
struct WorkplaceSettings;

}}}}

namespace Modern { namespace Windows { namespace Media {

struct IMediaMarker;
struct IMediaMarkers;
struct IMediaMarkerTypesStatics;
struct IMusicDisplayProperties;
struct IVideoDisplayProperties;
struct IImageDisplayProperties;
struct ISystemMediaTransportControlsDisplayUpdater;
struct ISystemMediaTransportControlsButtonPressedEventArgs;
struct ISystemMediaTransportControlsPropertyChangedEventArgs;
struct ISystemMediaTransportControls;
struct ISystemMediaTransportControlsStatics;
struct IMediaExtension;
struct IMediaExtensionManager;
struct IVideoEffectsStatics;
struct MediaMarkerTypes;
struct MusicDisplayProperties;
struct VideoDisplayProperties;
struct ImageDisplayProperties;
struct SystemMediaTransportControlsDisplayUpdater;
struct SystemMediaTransportControlsButtonPressedEventArgs;
struct SystemMediaTransportControlsPropertyChangedEventArgs;
struct SystemMediaTransportControls;
struct MediaExtensionManager;
struct VideoEffects;

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

struct IMediaCaptureFailedEventHandler;
struct IRecordLimitationExceededEventHandler;
struct ICameraCaptureUIPhotoCaptureSettings;
struct ICameraCaptureUIVideoCaptureSettings;
struct ICameraCaptureUI;
struct ICameraOptionsUIStatics;
struct IMediaCaptureFailedEventArgs;
struct IMediaCaptureInitializationSettings;
struct IMediaCaptureInitializationSettings2;
struct IMediaCapture;
struct IMediaCapture2;
struct ILowLagPhotoCapture;
struct ILowLagMediaRecording;
struct ILowLagPhotoSequenceCapture;
struct IPhotoCapturedEventArgs;
struct ICapturedPhoto;
struct ICapturedFrame;
struct IMediaCaptureVideoPreview;
struct IMediaCaptureSettings;
struct IMediaCaptureSettings2;
struct CameraCaptureUIPhotoCaptureSettings;
struct CameraCaptureUIVideoCaptureSettings;
struct CameraCaptureUI;
struct CameraOptionsUI;
struct MediaCaptureFailedEventArgs;
struct MediaCapture;
struct MediaCaptureInitializationSettings;
struct MediaCaptureSettings;
struct LowLagMediaRecording;
struct LowLagPhotoCapture;
struct LowLagPhotoSequenceCapture;
struct CapturedPhoto;
struct PhotoCapturedEventArgs;
struct CapturedFrame;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

struct IRatedContentDescription;
struct IRatedContentDescriptionFactory;
struct IContentRestrictionsBrowsePolicy;
struct IRatedContentRestrictions;
struct IRatedContentRestrictionsFactory;
struct RatedContentDescription;
struct ContentRestrictionsBrowsePolicy;
struct RatedContentRestrictions;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

struct IMediaStreamDescriptor;
struct IAudioStreamDescriptor;
struct IAudioStreamDescriptorFactory;
struct IVideoStreamDescriptor;
struct IVideoStreamDescriptorFactory;
struct IMediaSource;
struct IMediaStreamSource;
struct IMediaStreamSourceFactory;
struct IMediaStreamSample;
struct IMediaStreamSampleStatics;
struct IMediaStreamSampleProtectionProperties;
struct IMediaStreamSourceClosedRequest;
struct IMediaStreamSourceClosedEventArgs;
struct IMediaStreamSourceStartingRequestDeferral;
struct IMediaStreamSourceStartingRequest;
struct IMediaStreamSourceStartingEventArgs;
struct IMediaStreamSourceSampleRequestDeferral;
struct IMediaStreamSourceSampleRequest;
struct IMediaStreamSourceSampleRequestedEventArgs;
struct IMediaStreamSourceSwitchStreamsRequestDeferral;
struct IMediaStreamSourceSwitchStreamsRequest;
struct IMediaStreamSourceSwitchStreamsRequestedEventArgs;
struct AudioStreamDescriptor;
struct VideoStreamDescriptor;
struct MediaStreamSource;
struct MediaStreamSourceClosedEventArgs;
struct MediaStreamSourceStartingEventArgs;
struct MediaStreamSourceSampleRequestedEventArgs;
struct MediaStreamSourceSwitchStreamsRequestedEventArgs;
struct MediaStreamSamplePropertySet;
struct MediaStreamSample;
struct MediaStreamSampleProtectionProperties;
struct MediaStreamSourceClosedRequest;
struct MediaStreamSourceStartingRequestDeferral;
struct MediaStreamSourceStartingRequest;
struct MediaStreamSourceSampleRequestDeferral;
struct MediaStreamSourceSampleRequest;
struct MediaStreamSourceSwitchStreamsRequestDeferral;
struct MediaStreamSourceSwitchStreamsRequest;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

struct ICallControlEventHandler;
struct IDialRequestedEventHandler;
struct IRedialRequestedEventHandler;
struct IKeypadPressedEventHandler;
struct IDialRequestedEventArgs;
struct IRedialRequestedEventArgs;
struct IKeypadPressedEventArgs;
struct ICallControl;
struct ICallControlStatics;
struct IDefaultAudioDeviceChangedEventArgs;
struct IMediaDeviceStatics;
struct ISceneModeControl;
struct ITorchControl;
struct IFlashControl;
struct IExposureCompensationControl;
struct IIsoSpeedControl;
struct IWhiteBalanceControl;
struct IExposureControl;
struct IFocusControl;
struct IRegionOfInterest;
struct IRegionsOfInterestControl;
struct IMediaDeviceController;
struct IAudioDeviceController;
struct IVideoDeviceController;
struct IAdvancedVideoCaptureDeviceController2;
struct IMediaDeviceControl;
struct IMediaDeviceControlCapabilities;
struct IAdvancedVideoCaptureDeviceController;
struct ILowLagPhotoSequenceControl;
struct ILowLagPhotoControl;
struct DialRequestedEventArgs;
struct RedialRequestedEventArgs;
struct KeypadPressedEventArgs;
struct CallControl;
struct DefaultAudioCaptureDeviceChangedEventArgs;
struct DefaultAudioRenderDeviceChangedEventArgs;
struct MediaDevice;
struct AudioDeviceController;
struct VideoDeviceController;
struct SceneModeControl;
struct TorchControl;
struct FlashControl;
struct ExposureCompensationControl;
struct IsoSpeedControl;
struct WhiteBalanceControl;
struct ExposureControl;
struct FocusControl;
struct RegionOfInterest;
struct RegionsOfInterestControl;
struct MediaDeviceControl;
struct LowLagPhotoSequenceControl;
struct LowLagPhotoControl;
struct MediaDeviceControlCapabilities;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

struct IAudioEffect;
struct IAudioEffectsManagerStatics;
struct IAudioRenderEffectsManager;
struct IAudioCaptureEffectsManager;
struct AudioEffect;
struct AudioRenderEffectsManager;
struct AudioCaptureEffectsManager;
struct AudioEffectsManager;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

struct IMediaRatio;
struct IMediaEncodingProperties;
struct IAudioEncodingProperties;
struct IAudioEncodingPropertiesWithFormatUserData;
struct IAudioEncodingPropertiesStatics;
struct IVideoEncodingProperties;
struct IMediaEncodingSubtypesStatics;
struct IH264ProfileIdsStatics;
struct IMpeg2ProfileIdsStatics;
struct IVideoEncodingProperties2;
struct IVideoEncodingPropertiesStatics;
struct IImageEncodingProperties;
struct IImageEncodingPropertiesStatics;
struct IImageEncodingPropertiesStatics2;
struct IContainerEncodingProperties;
struct IMediaEncodingProfileStatics;
struct IMediaEncodingProfileStatics2;
struct IMediaEncodingProfile;
struct MediaRatio;
struct MediaPropertySet;
struct AudioEncodingProperties;
struct MediaEncodingSubtypes;
struct H264ProfileIds;
struct Mpeg2ProfileIds;
struct VideoEncodingProperties;
struct ImageEncodingProperties;
struct ContainerEncodingProperties;
struct MediaEncodingProfile;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

struct ISourceChangeRequestedEventArgs;
struct IPlaybackRateChangeRequestedEventArgs;
struct ICurrentTimeChangeRequestedEventArgs;
struct IMuteChangeRequestedEventArgs;
struct IVolumeChangeRequestedEventArgs;
struct IPlayToReceiver;
struct IPlayToSource;
struct IPlayToSourceWithPreferredSourceUri;
struct IPlayToConnectionStateChangedEventArgs;
struct IPlayToConnectionTransferredEventArgs;
struct IPlayToConnectionErrorEventArgs;
struct IPlayToConnection;
struct IPlayToSourceSelectedEventArgs;
struct IPlayToSourceDeferral;
struct IPlayToSourceRequest;
struct IPlayToSourceRequestedEventArgs;
struct IPlayToManager;
struct IPlayToManagerStatics;
struct SourceChangeRequestedEventArgs;
struct PlaybackRateChangeRequestedEventArgs;
struct CurrentTimeChangeRequestedEventArgs;
struct MuteChangeRequestedEventArgs;
struct VolumeChangeRequestedEventArgs;
struct PlayToReceiver;
struct PlayToConnection;
struct PlayToSource;
struct PlayToConnectionStateChangedEventArgs;
struct PlayToConnectionTransferredEventArgs;
struct PlayToConnectionErrorEventArgs;
struct PlayToSourceSelectedEventArgs;
struct PlayToSourceDeferral;
struct PlayToSourceRequest;
struct PlayToSourceRequestedEventArgs;
struct PlayToManager;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

struct IPlaylist;
struct IPlaylistStatics;
struct Playlist;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

struct IServiceRequestedEventHandler;
struct IRebootNeededEventHandler;
struct IComponentLoadFailedEventHandler;
struct IMediaProtectionManager;
struct IMediaProtectionServiceCompletion;
struct IServiceRequestedEventArgs;
struct IMediaProtectionServiceRequest;
struct IComponentLoadFailedEventArgs;
struct IRevocationAndRenewalInformation;
struct IRevocationAndRenewalItem;
struct IComponentRenewalStatics;
struct MediaProtectionManager;
struct ServiceRequestedEventArgs;
struct ComponentLoadFailedEventArgs;
struct MediaProtectionServiceCompletion;
struct RevocationAndRenewalInformation;
struct RevocationAndRenewalItem;
struct ComponentRenewal;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

struct IVoiceInformation;
struct IInstalledVoicesStatic;
struct ISpeechSynthesisStream;
struct ISpeechSynthesizer;
struct VoiceInformation;
struct SpeechSynthesisStream;
struct SpeechSynthesizer;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

struct IDeviceControllerFinderHandler;
struct IConnectionStatusHandler;
struct IDeviceController;
struct IBasicDevice;
struct IActiveBasicDevice;
struct IDeviceIcon;
struct IActiveBasicDeviceStatics;
struct IDevicePair;
struct ITransportParametersUpdateHandler;
struct IRenderingParametersUpdateHandler;
struct IMediaRenderer;
struct IMediaRendererActionInformation;
struct ITransportParameters;
struct IMediaRendererFactory;
struct IStreamSelectorStatics;
struct BasicDevice;
struct ActiveBasicDevice;
struct DevicePair;
struct DeviceController;
struct MediaRenderer;
struct CreateMediaRendererOperation;
struct StreamSelector;

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

struct IMediaTranscoder2;
struct IMediaTranscoder;
struct IPrepareTranscodeResult;
struct PrepareTranscodeResult;
struct MediaTranscoder;

}}}}

namespace Modern { namespace Windows { namespace Networking {

struct IHostNameStatics;
struct IHostName;
struct IHostNameFactory;
struct IEndpointPair;
struct IEndpointPairFactory;
struct EndpointPair;
struct HostName;

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

struct IBackgroundTransferBase;
struct IUnconstrainedTransferRequestResult;
struct IBackgroundDownloaderUserConsent;
struct IBackgroundUploaderUserConsent;
struct IBackgroundDownloader;
struct IBackgroundDownloader2;
struct IBackgroundUploader;
struct IBackgroundUploader2;
struct IBackgroundTransferOperation;
struct IBackgroundTransferOperationPriority;
struct IDownloadOperation;
struct IDownloadOperation2;
struct IUploadOperation;
struct IUploadOperation2;
struct IBackgroundDownloaderStaticMethods;
struct IBackgroundDownloaderStaticMethods2;
struct IBackgroundUploaderStaticMethods;
struct IBackgroundUploaderStaticMethods2;
struct IResponseInformation;
struct IBackgroundTransferErrorStaticMethods;
struct IBackgroundTransferContentPart;
struct IBackgroundTransferContentPartFactory;
struct IBackgroundTransferGroup;
struct IBackgroundTransferGroupStatics;
struct IContentPrefetcherTime;
struct IContentPrefetcher;
struct DownloadOperation;
struct UnconstrainedTransferRequestResult;
struct UploadOperation;
struct BackgroundTransferGroup;
struct BackgroundTransferContentPart;
struct ResponseInformation;
struct BackgroundDownloader;
struct BackgroundUploader;
struct BackgroundTransferError;
struct ContentPrefetcher;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

struct INetworkStatusChangedEventHandler;
struct IDataPlanUsage;
struct IDataPlanStatus;
struct IConnectionCost;
struct INetworkSecuritySettings;
struct IConnectionProfile;
struct IWwanConnectionProfileDetails;
struct IWlanConnectionProfileDetails;
struct IConnectivityInterval;
struct INetworkUsage;
struct IConnectionProfile2;
struct ILanIdentifierData;
struct ILanIdentifier;
struct INetworkInformationStatics;
struct IConnectionProfileFilter;
struct INetworkInformationStatics2;
struct INetworkItem;
struct INetworkAdapter;
struct IIPInformation;
struct IProxyConfiguration;
struct IConnectionSession;
struct IRoutePolicy;
struct IRoutePolicyFactory;
struct ICellularApnContext;
struct IConnectivityManagerStatics;
struct INetworkStateChangeEventDetails;
struct IPInformation;
struct DataPlanUsage;
struct ConnectionCost;
struct DataPlanStatus;
struct NetworkAdapter;
struct NetworkSecuritySettings;
struct WwanConnectionProfileDetails;
struct WlanConnectionProfileDetails;
struct NetworkUsage;
struct ConnectivityInterval;
struct LanIdentifierData;
struct ConnectionProfile;
struct LanIdentifier;
struct ProxyConfiguration;
struct ConnectionProfileFilter;
struct NetworkItem;
struct RoutePolicy;
struct CellularApnContext;
struct ConnectionSession;
struct NetworkInformation;
struct ConnectivityManager;
struct NetworkStateChangeEventDetails;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

struct IMobileBroadbandAccountStatics;
struct IMobileBroadbandAccount;
struct IMobileBroadbandAccount2;
struct IMobileBroadbandDeviceInformation;
struct IMobileBroadbandNetwork;
struct INetworkOperatorNotificationEventDetails;
struct INetworkOperatorTetheringEntitlementCheck;
struct INetworkOperatorTetheringAccessPointConfiguration;
struct INetworkOperatorTetheringOperationResult;
struct INetworkOperatorTetheringManagerStatics;
struct INetworkOperatorTetheringManager;
struct IMobileBroadbandAccountEventArgs;
struct IMobileBroadbandAccountUpdatedEventArgs;
struct IMobileBroadbandAccountWatcher;
struct IHotspotAuthenticationEventDetails;
struct IHotspotAuthenticationContextStatics;
struct IHotspotAuthenticationContext;
struct IHotspotCredentialsAuthenticationResult;
struct IHotspotAuthenticationContext2;
struct IProvisionFromXmlDocumentResults;
struct IProvisionedProfile;
struct IProvisioningAgent;
struct IProvisioningAgentStaticMethods;
struct IUssdMessage;
struct IUssdMessageFactory;
struct IUssdReply;
struct IUssdSession;
struct IUssdSessionStatics;
struct MobileBroadbandAccount;
struct MobileBroadbandNetwork;
struct MobileBroadbandDeviceInformation;
struct NetworkOperatorNotificationEventDetails;
struct NetworkOperatorTetheringAccessPointConfiguration;
struct NetworkOperatorTetheringOperationResult;
struct NetworkOperatorTetheringManager;
struct MobileBroadbandAccountEventArgs;
struct MobileBroadbandAccountUpdatedEventArgs;
struct MobileBroadbandAccountWatcher;
struct HotspotAuthenticationEventDetails;
struct HotspotAuthenticationContext;
struct HotspotCredentialsAuthenticationResult;
struct ProvisionFromXmlDocumentResults;
struct ProvisionedProfile;
struct ProvisioningAgent;
struct UssdMessage;
struct UssdReply;
struct UssdSession;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

struct IMessageReceivedHandler;
struct IMessageTransmittedHandler;
struct IDeviceArrivedEventHandler;
struct IDeviceDepartedEventHandler;
struct IProximityMessage;
struct IProximityDevice;
struct IProximityDeviceStatics;
struct ITriggeredConnectionStateChangedEventArgs;
struct IPeerInformation;
struct IPeerInformation3;
struct IConnectionRequestedEventArgs;
struct IPeerWatcher;
struct IPeerFinderStatics;
struct IPeerFinderStatics2;
struct ProximityMessage;
struct ProximityDevice;
struct TriggeredConnectionStateChangedEventArgs;
struct PeerInformation;
struct ConnectionRequestedEventArgs;
struct PeerWatcher;
struct PeerFinder;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

struct IPushNotificationChannelManagerStatics;
struct IPushNotificationChannel;
struct IPushNotificationReceivedEventArgs;
struct IRawNotification;
struct PushNotificationChannel;
struct PushNotificationReceivedEventArgs;
struct RawNotification;
struct PushNotificationChannelManager;

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

struct IControlChannelTrigger;
struct IControlChannelTriggerFactory;
struct IControlChannelTriggerEventDetails;
struct IControlChannelTriggerResetEventDetails;
struct IDatagramSocketMessageReceivedEventArgs;
struct IMessageWebSocketMessageReceivedEventArgs;
struct IWebSocketClosedEventArgs;
struct IDatagramSocketInformation;
struct IDatagramSocketControl;
struct IDatagramSocketControl2;
struct IDatagramSocketStatics;
struct IDatagramSocket;
struct IDatagramSocket2;
struct IStreamSocketInformation;
struct IStreamSocketInformation2;
struct IStreamSocketControl;
struct IStreamSocketControl2;
struct IStreamSocket;
struct IStreamSocket2;
struct IStreamSocketListenerControl;
struct IStreamSocketListenerInformation;
struct IStreamSocketListenerConnectionReceivedEventArgs;
struct IStreamSocketListener;
struct IStreamSocketListener2;
struct IWebSocketControl;
struct IWebSocketInformation;
struct IWebSocket;
struct IMessageWebSocketControl;
struct IMessageWebSocket;
struct IStreamWebSocketControl;
struct IStreamWebSocket;
struct ISocketErrorStatics;
struct IWebSocketErrorStatics;
struct ControlChannelTrigger;
struct DatagramSocketControl;
struct DatagramSocketInformation;
struct DatagramSocket;
struct DatagramSocketMessageReceivedEventArgs;
struct StreamSocketControl;
struct StreamSocketInformation;
struct StreamSocket;
struct StreamSocketListenerControl;
struct StreamSocketListenerInformation;
struct StreamSocketListener;
struct StreamSocketListenerConnectionReceivedEventArgs;
struct WebSocketClosedEventArgs;
struct MessageWebSocketControl;
struct MessageWebSocketInformation;
struct MessageWebSocket;
struct MessageWebSocketMessageReceivedEventArgs;
struct StreamWebSocketControl;
struct StreamWebSocketInformation;
struct StreamWebSocket;
struct WebSocketKeepAlive;
struct SocketError;
struct WebSocketError;

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

struct IOnlineIdServiceTicketRequest;
struct IOnlineIdServiceTicketRequestFactory;
struct IOnlineIdServiceTicket;
struct IUserIdentity;
struct IOnlineIdAuthenticator;
struct OnlineIdServiceTicketRequest;
struct OnlineIdServiceTicket;
struct UserAuthenticationOperation;
struct SignOutUserOperation;
struct UserIdentity;
struct OnlineIdAuthenticator;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

struct IWebAuthenticationResult;
struct IWebAuthenticationBrokerStatics;
struct WebAuthenticationResult;
struct WebAuthenticationBroker;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

struct IPasswordCredential;
struct ICredentialFactory;
struct IPasswordVault;
struct IWebAccountProviderFactory;
struct IWebAccountFactory;
struct IWebAccountProvider;
struct IWebAccount;
struct PasswordCredential;
struct PasswordVault;
struct PasswordCredentialPropertyStore;
struct WebAccountProvider;
struct WebAccount;

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

struct IUserConsentVerifierStatics;
struct ICredentialPickerOptions;
struct ICredentialPickerStatics;
struct ICredentialPickerResults;
struct UserConsentVerifier;
struct CredentialPickerOptions;
struct CredentialPickerResults;
struct CredentialPicker;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

struct ICryptographicBufferStatics;
struct CryptographicBuffer;

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

struct ICertificateRequestProperties;
struct ICertificateRequestProperties2;
struct ICertificateEnrollmentManagerStatics;
struct ICertificateEnrollmentManagerStatics2;
struct IKeyAttestationHelperStatics;
struct ICertificateStoresStatics;
struct IUserCertificateEnrollmentManager;
struct ICertificateStore;
struct IKeyAlgorithmNamesStatics;
struct IKeyStorageProviderNamesStatics;
struct IChainBuildingParameters;
struct IChainValidationParameters;
struct ICertificateQuery;
struct ICertificateChain;
struct ICertificate;
struct ICertificateFactory;
struct ICmsTimestampInfo;
struct ICmsSignerInfo;
struct ICmsAttachedSignature;
struct ICmsAttachedSignatureFactory;
struct ICmsAttachedSignatureStatics;
struct ICmsDetachedSignature;
struct ICmsDetachedSignatureFactory;
struct ICmsDetachedSignatureStatics;
struct Certificate;
struct CertificateRequestProperties;
struct UserCertificateEnrollmentManager;
struct CertificateEnrollmentManager;
struct KeyAttestationHelper;
struct CertificateQuery;
struct CertificateStore;
struct CertificateStores;
struct KeyAlgorithmNames;
struct KeyStorageProviderNames;
struct ChainBuildingParameters;
struct ChainValidationParameters;
struct CertificateChain;
struct CmsTimestampInfo;
struct CmsSignerInfo;
struct CmsAttachedSignature;
struct CmsDetachedSignature;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

struct IKeyDerivationParameters;
struct IKeyDerivationParametersStatics;
struct ICryptographicKey;
struct IHashComputation;
struct IHashAlgorithmProvider;
struct IMacAlgorithmProvider;
struct IMacAlgorithmProvider2;
struct IKeyDerivationAlgorithmProvider;
struct ISymmetricKeyAlgorithmProvider;
struct IAsymmetricKeyAlgorithmProvider;
struct IPersistedKeyProviderStatics;
struct IEncryptedAndAuthenticatedData;
struct ICryptographicEngineStatics;
struct ICryptographicEngineStatics2;
struct IHashAlgorithmProviderStatics;
struct IMacAlgorithmProviderStatics;
struct IKeyDerivationAlgorithmProviderStatics;
struct ISymmetricKeyAlgorithmProviderStatics;
struct IAsymmetricKeyAlgorithmProviderStatics;
struct IHashAlgorithmNamesStatics;
struct IMacAlgorithmNamesStatics;
struct ISymmetricAlgorithmNamesStatics;
struct IAsymmetricAlgorithmNamesStatics;
struct IKeyDerivationAlgorithmNamesStatics;
struct KeyDerivationParameters;
struct CryptographicKey;
struct CryptographicHash;
struct PersistedKeyProvider;
struct EncryptedAndAuthenticatedData;
struct CryptographicEngine;
struct HashAlgorithmProvider;
struct MacAlgorithmProvider;
struct KeyDerivationAlgorithmProvider;
struct SymmetricKeyAlgorithmProvider;
struct AsymmetricKeyAlgorithmProvider;
struct HashAlgorithmNames;
struct MacAlgorithmNames;
struct SymmetricAlgorithmNames;
struct AsymmetricAlgorithmNames;
struct KeyDerivationAlgorithmNames;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

struct IDataProtectionProvider;
struct IDataProtectionProviderFactory;
struct DataProtectionProvider;

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

struct IFileRevocationManagerStatics;
struct FileRevocationManager;

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

struct IEasClientDeviceInformation;
struct IEasClientSecurityPolicy;
struct IEasComplianceResults;
struct IEasComplianceResults2;
struct EasComplianceResults;
struct EasClientSecurityPolicy;
struct EasClientDeviceInformation;

}}}}

namespace Modern { namespace Windows { namespace Storage {

struct IStreamedFileDataRequestedHandler;
struct IApplicationDataSetVersionHandler;
struct IStorageLibraryStatics;
struct IStorageLibrary;
struct IKnownFoldersStatics;
struct IKnownFoldersPlaylistsStatics;
struct IKnownFoldersCameraRollStatics;
struct IKnownFoldersSavedPicturesStatics;
struct IDownloadsFolderStatics;
struct IStreamedFileDataRequest;
struct IStorageFileStatics;
struct IStorageItem;
struct IStorageFolder;
struct IStorageFile;
struct IStorageFolderStatics;
struct IStorageItem2;
struct IStorageItemProperties;
struct IStorageItemProperties2;
struct IStorageItemPropertiesWithProvider;
struct IStorageFilePropertiesWithAvailability;
struct IStorageProvider;
struct IStorageFolder2;
struct IFileIOStatics;
struct IPathIOStatics;
struct ICachedFileManagerStatics;
struct ISystemAudioProperties;
struct ISystemGPSProperties;
struct ISystemImageProperties;
struct ISystemMediaProperties;
struct ISystemMusicProperties;
struct ISystemPhotoProperties;
struct ISystemVideoProperties;
struct ISystemProperties;
struct IStorageStreamTransaction;
struct IApplicationDataStatics;
struct IApplicationData;
struct ISetVersionRequest;
struct ISetVersionDeferral;
struct IApplicationDataContainer;
struct StorageFile;
struct StorageFolder;
struct StorageLibrary;
struct KnownFolders;
struct DownloadsFolder;
struct StreamedFileDataRequest;
struct StorageStreamTransaction;
struct StorageProvider;
struct FileIO;
struct PathIO;
struct CachedFileManager;
struct SystemAudioProperties;
struct SystemGPSProperties;
struct SystemImageProperties;
struct SystemMediaProperties;
struct SystemMusicProperties;
struct SystemPhotoProperties;
struct SystemVideoProperties;
struct SystemProperties;
struct ApplicationData;
struct SetVersionRequest;
struct ApplicationDataContainer;
struct SetVersionDeferral;
struct ApplicationDataContainerSettings;
struct ApplicationDataCompositeValue;

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

struct IItemRemovedEventArgs;
struct IStorageItemAccessList;
struct IStorageItemMostRecentlyUsedList;
struct IStorageApplicationPermissionsStatics;
struct AccessListEntryView;
struct StorageItemMostRecentlyUsedList;
struct ItemRemovedEventArgs;
struct StorageItemAccessList;
struct StorageApplicationPermissions;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

struct IStorageItemInformation;
struct IFileInformationFactoryFactory;
struct IFileInformationFactory;
struct FileInformationFactory;
struct FileInformation;
struct FolderInformation;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

struct ICompressor;
struct IDecompressor;
struct ICompressorFactory;
struct IDecompressorFactory;
struct Compressor;
struct Decompressor;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

struct IThumbnailProperties;
struct IStorageItemExtraProperties;
struct IStorageItemContentProperties;
struct IMusicProperties;
struct IImageProperties;
struct IVideoProperties;
struct IDocumentProperties;
struct IBasicProperties;
struct StorageItemThumbnail;
struct MusicProperties;
struct VideoProperties;
struct ImageProperties;
struct DocumentProperties;
struct StorageItemContentProperties;
struct BasicProperties;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

struct IFileOpenPicker;
struct IFileSavePicker;
struct IFolderPicker;
struct FilePickerSelectedFilesArray;
struct FilePickerFileTypesOrderedMap;
struct FileExtensionVector;
struct FileOpenPicker;
struct FileSavePicker;
struct FolderPicker;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

struct IFileRemovedEventArgs;
struct IFileOpenPickerUI;
struct IPickerClosingEventArgs;
struct IPickerClosingOperation;
struct IPickerClosingDeferral;
struct IFileSavePickerUI;
struct ITargetFileRequestedEventArgs;
struct ITargetFileRequest;
struct ITargetFileRequestDeferral;
struct FileRemovedEventArgs;
struct FileOpenPickerUI;
struct PickerClosingEventArgs;
struct PickerClosingOperation;
struct PickerClosingDeferral;
struct FileSavePickerUI;
struct TargetFileRequestedEventArgs;
struct TargetFileRequest;
struct TargetFileRequestDeferral;

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

struct ICachedFileUpdaterUI;
struct IFileUpdateRequestedEventArgs;
struct IFileUpdateRequest;
struct IFileUpdateRequestDeferral;
struct ICachedFileUpdaterStatics;
struct CachedFileUpdaterUI;
struct FileUpdateRequestedEventArgs;
struct FileUpdateRequest;
struct FileUpdateRequestDeferral;
struct CachedFileUpdater;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

struct IContentIndexerStatics;
struct IIndexableContent;
struct IContentIndexer;
struct IValueAndLanguage;
struct IContentIndexerQueryOperations;
struct IContentIndexerQuery;
struct IQueryOptions;
struct IQueryOptionsWithProviderFilter;
struct IQueryOptionsFactory;
struct IStorageQueryResultBase;
struct IStorageFileQueryResult;
struct IStorageFileQueryResult2;
struct IStorageFolderQueryResult;
struct IStorageItemQueryResult;
struct IStorageFolderQueryOperations;
struct ContentIndexer;
struct ValueAndLanguage;
struct ContentIndexerQuery;
struct IndexableContent;
struct QueryOptions;
struct StorageFileQueryResult;
struct StorageFolderQueryResult;
struct StorageItemQueryResult;
struct SortEntryVector;

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

struct IDataReader;
struct IDataReaderFactory;
struct IDataReaderStatics;
struct IDataWriter;
struct IDataWriterFactory;
struct IRandomAccessStreamStatics;
struct IBufferFactory;
struct IBuffer;
struct IContentTypeProvider;
struct IRandomAccessStreamReference;
struct IInputStreamReference;
struct IRandomAccessStreamReferenceStatics;
struct IInputStream;
struct IOutputStream;
struct IRandomAccessStream;
struct IRandomAccessStreamWithContentType;
struct DataReaderLoadOperation;
struct DataReader;
struct DataWriterStoreOperation;
struct DataWriter;
struct RandomAccessStream;
struct Buffer;
struct RandomAccessStreamReference;
struct FileRandomAccessStream;
struct FileInputStream;
struct FileOutputStream;
struct RandomAccessStreamOverStream;
struct InputStreamOverStream;
struct OutputStreamOverStream;
struct InMemoryRandomAccessStream;

}}}}

namespace Modern { namespace Windows { namespace System {

struct ILauncherUIOptions;
struct ILauncherOptions;
struct ILauncherViewOptions;
struct ILauncherStatics;
struct LauncherUIOptions;
struct LauncherOptions;
struct Launcher;

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

struct IDisplayRequest;
struct DisplayRequest;

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

struct IHardwareToken;
struct IHardwareIdentificationStatics;
struct HardwareToken;
struct HardwareIdentification;

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

struct ISmbiosInformationStatics;
struct SmbiosInformation;

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

struct IInteractiveSessionStatics;
struct InteractiveSession;

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

struct ITimerElapsedHandler;
struct ITimerDestroyedHandler;
struct IWorkItemHandler;
struct IThreadPoolStatics;
struct IThreadPoolTimer;
struct IThreadPoolTimerStatics;
struct ThreadPoolTimer;
struct ThreadPool;

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

struct ISignalHandler;
struct ISignalNotifierStatics;
struct IPreallocatedWorkItemFactory;
struct IPreallocatedWorkItem;
struct ISignalNotifier;
struct SignalNotifier;
struct PreallocatedWorkItem;

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

struct IAdvertisingManagerStatics;
struct IUserInformationStatics;
struct ILockScreenStatics;
struct ILockScreenImageFeedStatics;
struct IGlobalizationPreferencesStatics;
struct AdvertisingManager;
struct UserInformation;
struct LockScreen;
struct GlobalizationPreferences;

}}}}

namespace Modern { namespace Windows { namespace UI {

struct IColorHelper;
struct IColorHelperStatics;
struct IColors;
struct IColorsStatics;
struct ColorHelper;
struct Colors;

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

struct IWebAccountProviderCommandInvokedHandler;
struct IWebAccountCommandInvokedHandler;
struct ICredentialCommandCredentialDeletedHandler;
struct ISettingsCommandFactory;
struct ISettingsCommandStatics;
struct ISettingsPaneCommandsRequest;
struct ISettingsPaneCommandsRequestedEventArgs;
struct ISettingsPaneStatics;
struct ISettingsPane;
struct IWebAccountProviderCommandFactory;
struct IWebAccountCommandFactory;
struct ICredentialCommandFactory;
struct IWebAccountProviderCommand;
struct IWebAccountInvokedArgs;
struct IWebAccountCommand;
struct ICredentialCommand;
struct IAccountsSettingsPaneEventDeferral;
struct IAccountsSettingsPaneCommandsRequestedEventArgs;
struct IAccountsSettingsPaneStatics;
struct IAccountsSettingsPane;
struct SettingsCommand;
struct SettingsPaneCommandsRequest;
struct SettingsPaneCommandsRequestedEventArgs;
struct SettingsPane;
struct WebAccountProviderCommand;
struct WebAccountCommand;
struct WebAccountInvokedArgs;
struct CredentialCommand;
struct AccountsSettingsPaneEventDeferral;
struct AccountsSettingsPaneCommandsRequestedEventArgs;
struct AccountsSettingsPane;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

struct IDispatchedHandler;
struct IIdleDispatchedHandler;
struct ICoreWindowEventArgs;
struct IAutomationProviderRequestedEventArgs;
struct ICharacterReceivedEventArgs;
struct IInputEnabledEventArgs;
struct IKeyEventArgs;
struct IPointerEventArgs;
struct ITouchHitTestingEventArgs;
struct IWindowActivatedEventArgs;
struct IWindowSizeChangedEventArgs;
struct IVisibilityChangedEventArgs;
struct ICoreWindow;
struct ICoreWindowStatic;
struct IAcceleratorKeyEventArgs;
struct ICoreAcceleratorKeys;
struct ICoreDispatcher;
struct ICoreDispatcherWithTaskPriority;
struct IIdleDispatchedHandlerArgs;
struct ICoreCursor;
struct ICoreCursorFactory;
struct IInitializeWithCoreWindow;
struct ICoreWindowResizeManager;
struct ICoreWindowResizeManagerLayoutCapability;
struct ICoreWindowResizeManagerStatics;
struct ICoreInputSourceBase;
struct ICorePointerInputSource;
struct ICoreKeyboardInputSource;
struct ICoreComponentFocusable;
struct ICoreTouchHitTesting;
struct ICoreWindowPopupShowingEventArgs;
struct ICoreWindowDialog;
struct ICoreWindowDialogFactory;
struct ICoreWindowFlyout;
struct ICoreWindowFlyoutFactory;
struct ICoreWindowFactory;
struct CoreDispatcher;
struct CoreCursor;
struct CoreWindow;
struct WindowActivatedEventArgs;
struct AutomationProviderRequestedEventArgs;
struct CharacterReceivedEventArgs;
struct CoreWindowEventArgs;
struct InputEnabledEventArgs;
struct KeyEventArgs;
struct PointerEventArgs;
struct TouchHitTestingEventArgs;
struct WindowSizeChangedEventArgs;
struct VisibilityChangedEventArgs;
struct IdleDispatchedHandlerArgs;
struct AcceleratorKeyEventArgs;
struct CoreAcceleratorKeys;
struct CoreWindowResizeManager;
struct CoreIndependentInputSource;
struct CoreComponentInputSource;
struct CoreWindowPopupShowingEventArgs;
struct CoreWindowDialog;
struct CoreWindowFlyout;
struct ImmersiveCoreWindowFactory;
struct HostedCoreWindowFactory;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

struct IPropertyAnimation;
struct IScaleAnimation;
struct IOpacityAnimation;
struct IAnimationDescription;
struct IAnimationDescriptionFactory;
struct AnimationDescription;
struct PropertyAnimation;
struct ScaleAnimation;
struct TranslationAnimation;
struct OpacityAnimation;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

struct IEdgeGestureEventArgs;
struct IEdgeGestureStatics;
struct IEdgeGesture;
struct ITappedEventArgs;
struct IRightTappedEventArgs;
struct IHoldingEventArgs;
struct IDraggingEventArgs;
struct IManipulationStartedEventArgs;
struct IManipulationUpdatedEventArgs;
struct IManipulationInertiaStartingEventArgs;
struct IManipulationCompletedEventArgs;
struct ICrossSlidingEventArgs;
struct IMouseWheelParameters;
struct IGestureRecognizer;
struct IPointerPointStatics;
struct IPointerPointTransform;
struct IPointerPoint;
struct IPointerPointProperties;
struct IPointerVisualizationSettings;
struct IPointerVisualizationSettingsStatics;
struct EdgeGestureEventArgs;
struct EdgeGesture;
struct MouseWheelParameters;
struct GestureRecognizer;
struct TappedEventArgs;
struct RightTappedEventArgs;
struct HoldingEventArgs;
struct DraggingEventArgs;
struct ManipulationStartedEventArgs;
struct ManipulationUpdatedEventArgs;
struct ManipulationInertiaStartingEventArgs;
struct ManipulationCompletedEventArgs;
struct CrossSlidingEventArgs;
struct PointerPoint;
struct PointerPointProperties;
struct PointerVisualizationSettings;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

struct IInkDrawingAttributes;
struct IInkStrokeRenderingSegment;
struct IInkStroke;
struct IInkStrokeBuilder;
struct IInkRecognitionResult;
struct IInkStrokeContainer;
struct IInkRecognizer;
struct IInkRecognizerContainer;
struct IInkManager;
struct InkDrawingAttributes;
struct InkStrokeRenderingSegment;
struct InkStroke;
struct InkStrokeBuilder;
struct InkRecognitionResult;
struct InkStrokeContainer;
struct InkRecognizer;
struct InkRecognizerContainer;
struct InkManager;

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

struct IToastDismissedEventArgs;
struct IToastFailedEventArgs;
struct IToastActivatedEventArgs;
struct ITileUpdateManagerStatics;
struct ITileUpdater;
struct ITileUpdater2;
struct IBadgeUpdateManagerStatics;
struct IBadgeUpdater;
struct IToastNotificationManagerStatics;
struct IToastNotifier;
struct ITileNotificationFactory;
struct ITileNotification;
struct IBadgeNotificationFactory;
struct IBadgeNotification;
struct IToastNotificationFactory;
struct IToastNotification;
struct IScheduledToastNotificationFactory;
struct IScheduledToastNotification;
struct IScheduledTileNotificationFactory;
struct IScheduledTileNotification;
struct TileUpdater;
struct TileNotification;
struct ScheduledTileNotification;
struct BadgeUpdater;
struct BadgeNotification;
struct ToastNotifier;
struct ToastNotification;
struct ScheduledToastNotification;
struct ToastDismissedEventArgs;
struct ToastFailedEventArgs;
struct TileUpdateManager;
struct BadgeUpdateManager;
struct ToastNotificationManager;
struct ToastActivatedEventArgs;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

struct IUICommandInvokedHandler;
struct IMessageDialog;
struct IMessageDialogFactory;
struct IUICommand;
struct IUICommandFactory;
struct IPopupMenu;
struct MessageDialog;
struct UICommand;
struct UICommandSeparator;
struct PopupMenu;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

struct ISecondaryTile;
struct ISecondaryTile2;
struct ISecondaryTileVisualElements;
struct ISecondaryTileFactory;
struct ISecondaryTileFactory2;
struct ISecondaryTileStatics;
struct IVisualElementsRequestedEventArgs;
struct IVisualElementsRequest;
struct IVisualElementsRequestDeferral;
struct SecondaryTileVisualElements;
struct SecondaryTile;
struct VisualElementsRequestedEventArgs;
struct VisualElementsRequest;
struct VisualElementsRequestDeferral;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

struct ITextConstantsStatics;
struct ITextDocument;
struct ITextRange;
struct ITextSelection;
struct ITextCharacterFormat;
struct ITextParagraphFormat;
struct IFontWeights;
struct IFontWeightsStatics;
struct TextConstants;
struct FontWeights;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

struct IApplicationViewSwitcherStatics;
struct IApplicationViewInteropStatics;
struct IApplicationViewStatics2;
struct IApplicationView;
struct IApplicationViewConsolidatedEventArgs;
struct IProjectionManagerStatics;
struct IInputPaneVisibilityEventArgs;
struct IInputPane;
struct IInputPaneStatics;
struct IAccessibilitySettings;
struct IUISettings;
struct ApplicationView;
struct ApplicationViewConsolidatedEventArgs;
struct ApplicationViewSwitcher;
struct ProjectionManager;
struct InputPaneVisibilityEventArgs;
struct InputPane;
struct AccessibilitySettings;
struct UISettings;

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

struct IActivatedEventHandler;
struct IResumingEventHandler;
struct ISuspendingEventHandler;
struct INavigatedEventHandler;
struct IActivatedDeferral;
struct IActivatedOperation;
struct IActivatedEventArgsDeferral;
struct IWebUINavigatedEventArgs;
struct IWebUIBackgroundTaskInstance;
struct IWebUIBackgroundTaskInstanceStatics;
struct IWebUINavigatedDeferral;
struct IWebUINavigatedOperation;
struct IWebUIActivationStatics;
struct IHtmlPrintDocumentSource;
struct ActivatedDeferral;
struct ActivatedOperation;
struct WebUILaunchActivatedEventArgs;
struct WebUISearchActivatedEventArgs;
struct WebUIShareTargetActivatedEventArgs;
struct WebUIFileActivatedEventArgs;
struct WebUIProtocolActivatedEventArgs;
struct WebUIFileOpenPickerActivatedEventArgs;
struct WebUIFileSavePickerActivatedEventArgs;
struct WebUICachedFileUpdaterActivatedEventArgs;
struct WebUIContactPickerActivatedEventArgs;
struct WebUIDeviceActivatedEventArgs;
struct WebUIPrintTaskSettingsActivatedEventArgs;
struct WebUICameraSettingsActivatedEventArgs;
struct WebUIAppointmentsProviderAddAppointmentActivatedEventArgs;
struct WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs;
struct WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs;
struct WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs;
struct WebUIContactCallActivatedEventArgs;
struct WebUIContactMessageActivatedEventArgs;
struct WebUIContactMapActivatedEventArgs;
struct WebUIContactPostActivatedEventArgs;
struct WebUIContactVideoCallActivatedEventArgs;
struct WebUILockScreenCallActivatedEventArgs;
struct WebUIRestrictedLaunchActivatedEventArgs;
struct WebUINavigatedOperation;
struct SuspendingDeferral;
struct SuspendingOperation;
struct SuspendingEventArgs;
struct WebUIBackgroundTaskInstanceRuntimeClass;
struct WebUIBackgroundTaskInstance;
struct WebUINavigatedDeferral;
struct WebUINavigatedEventArgs;
struct WebUIApplication;
struct HtmlPrintDocumentSource;

}}}}

namespace Modern { namespace Windows { namespace Web {

struct IUriToStreamResolver;
struct IWebErrorStatics;
struct WebError;

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

struct IResourceCollection;
struct IWorkspace;
struct IServiceDocument;
struct IAtomPubClient;
struct IAtomPubClientFactory;
struct ServiceDocument;
struct ResourceCollection;
struct Workspace;
struct AtomPubClient;

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

struct IHttpClientFactory;
struct IHttpClient;
struct IHttpContent;
struct IHttpCookieManager;
struct IHttpCookieFactory;
struct IHttpCookie;
struct IHttpMethodStatics;
struct IHttpMethodFactory;
struct IHttpMethod;
struct IHttpTransportInformation;
struct IHttpRequestMessageFactory;
struct IHttpRequestMessage;
struct IHttpResponseMessageFactory;
struct IHttpResponseMessage;
struct IHttpStringContentFactory;
struct IHttpBufferContentFactory;
struct IHttpStreamContentFactory;
struct IHttpFormUrlEncodedContentFactory;
struct IHttpMultipartContentFactory;
struct IHttpMultipartContent;
struct IHttpMultipartFormDataContentFactory;
struct IHttpMultipartFormDataContent;
struct HttpMethod;
struct HttpRequestMessage;
struct HttpResponseMessage;
struct HttpClient;
struct HttpCookie;
struct HttpCookieCollection;
struct HttpTransportInformation;
struct HttpStringContent;
struct HttpBufferContent;
struct HttpStreamContent;
struct HttpFormUrlEncodedContent;
struct HttpMultipartContent;
struct HttpMultipartFormDataContent;
struct HttpCookieManager;

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

struct IHttpFilter;
struct IHttpCacheControl;
struct IHttpBaseProtocolFilter;
struct HttpCacheControl;
struct HttpBaseProtocolFilter;

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

struct IHttpContentHeaderCollection;
struct IHttpRequestHeaderCollection;
struct IHttpResponseHeaderCollection;
struct IHttpCacheDirectiveHeaderValueCollection;
struct IHttpChallengeHeaderValueStatics;
struct IHttpChallengeHeaderValueFactory;
struct IHttpChallengeHeaderValue;
struct IHttpChallengeHeaderValueCollection;
struct IHttpCredentialsHeaderValueStatics;
struct IHttpCredentialsHeaderValueFactory;
struct IHttpCredentialsHeaderValue;
struct IHttpConnectionOptionHeaderValueStatics;
struct IHttpConnectionOptionHeaderValueFactory;
struct IHttpConnectionOptionHeaderValue;
struct IHttpConnectionOptionHeaderValueCollection;
struct IHttpContentCodingHeaderValueStatics;
struct IHttpContentCodingHeaderValueFactory;
struct IHttpContentCodingHeaderValue;
struct IHttpContentCodingHeaderValueCollection;
struct IHttpContentDispositionHeaderValueStatics;
struct IHttpContentDispositionHeaderValueFactory;
struct IHttpContentDispositionHeaderValue;
struct IHttpContentRangeHeaderValueStatics;
struct IHttpContentRangeHeaderValueFactory;
struct IHttpContentRangeHeaderValue;
struct IHttpCookiePairHeaderValueStatics;
struct IHttpCookiePairHeaderValueFactory;
struct IHttpCookiePairHeaderValue;
struct IHttpCookiePairHeaderValueCollection;
struct IHttpDateOrDeltaHeaderValueStatics;
struct IHttpDateOrDeltaHeaderValue;
struct IHttpExpectationHeaderValueStatics;
struct IHttpExpectationHeaderValueFactory;
struct IHttpExpectationHeaderValue;
struct IHttpExpectationHeaderValueCollection;
struct IHttpLanguageHeaderValueCollection;
struct IHttpLanguageRangeWithQualityHeaderValueStatics;
struct IHttpLanguageRangeWithQualityHeaderValueFactory;
struct IHttpLanguageRangeWithQualityHeaderValue;
struct IHttpLanguageRangeWithQualityHeaderValueCollection;
struct IHttpMediaTypeHeaderValueStatics;
struct IHttpMediaTypeHeaderValueFactory;
struct IHttpMediaTypeHeaderValue;
struct IHttpMediaTypeWithQualityHeaderValueStatics;
struct IHttpMediaTypeWithQualityHeaderValueFactory;
struct IHttpMediaTypeWithQualityHeaderValue;
struct IHttpMediaTypeWithQualityHeaderValueCollection;
struct IHttpMethodHeaderValueCollection;
struct IHttpNameValueHeaderValueStatics;
struct IHttpNameValueHeaderValueFactory;
struct IHttpNameValueHeaderValue;
struct IHttpProductHeaderValueStatics;
struct IHttpProductHeaderValueFactory;
struct IHttpProductHeaderValue;
struct IHttpProductInfoHeaderValueStatics;
struct IHttpProductInfoHeaderValueFactory;
struct IHttpProductInfoHeaderValue;
struct IHttpProductInfoHeaderValueCollection;
struct IHttpContentCodingWithQualityHeaderValueStatics;
struct IHttpContentCodingWithQualityHeaderValueFactory;
struct IHttpContentCodingWithQualityHeaderValue;
struct IHttpContentCodingWithQualityHeaderValueCollection;
struct IHttpTransferCodingHeaderValueStatics;
struct IHttpTransferCodingHeaderValueFactory;
struct IHttpTransferCodingHeaderValue;
struct IHttpTransferCodingHeaderValueCollection;
struct HttpContentHeaderCollection;
struct HttpRequestHeaderCollection;
struct HttpResponseHeaderCollection;
struct HttpContentDispositionHeaderValue;
struct HttpContentCodingHeaderValueCollection;
struct HttpLanguageHeaderValueCollection;
struct HttpContentRangeHeaderValue;
struct HttpMediaTypeHeaderValue;
struct HttpMediaTypeWithQualityHeaderValueCollection;
struct HttpContentCodingWithQualityHeaderValueCollection;
struct HttpLanguageRangeWithQualityHeaderValueCollection;
struct HttpCredentialsHeaderValue;
struct HttpCacheDirectiveHeaderValueCollection;
struct HttpConnectionOptionHeaderValueCollection;
struct HttpCookiePairHeaderValueCollection;
struct HttpExpectationHeaderValueCollection;
struct HttpTransferCodingHeaderValueCollection;
struct HttpProductInfoHeaderValueCollection;
struct HttpMethodHeaderValueCollection;
struct HttpChallengeHeaderValueCollection;
struct HttpDateOrDeltaHeaderValue;
struct HttpNameValueHeaderValue;
struct HttpChallengeHeaderValue;
struct HttpConnectionOptionHeaderValue;
struct HttpContentCodingHeaderValue;
struct HttpCookiePairHeaderValue;
struct HttpExpectationHeaderValue;
struct HttpLanguageRangeWithQualityHeaderValue;
struct HttpMediaTypeWithQualityHeaderValue;
struct HttpProductHeaderValue;
struct HttpProductInfoHeaderValue;
struct HttpContentCodingWithQualityHeaderValue;
struct HttpTransferCodingHeaderValue;

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

struct ISyndicationAttribute;
struct ISyndicationAttributeFactory;
struct ISyndicationNode;
struct ISyndicationNodeFactory;
struct ISyndicationGenerator;
struct ISyndicationGeneratorFactory;
struct ISyndicationText;
struct ISyndicationTextFactory;
struct ISyndicationContent;
struct ISyndicationContentFactory;
struct ISyndicationLink;
struct ISyndicationLinkFactory;
struct ISyndicationPerson;
struct ISyndicationPersonFactory;
struct ISyndicationCategory;
struct ISyndicationCategoryFactory;
struct ISyndicationItem;
struct ISyndicationItemFactory;
struct ISyndicationFeed;
struct ISyndicationFeedFactory;
struct ISyndicationClient;
struct ISyndicationClientFactory;
struct ISyndicationErrorStatics;
struct SyndicationAttribute;
struct SyndicationNode;
struct SyndicationGenerator;
struct SyndicationText;
struct SyndicationContent;
struct SyndicationLink;
struct SyndicationPerson;
struct SyndicationCategory;
struct SyndicationFeed;
struct SyndicationItem;
struct SyndicationClient;
struct SyndicationError;

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel {

template <typename T>
struct impl_ISuspendingDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ISuspendingOperation
{
	Windows::ApplicationModel::SuspendingDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
struct impl_ISuspendingEventArgs
{
	Windows::ApplicationModel::SuspendingOperation SuspendingOperation() const;
};

template <typename T>
struct impl_IPackageId
{
	String Name() const;
	Windows::ApplicationModel::PackageVersion Version() const;
	Windows::System::ProcessorArchitecture Architecture() const;
	String ResourceId() const;
	String Publisher() const;
	String PublisherId() const;
	String FullName() const;
	String FamilyName() const;
};

template <typename T>
struct impl_IPackage
{
	Windows::ApplicationModel::PackageId Id() const;
	Windows::Storage::StorageFolder InstalledLocation() const;
	bool IsFramework() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Package> Dependencies() const;
};

template <typename T>
struct impl_IPackage2
{
	String DisplayName() const;
	String PublisherDisplayName() const;
	String Description() const;
	Windows::Foundation::Uri Logo() const;
	bool IsResourcePackage() const;
	bool IsBundle() const;
	bool IsDevelopmentMode() const;
};

template <typename T>
struct impl_IPackageStatics
{
	Windows::ApplicationModel::Package Current() const;
};

template <typename T>
struct impl_IDesignModeStatics
{
	bool DesignModeEnabled() const;
};

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

template <typename T>
struct impl_ISplashScreen
{
	Windows::Foundation::Rect ImageLocation() const;
	EventRegistrationToken Dismissed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Dismissed(F handler) const;
	void Dismissed(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IActivatedEventArgs
{
	Windows::ApplicationModel::Activation::ActivationKind Kind() const;
	Windows::ApplicationModel::Activation::ApplicationExecutionState PreviousExecutionState() const;
	Windows::ApplicationModel::Activation::SplashScreen SplashScreen() const;
};

template <typename T>
struct impl_IApplicationViewActivatedEventArgs
{
	int CurrentlyShownApplicationViewId() const;
};

template <typename T>
struct impl_IPrelaunchActivatedEventArgs
{
	bool PrelaunchActivated() const;
};

template <typename T>
struct impl_ILaunchActivatedEventArgs
{
	String Arguments() const;
	String TileId() const;
};

template <typename T>
struct impl_ISearchActivatedEventArgs
{
	String QueryText() const;
	String Language() const;
};

template <typename T>
struct impl_ISearchActivatedEventArgsWithLinguisticDetails
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
struct impl_IShareTargetActivatedEventArgs
{
	Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation ShareOperation() const;
};

template <typename T>
struct impl_IFileActivatedEventArgs
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem> Files() const;
	String Verb() const;
};

template <typename T>
struct impl_IFileActivatedEventArgsWithNeighboringFiles
{
	Windows::Storage::Search::StorageFileQueryResult NeighboringFilesQuery() const;
};

template <typename T>
struct impl_IProtocolActivatedEventArgs
{
	Windows::Foundation::Uri Uri() const;
};

template <typename T>
struct impl_IFileOpenPickerActivatedEventArgs
{
	Windows::Storage::Pickers::Provider::FileOpenPickerUI FileOpenPickerUI() const;
};

template <typename T>
struct impl_IFileSavePickerActivatedEventArgs
{
	Windows::Storage::Pickers::Provider::FileSavePickerUI FileSavePickerUI() const;
};

template <typename T>
struct impl_ICachedFileUpdaterActivatedEventArgs
{
	Windows::Storage::Provider::CachedFileUpdaterUI CachedFileUpdaterUI() const;
};

template <typename T>
struct impl_IContactPickerActivatedEventArgs
{
	Windows::ApplicationModel::Contacts::Provider::ContactPickerUI ContactPickerUI() const;
};

template <typename T>
struct impl_IDeviceActivatedEventArgs
{
	String DeviceInformationId() const;
	String Verb() const;
};

template <typename T>
struct impl_IPrintTaskSettingsActivatedEventArgs
{
	Windows::Devices::Printers::Extensions::PrintTaskConfiguration Configuration() const;
};

template <typename T>
struct impl_ICameraSettingsActivatedEventArgs
{
	IInspectable VideoDeviceController() const;
	IInspectable VideoDeviceExtension() const;
};

template <typename T>
struct impl_IAppointmentsProviderActivatedEventArgs
{
	String Verb() const;
};

template <typename T>
struct impl_IAppointmentsProviderAddAppointmentActivatedEventArgs
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation AddAppointmentOperation() const;
};

template <typename T>
struct impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation ReplaceAppointmentOperation() const;
};

template <typename T>
struct impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation RemoveAppointmentOperation() const;
};

template <typename T>
struct impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs
{
	Windows::Foundation::DateTime TimeToShow() const;
	Windows::Foundation::TimeSpan Duration() const;
};

template <typename T>
struct impl_IContactActivatedEventArgs
{
	String Verb() const;
};

template <typename T>
struct impl_IContactCallActivatedEventArgs
{
	String ServiceId() const;
	String ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactMessageActivatedEventArgs
{
	String ServiceId() const;
	String ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactMapActivatedEventArgs
{
	Windows::ApplicationModel::Contacts::ContactAddress Address() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactPostActivatedEventArgs
{
	String ServiceId() const;
	String ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactVideoCallActivatedEventArgs
{
	String ServiceId() const;
	String ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
struct impl_IContactsProviderActivatedEventArgs
{
	String Verb() const;
};

template <typename T>
struct impl_IRestrictedLaunchActivatedEventArgs
{
	IInspectable SharedContext() const;
};

template <typename T>
struct impl_ILockScreenCallActivatedEventArgs
{
	Windows::ApplicationModel::Calls::LockScreenCallUI CallUI() const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

template <typename T>
struct impl_IAppointmentManagerStatics
{
	Windows::Foundation::IAsyncOperation<String> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<String> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncAction ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration) const;
};

template <typename T>
struct impl_IAppointmentParticipant
{
	String DisplayName() const;
	void DisplayName(String const & value) const;
	template <unsigned S0> void DisplayName(wchar_t const (&value)[S0]) const;
	String Address() const;
	void Address(String const & value) const;
	template <unsigned S0> void Address(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IAppointmentInvitee
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantRole Role() const;
	void Role(Windows::ApplicationModel::Appointments::AppointmentParticipantRole value) const;
	Windows::ApplicationModel::Appointments::AppointmentParticipantResponse Response() const;
	void Response(Windows::ApplicationModel::Appointments::AppointmentParticipantResponse value) const;
};

template <typename T>
struct impl_IAppointmentRecurrence
{
	Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit Unit() const;
	void Unit(Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit value) const;
	Windows::Foundation::IReference<unsigned> Occurrences() const;
	void Occurrences(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Until() const;
	void Until(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	unsigned Interval() const;
	void Interval(unsigned value) const;
	Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek DaysOfWeek() const;
	void DaysOfWeek(Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek value) const;
	Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth WeekOfMonth() const;
	void WeekOfMonth(Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth value) const;
	unsigned Month() const;
	void Month(unsigned value) const;
	unsigned Day() const;
	void Day(unsigned value) const;
};

template <typename T>
struct impl_IAppointment
{
	Windows::Foundation::DateTime StartTime() const;
	void StartTime(Windows::Foundation::DateTime const & value) const;
	Windows::Foundation::TimeSpan Duration() const;
	void Duration(Windows::Foundation::TimeSpan const & value) const;
	String Location() const;
	void Location(String const & value) const;
	template <unsigned S0> void Location(wchar_t const (&value)[S0]) const;
	String Subject() const;
	void Subject(String const & value) const;
	template <unsigned S0> void Subject(wchar_t const (&value)[S0]) const;
	String Details() const;
	void Details(String const & value) const;
	template <unsigned S0> void Details(wchar_t const (&value)[S0]) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> Reminder() const;
	void Reminder(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::ApplicationModel::Appointments::AppointmentOrganizer Organizer() const;
	void Organizer(Windows::ApplicationModel::Appointments::AppointmentOrganizer const & value) const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee> Invitees() const;
	Windows::ApplicationModel::Appointments::AppointmentRecurrence Recurrence() const;
	void Recurrence(Windows::ApplicationModel::Appointments::AppointmentRecurrence const & value) const;
	Windows::ApplicationModel::Appointments::AppointmentBusyStatus BusyStatus() const;
	void BusyStatus(Windows::ApplicationModel::Appointments::AppointmentBusyStatus value) const;
	bool AllDay() const;
	void AllDay(bool value) const;
	Windows::ApplicationModel::Appointments::AppointmentSensitivity Sensitivity() const;
	void Sensitivity(Windows::ApplicationModel::Appointments::AppointmentSensitivity value) const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

template <typename T>
struct impl_IAppointmentsProviderLaunchActionVerbsStatics
{
	String AddAppointment() const;
	String ReplaceAppointment() const;
	String RemoveAppointment() const;
	String ShowTimeFrame() const;
};

template <typename T>
struct impl_IAddAppointmentOperation
{
	Windows::ApplicationModel::Appointments::Appointment AppointmentInformation() const;
	String SourcePackageFamilyName() const;
	void ReportCompleted(String const & itemId) const;
	template <unsigned S0> void ReportCompleted(wchar_t const (&itemId)[S0]) const;
	void ReportCanceled() const;
	void ReportError(String const & value) const;
	template <unsigned S0> void ReportError(wchar_t const (&value)[S0]) const;
	void DismissUI() const;
};

template <typename T>
struct impl_IReplaceAppointmentOperation
{
	String AppointmentId() const;
	Windows::ApplicationModel::Appointments::Appointment AppointmentInformation() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> InstanceStartDate() const;
	String SourcePackageFamilyName() const;
	void ReportCompleted(String const & itemId) const;
	template <unsigned S0> void ReportCompleted(wchar_t const (&itemId)[S0]) const;
	void ReportCanceled() const;
	void ReportError(String const & value) const;
	template <unsigned S0> void ReportError(wchar_t const (&value)[S0]) const;
	void DismissUI() const;
};

template <typename T>
struct impl_IRemoveAppointmentOperation
{
	String AppointmentId() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> InstanceStartDate() const;
	String SourcePackageFamilyName() const;
	void ReportCompleted() const;
	void ReportCanceled() const;
	void ReportError(String const & value) const;
	template <unsigned S0> void ReportError(wchar_t const (&value)[S0]) const;
	void DismissUI() const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

template <typename T>
struct impl_IBackgroundTaskCanceledEventHandler
{
	void Invoke(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & sender, Windows::ApplicationModel::Background::BackgroundTaskCancellationReason reason) const;
};

template <typename T>
struct impl_IBackgroundTaskProgressEventHandler
{
	void Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs const & args) const;
};

template <typename T>
struct impl_IBackgroundTaskCompletedEventHandler
{
	void Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs const & args) const;
};

template <typename T>
struct impl_IAlarmApplicationManagerStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::AlarmAccessStatus> RequestAccessAsync() const;
	Windows::ApplicationModel::Background::AlarmAccessStatus GetAccessStatus() const;
};

template <typename T>
struct impl_IBackgroundExecutionManagerStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(String const & applicationId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(wchar_t const (&applicationId)[S0]) const;
	void RemoveAccess() const;
	void RemoveAccess(String const & applicationId) const;
	template <unsigned S0> void RemoveAccess(wchar_t const (&applicationId)[S0]) const;
	Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus() const;
	Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(String const & applicationId) const;
	template <unsigned S0> Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(wchar_t const (&applicationId)[S0]) const;
};

template <typename T>
struct impl_IBackgroundTaskInstance
{
	GUID InstanceId() const;
	Windows::ApplicationModel::Background::BackgroundTaskRegistration Task() const;
	unsigned Progress() const;
	void Progress(unsigned value) const;
	IInspectable TriggerDetails() const;
	EventRegistrationToken Canceled(Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler const & cancelHandler) const;
	template <typename F> EventRegistrationToken Canceled(F cancelHandler) const;
	void Canceled(EventRegistrationToken cookie) const;
	unsigned SuspendedCount() const;
	Windows::ApplicationModel::Background::BackgroundTaskDeferral GetDeferral() const;
};

template <typename T>
struct impl_IBackgroundWorkCostStatics
{
	Windows::ApplicationModel::Background::BackgroundWorkCostValue CurrentBackgroundWorkCost() const;
};

template <typename T>
struct impl_IBackgroundTaskDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IBackgroundTaskInstance2
{
	unsigned GetThrottleCount(Windows::ApplicationModel::Background::BackgroundTaskThrottleCounter counter) const;
};

template <typename T>
struct impl_IBackgroundTask
{
	void Run(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & taskInstance) const;
};

template <typename T>
struct impl_IBackgroundTaskRegistration
{
	GUID TaskId() const;
	String Name() const;
	EventRegistrationToken Progress(Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Progress(F handler) const;
	void Progress(EventRegistrationToken cookie) const;
	EventRegistrationToken Completed(Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Completed(F handler) const;
	void Completed(EventRegistrationToken cookie) const;
	void Unregister(bool cancelTask) const;
};

template <typename T>
struct impl_IBackgroundTaskRegistrationStatics
{
	Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> AllTasks() const;
};

template <typename T>
struct impl_IBackgroundTaskBuilder
{
	void TaskEntryPoint(String const & value) const;
	template <unsigned S0> void TaskEntryPoint(wchar_t const (&value)[S0]) const;
	String TaskEntryPoint() const;
	void SetTrigger(Windows::ApplicationModel::Background::IBackgroundTrigger const & trigger) const;
	void AddCondition(Windows::ApplicationModel::Background::IBackgroundCondition const & condition) const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Name() const;
	Windows::ApplicationModel::Background::BackgroundTaskRegistration Register() const;
};

template <typename T>
struct impl_IBackgroundTrigger
{
};

template <typename T>
struct impl_IBackgroundCondition
{
};

template <typename T>
struct impl_IBackgroundTaskBuilder2
{
	void CancelOnConditionLoss(bool value) const;
	bool CancelOnConditionLoss() const;
};

template <typename T>
struct impl_IBackgroundTaskCompletedEventArgs
{
	GUID InstanceId() const;
	void CheckResult() const;
};

template <typename T>
struct impl_IBackgroundTaskProgressEventArgs
{
	GUID InstanceId() const;
	unsigned Progress() const;
};

template <typename T>
struct impl_ISystemTrigger
{
	bool OneShot() const;
	Windows::ApplicationModel::Background::SystemTriggerType TriggerType() const;
};

template <typename T>
struct impl_ISystemTriggerFactory
{
	Windows::ApplicationModel::Background::SystemTrigger Create(Windows::ApplicationModel::Background::SystemTriggerType triggerType, bool oneShot) const;
};

template <typename T>
struct impl_ISystemCondition
{
	Windows::ApplicationModel::Background::SystemConditionType ConditionType() const;
};

template <typename T>
struct impl_ISystemConditionFactory
{
	Windows::ApplicationModel::Background::SystemCondition Create(Windows::ApplicationModel::Background::SystemConditionType conditionType) const;
};

template <typename T>
struct impl_INetworkOperatorNotificationTrigger
{
	String NetworkAccountId() const;
};

template <typename T>
struct impl_INetworkOperatorNotificationTriggerFactory
{
	Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger Create(String const & networkAccountId) const;
	template <unsigned S0> Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger Create(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_ITimeTrigger
{
	unsigned FreshnessTime() const;
	bool OneShot() const;
};

template <typename T>
struct impl_ITimeTriggerFactory
{
	Windows::ApplicationModel::Background::TimeTrigger Create(unsigned freshnessTime, bool oneShot) const;
};

template <typename T>
struct impl_IMaintenanceTrigger
{
	unsigned FreshnessTime() const;
	bool OneShot() const;
};

template <typename T>
struct impl_IMaintenanceTriggerFactory
{
	Windows::ApplicationModel::Background::MaintenanceTrigger Create(unsigned freshnessTime, bool oneShot) const;
};

template <typename T>
struct impl_IDeviceUseTrigger
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(wchar_t const (&deviceId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(String const & deviceId, String const & arguments) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(wchar_t const (&deviceId)[S0], wchar_t const (&arguments)[S1]) const;
};

template <typename T>
struct impl_IDeviceServicingTrigger
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(String const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::TimeSpan const & expectedDuration) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(String const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration, String const & arguments) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::TimeSpan const & expectedDuration, wchar_t const (&arguments)[S1]) const;
};

template <typename T>
struct impl_ILocationTrigger
{
	Windows::ApplicationModel::Background::LocationTriggerType TriggerType() const;
};

template <typename T>
struct impl_ILocationTriggerFactory
{
	Windows::ApplicationModel::Background::LocationTrigger Create(Windows::ApplicationModel::Background::LocationTriggerType triggerType) const;
};

template <typename T>
struct impl_INetworkOperatorHotspotAuthenticationTrigger
{
};

template <typename T>
struct impl_IPushNotificationTriggerFactory
{
	Windows::ApplicationModel::Background::PushNotificationTrigger Create(String const & applicationId) const;
	template <unsigned S0> Windows::ApplicationModel::Background::PushNotificationTrigger Create(wchar_t const (&applicationId)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

template <typename T>
struct impl_ILockScreenCallEndCallDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ILockScreenCallEndRequestedEventArgs
{
	Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
struct impl_ILockScreenCallUI
{
	void Dismiss() const;
	EventRegistrationToken EndRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken EndRequested(F handler) const;
	void EndRequested(EventRegistrationToken token) const;
	EventRegistrationToken Closed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Closed(F handler) const;
	void Closed(EventRegistrationToken token) const;
	String CallTitle() const;
	void CallTitle(String const & value) const;
	template <unsigned S0> void CallTitle(wchar_t const (&value)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

template <typename T>
struct impl_IContactManagerStatics
{
	void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection) const;
	void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
};

template <typename T>
struct impl_IContactLaunchActionVerbsStatics
{
	String Call() const;
	String Message() const;
	String Map() const;
	String Post() const;
	String VideoCall() const;
};

template <typename T>
struct impl_IContactPicker
{
	String CommitButtonText() const;
	void CommitButtonText(String const & value) const;
	template <unsigned S0> void CommitButtonText(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactSelectionMode SelectionMode() const;
	void SelectionMode(Windows::ApplicationModel::Contacts::ContactSelectionMode value) const;
};

template <typename T>
struct impl_IContactPicker2
{
	Windows::Foundation::Collections::IVector<Modern::Windows::ApplicationModel::Contacts::ContactFieldType> DesiredFieldsWithContactFieldType() const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> PickContactAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Contact>> PickContactsAsync() const;
};

template <typename T>
struct impl_IContactSignificantOther
{
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactWebsite
{
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactEmail
{
	String Address() const;
	void Address(String const & value) const;
	template <unsigned S0> void Address(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactEmailKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactEmailKind value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactPhone
{
	String Number() const;
	void Number(String const & value) const;
	template <unsigned S0> void Number(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactPhoneKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactPhoneKind value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactAddress
{
	String StreetAddress() const;
	void StreetAddress(String const & value) const;
	template <unsigned S0> void StreetAddress(wchar_t const (&value)[S0]) const;
	String Locality() const;
	void Locality(String const & value) const;
	template <unsigned S0> void Locality(wchar_t const (&value)[S0]) const;
	String Region() const;
	void Region(String const & value) const;
	template <unsigned S0> void Region(wchar_t const (&value)[S0]) const;
	String Country() const;
	void Country(String const & value) const;
	template <unsigned S0> void Country(wchar_t const (&value)[S0]) const;
	String PostalCode() const;
	void PostalCode(String const & value) const;
	template <unsigned S0> void PostalCode(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactAddressKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactAddressKind value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactConnectedServiceAccount
{
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String ServiceName() const;
	void ServiceName(String const & value) const;
	template <unsigned S0> void ServiceName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactDate
{
	Windows::Foundation::IReference<unsigned> Day() const;
	void Day(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Foundation::IReference<unsigned> Month() const;
	void Month(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Foundation::IReference<int> Year() const;
	void Year(Windows::Foundation::IReference<int> const & value) const;
	Windows::ApplicationModel::Contacts::ContactDateKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactDateKind value) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContactName
{
	String FirstName() const;
	void FirstName(String const & value) const;
	template <unsigned S0> void FirstName(wchar_t const (&value)[S0]) const;
	String LastName() const;
	void LastName(String const & value) const;
	template <unsigned S0> void LastName(wchar_t const (&value)[S0]) const;
	String MiddleName() const;
	void MiddleName(String const & value) const;
	template <unsigned S0> void MiddleName(wchar_t const (&value)[S0]) const;
	String YomiGivenName() const;
	void YomiGivenName(String const & value) const;
	template <unsigned S0> void YomiGivenName(wchar_t const (&value)[S0]) const;
	String YomiFamilyName() const;
	void YomiFamilyName(String const & value) const;
	template <unsigned S0> void YomiFamilyName(wchar_t const (&value)[S0]) const;
	String HonorificNameSuffix() const;
	void HonorificNameSuffix(String const & value) const;
	template <unsigned S0> void HonorificNameSuffix(wchar_t const (&value)[S0]) const;
	String HonorificNamePrefix() const;
	void HonorificNamePrefix(String const & value) const;
	template <unsigned S0> void HonorificNamePrefix(wchar_t const (&value)[S0]) const;
	String DisplayName() const;
	String YomiDisplayName() const;
};

template <typename T>
struct impl_IContactJobInfo
{
	String CompanyName() const;
	void CompanyName(String const & value) const;
	template <unsigned S0> void CompanyName(wchar_t const (&value)[S0]) const;
	String CompanyYomiName() const;
	void CompanyYomiName(String const & value) const;
	template <unsigned S0> void CompanyYomiName(wchar_t const (&value)[S0]) const;
	String Department() const;
	void Department(String const & value) const;
	template <unsigned S0> void Department(wchar_t const (&value)[S0]) const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Manager() const;
	void Manager(String const & value) const;
	template <unsigned S0> void Manager(wchar_t const (&value)[S0]) const;
	String Office() const;
	void Office(String const & value) const;
	template <unsigned S0> void Office(wchar_t const (&value)[S0]) const;
	String CompanyAddress() const;
	void CompanyAddress(String const & value) const;
	template <unsigned S0> void CompanyAddress(wchar_t const (&value)[S0]) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContact
{
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
};

template <typename T>
struct impl_IContact2
{
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String Notes() const;
	void Notes(String const & value) const;
	template <unsigned S0> void Notes(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone> Phones() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail> Emails() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress> Addresses() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> ConnectedServiceAccounts() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactDate> ImportantDates() const;
	Windows::Foundation::Collections::IVector<String> DataSuppliers() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo> JobInfo() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactSignificantOther> SignificantOthers() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactWebsite> Websites() const;
	Windows::Foundation::Collections::IPropertySet ProviderProperties() const;
};

template <typename T>
struct impl_IContactCardDelayedDataLoader
{
	void SetData(Windows::ApplicationModel::Contacts::Contact const & contact) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

template <typename T>
struct impl_IContactRemovedEventArgs
{
	String Id() const;
};

template <typename T>
struct impl_IContactPickerUI
{
	void RemoveContact(String const & id) const;
	template <unsigned S0> void RemoveContact(wchar_t const (&id)[S0]) const;
	bool ContainsContact(String const & id) const;
	template <unsigned S0> bool ContainsContact(wchar_t const (&id)[S0]) const;
	Windows::ApplicationModel::Contacts::ContactSelectionMode SelectionMode() const;
	EventRegistrationToken ContactRemoved(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ContactRemoved(F handler) const;
	void ContactRemoved(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IContactPickerUI2
{
	Windows::ApplicationModel::Contacts::Provider::AddContactResult AddContact(Windows::ApplicationModel::Contacts::Contact const & contact) const;
	Windows::Foundation::Collections::IVector<Modern::Windows::ApplicationModel::Contacts::ContactFieldType> DesiredFieldsWithContactFieldType() const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

template <typename T>
struct impl_IFrameworkView
{
	void Initialize(Windows::ApplicationModel::Core::CoreApplicationView const & applicationView) const;
	void SetWindow(Windows::UI::Core::CoreWindow const & window) const;
	void Load(String const & entryPoint) const;
	template <unsigned S0> void Load(wchar_t const (&entryPoint)[S0]) const;
	void Run() const;
	void Uninitialize() const;
};

template <typename T>
struct impl_IFrameworkViewSource
{
	Windows::ApplicationModel::Core::IFrameworkView CreateView() const;
};

template <typename T>
struct impl_ICoreApplication
{
	String Id() const;
	EventRegistrationToken Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Suspending(F handler) const;
	void Suspending(EventRegistrationToken token) const;
	EventRegistrationToken Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Resuming(F handler) const;
	void Resuming(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
	Windows::ApplicationModel::Core::CoreApplicationView GetCurrentView() const;
	void Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource) const;
	void RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback) const;
};

template <typename T>
struct impl_ICoreApplicationUseCount
{
	void IncrementApplicationUseCount() const;
	void DecrementApplicationUseCount() const;
};

template <typename T>
struct impl_ICoreApplicationExit
{
	void Exit() const;
	EventRegistrationToken Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Exiting(F handler) const;
	void Exiting(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICoreImmersiveApplication
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> Views() const;
	Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(String const & runtimeType, String const & entryPoint) const;
	template <unsigned S0, unsigned S1> Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(wchar_t const (&runtimeType)[S0], wchar_t const (&entryPoint)[S1]) const;
	Windows::ApplicationModel::Core::CoreApplicationView MainView() const;
};

template <typename T>
struct impl_ICoreImmersiveApplication2
{
	Windows::ApplicationModel::Core::CoreApplicationView CreateNewView() const;
};

template <typename T>
struct impl_ICoreApplicationUnhandledError
{
	EventRegistrationToken UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken UnhandledErrorDetected(F handler) const;
	void UnhandledErrorDetected(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICoreApplicationView
{
	Windows::UI::Core::CoreWindow CoreWindow() const;
	EventRegistrationToken Activated(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Activation::IActivatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Activated(F handler) const;
	void Activated(EventRegistrationToken token) const;
	bool IsMain() const;
	bool IsHosted() const;
};

template <typename T>
struct impl_ICoreApplicationView2
{
	Windows::UI::Core::CoreDispatcher Dispatcher() const;
};

template <typename T>
struct impl_IUnhandledErrorDetectedEventArgs
{
	Windows::ApplicationModel::Core::UnhandledError UnhandledError() const;
};

template <typename T>
struct impl_IUnhandledError
{
	bool Handled() const;
	void Propagate() const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

template <typename T>
struct impl_IDataProviderHandler
{
	void Invoke(Windows::ApplicationModel::DataTransfer::DataProviderRequest const & request) const;
};

template <typename T>
struct impl_IStandardDataFormatsStatics
{
	String Text() const;
	String Html() const;
	String Rtf() const;
	String Bitmap() const;
	String StorageItems() const;
};

template <typename T>
struct impl_IStandardDataFormatsStatics2
{
	String WebLink() const;
	String ApplicationLink() const;
};

template <typename T>
struct impl_IDataPackagePropertySetView
{
	String Title() const;
	String Description() const;
	Windows::Storage::Streams::RandomAccessStreamReference Thumbnail() const;
	Windows::Foundation::Collections::IVectorView<String> FileTypes() const;
	String ApplicationName() const;
	Windows::Foundation::Uri ApplicationListingUri() const;
};

template <typename T>
struct impl_IDataPackagePropertySetView2
{
	String PackageFamilyName() const;
	Windows::Foundation::Uri ContentSourceWebLink() const;
	Windows::Foundation::Uri ContentSourceApplicationLink() const;
	Windows::Storage::Streams::IRandomAccessStreamReference Square30x30Logo() const;
	Windows::UI::Color LogoBackgroundColor() const;
};

template <typename T>
struct impl_IDataPackagePropertySet
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::Foundation::Collections::IVector<String> FileTypes() const;
	String ApplicationName() const;
	void ApplicationName(String const & value) const;
	template <unsigned S0> void ApplicationName(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri ApplicationListingUri() const;
	void ApplicationListingUri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IDataPackagePropertySet2
{
	Windows::Foundation::Uri ContentSourceWebLink() const;
	void ContentSourceWebLink(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri ContentSourceApplicationLink() const;
	void ContentSourceApplicationLink(Windows::Foundation::Uri const & value) const;
	String PackageFamilyName() const;
	void PackageFamilyName(String const & value) const;
	template <unsigned S0> void PackageFamilyName(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Square30x30Logo() const;
	void Square30x30Logo(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::UI::Color LogoBackgroundColor() const;
	void LogoBackgroundColor(Windows::UI::Color const & value) const;
};

template <typename T>
struct impl_IDataProviderDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IDataProviderRequest
{
	String FormatId() const;
	Windows::Foundation::DateTime Deadline() const;
	Windows::ApplicationModel::DataTransfer::DataProviderDeferral GetDeferral() const;
	void SetData(IInspectable const & value) const;
};

template <typename T>
struct impl_IOperationCompletedEventArgs
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation Operation() const;
};

template <typename T>
struct impl_IDataPackageView
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView Properties() const;
	Windows::ApplicationModel::DataTransfer::DataPackageOperation RequestedOperation() const;
	void ReportOperationCompleted(Windows::ApplicationModel::DataTransfer::DataPackageOperation value) const;
	Windows::Foundation::Collections::IVectorView<String> AvailableFormats() const;
	bool Contains(String const & formatId) const;
	template <unsigned S0> bool Contains(wchar_t const (&formatId)[S0]) const;
	Windows::Foundation::IAsyncOperation<IInspectable> GetDataAsync(String const & formatId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<IInspectable> GetDataAsync(wchar_t const (&formatId)[S0]) const;
	Windows::Foundation::IAsyncOperation<String> GetTextAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetTextAsync(String const & formatId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> GetTextAsync(wchar_t const (&formatId)[S0]) const;
	Windows::Foundation::IAsyncOperation<String> GetHtmlFormatAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Storage::Streams::RandomAccessStreamReference>> GetResourceMapAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetRtfAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> GetBitmapAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetStorageItemsAsync() const;
};

template <typename T>
struct impl_IDataPackageView2
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetApplicationLinkAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetWebLinkAsync() const;
};

template <typename T>
struct impl_IDataPackage
{
	Windows::ApplicationModel::DataTransfer::DataPackageView GetView() const;
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet Properties() const;
	Windows::ApplicationModel::DataTransfer::DataPackageOperation RequestedOperation() const;
	void RequestedOperation(Windows::ApplicationModel::DataTransfer::DataPackageOperation value) const;
	EventRegistrationToken OperationCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken OperationCompleted(F handler) const;
	void OperationCompleted(EventRegistrationToken eventCookie) const;
	EventRegistrationToken Destroyed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Destroyed(F handler) const;
	void Destroyed(EventRegistrationToken eventCookie) const;
	void SetData(String const & formatId, IInspectable const & value) const;
	template <unsigned S0> void SetData(wchar_t const (&formatId)[S0], IInspectable const & value) const;
	void SetDataProvider(String const & formatId, Windows::ApplicationModel::DataTransfer::IDataProviderHandler const & delayRenderer) const;
	template <unsigned S0> void SetDataProvider(wchar_t const (&formatId)[S0], Windows::ApplicationModel::DataTransfer::IDataProviderHandler const & delayRenderer) const;
	template <typename F> void SetDataProvider(String const & formatId, F delayRenderer) const;
	template <unsigned S0, typename F> void SetDataProvider(wchar_t const (&formatId)[S0], F delayRenderer) const;
	void SetText(String const & value) const;
	template <unsigned S0> void SetText(wchar_t const (&value)[S0]) const;
	void SetHtmlFormat(String const & value) const;
	template <unsigned S0> void SetHtmlFormat(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IMap<String, Windows::Storage::Streams::RandomAccessStreamReference> ResourceMap() const;
	void SetRtf(String const & value) const;
	template <unsigned S0> void SetRtf(wchar_t const (&value)[S0]) const;
	void SetBitmap(Windows::Storage::Streams::RandomAccessStreamReference const & value) const;
	void SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value) const;
	void SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value, bool readOnly) const;
};

template <typename T>
struct impl_IDataPackage2
{
	void SetApplicationLink(Windows::Foundation::Uri const & value) const;
	void SetWebLink(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IHtmlFormatHelperStatics
{
	String GetStaticFragment(String const & htmlFormat) const;
	template <unsigned S0> String GetStaticFragment(wchar_t const (&htmlFormat)[S0]) const;
	String CreateHtmlFormat(String const & htmlFragment) const;
	template <unsigned S0> String CreateHtmlFormat(wchar_t const (&htmlFragment)[S0]) const;
};

template <typename T>
struct impl_IClipboardStatics
{
	Windows::ApplicationModel::DataTransfer::DataPackageView GetContent() const;
	void SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content) const;
	void Flush() const;
	void Clear() const;
	EventRegistrationToken ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const;
	template <typename F> EventRegistrationToken ContentChanged(F changeHandler) const;
	void ContentChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IDataRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IDataRequest
{
	Windows::ApplicationModel::DataTransfer::DataPackage Data() const;
	void Data(Windows::ApplicationModel::DataTransfer::DataPackage const & value) const;
	Windows::Foundation::DateTime Deadline() const;
	void FailWithDisplayText(String const & value) const;
	template <unsigned S0> void FailWithDisplayText(wchar_t const (&value)[S0]) const;
	Windows::ApplicationModel::DataTransfer::DataRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_IDataRequestedEventArgs
{
	Windows::ApplicationModel::DataTransfer::DataRequest Request() const;
};

template <typename T>
struct impl_ITargetApplicationChosenEventArgs
{
	String ApplicationName() const;
};

template <typename T>
struct impl_IDataTransferManager
{
	EventRegistrationToken DataRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken DataRequested(F eventHandler) const;
	void DataRequested(EventRegistrationToken eventCookie) const;
	EventRegistrationToken TargetApplicationChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken TargetApplicationChosen(F eventHandler) const;
	void TargetApplicationChosen(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IDataTransferManagerStatics
{
	void ShowShareUI() const;
	Windows::ApplicationModel::DataTransfer::DataTransferManager GetForCurrentView() const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

template <typename T>
struct impl_IQuickLink
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::RandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const;
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> SupportedDataFormats() const;
	Windows::Foundation::Collections::IVector<String> SupportedFileTypes() const;
};

template <typename T>
struct impl_IShareOperation
{
	Windows::ApplicationModel::DataTransfer::DataPackageView Data() const;
	String QuickLinkId() const;
	void RemoveThisQuickLink() const;
	void ReportStarted() const;
	void ReportDataRetrieved() const;
	void ReportSubmittedBackgroundTask() const;
	void ReportCompleted(Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink const & quicklink) const;
	void ReportCompleted() const;
	void ReportError(String const & value) const;
	template <unsigned S0> void ReportError(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IShareOperation2
{
	void DismissUI() const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Infrastructure {

template <typename T>
struct impl_ISetWindowWithWindowFactory
{
	Windows::UI::Core::CoreWindow SetWindow(Windows::UI::Core::ICoreWindowFactory const & windowFactory) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

template <typename T>
struct impl_IResourceLoader
{
	String GetString(String const & resource) const;
	template <unsigned S0> String GetString(wchar_t const (&resource)[S0]) const;
};

template <typename T>
struct impl_IResourceLoader2
{
	String GetStringForUri(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_IResourceLoaderStatics2
{
	Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView() const;
	Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView(String const & name) const;
	template <unsigned S0> Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView(wchar_t const (&name)[S0]) const;
	Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse() const;
	Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse(String const & name) const;
	template <unsigned S0> Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse(wchar_t const (&name)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

template <typename T>
struct impl_IResourceManager
{
	Windows::ApplicationModel::Resources::Core::ResourceMap MainResourceMap() const;
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap> AllResourceMaps() const;
	void LoadPriFiles(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFile> const & files) const;
	void UnloadPriFiles(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFile> const & files) const;
};

template <typename T>
struct impl_IResourceManagerStatics
{
	Windows::ApplicationModel::Resources::Core::ResourceManager Current() const;
	bool IsResourceReference(String const & resourceReference) const;
	template <unsigned S0> bool IsResourceReference(wchar_t const (&resourceReference)[S0]) const;
};

template <typename T>
struct impl_IResourceQualifier
{
	String QualifierName() const;
	String QualifierValue() const;
	bool IsDefault() const;
	bool IsMatch() const;
	double Score() const;
};

template <typename T>
struct impl_IResourceContext
{
	Windows::Foundation::Collections::IObservableMap<String, String> QualifierValues() const;
	void Reset() const;
	void Reset(Windows::Foundation::Collections::IIterable<String> const & qualifierNames) const;
	void OverrideToMatch(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Resources::Core::ResourceQualifier> const & result) const;
	Windows::ApplicationModel::Resources::Core::ResourceContext Clone() const;
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	void Languages(Windows::Foundation::Collections::IVectorView<String> const & languages) const;
};

template <typename T>
struct impl_IResourceContextStatics2
{
	Windows::ApplicationModel::Resources::Core::ResourceContext GetForCurrentView() const;
	void SetGlobalQualifierValue(String const & key, String const & value) const;
	template <unsigned S0, unsigned S1> void SetGlobalQualifierValue(wchar_t const (&key)[S0], wchar_t const (&value)[S1]) const;
	void ResetGlobalQualifierValues() const;
	void ResetGlobalQualifierValues(Windows::Foundation::Collections::IIterable<String> const & qualifierNames) const;
	Windows::ApplicationModel::Resources::Core::ResourceContext GetForViewIndependentUse() const;
};

template <typename T>
struct impl_IResourceCandidate
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier> Qualifiers() const;
	bool IsMatch() const;
	bool IsMatchAsDefault() const;
	bool IsDefault() const;
	String ValueAsString() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetValueAsFileAsync() const;
	String GetQualifierValue(String const & qualifierName) const;
	template <unsigned S0> String GetQualifierValue(wchar_t const (&qualifierName)[S0]) const;
};

template <typename T>
struct impl_INamedResource
{
	Windows::Foundation::Uri Uri() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> Candidates() const;
	Windows::ApplicationModel::Resources::Core::ResourceCandidate Resolve(Windows::ApplicationModel::Resources::Core::ResourceContext const & resourceContext) const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> ResolveAll(Windows::ApplicationModel::Resources::Core::ResourceContext const & resourceContext) const;
};

template <typename T>
struct impl_IResourceMap
{
	Windows::Foundation::Uri Uri() const;
	Windows::ApplicationModel::Resources::Core::ResourceCandidate GetValue(String const & resource, Windows::ApplicationModel::Resources::Core::ResourceContext const & context) const;
	template <unsigned S0> Windows::ApplicationModel::Resources::Core::ResourceCandidate GetValue(wchar_t const (&resource)[S0], Windows::ApplicationModel::Resources::Core::ResourceContext const & context) const;
	Windows::ApplicationModel::Resources::Core::ResourceMap GetSubtree(String const & reference) const;
	template <unsigned S0> Windows::ApplicationModel::Resources::Core::ResourceMap GetSubtree(wchar_t const (&reference)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

template <typename T>
struct impl_IResourceIndexer
{
	Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate IndexFilePath(Windows::Foundation::Uri const & filePath) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate>> IndexFileContentsAsync(Windows::Foundation::Uri const & file) const;
};

template <typename T>
struct impl_IResourceIndexerFactory
{
	Windows::ApplicationModel::Resources::Management::ResourceIndexer CreateResourceIndexer(Windows::Foundation::Uri const & projectRoot) const;
};

template <typename T>
struct impl_IResourceIndexerFactory2
{
	Windows::ApplicationModel::Resources::Management::ResourceIndexer CreateResourceIndexerWithExtension(Windows::Foundation::Uri const & projectRoot, Windows::Foundation::Uri const & extensionDllPath) const;
};

template <typename T>
struct impl_IIndexedResourceQualifier
{
	String QualifierName() const;
	String QualifierValue() const;
};

template <typename T>
struct impl_IIndexedResourceCandidate
{
	Windows::ApplicationModel::Resources::Management::IndexedResourceType Type() const;
	Windows::Foundation::Uri Uri() const;
	Windows::Foundation::Collections::IMapView<String, String> Metadata() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier> Qualifiers() const;
	String ValueAsString() const;
	String GetQualifierValue(String const & qualifierName) const;
	template <unsigned S0> String GetQualifierValue(wchar_t const (&qualifierName)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

template <typename T>
struct impl_ISearchPaneQueryLinguisticDetails
{
	Windows::Foundation::Collections::IVectorView<String> QueryTextAlternatives() const;
	unsigned QueryTextCompositionStart() const;
	unsigned QueryTextCompositionLength() const;
};

template <typename T>
struct impl_ISearchPaneVisibilityChangedEventArgs
{
	bool Visible() const;
};

template <typename T>
struct impl_ISearchPaneQueryChangedEventArgs
{
	String QueryText() const;
	String Language() const;
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
struct impl_ISearchPaneQuerySubmittedEventArgs
{
	String QueryText() const;
	String Language() const;
};

template <typename T>
struct impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
struct impl_ISearchPaneResultSuggestionChosenEventArgs
{
	String Tag() const;
};

template <typename T>
struct impl_ISearchSuggestionCollection
{
	unsigned Size() const;
	void AppendQuerySuggestion(String const & text) const;
	template <unsigned S0> void AppendQuerySuggestion(wchar_t const (&text)[S0]) const;
	void AppendQuerySuggestions(Windows::Foundation::Collections::IIterable<String> const & suggestions) const;
	void AppendResultSuggestion(String const & text, String const & detailText, String const & tag, Windows::Storage::Streams::IRandomAccessStreamReference const & image, String const & imageAlternateText) const;
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> void AppendResultSuggestion(wchar_t const (&text)[S0], wchar_t const (&detailText)[S1], wchar_t const (&tag)[S2], Windows::Storage::Streams::IRandomAccessStreamReference const & image, wchar_t const (&imageAlternateText)[S3]) const;
	void AppendSearchSeparator(String const & label) const;
	template <unsigned S0> void AppendSearchSeparator(wchar_t const (&label)[S0]) const;
};

template <typename T>
struct impl_ISearchPaneSuggestionsRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ISearchPaneSuggestionsRequest
{
	bool IsCanceled() const;
	Windows::ApplicationModel::Search::SearchSuggestionCollection SearchSuggestionCollection() const;
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_ISearchPaneSuggestionsRequestedEventArgs
{
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest Request() const;
};

template <typename T>
struct impl_ILocalContentSuggestionSettings
{
	void Enabled(bool value) const;
	bool Enabled() const;
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFolder> Locations() const;
	void AqsFilter(String const & value) const;
	template <unsigned S0> void AqsFilter(wchar_t const (&value)[S0]) const;
	String AqsFilter() const;
	Windows::Foundation::Collections::IVector<String> PropertiesToMatch() const;
};

template <typename T>
struct impl_ISearchPaneStatics
{
	Windows::ApplicationModel::Search::SearchPane GetForCurrentView() const;
};

template <typename T>
struct impl_ISearchPaneStaticsWithHideThisApplication
{
	void HideThisApplication() const;
};

template <typename T>
struct impl_ISearchPane
{
	void SearchHistoryEnabled(bool value) const;
	bool SearchHistoryEnabled() const;
	void SearchHistoryContext(String const & value) const;
	template <unsigned S0> void SearchHistoryContext(wchar_t const (&value)[S0]) const;
	String SearchHistoryContext() const;
	void PlaceholderText(String const & value) const;
	template <unsigned S0> void PlaceholderText(wchar_t const (&value)[S0]) const;
	String PlaceholderText() const;
	String QueryText() const;
	String Language() const;
	bool Visible() const;
	EventRegistrationToken VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VisibilityChanged(F handler) const;
	void VisibilityChanged(EventRegistrationToken token) const;
	EventRegistrationToken QueryChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken QueryChanged(F handler) const;
	void QueryChanged(EventRegistrationToken token) const;
	EventRegistrationToken SuggestionsRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SuggestionsRequested(F handler) const;
	void SuggestionsRequested(EventRegistrationToken token) const;
	EventRegistrationToken QuerySubmitted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken QuerySubmitted(F handler) const;
	void QuerySubmitted(EventRegistrationToken token) const;
	EventRegistrationToken ResultSuggestionChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ResultSuggestionChosen(F handler) const;
	void ResultSuggestionChosen(EventRegistrationToken token) const;
	void SetLocalContentSuggestionSettings(Windows::ApplicationModel::Search::LocalContentSuggestionSettings const & settings) const;
	void Show() const;
	void Show(String const & query) const;
	template <unsigned S0> void Show(wchar_t const (&query)[S0]) const;
	void ShowOnKeyboardInput(bool value) const;
	bool ShowOnKeyboardInput() const;
	bool TrySetQueryText(String const & query) const;
	template <unsigned S0> bool TrySetQueryText(wchar_t const (&query)[S0]) const;
};

template <typename T>
struct impl_ISearchQueryLinguisticDetailsFactory
{
	Windows::ApplicationModel::Search::SearchQueryLinguisticDetails CreateInstance(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned queryTextCompositionStart, unsigned queryTextCompositionLength) const;
};

template <typename T>
struct impl_ISearchQueryLinguisticDetails
{
	Windows::Foundation::Collections::IVectorView<String> QueryTextAlternatives() const;
	unsigned QueryTextCompositionStart() const;
	unsigned QueryTextCompositionLength() const;
};

template <typename T>
struct impl_ISearchSuggestionsRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ISearchSuggestionsRequest
{
	bool IsCanceled() const;
	Windows::ApplicationModel::Search::SearchSuggestionCollection SearchSuggestionCollection() const;
	Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral GetDeferral() const;
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

template <typename T>
struct impl_ILicenseChangedEventHandler
{
	void Invoke() const;
};

template <typename T>
struct impl_ICurrentApp
{
	Windows::ApplicationModel::Store::LicenseInformation LicenseInformation() const;
	Windows::Foundation::Uri LinkUri() const;
	GUID AppId() const;
	Windows::Foundation::IAsyncOperation<String> RequestAppPurchaseAsync(bool includeReceipt) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> LoadListingInformationAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetAppReceiptAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(String const & productId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(wchar_t const (&productId)[S0]) const;
};

template <typename T>
struct impl_ICurrentAppWithConsumables
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(String const & productId, GUID transactionId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID transactionId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> GetUnfulfilledConsumablesAsync() const;
};

template <typename T>
struct impl_ICurrentAppSimulator
{
	Windows::ApplicationModel::Store::LicenseInformation LicenseInformation() const;
	Windows::Foundation::Uri LinkUri() const;
	GUID AppId() const;
	Windows::Foundation::IAsyncOperation<String> RequestAppPurchaseAsync(bool includeReceipt) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> LoadListingInformationAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetAppReceiptAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(String const & productId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(wchar_t const (&productId)[S0]) const;
	Windows::Foundation::IAsyncAction ReloadSimulatorAsync(Windows::Storage::StorageFile const & simulatorSettingsFile) const;
};

template <typename T>
struct impl_ICurrentAppSimulatorWithConsumables
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(String const & productId, GUID transactionId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID transactionId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> GetUnfulfilledConsumablesAsync() const;
};

template <typename T>
struct impl_IPurchaseResults
{
	Windows::ApplicationModel::Store::ProductPurchaseStatus Status() const;
	GUID TransactionId() const;
	String ReceiptXml() const;
	String OfferId() const;
};

template <typename T>
struct impl_ILicenseInformation
{
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductLicense> ProductLicenses() const;
	bool IsActive() const;
	bool IsTrial() const;
	Windows::Foundation::DateTime ExpirationDate() const;
	EventRegistrationToken LicenseChanged(Windows::ApplicationModel::Store::ILicenseChangedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken LicenseChanged(F handler) const;
	void LicenseChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IProductLicense
{
	String ProductId() const;
	bool IsActive() const;
	Windows::Foundation::DateTime ExpirationDate() const;
};

template <typename T>
struct impl_IListingInformation
{
	String CurrentMarket() const;
	String Description() const;
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductListing> ProductListings() const;
	String FormattedPrice() const;
	String Name() const;
	unsigned AgeRating() const;
};

template <typename T>
struct impl_IProductListing
{
	String ProductId() const;
	String FormattedPrice() const;
	String Name() const;
};

template <typename T>
struct impl_IProductListingWithConsumables
{
	Windows::ApplicationModel::Store::ProductType ProductType() const;
};

template <typename T>
struct impl_IUnfulfilledConsumable
{
	String ProductId() const;
	GUID TransactionId() const;
	String OfferId() const;
};

template <typename T>
struct impl_IProductPurchaseDisplayProperties
{
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Description() const;
	void Description(String const & value) const;
	template <unsigned S0> void Description(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri Image() const;
	void Image(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IProductPurchaseDisplayPropertiesFactory
{
	Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties CreateProductPurchaseDisplayProperties(String const & name) const;
	template <unsigned S0> Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties CreateProductPurchaseDisplayProperties(wchar_t const (&name)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

template <typename T>
struct impl_IHtmlUtilities
{
	String ConvertToText(String const & html) const;
	template <unsigned S0> String ConvertToText(wchar_t const (&html)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

template <typename T>
struct impl_IJsonValue
{
	Windows::Data::Json::JsonValueType ValueType() const;
	String Stringify() const;
	String GetString() const;
	double GetNumber() const;
	bool GetBoolean() const;
	Windows::Data::Json::JsonArray GetArray() const;
	Windows::Data::Json::JsonObject GetObject() const;
};

template <typename T>
struct impl_IJsonValueStatics
{
	Windows::Data::Json::JsonValue Parse(String const & input) const;
	template <unsigned S0> Windows::Data::Json::JsonValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Data::Json::JsonValue & result) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonValue & result) const;
	Windows::Data::Json::JsonValue CreateBooleanValue(bool input) const;
	Windows::Data::Json::JsonValue CreateNumberValue(double input) const;
	Windows::Data::Json::JsonValue CreateStringValue(String const & input) const;
	template <unsigned S0> Windows::Data::Json::JsonValue CreateStringValue(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IJsonObject
{
	Windows::Data::Json::JsonValue GetNamedValue(String const & name) const;
	template <unsigned S0> Windows::Data::Json::JsonValue GetNamedValue(wchar_t const (&name)[S0]) const;
	void SetNamedValue(String const & name, Windows::Data::Json::IJsonValue const & value) const;
	template <unsigned S0> void SetNamedValue(wchar_t const (&name)[S0], Windows::Data::Json::IJsonValue const & value) const;
	Windows::Data::Json::JsonObject GetNamedObject(String const & name) const;
	template <unsigned S0> Windows::Data::Json::JsonObject GetNamedObject(wchar_t const (&name)[S0]) const;
	Windows::Data::Json::JsonArray GetNamedArray(String const & name) const;
	template <unsigned S0> Windows::Data::Json::JsonArray GetNamedArray(wchar_t const (&name)[S0]) const;
	String GetNamedString(String const & name) const;
	template <unsigned S0> String GetNamedString(wchar_t const (&name)[S0]) const;
	double GetNamedNumber(String const & name) const;
	template <unsigned S0> double GetNamedNumber(wchar_t const (&name)[S0]) const;
	bool GetNamedBoolean(String const & name) const;
	template <unsigned S0> bool GetNamedBoolean(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_IJsonObjectWithDefaultValues
{
	Windows::Data::Json::JsonValue GetNamedValue(String const & name, Windows::Data::Json::JsonValue const & defaultValue) const;
	template <unsigned S0> Windows::Data::Json::JsonValue GetNamedValue(wchar_t const (&name)[S0], Windows::Data::Json::JsonValue const & defaultValue) const;
	Windows::Data::Json::JsonObject GetNamedObject(String const & name, Windows::Data::Json::JsonObject const & defaultValue) const;
	template <unsigned S0> Windows::Data::Json::JsonObject GetNamedObject(wchar_t const (&name)[S0], Windows::Data::Json::JsonObject const & defaultValue) const;
	String GetNamedString(String const & name, String const & defaultValue) const;
	template <unsigned S0, unsigned S1> String GetNamedString(wchar_t const (&name)[S0], wchar_t const (&defaultValue)[S1]) const;
	Windows::Data::Json::JsonArray GetNamedArray(String const & name, Windows::Data::Json::JsonArray const & defaultValue) const;
	template <unsigned S0> Windows::Data::Json::JsonArray GetNamedArray(wchar_t const (&name)[S0], Windows::Data::Json::JsonArray const & defaultValue) const;
	double GetNamedNumber(String const & name, double defaultValue) const;
	template <unsigned S0> double GetNamedNumber(wchar_t const (&name)[S0], double defaultValue) const;
	bool GetNamedBoolean(String const & name, bool defaultValue) const;
	template <unsigned S0> bool GetNamedBoolean(wchar_t const (&name)[S0], bool defaultValue) const;
};

template <typename T>
struct impl_IJsonObjectStatics
{
	Windows::Data::Json::JsonObject Parse(String const & input) const;
	template <unsigned S0> Windows::Data::Json::JsonObject Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Data::Json::JsonObject & result) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonObject & result) const;
};

template <typename T>
struct impl_IJsonArray
{
	Windows::Data::Json::JsonObject GetObjectAt(unsigned index) const;
	Windows::Data::Json::JsonArray GetArrayAt(unsigned index) const;
	String GetStringAt(unsigned index) const;
	double GetNumberAt(unsigned index) const;
	bool GetBooleanAt(unsigned index) const;
};

template <typename T>
struct impl_IJsonArrayStatics
{
	Windows::Data::Json::JsonArray Parse(String const & input) const;
	template <unsigned S0> Windows::Data::Json::JsonArray Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Data::Json::JsonArray & result) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonArray & result) const;
};

template <typename T>
struct impl_IJsonErrorStatics2
{
	Windows::Data::Json::JsonErrorStatus GetJsonStatus(int hresult) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

template <typename T>
struct impl_IPdfPageDimensions
{
	Windows::Foundation::Rect MediaBox() const;
	Windows::Foundation::Rect CropBox() const;
	Windows::Foundation::Rect BleedBox() const;
	Windows::Foundation::Rect TrimBox() const;
	Windows::Foundation::Rect ArtBox() const;
};

template <typename T>
struct impl_IPdfPageRenderOptions
{
	Windows::Foundation::Rect SourceRect() const;
	void SourceRect(Windows::Foundation::Rect const & value) const;
	unsigned DestinationWidth() const;
	void DestinationWidth(unsigned value) const;
	unsigned DestinationHeight() const;
	void DestinationHeight(unsigned value) const;
	Windows::UI::Color BackgroundColor() const;
	void BackgroundColor(Windows::UI::Color const & value) const;
	bool IsIgnoringHighContrast() const;
	void IsIgnoringHighContrast(bool value) const;
	GUID BitmapEncoderId() const;
	void BitmapEncoderId(GUID value) const;
};

template <typename T>
struct impl_IPdfPage
{
	Windows::Foundation::IAsyncAction RenderToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & outputStream) const;
	Windows::Foundation::IAsyncAction RenderToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & outputStream, Windows::Data::Pdf::PdfPageRenderOptions const & options) const;
	Windows::Foundation::IAsyncAction PreparePageAsync() const;
	unsigned Index() const;
	Windows::Foundation::Size Size() const;
	Windows::Data::Pdf::PdfPageDimensions Dimensions() const;
	Windows::Data::Pdf::PdfPageRotation Rotation() const;
	float PreferredZoom() const;
};

template <typename T>
struct impl_IPdfDocument
{
	Windows::Data::Pdf::PdfPage GetPage(unsigned pageIndex) const;
	unsigned PageCount() const;
	bool IsPasswordProtected() const;
};

template <typename T>
struct impl_IPdfDocumentStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, String const & password) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&password)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, String const & password) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, wchar_t const (&password)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

template <typename T>
struct impl_IWordSegmentsTokenizingHandler
{
	void Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & words) const;
};

template <typename T>
struct impl_ISelectableWordSegmentsTokenizingHandler
{
	void Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & words) const;
};

template <typename T>
struct impl_ISemanticTextQueryFactory
{
	Windows::Data::Text::SemanticTextQuery Create(String const & aqsFilter) const;
	template <unsigned S0> Windows::Data::Text::SemanticTextQuery Create(wchar_t const (&aqsFilter)[S0]) const;
	Windows::Data::Text::SemanticTextQuery CreateWithLanguage(String const & aqsFilter, String const & filterLanguage) const;
	template <unsigned S0, unsigned S1> Windows::Data::Text::SemanticTextQuery CreateWithLanguage(wchar_t const (&aqsFilter)[S0], wchar_t const (&filterLanguage)[S1]) const;
};

template <typename T>
struct impl_ISemanticTextQuery
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> Find(String const & content) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> Find(wchar_t const (&content)[S0]) const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> FindInProperty(String const & propertyContent, String const & propertyName) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> FindInProperty(wchar_t const (&propertyContent)[S0], wchar_t const (&propertyName)[S1]) const;
};

template <typename T>
struct impl_IUnicodeCharactersStatics
{
	unsigned GetCodepointFromSurrogatePair(unsigned highSurrogate, unsigned lowSurrogate) const;
	void GetSurrogatePairFromCodepoint(unsigned codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate) const;
	bool IsHighSurrogate(unsigned codepoint) const;
	bool IsLowSurrogate(unsigned codepoint) const;
	bool IsSupplementary(unsigned codepoint) const;
	bool IsNoncharacter(unsigned codepoint) const;
	bool IsWhitespace(unsigned codepoint) const;
	bool IsAlphabetic(unsigned codepoint) const;
	bool IsCased(unsigned codepoint) const;
	bool IsUppercase(unsigned codepoint) const;
	bool IsLowercase(unsigned codepoint) const;
	bool IsIdStart(unsigned codepoint) const;
	bool IsIdContinue(unsigned codepoint) const;
	bool IsGraphemeBase(unsigned codepoint) const;
	bool IsGraphemeExtend(unsigned codepoint) const;
	Windows::Data::Text::UnicodeNumericType GetNumericType(unsigned codepoint) const;
	Windows::Data::Text::UnicodeGeneralCategory GetGeneralCategory(unsigned codepoint) const;
};

template <typename T>
struct impl_IAlternateWordForm
{
	Windows::Data::Text::TextSegment SourceTextSegment() const;
	String AlternateText() const;
	Windows::Data::Text::AlternateNormalizationFormat NormalizationFormat() const;
};

template <typename T>
struct impl_ISelectableWordSegment
{
	String Text() const;
	Windows::Data::Text::TextSegment SourceTextSegment() const;
};

template <typename T>
struct impl_IWordSegment
{
	String Text() const;
	Windows::Data::Text::TextSegment SourceTextSegment() const;
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::AlternateWordForm> AlternateForms() const;
};

template <typename T>
struct impl_IWordsSegmenter
{
	String ResolvedLanguage() const;
	Windows::Data::Text::WordSegment GetTokenAt(String const & text, unsigned startIndex) const;
	template <unsigned S0> Windows::Data::Text::WordSegment GetTokenAt(wchar_t const (&text)[S0], unsigned startIndex) const;
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> GetTokens(String const & text) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> GetTokens(wchar_t const (&text)[S0]) const;
	void Tokenize(String const & text, unsigned startIndex, Windows::Data::Text::IWordSegmentsTokenizingHandler const & handler) const;
	template <unsigned S0> void Tokenize(wchar_t const (&text)[S0], unsigned startIndex, Windows::Data::Text::IWordSegmentsTokenizingHandler const & handler) const;
	template <typename F> void Tokenize(String const & text, unsigned startIndex, F handler) const;
	template <unsigned S0, typename F> void Tokenize(wchar_t const (&text)[S0], unsigned startIndex, F handler) const;
};

template <typename T>
struct impl_IWordsSegmenterFactory
{
	Windows::Data::Text::WordsSegmenter CreateWithLanguage(String const & language) const;
	template <unsigned S0> Windows::Data::Text::WordsSegmenter CreateWithLanguage(wchar_t const (&language)[S0]) const;
};

template <typename T>
struct impl_ISelectableWordsSegmenter
{
	String ResolvedLanguage() const;
	Windows::Data::Text::SelectableWordSegment GetTokenAt(String const & text, unsigned startIndex) const;
	template <unsigned S0> Windows::Data::Text::SelectableWordSegment GetTokenAt(wchar_t const (&text)[S0], unsigned startIndex) const;
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> GetTokens(String const & text) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> GetTokens(wchar_t const (&text)[S0]) const;
	void Tokenize(String const & text, unsigned startIndex, Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler const & handler) const;
	template <unsigned S0> void Tokenize(wchar_t const (&text)[S0], unsigned startIndex, Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler const & handler) const;
	template <typename F> void Tokenize(String const & text, unsigned startIndex, F handler) const;
	template <unsigned S0, typename F> void Tokenize(wchar_t const (&text)[S0], unsigned startIndex, F handler) const;
};

template <typename T>
struct impl_ISelectableWordsSegmenterFactory
{
	Windows::Data::Text::SelectableWordsSegmenter CreateWithLanguage(String const & language) const;
	template <unsigned S0> Windows::Data::Text::SelectableWordsSegmenter CreateWithLanguage(wchar_t const (&language)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

template <typename T>
struct impl_IXmlNodeSelector
{
	Windows::Data::Xml::Dom::IXmlNode SelectSingleNode(String const & xpath) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode SelectSingleNode(wchar_t const (&xpath)[S0]) const;
	Windows::Data::Xml::Dom::XmlNodeList SelectNodes(String const & xpath) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList SelectNodes(wchar_t const (&xpath)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode SelectSingleNodeNS(String const & xpath, IInspectable const & namespaces) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode SelectSingleNodeNS(wchar_t const (&xpath)[S0], IInspectable const & namespaces) const;
	Windows::Data::Xml::Dom::XmlNodeList SelectNodesNS(String const & xpath, IInspectable const & namespaces) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList SelectNodesNS(wchar_t const (&xpath)[S0], IInspectable const & namespaces) const;
};

template <typename T>
struct impl_IXmlNodeSerializer
{
	String GetXml() const;
	String InnerText() const;
	void InnerText(String const & value) const;
	template <unsigned S0> void InnerText(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IXmlNode
{
	IInspectable NodeValue() const;
	void NodeValue(IInspectable const & value) const;
	Windows::Data::Xml::Dom::NodeType NodeType() const;
	String NodeName() const;
	Windows::Data::Xml::Dom::IXmlNode ParentNode() const;
	Windows::Data::Xml::Dom::XmlNodeList ChildNodes() const;
	Windows::Data::Xml::Dom::IXmlNode FirstChild() const;
	Windows::Data::Xml::Dom::IXmlNode LastChild() const;
	Windows::Data::Xml::Dom::IXmlNode PreviousSibling() const;
	Windows::Data::Xml::Dom::IXmlNode NextSibling() const;
	Windows::Data::Xml::Dom::XmlNamedNodeMap Attributes() const;
	bool HasChildNodes() const;
	Windows::Data::Xml::Dom::XmlDocument OwnerDocument() const;
	Windows::Data::Xml::Dom::IXmlNode InsertBefore(Windows::Data::Xml::Dom::IXmlNode const & newChild, Windows::Data::Xml::Dom::IXmlNode const & referenceChild) const;
	Windows::Data::Xml::Dom::IXmlNode ReplaceChild(Windows::Data::Xml::Dom::IXmlNode const & newChild, Windows::Data::Xml::Dom::IXmlNode const & referenceChild) const;
	Windows::Data::Xml::Dom::IXmlNode RemoveChild(Windows::Data::Xml::Dom::IXmlNode const & childNode) const;
	Windows::Data::Xml::Dom::IXmlNode AppendChild(Windows::Data::Xml::Dom::IXmlNode const & newChild) const;
	Windows::Data::Xml::Dom::IXmlNode CloneNode(bool deep) const;
	IInspectable NamespaceUri() const;
	IInspectable LocalName() const;
	IInspectable Prefix() const;
	void Normalize() const;
	void Prefix(IInspectable const & value) const;
};

template <typename T>
struct impl_IXmlDomImplementation
{
	bool HasFeature(String const & feature, IInspectable const & version) const;
	template <unsigned S0> bool HasFeature(wchar_t const (&feature)[S0], IInspectable const & version) const;
};

template <typename T>
struct impl_IXmlDocumentType
{
	String Name() const;
	Windows::Data::Xml::Dom::XmlNamedNodeMap Entities() const;
	Windows::Data::Xml::Dom::XmlNamedNodeMap Notations() const;
};

template <typename T>
struct impl_IXmlAttribute
{
	String Name() const;
	bool Specified() const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IXmlDocumentFragment
{
};

template <typename T>
struct impl_IXmlElement
{
	String TagName() const;
	String GetAttribute(String const & attributeName) const;
	template <unsigned S0> String GetAttribute(wchar_t const (&attributeName)[S0]) const;
	void SetAttribute(String const & attributeName, String const & attributeValue) const;
	template <unsigned S0, unsigned S1> void SetAttribute(wchar_t const (&attributeName)[S0], wchar_t const (&attributeValue)[S1]) const;
	void RemoveAttribute(String const & attributeName) const;
	template <unsigned S0> void RemoveAttribute(wchar_t const (&attributeName)[S0]) const;
	Windows::Data::Xml::Dom::XmlAttribute GetAttributeNode(String const & attributeName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute GetAttributeNode(wchar_t const (&attributeName)[S0]) const;
	Windows::Data::Xml::Dom::XmlAttribute SetAttributeNode(Windows::Data::Xml::Dom::XmlAttribute const & newAttribute) const;
	Windows::Data::Xml::Dom::XmlAttribute RemoveAttributeNode(Windows::Data::Xml::Dom::XmlAttribute const & attributeNode) const;
	Windows::Data::Xml::Dom::XmlNodeList GetElementsByTagName(String const & tagName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList GetElementsByTagName(wchar_t const (&tagName)[S0]) const;
	void SetAttributeNS(IInspectable const & namespaceUri, String const & qualifiedName, String const & value) const;
	template <unsigned S0, unsigned S1> void SetAttributeNS(IInspectable const & namespaceUri, wchar_t const (&qualifiedName)[S0], wchar_t const (&value)[S1]) const;
	String GetAttributeNS(IInspectable const & namespaceUri, String const & localName) const;
	template <unsigned S0> String GetAttributeNS(IInspectable const & namespaceUri, wchar_t const (&localName)[S0]) const;
	void RemoveAttributeNS(IInspectable const & namespaceUri, String const & localName) const;
	template <unsigned S0> void RemoveAttributeNS(IInspectable const & namespaceUri, wchar_t const (&localName)[S0]) const;
	Windows::Data::Xml::Dom::XmlAttribute SetAttributeNodeNS(Windows::Data::Xml::Dom::XmlAttribute const & newAttribute) const;
	Windows::Data::Xml::Dom::XmlAttribute GetAttributeNodeNS(IInspectable const & namespaceUri, String const & localName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute GetAttributeNodeNS(IInspectable const & namespaceUri, wchar_t const (&localName)[S0]) const;
};

template <typename T>
struct impl_IDtdNotation
{
	IInspectable PublicId() const;
	IInspectable SystemId() const;
};

template <typename T>
struct impl_IDtdEntity
{
	IInspectable PublicId() const;
	IInspectable SystemId() const;
	IInspectable NotationName() const;
};

template <typename T>
struct impl_IXmlEntityReference
{
};

template <typename T>
struct impl_IXmlProcessingInstruction
{
	String Target() const;
	String Data() const;
	void Data(String const & value) const;
	template <unsigned S0> void Data(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IXmlCharacterData
{
	String Data() const;
	void Data(String const & value) const;
	template <unsigned S0> void Data(wchar_t const (&value)[S0]) const;
	unsigned Length() const;
	String SubstringData(unsigned offset, unsigned count) const;
	void AppendData(String const & data) const;
	template <unsigned S0> void AppendData(wchar_t const (&data)[S0]) const;
	void InsertData(unsigned offset, String const & data) const;
	template <unsigned S0> void InsertData(unsigned offset, wchar_t const (&data)[S0]) const;
	void DeleteData(unsigned offset, unsigned count) const;
	void ReplaceData(unsigned offset, unsigned count, String const & data) const;
	template <unsigned S0> void ReplaceData(unsigned offset, unsigned count, wchar_t const (&data)[S0]) const;
};

template <typename T>
struct impl_IXmlComment
{
};

template <typename T>
struct impl_IXmlText
{
	Windows::Data::Xml::Dom::IXmlText SplitText(unsigned offset) const;
};

template <typename T>
struct impl_IXmlCDataSection
{
};

template <typename T>
struct impl_IXmlDocument
{
	Windows::Data::Xml::Dom::XmlDocumentType Doctype() const;
	Windows::Data::Xml::Dom::XmlDomImplementation Implementation() const;
	Windows::Data::Xml::Dom::XmlElement DocumentElement() const;
	Windows::Data::Xml::Dom::XmlElement CreateElement(String const & tagName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlElement CreateElement(wchar_t const (&tagName)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocumentFragment CreateDocumentFragment() const;
	Windows::Data::Xml::Dom::XmlText CreateTextNode(String const & data) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlText CreateTextNode(wchar_t const (&data)[S0]) const;
	Windows::Data::Xml::Dom::XmlComment CreateComment(String const & data) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlComment CreateComment(wchar_t const (&data)[S0]) const;
	Windows::Data::Xml::Dom::XmlProcessingInstruction CreateProcessingInstruction(String const & target, String const & data) const;
	template <unsigned S0, unsigned S1> Windows::Data::Xml::Dom::XmlProcessingInstruction CreateProcessingInstruction(wchar_t const (&target)[S0], wchar_t const (&data)[S1]) const;
	Windows::Data::Xml::Dom::XmlAttribute CreateAttribute(String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute CreateAttribute(wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::XmlEntityReference CreateEntityReference(String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlEntityReference CreateEntityReference(wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::XmlNodeList GetElementsByTagName(String const & tagName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList GetElementsByTagName(wchar_t const (&tagName)[S0]) const;
	Windows::Data::Xml::Dom::XmlCDataSection CreateCDataSection(String const & data) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlCDataSection CreateCDataSection(wchar_t const (&data)[S0]) const;
	String DocumentUri() const;
	Windows::Data::Xml::Dom::XmlAttribute CreateAttributeNS(IInspectable const & namespaceUri, String const & qualifiedName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute CreateAttributeNS(IInspectable const & namespaceUri, wchar_t const (&qualifiedName)[S0]) const;
	Windows::Data::Xml::Dom::XmlElement CreateElementNS(IInspectable const & namespaceUri, String const & qualifiedName) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlElement CreateElementNS(IInspectable const & namespaceUri, wchar_t const (&qualifiedName)[S0]) const;
	Windows::Data::Xml::Dom::XmlElement GetElementById(String const & elementId) const;
	template <unsigned S0> Windows::Data::Xml::Dom::XmlElement GetElementById(wchar_t const (&elementId)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode ImportNode(Windows::Data::Xml::Dom::IXmlNode const & node, bool deep) const;
};

template <typename T>
struct impl_IXmlNamedNodeMap
{
	unsigned Length() const;
	Windows::Data::Xml::Dom::IXmlNode Item(unsigned index) const;
	Windows::Data::Xml::Dom::IXmlNode GetNamedItem(String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode GetNamedItem(wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode SetNamedItem(Windows::Data::Xml::Dom::IXmlNode const & node) const;
	Windows::Data::Xml::Dom::IXmlNode RemoveNamedItem(String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode RemoveNamedItem(wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode GetNamedItemNS(IInspectable const & namespaceUri, String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode GetNamedItemNS(IInspectable const & namespaceUri, wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode RemoveNamedItemNS(IInspectable const & namespaceUri, String const & name) const;
	template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode RemoveNamedItemNS(IInspectable const & namespaceUri, wchar_t const (&name)[S0]) const;
	Windows::Data::Xml::Dom::IXmlNode SetNamedItemNS(Windows::Data::Xml::Dom::IXmlNode const & node) const;
};

template <typename T>
struct impl_IXmlNodeList
{
	unsigned Length() const;
	Windows::Data::Xml::Dom::IXmlNode Item(unsigned index) const;
};

template <typename T>
struct impl_IXmlLoadSettings
{
	unsigned MaxElementDepth() const;
	void MaxElementDepth(unsigned value) const;
	bool ProhibitDtd() const;
	void ProhibitDtd(bool value) const;
	bool ResolveExternals() const;
	void ResolveExternals(bool value) const;
	bool ValidateOnParse() const;
	void ValidateOnParse(bool value) const;
	bool ElementContentWhiteSpace() const;
	void ElementContentWhiteSpace(bool value) const;
};

template <typename T>
struct impl_IXmlDocumentIO
{
	void LoadXml(String const & xml) const;
	template <unsigned S0> void LoadXml(wchar_t const (&xml)[S0]) const;
	void LoadXml(String const & xml, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const;
	template <unsigned S0> void LoadXml(wchar_t const (&xml)[S0], Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const;
	Windows::Foundation::IAsyncAction SaveToFileAsync(Windows::Storage::IStorageFile const & file) const;
};

template <typename T>
struct impl_IXmlDocumentStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromUriAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

template <typename T>
struct impl_IXsltProcessor
{
	String TransformToString(Windows::Data::Xml::Dom::IXmlNode const & inputNode) const;
};

template <typename T>
struct impl_IXsltProcessorFactory
{
	Windows::Data::Xml::Xsl::XsltProcessor CreateInstance(Windows::Data::Xml::Dom::XmlDocument const & document) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

template <typename T>
struct impl_IDeviceUseDetails
{
	String DeviceId() const;
	String Arguments() const;
};

template <typename T>
struct impl_IDeviceServicingDetails
{
	String DeviceId() const;
	String Arguments() const;
	Windows::Foundation::TimeSpan ExpectedDuration() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

template <typename T>
struct impl_IKnownDeviceTypesStatics
{
	unsigned short Unknown() const;
};

template <typename T>
struct impl_IIOControlCode
{
	Windows::Devices::Custom::IOControlAccessMode AccessMode() const;
	Windows::Devices::Custom::IOControlBufferingMethod BufferingMethod() const;
	unsigned short Function() const;
	unsigned short DeviceType() const;
	unsigned ControlCode() const;
};

template <typename T>
struct impl_IIOControlCodeFactory
{
	Windows::Devices::Custom::IOControlCode CreateIOControlCode(unsigned short deviceType, unsigned short function, Windows::Devices::Custom::IOControlAccessMode accessMode, Windows::Devices::Custom::IOControlBufferingMethod bufferingMethod) const;
};

template <typename T>
struct impl_ICustomDeviceStatics
{
	String GetDeviceSelector(GUID classGuid) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> FromIdAsync(String const & deviceId, Windows::Devices::Custom::DeviceAccessMode desiredAccess, Windows::Devices::Custom::DeviceSharingMode sharingMode) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Devices::Custom::DeviceAccessMode desiredAccess, Windows::Devices::Custom::DeviceSharingMode sharingMode) const;
};

template <typename T>
struct impl_ICustomDevice
{
	Windows::Storage::Streams::IInputStream InputStream() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncOperation<unsigned> SendIOControlAsync(Windows::Devices::Custom::IIOControlCode const & ioControlCode, Windows::Storage::Streams::IBuffer const & inputBuffer, Windows::Storage::Streams::IBuffer const & outputBuffer) const;
	Windows::Foundation::IAsyncOperation<bool> TrySendIOControlAsync(Windows::Devices::Custom::IIOControlCode const & ioControlCode, Windows::Storage::Streams::IBuffer const & inputBuffer, Windows::Storage::Streams::IBuffer const & outputBuffer) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

template <typename T>
struct impl_IEnclosureLocation
{
	bool InDock() const;
	bool InLid() const;
	Windows::Devices::Enumeration::Panel Panel() const;
};

template <typename T>
struct impl_IDeviceInformationUpdate
{
	String Id() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
};

template <typename T>
struct impl_IDeviceWatcher
{
	EventRegistrationToken Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformation> const & handler) const;
	template <typename F> EventRegistrationToken Added(F handler) const;
	void Added(EventRegistrationToken token) const;
	EventRegistrationToken Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const;
	template <typename F> EventRegistrationToken Updated(F handler) const;
	void Updated(EventRegistrationToken token) const;
	EventRegistrationToken Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const;
	template <typename F> EventRegistrationToken Removed(F handler) const;
	void Removed(EventRegistrationToken token) const;
	EventRegistrationToken EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken EnumerationCompleted(F handler) const;
	void EnumerationCompleted(EventRegistrationToken token) const;
	EventRegistrationToken Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Stopped(F handler) const;
	void Stopped(EventRegistrationToken token) const;
	Windows::Devices::Enumeration::DeviceWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
};

template <typename T>
struct impl_IDeviceInformationStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(wchar_t const (&deviceId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(String const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(String const & aqsFilter) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(wchar_t const (&aqsFilter)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher() const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(String const & aqsFilter) const;
	template <unsigned S0> Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(wchar_t const (&aqsFilter)[S0]) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
	template <unsigned S0> Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const;
};

template <typename T>
struct impl_IDeviceInformation
{
	String Id() const;
	String Name() const;
	bool IsEnabled() const;
	bool IsDefault() const;
	Windows::Devices::Enumeration::EnclosureLocation EnclosureLocation() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
	void Update(Windows::Devices::Enumeration::DeviceInformationUpdate const & updateInfo) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> GetThumbnailAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> GetGlyphThumbnailAsync() const;
};

template <typename T>
struct impl_IDeviceAccessChangedEventArgs
{
	Windows::Devices::Enumeration::DeviceAccessStatus Status() const;
};

template <typename T>
struct impl_IDeviceAccessInformation
{
	EventRegistrationToken AccessChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceAccessInformation, Windows::Devices::Enumeration::DeviceAccessChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccessChanged(F handler) const;
	void AccessChanged(EventRegistrationToken cookie) const;
	Windows::Devices::Enumeration::DeviceAccessStatus CurrentStatus() const;
};

template <typename T>
struct impl_IDeviceAccessInformationStatics
{
	Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(String const & deviceId) const;
	template <unsigned S0> Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(wchar_t const (&deviceId)[S0]) const;
	Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClassId(GUID deviceClassId) const;
	Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

template <typename T>
struct impl_IPnpObjectUpdate
{
	Windows::Devices::Enumeration::Pnp::PnpObjectType Type() const;
	String Id() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
};

template <typename T>
struct impl_IPnpObjectWatcher
{
	EventRegistrationToken Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObject> const & handler) const;
	template <typename F> EventRegistrationToken Added(F handler) const;
	void Added(EventRegistrationToken token) const;
	EventRegistrationToken Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate> const & handler) const;
	template <typename F> EventRegistrationToken Updated(F handler) const;
	void Updated(EventRegistrationToken token) const;
	EventRegistrationToken Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate> const & handler) const;
	template <typename F> EventRegistrationToken Removed(F handler) const;
	void Removed(EventRegistrationToken token) const;
	EventRegistrationToken EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken EnumerationCompleted(F handler) const;
	void EnumerationCompleted(EventRegistrationToken token) const;
	EventRegistrationToken Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Stopped(F handler) const;
	void Stopped(EventRegistrationToken token) const;
	Windows::Devices::Enumeration::DeviceWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
};

template <typename T>
struct impl_IPnpObjectStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, String const & id, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, wchar_t const (&id)[S0], Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]) const;
	Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const;
	Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter) const;
	template <unsigned S0> Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]) const;
};

template <typename T>
struct impl_IPnpObject
{
	Windows::Devices::Enumeration::Pnp::PnpObjectType Type() const;
	String Id() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
	void Update(Windows::Devices::Enumeration::Pnp::PnpObjectUpdate const & updateInfo) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

template <typename T>
struct impl_IGeoshape
{
	Windows::Devices::Geolocation::GeoshapeType GeoshapeType() const;
	unsigned SpatialReferenceId() const;
	Windows::Devices::Geolocation::AltitudeReferenceSystem AltitudeReferenceSystem() const;
};

template <typename T>
struct impl_IGeopoint
{
	Windows::Devices::Geolocation::BasicGeoposition Position() const;
};

template <typename T>
struct impl_IGeopointFactory
{
	Windows::Devices::Geolocation::Geopoint Create(Windows::Devices::Geolocation::BasicGeoposition const & position) const;
	Windows::Devices::Geolocation::Geopoint CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem) const;
	Windows::Devices::Geolocation::Geopoint CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId) const;
};

template <typename T>
struct impl_IGeocoordinateSatelliteData
{
	Windows::Foundation::IReference<double> PositionDilutionOfPrecision() const;
	Windows::Foundation::IReference<double> HorizontalDilutionOfPrecision() const;
	Windows::Foundation::IReference<double> VerticalDilutionOfPrecision() const;
};

template <typename T>
struct impl_IGeocoordinate
{
	double Accuracy() const;
	Windows::Foundation::IReference<double> AltitudeAccuracy() const;
	Windows::Foundation::IReference<double> Heading() const;
	Windows::Foundation::IReference<double> Speed() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
struct impl_IGeocoordinateWithPositionData
{
	Windows::Devices::Geolocation::PositionSource PositionSource() const;
	Windows::Devices::Geolocation::GeocoordinateSatelliteData SatelliteData() const;
};

template <typename T>
struct impl_IGeocoordinateWithPoint
{
	Windows::Devices::Geolocation::Geopoint Point() const;
};

template <typename T>
struct impl_ICivicAddress
{
	String Country() const;
	String State() const;
	String City() const;
	String PostalCode() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
struct impl_IGeoposition
{
	Windows::Devices::Geolocation::Geocoordinate Coordinate() const;
	Windows::Devices::Geolocation::CivicAddress CivicAddress() const;
};

template <typename T>
struct impl_IPositionChangedEventArgs
{
	Windows::Devices::Geolocation::Geoposition Position() const;
};

template <typename T>
struct impl_IStatusChangedEventArgs
{
	Windows::Devices::Geolocation::PositionStatus Status() const;
};

template <typename T>
struct impl_IGeolocator
{
	Windows::Devices::Geolocation::PositionAccuracy DesiredAccuracy() const;
	void DesiredAccuracy(Windows::Devices::Geolocation::PositionAccuracy value) const;
	double MovementThreshold() const;
	void MovementThreshold(double value) const;
	unsigned ReportInterval() const;
	void ReportInterval(unsigned value) const;
	Windows::Devices::Geolocation::PositionStatus LocationStatus() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> GetGeopositionAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> GetGeopositionAsync(Windows::Foundation::TimeSpan const & maximumAge, Windows::Foundation::TimeSpan const & timeout) const;
	EventRegistrationToken PositionChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::PositionChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PositionChanged(F handler) const;
	void PositionChanged(EventRegistrationToken token) const;
	EventRegistrationToken StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::StatusChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken StatusChanged(F handler) const;
	void StatusChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IGeolocatorWithScalarAccuracy
{
	Windows::Foundation::IReference<unsigned> DesiredAccuracyInMeters() const;
	void DesiredAccuracyInMeters(Windows::Foundation::IReference<unsigned> const & value) const;
};

template <typename T>
struct impl_IGeocircle
{
	Windows::Devices::Geolocation::BasicGeoposition Center() const;
	double Radius() const;
};

template <typename T>
struct impl_IGeocircleFactory
{
	Windows::Devices::Geolocation::Geocircle Create(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius) const;
	Windows::Devices::Geolocation::Geocircle CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem) const;
	Windows::Devices::Geolocation::Geocircle CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

template <typename T>
struct impl_IGeofenceFactory
{
	Windows::Devices::Geolocation::Geofencing::Geofence Create(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape) const;
	template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence Create(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape) const;
	Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStates(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse) const;
	template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStates(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse) const;
	Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStatesAndDwellTime(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime) const;
	template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStatesAndDwellTime(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime) const;
	Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStatesDwellTimeStartTimeAndDuration(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const;
	template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence CreateWithMonitorStatesDwellTimeStartTimeAndDuration(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const;
};

template <typename T>
struct impl_IGeofence
{
	Windows::Foundation::DateTime StartTime() const;
	Windows::Foundation::TimeSpan Duration() const;
	Windows::Foundation::TimeSpan DwellTime() const;
	String Id() const;
	Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates MonitoredStates() const;
	Windows::Devices::Geolocation::IGeoshape Geoshape() const;
	bool SingleUse() const;
};

template <typename T>
struct impl_IGeofenceStateChangeReport
{
	Windows::Devices::Geolocation::Geofencing::GeofenceState NewState() const;
	Windows::Devices::Geolocation::Geofencing::Geofence Geofence() const;
	Windows::Devices::Geolocation::Geoposition Geoposition() const;
	Windows::Devices::Geolocation::Geofencing::GeofenceRemovalReason RemovalReason() const;
};

template <typename T>
struct impl_IGeofenceMonitorStatics
{
	Windows::Devices::Geolocation::Geofencing::GeofenceMonitor Current() const;
};

template <typename T>
struct impl_IGeofenceMonitor
{
	Windows::Devices::Geolocation::Geofencing::GeofenceMonitorStatus Status() const;
	Windows::Foundation::Collections::IVector<Windows::Devices::Geolocation::Geofencing::Geofence> Geofences() const;
	Windows::Devices::Geolocation::Geoposition LastKnownGeoposition() const;
	EventRegistrationToken GeofenceStateChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken GeofenceStateChanged(F eventHandler) const;
	void GeofenceStateChanged(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport> ReadReports() const;
	EventRegistrationToken StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken StatusChanged(F eventHandler) const;
	void StatusChanged(EventRegistrationToken token) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

template <typename T>
struct impl_IHidDeviceStatics
{
	String GetDeviceSelector(unsigned short usagePage, unsigned short usageId) const;
	String GetDeviceSelector(unsigned short usagePage, unsigned short usageId, unsigned short vendorId, unsigned short productId) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> FromIdAsync(String const & deviceId, Windows::Storage::FileAccessMode accessMode) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Storage::FileAccessMode accessMode) const;
};

template <typename T>
struct impl_IHidBooleanControlDescription
{
	unsigned Id() const;
	unsigned short ReportId() const;
	Windows::Devices::HumanInterfaceDevice::HidReportType ReportType() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> ParentCollections() const;
};

template <typename T>
struct impl_IHidNumericControlDescription
{
	unsigned Id() const;
	unsigned short ReportId() const;
	Windows::Devices::HumanInterfaceDevice::HidReportType ReportType() const;
	unsigned ReportSize() const;
	unsigned ReportCount() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	int LogicalMinimum() const;
	int LogicalMaximum() const;
	int PhysicalMinimum() const;
	int PhysicalMaximum() const;
	unsigned UnitExponent() const;
	unsigned Unit() const;
	bool IsAbsolute() const;
	bool HasNull() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> ParentCollections() const;
};

template <typename T>
struct impl_IHidCollection
{
	unsigned Id() const;
	Windows::Devices::HumanInterfaceDevice::HidCollectionType Type() const;
	unsigned UsagePage() const;
	unsigned UsageId() const;
};

template <typename T>
struct impl_IHidInputReport
{
	unsigned short Id() const;
	Windows::Storage::Streams::IBuffer Data() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> ActivatedBooleanControls() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> TransitionedBooleanControls() const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const;
};

template <typename T>
struct impl_IHidOutputReport
{
	unsigned short Id() const;
	Windows::Storage::Streams::IBuffer Data() const;
	void Data(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const;
};

template <typename T>
struct impl_IHidFeatureReport
{
	unsigned short Id() const;
	Windows::Storage::Streams::IBuffer Data() const;
	void Data(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControl(unsigned short usagePage, unsigned short usageId) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControl GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const;
};

template <typename T>
struct impl_IHidInputReportReceivedEventArgs
{
	Windows::Devices::HumanInterfaceDevice::HidInputReport Report() const;
};

template <typename T>
struct impl_IHidBooleanControl
{
	unsigned Id() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	bool IsActive() const;
	void IsActive(bool value) const;
	Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription ControlDescription() const;
};

template <typename T>
struct impl_IHidNumericControl
{
	unsigned Id() const;
	bool IsGrouped() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	long long Value() const;
	void Value(long long value) const;
	long long ScaledValue() const;
	void ScaledValue(long long value) const;
	Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription ControlDescription() const;
};

template <typename T>
struct impl_IHidDevice
{
	unsigned short VendorId() const;
	unsigned short ProductId() const;
	unsigned short Version() const;
	unsigned short UsagePage() const;
	unsigned short UsageId() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> GetInputReportAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> GetInputReportAsync(unsigned short reportId) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> GetFeatureReportAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> GetFeatureReportAsync(unsigned short reportId) const;
	Windows::Devices::HumanInterfaceDevice::HidOutputReport CreateOutputReport() const;
	Windows::Devices::HumanInterfaceDevice::HidOutputReport CreateOutputReport(unsigned short reportId) const;
	Windows::Devices::HumanInterfaceDevice::HidFeatureReport CreateFeatureReport() const;
	Windows::Devices::HumanInterfaceDevice::HidFeatureReport CreateFeatureReport(unsigned short reportId) const;
	Windows::Foundation::IAsyncOperation<unsigned> SendOutputReportAsync(Windows::Devices::HumanInterfaceDevice::HidOutputReport const & outputReport) const;
	Windows::Foundation::IAsyncOperation<unsigned> SendFeatureReportAsync(Windows::Devices::HumanInterfaceDevice::HidFeatureReport const & featureReport) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription> GetBooleanControlDescriptions(Windows::Devices::HumanInterfaceDevice::HidReportType reportType, unsigned short usagePage, unsigned short usageId) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription> GetNumericControlDescriptions(Windows::Devices::HumanInterfaceDevice::HidReportType reportType, unsigned short usagePage, unsigned short usageId) const;
	EventRegistrationToken InputReportReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::HumanInterfaceDevice::HidDevice, Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs> const & reportHandler) const;
	template <typename F> EventRegistrationToken InputReportReceived(F reportHandler) const;
	void InputReportReceived(EventRegistrationToken token) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

template <typename T>
struct impl_IMouseCapabilities
{
	int MousePresent() const;
	int VerticalWheelPresent() const;
	int HorizontalWheelPresent() const;
	int SwapButtons() const;
	unsigned NumberOfButtons() const;
};

template <typename T>
struct impl_IKeyboardCapabilities
{
	int KeyboardPresent() const;
};

template <typename T>
struct impl_ITouchCapabilities
{
	int TouchPresent() const;
	unsigned Contacts() const;
};

template <typename T>
struct impl_IPointerDeviceStatics
{
	Windows::Devices::Input::PointerDevice GetPointerDevice(unsigned pointerId) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> GetPointerDevices() const;
};

template <typename T>
struct impl_IPointerDevice
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	bool IsIntegrated() const;
	unsigned MaxContacts() const;
	Windows::Foundation::Rect PhysicalDeviceRect() const;
	Windows::Foundation::Rect ScreenRect() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Devices::Input::PointerDeviceUsage> SupportedUsages() const;
};

template <typename T>
struct impl_IMouseEventArgs
{
	Windows::Devices::Input::MouseDelta MouseDelta() const;
};

template <typename T>
struct impl_IMouseDevice
{
	EventRegistrationToken MouseMoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::Input::MouseDevice, Windows::Devices::Input::MouseEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken MouseMoved(F handler) const;
	void MouseMoved(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IMouseDeviceStatics
{
	Windows::Devices::Input::MouseDevice GetForCurrentView() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

template <typename T>
struct impl_IUnifiedPosErrorData
{
	String Message() const;
	Windows::Devices::PointOfService::UnifiedPosErrorSeverity Severity() const;
	Windows::Devices::PointOfService::UnifiedPosErrorReason Reason() const;
	unsigned ExtendedReason() const;
};

template <typename T>
struct impl_IBarcodeScannerStatusUpdatedEventArgs
{
	Windows::Devices::PointOfService::BarcodeScannerStatus Status() const;
	unsigned ExtendedStatus() const;
};

template <typename T>
struct impl_IBarcodeSymbologiesStatics
{
	unsigned Unknown() const;
	unsigned Ean8() const;
	unsigned Ean8Add2() const;
	unsigned Ean8Add5() const;
	unsigned Eanv() const;
	unsigned EanvAdd2() const;
	unsigned EanvAdd5() const;
	unsigned Ean13() const;
	unsigned Ean13Add2() const;
	unsigned Ean13Add5() const;
	unsigned Isbn() const;
	unsigned IsbnAdd5() const;
	unsigned Ismn() const;
	unsigned IsmnAdd2() const;
	unsigned IsmnAdd5() const;
	unsigned Issn() const;
	unsigned IssnAdd2() const;
	unsigned IssnAdd5() const;
	unsigned Ean99() const;
	unsigned Ean99Add2() const;
	unsigned Ean99Add5() const;
	unsigned Upca() const;
	unsigned UpcaAdd2() const;
	unsigned UpcaAdd5() const;
	unsigned Upce() const;
	unsigned UpceAdd2() const;
	unsigned UpceAdd5() const;
	unsigned UpcCoupon() const;
	unsigned TfStd() const;
	unsigned TfDis() const;
	unsigned TfInt() const;
	unsigned TfInd() const;
	unsigned TfMat() const;
	unsigned TfIata() const;
	unsigned Gs1DatabarType1() const;
	unsigned Gs1DatabarType2() const;
	unsigned Gs1DatabarType3() const;
	unsigned Code39() const;
	unsigned Code39Ex() const;
	unsigned Trioptic39() const;
	unsigned Code32() const;
	unsigned Pzn() const;
	unsigned Code93() const;
	unsigned Code93Ex() const;
	unsigned Code128() const;
	unsigned Gs1128() const;
	unsigned Gs1128Coupon() const;
	unsigned UccEan128() const;
	unsigned Sisac() const;
	unsigned Isbt() const;
	unsigned Codabar() const;
	unsigned Code11() const;
	unsigned Msi() const;
	unsigned Plessey() const;
	unsigned Telepen() const;
	unsigned Code16k() const;
	unsigned CodablockA() const;
	unsigned CodablockF() const;
	unsigned Codablock128() const;
	unsigned Code49() const;
	unsigned Aztec() const;
	unsigned DataCode() const;
	unsigned DataMatrix() const;
	unsigned HanXin() const;
	unsigned Maxicode() const;
	unsigned MicroPdf417() const;
	unsigned MicroQr() const;
	unsigned Pdf417() const;
	unsigned Qr() const;
	unsigned MsTag() const;
	unsigned Ccab() const;
	unsigned Ccc() const;
	unsigned Tlc39() const;
	unsigned AusPost() const;
	unsigned CanPost() const;
	unsigned ChinaPost() const;
	unsigned DutchKix() const;
	unsigned InfoMail() const;
	unsigned ItalianPost25() const;
	unsigned ItalianPost39() const;
	unsigned JapanPost() const;
	unsigned KoreanPost() const;
	unsigned SwedenPost() const;
	unsigned UkPost() const;
	unsigned UsIntelligent() const;
	unsigned UsIntelligentPkg() const;
	unsigned UsPlanet() const;
	unsigned UsPostNet() const;
	unsigned Us4StateFics() const;
	unsigned OcrA() const;
	unsigned OcrB() const;
	unsigned Micr() const;
	unsigned ExtendedBase() const;
	String GetName(unsigned scanDataType) const;
};

template <typename T>
struct impl_IBarcodeScannerDataReceivedEventArgs
{
	Windows::Devices::PointOfService::BarcodeScannerReport Report() const;
};

template <typename T>
struct impl_IBarcodeScannerReport
{
	unsigned ScanDataType() const;
	Windows::Storage::Streams::IBuffer ScanData() const;
	Windows::Storage::Streams::IBuffer ScanDataLabel() const;
};

template <typename T>
struct impl_IBarcodeScannerErrorOccurredEventArgs
{
	Windows::Devices::PointOfService::BarcodeScannerReport PartialInputData() const;
	bool IsRetriable() const;
	Windows::Devices::PointOfService::UnifiedPosErrorData ErrorData() const;
};

template <typename T>
struct impl_IBarcodeScannerImagePreviewReceivedEventArgs
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType Preview() const;
};

template <typename T>
struct impl_IBarcodeScannerCapabilities
{
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType PowerReportingType() const;
	bool IsStatisticsReportingSupported() const;
	bool IsStatisticsUpdatingSupported() const;
	bool IsImagePreviewSupported() const;
};

template <typename T>
struct impl_IBarcodeScannerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> GetDefaultAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
	String GetDeviceSelector() const;
};

template <typename T>
struct impl_IBarcodeScanner
{
	String DeviceId() const;
	Windows::Devices::PointOfService::BarcodeScannerCapabilities Capabilities() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedBarcodeScanner> ClaimScannerAsync() const;
	Windows::Foundation::IAsyncOperation<String> CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel level) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<unsigned>> GetSupportedSymbologiesAsync() const;
	Windows::Foundation::IAsyncOperation<bool> IsSymbologySupportedAsync(unsigned barcodeSymbology) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> RetrieveStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const;
	Windows::Foundation::Collections::IVectorView<String> GetSupportedProfiles() const;
	bool IsProfileSupported(String const & profile) const;
	template <unsigned S0> bool IsProfileSupported(wchar_t const (&profile)[S0]) const;
	EventRegistrationToken StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::BarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken StatusUpdated(F handler) const;
	void StatusUpdated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IMagneticStripeReaderEncryptionAlgorithmsStatics
{
	unsigned None() const;
	unsigned TripleDesDukpt() const;
	unsigned ExtendedBase() const;
};

template <typename T>
struct impl_IMagneticStripeReaderCardTypesStatics
{
	unsigned Unknown() const;
	unsigned Bank() const;
	unsigned Aamva() const;
	unsigned ExtendedBase() const;
};

template <typename T>
struct impl_IMagneticStripeReaderTrackData
{
	Windows::Storage::Streams::IBuffer Data() const;
	Windows::Storage::Streams::IBuffer DiscretionaryData() const;
	Windows::Storage::Streams::IBuffer EncryptedData() const;
};

template <typename T>
struct impl_IMagneticStripeReaderReport
{
	unsigned CardType() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData Track1() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData Track2() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData Track3() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData Track4() const;
	Windows::Foundation::Collections::IMapView<String, String> Properties() const;
	Windows::Storage::Streams::IBuffer CardAuthenticationData() const;
	unsigned CardAuthenticationDataLength() const;
	Windows::Storage::Streams::IBuffer AdditionalSecurityInformation() const;
};

template <typename T>
struct impl_IMagneticStripeReaderBankCardDataReceivedEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport Report() const;
	String AccountNumber() const;
	String ExpirationDate() const;
	String ServiceCode() const;
	String Title() const;
	String FirstName() const;
	String MiddleInitial() const;
	String Surname() const;
	String Suffix() const;
};

template <typename T>
struct impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport Report() const;
	String LicenseNumber() const;
	String ExpirationDate() const;
	String Restrictions() const;
	String Class() const;
	String Endorsements() const;
	String BirthDate() const;
	String FirstName() const;
	String Surname() const;
	String Suffix() const;
	String Gender() const;
	String HairColor() const;
	String EyeColor() const;
	String Height() const;
	String Weight() const;
	String Address() const;
	String City() const;
	String State() const;
	String PostalCode() const;
};

template <typename T>
struct impl_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport Report() const;
};

template <typename T>
struct impl_IMagneticStripeReaderErrorOccurredEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType Track1Status() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType Track2Status() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType Track3Status() const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType Track4Status() const;
	Windows::Devices::PointOfService::UnifiedPosErrorData ErrorData() const;
	Windows::Devices::PointOfService::MagneticStripeReaderReport PartialInputData() const;
};

template <typename T>
struct impl_IMagneticStripeReaderStatusUpdatedEventArgs
{
	Windows::Devices::PointOfService::MagneticStripeReaderStatus Status() const;
	unsigned ExtendedStatus() const;
};

template <typename T>
struct impl_IMagneticStripeReaderCapabilities
{
	String CardAuthentication() const;
	unsigned SupportedEncryptionAlgorithms() const;
	Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationLevel AuthenticationLevel() const;
	bool IsIsoSupported() const;
	bool IsJisOneSupported() const;
	bool IsJisTwoSupported() const;
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType PowerReportingType() const;
	bool IsStatisticsReportingSupported() const;
	bool IsStatisticsUpdatingSupported() const;
	bool IsTrackDataMaskingSupported() const;
	bool IsTransmitSentinelsSupported() const;
};

template <typename T>
struct impl_IMagneticStripeReaderStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> GetDefaultAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
	String GetDeviceSelector() const;
};

template <typename T>
struct impl_IMagneticStripeReader
{
	String DeviceId() const;
	Windows::Devices::PointOfService::MagneticStripeReaderCapabilities Capabilities() const;
	Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationProtocol DeviceAuthenticationProtocol() const;
	Windows::Foundation::IAsyncOperation<String> CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel level) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> ClaimReaderAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> RetrieveStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const;
	Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType GetErrorReportingType() const;
	EventRegistrationToken StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::MagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken StatusUpdated(F handler) const;
	void StatusUpdated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IClaimedBarcodeScanner
{
	String DeviceId() const;
	bool IsEnabled() const;
	void IsDisabledOnDataReceived(bool value) const;
	bool IsDisabledOnDataReceived() const;
	void IsDecodeDataEnabled(bool value) const;
	bool IsDecodeDataEnabled() const;
	Windows::Foundation::IAsyncAction EnableAsync() const;
	Windows::Foundation::IAsyncAction DisableAsync() const;
	void RetainDevice() const;
	Windows::Foundation::IAsyncAction SetActiveSymbologiesAsync(Windows::Foundation::Collections::IIterable<unsigned> const & symbologies) const;
	Windows::Foundation::IAsyncAction ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const;
	Windows::Foundation::IAsyncAction UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const;
	Windows::Foundation::IAsyncAction SetActiveProfileAsync(String const & profile) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction SetActiveProfileAsync(wchar_t const (&profile)[S0]) const;
	EventRegistrationToken DataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken DataReceived(F handler) const;
	void DataReceived(EventRegistrationToken token) const;
	EventRegistrationToken TriggerPressed(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const;
	template <typename F> EventRegistrationToken TriggerPressed(F handler) const;
	void TriggerPressed(EventRegistrationToken token) const;
	EventRegistrationToken TriggerReleased(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const;
	template <typename F> EventRegistrationToken TriggerReleased(F handler) const;
	void TriggerReleased(EventRegistrationToken token) const;
	EventRegistrationToken ReleaseDeviceRequested(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const;
	template <typename F> EventRegistrationToken ReleaseDeviceRequested(F handler) const;
	void ReleaseDeviceRequested(EventRegistrationToken token) const;
	EventRegistrationToken ImagePreviewReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ImagePreviewReceived(F handler) const;
	void ImagePreviewReceived(EventRegistrationToken token) const;
	EventRegistrationToken ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ErrorOccurred(F handler) const;
	void ErrorOccurred(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IClaimedMagneticStripeReader
{
	String DeviceId() const;
	bool IsEnabled() const;
	void IsDisabledOnDataReceived(bool value) const;
	bool IsDisabledOnDataReceived() const;
	void IsDecodeDataEnabled(bool value) const;
	bool IsDecodeDataEnabled() const;
	bool IsDeviceAuthenticated() const;
	void DataEncryptionAlgorithm(unsigned value) const;
	unsigned DataEncryptionAlgorithm() const;
	void TracksToRead(Windows::Devices::PointOfService::MagneticStripeReaderTrackIds value) const;
	Windows::Devices::PointOfService::MagneticStripeReaderTrackIds TracksToRead() const;
	void IsTransmitSentinelsEnabled(bool value) const;
	bool IsTransmitSentinelsEnabled() const;
	Windows::Foundation::IAsyncAction EnableAsync() const;
	Windows::Foundation::IAsyncAction DisableAsync() const;
	void RetainDevice() const;
	void SetErrorReportingType(Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType value) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> RetrieveDeviceAuthenticationDataAsync() const;
	Windows::Foundation::IAsyncAction UpdateKeyAsync(String const & key, String const & keyName) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction UpdateKeyAsync(wchar_t const (&key)[S0], wchar_t const (&keyName)[S1]) const;
	Windows::Foundation::IAsyncAction ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const;
	Windows::Foundation::IAsyncAction UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const;
	EventRegistrationToken BankCardDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken BankCardDataReceived(F handler) const;
	void BankCardDataReceived(EventRegistrationToken token) const;
	EventRegistrationToken AamvaCardDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AamvaCardDataReceived(F handler) const;
	void AamvaCardDataReceived(EventRegistrationToken token) const;
	EventRegistrationToken VendorSpecificDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VendorSpecificDataReceived(F handler) const;
	void VendorSpecificDataReceived(EventRegistrationToken token) const;
	EventRegistrationToken ReleaseDeviceRequested(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> const & handler) const;
	template <typename F> EventRegistrationToken ReleaseDeviceRequested(F handler) const;
	void ReleaseDeviceRequested(EventRegistrationToken token) const;
	EventRegistrationToken ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ErrorOccurred(F handler) const;
	void ErrorOccurred(EventRegistrationToken token) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

template <typename T>
struct impl_IStorageDeviceStatics
{
	Windows::Storage::StorageFolder FromId(String const & deviceId) const;
	template <unsigned S0> Windows::Storage::StorageFolder FromId(wchar_t const (&deviceId)[S0]) const;
	String GetDeviceSelector() const;
};

template <typename T>
struct impl_IServiceDeviceStatics
{
	String GetDeviceSelector(Windows::Devices::Portable::ServiceDeviceType serviceType) const;
	String GetDeviceSelectorFromServiceId(GUID serviceId) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

template <typename T>
struct impl_IPrintTaskConfigurationSaveRequestedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IPrintTaskConfigurationSaveRequest
{
	void Cancel() const;
	void Save(IInspectable const & printerExtensionContext) const;
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
struct impl_IPrintTaskConfigurationSaveRequestedEventArgs
{
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest Request() const;
};

template <typename T>
struct impl_IPrintTaskConfiguration
{
	IInspectable PrinterExtensionContext() const;
	EventRegistrationToken SaveRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Printers::Extensions::PrintTaskConfiguration, Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken SaveRequested(F eventHandler) const;
	void SaveRequested(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IPrintNotificationEventDetails
{
	String PrinterName() const;
	String EventData() const;
	void EventData(String const & value) const;
	template <unsigned S0> void EventData(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IPrintExtensionContextStatic
{
	IInspectable FromDeviceId(String const & deviceId) const;
	template <unsigned S0> IInspectable FromDeviceId(wchar_t const (&deviceId)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

template <typename T>
struct impl_IAccelerometerStatics
{
	Windows::Devices::Sensors::Accelerometer GetDefault() const;
};

template <typename T>
struct impl_IAccelerometer
{
	Windows::Devices::Sensors::AccelerometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
	EventRegistrationToken Shaken(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerShakenEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Shaken(F handler) const;
	void Shaken(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IAccelerometerReading
{
	Windows::Foundation::DateTime Timestamp() const;
	double AccelerationX() const;
	double AccelerationY() const;
	double AccelerationZ() const;
};

template <typename T>
struct impl_IAccelerometerReadingChangedEventArgs
{
	Windows::Devices::Sensors::AccelerometerReading Reading() const;
};

template <typename T>
struct impl_IAccelerometerShakenEventArgs
{
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
struct impl_IInclinometerStatics
{
	Windows::Devices::Sensors::Inclinometer GetDefault() const;
};

template <typename T>
struct impl_IInclinometer
{
	Windows::Devices::Sensors::InclinometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Inclinometer, Windows::Devices::Sensors::InclinometerReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IInclinometerReading
{
	Windows::Foundation::DateTime Timestamp() const;
	float PitchDegrees() const;
	float RollDegrees() const;
	float YawDegrees() const;
};

template <typename T>
struct impl_IInclinometerReadingYawAccuracy
{
	Windows::Devices::Sensors::MagnetometerAccuracy YawAccuracy() const;
};

template <typename T>
struct impl_IInclinometerReadingChangedEventArgs
{
	Windows::Devices::Sensors::InclinometerReading Reading() const;
};

template <typename T>
struct impl_IGyrometerStatics
{
	Windows::Devices::Sensors::Gyrometer GetDefault() const;
};

template <typename T>
struct impl_IGyrometer
{
	Windows::Devices::Sensors::GyrometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Gyrometer, Windows::Devices::Sensors::GyrometerReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IGyrometerReading
{
	Windows::Foundation::DateTime Timestamp() const;
	double AngularVelocityX() const;
	double AngularVelocityY() const;
	double AngularVelocityZ() const;
};

template <typename T>
struct impl_IGyrometerReadingChangedEventArgs
{
	Windows::Devices::Sensors::GyrometerReading Reading() const;
};

template <typename T>
struct impl_ICompassStatics
{
	Windows::Devices::Sensors::Compass GetDefault() const;
};

template <typename T>
struct impl_ICompass
{
	Windows::Devices::Sensors::CompassReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Compass, Windows::Devices::Sensors::CompassReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICompassReading
{
	Windows::Foundation::DateTime Timestamp() const;
	double HeadingMagneticNorth() const;
	Windows::Foundation::IReference<double> HeadingTrueNorth() const;
};

template <typename T>
struct impl_ICompassReadingHeadingAccuracy
{
	Windows::Devices::Sensors::MagnetometerAccuracy HeadingAccuracy() const;
};

template <typename T>
struct impl_ICompassReadingChangedEventArgs
{
	Windows::Devices::Sensors::CompassReading Reading() const;
};

template <typename T>
struct impl_ILightSensorStatics
{
	Windows::Devices::Sensors::LightSensor GetDefault() const;
};

template <typename T>
struct impl_ILightSensor
{
	Windows::Devices::Sensors::LightSensorReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::LightSensor, Windows::Devices::Sensors::LightSensorReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ILightSensorReading
{
	Windows::Foundation::DateTime Timestamp() const;
	float IlluminanceInLux() const;
};

template <typename T>
struct impl_ILightSensorReadingChangedEventArgs
{
	Windows::Devices::Sensors::LightSensorReading Reading() const;
};

template <typename T>
struct impl_ISensorRotationMatrix
{
	float M11() const;
	float M12() const;
	float M13() const;
	float M21() const;
	float M22() const;
	float M23() const;
	float M31() const;
	float M32() const;
	float M33() const;
};

template <typename T>
struct impl_ISensorQuaternion
{
	float W() const;
	float X() const;
	float Y() const;
	float Z() const;
};

template <typename T>
struct impl_IOrientationSensorStatics
{
	Windows::Devices::Sensors::OrientationSensor GetDefault() const;
};

template <typename T>
struct impl_IOrientationSensor
{
	Windows::Devices::Sensors::OrientationSensorReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	EventRegistrationToken ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::OrientationSensor, Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ReadingChanged(F handler) const;
	void ReadingChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IOrientationSensorReading
{
	Windows::Foundation::DateTime Timestamp() const;
	Windows::Devices::Sensors::SensorRotationMatrix RotationMatrix() const;
	Windows::Devices::Sensors::SensorQuaternion Quaternion() const;
};

template <typename T>
struct impl_IOrientationSensorReadingYawAccuracy
{
	Windows::Devices::Sensors::MagnetometerAccuracy YawAccuracy() const;
};

template <typename T>
struct impl_IOrientationSensorReadingChangedEventArgs
{
	Windows::Devices::Sensors::OrientationSensorReading Reading() const;
};

template <typename T>
struct impl_ISimpleOrientationSensorStatics
{
	Windows::Devices::Sensors::SimpleOrientationSensor GetDefault() const;
};

template <typename T>
struct impl_ISimpleOrientationSensor
{
	Windows::Devices::Sensors::SimpleOrientation GetCurrentOrientation() const;
	EventRegistrationToken OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::SimpleOrientationSensor, Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken OrientationChanged(F handler) const;
	void OrientationChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ISimpleOrientationSensorOrientationChangedEventArgs
{
	Windows::Foundation::DateTime Timestamp() const;
	Windows::Devices::Sensors::SimpleOrientation Orientation() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

template <typename T>
struct impl_ISmartCardPinResetHandler
{
	void Invoke(Windows::Devices::SmartCards::SmartCardProvisioning const & sender, Windows::Devices::SmartCards::SmartCardPinResetRequest const & request) const;
};

template <typename T>
struct impl_ISmartCardReaderStatics
{
	String GetDeviceSelector() const;
	String GetDeviceSelector(Windows::Devices::SmartCards::SmartCardReaderKind kind) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_ISmartCardReader
{
	String DeviceId() const;
	String Name() const;
	Windows::Devices::SmartCards::SmartCardReaderKind Kind() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Devices::SmartCards::SmartCardReaderStatus> GetStatusAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::SmartCards::SmartCard>> FindAllCardsAsync() const;
	EventRegistrationToken CardAdded(Windows::Foundation::ITypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardAddedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CardAdded(F handler) const;
	void CardAdded(EventRegistrationToken token) const;
	EventRegistrationToken CardRemoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardRemovedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CardRemoved(F handler) const;
	void CardRemoved(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICardAddedEventArgs
{
	Windows::Devices::SmartCards::SmartCard SmartCard() const;
};

template <typename T>
struct impl_ICardRemovedEventArgs
{
	Windows::Devices::SmartCards::SmartCard SmartCard() const;
};

template <typename T>
struct impl_ISmartCard
{
	Windows::Devices::SmartCards::SmartCardReader Reader() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Devices::SmartCards::SmartCardStatus> GetStatusAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GetAnswerToResetAsync() const;
};

template <typename T>
struct impl_ISmartCardProvisioningStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> FromSmartCardAsync(Windows::Devices::SmartCards::SmartCard const & card) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID cardId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID cardId) const;
	Windows::Foundation::IAsyncOperation<bool> RequestVirtualSmartCardDeletionAsync(Windows::Devices::SmartCards::SmartCard const & card) const;
};

template <typename T>
struct impl_ISmartCardProvisioning
{
	Windows::Devices::SmartCards::SmartCard SmartCard() const;
	Windows::Foundation::IAsyncOperation<GUID> GetIdAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetNameAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardChallengeContext> GetChallengeContextAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestPinChangeAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestPinResetAsync(Windows::Devices::SmartCards::ISmartCardPinResetHandler const & handler) const;
	template <typename F> Windows::Foundation::IAsyncOperation<bool> RequestPinResetAsync(F handler) const;
};

template <typename T>
struct impl_ISmartCardPinResetRequest
{
	Windows::Storage::Streams::IBuffer Challenge() const;
	Windows::Foundation::DateTime Deadline() const;
	Windows::Devices::SmartCards::SmartCardPinResetDeferral GetDeferral() const;
	void SetResponse(Windows::Storage::Streams::IBuffer const & response) const;
};

template <typename T>
struct impl_ISmartCardPinResetDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ISmartCardPinPolicy
{
	unsigned MinLength() const;
	void MinLength(unsigned value) const;
	unsigned MaxLength() const;
	void MaxLength(unsigned value) const;
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption UppercaseLetters() const;
	void UppercaseLetters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value) const;
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption LowercaseLetters() const;
	void LowercaseLetters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value) const;
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption Digits() const;
	void Digits(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value) const;
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption SpecialCharacters() const;
	void SpecialCharacters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value) const;
};

template <typename T>
struct impl_ISmartCardChallengeContext
{
	Windows::Storage::Streams::IBuffer Challenge() const;
	Windows::Foundation::IAsyncOperation<bool> VerifyResponseAsync(Windows::Storage::Streams::IBuffer const & response) const;
	Windows::Foundation::IAsyncAction ProvisionAsync(Windows::Storage::Streams::IBuffer const & response, bool formatCard) const;
	Windows::Foundation::IAsyncAction ProvisionAsync(Windows::Storage::Streams::IBuffer const & response, bool formatCard, GUID newCardId) const;
	Windows::Foundation::IAsyncAction ChangeAdministrativeKeyAsync(Windows::Storage::Streams::IBuffer const & response, Windows::Storage::Streams::IBuffer const & newAdministrativeKey) const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

template <typename T>
struct impl_ISmsMessageReceivedEventHandler
{
	void Invoke(Windows::Devices::Sms::SmsDevice const & sender, Windows::Devices::Sms::SmsMessageReceivedEventArgs const & e) const;
};

template <typename T>
struct impl_ISmsDeviceStatusChangedEventHandler
{
	void Invoke(Windows::Devices::Sms::SmsDevice const & sender) const;
};

template <typename T>
struct impl_ISmsMessage
{
	unsigned Id() const;
	Windows::Devices::Sms::SmsMessageClass MessageClass() const;
};

template <typename T>
struct impl_ISmsBinaryMessage
{
	Windows::Devices::Sms::SmsDataFormat Format() const;
	void Format(Windows::Devices::Sms::SmsDataFormat value) const;
};

template <typename T>
struct impl_ISmsTextMessage
{
	Windows::Foundation::DateTime Timestamp() const;
	unsigned PartReferenceId() const;
	unsigned PartNumber() const;
	unsigned PartCount() const;
	String To() const;
	void To(String const & value) const;
	template <unsigned S0> void To(wchar_t const (&value)[S0]) const;
	String From() const;
	void From(String const & value) const;
	template <unsigned S0> void From(wchar_t const (&value)[S0]) const;
	String Body() const;
	void Body(String const & value) const;
	template <unsigned S0> void Body(wchar_t const (&value)[S0]) const;
	Windows::Devices::Sms::SmsEncoding Encoding() const;
	void Encoding(Windows::Devices::Sms::SmsEncoding value) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsBinaryMessage> ToBinaryMessages(Windows::Devices::Sms::SmsDataFormat format) const;
};

template <typename T>
struct impl_ISmsTextMessageStatics
{
	Windows::Devices::Sms::SmsTextMessage FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage) const;
};

template <typename T>
struct impl_ISmsDeviceMessageStore
{
	Windows::Foundation::IAsyncAction DeleteMessageAsync(unsigned messageId) const;
	Windows::Foundation::IAsyncAction DeleteMessagesAsync(Windows::Devices::Sms::SmsMessageFilter messageFilter) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage> GetMessageAsync(unsigned messageId) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int> GetMessagesAsync(Windows::Devices::Sms::SmsMessageFilter messageFilter) const;
	unsigned MaxMessages() const;
};

template <typename T>
struct impl_ISmsMessageReceivedEventArgs
{
	Windows::Devices::Sms::SmsTextMessage TextMessage() const;
	Windows::Devices::Sms::SmsBinaryMessage BinaryMessage() const;
};

template <typename T>
struct impl_ISmsDeviceStatics
{
	String GetDeviceSelector() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> GetDefaultAsync() const;
};

template <typename T>
struct impl_ISmsDeviceStatics2
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(String const & networkAccountId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_ISmsDevice
{
	Windows::Devices::Sms::SendSmsMessageOperation SendMessageAsync(Windows::Devices::Sms::ISmsMessage const & message) const;
	Windows::Devices::Sms::SmsEncodedLength CalculateLength(Windows::Devices::Sms::SmsTextMessage const & message) const;
	String AccountPhoneNumber() const;
	Windows::Devices::Sms::CellularClass CellularClass() const;
	Windows::Devices::Sms::SmsDeviceMessageStore MessageStore() const;
	Windows::Devices::Sms::SmsDeviceStatus DeviceStatus() const;
	EventRegistrationToken SmsMessageReceived(Windows::Devices::Sms::ISmsMessageReceivedEventHandler const & eventHandler) const;
	template <typename F> EventRegistrationToken SmsMessageReceived(F eventHandler) const;
	void SmsMessageReceived(EventRegistrationToken eventCookie) const;
	EventRegistrationToken SmsDeviceStatusChanged(Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler const & eventHandler) const;
	template <typename F> EventRegistrationToken SmsDeviceStatusChanged(F eventHandler) const;
	void SmsDeviceStatusChanged(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_ISmsReceivedEventDetails
{
	String DeviceId() const;
	unsigned MessageIndex() const;
};

template <typename T>
struct impl_ISmsReceivedEventDetails2
{
	Windows::Devices::Sms::SmsMessageClass MessageClass() const;
	Windows::Devices::Sms::SmsBinaryMessage BinaryMessage() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

template <typename T>
struct impl_IUsbControlRequestType
{
	Windows::Devices::Usb::UsbTransferDirection Direction() const;
	void Direction(Windows::Devices::Usb::UsbTransferDirection value) const;
	Windows::Devices::Usb::UsbControlTransferType ControlTransferType() const;
	void ControlTransferType(Windows::Devices::Usb::UsbControlTransferType value) const;
	Windows::Devices::Usb::UsbControlRecipient Recipient() const;
	void Recipient(Windows::Devices::Usb::UsbControlRecipient value) const;
	byte AsByte() const;
	void AsByte(byte value) const;
};

template <typename T>
struct impl_IUsbSetupPacketFactory
{
	Windows::Devices::Usb::UsbSetupPacket CreateWithEightByteBuffer(Windows::Storage::Streams::IBuffer const & eightByteBuffer) const;
};

template <typename T>
struct impl_IUsbSetupPacket
{
	Windows::Devices::Usb::UsbControlRequestType RequestType() const;
	void RequestType(Windows::Devices::Usb::UsbControlRequestType const & value) const;
	byte Request() const;
	void Request(byte value) const;
	unsigned Value() const;
	void Value(unsigned value) const;
	unsigned Index() const;
	void Index(unsigned value) const;
	unsigned Length() const;
	void Length(unsigned value) const;
};

template <typename T>
struct impl_IUsbDeviceClass
{
	byte ClassCode() const;
	void ClassCode(byte value) const;
	Windows::Foundation::IReference<byte> SubclassCode() const;
	void SubclassCode(Windows::Foundation::IReference<byte> const & value) const;
	Windows::Foundation::IReference<byte> ProtocolCode() const;
	void ProtocolCode(Windows::Foundation::IReference<byte> const & value) const;
};

template <typename T>
struct impl_IUsbDeviceClassesStatics
{
	Windows::Devices::Usb::UsbDeviceClass CdcControl() const;
	Windows::Devices::Usb::UsbDeviceClass Physical() const;
	Windows::Devices::Usb::UsbDeviceClass PersonalHealthcare() const;
	Windows::Devices::Usb::UsbDeviceClass ActiveSync() const;
	Windows::Devices::Usb::UsbDeviceClass PalmSync() const;
	Windows::Devices::Usb::UsbDeviceClass DeviceFirmwareUpdate() const;
	Windows::Devices::Usb::UsbDeviceClass Irda() const;
	Windows::Devices::Usb::UsbDeviceClass Measurement() const;
	Windows::Devices::Usb::UsbDeviceClass VendorSpecific() const;
};

template <typename T>
struct impl_IUsbDeviceClasses
{
};

template <typename T>
struct impl_IUsbDeviceStatics
{
	String GetDeviceSelector(unsigned vendorId, unsigned productId, GUID winUsbInterfaceClass) const;
	String GetDeviceSelector(GUID winUsbInterfaceClass) const;
	String GetDeviceSelector(unsigned vendorId, unsigned productId) const;
	String GetDeviceClassSelector(Windows::Devices::Usb::UsbDeviceClass const & usbClass) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_IUsbDeviceDescriptor
{
	unsigned BcdUsb() const;
	byte MaxPacketSize0() const;
	unsigned VendorId() const;
	unsigned ProductId() const;
	unsigned BcdDeviceRevision() const;
	byte NumberOfConfigurations() const;
};

template <typename T>
struct impl_IUsbConfigurationDescriptor
{
	byte ConfigurationValue() const;
	unsigned MaxPowerMilliamps() const;
	bool SelfPowered() const;
	bool RemoteWakeup() const;
};

template <typename T>
struct impl_IUsbConfigurationDescriptorStatics
{
	bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbConfigurationDescriptor & parsed) const;
	Windows::Devices::Usb::UsbConfigurationDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const;
};

template <typename T>
struct impl_IUsbInterfaceDescriptor
{
	byte ClassCode() const;
	byte SubclassCode() const;
	byte ProtocolCode() const;
	byte AlternateSettingNumber() const;
	byte InterfaceNumber() const;
};

template <typename T>
struct impl_IUsbInterfaceDescriptorStatics
{
	bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbInterfaceDescriptor & parsed) const;
	Windows::Devices::Usb::UsbInterfaceDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const;
};

template <typename T>
struct impl_IUsbEndpointDescriptor
{
	byte EndpointNumber() const;
	Windows::Devices::Usb::UsbTransferDirection Direction() const;
	Windows::Devices::Usb::UsbEndpointType EndpointType() const;
	Windows::Devices::Usb::UsbBulkInEndpointDescriptor AsBulkInEndpointDescriptor() const;
	Windows::Devices::Usb::UsbInterruptInEndpointDescriptor AsInterruptInEndpointDescriptor() const;
	Windows::Devices::Usb::UsbBulkOutEndpointDescriptor AsBulkOutEndpointDescriptor() const;
	Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor AsInterruptOutEndpointDescriptor() const;
};

template <typename T>
struct impl_IUsbEndpointDescriptorStatics
{
	bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbEndpointDescriptor & parsed) const;
	Windows::Devices::Usb::UsbEndpointDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const;
};

template <typename T>
struct impl_IUsbDescriptor
{
	byte Length() const;
	byte DescriptorType() const;
	void ReadDescriptorBuffer(Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
struct impl_IUsbInterruptInEventArgs
{
	Windows::Storage::Streams::IBuffer InterruptData() const;
};

template <typename T>
struct impl_IUsbBulkInPipe
{
	unsigned MaxTransferSizeBytes() const;
	Windows::Devices::Usb::UsbBulkInEndpointDescriptor EndpointDescriptor() const;
	Windows::Foundation::IAsyncAction ClearStallAsync() const;
	void ReadOptions(Windows::Devices::Usb::UsbReadOptions value) const;
	Windows::Devices::Usb::UsbReadOptions ReadOptions() const;
	void FlushBuffer() const;
	Windows::Storage::Streams::IInputStream InputStream() const;
};

template <typename T>
struct impl_IUsbInterruptInPipe
{
	Windows::Devices::Usb::UsbInterruptInEndpointDescriptor EndpointDescriptor() const;
	Windows::Foundation::IAsyncAction ClearStallAsync() const;
	EventRegistrationToken DataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Usb::UsbInterruptInPipe, Windows::Devices::Usb::UsbInterruptInEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken DataReceived(F handler) const;
	void DataReceived(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IUsbBulkOutPipe
{
	Windows::Devices::Usb::UsbBulkOutEndpointDescriptor EndpointDescriptor() const;
	Windows::Foundation::IAsyncAction ClearStallAsync() const;
	void WriteOptions(Windows::Devices::Usb::UsbWriteOptions value) const;
	Windows::Devices::Usb::UsbWriteOptions WriteOptions() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
};

template <typename T>
struct impl_IUsbInterruptOutPipe
{
	Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor EndpointDescriptor() const;
	Windows::Foundation::IAsyncAction ClearStallAsync() const;
	void WriteOptions(Windows::Devices::Usb::UsbWriteOptions value) const;
	Windows::Devices::Usb::UsbWriteOptions WriteOptions() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
};

template <typename T>
struct impl_IUsbConfiguration
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterface> UsbInterfaces() const;
	Windows::Devices::Usb::UsbConfigurationDescriptor ConfigurationDescriptor() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> Descriptors() const;
};

template <typename T>
struct impl_IUsbInterface
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInPipe> BulkInPipes() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInPipe> InterruptInPipes() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutPipe> BulkOutPipes() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutPipe> InterruptOutPipes() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterfaceSetting> InterfaceSettings() const;
	byte InterfaceNumber() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> Descriptors() const;
};

template <typename T>
struct impl_IUsbInterfaceSetting
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInEndpointDescriptor> BulkInEndpoints() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInEndpointDescriptor> InterruptInEndpoints() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutEndpointDescriptor> BulkOutEndpoints() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor> InterruptOutEndpoints() const;
	bool Selected() const;
	Windows::Foundation::IAsyncAction SelectSettingAsync() const;
	Windows::Devices::Usb::UsbInterfaceDescriptor InterfaceDescriptor() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> Descriptors() const;
};

template <typename T>
struct impl_IUsbBulkInEndpointDescriptor
{
	unsigned MaxPacketSize() const;
	byte EndpointNumber() const;
	Windows::Devices::Usb::UsbBulkInPipe Pipe() const;
};

template <typename T>
struct impl_IUsbInterruptInEndpointDescriptor
{
	unsigned MaxPacketSize() const;
	byte EndpointNumber() const;
	Windows::Foundation::TimeSpan Interval() const;
	Windows::Devices::Usb::UsbInterruptInPipe Pipe() const;
};

template <typename T>
struct impl_IUsbBulkOutEndpointDescriptor
{
	unsigned MaxPacketSize() const;
	byte EndpointNumber() const;
	Windows::Devices::Usb::UsbBulkOutPipe Pipe() const;
};

template <typename T>
struct impl_IUsbInterruptOutEndpointDescriptor
{
	unsigned MaxPacketSize() const;
	byte EndpointNumber() const;
	Windows::Foundation::TimeSpan Interval() const;
	Windows::Devices::Usb::UsbInterruptOutPipe Pipe() const;
};

template <typename T>
struct impl_IUsbDevice
{
	Windows::Foundation::IAsyncOperation<unsigned> SendControlOutTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket, Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Foundation::IAsyncOperation<unsigned> SendControlOutTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SendControlInTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket, Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SendControlInTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket) const;
	Windows::Devices::Usb::UsbInterface DefaultInterface() const;
	Windows::Devices::Usb::UsbDeviceDescriptor DeviceDescriptor() const;
	Windows::Devices::Usb::UsbConfiguration Configuration() const;
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

template <typename T>
struct impl_IWiFiDirectDeviceStatics
{
	String GetDeviceSelector() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> FromIdAsync(String const & deviceId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> FromIdAsync(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_IWiFiDirectDevice
{
	Windows::Devices::WiFiDirect::WiFiDirectConnectionStatus ConnectionStatus() const;
	String DeviceId() const;
	EventRegistrationToken ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectDevice, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken ConnectionStatusChanged(F handler) const;
	void ConnectionStatusChanged(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> GetConnectionEndpointPairs() const;
};

}}}}

namespace Modern { namespace Windows { namespace Foundation {

template <typename T>
struct impl_IAsyncActionCompletedHandler
{
	void Invoke(Windows::Foundation::IAsyncAction const & asyncInfo, AsyncStatus asyncStatus) const;
};

template <typename T>
struct impl_IUriRuntimeClass
{
	String AbsoluteUri() const;
	String DisplayUri() const;
	String Domain() const;
	String Extension() const;
	String Fragment() const;
	String Host() const;
	String Password() const;
	String Path() const;
	String Query() const;
	Windows::Foundation::WwwFormUrlDecoder QueryParsed() const;
	String RawUri() const;
	String SchemeName() const;
	String UserName() const;
	int Port() const;
	bool Suspicious() const;
	bool Equals(Windows::Foundation::Uri const & pUri) const;
	Windows::Foundation::Uri CombineUri(String const & relativeUri) const;
	template <unsigned S0> Windows::Foundation::Uri CombineUri(wchar_t const (&relativeUri)[S0]) const;
};

template <typename T>
struct impl_IUriRuntimeClassWithAbsoluteCanonicalUri
{
	String AbsoluteCanonicalUri() const;
	String DisplayIri() const;
};

template <typename T>
struct impl_IUriEscapeStatics
{
	String UnescapeComponent(String const & toUnescape) const;
	template <unsigned S0> String UnescapeComponent(wchar_t const (&toUnescape)[S0]) const;
	String EscapeComponent(String const & toEscape) const;
	template <unsigned S0> String EscapeComponent(wchar_t const (&toEscape)[S0]) const;
};

template <typename T>
struct impl_IUriRuntimeClassFactory
{
	Windows::Foundation::Uri CreateUri(String const & uri) const;
	template <unsigned S0> Windows::Foundation::Uri CreateUri(wchar_t const (&uri)[S0]) const;
	Windows::Foundation::Uri CreateUri(String const & baseUri, String const & relativeUri) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Uri CreateUri(wchar_t const (&baseUri)[S0], wchar_t const (&relativeUri)[S1]) const;
};

template <typename T>
struct impl_IWwwFormUrlDecoderEntry
{
	String Name() const;
	String Value() const;
};

template <typename T>
struct impl_IWwwFormUrlDecoderRuntimeClass
{
	String GetFirstValueByName(String const & name) const;
	template <unsigned S0> String GetFirstValueByName(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_IWwwFormUrlDecoderRuntimeClassFactory
{
	Windows::Foundation::WwwFormUrlDecoder CreateWwwFormUrlDecoder(String const & query) const;
	template <unsigned S0> Windows::Foundation::WwwFormUrlDecoder CreateWwwFormUrlDecoder(wchar_t const (&query)[S0]) const;
};

template <typename T>
struct impl_IGetActivationFactory
{
	IInspectable GetActivationFactory(String const & activatableClassId) const;
	template <unsigned S0> IInspectable GetActivationFactory(wchar_t const (&activatableClassId)[S0]) const;
};

template <typename T>
struct impl_IClosable
{
	void Close() const;
};

template <typename T>
struct impl_IPropertyValue
{
	Windows::Foundation::PropertyType Type() const;
	bool IsNumericScalar() const;
	byte GetUInt8() const;
	short GetInt16() const;
	unsigned short GetUInt16() const;
	int GetInt32() const;
	unsigned GetUInt32() const;
	long long GetInt64() const;
	unsigned long long GetUInt64() const;
	float GetSingle() const;
	double GetDouble() const;
	wchar_t GetChar16() const;
	bool GetBoolean() const;
	String GetString() const;
	GUID GetGuid() const;
	Windows::Foundation::DateTime GetDateTime() const;
	Windows::Foundation::TimeSpan GetTimeSpan() const;
	Windows::Foundation::Point GetPoint() const;
	Windows::Foundation::Size GetSize() const;
	Windows::Foundation::Rect GetRect() const;
};

template <typename T>
struct impl_IPropertyValueStatics
{
	IInspectable CreateEmpty() const;
	IInspectable CreateUInt8(byte value) const;
	IInspectable CreateInt16(short value) const;
	IInspectable CreateUInt16(unsigned short value) const;
	IInspectable CreateInt32(int value) const;
	IInspectable CreateUInt32(unsigned value) const;
	IInspectable CreateInt64(long long value) const;
	IInspectable CreateUInt64(unsigned long long value) const;
	IInspectable CreateSingle(float value) const;
	IInspectable CreateDouble(double value) const;
	IInspectable CreateChar16(wchar_t value) const;
	IInspectable CreateBoolean(bool value) const;
	IInspectable CreateString(String const & value) const;
	template <unsigned S0> IInspectable CreateString(wchar_t const (&value)[S0]) const;
	IInspectable CreateInspectable(IInspectable const & value) const;
	IInspectable CreateGuid(GUID value) const;
	IInspectable CreateDateTime(Windows::Foundation::DateTime const & value) const;
	IInspectable CreateTimeSpan(Windows::Foundation::TimeSpan const & value) const;
	IInspectable CreatePoint(Windows::Foundation::Point const & value) const;
	IInspectable CreateSize(Windows::Foundation::Size const & value) const;
	IInspectable CreateRect(Windows::Foundation::Rect const & value) const;
};

template <typename T>
struct impl_IStringable
{
	String ToString() const;
};

template <typename T>
struct impl_IAsyncAction
{
	void Completed(Windows::Foundation::IAsyncActionCompletedHandler const & handler) const;
	template <typename F> void Completed(F handler) const;
	Windows::Foundation::IAsyncActionCompletedHandler Completed() const;
	void GetResults() const;
};

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

template <typename T>
struct impl_IPropertySet
{
};

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

template <typename T>
struct impl_ITracingStatusChangedEventArgs
{
	bool Enabled() const;
	Windows::Foundation::Diagnostics::CausalityTraceLevel TraceLevel() const;
};

template <typename T>
struct impl_IAsyncCausalityTracerStatics
{
	void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, String const & operationName, unsigned long long relatedContext) const;
	template <unsigned S0> void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, wchar_t const (&operationName)[S0], unsigned long long relatedContext) const;
	void TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, AsyncStatus status) const;
	void TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalityRelation relation) const;
	void TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork work) const;
	void TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, Windows::Foundation::Diagnostics::CausalitySynchronousWork work) const;
	EventRegistrationToken TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TracingStatusChanged(F handler) const;
	void TracingStatusChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IErrorReportingSettings
{
	void SetErrorOptions(Windows::Foundation::Diagnostics::ErrorOptions value) const;
	Windows::Foundation::Diagnostics::ErrorOptions GetErrorOptions() const;
};

template <typename T>
struct impl_ILoggingChannel
{
	String Name() const;
	bool Enabled() const;
	Windows::Foundation::Diagnostics::LoggingLevel Level() const;
	void LogMessage(String const & eventString) const;
	template <unsigned S0> void LogMessage(wchar_t const (&eventString)[S0]) const;
	void LogMessage(String const & eventString, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	template <unsigned S0> void LogMessage(wchar_t const (&eventString)[S0], Windows::Foundation::Diagnostics::LoggingLevel level) const;
	void LogValuePair(String const & value1, int value2) const;
	template <unsigned S0> void LogValuePair(wchar_t const (&value1)[S0], int value2) const;
	void LogValuePair(String const & value1, int value2, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	template <unsigned S0> void LogValuePair(wchar_t const (&value1)[S0], int value2, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	EventRegistrationToken LoggingEnabled(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::ILoggingChannel, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken LoggingEnabled(F handler) const;
	void LoggingEnabled(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ILoggingChannelFactory
{
	Windows::Foundation::Diagnostics::LoggingChannel Create(String const & name) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::LoggingChannel Create(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_ILoggingActivity
{
	String Name() const;
	GUID Id() const;
};

template <typename T>
struct impl_ILoggingActivityFactory
{
	Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivity(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivity(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivityWithLevel(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivityWithLevel(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level) const;
};

template <typename T>
struct impl_ILoggingSession
{
	String Name() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveToFileAsync(Windows::Storage::IStorageFolder const & folder, String const & fileName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveToFileAsync(Windows::Storage::IStorageFolder const & folder, wchar_t const (&fileName)[S0]) const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel maxLevel) const;
	void RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
};

template <typename T>
struct impl_ILoggingSessionFactory
{
	Windows::Foundation::Diagnostics::LoggingSession Create(String const & name) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::LoggingSession Create(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_ILogFileGeneratedEventArgs
{
	Windows::Storage::StorageFile File() const;
};

template <typename T>
struct impl_IFileLoggingSession
{
	String Name() const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel maxLevel) const;
	void RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CloseAndSaveToFileAsync() const;
	EventRegistrationToken LogFileGenerated(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::IFileLoggingSession, Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken LogFileGenerated(F handler) const;
	void LogFileGenerated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IFileLoggingSessionFactory
{
	Windows::Foundation::Diagnostics::FileLoggingSession Create(String const & name) const;
	template <unsigned S0> Windows::Foundation::Diagnostics::FileLoggingSession Create(wchar_t const (&name)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Globalization {

template <typename T>
struct impl_IJapanesePhoneticAnalyzerStatics
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(String const & input) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(wchar_t const (&input)[S0]) const;
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(String const & input, bool monoRuby) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(wchar_t const (&input)[S0], bool monoRuby) const;
};

template <typename T>
struct impl_IJapanesePhoneme
{
	String DisplayText() const;
	String YomiText() const;
	bool IsPhraseStart() const;
};

template <typename T>
struct impl_ICalendarIdentifiersStatics
{
	String Gregorian() const;
	String Hebrew() const;
	String Hijri() const;
	String Japanese() const;
	String Julian() const;
	String Korean() const;
	String Taiwan() const;
	String Thai() const;
	String UmAlQura() const;
};

template <typename T>
struct impl_IClockIdentifiersStatics
{
	String TwelveHour() const;
	String TwentyFourHour() const;
};

template <typename T>
struct impl_INumeralSystemIdentifiersStatics
{
	String Arab() const;
	String ArabExt() const;
	String Bali() const;
	String Beng() const;
	String Cham() const;
	String Deva() const;
	String FullWide() const;
	String Gujr() const;
	String Guru() const;
	String HaniDec() const;
	String Java() const;
	String Kali() const;
	String Khmr() const;
	String Knda() const;
	String Lana() const;
	String LanaTham() const;
	String Laoo() const;
	String Latn() const;
	String Lepc() const;
	String Limb() const;
	String Mlym() const;
	String Mong() const;
	String Mtei() const;
	String Mymr() const;
	String MymrShan() const;
	String Nkoo() const;
	String Olck() const;
	String Orya() const;
	String Saur() const;
	String Sund() const;
	String Talu() const;
	String TamlDec() const;
	String Telu() const;
	String Thai() const;
	String Tibt() const;
	String Vaii() const;
};

template <typename T>
struct impl_ICurrencyIdentifiersStatics
{
	String AED() const;
	String AFN() const;
	String ALL() const;
	String AMD() const;
	String ANG() const;
	String AOA() const;
	String ARS() const;
	String AUD() const;
	String AWG() const;
	String AZN() const;
	String BAM() const;
	String BBD() const;
	String BDT() const;
	String BGN() const;
	String BHD() const;
	String BIF() const;
	String BMD() const;
	String BND() const;
	String BOB() const;
	String BRL() const;
	String BSD() const;
	String BTN() const;
	String BWP() const;
	String BYR() const;
	String BZD() const;
	String CAD() const;
	String CDF() const;
	String CHF() const;
	String CLP() const;
	String CNY() const;
	String COP() const;
	String CRC() const;
	String CUP() const;
	String CVE() const;
	String CZK() const;
	String DJF() const;
	String DKK() const;
	String DOP() const;
	String DZD() const;
	String EGP() const;
	String ERN() const;
	String ETB() const;
	String EUR() const;
	String FJD() const;
	String FKP() const;
	String GBP() const;
	String GEL() const;
	String GHS() const;
	String GIP() const;
	String GMD() const;
	String GNF() const;
	String GTQ() const;
	String GYD() const;
	String HKD() const;
	String HNL() const;
	String HRK() const;
	String HTG() const;
	String HUF() const;
	String IDR() const;
	String ILS() const;
	String INR() const;
	String IQD() const;
	String IRR() const;
	String ISK() const;
	String JMD() const;
	String JOD() const;
	String JPY() const;
	String KES() const;
	String KGS() const;
	String KHR() const;
	String KMF() const;
	String KPW() const;
	String KRW() const;
	String KWD() const;
	String KYD() const;
	String KZT() const;
	String LAK() const;
	String LBP() const;
	String LKR() const;
	String LRD() const;
	String LSL() const;
	String LTL() const;
	String LVL() const;
	String LYD() const;
	String MAD() const;
	String MDL() const;
	String MGA() const;
	String MKD() const;
	String MMK() const;
	String MNT() const;
	String MOP() const;
	String MRO() const;
	String MUR() const;
	String MVR() const;
	String MWK() const;
	String MXN() const;
	String MYR() const;
	String MZN() const;
	String NAD() const;
	String NGN() const;
	String NIO() const;
	String NOK() const;
	String NPR() const;
	String NZD() const;
	String OMR() const;
	String PAB() const;
	String PEN() const;
	String PGK() const;
	String PHP() const;
	String PKR() const;
	String PLN() const;
	String PYG() const;
	String QAR() const;
	String RON() const;
	String RSD() const;
	String RUB() const;
	String RWF() const;
	String SAR() const;
	String SBD() const;
	String SCR() const;
	String SDG() const;
	String SEK() const;
	String SGD() const;
	String SHP() const;
	String SLL() const;
	String SOS() const;
	String SRD() const;
	String STD() const;
	String SYP() const;
	String SZL() const;
	String THB() const;
	String TJS() const;
	String TMT() const;
	String TND() const;
	String TOP() const;
	String TRY() const;
	String TTD() const;
	String TWD() const;
	String TZS() const;
	String UAH() const;
	String UGX() const;
	String USD() const;
	String UYU() const;
	String UZS() const;
	String VEF() const;
	String VND() const;
	String VUV() const;
	String WST() const;
	String XAF() const;
	String XCD() const;
	String XOF() const;
	String XPF() const;
	String XXX() const;
	String YER() const;
	String ZAR() const;
	String ZMW() const;
	String ZWL() const;
};

template <typename T>
struct impl_IGeographicRegion
{
	String Code() const;
	String CodeTwoLetter() const;
	String CodeThreeLetter() const;
	String CodeThreeDigit() const;
	String DisplayName() const;
	String NativeName() const;
	Windows::Foundation::Collections::IVectorView<String> CurrenciesInUse() const;
};

template <typename T>
struct impl_IGeographicRegionFactory
{
	Windows::Globalization::GeographicRegion CreateGeographicRegion(String const & geographicRegionCode) const;
	template <unsigned S0> Windows::Globalization::GeographicRegion CreateGeographicRegion(wchar_t const (&geographicRegionCode)[S0]) const;
};

template <typename T>
struct impl_IGeographicRegionStatics
{
	bool IsSupported(String const & geographicRegionCode) const;
	template <unsigned S0> bool IsSupported(wchar_t const (&geographicRegionCode)[S0]) const;
};

template <typename T>
struct impl_ILanguage
{
	String LanguageTag() const;
	String DisplayName() const;
	String NativeName() const;
	String Script() const;
};

template <typename T>
struct impl_ILanguageExtensionSubtags
{
	Windows::Foundation::Collections::IVectorView<String> GetExtensionSubtags(String const & singleton) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<String> GetExtensionSubtags(wchar_t const (&singleton)[S0]) const;
};

template <typename T>
struct impl_ILanguageFactory
{
	Windows::Globalization::Language CreateLanguage(String const & languageTag) const;
	template <unsigned S0> Windows::Globalization::Language CreateLanguage(wchar_t const (&languageTag)[S0]) const;
};

template <typename T>
struct impl_ILanguageStatics
{
	bool IsWellFormed(String const & languageTag) const;
	template <unsigned S0> bool IsWellFormed(wchar_t const (&languageTag)[S0]) const;
	String CurrentInputMethodLanguageTag() const;
};

template <typename T>
struct impl_ICalendar
{
	Windows::Globalization::Calendar Clone() const;
	void SetToMin() const;
	void SetToMax() const;
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String NumeralSystem() const;
	void NumeralSystem(String const & value) const;
	template <unsigned S0> void NumeralSystem(wchar_t const (&value)[S0]) const;
	String GetCalendarSystem() const;
	void ChangeCalendarSystem(String const & value) const;
	template <unsigned S0> void ChangeCalendarSystem(wchar_t const (&value)[S0]) const;
	String GetClock() const;
	void ChangeClock(String const & value) const;
	template <unsigned S0> void ChangeClock(wchar_t const (&value)[S0]) const;
	Windows::Foundation::DateTime GetDateTime() const;
	void SetDateTime(Windows::Foundation::DateTime const & value) const;
	void SetToNow() const;
	int FirstEra() const;
	int LastEra() const;
	int NumberOfEras() const;
	int Era() const;
	void Era(int value) const;
	void AddEras(int eras) const;
	String EraAsString() const;
	String EraAsString(int idealLength) const;
	int FirstYearInThisEra() const;
	int LastYearInThisEra() const;
	int NumberOfYearsInThisEra() const;
	int Year() const;
	void Year(int value) const;
	void AddYears(int years) const;
	String YearAsString() const;
	String YearAsTruncatedString(int remainingDigits) const;
	String YearAsPaddedString(int minDigits) const;
	int FirstMonthInThisYear() const;
	int LastMonthInThisYear() const;
	int NumberOfMonthsInThisYear() const;
	int Month() const;
	void Month(int value) const;
	void AddMonths(int months) const;
	String MonthAsString() const;
	String MonthAsString(int idealLength) const;
	String MonthAsSoloString() const;
	String MonthAsSoloString(int idealLength) const;
	String MonthAsNumericString() const;
	String MonthAsPaddedNumericString(int minDigits) const;
	void AddWeeks(int weeks) const;
	int FirstDayInThisMonth() const;
	int LastDayInThisMonth() const;
	int NumberOfDaysInThisMonth() const;
	int Day() const;
	void Day(int value) const;
	void AddDays(int days) const;
	String DayAsString() const;
	String DayAsPaddedString(int minDigits) const;
	Windows::Globalization::DayOfWeek DayOfWeek() const;
	String DayOfWeekAsString() const;
	String DayOfWeekAsString(int idealLength) const;
	String DayOfWeekAsSoloString() const;
	String DayOfWeekAsSoloString(int idealLength) const;
	int FirstPeriodInThisDay() const;
	int LastPeriodInThisDay() const;
	int NumberOfPeriodsInThisDay() const;
	int Period() const;
	void Period(int value) const;
	void AddPeriods(int periods) const;
	String PeriodAsString() const;
	String PeriodAsString(int idealLength) const;
	int FirstHourInThisPeriod() const;
	int LastHourInThisPeriod() const;
	int NumberOfHoursInThisPeriod() const;
	int Hour() const;
	void Hour(int value) const;
	void AddHours(int hours) const;
	String HourAsString() const;
	String HourAsPaddedString(int minDigits) const;
	int Minute() const;
	void Minute(int value) const;
	void AddMinutes(int minutes) const;
	String MinuteAsString() const;
	String MinuteAsPaddedString(int minDigits) const;
	int Second() const;
	void Second(int value) const;
	void AddSeconds(int seconds) const;
	String SecondAsString() const;
	String SecondAsPaddedString(int minDigits) const;
	int Nanosecond() const;
	void Nanosecond(int value) const;
	void AddNanoseconds(int nanoseconds) const;
	String NanosecondAsString() const;
	String NanosecondAsPaddedString(int minDigits) const;
	int Compare(Windows::Globalization::Calendar const & other) const;
	int CompareDateTime(Windows::Foundation::DateTime const & other) const;
	void CopyTo(Windows::Globalization::Calendar const & other) const;
	int FirstMinuteInThisHour() const;
	int LastMinuteInThisHour() const;
	int NumberOfMinutesInThisHour() const;
	int FirstSecondInThisMinute() const;
	int LastSecondInThisMinute() const;
	int NumberOfSecondsInThisMinute() const;
	String ResolvedLanguage() const;
	bool IsDaylightSavingTime() const;
};

template <typename T>
struct impl_ICalendarFactory2
{
	Windows::Globalization::Calendar CreateCalendarWithTimeZone(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock, String const & timeZoneId) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Globalization::Calendar CreateCalendarWithTimeZone(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1], wchar_t const (&timeZoneId)[S2]) const;
};

template <typename T>
struct impl_ITimeZoneOnCalendar
{
	String GetTimeZone() const;
	void ChangeTimeZone(String const & timeZoneId) const;
	template <unsigned S0> void ChangeTimeZone(wchar_t const (&timeZoneId)[S0]) const;
	String TimeZoneAsString() const;
	String TimeZoneAsString(int idealLength) const;
};

template <typename T>
struct impl_ICalendarFactory
{
	Windows::Globalization::Calendar CreateCalendarDefaultCalendarAndClock(Windows::Foundation::Collections::IIterable<String> const & languages) const;
	Windows::Globalization::Calendar CreateCalendar(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock) const;
	template <unsigned S0, unsigned S1> Windows::Globalization::Calendar CreateCalendar(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1]) const;
};

template <typename T>
struct impl_IApplicationLanguagesStatics
{
	String PrimaryLanguageOverride() const;
	void PrimaryLanguageOverride(String const & value) const;
	template <unsigned S0> void PrimaryLanguageOverride(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	Windows::Foundation::Collections::IVectorView<String> ManifestLanguages() const;
};

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

template <typename T>
struct impl_ICharacterGrouping
{
	String First() const;
	String Label() const;
};

template <typename T>
struct impl_ICharacterGroupings
{
	String Lookup(String const & text) const;
	template <unsigned S0> String Lookup(wchar_t const (&text)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

template <typename T>
struct impl_IDateTimeFormatter
{
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String GeographicRegion() const;
	String Calendar() const;
	String Clock() const;
	String NumeralSystem() const;
	void NumeralSystem(String const & value) const;
	template <unsigned S0> void NumeralSystem(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVectorView<String> Patterns() const;
	String Template() const;
	String Format(Windows::Foundation::DateTime const & value) const;
	Windows::Globalization::DateTimeFormatting::YearFormat IncludeYear() const;
	Windows::Globalization::DateTimeFormatting::MonthFormat IncludeMonth() const;
	Windows::Globalization::DateTimeFormatting::DayOfWeekFormat IncludeDayOfWeek() const;
	Windows::Globalization::DateTimeFormatting::DayFormat IncludeDay() const;
	Windows::Globalization::DateTimeFormatting::HourFormat IncludeHour() const;
	Windows::Globalization::DateTimeFormatting::MinuteFormat IncludeMinute() const;
	Windows::Globalization::DateTimeFormatting::SecondFormat IncludeSecond() const;
	String ResolvedLanguage() const;
	String ResolvedGeographicRegion() const;
};

template <typename T>
struct impl_IDateTimeFormatterFactory
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatter(String const & formatTemplate) const;
	template <unsigned S0> Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatter(wchar_t const (&formatTemplate)[S0]) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterLanguages(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages) const;
	template <unsigned S0> Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterLanguages(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterContext(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock) const;
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterContext(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1], wchar_t const (&calendar)[S2], wchar_t const (&clock)[S3]) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterDate(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterTime(Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterDateTimeLanguages(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages) const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterDateTimeContext(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Globalization::DateTimeFormatting::DateTimeFormatter CreateDateTimeFormatterDateTimeContext(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0], wchar_t const (&calendar)[S1], wchar_t const (&clock)[S2]) const;
};

template <typename T>
struct impl_IDateTimeFormatterStatics
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter LongDate() const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter LongTime() const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter ShortDate() const;
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter ShortTime() const;
};

template <typename T>
struct impl_IDateTimeFormatter2
{
	String Format(Windows::Foundation::DateTime const & datetime, String const & timeZoneId) const;
	template <unsigned S0> String Format(Windows::Foundation::DateTime const & datetime, wchar_t const (&timeZoneId)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

template <typename T>
struct impl_ILanguageFontGroup
{
	Windows::Globalization::Fonts::LanguageFont UITextFont() const;
	Windows::Globalization::Fonts::LanguageFont UIHeadingFont() const;
	Windows::Globalization::Fonts::LanguageFont UITitleFont() const;
	Windows::Globalization::Fonts::LanguageFont UICaptionFont() const;
	Windows::Globalization::Fonts::LanguageFont UINotificationHeadingFont() const;
	Windows::Globalization::Fonts::LanguageFont TraditionalDocumentFont() const;
	Windows::Globalization::Fonts::LanguageFont ModernDocumentFont() const;
	Windows::Globalization::Fonts::LanguageFont DocumentHeadingFont() const;
	Windows::Globalization::Fonts::LanguageFont FixedWidthTextFont() const;
	Windows::Globalization::Fonts::LanguageFont DocumentAlternate1Font() const;
	Windows::Globalization::Fonts::LanguageFont DocumentAlternate2Font() const;
};

template <typename T>
struct impl_ILanguageFontGroupFactory
{
	Windows::Globalization::Fonts::LanguageFontGroup CreateLanguageFontGroup(String const & languageTag) const;
	template <unsigned S0> Windows::Globalization::Fonts::LanguageFontGroup CreateLanguageFontGroup(wchar_t const (&languageTag)[S0]) const;
};

template <typename T>
struct impl_ILanguageFont
{
	String FontFamily() const;
	Windows::UI::Text::FontWeight FontWeight() const;
	Windows::UI::Text::FontStretch FontStretch() const;
	Windows::UI::Text::FontStyle FontStyle() const;
	double ScaleFactor() const;
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

template <typename T>
struct impl_INumberRounder
{
	int RoundInt32(int value) const;
	unsigned RoundUInt32(unsigned value) const;
	long long RoundInt64(long long value) const;
	unsigned long long RoundUInt64(unsigned long long value) const;
	float RoundSingle(float value) const;
	double RoundDouble(double value) const;
};

template <typename T>
struct impl_ISignificantDigitsNumberRounder
{
	Windows::Globalization::NumberFormatting::RoundingAlgorithm RoundingAlgorithm() const;
	void RoundingAlgorithm(Windows::Globalization::NumberFormatting::RoundingAlgorithm value) const;
	unsigned SignificantDigits() const;
	void SignificantDigits(unsigned value) const;
};

template <typename T>
struct impl_IIncrementNumberRounder
{
	Windows::Globalization::NumberFormatting::RoundingAlgorithm RoundingAlgorithm() const;
	void RoundingAlgorithm(Windows::Globalization::NumberFormatting::RoundingAlgorithm value) const;
	double Increment() const;
	void Increment(double value) const;
};

template <typename T>
struct impl_INumberFormatter
{
	String Format(long long value) const;
	String Format(unsigned long long value) const;
	String Format(double value) const;
};

template <typename T>
struct impl_INumberFormatter2
{
	String FormatInt(long long value) const;
	String FormatUInt(unsigned long long value) const;
	String FormatDouble(double value) const;
};

template <typename T>
struct impl_INumberParser
{
	Windows::Foundation::IReference<long long> ParseInt(String const & text) const;
	template <unsigned S0> Windows::Foundation::IReference<long long> ParseInt(wchar_t const (&text)[S0]) const;
	Windows::Foundation::IReference<unsigned long long> ParseUInt(String const & text) const;
	template <unsigned S0> Windows::Foundation::IReference<unsigned long long> ParseUInt(wchar_t const (&text)[S0]) const;
	Windows::Foundation::IReference<double> ParseDouble(String const & text) const;
	template <unsigned S0> Windows::Foundation::IReference<double> ParseDouble(wchar_t const (&text)[S0]) const;
};

template <typename T>
struct impl_INumberFormatterOptions
{
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String GeographicRegion() const;
	int IntegerDigits() const;
	void IntegerDigits(int value) const;
	int FractionDigits() const;
	void FractionDigits(int value) const;
	bool IsGrouped() const;
	void IsGrouped(bool value) const;
	bool IsDecimalPointAlwaysDisplayed() const;
	void IsDecimalPointAlwaysDisplayed(bool value) const;
	String NumeralSystem() const;
	void NumeralSystem(String const & value) const;
	template <unsigned S0> void NumeralSystem(wchar_t const (&value)[S0]) const;
	String ResolvedLanguage() const;
	String ResolvedGeographicRegion() const;
};

template <typename T>
struct impl_ISignificantDigitsOption
{
	int SignificantDigits() const;
	void SignificantDigits(int value) const;
};

template <typename T>
struct impl_INumberRounderOption
{
	Windows::Globalization::NumberFormatting::INumberRounder NumberRounder() const;
	void NumberRounder(Windows::Globalization::NumberFormatting::INumberRounder const & value) const;
};

template <typename T>
struct impl_ISignedZeroOption
{
	bool IsZeroSigned() const;
	void IsZeroSigned(bool value) const;
};

template <typename T>
struct impl_IDecimalFormatterFactory
{
	Windows::Globalization::NumberFormatting::DecimalFormatter CreateDecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const;
	template <unsigned S0> Windows::Globalization::NumberFormatting::DecimalFormatter CreateDecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) const;
};

template <typename T>
struct impl_IPercentFormatterFactory
{
	Windows::Globalization::NumberFormatting::PercentFormatter CreatePercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const;
	template <unsigned S0> Windows::Globalization::NumberFormatting::PercentFormatter CreatePercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) const;
};

template <typename T>
struct impl_IPermilleFormatterFactory
{
	Windows::Globalization::NumberFormatting::PermilleFormatter CreatePermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const;
	template <unsigned S0> Windows::Globalization::NumberFormatting::PermilleFormatter CreatePermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) const;
};

template <typename T>
struct impl_ICurrencyFormatterFactory
{
	Windows::Globalization::NumberFormatting::CurrencyFormatter CreateCurrencyFormatterCode(String const & currencyCode) const;
	template <unsigned S0> Windows::Globalization::NumberFormatting::CurrencyFormatter CreateCurrencyFormatterCode(wchar_t const (&currencyCode)[S0]) const;
	Windows::Globalization::NumberFormatting::CurrencyFormatter CreateCurrencyFormatterCodeContext(String const & currencyCode, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const;
	template <unsigned S0, unsigned S1> Windows::Globalization::NumberFormatting::CurrencyFormatter CreateCurrencyFormatterCodeContext(wchar_t const (&currencyCode)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1]) const;
};

template <typename T>
struct impl_ICurrencyFormatter
{
	String Currency() const;
};

template <typename T>
struct impl_ICurrencyFormatter2
{
	Windows::Globalization::NumberFormatting::CurrencyFormatterMode Mode() const;
	void Mode(Windows::Globalization::NumberFormatting::CurrencyFormatterMode value) const;
	void ApplyRoundingForCurrency(Windows::Globalization::NumberFormatting::RoundingAlgorithm roundingAlgorithm) const;
};

template <typename T>
struct impl_INumeralSystemTranslatorFactory
{
	Windows::Globalization::NumberFormatting::NumeralSystemTranslator Create(Windows::Foundation::Collections::IIterable<String> const & languages) const;
};

template <typename T>
struct impl_INumeralSystemTranslator
{
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String ResolvedLanguage() const;
	String NumeralSystem() const;
	void NumeralSystem(String const & value) const;
	template <unsigned S0> void NumeralSystem(wchar_t const (&value)[S0]) const;
	String TranslateNumerals(String const & value) const;
	template <unsigned S0> String TranslateNumerals(wchar_t const (&value)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

template <typename T>
struct impl_IDisplayInformationStatics
{
	Windows::Graphics::Display::DisplayInformation GetForCurrentView() const;
	Windows::Graphics::Display::DisplayOrientations AutoRotationPreferences() const;
	void AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations value) const;
	EventRegistrationToken DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken DisplayContentsInvalidated(F handler) const;
	void DisplayContentsInvalidated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IDisplayInformation
{
	Windows::Graphics::Display::DisplayOrientations CurrentOrientation() const;
	Windows::Graphics::Display::DisplayOrientations NativeOrientation() const;
	EventRegistrationToken OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken OrientationChanged(F handler) const;
	void OrientationChanged(EventRegistrationToken token) const;
	Windows::Graphics::Display::ResolutionScale ResolutionScale() const;
	float LogicalDpi() const;
	float RawDpiX() const;
	float RawDpiY() const;
	EventRegistrationToken DpiChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken DpiChanged(F handler) const;
	void DpiChanged(EventRegistrationToken token) const;
	bool StereoEnabled() const;
	EventRegistrationToken StereoEnabledChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken StereoEnabledChanged(F handler) const;
	void StereoEnabledChanged(EventRegistrationToken token) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> GetColorProfileAsync() const;
	EventRegistrationToken ColorProfileChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken ColorProfileChanged(F handler) const;
	void ColorProfileChanged(EventRegistrationToken token) const;
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

template <typename T>
struct impl_IBitmapTransform
{
	unsigned ScaledWidth() const;
	void ScaledWidth(unsigned value) const;
	unsigned ScaledHeight() const;
	void ScaledHeight(unsigned value) const;
	Windows::Graphics::Imaging::BitmapInterpolationMode InterpolationMode() const;
	void InterpolationMode(Windows::Graphics::Imaging::BitmapInterpolationMode value) const;
	Windows::Graphics::Imaging::BitmapFlip Flip() const;
	void Flip(Windows::Graphics::Imaging::BitmapFlip value) const;
	Windows::Graphics::Imaging::BitmapRotation Rotation() const;
	void Rotation(Windows::Graphics::Imaging::BitmapRotation value) const;
	Windows::Graphics::Imaging::BitmapBounds Bounds() const;
	void Bounds(Windows::Graphics::Imaging::BitmapBounds const & value) const;
};

template <typename T>
struct impl_IBitmapTypedValue
{
	IInspectable Value() const;
	Windows::Foundation::PropertyType Type() const;
};

template <typename T>
struct impl_IBitmapTypedValueFactory
{
	Windows::Graphics::Imaging::BitmapTypedValue Create(IInspectable const & value, Windows::Foundation::PropertyType type) const;
};

template <typename T>
struct impl_IBitmapPropertiesView
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapPropertySet> GetPropertiesAsync(Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
};

template <typename T>
struct impl_IBitmapProperties
{
	Windows::Foundation::IAsyncAction SetPropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & propertiesToSet) const;
};

template <typename T>
struct impl_IPixelDataProvider
{
};

template <typename T>
struct impl_IBitmapFrame
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> GetThumbnailAsync() const;
	Windows::Graphics::Imaging::BitmapPropertiesView BitmapProperties() const;
	Windows::Graphics::Imaging::BitmapPixelFormat BitmapPixelFormat() const;
	Windows::Graphics::Imaging::BitmapAlphaMode BitmapAlphaMode() const;
	double DpiX() const;
	double DpiY() const;
	unsigned PixelWidth() const;
	unsigned PixelHeight() const;
	unsigned OrientedPixelWidth() const;
	unsigned OrientedPixelHeight() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> GetPixelDataAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> GetPixelDataAsync(Windows::Graphics::Imaging::BitmapPixelFormat pixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode alphaMode, Windows::Graphics::Imaging::BitmapTransform const & transform, Windows::Graphics::Imaging::ExifOrientationMode exifOrientationMode, Windows::Graphics::Imaging::ColorManagementMode colorManagementMode) const;
};

template <typename T>
struct impl_IBitmapCodecInformation
{
	GUID CodecId() const;
	Windows::Foundation::Collections::IVectorView<String> FileExtensions() const;
	String FriendlyName() const;
	Windows::Foundation::Collections::IVectorView<String> MimeTypes() const;
};

template <typename T>
struct impl_IBitmapDecoderStatics
{
	GUID BmpDecoderId() const;
	GUID JpegDecoderId() const;
	GUID PngDecoderId() const;
	GUID TiffDecoderId() const;
	GUID GifDecoderId() const;
	GUID JpegXRDecoderId() const;
	GUID IcoDecoderId() const;
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> GetDecoderInformationEnumerator() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> CreateAsync(Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> CreateAsync(GUID decoderId, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
};

template <typename T>
struct impl_IBitmapDecoder
{
	Windows::Graphics::Imaging::BitmapPropertiesView BitmapContainerProperties() const;
	Windows::Graphics::Imaging::BitmapCodecInformation DecoderInformation() const;
	unsigned FrameCount() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> GetPreviewAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapFrame> GetFrameAsync(unsigned frameIndex) const;
};

template <typename T>
struct impl_IBitmapEncoderStatics
{
	GUID BmpEncoderId() const;
	GUID JpegEncoderId() const;
	GUID PngEncoderId() const;
	GUID TiffEncoderId() const;
	GUID GifEncoderId() const;
	GUID JpegXREncoderId() const;
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> GetEncoderInformationEnumerator() const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateAsync(GUID encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateAsync(GUID encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions) const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateForTranscodingAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder) const;
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateForInPlacePropertyEncodingAsync(Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder) const;
};

template <typename T>
struct impl_IBitmapEncoder
{
	Windows::Graphics::Imaging::BitmapCodecInformation EncoderInformation() const;
	Windows::Graphics::Imaging::BitmapProperties BitmapProperties() const;
	Windows::Graphics::Imaging::BitmapProperties BitmapContainerProperties() const;
	bool IsThumbnailGenerated() const;
	void IsThumbnailGenerated(bool value) const;
	unsigned GeneratedThumbnailWidth() const;
	void GeneratedThumbnailWidth(unsigned value) const;
	unsigned GeneratedThumbnailHeight() const;
	void GeneratedThumbnailHeight(unsigned value) const;
	Windows::Graphics::Imaging::BitmapTransform BitmapTransform() const;
	Windows::Foundation::IAsyncAction GoToNextFrameAsync() const;
	Windows::Foundation::IAsyncAction GoToNextFrameAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions) const;
	Windows::Foundation::IAsyncAction FlushAsync() const;
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

template <typename T>
struct impl_IPrintTaskSourceRequestedHandler
{
	void Invoke(Windows::Graphics::Printing::PrintTaskSourceRequestedArgs const & args) const;
};

template <typename T>
struct impl_IPrintTaskOptionsCoreProperties
{
	void MediaSize(Windows::Graphics::Printing::PrintMediaSize value) const;
	Windows::Graphics::Printing::PrintMediaSize MediaSize() const;
	void MediaType(Windows::Graphics::Printing::PrintMediaType value) const;
	Windows::Graphics::Printing::PrintMediaType MediaType() const;
	void Orientation(Windows::Graphics::Printing::PrintOrientation value) const;
	Windows::Graphics::Printing::PrintOrientation Orientation() const;
	void PrintQuality(Windows::Graphics::Printing::PrintQuality value) const;
	Windows::Graphics::Printing::PrintQuality PrintQuality() const;
	void ColorMode(Windows::Graphics::Printing::PrintColorMode value) const;
	Windows::Graphics::Printing::PrintColorMode ColorMode() const;
	void Duplex(Windows::Graphics::Printing::PrintDuplex value) const;
	Windows::Graphics::Printing::PrintDuplex Duplex() const;
	void Collation(Windows::Graphics::Printing::PrintCollation value) const;
	Windows::Graphics::Printing::PrintCollation Collation() const;
	void Staple(Windows::Graphics::Printing::PrintStaple value) const;
	Windows::Graphics::Printing::PrintStaple Staple() const;
	void HolePunch(Windows::Graphics::Printing::PrintHolePunch value) const;
	Windows::Graphics::Printing::PrintHolePunch HolePunch() const;
	void Binding(Windows::Graphics::Printing::PrintBinding value) const;
	Windows::Graphics::Printing::PrintBinding Binding() const;
	unsigned MinCopies() const;
	unsigned MaxCopies() const;
	void NumberOfCopies(unsigned value) const;
	unsigned NumberOfCopies() const;
};

template <typename T>
struct impl_IPrintTaskOptionsCoreUIConfiguration
{
	Windows::Foundation::Collections::IVector<String> DisplayedOptions() const;
};

template <typename T>
struct impl_IPrintTaskOptionsCore
{
	Windows::Graphics::Printing::PrintPageDescription GetPageDescription(unsigned jobPageNumber) const;
};

template <typename T>
struct impl_IStandardPrintTaskOptionsStatic
{
	String MediaSize() const;
	String MediaType() const;
	String Orientation() const;
	String PrintQuality() const;
	String ColorMode() const;
	String Duplex() const;
	String Collation() const;
	String Staple() const;
	String HolePunch() const;
	String Binding() const;
	String Copies() const;
	String NUp() const;
	String InputBin() const;
};

template <typename T>
struct impl_IPrintDocumentSource
{
};

template <typename T>
struct impl_IPrintTaskProgressingEventArgs
{
	unsigned DocumentPageCount() const;
};

template <typename T>
struct impl_IPrintTaskCompletedEventArgs
{
	Windows::Graphics::Printing::PrintTaskCompletion Completion() const;
};

template <typename T>
struct impl_IPrintTask
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet Properties() const;
	Windows::Graphics::Printing::IPrintDocumentSource Source() const;
	Windows::Graphics::Printing::PrintTaskOptions Options() const;
	EventRegistrationToken Previewing(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken Previewing(F eventHandler) const;
	void Previewing(EventRegistrationToken eventCookie) const;
	EventRegistrationToken Submitting(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken Submitting(F eventHandler) const;
	void Submitting(EventRegistrationToken eventCookie) const;
	EventRegistrationToken Progressing(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskProgressingEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken Progressing(F eventHandler) const;
	void Progressing(EventRegistrationToken eventCookie) const;
	EventRegistrationToken Completed(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskCompletedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken Completed(F eventHandler) const;
	void Completed(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IPrintTaskTargetDeviceSupport
{
	void IsPrinterTargetEnabled(bool value) const;
	bool IsPrinterTargetEnabled() const;
	void Is3DManufacturingTargetEnabled(bool value) const;
	bool Is3DManufacturingTargetEnabled() const;
};

template <typename T>
struct impl_IPrintTaskSourceRequestedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IPrintTaskSourceRequestedArgs
{
	Windows::Foundation::DateTime Deadline() const;
	void SetSource(Windows::Graphics::Printing::IPrintDocumentSource const & source) const;
	Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral GetDeferral() const;
};

template <typename T>
struct impl_IPrintTaskRequestedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IPrintTaskRequest
{
	Windows::Foundation::DateTime Deadline() const;
	Windows::Graphics::Printing::PrintTask CreatePrintTask(String const & title, Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler const & handler) const;
	template <unsigned S0> Windows::Graphics::Printing::PrintTask CreatePrintTask(wchar_t const (&title)[S0], Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler const & handler) const;
	template <typename F> Windows::Graphics::Printing::PrintTask CreatePrintTask(String const & title, F handler) const;
	template <unsigned S0, typename F> Windows::Graphics::Printing::PrintTask CreatePrintTask(wchar_t const (&title)[S0], F handler) const;
	Windows::Graphics::Printing::PrintTaskRequestedDeferral GetDeferral() const;
};

template <typename T>
struct impl_IPrintTaskRequestedEventArgs
{
	Windows::Graphics::Printing::PrintTaskRequest Request() const;
};

template <typename T>
struct impl_IPrintManagerStatic
{
	Windows::Graphics::Printing::PrintManager GetForCurrentView() const;
	Windows::Foundation::IAsyncOperation<bool> ShowPrintUIAsync() const;
};

template <typename T>
struct impl_IPrintManager
{
	EventRegistrationToken PrintTaskRequested(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintManager, Windows::Graphics::Printing::PrintTaskRequestedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken PrintTaskRequested(F eventHandler) const;
	void PrintTaskRequested(EventRegistrationToken eventCookie) const;
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

template <typename T>
struct impl_IPrintOptionDetails
{
	String OptionId() const;
	Windows::Graphics::Printing::OptionDetails::PrintOptionType OptionType() const;
	void ErrorText(String const & value) const;
	template <unsigned S0> void ErrorText(wchar_t const (&value)[S0]) const;
	String ErrorText() const;
	void State(Windows::Graphics::Printing::OptionDetails::PrintOptionStates value) const;
	Windows::Graphics::Printing::OptionDetails::PrintOptionStates State() const;
	IInspectable Value() const;
	bool TrySetValue(IInspectable const & value) const;
};

template <typename T>
struct impl_IPrintNumberOptionDetails
{
	unsigned MinValue() const;
	unsigned MaxValue() const;
};

template <typename T>
struct impl_IPrintTextOptionDetails
{
	unsigned MaxCharacters() const;
};

template <typename T>
struct impl_IPrintItemListOptionDetails
{
	Windows::Foundation::Collections::IVectorView<IInspectable> Items() const;
};

template <typename T>
struct impl_IPrintCustomOptionDetails
{
	void DisplayName(String const & value) const;
	template <unsigned S0> void DisplayName(wchar_t const (&value)[S0]) const;
	String DisplayName() const;
};

template <typename T>
struct impl_IPrintCustomTextOptionDetails
{
	void MaxCharacters(unsigned value) const;
	unsigned MaxCharacters() const;
};

template <typename T>
struct impl_IPrintCustomItemDetails
{
	String ItemId() const;
	void ItemDisplayName(String const & value) const;
	template <unsigned S0> void ItemDisplayName(wchar_t const (&value)[S0]) const;
	String ItemDisplayName() const;
};

template <typename T>
struct impl_IPrintCustomItemListOptionDetails
{
	void AddItem(String const & itemId, String const & displayName) const;
	template <unsigned S0, unsigned S1> void AddItem(wchar_t const (&itemId)[S0], wchar_t const (&displayName)[S1]) const;
};

template <typename T>
struct impl_IPrintTaskOptionChangedEventArgs
{
	IInspectable OptionId() const;
};

template <typename T>
struct impl_IPrintTaskOptionDetails
{
	Windows::Foundation::Collections::IMapView<String, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails> Options() const;
	Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails CreateItemListOption(String const & optionId, String const & displayName) const;
	template <unsigned S0, unsigned S1> Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails CreateItemListOption(wchar_t const (&optionId)[S0], wchar_t const (&displayName)[S1]) const;
	Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails CreateTextOption(String const & optionId, String const & displayName) const;
	template <unsigned S0, unsigned S1> Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails CreateTextOption(wchar_t const (&optionId)[S0], wchar_t const (&displayName)[S1]) const;
	EventRegistrationToken OptionChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken OptionChanged(F eventHandler) const;
	void OptionChanged(EventRegistrationToken eventCookie) const;
	EventRegistrationToken BeginValidation(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, IInspectable> const & eventHandler) const;
	template <typename F> EventRegistrationToken BeginValidation(F eventHandler) const;
	void BeginValidation(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IPrintTaskOptionDetailsStatic
{
	Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails GetFromPrintTaskOptions(Windows::Graphics::Printing::PrintTaskOptions const & printTaskOptions) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

template <typename T>
struct impl_IApplicationDataManagerStatics
{
	Windows::Storage::ApplicationData CreateForPackageFamily(String const & packageFamilyName) const;
	template <unsigned S0> Windows::Storage::ApplicationData CreateForPackageFamily(wchar_t const (&packageFamilyName)[S0]) const;
};

template <typename T>
struct impl_IApplicationDataManager
{
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

template <typename T>
struct impl_IDeploymentResult
{
	String ErrorText() const;
	GUID ActivityId() const;
	HRESULT ExtendedErrorCode() const;
};

template <typename T>
struct impl_IPackageUserInformation
{
	String UserSecurityId() const;
	Windows::Management::Deployment::PackageInstallState InstallState() const;
};

template <typename T>
struct impl_IPackageManager
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> AddPackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> UpdatePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RemovePackageAsync(String const & packageFullName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RemovePackageAsync(wchar_t const (&packageFullName)[S0]) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> StagePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RegisterPackageAsync(Windows::Foundation::Uri const & manifestUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages() const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(String const & userSecurityId) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(wchar_t const (&userSecurityId)[S0]) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages(String const & packageName, String const & packagePublisher) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages(wchar_t const (&packageName)[S0], wchar_t const (&packagePublisher)[S1]) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(String const & userSecurityId, String const & packageName, String const & packagePublisher) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageName)[S1], wchar_t const (&packagePublisher)[S2]) const;
	Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> FindUsers(String const & packageFullName) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> FindUsers(wchar_t const (&packageFullName)[S0]) const;
	void SetPackageState(String const & packageFullName, Windows::Management::Deployment::PackageState packageState) const;
	template <unsigned S0> void SetPackageState(wchar_t const (&packageFullName)[S0], Windows::Management::Deployment::PackageState packageState) const;
	Windows::ApplicationModel::Package FindPackage(String const & packageFullName) const;
	template <unsigned S0> Windows::ApplicationModel::Package FindPackage(wchar_t const (&packageFullName)[S0]) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> CleanupPackageForUserAsync(String const & packageName, String const & userSecurityId) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> CleanupPackageForUserAsync(wchar_t const (&packageName)[S0], wchar_t const (&userSecurityId)[S1]) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages(String const & packageFamilyName) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackages(wchar_t const (&packageFamilyName)[S0]) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(String const & userSecurityId, String const & packageFamilyName) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUser(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageFamilyName)[S1]) const;
	Windows::ApplicationModel::Package FindPackageForUser(String const & userSecurityId, String const & packageFullName) const;
	template <unsigned S0, unsigned S1> Windows::ApplicationModel::Package FindPackageForUser(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageFullName)[S1]) const;
};

template <typename T>
struct impl_IPackageManager2
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RemovePackageAsync(String const & packageFullName, Windows::Management::Deployment::RemovalOptions removalOptions) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RemovePackageAsync(wchar_t const (&packageFullName)[S0], Windows::Management::Deployment::RemovalOptions removalOptions) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> StagePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RegisterPackageByFullNameAsync(String const & mainPackageFullName, Windows::Foundation::Collections::IIterable<String> const & dependencyPackageFullNames, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> RegisterPackageByFullNameAsync(wchar_t const (&mainPackageFullName)[S0], Windows::Foundation::Collections::IIterable<String> const & dependencyPackageFullNames, Windows::Management::Deployment::DeploymentOptions deploymentOptions) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(String const & userSecurityId, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(wchar_t const (&userSecurityId)[S0], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(String const & packageName, String const & packagePublisher, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(wchar_t const (&packageName)[S0], wchar_t const (&packagePublisher)[S1], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(String const & userSecurityId, String const & packageName, String const & packagePublisher, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageName)[S1], wchar_t const (&packagePublisher)[S2], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(String const & packageFamilyName, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesWithPackageTypes(wchar_t const (&packageFamilyName)[S0], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(String const & userSecurityId, String const & packageFamilyName, Windows::Management::Deployment::PackageTypes packageTypes) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> FindPackagesForUserWithPackageTypes(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageFamilyName)[S1], Windows::Management::Deployment::PackageTypes packageTypes) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> StageUserDataAsync(String const & packageFullName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> StageUserDataAsync(wchar_t const (&packageFullName)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

template <typename T>
struct impl_IWorkplaceSettingsStatics
{
	bool IsMicrosoftAccountOptional() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media {

template <typename T>
struct impl_IMediaMarker
{
	Windows::Foundation::TimeSpan Time() const;
	String MediaMarkerType() const;
	String Text() const;
};

template <typename T>
struct impl_IMediaMarkers
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> Markers() const;
};

template <typename T>
struct impl_IMediaMarkerTypesStatics
{
	String Bookmark() const;
};

template <typename T>
struct impl_IMusicDisplayProperties
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String AlbumArtist() const;
	void AlbumArtist(String const & value) const;
	template <unsigned S0> void AlbumArtist(wchar_t const (&value)[S0]) const;
	String Artist() const;
	void Artist(String const & value) const;
	template <unsigned S0> void Artist(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IVideoDisplayProperties
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Subtitle() const;
	void Subtitle(String const & value) const;
	template <unsigned S0> void Subtitle(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IImageDisplayProperties
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Subtitle() const;
	void Subtitle(String const & value) const;
	template <unsigned S0> void Subtitle(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISystemMediaTransportControlsDisplayUpdater
{
	Windows::Media::MediaPlaybackType Type() const;
	void Type(Windows::Media::MediaPlaybackType value) const;
	String AppMediaId() const;
	void AppMediaId(String const & value) const;
	template <unsigned S0> void AppMediaId(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::RandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const;
	Windows::Media::MusicDisplayProperties MusicProperties() const;
	Windows::Media::VideoDisplayProperties VideoProperties() const;
	Windows::Media::ImageDisplayProperties ImageProperties() const;
	Windows::Foundation::IAsyncOperation<bool> CopyFromFileAsync(Windows::Media::MediaPlaybackType type, Windows::Storage::StorageFile const & source) const;
	void ClearAll() const;
	void Update() const;
};

template <typename T>
struct impl_ISystemMediaTransportControlsButtonPressedEventArgs
{
	Windows::Media::SystemMediaTransportControlsButton Button() const;
};

template <typename T>
struct impl_ISystemMediaTransportControlsPropertyChangedEventArgs
{
	Windows::Media::SystemMediaTransportControlsProperty Property() const;
};

template <typename T>
struct impl_ISystemMediaTransportControls
{
	Windows::Media::MediaPlaybackStatus PlaybackStatus() const;
	void PlaybackStatus(Windows::Media::MediaPlaybackStatus value) const;
	Windows::Media::SystemMediaTransportControlsDisplayUpdater DisplayUpdater() const;
	Windows::Media::SoundLevel SoundLevel() const;
	bool IsEnabled() const;
	void IsEnabled(bool value) const;
	bool IsPlayEnabled() const;
	void IsPlayEnabled(bool value) const;
	bool IsStopEnabled() const;
	void IsStopEnabled(bool value) const;
	bool IsPauseEnabled() const;
	void IsPauseEnabled(bool value) const;
	bool IsRecordEnabled() const;
	void IsRecordEnabled(bool value) const;
	bool IsFastForwardEnabled() const;
	void IsFastForwardEnabled(bool value) const;
	bool IsRewindEnabled() const;
	void IsRewindEnabled(bool value) const;
	bool IsPreviousEnabled() const;
	void IsPreviousEnabled(bool value) const;
	bool IsNextEnabled() const;
	void IsNextEnabled(bool value) const;
	bool IsChannelUpEnabled() const;
	void IsChannelUpEnabled(bool value) const;
	bool IsChannelDownEnabled() const;
	void IsChannelDownEnabled(bool value) const;
	EventRegistrationToken ButtonPressed(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ButtonPressed(F handler) const;
	void ButtonPressed(EventRegistrationToken token) const;
	EventRegistrationToken PropertyChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PropertyChanged(F handler) const;
	void PropertyChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ISystemMediaTransportControlsStatics
{
	Windows::Media::SystemMediaTransportControls GetForCurrentView() const;
};

template <typename T>
struct impl_IMediaExtension
{
	void SetProperties(Windows::Foundation::Collections::IPropertySet const & configuration) const;
};

template <typename T>
struct impl_IMediaExtensionManager
{
	void RegisterSchemeHandler(String const & activatableClassId, String const & scheme) const;
	template <unsigned S0, unsigned S1> void RegisterSchemeHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&scheme)[S1]) const;
	void RegisterSchemeHandler(String const & activatableClassId, String const & scheme, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0, unsigned S1> void RegisterSchemeHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&scheme)[S1], Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterByteStreamHandler(String const & activatableClassId, String const & fileExtension, String const & mimeType) const;
	template <unsigned S0, unsigned S1, unsigned S2> void RegisterByteStreamHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&fileExtension)[S1], wchar_t const (&mimeType)[S2]) const;
	void RegisterByteStreamHandler(String const & activatableClassId, String const & fileExtension, String const & mimeType, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0, unsigned S1, unsigned S2> void RegisterByteStreamHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&fileExtension)[S1], wchar_t const (&mimeType)[S2], Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterAudioDecoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype) const;
	template <unsigned S0> void RegisterAudioDecoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype) const;
	void RegisterAudioDecoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void RegisterAudioDecoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterAudioEncoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype) const;
	template <unsigned S0> void RegisterAudioEncoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype) const;
	void RegisterAudioEncoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void RegisterAudioEncoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterVideoDecoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype) const;
	template <unsigned S0> void RegisterVideoDecoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype) const;
	void RegisterVideoDecoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void RegisterVideoDecoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void RegisterVideoEncoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype) const;
	template <unsigned S0> void RegisterVideoEncoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype) const;
	void RegisterVideoEncoder(String const & activatableClassId, GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void RegisterVideoEncoder(wchar_t const (&activatableClassId)[S0], GUID inputSubtype, GUID outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const;
};

template <typename T>
struct impl_IVideoEffectsStatics
{
	String VideoStabilization() const;
};

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

template <typename T>
struct impl_IMediaCaptureFailedEventHandler
{
	void Invoke(Windows::Media::Capture::MediaCapture const & sender, Windows::Media::Capture::MediaCaptureFailedEventArgs const & errorEventArgs) const;
};

template <typename T>
struct impl_IRecordLimitationExceededEventHandler
{
	void Invoke(Windows::Media::Capture::MediaCapture const & sender) const;
};

template <typename T>
struct impl_ICameraCaptureUIPhotoCaptureSettings
{
	Windows::Media::Capture::CameraCaptureUIPhotoFormat Format() const;
	void Format(Windows::Media::Capture::CameraCaptureUIPhotoFormat value) const;
	Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution MaxResolution() const;
	void MaxResolution(Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution value) const;
	Windows::Foundation::Size CroppedSizeInPixels() const;
	void CroppedSizeInPixels(Windows::Foundation::Size const & value) const;
	Windows::Foundation::Size CroppedAspectRatio() const;
	void CroppedAspectRatio(Windows::Foundation::Size const & value) const;
	bool AllowCropping() const;
	void AllowCropping(bool value) const;
};

template <typename T>
struct impl_ICameraCaptureUIVideoCaptureSettings
{
	Windows::Media::Capture::CameraCaptureUIVideoFormat Format() const;
	void Format(Windows::Media::Capture::CameraCaptureUIVideoFormat value) const;
	Windows::Media::Capture::CameraCaptureUIMaxVideoResolution MaxResolution() const;
	void MaxResolution(Windows::Media::Capture::CameraCaptureUIMaxVideoResolution value) const;
	float MaxDurationInSeconds() const;
	void MaxDurationInSeconds(float value) const;
	bool AllowTrimming() const;
	void AllowTrimming(bool value) const;
};

template <typename T>
struct impl_ICameraCaptureUI
{
	Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings PhotoSettings() const;
	Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings VideoSettings() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CaptureFileAsync(Windows::Media::Capture::CameraCaptureUIMode mode) const;
};

template <typename T>
struct impl_ICameraOptionsUIStatics
{
	void Show(Windows::Media::Capture::MediaCapture const & mediaCapture) const;
};

template <typename T>
struct impl_IMediaCaptureFailedEventArgs
{
	String Message() const;
	unsigned Code() const;
};

template <typename T>
struct impl_IMediaCaptureInitializationSettings
{
	void AudioDeviceId(String const & value) const;
	template <unsigned S0> void AudioDeviceId(wchar_t const (&value)[S0]) const;
	String AudioDeviceId() const;
	void VideoDeviceId(String const & value) const;
	template <unsigned S0> void VideoDeviceId(wchar_t const (&value)[S0]) const;
	String VideoDeviceId() const;
	void StreamingCaptureMode(Windows::Media::Capture::StreamingCaptureMode value) const;
	Windows::Media::Capture::StreamingCaptureMode StreamingCaptureMode() const;
	void PhotoCaptureSource(Windows::Media::Capture::PhotoCaptureSource value) const;
	Windows::Media::Capture::PhotoCaptureSource PhotoCaptureSource() const;
};

template <typename T>
struct impl_IMediaCaptureInitializationSettings2
{
	void MediaCategory(Windows::Media::Capture::MediaCategory value) const;
	Windows::Media::Capture::MediaCategory MediaCategory() const;
	void AudioProcessing(Windows::Media::AudioProcessing value) const;
	Windows::Media::AudioProcessing AudioProcessing() const;
};

template <typename T>
struct impl_IMediaCapture
{
	Windows::Foundation::IAsyncAction InitializeAsync() const;
	Windows::Foundation::IAsyncAction InitializeAsync(Windows::Media::Capture::MediaCaptureInitializationSettings const & mediaCaptureInitializationSettings) const;
	Windows::Foundation::IAsyncAction StartRecordToStorageFileAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncAction StartRecordToStreamAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncAction StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const;
	Windows::Foundation::IAsyncAction StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, String const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, wchar_t const (&customSinkActivationId)[S0], Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	Windows::Foundation::IAsyncAction StopRecordAsync() const;
	Windows::Foundation::IAsyncAction CapturePhotoToStorageFileAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type, Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncAction CapturePhotoToStreamAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncAction AddEffectAsync(Windows::Media::Capture::MediaStreamType mediaStreamType, String const & effectActivationID, Windows::Foundation::Collections::IPropertySet const & effectSettings) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AddEffectAsync(Windows::Media::Capture::MediaStreamType mediaStreamType, wchar_t const (&effectActivationID)[S0], Windows::Foundation::Collections::IPropertySet const & effectSettings) const;
	Windows::Foundation::IAsyncAction ClearEffectsAsync(Windows::Media::Capture::MediaStreamType mediaStreamType) const;
	void SetEncoderProperty(Windows::Media::Capture::MediaStreamType mediaStreamType, GUID propertyId, IInspectable const & propertyValue) const;
	IInspectable GetEncoderProperty(Windows::Media::Capture::MediaStreamType mediaStreamType, GUID propertyId) const;
	EventRegistrationToken Failed(Windows::Media::Capture::IMediaCaptureFailedEventHandler const & errorEventHandler) const;
	template <typename F> EventRegistrationToken Failed(F errorEventHandler) const;
	void Failed(EventRegistrationToken eventCookie) const;
	EventRegistrationToken RecordLimitationExceeded(Windows::Media::Capture::IRecordLimitationExceededEventHandler const & recordLimitationExceededEventHandler) const;
	template <typename F> EventRegistrationToken RecordLimitationExceeded(F recordLimitationExceededEventHandler) const;
	void RecordLimitationExceeded(EventRegistrationToken eventCookie) const;
	Windows::Media::Capture::MediaCaptureSettings MediaCaptureSettings() const;
	Windows::Media::Devices::AudioDeviceController AudioDeviceController() const;
	Windows::Media::Devices::VideoDeviceController VideoDeviceController() const;
	void SetPreviewMirroring(bool value) const;
	bool GetPreviewMirroring() const;
	void SetPreviewRotation(Windows::Media::Capture::VideoRotation value) const;
	Windows::Media::Capture::VideoRotation GetPreviewRotation() const;
	void SetRecordRotation(Windows::Media::Capture::VideoRotation value) const;
	Windows::Media::Capture::VideoRotation GetRecordRotation() const;
};

template <typename T>
struct impl_IMediaCapture2
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToStorageFileAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToStreamAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::Streams::IRandomAccessStream const & stream) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, String const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, wchar_t const (&customSinkActivationId)[S0], Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoCapture> PrepareLowLagPhotoCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoSequenceCapture> PrepareLowLagPhotoSequenceCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type) const;
	Windows::Foundation::IAsyncAction SetEncodingPropertiesAsync(Windows::Media::Capture::MediaStreamType mediaStreamType, Windows::Media::MediaProperties::IMediaEncodingProperties const & mediaEncodingProperties, Windows::Media::MediaProperties::MediaPropertySet const & encoderProperties) const;
};

template <typename T>
struct impl_ILowLagPhotoCapture
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::CapturedPhoto> CaptureAsync() const;
	Windows::Foundation::IAsyncAction FinishAsync() const;
};

template <typename T>
struct impl_ILowLagMediaRecording
{
	Windows::Foundation::IAsyncAction StartAsync() const;
	Windows::Foundation::IAsyncAction StopAsync() const;
	Windows::Foundation::IAsyncAction FinishAsync() const;
};

template <typename T>
struct impl_ILowLagPhotoSequenceCapture
{
	Windows::Foundation::IAsyncAction StartAsync() const;
	Windows::Foundation::IAsyncAction StopAsync() const;
	Windows::Foundation::IAsyncAction FinishAsync() const;
	EventRegistrationToken PhotoCaptured(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::LowLagPhotoSequenceCapture, Windows::Media::Capture::PhotoCapturedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PhotoCaptured(F handler) const;
	void PhotoCaptured(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPhotoCapturedEventArgs
{
	Windows::Media::Capture::CapturedFrame Frame() const;
	Windows::Media::Capture::CapturedFrame Thumbnail() const;
	Windows::Foundation::TimeSpan CaptureTimeOffset() const;
};

template <typename T>
struct impl_ICapturedPhoto
{
	Windows::Media::Capture::CapturedFrame Frame() const;
	Windows::Media::Capture::CapturedFrame Thumbnail() const;
};

template <typename T>
struct impl_ICapturedFrame
{
	unsigned Width() const;
	unsigned Height() const;
};

template <typename T>
struct impl_IMediaCaptureVideoPreview
{
	Windows::Foundation::IAsyncAction StartPreviewAsync() const;
	Windows::Foundation::IAsyncAction StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const;
	Windows::Foundation::IAsyncAction StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, String const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, wchar_t const (&customSinkActivationId)[S0], Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const;
	Windows::Foundation::IAsyncAction StopPreviewAsync() const;
};

template <typename T>
struct impl_IMediaCaptureSettings
{
	String AudioDeviceId() const;
	String VideoDeviceId() const;
	Windows::Media::Capture::StreamingCaptureMode StreamingCaptureMode() const;
	Windows::Media::Capture::PhotoCaptureSource PhotoCaptureSource() const;
	Windows::Media::Capture::VideoDeviceCharacteristic VideoDeviceCharacteristic() const;
};

template <typename T>
struct impl_IMediaCaptureSettings2
{
	bool ConcurrentRecordAndPhotoSupported() const;
	bool ConcurrentRecordAndPhotoSequenceSupported() const;
	bool CameraSoundRequiredForRegion() const;
	Windows::Foundation::IReference<unsigned> Horizontal35mmEquivalentFocalLength() const;
	Windows::Foundation::IReference<int> PitchOffsetDegrees() const;
	Windows::Foundation::IReference<unsigned> Vertical35mmEquivalentFocalLength() const;
	Windows::Media::Capture::MediaCategory MediaCategory() const;
	Windows::Media::AudioProcessing AudioProcessing() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

template <typename T>
struct impl_IRatedContentDescription
{
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Image() const;
	void Image(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::Media::ContentRestrictions::RatedContentCategory Category() const;
	void Category(Windows::Media::ContentRestrictions::RatedContentCategory value) const;
	Windows::Foundation::Collections::IVector<String> Ratings() const;
	void Ratings(Windows::Foundation::Collections::IVector<String> const & value) const;
};

template <typename T>
struct impl_IRatedContentDescriptionFactory
{
	Windows::Media::ContentRestrictions::RatedContentDescription Create(String const & id, String const & title, Windows::Media::ContentRestrictions::RatedContentCategory category) const;
	template <unsigned S0, unsigned S1> Windows::Media::ContentRestrictions::RatedContentDescription Create(wchar_t const (&id)[S0], wchar_t const (&title)[S1], Windows::Media::ContentRestrictions::RatedContentCategory category) const;
};

template <typename T>
struct impl_IContentRestrictionsBrowsePolicy
{
	String GeographicRegion() const;
	Windows::Foundation::IReference<unsigned> MaxBrowsableAgeRating() const;
	Windows::Foundation::IReference<unsigned> PreferredAgeRating() const;
};

template <typename T>
struct impl_IRatedContentRestrictions
{
	Windows::Foundation::IAsyncOperation<Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy> GetBrowsePolicyAsync() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Media::ContentRestrictions::ContentAccessRestrictionLevel> GetRestrictionLevelAsync(Windows::Media::ContentRestrictions::RatedContentDescription const & RatedContentDescription) const;
	Windows::Foundation::IAsyncOperation<bool> RequestContentAccessAsync(Windows::Media::ContentRestrictions::RatedContentDescription const & RatedContentDescription) const;
	EventRegistrationToken RestrictionsChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken RestrictionsChanged(F handler) const;
	void RestrictionsChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IRatedContentRestrictionsFactory
{
	Windows::Media::ContentRestrictions::RatedContentRestrictions CreateWithMaxAgeRating(unsigned maxAgeRating) const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

template <typename T>
struct impl_IMediaStreamDescriptor
{
	bool IsSelected() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Name() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	String Language() const;
};

template <typename T>
struct impl_IAudioStreamDescriptor
{
	Windows::Media::MediaProperties::AudioEncodingProperties EncodingProperties() const;
};

template <typename T>
struct impl_IAudioStreamDescriptorFactory
{
	Windows::Media::Core::AudioStreamDescriptor Create(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) const;
};

template <typename T>
struct impl_IVideoStreamDescriptor
{
	Windows::Media::MediaProperties::VideoEncodingProperties EncodingProperties() const;
};

template <typename T>
struct impl_IVideoStreamDescriptorFactory
{
	Windows::Media::Core::VideoStreamDescriptor Create(Windows::Media::MediaProperties::VideoEncodingProperties const & encodingProperties) const;
};

template <typename T>
struct impl_IMediaSource
{
};

template <typename T>
struct impl_IMediaStreamSource
{
	EventRegistrationToken Closed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceClosedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Closed(F handler) const;
	void Closed(EventRegistrationToken token) const;
	EventRegistrationToken Starting(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceStartingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Starting(F handler) const;
	void Starting(EventRegistrationToken token) const;
	EventRegistrationToken Paused(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Paused(F handler) const;
	void Paused(EventRegistrationToken token) const;
	EventRegistrationToken SampleRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SampleRequested(F handler) const;
	void SampleRequested(EventRegistrationToken token) const;
	EventRegistrationToken SwitchStreamsRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SwitchStreamsRequested(F handler) const;
	void SwitchStreamsRequested(EventRegistrationToken token) const;
	void NotifyError(Windows::Media::Core::MediaStreamSourceErrorStatus errorStatus) const;
	void AddStreamDescriptor(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) const;
	void MediaProtectionManager(Windows::Media::Protection::MediaProtectionManager const & value) const;
	Windows::Media::Protection::MediaProtectionManager MediaProtectionManager() const;
	void Duration(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan Duration() const;
	void CanSeek(bool value) const;
	bool CanSeek() const;
	void BufferTime(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan BufferTime() const;
	void SetBufferedRange(Windows::Foundation::TimeSpan const & startOffset, Windows::Foundation::TimeSpan const & endOffset) const;
	Windows::Storage::FileProperties::MusicProperties MusicProperties() const;
	Windows::Storage::FileProperties::VideoProperties VideoProperties() const;
	void Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
};

template <typename T>
struct impl_IMediaStreamSourceFactory
{
	Windows::Media::Core::MediaStreamSource CreateFromDescriptor(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) const;
	Windows::Media::Core::MediaStreamSource CreateFromDescriptors(Windows::Media::Core::IMediaStreamDescriptor const & descriptor, Windows::Media::Core::IMediaStreamDescriptor const & descriptor2) const;
};

template <typename T>
struct impl_IMediaStreamSample
{
	EventRegistrationToken Processed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSample, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Processed(F handler) const;
	void Processed(EventRegistrationToken token) const;
	Windows::Storage::Streams::Buffer Buffer() const;
	Windows::Foundation::TimeSpan Timestamp() const;
	Windows::Media::Core::MediaStreamSamplePropertySet ExtendedProperties() const;
	Windows::Media::Core::MediaStreamSampleProtectionProperties Protection() const;
	void DecodeTimestamp(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan DecodeTimestamp() const;
	void Duration(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan Duration() const;
	void KeyFrame(bool value) const;
	bool KeyFrame() const;
	void Discontinuous(bool value) const;
	bool Discontinuous() const;
};

template <typename T>
struct impl_IMediaStreamSampleStatics
{
	Windows::Media::Core::MediaStreamSample CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer, Windows::Foundation::TimeSpan const & timestamp) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, unsigned count, Windows::Foundation::TimeSpan const & timestamp) const;
};

template <typename T>
struct impl_IMediaStreamSampleProtectionProperties
{
};

template <typename T>
struct impl_IMediaStreamSourceClosedRequest
{
	Windows::Media::Core::MediaStreamSourceClosedReason Reason() const;
};

template <typename T>
struct impl_IMediaStreamSourceClosedEventArgs
{
	Windows::Media::Core::MediaStreamSourceClosedRequest Request() const;
};

template <typename T>
struct impl_IMediaStreamSourceStartingRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IMediaStreamSourceStartingRequest
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> StartPosition() const;
	Windows::Media::Core::MediaStreamSourceStartingRequestDeferral GetDeferral() const;
	void SetActualStartPosition(Windows::Foundation::TimeSpan const & position) const;
};

template <typename T>
struct impl_IMediaStreamSourceStartingEventArgs
{
	Windows::Media::Core::MediaStreamSourceStartingRequest Request() const;
};

template <typename T>
struct impl_IMediaStreamSourceSampleRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IMediaStreamSourceSampleRequest
{
	Windows::Media::Core::IMediaStreamDescriptor StreamDescriptor() const;
	Windows::Media::Core::MediaStreamSourceSampleRequestDeferral GetDeferral() const;
	void Sample(Windows::Media::Core::MediaStreamSample const & value) const;
	Windows::Media::Core::MediaStreamSample Sample() const;
	void ReportSampleProgress(unsigned progress) const;
};

template <typename T>
struct impl_IMediaStreamSourceSampleRequestedEventArgs
{
	Windows::Media::Core::MediaStreamSourceSampleRequest Request() const;
};

template <typename T>
struct impl_IMediaStreamSourceSwitchStreamsRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IMediaStreamSourceSwitchStreamsRequest
{
	Windows::Media::Core::IMediaStreamDescriptor OldStreamDescriptor() const;
	Windows::Media::Core::IMediaStreamDescriptor NewStreamDescriptor() const;
	Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_IMediaStreamSourceSwitchStreamsRequestedEventArgs
{
	Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest Request() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

template <typename T>
struct impl_ICallControlEventHandler
{
	void Invoke(Windows::Media::Devices::CallControl const & sender) const;
};

template <typename T>
struct impl_IDialRequestedEventHandler
{
	void Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::DialRequestedEventArgs const & e) const;
};

template <typename T>
struct impl_IRedialRequestedEventHandler
{
	void Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::RedialRequestedEventArgs const & e) const;
};

template <typename T>
struct impl_IKeypadPressedEventHandler
{
	void Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::KeypadPressedEventArgs const & e) const;
};

template <typename T>
struct impl_IDialRequestedEventArgs
{
	void Handled() const;
	IInspectable Contact() const;
};

template <typename T>
struct impl_IRedialRequestedEventArgs
{
	void Handled() const;
};

template <typename T>
struct impl_IKeypadPressedEventArgs
{
	Windows::Media::Devices::TelephonyKey TelephonyKey() const;
};

template <typename T>
struct impl_ICallControl
{
	unsigned long long IndicateNewIncomingCall(bool enableRinger, String const & callerId) const;
	template <unsigned S0> unsigned long long IndicateNewIncomingCall(bool enableRinger, wchar_t const (&callerId)[S0]) const;
	unsigned long long IndicateNewOutgoingCall() const;
	void IndicateActiveCall(unsigned long long callToken) const;
	void EndCall(unsigned long long callToken) const;
	bool HasRinger() const;
	EventRegistrationToken AnswerRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const;
	template <typename F> EventRegistrationToken AnswerRequested(F handler) const;
	void AnswerRequested(EventRegistrationToken token) const;
	EventRegistrationToken HangUpRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const;
	template <typename F> EventRegistrationToken HangUpRequested(F handler) const;
	void HangUpRequested(EventRegistrationToken token) const;
	EventRegistrationToken DialRequested(Windows::Media::Devices::IDialRequestedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken DialRequested(F handler) const;
	void DialRequested(EventRegistrationToken token) const;
	EventRegistrationToken RedialRequested(Windows::Media::Devices::IRedialRequestedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken RedialRequested(F handler) const;
	void RedialRequested(EventRegistrationToken token) const;
	EventRegistrationToken KeypadPressed(Windows::Media::Devices::IKeypadPressedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken KeypadPressed(F handler) const;
	void KeypadPressed(EventRegistrationToken token) const;
	EventRegistrationToken AudioTransferRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const;
	template <typename F> EventRegistrationToken AudioTransferRequested(F handler) const;
	void AudioTransferRequested(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ICallControlStatics
{
	Windows::Media::Devices::CallControl GetDefault() const;
	Windows::Media::Devices::CallControl FromId(String const & deviceId) const;
	template <unsigned S0> Windows::Media::Devices::CallControl FromId(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_IDefaultAudioDeviceChangedEventArgs
{
	String Id() const;
	Windows::Media::Devices::AudioDeviceRole Role() const;
};

template <typename T>
struct impl_IMediaDeviceStatics
{
	String GetAudioCaptureSelector() const;
	String GetAudioRenderSelector() const;
	String GetVideoCaptureSelector() const;
	String GetDefaultAudioCaptureId(Windows::Media::Devices::AudioDeviceRole role) const;
	String GetDefaultAudioRenderId(Windows::Media::Devices::AudioDeviceRole role) const;
	EventRegistrationToken DefaultAudioCaptureDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken DefaultAudioCaptureDeviceChanged(F handler) const;
	void DefaultAudioCaptureDeviceChanged(EventRegistrationToken cookie) const;
	EventRegistrationToken DefaultAudioRenderDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken DefaultAudioRenderDeviceChanged(F handler) const;
	void DefaultAudioRenderDeviceChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ISceneModeControl
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::CaptureSceneMode> SupportedModes() const;
	Windows::Media::Devices::CaptureSceneMode Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(Windows::Media::Devices::CaptureSceneMode sceneMode) const;
};

template <typename T>
struct impl_ITorchControl
{
	bool Supported() const;
	bool PowerSupported() const;
	bool Enabled() const;
	void Enabled(bool value) const;
	float PowerPercent() const;
	void PowerPercent(float value) const;
};

template <typename T>
struct impl_IFlashControl
{
	bool Supported() const;
	bool PowerSupported() const;
	bool RedEyeReductionSupported() const;
	bool Enabled() const;
	void Enabled(bool value) const;
	bool Auto() const;
	void Auto(bool value) const;
	bool RedEyeReduction() const;
	void RedEyeReduction(bool value) const;
	float PowerPercent() const;
	void PowerPercent(float value) const;
};

template <typename T>
struct impl_IExposureCompensationControl
{
	bool Supported() const;
	float Min() const;
	float Max() const;
	float Step() const;
	float Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(float value) const;
};

template <typename T>
struct impl_IIsoSpeedControl
{
	bool Supported() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::IsoSpeedPreset> SupportedPresets() const;
	Windows::Media::Devices::IsoSpeedPreset Preset() const;
	Windows::Foundation::IAsyncAction SetPresetAsync(Windows::Media::Devices::IsoSpeedPreset preset) const;
};

template <typename T>
struct impl_IWhiteBalanceControl
{
	bool Supported() const;
	Windows::Media::Devices::ColorTemperaturePreset Preset() const;
	Windows::Foundation::IAsyncAction SetPresetAsync(Windows::Media::Devices::ColorTemperaturePreset preset) const;
	unsigned Min() const;
	unsigned Max() const;
	unsigned Step() const;
	unsigned Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(unsigned temperature) const;
};

template <typename T>
struct impl_IExposureControl
{
	bool Supported() const;
	bool Auto() const;
	Windows::Foundation::IAsyncAction SetAutoAsync(bool value) const;
	Windows::Foundation::TimeSpan Min() const;
	Windows::Foundation::TimeSpan Max() const;
	Windows::Foundation::TimeSpan Step() const;
	Windows::Foundation::TimeSpan Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(Windows::Foundation::TimeSpan const & shutterDuration) const;
};

template <typename T>
struct impl_IFocusControl
{
	bool Supported() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::FocusPreset> SupportedPresets() const;
	Windows::Media::Devices::FocusPreset Preset() const;
	Windows::Foundation::IAsyncAction SetPresetAsync(Windows::Media::Devices::FocusPreset preset) const;
	Windows::Foundation::IAsyncAction SetPresetAsync(Windows::Media::Devices::FocusPreset preset, bool completeBeforeFocus) const;
	unsigned Min() const;
	unsigned Max() const;
	unsigned Step() const;
	unsigned Value() const;
	Windows::Foundation::IAsyncAction SetValueAsync(unsigned focus) const;
	Windows::Foundation::IAsyncAction FocusAsync() const;
};

template <typename T>
struct impl_IRegionOfInterest
{
	bool AutoFocusEnabled() const;
	void AutoFocusEnabled(bool value) const;
	bool AutoWhiteBalanceEnabled() const;
	void AutoWhiteBalanceEnabled(bool value) const;
	bool AutoExposureEnabled() const;
	void AutoExposureEnabled(bool value) const;
	Windows::Foundation::Rect Bounds() const;
	void Bounds(Windows::Foundation::Rect const & value) const;
};

template <typename T>
struct impl_IRegionsOfInterestControl
{
	unsigned MaxRegions() const;
	Windows::Foundation::IAsyncAction SetRegionsAsync(Windows::Foundation::Collections::IIterable<Windows::Media::Devices::RegionOfInterest> const & regions) const;
	Windows::Foundation::IAsyncAction SetRegionsAsync(Windows::Foundation::Collections::IIterable<Windows::Media::Devices::RegionOfInterest> const & regions, bool lockValues) const;
	Windows::Foundation::IAsyncAction ClearRegionsAsync() const;
	bool AutoFocusSupported() const;
	bool AutoWhiteBalanceSupported() const;
	bool AutoExposureSupported() const;
};

template <typename T>
struct impl_IMediaDeviceController
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::IMediaEncodingProperties> GetAvailableMediaStreamProperties(Windows::Media::Capture::MediaStreamType mediaStreamType) const;
	Windows::Media::MediaProperties::IMediaEncodingProperties GetMediaStreamProperties(Windows::Media::Capture::MediaStreamType mediaStreamType) const;
	Windows::Foundation::IAsyncAction SetMediaStreamPropertiesAsync(Windows::Media::Capture::MediaStreamType mediaStreamType, Windows::Media::MediaProperties::IMediaEncodingProperties const & mediaEncodingProperties) const;
};

template <typename T>
struct impl_IAudioDeviceController
{
	void Muted(bool value) const;
	bool Muted() const;
	void VolumePercent(float value) const;
	float VolumePercent() const;
};

template <typename T>
struct impl_IVideoDeviceController
{
	Windows::Media::Devices::MediaDeviceControl Brightness() const;
	Windows::Media::Devices::MediaDeviceControl Contrast() const;
	Windows::Media::Devices::MediaDeviceControl Hue() const;
	Windows::Media::Devices::MediaDeviceControl WhiteBalance() const;
	Windows::Media::Devices::MediaDeviceControl BacklightCompensation() const;
	Windows::Media::Devices::MediaDeviceControl Pan() const;
	Windows::Media::Devices::MediaDeviceControl Tilt() const;
	Windows::Media::Devices::MediaDeviceControl Zoom() const;
	Windows::Media::Devices::MediaDeviceControl Roll() const;
	Windows::Media::Devices::MediaDeviceControl Exposure() const;
	Windows::Media::Devices::MediaDeviceControl Focus() const;
	bool TrySetPowerlineFrequency(Windows::Media::Capture::PowerlineFrequency value) const;
	bool TryGetPowerlineFrequency(Windows::Media::Capture::PowerlineFrequency & value) const;
};

template <typename T>
struct impl_IAdvancedVideoCaptureDeviceController2
{
	Windows::Media::Devices::LowLagPhotoSequenceControl LowLagPhotoSequence() const;
	Windows::Media::Devices::LowLagPhotoControl LowLagPhoto() const;
	Windows::Media::Devices::SceneModeControl SceneModeControl() const;
	Windows::Media::Devices::TorchControl TorchControl() const;
	Windows::Media::Devices::FlashControl FlashControl() const;
	Windows::Media::Devices::WhiteBalanceControl WhiteBalanceControl() const;
	Windows::Media::Devices::ExposureControl ExposureControl() const;
	Windows::Media::Devices::FocusControl FocusControl() const;
	Windows::Media::Devices::ExposureCompensationControl ExposureCompensationControl() const;
	Windows::Media::Devices::IsoSpeedControl IsoSpeedControl() const;
	Windows::Media::Devices::RegionsOfInterestControl RegionsOfInterestControl() const;
	Windows::Media::Devices::CaptureUse PrimaryUse() const;
	void PrimaryUse(Windows::Media::Devices::CaptureUse value) const;
};

template <typename T>
struct impl_IMediaDeviceControl
{
	Windows::Media::Devices::MediaDeviceControlCapabilities Capabilities() const;
	bool TryGetValue(double & value) const;
	bool TrySetValue(double value) const;
	bool TryGetAuto(bool & value) const;
	bool TrySetAuto(bool value) const;
};

template <typename T>
struct impl_IMediaDeviceControlCapabilities
{
	bool Supported() const;
	double Min() const;
	double Max() const;
	double Step() const;
	double Default() const;
	bool AutoModeSupported() const;
};

template <typename T>
struct impl_IAdvancedVideoCaptureDeviceController
{
	void SetDeviceProperty(String const & propertyId, IInspectable const & propertyValue) const;
	template <unsigned S0> void SetDeviceProperty(wchar_t const (&propertyId)[S0], IInspectable const & propertyValue) const;
	IInspectable GetDeviceProperty(String const & propertyId) const;
	template <unsigned S0> IInspectable GetDeviceProperty(wchar_t const (&propertyId)[S0]) const;
};

template <typename T>
struct impl_ILowLagPhotoSequenceControl
{
	bool Supported() const;
	unsigned MaxPastPhotos() const;
	float MaxPhotosPerSecond() const;
	unsigned PastPhotoLimit() const;
	void PastPhotoLimit(unsigned value) const;
	float PhotosPerSecondLimit() const;
	void PhotosPerSecondLimit(float value) const;
	Windows::Media::MediaProperties::MediaRatio GetHighestConcurrentFrameRate(Windows::Media::MediaProperties::IMediaEncodingProperties const & captureProperties) const;
	Windows::Media::MediaProperties::MediaRatio GetCurrentFrameRate() const;
	bool ThumbnailEnabled() const;
	void ThumbnailEnabled(bool value) const;
	Windows::Media::MediaProperties::MediaThumbnailFormat ThumbnailFormat() const;
	void ThumbnailFormat(Windows::Media::MediaProperties::MediaThumbnailFormat value) const;
	unsigned DesiredThumbnailSize() const;
	void DesiredThumbnailSize(unsigned value) const;
	unsigned HardwareAcceleratedThumbnailSupported() const;
};

template <typename T>
struct impl_ILowLagPhotoControl
{
	Windows::Media::MediaProperties::MediaRatio GetHighestConcurrentFrameRate(Windows::Media::MediaProperties::IMediaEncodingProperties const & captureProperties) const;
	Windows::Media::MediaProperties::MediaRatio GetCurrentFrameRate() const;
	bool ThumbnailEnabled() const;
	void ThumbnailEnabled(bool value) const;
	Windows::Media::MediaProperties::MediaThumbnailFormat ThumbnailFormat() const;
	void ThumbnailFormat(Windows::Media::MediaProperties::MediaThumbnailFormat value) const;
	unsigned DesiredThumbnailSize() const;
	void DesiredThumbnailSize(unsigned value) const;
	unsigned HardwareAcceleratedThumbnailSupported() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

template <typename T>
struct impl_IAudioEffect
{
	Windows::Media::Effects::AudioEffectType AudioEffectType() const;
};

template <typename T>
struct impl_IAudioEffectsManagerStatics
{
	Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory category) const;
	template <unsigned S0> Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory category) const;
	Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory category, Windows::Media::AudioProcessing mode) const;
	template <unsigned S0> Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory category, Windows::Media::AudioProcessing mode) const;
	Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory category) const;
	template <unsigned S0> Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory category) const;
	Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory category, Windows::Media::AudioProcessing mode) const;
	template <unsigned S0> Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory category, Windows::Media::AudioProcessing mode) const;
};

template <typename T>
struct impl_IAudioRenderEffectsManager
{
	EventRegistrationToken AudioRenderEffectsChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Effects::AudioRenderEffectsManager, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken AudioRenderEffectsChanged(F handler) const;
	void AudioRenderEffectsChanged(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> GetAudioRenderEffects() const;
};

template <typename T>
struct impl_IAudioCaptureEffectsManager
{
	EventRegistrationToken AudioCaptureEffectsChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Effects::AudioCaptureEffectsManager, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken AudioCaptureEffectsChanged(F handler) const;
	void AudioCaptureEffectsChanged(EventRegistrationToken token) const;
	Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> GetAudioCaptureEffects() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

template <typename T>
struct impl_IMediaRatio
{
	void Numerator(unsigned value) const;
	unsigned Numerator() const;
	void Denominator(unsigned value) const;
	unsigned Denominator() const;
};

template <typename T>
struct impl_IMediaEncodingProperties
{
	Windows::Media::MediaProperties::MediaPropertySet Properties() const;
	String Type() const;
	void Subtype(String const & value) const;
	template <unsigned S0> void Subtype(wchar_t const (&value)[S0]) const;
	String Subtype() const;
};

template <typename T>
struct impl_IAudioEncodingProperties
{
	void Bitrate(unsigned value) const;
	unsigned Bitrate() const;
	void ChannelCount(unsigned value) const;
	unsigned ChannelCount() const;
	void SampleRate(unsigned value) const;
	unsigned SampleRate() const;
	void BitsPerSample(unsigned value) const;
	unsigned BitsPerSample() const;
};

template <typename T>
struct impl_IAudioEncodingPropertiesWithFormatUserData
{
};

template <typename T>
struct impl_IAudioEncodingPropertiesStatics
{
	Windows::Media::MediaProperties::AudioEncodingProperties CreateAac(unsigned sampleRate, unsigned channelCount, unsigned bitrate) const;
	Windows::Media::MediaProperties::AudioEncodingProperties CreateAacAdts(unsigned sampleRate, unsigned channelCount, unsigned bitrate) const;
	Windows::Media::MediaProperties::AudioEncodingProperties CreateMp3(unsigned sampleRate, unsigned channelCount, unsigned bitrate) const;
	Windows::Media::MediaProperties::AudioEncodingProperties CreatePcm(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample) const;
	Windows::Media::MediaProperties::AudioEncodingProperties CreateWma(unsigned sampleRate, unsigned channelCount, unsigned bitrate) const;
};

template <typename T>
struct impl_IVideoEncodingProperties
{
	void Bitrate(unsigned value) const;
	unsigned Bitrate() const;
	void Width(unsigned value) const;
	unsigned Width() const;
	void Height(unsigned value) const;
	unsigned Height() const;
	Windows::Media::MediaProperties::MediaRatio FrameRate() const;
	Windows::Media::MediaProperties::MediaRatio PixelAspectRatio() const;
};

template <typename T>
struct impl_IMediaEncodingSubtypesStatics
{
	String Aac() const;
	String AacAdts() const;
	String Ac3() const;
	String AmrNb() const;
	String AmrWb() const;
	String Argb32() const;
	String Asf() const;
	String Avi() const;
	String Bgra8() const;
	String Bmp() const;
	String Eac3() const;
	String Float() const;
	String Gif() const;
	String H263() const;
	String H264() const;
	String H264Es() const;
	String Hevc() const;
	String HevcEs() const;
	String Iyuv() const;
	String Jpeg() const;
	String JpegXr() const;
	String Mjpg() const;
	String Mpeg() const;
	String Mpeg1() const;
	String Mpeg2() const;
	String Mp3() const;
	String Mpeg4() const;
	String Nv12() const;
	String Pcm() const;
	String Png() const;
	String Rgb24() const;
	String Rgb32() const;
	String Tiff() const;
	String Wave() const;
	String Wma8() const;
	String Wma9() const;
	String Wmv3() const;
	String Wvc1() const;
	String Yuy2() const;
	String Yv12() const;
};

template <typename T>
struct impl_IH264ProfileIdsStatics
{
	int ConstrainedBaseline() const;
	int Baseline() const;
	int Extended() const;
	int Main() const;
	int High() const;
	int High10() const;
	int High422() const;
	int High444() const;
	int StereoHigh() const;
	int MultiviewHigh() const;
};

template <typename T>
struct impl_IMpeg2ProfileIdsStatics
{
	int Simple() const;
	int Main() const;
	int SignalNoiseRatioScalable() const;
	int SpatiallyScalable() const;
	int High() const;
};

template <typename T>
struct impl_IVideoEncodingProperties2
{
	void ProfileId(int value) const;
	int ProfileId() const;
};

template <typename T>
struct impl_IVideoEncodingPropertiesStatics
{
	Windows::Media::MediaProperties::VideoEncodingProperties CreateH264() const;
	Windows::Media::MediaProperties::VideoEncodingProperties CreateMpeg2() const;
	Windows::Media::MediaProperties::VideoEncodingProperties CreateUncompressed(String const & subtype, unsigned width, unsigned height) const;
	template <unsigned S0> Windows::Media::MediaProperties::VideoEncodingProperties CreateUncompressed(wchar_t const (&subtype)[S0], unsigned width, unsigned height) const;
};

template <typename T>
struct impl_IImageEncodingProperties
{
	void Width(unsigned value) const;
	unsigned Width() const;
	void Height(unsigned value) const;
	unsigned Height() const;
};

template <typename T>
struct impl_IImageEncodingPropertiesStatics
{
	Windows::Media::MediaProperties::ImageEncodingProperties CreateJpeg() const;
	Windows::Media::MediaProperties::ImageEncodingProperties CreatePng() const;
	Windows::Media::MediaProperties::ImageEncodingProperties CreateJpegXR() const;
};

template <typename T>
struct impl_IImageEncodingPropertiesStatics2
{
	Windows::Media::MediaProperties::ImageEncodingProperties CreateUncompressed(Windows::Media::MediaProperties::MediaPixelFormat format) const;
	Windows::Media::MediaProperties::ImageEncodingProperties CreateBmp() const;
};

template <typename T>
struct impl_IContainerEncodingProperties
{
};

template <typename T>
struct impl_IMediaEncodingProfileStatics
{
	Windows::Media::MediaProperties::MediaEncodingProfile CreateM4a(Windows::Media::MediaProperties::AudioEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateMp3(Windows::Media::MediaProperties::AudioEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateWma(Windows::Media::MediaProperties::AudioEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateMp4(Windows::Media::MediaProperties::VideoEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateWmv(Windows::Media::MediaProperties::VideoEncodingQuality quality) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> CreateFromFileAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> CreateFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream) const;
};

template <typename T>
struct impl_IMediaEncodingProfileStatics2
{
	Windows::Media::MediaProperties::MediaEncodingProfile CreateWav(Windows::Media::MediaProperties::AudioEncodingQuality quality) const;
	Windows::Media::MediaProperties::MediaEncodingProfile CreateAvi(Windows::Media::MediaProperties::VideoEncodingQuality quality) const;
};

template <typename T>
struct impl_IMediaEncodingProfile
{
	void Audio(Windows::Media::MediaProperties::AudioEncodingProperties const & value) const;
	Windows::Media::MediaProperties::AudioEncodingProperties Audio() const;
	void Video(Windows::Media::MediaProperties::VideoEncodingProperties const & value) const;
	Windows::Media::MediaProperties::VideoEncodingProperties Video() const;
	void Container(Windows::Media::MediaProperties::ContainerEncodingProperties const & value) const;
	Windows::Media::MediaProperties::ContainerEncodingProperties Container() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

template <typename T>
struct impl_ISourceChangeRequestedEventArgs
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType Stream() const;
	String Title() const;
	String Author() const;
	String Album() const;
	String Genre() const;
	String Description() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Date() const;
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
	Windows::Foundation::IReference<unsigned> Rating() const;
	Windows::Foundation::Collections::IMapView<String, IInspectable> Properties() const;
};

template <typename T>
struct impl_IPlaybackRateChangeRequestedEventArgs
{
	double Rate() const;
};

template <typename T>
struct impl_ICurrentTimeChangeRequestedEventArgs
{
	Windows::Foundation::TimeSpan Time() const;
};

template <typename T>
struct impl_IMuteChangeRequestedEventArgs
{
	bool Mute() const;
};

template <typename T>
struct impl_IVolumeChangeRequestedEventArgs
{
	double Volume() const;
};

template <typename T>
struct impl_IPlayToReceiver
{
	EventRegistrationToken PlayRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken PlayRequested(F handler) const;
	void PlayRequested(EventRegistrationToken token) const;
	EventRegistrationToken PauseRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken PauseRequested(F handler) const;
	void PauseRequested(EventRegistrationToken token) const;
	EventRegistrationToken SourceChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::SourceChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SourceChangeRequested(F handler) const;
	void SourceChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken PlaybackRateChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PlaybackRateChangeRequested(F handler) const;
	void PlaybackRateChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken CurrentTimeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CurrentTimeChangeRequested(F handler) const;
	void CurrentTimeChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken MuteChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::MuteChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken MuteChangeRequested(F handler) const;
	void MuteChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken VolumeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::VolumeChangeRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VolumeChangeRequested(F handler) const;
	void VolumeChangeRequested(EventRegistrationToken token) const;
	EventRegistrationToken TimeUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken TimeUpdateRequested(F handler) const;
	void TimeUpdateRequested(EventRegistrationToken token) const;
	EventRegistrationToken StopRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken StopRequested(F handler) const;
	void StopRequested(EventRegistrationToken token) const;
	void NotifyVolumeChange(double volume, bool mute) const;
	void NotifyRateChange(double rate) const;
	void NotifyLoadedMetadata() const;
	void NotifyTimeUpdate(Windows::Foundation::TimeSpan const & currentTime) const;
	void NotifyDurationChange(Windows::Foundation::TimeSpan const & duration) const;
	void NotifySeeking() const;
	void NotifySeeked() const;
	void NotifyPaused() const;
	void NotifyPlaying() const;
	void NotifyEnded() const;
	void NotifyError() const;
	void NotifyStopped() const;
	String FriendlyName() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	void SupportsImage(bool value) const;
	bool SupportsImage() const;
	void SupportsAudio(bool value) const;
	bool SupportsAudio() const;
	void SupportsVideo(bool value) const;
	bool SupportsVideo() const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
	Windows::Foundation::IAsyncAction StartAsync() const;
	Windows::Foundation::IAsyncAction StopAsync() const;
};

template <typename T>
struct impl_IPlayToSource
{
	Windows::Media::PlayTo::PlayToConnection Connection() const;
	Windows::Media::PlayTo::PlayToSource Next() const;
	void Next(Windows::Media::PlayTo::PlayToSource const & value) const;
	void PlayNext() const;
};

template <typename T>
struct impl_IPlayToSourceWithPreferredSourceUri
{
	Windows::Foundation::Uri PreferredSourceUri() const;
	void PreferredSourceUri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_IPlayToConnectionStateChangedEventArgs
{
	Windows::Media::PlayTo::PlayToConnectionState PreviousState() const;
	Windows::Media::PlayTo::PlayToConnectionState CurrentState() const;
};

template <typename T>
struct impl_IPlayToConnectionTransferredEventArgs
{
	Windows::Media::PlayTo::PlayToSource PreviousSource() const;
	Windows::Media::PlayTo::PlayToSource CurrentSource() const;
};

template <typename T>
struct impl_IPlayToConnectionErrorEventArgs
{
	Windows::Media::PlayTo::PlayToConnectionError Code() const;
	String Message() const;
};

template <typename T>
struct impl_IPlayToConnection
{
	Windows::Media::PlayTo::PlayToConnectionState State() const;
	EventRegistrationToken StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken StateChanged(F handler) const;
	void StateChanged(EventRegistrationToken token) const;
	EventRegistrationToken Transferred(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Transferred(F handler) const;
	void Transferred(EventRegistrationToken token) const;
	EventRegistrationToken Error(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionErrorEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Error(F handler) const;
	void Error(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPlayToSourceSelectedEventArgs
{
	String FriendlyName() const;
	Windows::Storage::Streams::IRandomAccessStreamWithContentType Icon() const;
	bool SupportsImage() const;
	bool SupportsAudio() const;
	bool SupportsVideo() const;
};

template <typename T>
struct impl_IPlayToSourceDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IPlayToSourceRequest
{
	Windows::Foundation::DateTime Deadline() const;
	void DisplayErrorString(String const & errorString) const;
	template <unsigned S0> void DisplayErrorString(wchar_t const (&errorString)[S0]) const;
	Windows::Media::PlayTo::PlayToSourceDeferral GetDeferral() const;
	void SetSource(Windows::Media::PlayTo::PlayToSource const & value) const;
};

template <typename T>
struct impl_IPlayToSourceRequestedEventArgs
{
	Windows::Media::PlayTo::PlayToSourceRequest SourceRequest() const;
};

template <typename T>
struct impl_IPlayToManager
{
	EventRegistrationToken SourceRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SourceRequested(F handler) const;
	void SourceRequested(EventRegistrationToken token) const;
	EventRegistrationToken SourceSelected(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceSelectedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SourceSelected(F handler) const;
	void SourceSelected(EventRegistrationToken token) const;
	void DefaultSourceSelection(bool value) const;
	bool DefaultSourceSelection() const;
};

template <typename T>
struct impl_IPlayToManagerStatics
{
	Windows::Media::PlayTo::PlayToManager GetForCurrentView() const;
	void ShowPlayToUI() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

template <typename T>
struct impl_IPlaylist
{
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFile> Files() const;
	Windows::Foundation::IAsyncAction SaveAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, String const & desiredName, Windows::Storage::NameCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, wchar_t const (&desiredName)[S0], Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, String const & desiredName, Windows::Storage::NameCollisionOption option, Windows::Media::Playlists::PlaylistFormat playlistFormat) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, wchar_t const (&desiredName)[S0], Windows::Storage::NameCollisionOption option, Windows::Media::Playlists::PlaylistFormat playlistFormat) const;
};

template <typename T>
struct impl_IPlaylistStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> LoadAsync(Windows::Storage::IStorageFile const & file) const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

template <typename T>
struct impl_IServiceRequestedEventHandler
{
	void Invoke(Windows::Media::Protection::MediaProtectionManager const & sender, Windows::Media::Protection::ServiceRequestedEventArgs const & e) const;
};

template <typename T>
struct impl_IRebootNeededEventHandler
{
	void Invoke(Windows::Media::Protection::MediaProtectionManager const & sender) const;
};

template <typename T>
struct impl_IComponentLoadFailedEventHandler
{
	void Invoke(Windows::Media::Protection::MediaProtectionManager const & sender, Windows::Media::Protection::ComponentLoadFailedEventArgs const & e) const;
};

template <typename T>
struct impl_IMediaProtectionManager
{
	EventRegistrationToken ServiceRequested(Windows::Media::Protection::IServiceRequestedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken ServiceRequested(F handler) const;
	void ServiceRequested(EventRegistrationToken cookie) const;
	EventRegistrationToken RebootNeeded(Windows::Media::Protection::IRebootNeededEventHandler const & handler) const;
	template <typename F> EventRegistrationToken RebootNeeded(F handler) const;
	void RebootNeeded(EventRegistrationToken cookie) const;
	EventRegistrationToken ComponentLoadFailed(Windows::Media::Protection::IComponentLoadFailedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken ComponentLoadFailed(F handler) const;
	void ComponentLoadFailed(EventRegistrationToken cookie) const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
};

template <typename T>
struct impl_IMediaProtectionServiceCompletion
{
	void Complete(bool success) const;
};

template <typename T>
struct impl_IServiceRequestedEventArgs
{
	Windows::Media::Protection::IMediaProtectionServiceRequest Request() const;
	Windows::Media::Protection::MediaProtectionServiceCompletion Completion() const;
};

template <typename T>
struct impl_IMediaProtectionServiceRequest
{
	GUID ProtectionSystem() const;
	GUID Type() const;
};

template <typename T>
struct impl_IComponentLoadFailedEventArgs
{
	Windows::Media::Protection::RevocationAndRenewalInformation Information() const;
	Windows::Media::Protection::MediaProtectionServiceCompletion Completion() const;
};

template <typename T>
struct impl_IRevocationAndRenewalInformation
{
	Windows::Foundation::Collections::IVector<Windows::Media::Protection::RevocationAndRenewalItem> Items() const;
};

template <typename T>
struct impl_IRevocationAndRenewalItem
{
	Windows::Media::Protection::RevocationAndRenewalReasons Reasons() const;
	String HeaderHash() const;
	String PublicKeyHash() const;
	String Name() const;
	String RenewalId() const;
};

template <typename T>
struct impl_IComponentRenewalStatics
{
	Windows::Foundation::IAsyncOperationWithProgress<Modern::Windows::Media::Protection::RenewalStatus, unsigned> RenewSystemComponentsAsync(Windows::Media::Protection::RevocationAndRenewalInformation const & information) const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

template <typename T>
struct impl_IVoiceInformation
{
	String DisplayName() const;
	String Id() const;
	String Language() const;
	String Description() const;
	Windows::Media::SpeechSynthesis::VoiceGender Gender() const;
};

template <typename T>
struct impl_IInstalledVoicesStatic
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> AllVoices() const;
	Windows::Media::SpeechSynthesis::VoiceInformation DefaultVoice() const;
};

template <typename T>
struct impl_ISpeechSynthesisStream
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> Markers() const;
};

template <typename T>
struct impl_ISpeechSynthesizer
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> SynthesizeTextToStreamAsync(String const & text) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> SynthesizeTextToStreamAsync(wchar_t const (&text)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> SynthesizeSsmlToStreamAsync(String const & Ssml) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> SynthesizeSsmlToStreamAsync(wchar_t const (&Ssml)[S0]) const;
	void Voice(Windows::Media::SpeechSynthesis::VoiceInformation const & value) const;
	Windows::Media::SpeechSynthesis::VoiceInformation Voice() const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

template <typename T>
struct impl_IDeviceControllerFinderHandler
{
	void Invoke(Windows::Media::Streaming::IDeviceController const & sender, String const & uniqueDeviceName, Windows::Media::Streaming::IBasicDevice const & device) const;
	template <unsigned S0> void Invoke(Windows::Media::Streaming::IDeviceController const & sender, wchar_t const (&uniqueDeviceName)[S0], Windows::Media::Streaming::IBasicDevice const & device) const;
};

template <typename T>
struct impl_IConnectionStatusHandler
{
	void Invoke(Windows::Media::Streaming::IBasicDevice const & sender, Windows::Media::Streaming::ConnectionStatus arg) const;
};

template <typename T>
struct impl_IDeviceController
{
	Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IBasicDevice> CachedDevices() const;
	void AddDevice(String const & uniqueDeviceName) const;
	template <unsigned S0> void AddDevice(wchar_t const (&uniqueDeviceName)[S0]) const;
	void RemoveDevice(Windows::Media::Streaming::IBasicDevice const & device) const;
	EventRegistrationToken DeviceArrival(Windows::Media::Streaming::IDeviceControllerFinderHandler const & handler) const;
	template <typename F> EventRegistrationToken DeviceArrival(F handler) const;
	void DeviceArrival(EventRegistrationToken token) const;
	EventRegistrationToken DeviceDeparture(Windows::Media::Streaming::IDeviceControllerFinderHandler const & handler) const;
	template <typename F> EventRegistrationToken DeviceDeparture(F handler) const;
	void DeviceDeparture(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IBasicDevice
{
	String FriendlyName() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	String ManufacturerName() const;
	String ManufacturerUrl() const;
	String UniqueDeviceName() const;
	String ModelName() const;
	String ModelNumber() const;
	String ModelUrl() const;
	String Description() const;
	String SerialNumber() const;
	String PresentationUrl() const;
	Windows::Foundation::Collections::IVector<String> RemoteStreamingUrls() const;
	Windows::Foundation::Collections::IVector<String> PhysicalAddresses() const;
	Windows::Foundation::Collections::IVector<String> IpAddresses() const;
	bool CanWakeDevices() const;
	bool DiscoveredOnCurrentNetwork() const;
	Windows::Media::Streaming::DeviceTypes Type() const;
	Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IDeviceIcon> Icons() const;
	Windows::Media::Streaming::ConnectionStatus ConnectionStatus() const;
	EventRegistrationToken ConnectionStatusChanged(Windows::Media::Streaming::IConnectionStatusHandler const & handler) const;
	template <typename F> EventRegistrationToken ConnectionStatusChanged(F handler) const;
	void ConnectionStatusChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IActiveBasicDevice
{
	unsigned MaxVolume() const;
	bool IsMuteSupported() const;
	bool IsSetNextSourceSupported() const;
	bool IsAudioSupported() const;
	bool IsVideoSupported() const;
	bool IsImageSupported() const;
	bool IsSearchSupported() const;
	String GetCachedSinkProtocolInfo() const;
	void SetCachedSinkProtocolInfo(String const & value) const;
	template <unsigned S0> void SetCachedSinkProtocolInfo(wchar_t const (&value)[S0]) const;
	String GetCachedExtraSinkProtocolInfo() const;
	unsigned long long GetEffectiveBandwidth(bool transmitSpeed) const;
	unsigned long long GetCachedBitrateMeasurement(GUID physicalNetworkInterface) const;
	void SetCachedBitrateMeasurement(GUID physicalNetworkInterface, unsigned long long bitrate) const;
	GUID LogicalNetworkInterface() const;
	GUID PhysicalNetworkInterface() const;
	void NotifyStreamingStatus(bool fIsStreaming) const;
};

template <typename T>
struct impl_IDeviceIcon
{
	unsigned Width() const;
	unsigned Height() const;
	String ContentType() const;
	Windows::Storage::Streams::IRandomAccessStreamWithContentType Stream() const;
};

template <typename T>
struct impl_IActiveBasicDeviceStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> CreateBasicDeviceAsync(String const & deviceIdentifier, Windows::Media::Streaming::DeviceTypes type) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> CreateBasicDeviceAsync(wchar_t const (&deviceIdentifier)[S0], Windows::Media::Streaming::DeviceTypes type) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> CloneBasicDeviceAsync(Windows::Media::Streaming::IBasicDevice const & basicDevice) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> GetDevicesOnMatchingNetworkAsync(Windows::Media::Streaming::IActiveBasicDevice const & server, Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool optimizeForProxying, bool allowChangeRendererNetwork) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> CreateDevicesOnMatchingNetworkAsync(String const & serverUDN, Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool optimizeForProxying, bool allowChangeRendererNetwork) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> CreateDevicesOnMatchingNetworkAsync(wchar_t const (&serverUDN)[S0], Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool optimizeForProxying, bool allowChangeRendererNetwork) const;
};

template <typename T>
struct impl_IDevicePair
{
	Windows::Media::Streaming::ActiveBasicDevice Server() const;
	Windows::Media::Streaming::ActiveBasicDevice Renderer() const;
};

template <typename T>
struct impl_ITransportParametersUpdateHandler
{
	void Invoke(Windows::Media::Streaming::IMediaRenderer const & sender, Windows::Media::Streaming::ITransportParameters const & arg) const;
};

template <typename T>
struct impl_IRenderingParametersUpdateHandler
{
	void Invoke(Windows::Media::Streaming::IMediaRenderer const & sender, Windows::Media::Streaming::RenderingParameters const & arg) const;
};

template <typename T>
struct impl_IMediaRenderer
{
	bool IsAudioSupported() const;
	bool IsVideoSupported() const;
	bool IsImageSupported() const;
	Windows::Media::Streaming::IMediaRendererActionInformation ActionInformation() const;
	Windows::Foundation::IAsyncOperation<unsigned> SetSourceFromUriAsync(String const & URI) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<unsigned> SetSourceFromUriAsync(wchar_t const (&URI)[S0]) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetSourceFromStreamAsync(IInspectable const & stream) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetSourceFromMediaSourceAsync(IInspectable const & mediaSource) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetNextSourceFromUriAsync(String const & URI) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<unsigned> SetNextSourceFromUriAsync(wchar_t const (&URI)[S0]) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetNextSourceFromStreamAsync(IInspectable const & stream) const;
	Windows::Foundation::IAsyncOperation<unsigned> SetNextSourceFromMediaSourceAsync(IInspectable const & mediaSource) const;
	Windows::Foundation::IAsyncAction PlayAsync() const;
	Windows::Foundation::IAsyncAction PlayAtSpeedAsync(Windows::Media::Streaming::PlaySpeed const & playSpeed) const;
	Windows::Foundation::IAsyncAction StopAsync() const;
	Windows::Foundation::IAsyncAction PauseAsync() const;
	Windows::Foundation::IAsyncOperation<bool> GetMuteAsync() const;
	Windows::Foundation::IAsyncAction SetMuteAsync(bool mute) const;
	Windows::Foundation::IAsyncOperation<unsigned> GetVolumeAsync() const;
	Windows::Foundation::IAsyncAction SetVolumeAsync(unsigned volume) const;
	Windows::Foundation::IAsyncAction SeekAsync(Windows::Foundation::TimeSpan const & target) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Media::Streaming::TransportInformation> GetTransportInformationAsync() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Media::Streaming::PositionInformation> GetPositionInformationAsync() const;
	EventRegistrationToken TransportParametersUpdate(Windows::Media::Streaming::ITransportParametersUpdateHandler const & handler) const;
	template <typename F> EventRegistrationToken TransportParametersUpdate(F handler) const;
	void TransportParametersUpdate(EventRegistrationToken token) const;
	EventRegistrationToken RenderingParametersUpdate(Windows::Media::Streaming::IRenderingParametersUpdateHandler const & handler) const;
	template <typename F> EventRegistrationToken RenderingParametersUpdate(F handler) const;
	void RenderingParametersUpdate(EventRegistrationToken token) const;
	Windows::Foundation::IAsyncAction NextAsync() const;
};

template <typename T>
struct impl_IMediaRendererActionInformation
{
	bool IsMuteAvailable() const;
	bool IsPauseAvailable() const;
	bool IsPlayAvailable() const;
	bool IsSeekAvailable() const;
	bool IsSetNextSourceAvailable() const;
	bool IsStopAvailable() const;
	bool IsVolumeAvailable() const;
	Windows::Foundation::Collections::IVector<Modern::Windows::Media::Streaming::PlaySpeed> PlaySpeeds() const;
};

template <typename T>
struct impl_ITransportParameters
{
	Windows::Media::Streaming::IMediaRendererActionInformation ActionInformation() const;
	Windows::Media::Streaming::TrackInformation TrackInformation() const;
	Windows::Media::Streaming::TransportInformation TransportInformation() const;
};

template <typename T>
struct impl_IMediaRendererFactory
{
	Windows::Media::Streaming::CreateMediaRendererOperation CreateMediaRendererAsync(String const & deviceIdentifier) const;
	template <unsigned S0> Windows::Media::Streaming::CreateMediaRendererOperation CreateMediaRendererAsync(wchar_t const (&deviceIdentifier)[S0]) const;
	Windows::Media::Streaming::CreateMediaRendererOperation CreateMediaRendererFromBasicDeviceAsync(Windows::Media::Streaming::IBasicDevice const & basicDevice) const;
};

template <typename T>
struct impl_IStreamSelectorStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> SelectBestStreamAsync(Windows::Storage::StorageFile const & storageFile, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> GetStreamPropertiesAsync(Windows::Storage::StorageFile const & storageFile, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> SelectBestStreamFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> GetStreamPropertiesFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

template <typename T>
struct impl_IMediaTranscoder2
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> PrepareMediaStreamSourceTranscodeAsync(Windows::Media::Core::IMediaSource const & source, Windows::Storage::Streams::IRandomAccessStream const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const;
	void VideoProcessingAlgorithm(Windows::Media::Transcoding::MediaVideoProcessingAlgorithm value) const;
	Windows::Media::Transcoding::MediaVideoProcessingAlgorithm VideoProcessingAlgorithm() const;
};

template <typename T>
struct impl_IMediaTranscoder
{
	void TrimStartTime(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan TrimStartTime() const;
	void TrimStopTime(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan TrimStopTime() const;
	void AlwaysReencode(bool value) const;
	bool AlwaysReencode() const;
	void HardwareAccelerationEnabled(bool value) const;
	bool HardwareAccelerationEnabled() const;
	void AddAudioEffect(String const & activatableClassId) const;
	template <unsigned S0> void AddAudioEffect(wchar_t const (&activatableClassId)[S0]) const;
	void AddAudioEffect(String const & activatableClassId, bool effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void AddAudioEffect(wchar_t const (&activatableClassId)[S0], bool effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void AddVideoEffect(String const & activatableClassId) const;
	template <unsigned S0> void AddVideoEffect(wchar_t const (&activatableClassId)[S0]) const;
	void AddVideoEffect(String const & activatableClassId, bool effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	template <unsigned S0> void AddVideoEffect(wchar_t const (&activatableClassId)[S0], bool effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const;
	void ClearEffects() const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> PrepareFileTranscodeAsync(Windows::Storage::IStorageFile const & source, Windows::Storage::IStorageFile const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const;
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> PrepareStreamTranscodeAsync(Windows::Storage::Streams::IRandomAccessStream const & source, Windows::Storage::Streams::IRandomAccessStream const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const;
};

template <typename T>
struct impl_IPrepareTranscodeResult
{
	bool CanTranscode() const;
	Windows::Media::Transcoding::TranscodeFailureReason FailureReason() const;
	Windows::Foundation::IAsyncActionWithProgress<double> TranscodeAsync() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking {

template <typename T>
struct impl_IHostNameStatics
{
	int Compare(String const & value1, String const & value2) const;
	template <unsigned S0, unsigned S1> int Compare(wchar_t const (&value1)[S0], wchar_t const (&value2)[S1]) const;
};

template <typename T>
struct impl_IHostName
{
	Windows::Networking::Connectivity::IPInformation IPInformation() const;
	String RawName() const;
	String DisplayName() const;
	String CanonicalName() const;
	Windows::Networking::HostNameType Type() const;
	bool IsEqual(Windows::Networking::HostName const & hostName) const;
};

template <typename T>
struct impl_IHostNameFactory
{
	Windows::Networking::HostName CreateHostName(String const & hostName) const;
	template <unsigned S0> Windows::Networking::HostName CreateHostName(wchar_t const (&hostName)[S0]) const;
};

template <typename T>
struct impl_IEndpointPair
{
	Windows::Networking::HostName LocalHostName() const;
	void LocalHostName(Windows::Networking::HostName const & value) const;
	String LocalServiceName() const;
	void LocalServiceName(String const & value) const;
	template <unsigned S0> void LocalServiceName(wchar_t const (&value)[S0]) const;
	Windows::Networking::HostName RemoteHostName() const;
	void RemoteHostName(Windows::Networking::HostName const & value) const;
	String RemoteServiceName() const;
	void RemoteServiceName(String const & value) const;
	template <unsigned S0> void RemoteServiceName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IEndpointPairFactory
{
	Windows::Networking::EndpointPair CreateEndpointPair(Windows::Networking::HostName const & localHostName, String const & localServiceName, Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0, unsigned S1> Windows::Networking::EndpointPair CreateEndpointPair(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0], Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S1]) const;
};

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

template <typename T>
struct impl_IBackgroundTransferBase
{
	void SetRequestHeader(String const & headerName, String const & headerValue) const;
	template <unsigned S0, unsigned S1> void SetRequestHeader(wchar_t const (&headerName)[S0], wchar_t const (&headerValue)[S1]) const;
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & credential) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & credential) const;
	String Method() const;
	void Method(String const & value) const;
	template <unsigned S0> void Method(wchar_t const (&value)[S0]) const;
	Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy CostPolicy() const;
	void CostPolicy(Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy value) const;
};

template <typename T>
struct impl_IUnconstrainedTransferRequestResult
{
	bool IsUnconstrained() const;
};

template <typename T>
struct impl_IBackgroundDownloaderUserConsent
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> RequestUnconstrainedDownloadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::DownloadOperation> const & operations) const;
};

template <typename T>
struct impl_IBackgroundUploaderUserConsent
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> RequestUnconstrainedUploadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::UploadOperation> const & operations) const;
};

template <typename T>
struct impl_IBackgroundDownloader
{
	Windows::Networking::BackgroundTransfer::DownloadOperation CreateDownload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile) const;
	Windows::Networking::BackgroundTransfer::DownloadOperation CreateDownload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile, Windows::Storage::IStorageFile const & requestBodyFile) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::DownloadOperation> CreateDownloadAsync(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile, Windows::Storage::Streams::IInputStream const & requestBodyStream) const;
};

template <typename T>
struct impl_IBackgroundDownloader2
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup TransferGroup() const;
	void TransferGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & value) const;
	Windows::UI::Notifications::ToastNotification SuccessToastNotification() const;
	void SuccessToastNotification(Windows::UI::Notifications::ToastNotification const & value) const;
	Windows::UI::Notifications::ToastNotification FailureToastNotification() const;
	void FailureToastNotification(Windows::UI::Notifications::ToastNotification const & value) const;
	Windows::UI::Notifications::TileNotification SuccessTileNotification() const;
	void SuccessTileNotification(Windows::UI::Notifications::TileNotification const & value) const;
	Windows::UI::Notifications::TileNotification FailureTileNotification() const;
	void FailureTileNotification(Windows::UI::Notifications::TileNotification const & value) const;
};

template <typename T>
struct impl_IBackgroundUploader
{
	Windows::Networking::BackgroundTransfer::UploadOperation CreateUpload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & sourceFile) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadFromStreamAsync(Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IInputStream const & sourceStream) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, String const & subType) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, wchar_t const (&subType)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, String const & subType, String const & boundary) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, wchar_t const (&subType)[S0], wchar_t const (&boundary)[S1]) const;
};

template <typename T>
struct impl_IBackgroundUploader2
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup TransferGroup() const;
	void TransferGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & value) const;
	Windows::UI::Notifications::ToastNotification SuccessToastNotification() const;
	void SuccessToastNotification(Windows::UI::Notifications::ToastNotification const & value) const;
	Windows::UI::Notifications::ToastNotification FailureToastNotification() const;
	void FailureToastNotification(Windows::UI::Notifications::ToastNotification const & value) const;
	Windows::UI::Notifications::TileNotification SuccessTileNotification() const;
	void SuccessTileNotification(Windows::UI::Notifications::TileNotification const & value) const;
	Windows::UI::Notifications::TileNotification FailureTileNotification() const;
	void FailureTileNotification(Windows::UI::Notifications::TileNotification const & value) const;
};

template <typename T>
struct impl_IBackgroundTransferOperation
{
	GUID Guid() const;
	Windows::Foundation::Uri RequestedUri() const;
	String Method() const;
	Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy CostPolicy() const;
	void CostPolicy(Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy value) const;
	Windows::Storage::Streams::IInputStream GetResultStreamAt(unsigned long long position) const;
	Windows::Networking::BackgroundTransfer::ResponseInformation GetResponseInformation() const;
};

template <typename T>
struct impl_IBackgroundTransferOperationPriority
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferPriority Priority() const;
	void Priority(Windows::Networking::BackgroundTransfer::BackgroundTransferPriority value) const;
};

template <typename T>
struct impl_IDownloadOperation
{
	Windows::Storage::IStorageFile ResultFile() const;
	Windows::Networking::BackgroundTransfer::BackgroundDownloadProgress Progress() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> StartAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> AttachAsync() const;
	void Pause() const;
	void Resume() const;
};

template <typename T>
struct impl_IDownloadOperation2
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup TransferGroup() const;
};

template <typename T>
struct impl_IUploadOperation
{
	Windows::Storage::IStorageFile SourceFile() const;
	Windows::Networking::BackgroundTransfer::BackgroundUploadProgress Progress() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> StartAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> AttachAsync() const;
};

template <typename T>
struct impl_IUploadOperation2
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup TransferGroup() const;
};

template <typename T>
struct impl_IBackgroundDownloaderStaticMethods
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> GetCurrentDownloadsAsync() const;
};

template <typename T>
struct impl_IBackgroundDownloaderStaticMethods2
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> GetCurrentDownloadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group) const;
};

template <typename T>
struct impl_IBackgroundUploaderStaticMethods
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> GetCurrentUploadsAsync() const;
};

template <typename T>
struct impl_IBackgroundUploaderStaticMethods2
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> GetCurrentUploadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group) const;
};

template <typename T>
struct impl_IResponseInformation
{
	bool IsResumable() const;
	Windows::Foundation::Uri ActualUri() const;
	unsigned StatusCode() const;
	Windows::Foundation::Collections::IMapView<String, String> Headers() const;
};

template <typename T>
struct impl_IBackgroundTransferErrorStaticMethods
{
	Windows::Web::WebErrorStatus GetStatus(int hresult) const;
};

template <typename T>
struct impl_IBackgroundTransferContentPart
{
	void SetHeader(String const & headerName, String const & headerValue) const;
	template <unsigned S0, unsigned S1> void SetHeader(wchar_t const (&headerName)[S0], wchar_t const (&headerValue)[S1]) const;
	void SetText(String const & value) const;
	template <unsigned S0> void SetText(wchar_t const (&value)[S0]) const;
	void SetFile(Windows::Storage::IStorageFile const & value) const;
};

template <typename T>
struct impl_IBackgroundTransferContentPartFactory
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart CreateWithName(String const & name) const;
	template <unsigned S0> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart CreateWithName(wchar_t const (&name)[S0]) const;
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart CreateWithNameAndFileName(String const & name, String const & fileName) const;
	template <unsigned S0, unsigned S1> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart CreateWithNameAndFileName(wchar_t const (&name)[S0], wchar_t const (&fileName)[S1]) const;
};

template <typename T>
struct impl_IBackgroundTransferGroup
{
	String Name() const;
	Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior TransferBehavior() const;
	void TransferBehavior(Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior value) const;
};

template <typename T>
struct impl_IBackgroundTransferGroupStatics
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup CreateGroup(String const & name) const;
	template <unsigned S0> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup CreateGroup(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_IContentPrefetcherTime
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> LastSuccessfulPrefetchTime() const;
};

template <typename T>
struct impl_IContentPrefetcher
{
	Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> ContentUris() const;
	void IndirectContentUri(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri IndirectContentUri() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

template <typename T>
struct impl_INetworkStatusChangedEventHandler
{
	void Invoke(IInspectable const & sender) const;
};

template <typename T>
struct impl_IDataPlanUsage
{
	unsigned MegabytesUsed() const;
	Windows::Foundation::DateTime LastSyncTime() const;
};

template <typename T>
struct impl_IDataPlanStatus
{
	Windows::Networking::Connectivity::DataPlanUsage DataPlanUsage() const;
	Windows::Foundation::IReference<unsigned> DataLimitInMegabytes() const;
	Windows::Foundation::IReference<unsigned long long> InboundBitsPerSecond() const;
	Windows::Foundation::IReference<unsigned long long> OutboundBitsPerSecond() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> NextBillingCycle() const;
	Windows::Foundation::IReference<unsigned> MaxTransferSizeInMegabytes() const;
};

template <typename T>
struct impl_IConnectionCost
{
	Windows::Networking::Connectivity::NetworkCostType NetworkCostType() const;
	bool Roaming() const;
	bool OverDataLimit() const;
	bool ApproachingDataLimit() const;
};

template <typename T>
struct impl_INetworkSecuritySettings
{
	Windows::Networking::Connectivity::NetworkAuthenticationType NetworkAuthenticationType() const;
	Windows::Networking::Connectivity::NetworkEncryptionType NetworkEncryptionType() const;
};

template <typename T>
struct impl_IConnectionProfile
{
	String ProfileName() const;
	Windows::Networking::Connectivity::NetworkConnectivityLevel GetNetworkConnectivityLevel() const;
	Windows::Foundation::Collections::IVectorView<String> GetNetworkNames() const;
	Windows::Networking::Connectivity::ConnectionCost GetConnectionCost() const;
	Windows::Networking::Connectivity::DataPlanStatus GetDataPlanStatus() const;
	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Networking::Connectivity::NetworkSecuritySettings NetworkSecuritySettings() const;
};

template <typename T>
struct impl_IWwanConnectionProfileDetails
{
	String HomeProviderId() const;
	String AccessPointName() const;
	Windows::Networking::Connectivity::WwanNetworkRegistrationState GetNetworkRegistrationState() const;
	Windows::Networking::Connectivity::WwanDataClass GetCurrentDataClass() const;
};

template <typename T>
struct impl_IWlanConnectionProfileDetails
{
	String GetConnectedSsid() const;
};

template <typename T>
struct impl_IConnectivityInterval
{
	Windows::Foundation::DateTime StartTime() const;
	Windows::Foundation::TimeSpan ConnectionDuration() const;
};

template <typename T>
struct impl_INetworkUsage
{
	unsigned long long BytesSent() const;
	unsigned long long BytesReceived() const;
	Windows::Foundation::TimeSpan ConnectionDuration() const;
};

template <typename T>
struct impl_IConnectionProfile2
{
	bool IsWwanConnectionProfile() const;
	bool IsWlanConnectionProfile() const;
	Windows::Networking::Connectivity::WwanConnectionProfileDetails WwanConnectionProfileDetails() const;
	Windows::Networking::Connectivity::WlanConnectionProfileDetails WlanConnectionProfileDetails() const;
	Windows::Foundation::IReference<GUID> ServiceProviderGuid() const;
	Windows::Foundation::IReference<byte> GetSignalBars() const;
	Windows::Networking::Connectivity::DomainConnectivityLevel GetDomainConnectivityLevel() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage>> GetNetworkUsageAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::DataUsageGranularity granularity, Windows::Networking::Connectivity::NetworkUsageStates const & states) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval>> GetConnectivityIntervalsAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::NetworkUsageStates const & states) const;
};

template <typename T>
struct impl_ILanIdentifierData
{
	unsigned Type() const;
	Windows::Foundation::Collections::IVectorView<byte> Value() const;
};

template <typename T>
struct impl_ILanIdentifier
{
	Windows::Networking::Connectivity::LanIdentifierData InfrastructureId() const;
	Windows::Networking::Connectivity::LanIdentifierData PortId() const;
	GUID NetworkAdapterId() const;
};

template <typename T>
struct impl_INetworkInformationStatics
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> GetConnectionProfiles() const;
	Windows::Networking::Connectivity::ConnectionProfile GetInternetConnectionProfile() const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> GetLanIdentifiers() const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> GetHostNames() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions sortOptions) const;
	EventRegistrationToken NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler) const;
	template <typename F> EventRegistrationToken NetworkStatusChanged(F networkStatusHandler) const;
	void NetworkStatusChanged(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IConnectionProfileFilter
{
	void IsConnected(bool value) const;
	bool IsConnected() const;
	void IsWwanConnectionProfile(bool value) const;
	bool IsWwanConnectionProfile() const;
	void IsWlanConnectionProfile(bool value) const;
	bool IsWlanConnectionProfile() const;
	void NetworkCostType(Windows::Networking::Connectivity::NetworkCostType value) const;
	Windows::Networking::Connectivity::NetworkCostType NetworkCostType() const;
	void ServiceProviderGuid(Windows::Foundation::IReference<GUID> const & value) const;
	Windows::Foundation::IReference<GUID> ServiceProviderGuid() const;
};

template <typename T>
struct impl_INetworkInformationStatics2
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter) const;
};

template <typename T>
struct impl_INetworkItem
{
	GUID NetworkId() const;
	Windows::Networking::Connectivity::NetworkTypes GetNetworkTypes() const;
};

template <typename T>
struct impl_INetworkAdapter
{
	unsigned long long OutboundMaxBitsPerSecond() const;
	unsigned long long InboundMaxBitsPerSecond() const;
	unsigned IanaInterfaceType() const;
	Windows::Networking::Connectivity::NetworkItem NetworkItem() const;
	GUID NetworkAdapterId() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile> GetConnectedProfileAsync() const;
};

template <typename T>
struct impl_IIPInformation
{
	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Foundation::IReference<byte> PrefixLength() const;
};

template <typename T>
struct impl_IProxyConfiguration
{
	Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> ProxyUris() const;
	bool CanConnectDirectly() const;
};

template <typename T>
struct impl_IConnectionSession
{
	Windows::Networking::Connectivity::ConnectionProfile ConnectionProfile() const;
};

template <typename T>
struct impl_IRoutePolicy
{
	Windows::Networking::Connectivity::ConnectionProfile ConnectionProfile() const;
	Windows::Networking::HostName HostName() const;
	Windows::Networking::DomainNameType HostNameType() const;
};

template <typename T>
struct impl_IRoutePolicyFactory
{
	Windows::Networking::Connectivity::RoutePolicy CreateRoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType type) const;
};

template <typename T>
struct impl_ICellularApnContext
{
	String ProviderId() const;
	void ProviderId(String const & value) const;
	template <unsigned S0> void ProviderId(wchar_t const (&value)[S0]) const;
	String AccessPointName() const;
	void AccessPointName(String const & value) const;
	template <unsigned S0> void AccessPointName(wchar_t const (&value)[S0]) const;
	String UserName() const;
	void UserName(String const & value) const;
	template <unsigned S0> void UserName(wchar_t const (&value)[S0]) const;
	String Password() const;
	void Password(String const & value) const;
	template <unsigned S0> void Password(wchar_t const (&value)[S0]) const;
	bool IsCompressionEnabled() const;
	void IsCompressionEnabled(bool value) const;
	Windows::Networking::Connectivity::CellularApnAuthenticationType AuthenticationType() const;
	void AuthenticationType(Windows::Networking::Connectivity::CellularApnAuthenticationType value) const;
};

template <typename T>
struct impl_IConnectivityManagerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext) const;
	void AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const;
	void RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const;
};

template <typename T>
struct impl_INetworkStateChangeEventDetails
{
	bool HasNewInternetConnectionProfile() const;
	bool HasNewConnectionCost() const;
	bool HasNewNetworkConnectivityLevel() const;
	bool HasNewDomainConnectivityLevel() const;
	bool HasNewHostNameList() const;
	bool HasNewWwanRegistrationState() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

template <typename T>
struct impl_IMobileBroadbandAccountStatics
{
	Windows::Foundation::Collections::IVectorView<String> AvailableNetworkAccountIds() const;
	Windows::Networking::NetworkOperators::MobileBroadbandAccount CreateFromNetworkAccountId(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::MobileBroadbandAccount CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_IMobileBroadbandAccount
{
	String NetworkAccountId() const;
	GUID ServiceProviderGuid() const;
	String ServiceProviderName() const;
	Windows::Networking::NetworkOperators::MobileBroadbandNetwork CurrentNetwork() const;
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation CurrentDeviceInformation() const;
};

template <typename T>
struct impl_IMobileBroadbandAccount2
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> GetConnectionProfiles() const;
};

template <typename T>
struct impl_IMobileBroadbandDeviceInformation
{
	Windows::Networking::NetworkOperators::NetworkDeviceStatus NetworkDeviceStatus() const;
	String Manufacturer() const;
	String Model() const;
	String FirmwareInformation() const;
	Windows::Devices::Sms::CellularClass CellularClass() const;
	Windows::Networking::NetworkOperators::DataClasses DataClasses() const;
	String CustomDataClass() const;
	String MobileEquipmentId() const;
	Windows::Foundation::Collections::IVectorView<String> TelephoneNumbers() const;
	String SubscriberId() const;
	String SimIccId() const;
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceType DeviceType() const;
	String DeviceId() const;
	Windows::Networking::NetworkOperators::MobileBroadbandRadioState CurrentRadioState() const;
};

template <typename T>
struct impl_IMobileBroadbandNetwork
{
	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Networking::NetworkOperators::NetworkRegistrationState NetworkRegistrationState() const;
	unsigned RegistrationNetworkError() const;
	unsigned PacketAttachNetworkError() const;
	unsigned ActivationNetworkError() const;
	String AccessPointName() const;
	Windows::Networking::NetworkOperators::DataClasses RegisteredDataClass() const;
	String RegisteredProviderId() const;
	String RegisteredProviderName() const;
	void ShowConnectionUI() const;
};

template <typename T>
struct impl_INetworkOperatorNotificationEventDetails
{
	Windows::Networking::NetworkOperators::NetworkOperatorEventMessageType NotificationType() const;
	String NetworkAccountId() const;
	byte EncodingType() const;
	String Message() const;
	String RuleId() const;
	Windows::Devices::Sms::ISmsMessage SmsMessage() const;
};

template <typename T>
struct impl_INetworkOperatorTetheringEntitlementCheck
{
	void AuthorizeTethering(bool allow, String const & entitlementFailureReason) const;
	template <unsigned S0> void AuthorizeTethering(bool allow, wchar_t const (&entitlementFailureReason)[S0]) const;
};

template <typename T>
struct impl_INetworkOperatorTetheringAccessPointConfiguration
{
	String Ssid() const;
	void Ssid(String const & value) const;
	template <unsigned S0> void Ssid(wchar_t const (&value)[S0]) const;
	String Passphrase() const;
	void Passphrase(String const & value) const;
	template <unsigned S0> void Passphrase(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_INetworkOperatorTetheringOperationResult
{
	Windows::Networking::NetworkOperators::TetheringOperationStatus Status() const;
	String AdditionalErrorMessage() const;
};

template <typename T>
struct impl_INetworkOperatorTetheringManagerStatics
{
	Windows::Networking::NetworkOperators::TetheringCapability GetTetheringCapability(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::TetheringCapability GetTetheringCapability(wchar_t const (&networkAccountId)[S0]) const;
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager CreateFromNetworkAccountId(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_INetworkOperatorTetheringManager
{
	unsigned MaxClientCount() const;
	unsigned ClientCount() const;
	Windows::Networking::NetworkOperators::TetheringOperationalState TetheringOperationalState() const;
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration GetCurrentAccessPointConfiguration() const;
	Windows::Foundation::IAsyncAction ConfigureAccessPointAsync(Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration const & configuration) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> StartTetheringAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> StopTetheringAsync() const;
};

template <typename T>
struct impl_IMobileBroadbandAccountEventArgs
{
	String NetworkAccountId() const;
};

template <typename T>
struct impl_IMobileBroadbandAccountUpdatedEventArgs
{
	String NetworkAccountId() const;
	bool HasDeviceInformationChanged() const;
	bool HasNetworkChanged() const;
};

template <typename T>
struct impl_IMobileBroadbandAccountWatcher
{
	EventRegistrationToken AccountAdded(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccountAdded(F handler) const;
	void AccountAdded(EventRegistrationToken cookie) const;
	EventRegistrationToken AccountUpdated(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccountUpdated(F handler) const;
	void AccountUpdated(EventRegistrationToken cookie) const;
	EventRegistrationToken AccountRemoved(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccountRemoved(F handler) const;
	void AccountRemoved(EventRegistrationToken cookie) const;
	EventRegistrationToken EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken EnumerationCompleted(F handler) const;
	void EnumerationCompleted(EventRegistrationToken cookie) const;
	EventRegistrationToken Stopped(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Stopped(F handler) const;
	void Stopped(EventRegistrationToken cookie) const;
	Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
};

template <typename T>
struct impl_IHotspotAuthenticationEventDetails
{
	String EventToken() const;
};

template <typename T>
struct impl_IHotspotAuthenticationContextStatics
{
	bool TryGetAuthenticationContext(String const & evenToken, Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context) const;
	template <unsigned S0> bool TryGetAuthenticationContext(wchar_t const (&evenToken)[S0], Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context) const;
};

template <typename T>
struct impl_IHotspotAuthenticationContext
{
	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Foundation::Uri RedirectMessageUrl() const;
	Windows::Data::Xml::Dom::XmlDocument RedirectMessageXml() const;
	Windows::Foundation::Uri AuthenticationUrl() const;
	void IssueCredentials(String const & userName, String const & password, String const & extraParameters, bool markAsManualConnectOnFailure) const;
	template <unsigned S0, unsigned S1, unsigned S2> void IssueCredentials(wchar_t const (&userName)[S0], wchar_t const (&password)[S1], wchar_t const (&extraParameters)[S2], bool markAsManualConnectOnFailure) const;
	void AbortAuthentication(bool markAsManual) const;
	void SkipAuthentication() const;
	void TriggerAttentionRequired(String const & packageRelativeApplicationId, String const & applicationParameters) const;
	template <unsigned S0, unsigned S1> void TriggerAttentionRequired(wchar_t const (&packageRelativeApplicationId)[S0], wchar_t const (&applicationParameters)[S1]) const;
};

template <typename T>
struct impl_IHotspotCredentialsAuthenticationResult
{
	bool HasNetworkErrorOccurred() const;
	Windows::Networking::NetworkOperators::HotspotAuthenticationResponseCode ResponseCode() const;
	Windows::Foundation::Uri LogoffUrl() const;
	Windows::Data::Xml::Dom::XmlDocument AuthenticationReplyXml() const;
};

template <typename T>
struct impl_IHotspotAuthenticationContext2
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> IssueCredentialsAsync(String const & userName, String const & password, String const & extraParameters, bool markAsManualConnectOnFailure) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> IssueCredentialsAsync(wchar_t const (&userName)[S0], wchar_t const (&password)[S1], wchar_t const (&extraParameters)[S2], bool markAsManualConnectOnFailure) const;
};

template <typename T>
struct impl_IProvisionFromXmlDocumentResults
{
	bool AllElementsProvisioned() const;
	String ProvisionResultsXml() const;
};

template <typename T>
struct impl_IProvisionedProfile
{
	void UpdateCost(Windows::Networking::Connectivity::NetworkCostType value) const;
	void UpdateUsage(Windows::Networking::NetworkOperators::ProfileUsage const & value) const;
};

template <typename T>
struct impl_IProvisioningAgent
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> ProvisionFromXmlDocumentAsync(String const & provisioningXmlDocument) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> ProvisionFromXmlDocumentAsync(wchar_t const (&provisioningXmlDocument)[S0]) const;
	Windows::Networking::NetworkOperators::ProvisionedProfile GetProvisionedProfile(Windows::Networking::NetworkOperators::ProfileMediaType mediaType, String const & profileName) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::ProvisionedProfile GetProvisionedProfile(Windows::Networking::NetworkOperators::ProfileMediaType mediaType, wchar_t const (&profileName)[S0]) const;
};

template <typename T>
struct impl_IProvisioningAgentStaticMethods
{
	Windows::Networking::NetworkOperators::ProvisioningAgent CreateFromNetworkAccountId(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::ProvisioningAgent CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const;
};

template <typename T>
struct impl_IUssdMessage
{
	byte DataCodingScheme() const;
	void DataCodingScheme(byte value) const;
	String PayloadAsText() const;
	void PayloadAsText(String const & value) const;
	template <unsigned S0> void PayloadAsText(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IUssdMessageFactory
{
	Windows::Networking::NetworkOperators::UssdMessage CreateMessage(String const & messageText) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::UssdMessage CreateMessage(wchar_t const (&messageText)[S0]) const;
};

template <typename T>
struct impl_IUssdReply
{
	Windows::Networking::NetworkOperators::UssdResultCode ResultCode() const;
	Windows::Networking::NetworkOperators::UssdMessage Message() const;
};

template <typename T>
struct impl_IUssdSession
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::UssdReply> SendMessageAndGetReplyAsync(Windows::Networking::NetworkOperators::UssdMessage const & message) const;
	void Close() const;
};

template <typename T>
struct impl_IUssdSessionStatics
{
	Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkAccountId(String const & networkAccountId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const;
	Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkInterfaceId(String const & networkInterfaceId) const;
	template <unsigned S0> Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkInterfaceId(wchar_t const (&networkInterfaceId)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

template <typename T>
struct impl_IMessageReceivedHandler
{
	void Invoke(Windows::Networking::Proximity::ProximityDevice const & sender, Windows::Networking::Proximity::ProximityMessage const & message) const;
};

template <typename T>
struct impl_IMessageTransmittedHandler
{
	void Invoke(Windows::Networking::Proximity::ProximityDevice const & sender, long long messageId) const;
};

template <typename T>
struct impl_IDeviceArrivedEventHandler
{
	void Invoke(Windows::Networking::Proximity::ProximityDevice const & sender) const;
};

template <typename T>
struct impl_IDeviceDepartedEventHandler
{
	void Invoke(Windows::Networking::Proximity::ProximityDevice const & sender) const;
};

template <typename T>
struct impl_IProximityMessage
{
	String MessageType() const;
	long long SubscriptionId() const;
	Windows::Storage::Streams::IBuffer Data() const;
	String DataAsString() const;
};

template <typename T>
struct impl_IProximityDevice
{
	long long SubscribeForMessage(String const & messageType, Windows::Networking::Proximity::IMessageReceivedHandler const & messageReceivedHandler) const;
	template <unsigned S0> long long SubscribeForMessage(wchar_t const (&messageType)[S0], Windows::Networking::Proximity::IMessageReceivedHandler const & messageReceivedHandler) const;
	template <typename F> long long SubscribeForMessage(String const & messageType, F messageReceivedHandler) const;
	template <unsigned S0, typename F> long long SubscribeForMessage(wchar_t const (&messageType)[S0], F messageReceivedHandler) const;
	long long PublishMessage(String const & messageType, String const & message) const;
	template <unsigned S0, unsigned S1> long long PublishMessage(wchar_t const (&messageType)[S0], wchar_t const (&message)[S1]) const;
	long long PublishMessage(String const & messageType, String const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <unsigned S0, unsigned S1> long long PublishMessage(wchar_t const (&messageType)[S0], wchar_t const (&message)[S1], Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <typename F> long long PublishMessage(String const & messageType, String const & message, F messageTransmittedHandler) const;
	template <unsigned S0, unsigned S1, typename F> long long PublishMessage(wchar_t const (&messageType)[S0], wchar_t const (&message)[S1], F messageTransmittedHandler) const;
	long long PublishBinaryMessage(String const & messageType, Windows::Storage::Streams::IBuffer const & message) const;
	template <unsigned S0> long long PublishBinaryMessage(wchar_t const (&messageType)[S0], Windows::Storage::Streams::IBuffer const & message) const;
	long long PublishBinaryMessage(String const & messageType, Windows::Storage::Streams::IBuffer const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <unsigned S0> long long PublishBinaryMessage(wchar_t const (&messageType)[S0], Windows::Storage::Streams::IBuffer const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <typename F> long long PublishBinaryMessage(String const & messageType, Windows::Storage::Streams::IBuffer const & message, F messageTransmittedHandler) const;
	template <unsigned S0, typename F> long long PublishBinaryMessage(wchar_t const (&messageType)[S0], Windows::Storage::Streams::IBuffer const & message, F messageTransmittedHandler) const;
	long long PublishUriMessage(Windows::Foundation::Uri const & message) const;
	long long PublishUriMessage(Windows::Foundation::Uri const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const;
	template <typename F> long long PublishUriMessage(Windows::Foundation::Uri const & message, F messageTransmittedHandler) const;
	void StopSubscribingForMessage(long long subscriptionId) const;
	void StopPublishingMessage(long long messageId) const;
	EventRegistrationToken DeviceArrived(Windows::Networking::Proximity::IDeviceArrivedEventHandler const & arrivedHandler) const;
	template <typename F> EventRegistrationToken DeviceArrived(F arrivedHandler) const;
	void DeviceArrived(EventRegistrationToken cookie) const;
	EventRegistrationToken DeviceDeparted(Windows::Networking::Proximity::IDeviceDepartedEventHandler const & departedHandler) const;
	template <typename F> EventRegistrationToken DeviceDeparted(F departedHandler) const;
	void DeviceDeparted(EventRegistrationToken cookie) const;
	unsigned MaxMessageBytes() const;
	unsigned long long BitsPerSecond() const;
	String DeviceId() const;
};

template <typename T>
struct impl_IProximityDeviceStatics
{
	String GetDeviceSelector() const;
	Windows::Networking::Proximity::ProximityDevice GetDefault() const;
	Windows::Networking::Proximity::ProximityDevice FromId(String const & deviceId) const;
	template <unsigned S0> Windows::Networking::Proximity::ProximityDevice FromId(wchar_t const (&deviceId)[S0]) const;
};

template <typename T>
struct impl_ITriggeredConnectionStateChangedEventArgs
{
	Windows::Networking::Proximity::TriggeredConnectState State() const;
	unsigned Id() const;
	Windows::Networking::Sockets::StreamSocket Socket() const;
};

template <typename T>
struct impl_IPeerInformation
{
	String DisplayName() const;
};

template <typename T>
struct impl_IPeerInformation3
{
	String Id() const;
	Windows::Storage::Streams::IBuffer DiscoveryData() const;
};

template <typename T>
struct impl_IConnectionRequestedEventArgs
{
	Windows::Networking::Proximity::PeerInformation PeerInformation() const;
};

template <typename T>
struct impl_IPeerWatcher
{
	EventRegistrationToken Added(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const;
	template <typename F> EventRegistrationToken Added(F handler) const;
	void Added(EventRegistrationToken token) const;
	EventRegistrationToken Removed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const;
	template <typename F> EventRegistrationToken Removed(F handler) const;
	void Removed(EventRegistrationToken token) const;
	EventRegistrationToken Updated(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const;
	template <typename F> EventRegistrationToken Updated(F handler) const;
	void Updated(EventRegistrationToken token) const;
	EventRegistrationToken EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken EnumerationCompleted(F handler) const;
	void EnumerationCompleted(EventRegistrationToken token) const;
	EventRegistrationToken Stopped(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Stopped(F handler) const;
	void Stopped(EventRegistrationToken token) const;
	Windows::Networking::Proximity::PeerWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
};

template <typename T>
struct impl_IPeerFinderStatics
{
	bool AllowBluetooth() const;
	void AllowBluetooth(bool value) const;
	bool AllowInfrastructure() const;
	void AllowInfrastructure(bool value) const;
	bool AllowWiFiDirect() const;
	void AllowWiFiDirect(bool value) const;
	String DisplayName() const;
	void DisplayName(String const & value) const;
	template <unsigned S0> void DisplayName(wchar_t const (&value)[S0]) const;
	Windows::Networking::Proximity::PeerDiscoveryTypes SupportedDiscoveryTypes() const;
	Windows::Foundation::Collections::IMap<String, String> AlternateIdentities() const;
	void Start() const;
	void Start(String const & peerMessage) const;
	template <unsigned S0> void Start(wchar_t const (&peerMessage)[S0]) const;
	void Stop() const;
	EventRegistrationToken TriggeredConnectionStateChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TriggeredConnectionStateChanged(F handler) const;
	void TriggeredConnectionStateChanged(EventRegistrationToken cookie) const;
	EventRegistrationToken ConnectionRequested(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ConnectionRequested(F handler) const;
	void ConnectionRequested(EventRegistrationToken cookie) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> FindAllPeersAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> ConnectAsync(Windows::Networking::Proximity::PeerInformation const & peerInformation) const;
};

template <typename T>
struct impl_IPeerFinderStatics2
{
	Windows::Networking::Proximity::PeerRole Role() const;
	void Role(Windows::Networking::Proximity::PeerRole value) const;
	Windows::Storage::Streams::IBuffer DiscoveryData() const;
	void DiscoveryData(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Networking::Proximity::PeerWatcher CreateWatcher() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

template <typename T>
struct impl_IPushNotificationChannelManagerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(String const & applicationId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(wchar_t const (&applicationId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(String const & tileId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(wchar_t const (&tileId)[S0]) const;
};

template <typename T>
struct impl_IPushNotificationChannel
{
	String Uri() const;
	Windows::Foundation::DateTime ExpirationTime() const;
	void Close() const;
	EventRegistrationToken PushNotificationReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::PushNotifications::PushNotificationChannel, Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PushNotificationReceived(F handler) const;
	void PushNotificationReceived(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPushNotificationReceivedEventArgs
{
	void Cancel(bool value) const;
	bool Cancel() const;
	Windows::Networking::PushNotifications::PushNotificationType NotificationType() const;
	Windows::UI::Notifications::ToastNotification ToastNotification() const;
	Windows::UI::Notifications::TileNotification TileNotification() const;
	Windows::UI::Notifications::BadgeNotification BadgeNotification() const;
	Windows::Networking::PushNotifications::RawNotification RawNotification() const;
};

template <typename T>
struct impl_IRawNotification
{
	String Content() const;
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

template <typename T>
struct impl_IControlChannelTrigger
{
	String ControlChannelTriggerId() const;
	unsigned ServerKeepAliveIntervalInMinutes() const;
	void ServerKeepAliveIntervalInMinutes(unsigned value) const;
	unsigned CurrentKeepAliveIntervalInMinutes() const;
	IInspectable TransportObject() const;
	Windows::ApplicationModel::Background::IBackgroundTrigger KeepAliveTrigger() const;
	Windows::ApplicationModel::Background::IBackgroundTrigger PushNotificationTrigger() const;
	void UsingTransport(IInspectable const & transport) const;
	Windows::Networking::Sockets::ControlChannelTriggerStatus WaitForPushEnabled() const;
	void DecreaseNetworkKeepAliveInterval() const;
	void FlushTransport() const;
};

template <typename T>
struct impl_IControlChannelTriggerFactory
{
	Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTrigger(String const & channelId, unsigned serverKeepAliveIntervalInMinutes) const;
	template <unsigned S0> Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned serverKeepAliveIntervalInMinutes) const;
	Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTrigger(String const & channelId, unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType) const;
	template <unsigned S0> Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType) const;
};

template <typename T>
struct impl_IControlChannelTriggerEventDetails
{
	Windows::Networking::Sockets::ControlChannelTrigger ControlChannelTrigger() const;
};

template <typename T>
struct impl_IControlChannelTriggerResetEventDetails
{
	Windows::Networking::Sockets::ControlChannelTriggerResetReason ResetReason() const;
	bool HardwareSlotReset() const;
	bool SoftwareSlotReset() const;
};

template <typename T>
struct impl_IDatagramSocketMessageReceivedEventArgs
{
	Windows::Networking::HostName RemoteAddress() const;
	String RemotePort() const;
	Windows::Networking::HostName LocalAddress() const;
	Windows::Storage::Streams::DataReader GetDataReader() const;
	Windows::Storage::Streams::IInputStream GetDataStream() const;
};

template <typename T>
struct impl_IMessageWebSocketMessageReceivedEventArgs
{
	Windows::Networking::Sockets::SocketMessageType MessageType() const;
	Windows::Storage::Streams::DataReader GetDataReader() const;
	Windows::Storage::Streams::IInputStream GetDataStream() const;
};

template <typename T>
struct impl_IWebSocketClosedEventArgs
{
	unsigned short Code() const;
	String Reason() const;
};

template <typename T>
struct impl_IDatagramSocketInformation
{
	Windows::Networking::HostName LocalAddress() const;
	String LocalPort() const;
	Windows::Networking::HostName RemoteAddress() const;
	String RemotePort() const;
};

template <typename T>
struct impl_IDatagramSocketControl
{
	Windows::Networking::Sockets::SocketQualityOfService QualityOfService() const;
	void QualityOfService(Windows::Networking::Sockets::SocketQualityOfService value) const;
	byte OutboundUnicastHopLimit() const;
	void OutboundUnicastHopLimit(byte value) const;
};

template <typename T>
struct impl_IDatagramSocketControl2
{
	unsigned InboundBufferSizeInBytes() const;
	void InboundBufferSizeInBytes(unsigned value) const;
	bool DontFragment() const;
	void DontFragment(bool value) const;
};

template <typename T>
struct impl_IDatagramSocketStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::HostNameSortOptions sortOptions) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::HostNameSortOptions sortOptions) const;
};

template <typename T>
struct impl_IDatagramSocket
{
	Windows::Networking::Sockets::DatagramSocketControl Control() const;
	Windows::Networking::Sockets::DatagramSocketInformation Information() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const;
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0]) const;
	Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, String const & localServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0]) const;
	void JoinMulticastGroup(Windows::Networking::HostName const & host) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> GetOutputStreamAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> GetOutputStreamAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> GetOutputStreamAsync(Windows::Networking::EndpointPair const & endpointPair) const;
	EventRegistrationToken MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::DatagramSocket, Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken MessageReceived(F eventHandler) const;
	void MessageReceived(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IDatagramSocket2
{
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0], Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
};

template <typename T>
struct impl_IStreamSocketInformation
{
	Windows::Networking::HostName LocalAddress() const;
	String LocalPort() const;
	Windows::Networking::HostName RemoteHostName() const;
	Windows::Networking::HostName RemoteAddress() const;
	String RemoteServiceName() const;
	String RemotePort() const;
	Windows::Networking::Sockets::RoundTripTimeStatistics RoundTripTimeStatistics() const;
	Windows::Networking::Sockets::BandwidthStatistics BandwidthStatistics() const;
	Windows::Networking::Sockets::SocketProtectionLevel ProtectionLevel() const;
	Windows::Storage::Streams::IBuffer SessionKey() const;
};

template <typename T>
struct impl_IStreamSocketInformation2
{
	Windows::Networking::Sockets::SocketSslErrorSeverity ServerCertificateErrorSeverity() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> ServerCertificateErrors() const;
	Windows::Security::Cryptography::Certificates::Certificate ServerCertificate() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> ServerIntermediateCertificates() const;
};

template <typename T>
struct impl_IStreamSocketControl
{
	bool NoDelay() const;
	void NoDelay(bool value) const;
	bool KeepAlive() const;
	void KeepAlive(bool value) const;
	unsigned OutboundBufferSizeInBytes() const;
	void OutboundBufferSizeInBytes(unsigned value) const;
	Windows::Networking::Sockets::SocketQualityOfService QualityOfService() const;
	void QualityOfService(Windows::Networking::Sockets::SocketQualityOfService value) const;
	byte OutboundUnicastHopLimit() const;
	void OutboundUnicastHopLimit(byte value) const;
};

template <typename T>
struct impl_IStreamSocketControl2
{
	Windows::Foundation::Collections::IVector<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> IgnorableServerCertificateErrors() const;
};

template <typename T>
struct impl_IStreamSocket
{
	Windows::Networking::Sockets::StreamSocketControl Control() const;
	Windows::Networking::Sockets::StreamSocketInformation Information() const;
	Windows::Storage::Streams::IInputStream InputStream() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::EndpointPair const & endpointPair, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	Windows::Foundation::IAsyncAction UpgradeToSslAsync(Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::HostName const & validationHostName) const;
};

template <typename T>
struct impl_IStreamSocket2
{
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
};

template <typename T>
struct impl_IStreamSocketListenerControl
{
	Windows::Networking::Sockets::SocketQualityOfService QualityOfService() const;
	void QualityOfService(Windows::Networking::Sockets::SocketQualityOfService value) const;
};

template <typename T>
struct impl_IStreamSocketListenerInformation
{
	String LocalPort() const;
};

template <typename T>
struct impl_IStreamSocketListenerConnectionReceivedEventArgs
{
	Windows::Networking::Sockets::StreamSocket Socket() const;
};

template <typename T>
struct impl_IStreamSocketListener
{
	Windows::Networking::Sockets::StreamSocketListenerControl Control() const;
	Windows::Networking::Sockets::StreamSocketListenerInformation Information() const;
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0]) const;
	Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, String const & localServiceName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0]) const;
	EventRegistrationToken ConnectionReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::StreamSocketListener, Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken ConnectionReceived(F eventHandler) const;
	void ConnectionReceived(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IStreamSocketListener2
{
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	Windows::Foundation::IAsyncAction BindServiceNameAsync(String const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction BindServiceNameAsync(wchar_t const (&localServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
};

template <typename T>
struct impl_IWebSocketControl
{
	unsigned OutboundBufferSizeInBytes() const;
	void OutboundBufferSizeInBytes(unsigned value) const;
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Foundation::Collections::IVector<String> SupportedProtocols() const;
};

template <typename T>
struct impl_IWebSocketInformation
{
	Windows::Networking::HostName LocalAddress() const;
	Windows::Networking::Sockets::BandwidthStatistics BandwidthStatistics() const;
	String Protocol() const;
};

template <typename T>
struct impl_IWebSocket
{
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Foundation::Uri const & uri) const;
	void SetRequestHeader(String const & headerName, String const & headerValue) const;
	template <unsigned S0, unsigned S1> void SetRequestHeader(wchar_t const (&headerName)[S0], wchar_t const (&headerValue)[S1]) const;
	EventRegistrationToken Closed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::IWebSocket, Windows::Networking::Sockets::WebSocketClosedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken Closed(F eventHandler) const;
	void Closed(EventRegistrationToken eventCookie) const;
	void Close(unsigned short code, String const & reason) const;
	template <unsigned S0> void Close(unsigned short code, wchar_t const (&reason)[S0]) const;
};

template <typename T>
struct impl_IMessageWebSocketControl
{
	unsigned MaxMessageSize() const;
	void MaxMessageSize(unsigned value) const;
	Windows::Networking::Sockets::SocketMessageType MessageType() const;
	void MessageType(Windows::Networking::Sockets::SocketMessageType value) const;
};

template <typename T>
struct impl_IMessageWebSocket
{
	Windows::Networking::Sockets::MessageWebSocketControl Control() const;
	Windows::Networking::Sockets::MessageWebSocketInformation Information() const;
	EventRegistrationToken MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::MessageWebSocket, Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs> const & eventHandler) const;
	template <typename F> EventRegistrationToken MessageReceived(F eventHandler) const;
	void MessageReceived(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IStreamWebSocketControl
{
	bool NoDelay() const;
	void NoDelay(bool value) const;
};

template <typename T>
struct impl_IStreamWebSocket
{
	Windows::Networking::Sockets::StreamWebSocketControl Control() const;
	Windows::Networking::Sockets::StreamWebSocketInformation Information() const;
	Windows::Storage::Streams::IInputStream InputStream() const;
};

template <typename T>
struct impl_ISocketErrorStatics
{
	Windows::Networking::Sockets::SocketErrorStatus GetStatus(int hresult) const;
};

template <typename T>
struct impl_IWebSocketErrorStatics
{
	Windows::Web::WebErrorStatus GetStatus(int hresult) const;
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

template <typename T>
struct impl_IOnlineIdServiceTicketRequest
{
	String Service() const;
	String Policy() const;
};

template <typename T>
struct impl_IOnlineIdServiceTicketRequestFactory
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest CreateOnlineIdServiceTicketRequest(String const & service, String const & policy) const;
	template <unsigned S0, unsigned S1> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest CreateOnlineIdServiceTicketRequest(wchar_t const (&service)[S0], wchar_t const (&policy)[S1]) const;
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest CreateOnlineIdServiceTicketRequest(String const & service) const;
	template <unsigned S0> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest CreateOnlineIdServiceTicketRequest(wchar_t const (&service)[S0]) const;
};

template <typename T>
struct impl_IOnlineIdServiceTicket
{
	String Value() const;
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest Request() const;
	int ErrorCode() const;
};

template <typename T>
struct impl_IUserIdentity
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket> Tickets() const;
	String Id() const;
	String SafeCustomerId() const;
	String SignInName() const;
	String FirstName() const;
	String LastName() const;
	bool IsBetaAccount() const;
	bool IsConfirmedPC() const;
};

template <typename T>
struct impl_IOnlineIdAuthenticator
{
	Windows::Security::Authentication::OnlineId::UserAuthenticationOperation AuthenticateUserAsync(Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest const & request) const;
	Windows::Security::Authentication::OnlineId::UserAuthenticationOperation AuthenticateUserAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest> const & requests, Windows::Security::Authentication::OnlineId::CredentialPromptType credentialPromptType) const;
	Windows::Security::Authentication::OnlineId::SignOutUserOperation SignOutUserAsync() const;
	void ApplicationId(GUID value) const;
	GUID ApplicationId() const;
	bool CanSignOut() const;
	String AuthenticatedSafeCustomerId() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

template <typename T>
struct impl_IWebAuthenticationResult
{
	String ResponseData() const;
	Windows::Security::Authentication::Web::WebAuthenticationStatus ResponseStatus() const;
	unsigned ResponseErrorDetail() const;
};

template <typename T>
struct impl_IWebAuthenticationBrokerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri) const;
	Windows::Foundation::Uri GetCurrentApplicationCallbackUri() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

template <typename T>
struct impl_IPasswordCredential
{
	String Resource() const;
	void Resource(String const & resource) const;
	template <unsigned S0> void Resource(wchar_t const (&resource)[S0]) const;
	String UserName() const;
	void UserName(String const & userName) const;
	template <unsigned S0> void UserName(wchar_t const (&userName)[S0]) const;
	String Password() const;
	void Password(String const & password) const;
	template <unsigned S0> void Password(wchar_t const (&password)[S0]) const;
	void RetrievePassword() const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
};

template <typename T>
struct impl_ICredentialFactory
{
	Windows::Security::Credentials::PasswordCredential CreatePasswordCredential(String const & resource, String const & userName, String const & password) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Security::Credentials::PasswordCredential CreatePasswordCredential(wchar_t const (&resource)[S0], wchar_t const (&userName)[S1], wchar_t const (&password)[S2]) const;
};

template <typename T>
struct impl_IPasswordVault
{
	void Add(Windows::Security::Credentials::PasswordCredential const & credential) const;
	void Remove(Windows::Security::Credentials::PasswordCredential const & credential) const;
	Windows::Security::Credentials::PasswordCredential Retrieve(String const & resource, String const & userName) const;
	template <unsigned S0, unsigned S1> Windows::Security::Credentials::PasswordCredential Retrieve(wchar_t const (&resource)[S0], wchar_t const (&userName)[S1]) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByResource(String const & resource) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByResource(wchar_t const (&resource)[S0]) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByUserName(String const & userName) const;
	template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByUserName(wchar_t const (&userName)[S0]) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> RetrieveAll() const;
};

template <typename T>
struct impl_IWebAccountProviderFactory
{
	Windows::Security::Credentials::WebAccountProvider CreateWebAccountProvider(String const & id, String const & displayName, Windows::Foundation::Uri const & iconUri) const;
	template <unsigned S0, unsigned S1> Windows::Security::Credentials::WebAccountProvider CreateWebAccountProvider(wchar_t const (&id)[S0], wchar_t const (&displayName)[S1], Windows::Foundation::Uri const & iconUri) const;
};

template <typename T>
struct impl_IWebAccountFactory
{
	Windows::Security::Credentials::WebAccount CreateWebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, String const & userName, Windows::Security::Credentials::WebAccountState state) const;
	template <unsigned S0> Windows::Security::Credentials::WebAccount CreateWebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, wchar_t const (&userName)[S0], Windows::Security::Credentials::WebAccountState state) const;
};

template <typename T>
struct impl_IWebAccountProvider
{
	String Id() const;
	String DisplayName() const;
	Windows::Foundation::Uri IconUri() const;
};

template <typename T>
struct impl_IWebAccount
{
	Windows::Security::Credentials::WebAccountProvider WebAccountProvider() const;
	String UserName() const;
	Windows::Security::Credentials::WebAccountState State() const;
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

template <typename T>
struct impl_IUserConsentVerifierStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> CheckAvailabilityAsync() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> RequestVerificationAsync(String const & message) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> RequestVerificationAsync(wchar_t const (&message)[S0]) const;
};

template <typename T>
struct impl_ICredentialPickerOptions
{
	void Caption(String const & value) const;
	template <unsigned S0> void Caption(wchar_t const (&value)[S0]) const;
	String Caption() const;
	void Message(String const & value) const;
	template <unsigned S0> void Message(wchar_t const (&value)[S0]) const;
	String Message() const;
	void ErrorCode(unsigned value) const;
	unsigned ErrorCode() const;
	void TargetName(String const & value) const;
	template <unsigned S0> void TargetName(wchar_t const (&value)[S0]) const;
	String TargetName() const;
	void AuthenticationProtocol(Windows::Security::Credentials::UI::AuthenticationProtocol value) const;
	Windows::Security::Credentials::UI::AuthenticationProtocol AuthenticationProtocol() const;
	void CustomAuthenticationProtocol(String const & value) const;
	template <unsigned S0> void CustomAuthenticationProtocol(wchar_t const (&value)[S0]) const;
	String CustomAuthenticationProtocol() const;
	void PreviousCredential(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Storage::Streams::IBuffer PreviousCredential() const;
	void AlwaysDisplayDialog(bool value) const;
	bool AlwaysDisplayDialog() const;
	void CallerSavesCredential(bool value) const;
	bool CallerSavesCredential() const;
	void CredentialSaveOption(Windows::Security::Credentials::UI::CredentialSaveOption value) const;
	Windows::Security::Credentials::UI::CredentialSaveOption CredentialSaveOption() const;
};

template <typename T>
struct impl_ICredentialPickerStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(Windows::Security::Credentials::UI::CredentialPickerOptions const & options) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(String const & targetName, String const & message) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1]) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(String const & targetName, String const & message, String const & caption) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1], wchar_t const (&caption)[S2]) const;
};

template <typename T>
struct impl_ICredentialPickerResults
{
	unsigned ErrorCode() const;
	Windows::Security::Credentials::UI::CredentialSaveOption CredentialSaveOption() const;
	bool CredentialSaved() const;
	Windows::Storage::Streams::IBuffer Credential() const;
	String CredentialDomainName() const;
	String CredentialUserName() const;
	String CredentialPassword() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

template <typename T>
struct impl_ICryptographicBufferStatics
{
	bool Compare(Windows::Storage::Streams::IBuffer const & object1, Windows::Storage::Streams::IBuffer const & object2) const;
	Windows::Storage::Streams::IBuffer GenerateRandom(unsigned length) const;
	unsigned GenerateRandomNumber() const;
	Windows::Storage::Streams::IBuffer DecodeFromHexString(String const & value) const;
	template <unsigned S0> Windows::Storage::Streams::IBuffer DecodeFromHexString(wchar_t const (&value)[S0]) const;
	String EncodeToHexString(Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Storage::Streams::IBuffer DecodeFromBase64String(String const & value) const;
	template <unsigned S0> Windows::Storage::Streams::IBuffer DecodeFromBase64String(wchar_t const (&value)[S0]) const;
	String EncodeToBase64String(Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Storage::Streams::IBuffer ConvertStringToBinary(String const & value, Windows::Security::Cryptography::BinaryStringEncoding encoding) const;
	template <unsigned S0> Windows::Storage::Streams::IBuffer ConvertStringToBinary(wchar_t const (&value)[S0], Windows::Security::Cryptography::BinaryStringEncoding encoding) const;
	String ConvertBinaryToString(Windows::Security::Cryptography::BinaryStringEncoding encoding, Windows::Storage::Streams::IBuffer const & buffer) const;
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

template <typename T>
struct impl_ICertificateRequestProperties
{
	String Subject() const;
	void Subject(String const & value) const;
	template <unsigned S0> void Subject(wchar_t const (&value)[S0]) const;
	String KeyAlgorithmName() const;
	void KeyAlgorithmName(String const & value) const;
	template <unsigned S0> void KeyAlgorithmName(wchar_t const (&value)[S0]) const;
	unsigned KeySize() const;
	void KeySize(unsigned value) const;
	String FriendlyName() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	String HashAlgorithmName() const;
	void HashAlgorithmName(String const & value) const;
	template <unsigned S0> void HashAlgorithmName(wchar_t const (&value)[S0]) const;
	Windows::Security::Cryptography::Certificates::ExportOption Exportable() const;
	void Exportable(Windows::Security::Cryptography::Certificates::ExportOption value) const;
	Windows::Security::Cryptography::Certificates::EnrollKeyUsages KeyUsages() const;
	void KeyUsages(Windows::Security::Cryptography::Certificates::EnrollKeyUsages value) const;
	Windows::Security::Cryptography::Certificates::KeyProtectionLevel KeyProtectionLevel() const;
	void KeyProtectionLevel(Windows::Security::Cryptography::Certificates::KeyProtectionLevel value) const;
	String KeyStorageProviderName() const;
	void KeyStorageProviderName(String const & value) const;
	template <unsigned S0> void KeyStorageProviderName(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ICertificateRequestProperties2
{
	String SmartcardReaderName() const;
	void SmartcardReaderName(String const & value) const;
	template <unsigned S0> void SmartcardReaderName(wchar_t const (&value)[S0]) const;
	Windows::Security::Cryptography::Certificates::Certificate SigningCertificate() const;
	void SigningCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
	Windows::Security::Cryptography::Certificates::Certificate AttestationCredentialCertificate() const;
	void AttestationCredentialCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
};

template <typename T>
struct impl_ICertificateEnrollmentManagerStatics
{
	Windows::Foundation::IAsyncOperation<String> CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const;
	Windows::Foundation::IAsyncAction InstallCertificateAsync(String const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction InstallCertificateAsync(wchar_t const (&certificate)[S0], Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2]) const;
};

template <typename T>
struct impl_ICertificateEnrollmentManagerStatics2
{
	Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager UserCertificateEnrollmentManager() const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName, String const & keyStorageProvider) const;
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2], wchar_t const (&keyStorageProvider)[S3]) const;
};

template <typename T>
struct impl_IKeyAttestationHelperStatics
{
	Windows::Foundation::IAsyncOperation<String> DecryptTpmAttestationCredentialAsync(String const & credential) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> DecryptTpmAttestationCredentialAsync(wchar_t const (&credential)[S0]) const;
	String GetTpmAttestationCredentialId(String const & credential) const;
	template <unsigned S0> String GetTpmAttestationCredentialId(wchar_t const (&credential)[S0]) const;
};

template <typename T>
struct impl_ICertificateStoresStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query) const;
	Windows::Security::Cryptography::Certificates::CertificateStore TrustedRootCertificationAuthorities() const;
	Windows::Security::Cryptography::Certificates::CertificateStore IntermediateCertificationAuthorities() const;
	Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(String const & storeName) const;
	template <unsigned S0> Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(wchar_t const (&storeName)[S0]) const;
};

template <typename T>
struct impl_IUserCertificateEnrollmentManager
{
	Windows::Foundation::IAsyncOperation<String> CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const;
	Windows::Foundation::IAsyncAction InstallCertificateAsync(String const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction InstallCertificateAsync(wchar_t const (&certificate)[S0], Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2]) const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName, String const & keyStorageProvider) const;
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2], wchar_t const (&keyStorageProvider)[S3]) const;
};

template <typename T>
struct impl_ICertificateStore
{
	void Add(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const;
	void Delete(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const;
};

template <typename T>
struct impl_IKeyAlgorithmNamesStatics
{
	String Rsa() const;
	String Dsa() const;
	String Ecdh256() const;
	String Ecdh384() const;
	String Ecdh521() const;
	String Ecdsa256() const;
	String Ecdsa384() const;
	String Ecdsa521() const;
};

template <typename T>
struct impl_IKeyStorageProviderNamesStatics
{
	String SoftwareKeyStorageProvider() const;
	String SmartcardKeyStorageProvider() const;
	String PlatformKeyStorageProvider() const;
};

template <typename T>
struct impl_IChainBuildingParameters
{
	Windows::Foundation::Collections::IVector<String> EnhancedKeyUsages() const;
	Windows::Foundation::DateTime ValidationTimestamp() const;
	void ValidationTimestamp(Windows::Foundation::DateTime const & value) const;
	bool RevocationCheckEnabled() const;
	void RevocationCheckEnabled(bool value) const;
	bool NetworkRetrievalEnabled() const;
	void NetworkRetrievalEnabled(bool value) const;
	bool AuthorityInformationAccessEnabled() const;
	void AuthorityInformationAccessEnabled(bool value) const;
	bool CurrentTimeValidationEnabled() const;
	void CurrentTimeValidationEnabled(bool value) const;
	Windows::Foundation::Collections::IVector<Windows::Security::Cryptography::Certificates::Certificate> ExclusiveTrustRoots() const;
};

template <typename T>
struct impl_IChainValidationParameters
{
	Windows::Security::Cryptography::Certificates::CertificateChainPolicy CertificateChainPolicy() const;
	void CertificateChainPolicy(Windows::Security::Cryptography::Certificates::CertificateChainPolicy value) const;
	Windows::Networking::HostName ServerDnsName() const;
	void ServerDnsName(Windows::Networking::HostName const & value) const;
};

template <typename T>
struct impl_ICertificateQuery
{
	Windows::Foundation::Collections::IVector<String> EnhancedKeyUsages() const;
	String IssuerName() const;
	void IssuerName(String const & value) const;
	template <unsigned S0> void IssuerName(wchar_t const (&value)[S0]) const;
	String FriendlyName() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	bool HardwareOnly() const;
	void HardwareOnly(bool value) const;
};

template <typename T>
struct impl_ICertificateChain
{
	Windows::Security::Cryptography::Certificates::ChainValidationResult Validate() const;
	Windows::Security::Cryptography::Certificates::ChainValidationResult Validate(Windows::Security::Cryptography::Certificates::ChainValidationParameters const & parameter) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> GetCertificates(bool includeRoot) const;
};

template <typename T>
struct impl_ICertificate
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates, Windows::Security::Cryptography::Certificates::ChainBuildingParameters const & parameters) const;
	Windows::Storage::Streams::IBuffer GetCertificateBlob() const;
	String Subject() const;
	String Issuer() const;
	bool HasPrivateKey() const;
	bool IsStronglyProtected() const;
	Windows::Foundation::DateTime ValidFrom() const;
	Windows::Foundation::DateTime ValidTo() const;
	Windows::Foundation::Collections::IVectorView<String> EnhancedKeyUsages() const;
	void FriendlyName(String const & value) const;
	template <unsigned S0> void FriendlyName(wchar_t const (&value)[S0]) const;
	String FriendlyName() const;
};

template <typename T>
struct impl_ICertificateFactory
{
	Windows::Security::Cryptography::Certificates::Certificate CreateCertificate(Windows::Storage::Streams::IBuffer const & certBlob) const;
};

template <typename T>
struct impl_ICmsTimestampInfo
{
	Windows::Security::Cryptography::Certificates::Certificate SigningCertificate() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> Certificates() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
struct impl_ICmsSignerInfo
{
	Windows::Security::Cryptography::Certificates::Certificate Certificate() const;
	void Certificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
	String HashAlgorithmName() const;
	void HashAlgorithmName(String const & value) const;
	template <unsigned S0> void HashAlgorithmName(wchar_t const (&value)[S0]) const;
	Windows::Security::Cryptography::Certificates::CmsTimestampInfo TimestampInfo() const;
};

template <typename T>
struct impl_ICmsAttachedSignature
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> Certificates() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> Signers() const;
	Windows::Security::Cryptography::Certificates::SignatureValidationResult VerifySignature() const;
};

template <typename T>
struct impl_ICmsAttachedSignatureFactory
{
	Windows::Security::Cryptography::Certificates::CmsAttachedSignature CreateCmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const;
};

template <typename T>
struct impl_ICmsAttachedSignatureStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const;
};

template <typename T>
struct impl_ICmsDetachedSignature
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> Certificates() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> Signers() const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Cryptography::Certificates::SignatureValidationResult> VerifySignatureAsync(Windows::Storage::Streams::IInputStream const & data) const;
};

template <typename T>
struct impl_ICmsDetachedSignatureFactory
{
	Windows::Security::Cryptography::Certificates::CmsDetachedSignature CreateCmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const;
};

template <typename T>
struct impl_ICmsDetachedSignatureStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

template <typename T>
struct impl_IKeyDerivationParameters
{
	Windows::Storage::Streams::IBuffer KdfGenericBinary() const;
	void KdfGenericBinary(Windows::Storage::Streams::IBuffer const & value) const;
	unsigned IterationCount() const;
};

template <typename T>
struct impl_IKeyDerivationParametersStatics
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned iterationCount) const;
	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context) const;
	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo) const;
};

template <typename T>
struct impl_ICryptographicKey
{
	unsigned KeySize() const;
	Windows::Storage::Streams::IBuffer Export() const;
	Windows::Storage::Streams::IBuffer Export(Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType BlobType) const;
	Windows::Storage::Streams::IBuffer ExportPublicKey() const;
	Windows::Storage::Streams::IBuffer ExportPublicKey(Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType BlobType) const;
};

template <typename T>
struct impl_IHashComputation
{
	void Append(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Storage::Streams::IBuffer GetValueAndReset() const;
};

template <typename T>
struct impl_IHashAlgorithmProvider
{
	String AlgorithmName() const;
	unsigned HashLength() const;
	Windows::Storage::Streams::IBuffer HashData(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Security::Cryptography::Core::CryptographicHash CreateHash() const;
};

template <typename T>
struct impl_IMacAlgorithmProvider
{
	String AlgorithmName() const;
	unsigned MacLength() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
struct impl_IMacAlgorithmProvider2
{
	Windows::Security::Cryptography::Core::CryptographicHash CreateHash(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
struct impl_IKeyDerivationAlgorithmProvider
{
	String AlgorithmName() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
struct impl_ISymmetricKeyAlgorithmProvider
{
	String AlgorithmName() const;
	unsigned BlockLength() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateSymmetricKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
struct impl_IAsymmetricKeyAlgorithmProvider
{
	String AlgorithmName() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateKeyPair(unsigned keySize) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType BlobType) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType BlobType) const;
};

template <typename T>
struct impl_IPersistedKeyProviderStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
	Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
};

template <typename T>
struct impl_IEncryptedAndAuthenticatedData
{
	Windows::Storage::Streams::IBuffer EncryptedData() const;
	Windows::Storage::Streams::IBuffer AuthenticationTag() const;
};

template <typename T>
struct impl_ICryptographicEngineStatics
{
	Windows::Storage::Streams::IBuffer Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const;
	Windows::Storage::Streams::IBuffer Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const;
	Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData) const;
	Windows::Storage::Streams::IBuffer DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData) const;
	Windows::Storage::Streams::IBuffer Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
	bool VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const;
	Windows::Storage::Streams::IBuffer DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned desiredKeySize) const;
};

template <typename T>
struct impl_ICryptographicEngineStatics2
{
	Windows::Storage::Streams::IBuffer SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
	bool VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
};

template <typename T>
struct impl_IHashAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_IMacAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_IKeyDerivationAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_ISymmetricKeyAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_IAsymmetricKeyAlgorithmProviderStatics
{
	Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(String const & algorithm) const;
	template <unsigned S0> Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]) const;
};

template <typename T>
struct impl_IHashAlgorithmNamesStatics
{
	String Md5() const;
	String Sha1() const;
	String Sha256() const;
	String Sha384() const;
	String Sha512() const;
};

template <typename T>
struct impl_IMacAlgorithmNamesStatics
{
	String HmacMd5() const;
	String HmacSha1() const;
	String HmacSha256() const;
	String HmacSha384() const;
	String HmacSha512() const;
	String AesCmac() const;
};

template <typename T>
struct impl_ISymmetricAlgorithmNamesStatics
{
	String DesCbc() const;
	String DesEcb() const;
	String TripleDesCbc() const;
	String TripleDesEcb() const;
	String Rc2Cbc() const;
	String Rc2Ecb() const;
	String AesCbc() const;
	String AesEcb() const;
	String AesGcm() const;
	String AesCcm() const;
	String AesCbcPkcs7() const;
	String AesEcbPkcs7() const;
	String DesCbcPkcs7() const;
	String DesEcbPkcs7() const;
	String TripleDesCbcPkcs7() const;
	String TripleDesEcbPkcs7() const;
	String Rc2CbcPkcs7() const;
	String Rc2EcbPkcs7() const;
	String Rc4() const;
};

template <typename T>
struct impl_IAsymmetricAlgorithmNamesStatics
{
	String RsaPkcs1() const;
	String RsaOaepSha1() const;
	String RsaOaepSha256() const;
	String RsaOaepSha384() const;
	String RsaOaepSha512() const;
	String EcdsaP256Sha256() const;
	String EcdsaP384Sha384() const;
	String EcdsaP521Sha512() const;
	String DsaSha1() const;
	String DsaSha256() const;
	String RsaSignPkcs1Sha1() const;
	String RsaSignPkcs1Sha256() const;
	String RsaSignPkcs1Sha384() const;
	String RsaSignPkcs1Sha512() const;
	String RsaSignPssSha1() const;
	String RsaSignPssSha256() const;
	String RsaSignPssSha384() const;
	String RsaSignPssSha512() const;
};

template <typename T>
struct impl_IKeyDerivationAlgorithmNamesStatics
{
	String Pbkdf2Md5() const;
	String Pbkdf2Sha1() const;
	String Pbkdf2Sha256() const;
	String Pbkdf2Sha384() const;
	String Pbkdf2Sha512() const;
	String Sp800108CtrHmacMd5() const;
	String Sp800108CtrHmacSha1() const;
	String Sp800108CtrHmacSha256() const;
	String Sp800108CtrHmacSha384() const;
	String Sp800108CtrHmacSha512() const;
	String Sp80056aConcatMd5() const;
	String Sp80056aConcatSha1() const;
	String Sp80056aConcatSha256() const;
	String Sp80056aConcatSha384() const;
	String Sp80056aConcatSha512() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

template <typename T>
struct impl_IDataProtectionProvider
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ProtectAsync(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> UnprotectAsync(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Foundation::IAsyncAction ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & src, Windows::Storage::Streams::IOutputStream const & dest) const;
	Windows::Foundation::IAsyncAction UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & src, Windows::Storage::Streams::IOutputStream const & dest) const;
};

template <typename T>
struct impl_IDataProtectionProviderFactory
{
	Windows::Security::Cryptography::DataProtection::DataProtectionProvider CreateOverloadExplicit(String const & protectionDescriptor) const;
	template <unsigned S0> Windows::Security::Cryptography::DataProtection::DataProtectionProvider CreateOverloadExplicit(wchar_t const (&protectionDescriptor)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

template <typename T>
struct impl_IFileRevocationManagerStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, String const & enterpriseIdentity) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, wchar_t const (&enterpriseIdentity)[S0]) const;
	Windows::Foundation::IAsyncOperation<bool> CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem) const;
	void Revoke(String const & enterpriseIdentity) const;
	template <unsigned S0> void Revoke(wchar_t const (&enterpriseIdentity)[S0]) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> GetStatusAsync(Windows::Storage::IStorageItem const & storageItem) const;
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

template <typename T>
struct impl_IEasClientDeviceInformation
{
	GUID Id() const;
	String OperatingSystem() const;
	String FriendlyName() const;
	String SystemManufacturer() const;
	String SystemProductName() const;
	String SystemSku() const;
};

template <typename T>
struct impl_IEasClientSecurityPolicy
{
	bool RequireEncryption() const;
	void RequireEncryption(bool value) const;
	byte MinPasswordLength() const;
	void MinPasswordLength(byte value) const;
	bool DisallowConvenienceLogon() const;
	void DisallowConvenienceLogon(bool value) const;
	byte MinPasswordComplexCharacters() const;
	void MinPasswordComplexCharacters(byte value) const;
	Windows::Foundation::TimeSpan PasswordExpiration() const;
	void PasswordExpiration(Windows::Foundation::TimeSpan const & value) const;
	unsigned PasswordHistory() const;
	void PasswordHistory(unsigned value) const;
	byte MaxPasswordFailedAttempts() const;
	void MaxPasswordFailedAttempts(byte value) const;
	Windows::Foundation::TimeSpan MaxInactivityTimeLock() const;
	void MaxInactivityTimeLock(Windows::Foundation::TimeSpan const & value) const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults CheckCompliance() const;
	Windows::Foundation::IAsyncOperation<Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults> ApplyAsync() const;
};

template <typename T>
struct impl_IEasComplianceResults
{
	bool Compliant() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasRequireEncryptionResult RequireEncryptionResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordLengthResult MinPasswordLengthResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasDisallowConvenienceLogonResult DisallowConvenienceLogonResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordComplexCharactersResult MinPasswordComplexCharactersResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordExpirationResult PasswordExpirationResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordHistoryResult PasswordHistoryResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasMaxPasswordFailedAttemptsResult MaxPasswordFailedAttemptsResult() const;
	Windows::Security::ExchangeActiveSyncProvisioning::EasMaxInactivityTimeLockResult MaxInactivityTimeLockResult() const;
};

template <typename T>
struct impl_IEasComplianceResults2
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasEncryptionProviderType EncryptionProviderType() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage {

template <typename T>
struct impl_IStreamedFileDataRequestedHandler
{
	void Invoke(Windows::Storage::StreamedFileDataRequest const & stream) const;
};

template <typename T>
struct impl_IApplicationDataSetVersionHandler
{
	void Invoke(Windows::Storage::SetVersionRequest const & setVersionRequest) const;
};

template <typename T>
struct impl_IStorageLibraryStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> GetLibraryAsync(Windows::Storage::KnownLibraryId libraryId) const;
};

template <typename T>
struct impl_IStorageLibrary
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> RequestAddFolderAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestRemoveFolderAsync(Windows::Storage::StorageFolder const & folder) const;
	Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder> Folders() const;
	Windows::Storage::StorageFolder SaveFolder() const;
	EventRegistrationToken DefinitionChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::StorageLibrary, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken DefinitionChanged(F handler) const;
	void DefinitionChanged(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IKnownFoldersStatics
{
	Windows::Storage::StorageFolder MusicLibrary() const;
	Windows::Storage::StorageFolder PicturesLibrary() const;
	Windows::Storage::StorageFolder VideosLibrary() const;
	Windows::Storage::StorageFolder DocumentsLibrary() const;
	Windows::Storage::StorageFolder HomeGroup() const;
	Windows::Storage::StorageFolder RemovableDevices() const;
	Windows::Storage::StorageFolder MediaServerDevices() const;
};

template <typename T>
struct impl_IKnownFoldersPlaylistsStatics
{
	Windows::Storage::StorageFolder Playlists() const;
};

template <typename T>
struct impl_IKnownFoldersCameraRollStatics
{
	Windows::Storage::StorageFolder CameraRoll() const;
};

template <typename T>
struct impl_IKnownFoldersSavedPicturesStatics
{
	Windows::Storage::StorageFolder SavedPictures() const;
};

template <typename T>
struct impl_IDownloadsFolderStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName, Windows::Storage::CreationCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName, Windows::Storage::CreationCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption option) const;
};

template <typename T>
struct impl_IStreamedFileDataRequest
{
	void FailAndClose(Windows::Storage::StreamedFileFailureMode failureMode) const;
};

template <typename T>
struct impl_IStorageFileStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(String const & path) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(wchar_t const (&path)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(String const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(String const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <unsigned S0, typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(String const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
};

template <typename T>
struct impl_IStorageItem
{
	Windows::Foundation::IAsyncAction RenameAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction RenameAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncAction RenameAsync(String const & desiredName, Windows::Storage::NameCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction RenameAsync(wchar_t const (&desiredName)[S0], Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncAction DeleteAsync() const;
	Windows::Foundation::IAsyncAction DeleteAsync(Windows::Storage::StorageDeleteOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::BasicProperties> GetBasicPropertiesAsync() const;
	String Name() const;
	String Path() const;
	Windows::Storage::FileAttributes Attributes() const;
	Windows::Foundation::DateTime DateCreated() const;
	bool IsOfType(Windows::Storage::StorageItemTypes type) const;
};

template <typename T>
struct impl_IStorageFolder
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName, Windows::Storage::CreationCollisionOption options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName, Windows::Storage::CreationCollisionOption options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(String const & name) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(wchar_t const (&name)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(String const & name) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(wchar_t const (&name)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(String const & name) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(wchar_t const (&name)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync() const;
};

template <typename T>
struct impl_IStorageFile
{
	String FileType() const;
	String ContentType() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> OpenAsync(Windows::Storage::FileAccessMode accessMode) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> OpenTransactedWriteAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName, Windows::Storage::NameCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0], Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncAction CopyAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const;
	Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder) const;
	Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0]) const;
	Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName, Windows::Storage::NameCollisionOption option) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0], Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncAction MoveAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const;
};

template <typename T>
struct impl_IStorageFolderStatics
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(String const & path) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(wchar_t const (&path)[S0]) const;
};

template <typename T>
struct impl_IStorageItem2
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetParentAsync() const;
	bool IsEqual(Windows::Storage::IStorageItem const & item) const;
};

template <typename T>
struct impl_IStorageItemProperties
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize, Windows::Storage::FileProperties::ThumbnailOptions options) const;
	String DisplayName() const;
	String DisplayType() const;
	String FolderRelativeId() const;
	Windows::Storage::FileProperties::StorageItemContentProperties Properties() const;
};

template <typename T>
struct impl_IStorageItemProperties2
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize, Windows::Storage::FileProperties::ThumbnailOptions options) const;
};

template <typename T>
struct impl_IStorageItemPropertiesWithProvider
{
	Windows::Storage::StorageProvider Provider() const;
};

template <typename T>
struct impl_IStorageFilePropertiesWithAvailability
{
	bool IsAvailable() const;
};

template <typename T>
struct impl_IStorageProvider
{
	String Id() const;
	String DisplayName() const;
};

template <typename T>
struct impl_IStorageFolder2
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> TryGetItemAsync(String const & name) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> TryGetItemAsync(wchar_t const (&name)[S0]) const;
};

template <typename T>
struct impl_IFileIOStatics
{
	Windows::Foundation::IAsyncOperation<String> ReadTextAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<String> ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncAction WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
struct impl_IPathIOStatics
{
	Windows::Foundation::IAsyncOperation<String> ReadTextAsync(String const & absolutePath) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ReadTextAsync(wchar_t const (&absolutePath)[S0]) const;
	Windows::Foundation::IAsyncOperation<String> ReadTextAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<String> ReadTextAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(String const & absolutePath, String const & contents) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(String const & absolutePath, String const & contents) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(String const & absolutePath) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(wchar_t const (&absolutePath)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(String const & absolutePath) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(wchar_t const (&absolutePath)[S0]) const;
	Windows::Foundation::IAsyncAction WriteBufferAsync(String const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction WriteBufferAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
struct impl_ICachedFileManagerStatics
{
	void DeferUpdates(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Provider::FileUpdateStatus> CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file) const;
};

template <typename T>
struct impl_ISystemAudioProperties
{
	String EncodingBitrate() const;
};

template <typename T>
struct impl_ISystemGPSProperties
{
	String LatitudeDecimal() const;
	String LongitudeDecimal() const;
};

template <typename T>
struct impl_ISystemImageProperties
{
	String HorizontalSize() const;
	String VerticalSize() const;
};

template <typename T>
struct impl_ISystemMediaProperties
{
	String Duration() const;
	String Producer() const;
	String Publisher() const;
	String SubTitle() const;
	String Writer() const;
	String Year() const;
};

template <typename T>
struct impl_ISystemMusicProperties
{
	String AlbumArtist() const;
	String AlbumTitle() const;
	String Artist() const;
	String Composer() const;
	String Conductor() const;
	String DisplayArtist() const;
	String Genre() const;
	String TrackNumber() const;
};

template <typename T>
struct impl_ISystemPhotoProperties
{
	String CameraManufacturer() const;
	String CameraModel() const;
	String DateTaken() const;
	String Orientation() const;
	String PeopleNames() const;
};

template <typename T>
struct impl_ISystemVideoProperties
{
	String Director() const;
	String FrameHeight() const;
	String FrameWidth() const;
	String Orientation() const;
	String TotalBitrate() const;
};

template <typename T>
struct impl_ISystemProperties
{
	String Author() const;
	String Comment() const;
	String ItemNameDisplay() const;
	String Keywords() const;
	String Rating() const;
	String Title() const;
	Windows::Storage::SystemAudioProperties Audio() const;
	Windows::Storage::SystemGPSProperties GPS() const;
	Windows::Storage::SystemMediaProperties Media() const;
	Windows::Storage::SystemMusicProperties Music() const;
	Windows::Storage::SystemPhotoProperties Photo() const;
	Windows::Storage::SystemVideoProperties Video() const;
	Windows::Storage::SystemImageProperties Image() const;
};

template <typename T>
struct impl_IStorageStreamTransaction
{
	Windows::Storage::Streams::IRandomAccessStream Stream() const;
	Windows::Foundation::IAsyncAction CommitAsync() const;
};

template <typename T>
struct impl_IApplicationDataStatics
{
	Windows::Storage::ApplicationData Current() const;
};

template <typename T>
struct impl_IApplicationData
{
	unsigned Version() const;
	Windows::Foundation::IAsyncAction SetVersionAsync(unsigned desiredVersion, Windows::Storage::IApplicationDataSetVersionHandler const & handler) const;
	template <typename F> Windows::Foundation::IAsyncAction SetVersionAsync(unsigned desiredVersion, F handler) const;
	Windows::Foundation::IAsyncAction ClearAsync() const;
	Windows::Foundation::IAsyncAction ClearAsync(Windows::Storage::ApplicationDataLocality locality) const;
	Windows::Storage::ApplicationDataContainer LocalSettings() const;
	Windows::Storage::ApplicationDataContainer RoamingSettings() const;
	Windows::Storage::StorageFolder LocalFolder() const;
	Windows::Storage::StorageFolder RoamingFolder() const;
	Windows::Storage::StorageFolder TemporaryFolder() const;
	EventRegistrationToken DataChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::ApplicationData, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken DataChanged(F handler) const;
	void DataChanged(EventRegistrationToken token) const;
	void SignalDataChanged() const;
	unsigned long long RoamingStorageQuota() const;
};

template <typename T>
struct impl_ISetVersionRequest
{
	unsigned CurrentVersion() const;
	unsigned DesiredVersion() const;
	Windows::Storage::SetVersionDeferral GetDeferral() const;
};

template <typename T>
struct impl_ISetVersionDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IApplicationDataContainer
{
	String Name() const;
	Windows::Storage::ApplicationDataLocality Locality() const;
	Windows::Foundation::Collections::IPropertySet Values() const;
	Windows::Foundation::Collections::IMapView<String, Windows::Storage::ApplicationDataContainer> Containers() const;
	Windows::Storage::ApplicationDataContainer CreateContainer(String const & name, Windows::Storage::ApplicationDataCreateDisposition disposition) const;
	template <unsigned S0> Windows::Storage::ApplicationDataContainer CreateContainer(wchar_t const (&name)[S0], Windows::Storage::ApplicationDataCreateDisposition disposition) const;
	void DeleteContainer(String const & name) const;
	template <unsigned S0> void DeleteContainer(wchar_t const (&name)[S0]) const;
};

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

template <typename T>
struct impl_IItemRemovedEventArgs
{
	Windows::Storage::AccessCache::AccessListEntry RemovedEntry() const;
};

template <typename T>
struct impl_IStorageItemAccessList
{
	String Add(Windows::Storage::IStorageItem const & file) const;
	String Add(Windows::Storage::IStorageItem const & file, String const & metadata) const;
	template <unsigned S0> String Add(Windows::Storage::IStorageItem const & file, wchar_t const (&metadata)[S0]) const;
	void AddOrReplace(String const & token, Windows::Storage::IStorageItem const & file) const;
	template <unsigned S0> void AddOrReplace(wchar_t const (&token)[S0], Windows::Storage::IStorageItem const & file) const;
	void AddOrReplace(String const & token, Windows::Storage::IStorageItem const & file, String const & metadata) const;
	template <unsigned S0, unsigned S1> void AddOrReplace(wchar_t const (&token)[S0], Windows::Storage::IStorageItem const & file, wchar_t const (&metadata)[S1]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(String const & token) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(wchar_t const (&token)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(String const & token) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(wchar_t const (&token)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(String const & token) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(wchar_t const (&token)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(String const & token, Windows::Storage::AccessCache::AccessCacheOptions options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(wchar_t const (&token)[S0], Windows::Storage::AccessCache::AccessCacheOptions options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(String const & token, Windows::Storage::AccessCache::AccessCacheOptions options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(wchar_t const (&token)[S0], Windows::Storage::AccessCache::AccessCacheOptions options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(String const & token, Windows::Storage::AccessCache::AccessCacheOptions options) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(wchar_t const (&token)[S0], Windows::Storage::AccessCache::AccessCacheOptions options) const;
	void Remove(String const & token) const;
	template <unsigned S0> void Remove(wchar_t const (&token)[S0]) const;
	bool ContainsItem(String const & token) const;
	template <unsigned S0> bool ContainsItem(wchar_t const (&token)[S0]) const;
	void Clear() const;
	bool CheckAccess(Windows::Storage::IStorageItem const & file) const;
	Windows::Storage::AccessCache::AccessListEntryView Entries() const;
	unsigned MaximumItemsAllowed() const;
};

template <typename T>
struct impl_IStorageItemMostRecentlyUsedList
{
	EventRegistrationToken ItemRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList, Windows::Storage::AccessCache::ItemRemovedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ItemRemoved(F handler) const;
	void ItemRemoved(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IStorageApplicationPermissionsStatics
{
	Windows::Storage::AccessCache::StorageItemAccessList FutureAccessList() const;
	Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList MostRecentlyUsedList() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

template <typename T>
struct impl_IStorageItemInformation
{
	Windows::Storage::FileProperties::MusicProperties MusicProperties() const;
	Windows::Storage::FileProperties::VideoProperties VideoProperties() const;
	Windows::Storage::FileProperties::ImageProperties ImageProperties() const;
	Windows::Storage::FileProperties::DocumentProperties DocumentProperties() const;
	Windows::Storage::FileProperties::BasicProperties BasicProperties() const;
	Windows::Storage::FileProperties::StorageItemThumbnail Thumbnail() const;
	EventRegistrationToken ThumbnailUpdated(Windows::Foundation::ITypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable> const & changedHandler) const;
	template <typename F> EventRegistrationToken ThumbnailUpdated(F changedHandler) const;
	void ThumbnailUpdated(EventRegistrationToken eventCookie) const;
	EventRegistrationToken PropertiesUpdated(Windows::Foundation::ITypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable> const & changedHandler) const;
	template <typename F> EventRegistrationToken PropertiesUpdated(F changedHandler) const;
	void PropertiesUpdated(EventRegistrationToken eventCookie) const;
};

template <typename T>
struct impl_IFileInformationFactoryFactory
{
	Windows::Storage::BulkAccess::FileInformationFactory CreateWithMode(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode) const;
	Windows::Storage::BulkAccess::FileInformationFactory CreateWithModeAndSize(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize) const;
	Windows::Storage::BulkAccess::FileInformationFactory CreateWithModeAndSizeAndOptions(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions thumbnailOptions) const;
	Windows::Storage::BulkAccess::FileInformationFactory CreateWithModeAndSizeAndOptionsAndFlags(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions thumbnailOptions, bool delayLoad) const;
};

template <typename T>
struct impl_IFileInformationFactory
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> GetItemsAsync(unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> GetItemsAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> GetFilesAsync(unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> GetFilesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> GetFoldersAsync(unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> GetFoldersAsync() const;
	IInspectable GetVirtualizedItemsVector() const;
	IInspectable GetVirtualizedFilesVector() const;
	IInspectable GetVirtualizedFoldersVector() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

template <typename T>
struct impl_ICompressor
{
	Windows::Foundation::IAsyncOperation<bool> FinishAsync() const;
	Windows::Storage::Streams::IOutputStream DetachStream() const;
};

template <typename T>
struct impl_IDecompressor
{
	Windows::Storage::Streams::IInputStream DetachStream() const;
};

template <typename T>
struct impl_ICompressorFactory
{
	Windows::Storage::Compression::Compressor CreateCompressor(Windows::Storage::Streams::IOutputStream const & underlyingStream) const;
	Windows::Storage::Compression::Compressor CreateCompressorEx(Windows::Storage::Streams::IOutputStream const & underlyingStream, Windows::Storage::Compression::CompressAlgorithm algorithm, unsigned blockSize) const;
};

template <typename T>
struct impl_IDecompressorFactory
{
	Windows::Storage::Compression::Decompressor CreateDecompressor(Windows::Storage::Streams::IInputStream const & underlyingStream) const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

template <typename T>
struct impl_IThumbnailProperties
{
	unsigned OriginalWidth() const;
	unsigned OriginalHeight() const;
	bool ReturnedSmallerCachedSize() const;
	Windows::Storage::FileProperties::ThumbnailType Type() const;
};

template <typename T>
struct impl_IStorageItemExtraProperties
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<String, IInspectable>> RetrievePropertiesAsync(Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
	Windows::Foundation::IAsyncAction SavePropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>> const & propertiesToSave) const;
	Windows::Foundation::IAsyncAction SavePropertiesAsync() const;
};

template <typename T>
struct impl_IStorageItemContentProperties
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::MusicProperties> GetMusicPropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::VideoProperties> GetVideoPropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::ImageProperties> GetImagePropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::DocumentProperties> GetDocumentPropertiesAsync() const;
};

template <typename T>
struct impl_IMusicProperties
{
	String Album() const;
	void Album(String const & value) const;
	template <unsigned S0> void Album(wchar_t const (&value)[S0]) const;
	String Artist() const;
	void Artist(String const & value) const;
	template <unsigned S0> void Artist(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Genre() const;
	unsigned TrackNumber() const;
	void TrackNumber(unsigned value) const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	unsigned Rating() const;
	void Rating(unsigned value) const;
	Windows::Foundation::TimeSpan Duration() const;
	unsigned Bitrate() const;
	String AlbumArtist() const;
	void AlbumArtist(String const & value) const;
	template <unsigned S0> void AlbumArtist(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Composers() const;
	Windows::Foundation::Collections::IVector<String> Conductors() const;
	String Subtitle() const;
	void Subtitle(String const & value) const;
	template <unsigned S0> void Subtitle(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Producers() const;
	String Publisher() const;
	void Publisher(String const & value) const;
	template <unsigned S0> void Publisher(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Writers() const;
	unsigned Year() const;
	void Year(unsigned value) const;
};

template <typename T>
struct impl_IImageProperties
{
	unsigned Rating() const;
	void Rating(unsigned value) const;
	Windows::Foundation::Collections::IVector<String> Keywords() const;
	Windows::Foundation::DateTime DateTaken() const;
	void DateTaken(Windows::Foundation::DateTime const & value) const;
	unsigned Width() const;
	unsigned Height() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::IReference<double> Latitude() const;
	Windows::Foundation::IReference<double> Longitude() const;
	String CameraManufacturer() const;
	void CameraManufacturer(String const & value) const;
	template <unsigned S0> void CameraManufacturer(wchar_t const (&value)[S0]) const;
	String CameraModel() const;
	void CameraModel(String const & value) const;
	template <unsigned S0> void CameraModel(wchar_t const (&value)[S0]) const;
	Windows::Storage::FileProperties::PhotoOrientation Orientation() const;
	Windows::Foundation::Collections::IVectorView<String> PeopleNames() const;
};

template <typename T>
struct impl_IVideoProperties
{
	unsigned Rating() const;
	void Rating(unsigned value) const;
	Windows::Foundation::Collections::IVector<String> Keywords() const;
	unsigned Width() const;
	unsigned Height() const;
	Windows::Foundation::TimeSpan Duration() const;
	Windows::Foundation::IReference<double> Latitude() const;
	Windows::Foundation::IReference<double> Longitude() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Subtitle() const;
	void Subtitle(String const & value) const;
	template <unsigned S0> void Subtitle(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Producers() const;
	String Publisher() const;
	void Publisher(String const & value) const;
	template <unsigned S0> void Publisher(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Writers() const;
	unsigned Year() const;
	void Year(unsigned value) const;
	unsigned Bitrate() const;
	Windows::Foundation::Collections::IVector<String> Directors() const;
	Windows::Storage::FileProperties::VideoOrientation Orientation() const;
};

template <typename T>
struct impl_IDocumentProperties
{
	Windows::Foundation::Collections::IVector<String> Author() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> Keywords() const;
	String Comment() const;
	void Comment(String const & value) const;
	template <unsigned S0> void Comment(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IBasicProperties
{
	unsigned long long Size() const;
	Windows::Foundation::DateTime DateModified() const;
	Windows::Foundation::DateTime ItemDate() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

template <typename T>
struct impl_IFileOpenPicker
{
	Windows::Storage::Pickers::PickerViewMode ViewMode() const;
	void ViewMode(Windows::Storage::Pickers::PickerViewMode value) const;
	String SettingsIdentifier() const;
	void SettingsIdentifier(String const & value) const;
	template <unsigned S0> void SettingsIdentifier(wchar_t const (&value)[S0]) const;
	Windows::Storage::Pickers::PickerLocationId SuggestedStartLocation() const;
	void SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId value) const;
	String CommitButtonText() const;
	void CommitButtonText(String const & value) const;
	template <unsigned S0> void CommitButtonText(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> FileTypeFilter() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> PickSingleFileAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> PickMultipleFilesAsync() const;
};

template <typename T>
struct impl_IFileSavePicker
{
	String SettingsIdentifier() const;
	void SettingsIdentifier(String const & value) const;
	template <unsigned S0> void SettingsIdentifier(wchar_t const (&value)[S0]) const;
	Windows::Storage::Pickers::PickerLocationId SuggestedStartLocation() const;
	void SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId value) const;
	String CommitButtonText() const;
	void CommitButtonText(String const & value) const;
	template <unsigned S0> void CommitButtonText(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>> FileTypeChoices() const;
	String DefaultFileExtension() const;
	void DefaultFileExtension(String const & value) const;
	template <unsigned S0> void DefaultFileExtension(wchar_t const (&value)[S0]) const;
	Windows::Storage::StorageFile SuggestedSaveFile() const;
	void SuggestedSaveFile(Windows::Storage::StorageFile const & value) const;
	String SuggestedFileName() const;
	void SuggestedFileName(String const & value) const;
	template <unsigned S0> void SuggestedFileName(wchar_t const (&value)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> PickSaveFileAsync() const;
};

template <typename T>
struct impl_IFolderPicker
{
	Windows::Storage::Pickers::PickerViewMode ViewMode() const;
	void ViewMode(Windows::Storage::Pickers::PickerViewMode value) const;
	String SettingsIdentifier() const;
	void SettingsIdentifier(String const & value) const;
	template <unsigned S0> void SettingsIdentifier(wchar_t const (&value)[S0]) const;
	Windows::Storage::Pickers::PickerLocationId SuggestedStartLocation() const;
	void SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId value) const;
	String CommitButtonText() const;
	void CommitButtonText(String const & value) const;
	template <unsigned S0> void CommitButtonText(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<String> FileTypeFilter() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> PickSingleFolderAsync() const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

template <typename T>
struct impl_IFileRemovedEventArgs
{
	String Id() const;
};

template <typename T>
struct impl_IFileOpenPickerUI
{
	Windows::Storage::Pickers::Provider::AddFileResult AddFile(String const & id, Windows::Storage::IStorageFile const & file) const;
	template <unsigned S0> Windows::Storage::Pickers::Provider::AddFileResult AddFile(wchar_t const (&id)[S0], Windows::Storage::IStorageFile const & file) const;
	void RemoveFile(String const & id) const;
	template <unsigned S0> void RemoveFile(wchar_t const (&id)[S0]) const;
	bool ContainsFile(String const & id) const;
	template <unsigned S0> bool ContainsFile(wchar_t const (&id)[S0]) const;
	bool CanAddFile(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::Collections::IVectorView<String> AllowedFileTypes() const;
	Windows::Storage::Pickers::Provider::FileSelectionMode SelectionMode() const;
	String SettingsIdentifier() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	EventRegistrationToken FileRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::FileRemovedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken FileRemoved(F handler) const;
	void FileRemoved(EventRegistrationToken token) const;
	EventRegistrationToken Closing(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::PickerClosingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Closing(F handler) const;
	void Closing(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IPickerClosingEventArgs
{
	Windows::Storage::Pickers::Provider::PickerClosingOperation ClosingOperation() const;
	bool IsCanceled() const;
};

template <typename T>
struct impl_IPickerClosingOperation
{
	Windows::Storage::Pickers::Provider::PickerClosingDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
struct impl_IPickerClosingDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IFileSavePickerUI
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVectorView<String> AllowedFileTypes() const;
	String SettingsIdentifier() const;
	String FileName() const;
	Windows::Storage::Pickers::Provider::SetFileNameResult TrySetFileName(String const & value) const;
	template <unsigned S0> Windows::Storage::Pickers::Provider::SetFileNameResult TrySetFileName(wchar_t const (&value)[S0]) const;
	EventRegistrationToken FileNameChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken FileNameChanged(F handler) const;
	void FileNameChanged(EventRegistrationToken token) const;
	EventRegistrationToken TargetFileRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TargetFileRequested(F handler) const;
	void TargetFileRequested(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ITargetFileRequestedEventArgs
{
	Windows::Storage::Pickers::Provider::TargetFileRequest Request() const;
};

template <typename T>
struct impl_ITargetFileRequest
{
	Windows::Storage::IStorageFile TargetFile() const;
	void TargetFile(Windows::Storage::IStorageFile const & value) const;
	Windows::Storage::Pickers::Provider::TargetFileRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_ITargetFileRequestDeferral
{
	void Complete() const;
};

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

template <typename T>
struct impl_ICachedFileUpdaterUI
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Storage::Provider::CachedFileTarget UpdateTarget() const;
	EventRegistrationToken FileUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, Windows::Storage::Provider::FileUpdateRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken FileUpdateRequested(F handler) const;
	void FileUpdateRequested(EventRegistrationToken token) const;
	EventRegistrationToken UIRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken UIRequested(F handler) const;
	void UIRequested(EventRegistrationToken token) const;
	Windows::Storage::Provider::UIStatus UIStatus() const;
};

template <typename T>
struct impl_IFileUpdateRequestedEventArgs
{
	Windows::Storage::Provider::FileUpdateRequest Request() const;
};

template <typename T>
struct impl_IFileUpdateRequest
{
	String ContentId() const;
	Windows::Storage::StorageFile File() const;
	Windows::Storage::Provider::FileUpdateStatus Status() const;
	void Status(Windows::Storage::Provider::FileUpdateStatus value) const;
	Windows::Storage::Provider::FileUpdateRequestDeferral GetDeferral() const;
	void UpdateLocalFile(Windows::Storage::IStorageFile const & value) const;
};

template <typename T>
struct impl_IFileUpdateRequestDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_ICachedFileUpdaterStatics
{
	void SetUpdateInformation(Windows::Storage::IStorageFile const & file, String const & contentId, Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options) const;
	template <unsigned S0> void SetUpdateInformation(Windows::Storage::IStorageFile const & file, wchar_t const (&contentId)[S0], Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options) const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

template <typename T>
struct impl_IContentIndexerStatics
{
	Windows::Storage::Search::ContentIndexer GetIndexer(String const & indexName) const;
	template <unsigned S0> Windows::Storage::Search::ContentIndexer GetIndexer(wchar_t const (&indexName)[S0]) const;
	Windows::Storage::Search::ContentIndexer GetIndexer() const;
};

template <typename T>
struct impl_IIndexableContent
{
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IMap<String, IInspectable> Properties() const;
	Windows::Storage::Streams::IRandomAccessStream Stream() const;
	void Stream(Windows::Storage::Streams::IRandomAccessStream const & value) const;
	String StreamContentType() const;
	void StreamContentType(String const & value) const;
	template <unsigned S0> void StreamContentType(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IContentIndexer
{
	Windows::Foundation::IAsyncAction AddAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const;
	Windows::Foundation::IAsyncAction UpdateAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const;
	Windows::Foundation::IAsyncAction DeleteAsync(String const & contentId) const;
	template <unsigned S0> Windows::Foundation::IAsyncAction DeleteAsync(wchar_t const (&contentId)[S0]) const;
	Windows::Foundation::IAsyncAction DeleteMultipleAsync(Windows::Foundation::Collections::IIterable<String> const & contentIds) const;
	Windows::Foundation::IAsyncAction DeleteAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> RetrievePropertiesAsync(String const & contentId, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> RetrievePropertiesAsync(wchar_t const (&contentId)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
	unsigned long long Revision() const;
};

template <typename T>
struct impl_IValueAndLanguage
{
	String Language() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	IInspectable Value() const;
	void Value(IInspectable const & value) const;
};

template <typename T>
struct impl_IContentIndexerQueryOperations
{
	Windows::Storage::Search::ContentIndexerQuery CreateQuery(String const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder, String const & searchFilterLanguage) const;
	template <unsigned S0, unsigned S1> Windows::Storage::Search::ContentIndexerQuery CreateQuery(wchar_t const (&searchFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder, wchar_t const (&searchFilterLanguage)[S1]) const;
	Windows::Storage::Search::ContentIndexerQuery CreateQuery(String const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder) const;
	template <unsigned S0> Windows::Storage::Search::ContentIndexerQuery CreateQuery(wchar_t const (&searchFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder) const;
	Windows::Storage::Search::ContentIndexerQuery CreateQuery(String const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
	template <unsigned S0> Windows::Storage::Search::ContentIndexerQuery CreateQuery(wchar_t const (&searchFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
};

template <typename T>
struct impl_IContentIndexerQuery
{
	Windows::Foundation::IAsyncOperation<unsigned> GetCountAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> GetPropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> GetPropertiesAsync(unsigned startIndex, unsigned maxItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> GetAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> GetAsync(unsigned startIndex, unsigned maxItems) const;
	Windows::Storage::StorageFolder QueryFolder() const;
};

template <typename T>
struct impl_IQueryOptions
{
	Windows::Foundation::Collections::IVector<String> FileTypeFilter() const;
	Windows::Storage::Search::FolderDepth FolderDepth() const;
	void FolderDepth(Windows::Storage::Search::FolderDepth value) const;
	String ApplicationSearchFilter() const;
	void ApplicationSearchFilter(String const & value) const;
	template <unsigned S0> void ApplicationSearchFilter(wchar_t const (&value)[S0]) const;
	String UserSearchFilter() const;
	void UserSearchFilter(String const & value) const;
	template <unsigned S0> void UserSearchFilter(wchar_t const (&value)[S0]) const;
	String Language() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	Windows::Storage::Search::IndexerOption IndexerOption() const;
	void IndexerOption(Windows::Storage::Search::IndexerOption value) const;
	Windows::Foundation::Collections::IVector<Modern::Windows::Storage::Search::SortEntry> SortOrder() const;
	String GroupPropertyName() const;
	Windows::Storage::Search::DateStackOption DateStackOption() const;
	String SaveToString() const;
	void LoadFromString(String const & value) const;
	template <unsigned S0> void LoadFromString(wchar_t const (&value)[S0]) const;
	void SetThumbnailPrefetch(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize, Windows::Storage::FileProperties::ThumbnailOptions options) const;
	void SetPropertyPrefetch(Windows::Storage::FileProperties::PropertyPrefetchOptions options, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const;
};

template <typename T>
struct impl_IQueryOptionsWithProviderFilter
{
	Windows::Foundation::Collections::IVector<String> StorageProviderIdFilter() const;
};

template <typename T>
struct impl_IQueryOptionsFactory
{
	Windows::Storage::Search::QueryOptions CreateCommonFileQuery(Windows::Storage::Search::CommonFileQuery query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter) const;
	Windows::Storage::Search::QueryOptions CreateCommonFolderQuery(Windows::Storage::Search::CommonFolderQuery query) const;
};

template <typename T>
struct impl_IStorageQueryResultBase
{
	Windows::Foundation::IAsyncOperation<unsigned> GetItemCountAsync() const;
	Windows::Storage::StorageFolder Folder() const;
	EventRegistrationToken ContentsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken ContentsChanged(F handler) const;
	void ContentsChanged(EventRegistrationToken eventCookie) const;
	EventRegistrationToken OptionsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & changedHandler) const;
	template <typename F> EventRegistrationToken OptionsChanged(F changedHandler) const;
	void OptionsChanged(EventRegistrationToken eventCookie) const;
	Windows::Foundation::IAsyncOperation<unsigned> FindStartIndexAsync(IInspectable const & value) const;
	Windows::Storage::Search::QueryOptions GetCurrentQueryOptions() const;
	void ApplyNewQueryOptions(Windows::Storage::Search::QueryOptions const & newQueryOptions) const;
};

template <typename T>
struct impl_IStorageFileQueryResult
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync(unsigned startIndex, unsigned maxNumberOfItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync() const;
};

template <typename T>
struct impl_IStorageFileQueryResult2
{
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment>> GetMatchingPropertiesWithRanges(Windows::Storage::StorageFile const & file) const;
};

template <typename T>
struct impl_IStorageFolderQueryResult
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync(unsigned startIndex, unsigned maxNumberOfItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync() const;
};

template <typename T>
struct impl_IStorageItemQueryResult
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync(unsigned startIndex, unsigned maxNumberOfItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync() const;
};

template <typename T>
struct impl_IStorageFolderQueryOperations
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Search::IndexedState> GetIndexedStateAsync() const;
	Windows::Storage::Search::StorageFileQueryResult CreateFileQuery() const;
	Windows::Storage::Search::StorageFileQueryResult CreateFileQuery(Windows::Storage::Search::CommonFileQuery query) const;
	Windows::Storage::Search::StorageFileQueryResult CreateFileQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	Windows::Storage::Search::StorageFolderQueryResult CreateFolderQuery() const;
	Windows::Storage::Search::StorageFolderQueryResult CreateFolderQuery(Windows::Storage::Search::CommonFolderQuery query) const;
	Windows::Storage::Search::StorageFolderQueryResult CreateFolderQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	Windows::Storage::Search::StorageItemQueryResult CreateItemQuery() const;
	Windows::Storage::Search::StorageItemQueryResult CreateItemQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync(Windows::Storage::Search::CommonFileQuery query, unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync(Windows::Storage::Search::CommonFileQuery query) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery query, unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery query) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync(unsigned startIndex, unsigned maxItemsToRetrieve) const;
	bool AreQueryOptionsSupported(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	bool IsCommonFolderQuerySupported(Windows::Storage::Search::CommonFolderQuery query) const;
	bool IsCommonFileQuerySupported(Windows::Storage::Search::CommonFileQuery query) const;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

template <typename T>
struct impl_IDataReader
{
	unsigned UnconsumedBufferLength() const;
	Windows::Storage::Streams::UnicodeEncoding UnicodeEncoding() const;
	void UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding value) const;
	Windows::Storage::Streams::ByteOrder ByteOrder() const;
	void ByteOrder(Windows::Storage::Streams::ByteOrder value) const;
	Windows::Storage::Streams::InputStreamOptions InputStreamOptions() const;
	void InputStreamOptions(Windows::Storage::Streams::InputStreamOptions value) const;
	byte ReadByte() const;
	Windows::Storage::Streams::IBuffer ReadBuffer(unsigned length) const;
	bool ReadBoolean() const;
	GUID ReadGuid() const;
	short ReadInt16() const;
	int ReadInt32() const;
	long long ReadInt64() const;
	unsigned short ReadUInt16() const;
	unsigned ReadUInt32() const;
	unsigned long long ReadUInt64() const;
	float ReadSingle() const;
	double ReadDouble() const;
	String ReadString(unsigned codeUnitCount) const;
	Windows::Foundation::DateTime ReadDateTime() const;
	Windows::Foundation::TimeSpan ReadTimeSpan() const;
	Windows::Storage::Streams::DataReaderLoadOperation LoadAsync(unsigned count) const;
	Windows::Storage::Streams::IBuffer DetachBuffer() const;
	Windows::Storage::Streams::IInputStream DetachStream() const;
};

template <typename T>
struct impl_IDataReaderFactory
{
	Windows::Storage::Streams::DataReader CreateDataReader(Windows::Storage::Streams::IInputStream const & inputStream) const;
};

template <typename T>
struct impl_IDataReaderStatics
{
	Windows::Storage::Streams::DataReader FromBuffer(Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
struct impl_IDataWriter
{
	unsigned UnstoredBufferLength() const;
	Windows::Storage::Streams::UnicodeEncoding UnicodeEncoding() const;
	void UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding value) const;
	Windows::Storage::Streams::ByteOrder ByteOrder() const;
	void ByteOrder(Windows::Storage::Streams::ByteOrder value) const;
	void WriteByte(byte value) const;
	void WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer) const;
	void WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer, unsigned start, unsigned count) const;
	void WriteBoolean(bool value) const;
	void WriteGuid(GUID value) const;
	void WriteInt16(short value) const;
	void WriteInt32(int value) const;
	void WriteInt64(long long value) const;
	void WriteUInt16(unsigned short value) const;
	void WriteUInt32(unsigned value) const;
	void WriteUInt64(unsigned long long value) const;
	void WriteSingle(float value) const;
	void WriteDouble(double value) const;
	void WriteDateTime(Windows::Foundation::DateTime const & value) const;
	void WriteTimeSpan(Windows::Foundation::TimeSpan const & value) const;
	unsigned WriteString(String const & value) const;
	template <unsigned S0> unsigned WriteString(wchar_t const (&value)[S0]) const;
	unsigned MeasureString(String const & value) const;
	template <unsigned S0> unsigned MeasureString(wchar_t const (&value)[S0]) const;
	Windows::Storage::Streams::DataWriterStoreOperation StoreAsync() const;
	Windows::Foundation::IAsyncOperation<bool> FlushAsync() const;
	Windows::Storage::Streams::IBuffer DetachBuffer() const;
	Windows::Storage::Streams::IOutputStream DetachStream() const;
};

template <typename T>
struct impl_IDataWriterFactory
{
	Windows::Storage::Streams::DataWriter CreateDataWriter(Windows::Storage::Streams::IOutputStream const & outputStream) const;
};

template <typename T>
struct impl_IRandomAccessStreamStatics
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long bytesToCopy) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const;
};

template <typename T>
struct impl_IBufferFactory
{
	Windows::Storage::Streams::Buffer Create(unsigned capacity) const;
};

template <typename T>
struct impl_IBuffer
{
	unsigned Capacity() const;
	unsigned Length() const;
	void Length(unsigned value) const;
};

template <typename T>
struct impl_IContentTypeProvider
{
	String ContentType() const;
};

template <typename T>
struct impl_IRandomAccessStreamReference
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> OpenReadAsync() const;
};

template <typename T>
struct impl_IInputStreamReference
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> OpenSequentialReadAsync() const;
};

template <typename T>
struct impl_IRandomAccessStreamReferenceStatics
{
	Windows::Storage::Streams::RandomAccessStreamReference CreateFromFile(Windows::Storage::IStorageFile const & file) const;
	Windows::Storage::Streams::RandomAccessStreamReference CreateFromUri(Windows::Foundation::Uri const & uri) const;
	Windows::Storage::Streams::RandomAccessStreamReference CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream) const;
};

template <typename T>
struct impl_IInputStream
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned> ReadAsync(Windows::Storage::Streams::IBuffer const & buffer, unsigned count, Windows::Storage::Streams::InputStreamOptions options) const;
};

template <typename T>
struct impl_IOutputStream
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> WriteAsync(Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Foundation::IAsyncOperation<bool> FlushAsync() const;
};

template <typename T>
struct impl_IRandomAccessStream
{
	unsigned long long Size() const;
	void Size(unsigned long long value) const;
	Windows::Storage::Streams::IInputStream GetInputStreamAt(unsigned long long position) const;
	Windows::Storage::Streams::IOutputStream GetOutputStreamAt(unsigned long long position) const;
	unsigned long long Position() const;
	void Seek(unsigned long long position) const;
	Windows::Storage::Streams::IRandomAccessStream CloneStream() const;
	bool CanRead() const;
	bool CanWrite() const;
};

template <typename T>
struct impl_IRandomAccessStreamWithContentType
{
};

}}}}

namespace Modern { namespace Windows { namespace System {

template <typename T>
struct impl_ILauncherUIOptions
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::Point> InvocationPoint() const;
	void InvocationPoint(Windows::Foundation::IReference<Modern::Windows::Foundation::Point> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::Rect> SelectionRect() const;
	void SelectionRect(Windows::Foundation::IReference<Modern::Windows::Foundation::Rect> const & value) const;
	Windows::UI::Popups::Placement PreferredPlacement() const;
	void PreferredPlacement(Windows::UI::Popups::Placement value) const;
};

template <typename T>
struct impl_ILauncherOptions
{
	bool TreatAsUntrusted() const;
	void TreatAsUntrusted(bool value) const;
	bool DisplayApplicationPicker() const;
	void DisplayApplicationPicker(bool value) const;
	Windows::System::LauncherUIOptions UI() const;
	String PreferredApplicationPackageFamilyName() const;
	void PreferredApplicationPackageFamilyName(String const & value) const;
	template <unsigned S0> void PreferredApplicationPackageFamilyName(wchar_t const (&value)[S0]) const;
	String PreferredApplicationDisplayName() const;
	void PreferredApplicationDisplayName(String const & value) const;
	template <unsigned S0> void PreferredApplicationDisplayName(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri FallbackUri() const;
	void FallbackUri(Windows::Foundation::Uri const & value) const;
	String ContentType() const;
	void ContentType(String const & value) const;
	template <unsigned S0> void ContentType(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ILauncherViewOptions
{
	Windows::UI::ViewManagement::ViewSizePreference DesiredRemainingView() const;
	void DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference value) const;
};

template <typename T>
struct impl_ILauncherStatics
{
	Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options) const;
};

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

template <typename T>
struct impl_IDisplayRequest
{
	void RequestActive() const;
	void RequestRelease() const;
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

template <typename T>
struct impl_IHardwareToken
{
	Windows::Storage::Streams::IBuffer Id() const;
	Windows::Storage::Streams::IBuffer Signature() const;
	Windows::Storage::Streams::IBuffer Certificate() const;
};

template <typename T>
struct impl_IHardwareIdentificationStatics
{
	Windows::System::Profile::HardwareToken GetPackageSpecificToken(Windows::Storage::Streams::IBuffer const & nonce) const;
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

template <typename T>
struct impl_ISmbiosInformationStatics
{
	String SerialNumber() const;
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

template <typename T>
struct impl_IInteractiveSessionStatics
{
	bool IsRemote() const;
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

template <typename T>
struct impl_ITimerElapsedHandler
{
	void Invoke(Windows::System::Threading::ThreadPoolTimer const & timer) const;
};

template <typename T>
struct impl_ITimerDestroyedHandler
{
	void Invoke(Windows::System::Threading::ThreadPoolTimer const & timer) const;
};

template <typename T>
struct impl_IWorkItemHandler
{
	void Invoke(Windows::Foundation::IAsyncAction const & operation) const;
};

template <typename T>
struct impl_IThreadPoolStatics
{
	Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler) const;
	template <typename F> Windows::Foundation::IAsyncAction RunAsync(F handler) const;
	Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority) const;
	template <typename F> Windows::Foundation::IAsyncAction RunAsync(F handler, Windows::System::Threading::WorkItemPriority priority) const;
	Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options) const;
	template <typename F> Windows::Foundation::IAsyncAction RunAsync(F handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options) const;
};

template <typename T>
struct impl_IThreadPoolTimer
{
	Windows::Foundation::TimeSpan Period() const;
	Windows::Foundation::TimeSpan Delay() const;
	void Cancel() const;
};

template <typename T>
struct impl_IThreadPoolTimerStatics
{
	Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period) const;
	template <typename F> Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period) const;
	Windows::System::Threading::ThreadPoolTimer CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay) const;
	template <typename F> Windows::System::Threading::ThreadPoolTimer CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay) const;
	Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period, Windows::System::Threading::ITimerDestroyedHandler const & destroyed) const;
	template <typename F> Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period, F destroyed) const;
	Windows::System::Threading::ThreadPoolTimer CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay, Windows::System::Threading::ITimerDestroyedHandler const & destroyed) const;
	template <typename F> Windows::System::Threading::ThreadPoolTimer CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay, F destroyed) const;
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

template <typename T>
struct impl_ISignalHandler
{
	void Invoke(Windows::System::Threading::Core::SignalNotifier const & signalNotifier, bool timedOut) const;
};

template <typename T>
struct impl_ISignalNotifierStatics
{
	Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler) const;
	template <unsigned S0> Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler) const;
	template <typename F> Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, F handler) const;
	template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], F handler) const;
	Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <unsigned S0> Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <typename F> Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout) const;
	Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler) const;
	template <unsigned S0> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler) const;
	template <typename F> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, F handler) const;
	template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], F handler) const;
	Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <unsigned S0> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <typename F> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout) const;
	template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout) const;
};

template <typename T>
struct impl_IPreallocatedWorkItemFactory
{
	Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItem(Windows::System::Threading::IWorkItemHandler const & handler) const;
	template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItem(F handler) const;
	Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItemWithPriority(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority) const;
	template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItemWithPriority(F handler, Windows::System::Threading::WorkItemPriority priority) const;
	Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItemWithPriorityAndOptions(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options) const;
	template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem CreateWorkItemWithPriorityAndOptions(F handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options) const;
};

template <typename T>
struct impl_IPreallocatedWorkItem
{
	Windows::Foundation::IAsyncAction RunAsync() const;
};

template <typename T>
struct impl_ISignalNotifier
{
	void Enable() const;
	void Terminate() const;
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

template <typename T>
struct impl_IAdvertisingManagerStatics
{
	String AdvertisingId() const;
};

template <typename T>
struct impl_IUserInformationStatics
{
	bool AccountPictureChangeEnabled() const;
	bool NameAccessAllowed() const;
	Windows::Storage::IStorageFile GetAccountPicture(Windows::System::UserProfile::AccountPictureKind kind) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPictureAsync(Windows::Storage::IStorageFile const & image) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPicturesAsync(Windows::Storage::IStorageFile const & smallImage, Windows::Storage::IStorageFile const & largeImage, Windows::Storage::IStorageFile const & video) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPictureFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & image) const;
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPicturesFromStreamsAsync(Windows::Storage::Streams::IRandomAccessStream const & smallImage, Windows::Storage::Streams::IRandomAccessStream const & largeImage, Windows::Storage::Streams::IRandomAccessStream const & video) const;
	EventRegistrationToken AccountPictureChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const;
	template <typename F> EventRegistrationToken AccountPictureChanged(F changeHandler) const;
	void AccountPictureChanged(EventRegistrationToken token) const;
	Windows::Foundation::IAsyncOperation<String> GetDisplayNameAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetFirstNameAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetLastNameAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetPrincipalNameAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetSessionInitiationProtocolUriAsync() const;
	Windows::Foundation::IAsyncOperation<String> GetDomainNameAsync() const;
};

template <typename T>
struct impl_ILockScreenStatics
{
	Windows::Foundation::Uri OriginalImageFile() const;
	Windows::Storage::Streams::IRandomAccessStream GetImageStream() const;
	Windows::Foundation::IAsyncAction SetImageFileAsync(Windows::Storage::IStorageFile const & value) const;
	Windows::Foundation::IAsyncAction SetImageStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & value) const;
};

template <typename T>
struct impl_ILockScreenImageFeedStatics
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetImageFeedResult> RequestSetImageFeedAsync(Windows::Foundation::Uri const & syndicationFeedUri) const;
	bool TryRemoveImageFeed() const;
};

template <typename T>
struct impl_IGlobalizationPreferencesStatics
{
	Windows::Foundation::Collections::IVectorView<String> Calendars() const;
	Windows::Foundation::Collections::IVectorView<String> Clocks() const;
	Windows::Foundation::Collections::IVectorView<String> Currencies() const;
	Windows::Foundation::Collections::IVectorView<String> Languages() const;
	String HomeGeographicRegion() const;
	Windows::Globalization::DayOfWeek WeekStartsOn() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI {

template <typename T>
struct impl_IColorHelper
{
};

template <typename T>
struct impl_IColorHelperStatics
{
	Windows::UI::Color FromArgb(byte a, byte r, byte g, byte b) const;
};

template <typename T>
struct impl_IColors
{
};

template <typename T>
struct impl_IColorsStatics
{
	Windows::UI::Color AliceBlue() const;
	Windows::UI::Color AntiqueWhite() const;
	Windows::UI::Color Aqua() const;
	Windows::UI::Color Aquamarine() const;
	Windows::UI::Color Azure() const;
	Windows::UI::Color Beige() const;
	Windows::UI::Color Bisque() const;
	Windows::UI::Color Black() const;
	Windows::UI::Color BlanchedAlmond() const;
	Windows::UI::Color Blue() const;
	Windows::UI::Color BlueViolet() const;
	Windows::UI::Color Brown() const;
	Windows::UI::Color BurlyWood() const;
	Windows::UI::Color CadetBlue() const;
	Windows::UI::Color Chartreuse() const;
	Windows::UI::Color Chocolate() const;
	Windows::UI::Color Coral() const;
	Windows::UI::Color CornflowerBlue() const;
	Windows::UI::Color Cornsilk() const;
	Windows::UI::Color Crimson() const;
	Windows::UI::Color Cyan() const;
	Windows::UI::Color DarkBlue() const;
	Windows::UI::Color DarkCyan() const;
	Windows::UI::Color DarkGoldenrod() const;
	Windows::UI::Color DarkGray() const;
	Windows::UI::Color DarkGreen() const;
	Windows::UI::Color DarkKhaki() const;
	Windows::UI::Color DarkMagenta() const;
	Windows::UI::Color DarkOliveGreen() const;
	Windows::UI::Color DarkOrange() const;
	Windows::UI::Color DarkOrchid() const;
	Windows::UI::Color DarkRed() const;
	Windows::UI::Color DarkSalmon() const;
	Windows::UI::Color DarkSeaGreen() const;
	Windows::UI::Color DarkSlateBlue() const;
	Windows::UI::Color DarkSlateGray() const;
	Windows::UI::Color DarkTurquoise() const;
	Windows::UI::Color DarkViolet() const;
	Windows::UI::Color DeepPink() const;
	Windows::UI::Color DeepSkyBlue() const;
	Windows::UI::Color DimGray() const;
	Windows::UI::Color DodgerBlue() const;
	Windows::UI::Color Firebrick() const;
	Windows::UI::Color FloralWhite() const;
	Windows::UI::Color ForestGreen() const;
	Windows::UI::Color Fuchsia() const;
	Windows::UI::Color Gainsboro() const;
	Windows::UI::Color GhostWhite() const;
	Windows::UI::Color Gold() const;
	Windows::UI::Color Goldenrod() const;
	Windows::UI::Color Gray() const;
	Windows::UI::Color Green() const;
	Windows::UI::Color GreenYellow() const;
	Windows::UI::Color Honeydew() const;
	Windows::UI::Color HotPink() const;
	Windows::UI::Color IndianRed() const;
	Windows::UI::Color Indigo() const;
	Windows::UI::Color Ivory() const;
	Windows::UI::Color Khaki() const;
	Windows::UI::Color Lavender() const;
	Windows::UI::Color LavenderBlush() const;
	Windows::UI::Color LawnGreen() const;
	Windows::UI::Color LemonChiffon() const;
	Windows::UI::Color LightBlue() const;
	Windows::UI::Color LightCoral() const;
	Windows::UI::Color LightCyan() const;
	Windows::UI::Color LightGoldenrodYellow() const;
	Windows::UI::Color LightGreen() const;
	Windows::UI::Color LightGray() const;
	Windows::UI::Color LightPink() const;
	Windows::UI::Color LightSalmon() const;
	Windows::UI::Color LightSeaGreen() const;
	Windows::UI::Color LightSkyBlue() const;
	Windows::UI::Color LightSlateGray() const;
	Windows::UI::Color LightSteelBlue() const;
	Windows::UI::Color LightYellow() const;
	Windows::UI::Color Lime() const;
	Windows::UI::Color LimeGreen() const;
	Windows::UI::Color Linen() const;
	Windows::UI::Color Magenta() const;
	Windows::UI::Color Maroon() const;
	Windows::UI::Color MediumAquamarine() const;
	Windows::UI::Color MediumBlue() const;
	Windows::UI::Color MediumOrchid() const;
	Windows::UI::Color MediumPurple() const;
	Windows::UI::Color MediumSeaGreen() const;
	Windows::UI::Color MediumSlateBlue() const;
	Windows::UI::Color MediumSpringGreen() const;
	Windows::UI::Color MediumTurquoise() const;
	Windows::UI::Color MediumVioletRed() const;
	Windows::UI::Color MidnightBlue() const;
	Windows::UI::Color MintCream() const;
	Windows::UI::Color MistyRose() const;
	Windows::UI::Color Moccasin() const;
	Windows::UI::Color NavajoWhite() const;
	Windows::UI::Color Navy() const;
	Windows::UI::Color OldLace() const;
	Windows::UI::Color Olive() const;
	Windows::UI::Color OliveDrab() const;
	Windows::UI::Color Orange() const;
	Windows::UI::Color OrangeRed() const;
	Windows::UI::Color Orchid() const;
	Windows::UI::Color PaleGoldenrod() const;
	Windows::UI::Color PaleGreen() const;
	Windows::UI::Color PaleTurquoise() const;
	Windows::UI::Color PaleVioletRed() const;
	Windows::UI::Color PapayaWhip() const;
	Windows::UI::Color PeachPuff() const;
	Windows::UI::Color Peru() const;
	Windows::UI::Color Pink() const;
	Windows::UI::Color Plum() const;
	Windows::UI::Color PowderBlue() const;
	Windows::UI::Color Purple() const;
	Windows::UI::Color Red() const;
	Windows::UI::Color RosyBrown() const;
	Windows::UI::Color RoyalBlue() const;
	Windows::UI::Color SaddleBrown() const;
	Windows::UI::Color Salmon() const;
	Windows::UI::Color SandyBrown() const;
	Windows::UI::Color SeaGreen() const;
	Windows::UI::Color SeaShell() const;
	Windows::UI::Color Sienna() const;
	Windows::UI::Color Silver() const;
	Windows::UI::Color SkyBlue() const;
	Windows::UI::Color SlateBlue() const;
	Windows::UI::Color SlateGray() const;
	Windows::UI::Color Snow() const;
	Windows::UI::Color SpringGreen() const;
	Windows::UI::Color SteelBlue() const;
	Windows::UI::Color Tan() const;
	Windows::UI::Color Teal() const;
	Windows::UI::Color Thistle() const;
	Windows::UI::Color Tomato() const;
	Windows::UI::Color Transparent() const;
	Windows::UI::Color Turquoise() const;
	Windows::UI::Color Violet() const;
	Windows::UI::Color Wheat() const;
	Windows::UI::Color White() const;
	Windows::UI::Color WhiteSmoke() const;
	Windows::UI::Color Yellow() const;
	Windows::UI::Color YellowGreen() const;
};

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

template <typename T>
struct impl_IWebAccountProviderCommandInvokedHandler
{
	void Invoke(Windows::UI::ApplicationSettings::WebAccountProviderCommand const & command) const;
};

template <typename T>
struct impl_IWebAccountCommandInvokedHandler
{
	void Invoke(Windows::UI::ApplicationSettings::WebAccountCommand const & command, Windows::UI::ApplicationSettings::WebAccountInvokedArgs const & args) const;
};

template <typename T>
struct impl_ICredentialCommandCredentialDeletedHandler
{
	void Invoke(Windows::UI::ApplicationSettings::CredentialCommand const & command) const;
};

template <typename T>
struct impl_ISettingsCommandFactory
{
	Windows::UI::ApplicationSettings::SettingsCommand Create(IInspectable const & settingsCommandId, String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & handler) const;
	template <unsigned S0> Windows::UI::ApplicationSettings::SettingsCommand Create(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & handler) const;
	template <typename F> Windows::UI::ApplicationSettings::SettingsCommand Create(IInspectable const & settingsCommandId, String const & label, F handler) const;
	template <unsigned S0, typename F> Windows::UI::ApplicationSettings::SettingsCommand Create(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], F handler) const;
};

template <typename T>
struct impl_ISettingsCommandStatics
{
	Windows::UI::ApplicationSettings::SettingsCommand AccountsCommand() const;
};

template <typename T>
struct impl_ISettingsPaneCommandsRequest
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> ApplicationCommands() const;
};

template <typename T>
struct impl_ISettingsPaneCommandsRequestedEventArgs
{
	Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest Request() const;
};

template <typename T>
struct impl_ISettingsPaneStatics
{
	Windows::UI::ApplicationSettings::SettingsPane GetForCurrentView() const;
	void Show() const;
	Windows::UI::ApplicationSettings::SettingsEdgeLocation Edge() const;
};

template <typename T>
struct impl_ISettingsPane
{
	EventRegistrationToken CommandsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::ApplicationSettings::SettingsPane, Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CommandsRequested(F handler) const;
	void CommandsRequested(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IWebAccountProviderCommandFactory
{
	Windows::UI::ApplicationSettings::WebAccountProviderCommand CreateWebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler const & invoked) const;
	template <typename F> Windows::UI::ApplicationSettings::WebAccountProviderCommand CreateWebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, F invoked) const;
};

template <typename T>
struct impl_IWebAccountCommandFactory
{
	Windows::UI::ApplicationSettings::WebAccountCommand CreateWebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler const & invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions actions) const;
	template <typename F> Windows::UI::ApplicationSettings::WebAccountCommand CreateWebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, F invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions actions) const;
};

template <typename T>
struct impl_ICredentialCommandFactory
{
	Windows::UI::ApplicationSettings::CredentialCommand CreateCredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential) const;
	Windows::UI::ApplicationSettings::CredentialCommand CreateCredentialCommandWithHandler(Windows::Security::Credentials::PasswordCredential const & passwordCredential, Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler const & deleted) const;
	template <typename F> Windows::UI::ApplicationSettings::CredentialCommand CreateCredentialCommandWithHandler(Windows::Security::Credentials::PasswordCredential const & passwordCredential, F deleted) const;
};

template <typename T>
struct impl_IWebAccountProviderCommand
{
	Windows::Security::Credentials::WebAccountProvider WebAccountProvider() const;
	Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler Invoked() const;
};

template <typename T>
struct impl_IWebAccountInvokedArgs
{
	Windows::UI::ApplicationSettings::WebAccountAction Action() const;
};

template <typename T>
struct impl_IWebAccountCommand
{
	Windows::Security::Credentials::WebAccount WebAccount() const;
	Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler Invoked() const;
	Windows::UI::ApplicationSettings::SupportedWebAccountActions Actions() const;
};

template <typename T>
struct impl_ICredentialCommand
{
	Windows::Security::Credentials::PasswordCredential PasswordCredential() const;
	Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler CredentialDeleted() const;
};

template <typename T>
struct impl_IAccountsSettingsPaneEventDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IAccountsSettingsPaneCommandsRequestedEventArgs
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountProviderCommand> WebAccountProviderCommands() const;
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountCommand> WebAccountCommands() const;
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::CredentialCommand> CredentialCommands() const;
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> Commands() const;
	String HeaderText() const;
	void HeaderText(String const & value) const;
	template <unsigned S0> void HeaderText(wchar_t const (&value)[S0]) const;
	Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral GetDeferral() const;
};

template <typename T>
struct impl_IAccountsSettingsPaneStatics
{
	Windows::UI::ApplicationSettings::AccountsSettingsPane GetForCurrentView() const;
	void Show() const;
};

template <typename T>
struct impl_IAccountsSettingsPane
{
	EventRegistrationToken AccountCommandsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::ApplicationSettings::AccountsSettingsPane, Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AccountCommandsRequested(F handler) const;
	void AccountCommandsRequested(EventRegistrationToken cookie) const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

template <typename T>
struct impl_IDispatchedHandler
{
	void Invoke() const;
};

template <typename T>
struct impl_IIdleDispatchedHandler
{
	void Invoke(Windows::UI::Core::IdleDispatchedHandlerArgs const & e) const;
};

template <typename T>
struct impl_ICoreWindowEventArgs
{
	bool Handled() const;
	void Handled(bool value) const;
};

template <typename T>
struct impl_IAutomationProviderRequestedEventArgs
{
	IInspectable AutomationProvider() const;
	void AutomationProvider(IInspectable const & value) const;
};

template <typename T>
struct impl_ICharacterReceivedEventArgs
{
	unsigned KeyCode() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
};

template <typename T>
struct impl_IInputEnabledEventArgs
{
	bool InputEnabled() const;
};

template <typename T>
struct impl_IKeyEventArgs
{
	Windows::System::VirtualKey VirtualKey() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
};

template <typename T>
struct impl_IPointerEventArgs
{
	Windows::UI::Input::PointerPoint CurrentPoint() const;
	Windows::System::VirtualKeyModifiers KeyModifiers() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints() const;
};

template <typename T>
struct impl_ITouchHitTestingEventArgs
{
	Windows::UI::Core::CoreProximityEvaluation ProximityEvaluation() const;
	void ProximityEvaluation(Windows::UI::Core::CoreProximityEvaluation const & value) const;
	Windows::Foundation::Point Point() const;
	Windows::Foundation::Rect BoundingBox() const;
	Windows::UI::Core::CoreProximityEvaluation EvaluateProximity(Windows::Foundation::Rect const & controlBoundingBox) const;
};

template <typename T>
struct impl_IWindowActivatedEventArgs
{
	Windows::UI::Core::CoreWindowActivationState WindowActivationState() const;
};

template <typename T>
struct impl_IWindowSizeChangedEventArgs
{
	Windows::Foundation::Size Size() const;
};

template <typename T>
struct impl_IVisibilityChangedEventArgs
{
	bool Visible() const;
};

template <typename T>
struct impl_ICoreWindow
{
	IInspectable AutomationHostProvider() const;
	Windows::Foundation::Rect Bounds() const;
	Windows::Foundation::Collections::IPropertySet CustomProperties() const;
	Windows::UI::Core::CoreDispatcher Dispatcher() const;
	Windows::UI::Core::CoreWindowFlowDirection FlowDirection() const;
	void FlowDirection(Windows::UI::Core::CoreWindowFlowDirection value) const;
	bool IsInputEnabled() const;
	void IsInputEnabled(bool value) const;
	Windows::UI::Core::CoreCursor PointerCursor() const;
	void PointerCursor(Windows::UI::Core::CoreCursor const & value) const;
	Windows::Foundation::Point PointerPosition() const;
	bool Visible() const;
	void Activate() const;
	void Close() const;
	Windows::UI::Core::CoreVirtualKeyStates GetAsyncKeyState(Windows::System::VirtualKey virtualKey) const;
	Windows::UI::Core::CoreVirtualKeyStates GetKeyState(Windows::System::VirtualKey virtualKey) const;
	void ReleasePointerCapture() const;
	void SetPointerCapture() const;
	EventRegistrationToken Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowActivatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Activated(F handler) const;
	void Activated(EventRegistrationToken cookie) const;
	EventRegistrationToken AutomationProviderRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::AutomationProviderRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AutomationProviderRequested(F handler) const;
	void AutomationProviderRequested(EventRegistrationToken cookie) const;
	EventRegistrationToken CharacterReceived(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CharacterReceived(F handler) const;
	void CharacterReceived(EventRegistrationToken cookie) const;
	EventRegistrationToken Closed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Closed(F handler) const;
	void Closed(EventRegistrationToken cookie) const;
	EventRegistrationToken InputEnabled(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::InputEnabledEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken InputEnabled(F handler) const;
	void InputEnabled(EventRegistrationToken cookie) const;
	EventRegistrationToken KeyDown(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken KeyDown(F handler) const;
	void KeyDown(EventRegistrationToken cookie) const;
	EventRegistrationToken KeyUp(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken KeyUp(F handler) const;
	void KeyUp(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerCaptureLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerCaptureLost(F handler) const;
	void PointerCaptureLost(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerEntered(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerEntered(F handler) const;
	void PointerEntered(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerExited(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerExited(F handler) const;
	void PointerExited(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerMoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerMoved(F handler) const;
	void PointerMoved(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerPressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerPressed(F handler) const;
	void PointerPressed(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerReleased(F handler) const;
	void PointerReleased(EventRegistrationToken cookie) const;
	EventRegistrationToken TouchHitTesting(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TouchHitTesting(F handler) const;
	void TouchHitTesting(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerWheelChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerWheelChanged(F handler) const;
	void PointerWheelChanged(EventRegistrationToken cookie) const;
	EventRegistrationToken SizeChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowSizeChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken SizeChanged(F handler) const;
	void SizeChanged(EventRegistrationToken cookie) const;
	EventRegistrationToken VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::VisibilityChangedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VisibilityChanged(F handler) const;
	void VisibilityChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreWindowStatic
{
	Windows::UI::Core::CoreWindow GetForCurrentThread() const;
};

template <typename T>
struct impl_IAcceleratorKeyEventArgs
{
	Windows::UI::Core::CoreAcceleratorKeyEventType EventType() const;
	Windows::System::VirtualKey VirtualKey() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
};

template <typename T>
struct impl_ICoreAcceleratorKeys
{
	EventRegistrationToken AcceleratorKeyActivated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreDispatcher, Windows::UI::Core::AcceleratorKeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken AcceleratorKeyActivated(F handler) const;
	void AcceleratorKeyActivated(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreDispatcher
{
	bool HasThreadAccess() const;
	void ProcessEvents(Windows::UI::Core::CoreProcessEventsOption options) const;
	Windows::Foundation::IAsyncAction RunAsync(Windows::UI::Core::CoreDispatcherPriority priority, Windows::UI::Core::IDispatchedHandler const & agileCallback) const;
	template <typename F> Windows::Foundation::IAsyncAction RunAsync(Windows::UI::Core::CoreDispatcherPriority priority, F agileCallback) const;
	Windows::Foundation::IAsyncAction RunIdleAsync(Windows::UI::Core::IIdleDispatchedHandler const & agileCallback) const;
	template <typename F> Windows::Foundation::IAsyncAction RunIdleAsync(F agileCallback) const;
};

template <typename T>
struct impl_ICoreDispatcherWithTaskPriority
{
	Windows::UI::Core::CoreDispatcherPriority CurrentPriority() const;
	void CurrentPriority(Windows::UI::Core::CoreDispatcherPriority value) const;
	bool ShouldYield() const;
	bool ShouldYield(Windows::UI::Core::CoreDispatcherPriority priority) const;
	void StopProcessEvents() const;
};

template <typename T>
struct impl_IIdleDispatchedHandlerArgs
{
	bool IsDispatcherIdle() const;
};

template <typename T>
struct impl_ICoreCursor
{
	unsigned Id() const;
	Windows::UI::Core::CoreCursorType Type() const;
};

template <typename T>
struct impl_ICoreCursorFactory
{
	Windows::UI::Core::CoreCursor CreateCursor(Windows::UI::Core::CoreCursorType type, unsigned id) const;
};

template <typename T>
struct impl_IInitializeWithCoreWindow
{
	void Initialize(Windows::UI::Core::CoreWindow const & window) const;
};

template <typename T>
struct impl_ICoreWindowResizeManager
{
	void NotifyLayoutCompleted() const;
};

template <typename T>
struct impl_ICoreWindowResizeManagerLayoutCapability
{
	void ShouldWaitForLayoutCompletion(bool value) const;
	bool ShouldWaitForLayoutCompletion() const;
};

template <typename T>
struct impl_ICoreWindowResizeManagerStatics
{
	Windows::UI::Core::CoreWindowResizeManager GetForCurrentView() const;
};

template <typename T>
struct impl_ICoreInputSourceBase
{
	Windows::UI::Core::CoreDispatcher Dispatcher() const;
	bool IsInputEnabled() const;
	void IsInputEnabled(bool value) const;
	EventRegistrationToken InputEnabled(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::InputEnabledEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken InputEnabled(F handler) const;
	void InputEnabled(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICorePointerInputSource
{
	void ReleasePointerCapture() const;
	void SetPointerCapture() const;
	bool HasCapture() const;
	Windows::Foundation::Point PointerPosition() const;
	Windows::UI::Core::CoreCursor PointerCursor() const;
	void PointerCursor(Windows::UI::Core::CoreCursor const & value) const;
	EventRegistrationToken PointerCaptureLost(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerCaptureLost(F handler) const;
	void PointerCaptureLost(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerEntered(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerEntered(F handler) const;
	void PointerEntered(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerExited(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerExited(F handler) const;
	void PointerExited(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerMoved(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerMoved(F handler) const;
	void PointerMoved(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerPressed(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerPressed(F handler) const;
	void PointerPressed(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerReleased(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerReleased(F handler) const;
	void PointerReleased(EventRegistrationToken cookie) const;
	EventRegistrationToken PointerWheelChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken PointerWheelChanged(F handler) const;
	void PointerWheelChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreKeyboardInputSource
{
	Windows::UI::Core::CoreVirtualKeyStates GetCurrentKeyState(Windows::System::VirtualKey virtualKey) const;
	EventRegistrationToken CharacterReceived(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CharacterReceived(F handler) const;
	void CharacterReceived(EventRegistrationToken cookie) const;
	EventRegistrationToken KeyDown(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken KeyDown(F handler) const;
	void KeyDown(EventRegistrationToken cookie) const;
	EventRegistrationToken KeyUp(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken KeyUp(F handler) const;
	void KeyUp(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreComponentFocusable
{
	bool HasFocus() const;
	EventRegistrationToken GotFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken GotFocus(F handler) const;
	void GotFocus(EventRegistrationToken cookie) const;
	EventRegistrationToken LostFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken LostFocus(F handler) const;
	void LostFocus(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreTouchHitTesting
{
	EventRegistrationToken TouchHitTesting(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken TouchHitTesting(F handler) const;
	void TouchHitTesting(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_ICoreWindowPopupShowingEventArgs
{
	void SetDesiredSize(Windows::Foundation::Size const & value) const;
};

template <typename T>
struct impl_ICoreWindowDialog
{
	EventRegistrationToken Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Showing(F handler) const;
	void Showing(EventRegistrationToken cookie) const;
	Windows::Foundation::Size MaxSize() const;
	Windows::Foundation::Size MinSize() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	int IsInteractionDelayed() const;
	void IsInteractionDelayed(int value) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	unsigned DefaultCommandIndex() const;
	void DefaultCommandIndex(unsigned value) const;
	unsigned CancelCommandIndex() const;
	void CancelCommandIndex(unsigned value) const;
	Windows::UI::Popups::IUICommandInvokedHandler BackButtonCommand() const;
	void BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const;
	template <typename F> void BackButtonCommand(F value) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync() const;
};

template <typename T>
struct impl_ICoreWindowDialogFactory
{
	Windows::UI::Core::CoreWindowDialog CreateWithTitle(String const & title) const;
	template <unsigned S0> Windows::UI::Core::CoreWindowDialog CreateWithTitle(wchar_t const (&title)[S0]) const;
};

template <typename T>
struct impl_ICoreWindowFlyout
{
	EventRegistrationToken Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Showing(F handler) const;
	void Showing(EventRegistrationToken cookie) const;
	Windows::Foundation::Size MaxSize() const;
	Windows::Foundation::Size MinSize() const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	int IsInteractionDelayed() const;
	void IsInteractionDelayed(int value) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	unsigned DefaultCommandIndex() const;
	void DefaultCommandIndex(unsigned value) const;
	Windows::UI::Popups::IUICommandInvokedHandler BackButtonCommand() const;
	void BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const;
	template <typename F> void BackButtonCommand(F value) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync() const;
};

template <typename T>
struct impl_ICoreWindowFlyoutFactory
{
	Windows::UI::Core::CoreWindowFlyout Create(Windows::Foundation::Point const & position) const;
	Windows::UI::Core::CoreWindowFlyout CreateWithTitle(Windows::Foundation::Point const & position, String const & title) const;
	template <unsigned S0> Windows::UI::Core::CoreWindowFlyout CreateWithTitle(Windows::Foundation::Point const & position, wchar_t const (&title)[S0]) const;
};

template <typename T>
struct impl_ICoreWindowFactory
{
	Windows::UI::Core::CoreWindow CreateCoreWindow(String const & windowTitle) const;
	template <unsigned S0> Windows::UI::Core::CoreWindow CreateCoreWindow(wchar_t const (&windowTitle)[S0]) const;
	bool WindowReuseAllowed() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

template <typename T>
struct impl_IPropertyAnimation
{
	Windows::UI::Core::AnimationMetrics::PropertyAnimationType Type() const;
	Windows::Foundation::TimeSpan Delay() const;
	Windows::Foundation::TimeSpan Duration() const;
	Windows::Foundation::Point Control1() const;
	Windows::Foundation::Point Control2() const;
};

template <typename T>
struct impl_IScaleAnimation
{
	Windows::Foundation::IReference<float> InitialScaleX() const;
	Windows::Foundation::IReference<float> InitialScaleY() const;
	float FinalScaleX() const;
	float FinalScaleY() const;
	Windows::Foundation::Point NormalizedOrigin() const;
};

template <typename T>
struct impl_IOpacityAnimation
{
	Windows::Foundation::IReference<float> InitialOpacity() const;
	float FinalOpacity() const;
};

template <typename T>
struct impl_IAnimationDescription
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Core::AnimationMetrics::IPropertyAnimation> Animations() const;
	Windows::Foundation::TimeSpan StaggerDelay() const;
	float StaggerDelayFactor() const;
	Windows::Foundation::TimeSpan DelayLimit() const;
	int ZOrder() const;
};

template <typename T>
struct impl_IAnimationDescriptionFactory
{
	Windows::UI::Core::AnimationMetrics::AnimationDescription CreateInstance(Windows::UI::Core::AnimationMetrics::AnimationEffect effect, Windows::UI::Core::AnimationMetrics::AnimationEffectTarget target) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

template <typename T>
struct impl_IEdgeGestureEventArgs
{
	Windows::UI::Input::EdgeGestureKind Kind() const;
};

template <typename T>
struct impl_IEdgeGestureStatics
{
	Windows::UI::Input::EdgeGesture GetForCurrentView() const;
};

template <typename T>
struct impl_IEdgeGesture
{
	EventRegistrationToken Starting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Starting(F handler) const;
	void Starting(EventRegistrationToken token) const;
	EventRegistrationToken Completed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Completed(F handler) const;
	void Completed(EventRegistrationToken token) const;
	EventRegistrationToken Canceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Canceled(F handler) const;
	void Canceled(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ITappedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	unsigned TapCount() const;
};

template <typename T>
struct impl_IRightTappedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
};

template <typename T>
struct impl_IHoldingEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::HoldingState HoldingState() const;
};

template <typename T>
struct impl_IDraggingEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::DraggingState DraggingState() const;
};

template <typename T>
struct impl_IManipulationStartedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
};

template <typename T>
struct impl_IManipulationUpdatedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Delta() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
struct impl_IManipulationInertiaStartingEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Delta() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
struct impl_IManipulationCompletedEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
struct impl_ICrossSlidingEventArgs
{
	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::CrossSlidingState CrossSlidingState() const;
};

template <typename T>
struct impl_IMouseWheelParameters
{
	Windows::Foundation::Point CharTranslation() const;
	void CharTranslation(Windows::Foundation::Point const & value) const;
	float DeltaScale() const;
	void DeltaScale(float value) const;
	float DeltaRotationAngle() const;
	void DeltaRotationAngle(float value) const;
	Windows::Foundation::Point PageTranslation() const;
	void PageTranslation(Windows::Foundation::Point const & value) const;
};

template <typename T>
struct impl_IGestureRecognizer
{
	Windows::UI::Input::GestureSettings GestureSettings() const;
	void GestureSettings(Windows::UI::Input::GestureSettings value) const;
	bool IsInertial() const;
	bool IsActive() const;
	bool ShowGestureFeedback() const;
	void ShowGestureFeedback(bool value) const;
	Windows::Foundation::Point PivotCenter() const;
	void PivotCenter(Windows::Foundation::Point const & value) const;
	float PivotRadius() const;
	void PivotRadius(float value) const;
	float InertiaTranslationDeceleration() const;
	void InertiaTranslationDeceleration(float value) const;
	float InertiaRotationDeceleration() const;
	void InertiaRotationDeceleration(float value) const;
	float InertiaExpansionDeceleration() const;
	void InertiaExpansionDeceleration(float value) const;
	float InertiaTranslationDisplacement() const;
	void InertiaTranslationDisplacement(float value) const;
	float InertiaRotationAngle() const;
	void InertiaRotationAngle(float value) const;
	float InertiaExpansion() const;
	void InertiaExpansion(float value) const;
	bool ManipulationExact() const;
	void ManipulationExact(bool value) const;
	Windows::UI::Input::CrossSlideThresholds CrossSlideThresholds() const;
	void CrossSlideThresholds(Windows::UI::Input::CrossSlideThresholds const & value) const;
	bool CrossSlideHorizontally() const;
	void CrossSlideHorizontally(bool value) const;
	bool CrossSlideExact() const;
	void CrossSlideExact(bool value) const;
	bool AutoProcessInertia() const;
	void AutoProcessInertia(bool value) const;
	Windows::UI::Input::MouseWheelParameters MouseWheelParameters() const;
	bool CanBeDoubleTap(Windows::UI::Input::PointerPoint const & value) const;
	void ProcessDownEvent(Windows::UI::Input::PointerPoint const & value) const;
	void ProcessMoveEvents(Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> const & value) const;
	void ProcessUpEvent(Windows::UI::Input::PointerPoint const & value) const;
	void ProcessMouseWheelEvent(Windows::UI::Input::PointerPoint const & value, bool isShiftKeyDown, bool isControlKeyDown) const;
	void ProcessInertia() const;
	void CompleteGesture() const;
	EventRegistrationToken Tapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::TappedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Tapped(F handler) const;
	void Tapped(EventRegistrationToken cookie) const;
	EventRegistrationToken RightTapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::RightTappedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken RightTapped(F handler) const;
	void RightTapped(EventRegistrationToken cookie) const;
	EventRegistrationToken Holding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::HoldingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Holding(F handler) const;
	void Holding(EventRegistrationToken cookie) const;
	EventRegistrationToken Dragging(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::DraggingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Dragging(F handler) const;
	void Dragging(EventRegistrationToken cookie) const;
	EventRegistrationToken ManipulationStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationStartedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ManipulationStarted(F handler) const;
	void ManipulationStarted(EventRegistrationToken cookie) const;
	EventRegistrationToken ManipulationUpdated(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationUpdatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ManipulationUpdated(F handler) const;
	void ManipulationUpdated(EventRegistrationToken cookie) const;
	EventRegistrationToken ManipulationInertiaStarting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationInertiaStartingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ManipulationInertiaStarting(F handler) const;
	void ManipulationInertiaStarting(EventRegistrationToken cookie) const;
	EventRegistrationToken ManipulationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationCompletedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken ManipulationCompleted(F handler) const;
	void ManipulationCompleted(EventRegistrationToken cookie) const;
	EventRegistrationToken CrossSliding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::CrossSlidingEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken CrossSliding(F handler) const;
	void CrossSliding(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IPointerPointStatics
{
	Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId) const;
	Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const;
};

template <typename T>
struct impl_IPointerPointTransform
{
	Windows::UI::Input::IPointerPointTransform Inverse() const;
	bool TryTransform(Windows::Foundation::Point const & inPoint, Windows::Foundation::Point & outPoint) const;
	Windows::Foundation::Rect TransformBounds(Windows::Foundation::Rect const & rect) const;
};

template <typename T>
struct impl_IPointerPoint
{
	Windows::Devices::Input::PointerDevice PointerDevice() const;
	Windows::Foundation::Point Position() const;
	Windows::Foundation::Point RawPosition() const;
	unsigned PointerId() const;
	unsigned FrameId() const;
	unsigned long long Timestamp() const;
	bool IsInContact() const;
	Windows::UI::Input::PointerPointProperties Properties() const;
};

template <typename T>
struct impl_IPointerPointProperties
{
	float Pressure() const;
	bool IsInverted() const;
	bool IsEraser() const;
	float Orientation() const;
	float XTilt() const;
	float YTilt() const;
	float Twist() const;
	Windows::Foundation::Rect ContactRect() const;
	Windows::Foundation::Rect ContactRectRaw() const;
	bool TouchConfidence() const;
	bool IsLeftButtonPressed() const;
	bool IsRightButtonPressed() const;
	bool IsMiddleButtonPressed() const;
	int MouseWheelDelta() const;
	bool IsHorizontalMouseWheel() const;
	bool IsPrimary() const;
	bool IsInRange() const;
	bool IsCanceled() const;
	bool IsBarrelButtonPressed() const;
	bool IsXButton1Pressed() const;
	bool IsXButton2Pressed() const;
	Windows::UI::Input::PointerUpdateKind PointerUpdateKind() const;
	bool HasUsage(unsigned usagePage, unsigned usageId) const;
	int GetUsageValue(unsigned usagePage, unsigned usageId) const;
};

template <typename T>
struct impl_IPointerVisualizationSettings
{
	void IsContactFeedbackEnabled(bool value) const;
	bool IsContactFeedbackEnabled() const;
	void IsBarrelButtonFeedbackEnabled(bool value) const;
	bool IsBarrelButtonFeedbackEnabled() const;
};

template <typename T>
struct impl_IPointerVisualizationSettingsStatics
{
	Windows::UI::Input::PointerVisualizationSettings GetForCurrentView() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

template <typename T>
struct impl_IInkDrawingAttributes
{
	Windows::UI::Color Color() const;
	void Color(Windows::UI::Color const & value) const;
	Windows::UI::Input::Inking::PenTipShape PenTip() const;
	void PenTip(Windows::UI::Input::Inking::PenTipShape value) const;
	Windows::Foundation::Size Size() const;
	void Size(Windows::Foundation::Size const & value) const;
	bool IgnorePressure() const;
	void IgnorePressure(bool value) const;
	bool FitToCurve() const;
	void FitToCurve(bool value) const;
};

template <typename T>
struct impl_IInkStrokeRenderingSegment
{
	Windows::Foundation::Point Position() const;
	Windows::Foundation::Point BezierControlPoint1() const;
	Windows::Foundation::Point BezierControlPoint2() const;
	float Pressure() const;
	float TiltX() const;
	float TiltY() const;
	float Twist() const;
};

template <typename T>
struct impl_IInkStroke
{
	Windows::UI::Input::Inking::InkDrawingAttributes DrawingAttributes() const;
	void DrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & value) const;
	Windows::Foundation::Rect BoundingRect() const;
	bool Selected() const;
	void Selected(bool value) const;
	bool Recognized() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStrokeRenderingSegment> GetRenderingSegments() const;
	Windows::UI::Input::Inking::InkStroke Clone() const;
};

template <typename T>
struct impl_IInkStrokeBuilder
{
	void BeginStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::UI::Input::PointerPoint AppendToStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::UI::Input::Inking::InkStroke EndStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::UI::Input::Inking::InkStroke CreateStroke(Windows::Foundation::Collections::IIterable<Modern::Windows::Foundation::Point> const & points) const;
	void SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const;
};

template <typename T>
struct impl_IInkRecognitionResult
{
	Windows::Foundation::Rect BoundingRect() const;
	Windows::Foundation::Collections::IVectorView<String> GetTextCandidates() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> GetStrokes() const;
};

template <typename T>
struct impl_IInkStrokeContainer
{
	Windows::Foundation::Rect BoundingRect() const;
	void AddStroke(Windows::UI::Input::Inking::InkStroke const & stroke) const;
	Windows::Foundation::Rect DeleteSelected() const;
	Windows::Foundation::Rect MoveSelected(Windows::Foundation::Point const & translation) const;
	Windows::Foundation::Rect SelectWithPolyLine(Windows::Foundation::Collections::IIterable<Modern::Windows::Foundation::Point> const & polyline) const;
	Windows::Foundation::Rect SelectWithLine(Windows::Foundation::Point const & from, Windows::Foundation::Point const & to) const;
	void CopySelectedToClipboard() const;
	Windows::Foundation::Rect PasteFromClipboard(Windows::Foundation::Point const & position) const;
	bool CanPasteFromClipboard() const;
	Windows::Foundation::IAsyncActionWithProgress<unsigned long long> LoadAsync(Windows::Storage::Streams::IInputStream const & inputStream) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> SaveAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const;
	void UpdateRecognitionResults(Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> const & recognitionResults) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> GetStrokes() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> GetRecognitionResults() const;
};

template <typename T>
struct impl_IInkRecognizer
{
	String Name() const;
};

template <typename T>
struct impl_IInkRecognizerContainer
{
	void SetDefaultRecognizer(Windows::UI::Input::Inking::InkRecognizer const & recognizer) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> RecognizeAsync(Windows::UI::Input::Inking::InkStrokeContainer const & strokeCollection, Windows::UI::Input::Inking::InkRecognitionTarget recognitionTarget) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognizer> GetRecognizers() const;
};

template <typename T>
struct impl_IInkManager
{
	Windows::UI::Input::Inking::InkManipulationMode Mode() const;
	void Mode(Windows::UI::Input::Inking::InkManipulationMode value) const;
	void ProcessPointerDown(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	IInspectable ProcessPointerUpdate(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::Foundation::Rect ProcessPointerUp(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	void SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> RecognizeAsync(Windows::UI::Input::Inking::InkRecognitionTarget recognitionTarget) const;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

template <typename T>
struct impl_IToastDismissedEventArgs
{
	Windows::UI::Notifications::ToastDismissalReason Reason() const;
};

template <typename T>
struct impl_IToastFailedEventArgs
{
	HRESULT ErrorCode() const;
};

template <typename T>
struct impl_IToastActivatedEventArgs
{
	String Arguments() const;
};

template <typename T>
struct impl_ITileUpdateManagerStatics
{
	Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication() const;
	Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication(String const & applicationId) const;
	template <unsigned S0> Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication(wchar_t const (&applicationId)[S0]) const;
	Windows::UI::Notifications::TileUpdater CreateTileUpdaterForSecondaryTile(String const & tileId) const;
	template <unsigned S0> Windows::UI::Notifications::TileUpdater CreateTileUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::TileTemplateType type) const;
};

template <typename T>
struct impl_ITileUpdater
{
	void Update(Windows::UI::Notifications::TileNotification const & notification) const;
	void Clear() const;
	void EnableNotificationQueue(bool enable) const;
	Windows::UI::Notifications::NotificationSetting Setting() const;
	void AddToSchedule(Windows::UI::Notifications::ScheduledTileNotification const & scheduledTile) const;
	void RemoveFromSchedule(Windows::UI::Notifications::ScheduledTileNotification const & scheduledTile) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledTileNotification> GetScheduledTileNotifications() const;
	void StartPeriodicUpdate(Windows::Foundation::Uri const & tileContent, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StartPeriodicUpdate(Windows::Foundation::Uri const & tileContent, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StopPeriodicUpdate() const;
	void StartPeriodicUpdateBatch(Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & tileContents, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StartPeriodicUpdateBatch(Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & tileContents, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
};

template <typename T>
struct impl_ITileUpdater2
{
	void EnableNotificationQueueForSquare150x150(bool enable) const;
	void EnableNotificationQueueForWide310x150(bool enable) const;
	void EnableNotificationQueueForSquare310x310(bool enable) const;
};

template <typename T>
struct impl_IBadgeUpdateManagerStatics
{
	Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication() const;
	Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication(String const & applicationId) const;
	template <unsigned S0> Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication(wchar_t const (&applicationId)[S0]) const;
	Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForSecondaryTile(String const & tileId) const;
	template <unsigned S0> Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::BadgeTemplateType type) const;
};

template <typename T>
struct impl_IBadgeUpdater
{
	void Update(Windows::UI::Notifications::BadgeNotification const & notification) const;
	void Clear() const;
	void StartPeriodicUpdate(Windows::Foundation::Uri const & badgeContent, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StartPeriodicUpdate(Windows::Foundation::Uri const & badgeContent, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence requestedInterval) const;
	void StopPeriodicUpdate() const;
};

template <typename T>
struct impl_IToastNotificationManagerStatics
{
	Windows::UI::Notifications::ToastNotifier CreateToastNotifier() const;
	Windows::UI::Notifications::ToastNotifier CreateToastNotifier(String const & applicationId) const;
	template <unsigned S0> Windows::UI::Notifications::ToastNotifier CreateToastNotifier(wchar_t const (&applicationId)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::ToastTemplateType type) const;
};

template <typename T>
struct impl_IToastNotifier
{
	void Show(Windows::UI::Notifications::ToastNotification const & notification) const;
	void Hide(Windows::UI::Notifications::ToastNotification const & notification) const;
	Windows::UI::Notifications::NotificationSetting Setting() const;
	void AddToSchedule(Windows::UI::Notifications::ScheduledToastNotification const & scheduledToast) const;
	void RemoveFromSchedule(Windows::UI::Notifications::ScheduledToastNotification const & scheduledToast) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledToastNotification> GetScheduledToastNotifications() const;
};

template <typename T>
struct impl_ITileNotificationFactory
{
	Windows::UI::Notifications::TileNotification CreateTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const;
};

template <typename T>
struct impl_ITileNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	void ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> ExpirationTime() const;
	void Tag(String const & value) const;
	template <unsigned S0> void Tag(wchar_t const (&value)[S0]) const;
	String Tag() const;
};

template <typename T>
struct impl_IBadgeNotificationFactory
{
	Windows::UI::Notifications::BadgeNotification CreateBadgeNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const;
};

template <typename T>
struct impl_IBadgeNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	void ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> ExpirationTime() const;
};

template <typename T>
struct impl_IToastNotificationFactory
{
	Windows::UI::Notifications::ToastNotification CreateToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const;
};

template <typename T>
struct impl_IToastNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	void ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> ExpirationTime() const;
	EventRegistrationToken Dismissed(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastDismissedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Dismissed(F handler) const;
	void Dismissed(EventRegistrationToken cookie) const;
	EventRegistrationToken Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken Activated(F handler) const;
	void Activated(EventRegistrationToken cookie) const;
	EventRegistrationToken Failed(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastFailedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Failed(F handler) const;
	void Failed(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IScheduledToastNotificationFactory
{
	Windows::UI::Notifications::ScheduledToastNotification CreateScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) const;
	Windows::UI::Notifications::ScheduledToastNotification CreateScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime, Windows::Foundation::TimeSpan const & snoozeInterval, unsigned maximumSnoozeCount) const;
};

template <typename T>
struct impl_IScheduledToastNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	Windows::Foundation::DateTime DeliveryTime() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> SnoozeInterval() const;
	unsigned MaximumSnoozeCount() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String Id() const;
};

template <typename T>
struct impl_IScheduledTileNotificationFactory
{
	Windows::UI::Notifications::ScheduledTileNotification CreateScheduledTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) const;
};

template <typename T>
struct impl_IScheduledTileNotification
{
	Windows::Data::Xml::Dom::XmlDocument Content() const;
	Windows::Foundation::DateTime DeliveryTime() const;
	void ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> ExpirationTime() const;
	void Tag(String const & value) const;
	template <unsigned S0> void Tag(wchar_t const (&value)[S0]) const;
	String Tag() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	String Id() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

template <typename T>
struct impl_IUICommandInvokedHandler
{
	void Invoke(Windows::UI::Popups::IUICommand const & command) const;
};

template <typename T>
struct impl_IMessageDialog
{
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	unsigned DefaultCommandIndex() const;
	void DefaultCommandIndex(unsigned value) const;
	unsigned CancelCommandIndex() const;
	void CancelCommandIndex(unsigned value) const;
	String Content() const;
	void Content(String const & value) const;
	template <unsigned S0> void Content(wchar_t const (&value)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync() const;
	Windows::UI::Popups::MessageDialogOptions Options() const;
	void Options(Windows::UI::Popups::MessageDialogOptions value) const;
};

template <typename T>
struct impl_IMessageDialogFactory
{
	Windows::UI::Popups::MessageDialog Create(String const & content) const;
	template <unsigned S0> Windows::UI::Popups::MessageDialog Create(wchar_t const (&content)[S0]) const;
	Windows::UI::Popups::MessageDialog CreateWithTitle(String const & content, String const & title) const;
	template <unsigned S0, unsigned S1> Windows::UI::Popups::MessageDialog CreateWithTitle(wchar_t const (&content)[S0], wchar_t const (&title)[S1]) const;
};

template <typename T>
struct impl_IUICommand
{
	String Label() const;
	void Label(String const & value) const;
	template <unsigned S0> void Label(wchar_t const (&value)[S0]) const;
	Windows::UI::Popups::IUICommandInvokedHandler Invoked() const;
	void Invoked(Windows::UI::Popups::IUICommandInvokedHandler const & value) const;
	template <typename F> void Invoked(F value) const;
	IInspectable Id() const;
	void Id(IInspectable const & value) const;
};

template <typename T>
struct impl_IUICommandFactory
{
	Windows::UI::Popups::UICommand Create(String const & label) const;
	template <unsigned S0> Windows::UI::Popups::UICommand Create(wchar_t const (&label)[S0]) const;
	Windows::UI::Popups::UICommand CreateWithHandler(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action) const;
	template <unsigned S0> Windows::UI::Popups::UICommand CreateWithHandler(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action) const;
	template <typename F> Windows::UI::Popups::UICommand CreateWithHandler(String const & label, F action) const;
	template <unsigned S0, typename F> Windows::UI::Popups::UICommand CreateWithHandler(wchar_t const (&label)[S0], F action) const;
	Windows::UI::Popups::UICommand CreateWithHandlerAndId(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) const;
	template <unsigned S0> Windows::UI::Popups::UICommand CreateWithHandlerAndId(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) const;
	template <typename F> Windows::UI::Popups::UICommand CreateWithHandlerAndId(String const & label, F action, IInspectable const & commandId) const;
	template <unsigned S0, typename F> Windows::UI::Popups::UICommand CreateWithHandlerAndId(wchar_t const (&label)[S0], F action, IInspectable const & commandId) const;
};

template <typename T>
struct impl_IPopupMenu
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync(Windows::Foundation::Point const & invocationPoint) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowForSelectionAsync(Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

template <typename T>
struct impl_ISecondaryTile
{
	void TileId(String const & value) const;
	template <unsigned S0> void TileId(wchar_t const (&value)[S0]) const;
	String TileId() const;
	void Arguments(String const & value) const;
	template <unsigned S0> void Arguments(wchar_t const (&value)[S0]) const;
	String Arguments() const;
	void DisplayName(String const & value) const;
	template <unsigned S0> void DisplayName(wchar_t const (&value)[S0]) const;
	String DisplayName() const;
	void LockScreenBadgeLogo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri LockScreenBadgeLogo() const;
	void LockScreenDisplayBadgeAndTileText(bool value) const;
	bool LockScreenDisplayBadgeAndTileText() const;
	Windows::Foundation::IAsyncOperation<bool> RequestCreateAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestCreateAsync(Windows::Foundation::Point const & invocationPoint) const;
	Windows::Foundation::IAsyncOperation<bool> RequestCreateForSelectionAsync(Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<bool> RequestCreateForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<bool> RequestDeleteAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestDeleteAsync(Windows::Foundation::Point const & invocationPoint) const;
	Windows::Foundation::IAsyncOperation<bool> RequestDeleteForSelectionAsync(Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<bool> RequestDeleteForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<bool> UpdateAsync() const;
};

template <typename T>
struct impl_ISecondaryTile2
{
	void PhoneticName(String const & value) const;
	template <unsigned S0> void PhoneticName(wchar_t const (&value)[S0]) const;
	String PhoneticName() const;
	Windows::UI::StartScreen::SecondaryTileVisualElements VisualElements() const;
	void RoamingEnabled(bool value) const;
	bool RoamingEnabled() const;
	EventRegistrationToken VisualElementsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::StartScreen::SecondaryTile, Windows::UI::StartScreen::VisualElementsRequestedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken VisualElementsRequested(F handler) const;
	void VisualElementsRequested(EventRegistrationToken token) const;
};

template <typename T>
struct impl_ISecondaryTileVisualElements
{
	void Square30x30Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Square30x30Logo() const;
	void Square70x70Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Square70x70Logo() const;
	void Square150x150Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Square150x150Logo() const;
	void Wide310x150Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Wide310x150Logo() const;
	void Square310x310Logo(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri Square310x310Logo() const;
	void ForegroundText(Windows::UI::StartScreen::ForegroundText value) const;
	Windows::UI::StartScreen::ForegroundText ForegroundText() const;
	void BackgroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Color BackgroundColor() const;
	void ShowNameOnSquare150x150Logo(bool value) const;
	bool ShowNameOnSquare150x150Logo() const;
	void ShowNameOnWide310x150Logo(bool value) const;
	bool ShowNameOnWide310x150Logo() const;
	void ShowNameOnSquare310x310Logo(bool value) const;
	bool ShowNameOnSquare310x310Logo() const;
};

template <typename T>
struct impl_ISecondaryTileFactory
{
	Windows::UI::StartScreen::SecondaryTile CreateWithId(String const & tileId) const;
	template <unsigned S0> Windows::UI::StartScreen::SecondaryTile CreateWithId(wchar_t const (&tileId)[S0]) const;
};

template <typename T>
struct impl_ISecondaryTileFactory2
{
	Windows::UI::StartScreen::SecondaryTile CreateMinimalTile(String const & tileId, String const & displayName, String const & arguments, Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize desiredSize) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::UI::StartScreen::SecondaryTile CreateMinimalTile(wchar_t const (&tileId)[S0], wchar_t const (&displayName)[S1], wchar_t const (&arguments)[S2], Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize desiredSize) const;
};

template <typename T>
struct impl_ISecondaryTileStatics
{
	bool Exists(String const & tileId) const;
	template <unsigned S0> bool Exists(wchar_t const (&tileId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync(String const & applicationId) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync(wchar_t const (&applicationId)[S0]) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllForPackageAsync() const;
};

template <typename T>
struct impl_IVisualElementsRequestedEventArgs
{
	Windows::UI::StartScreen::VisualElementsRequest Request() const;
};

template <typename T>
struct impl_IVisualElementsRequest
{
	Windows::UI::StartScreen::SecondaryTileVisualElements VisualElements() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTileVisualElements> AlternateVisualElements() const;
	Windows::Foundation::DateTime Deadline() const;
	Windows::UI::StartScreen::VisualElementsRequestDeferral GetDeferral() const;
};

template <typename T>
struct impl_IVisualElementsRequestDeferral
{
	void Complete() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

template <typename T>
struct impl_ITextConstantsStatics
{
	Windows::UI::Color AutoColor() const;
	int MinUnitCount() const;
	int MaxUnitCount() const;
	Windows::UI::Color UndefinedColor() const;
	float UndefinedFloatValue() const;
	int UndefinedInt32Value() const;
	Windows::UI::Text::FontStretch UndefinedFontStretch() const;
	Windows::UI::Text::FontStyle UndefinedFontStyle() const;
};

template <typename T>
struct impl_ITextDocument
{
	Windows::UI::Text::CaretType CaretType() const;
	void CaretType(Windows::UI::Text::CaretType value) const;
	float DefaultTabStop() const;
	void DefaultTabStop(float value) const;
	Windows::UI::Text::ITextSelection Selection() const;
	unsigned UndoLimit() const;
	void UndoLimit(unsigned value) const;
	bool CanCopy() const;
	bool CanPaste() const;
	bool CanRedo() const;
	bool CanUndo() const;
	int ApplyDisplayUpdates() const;
	int BatchDisplayUpdates() const;
	void BeginUndoGroup() const;
	void EndUndoGroup() const;
	Windows::UI::Text::ITextCharacterFormat GetDefaultCharacterFormat() const;
	Windows::UI::Text::ITextParagraphFormat GetDefaultParagraphFormat() const;
	Windows::UI::Text::ITextRange GetRange(int startPosition, int endPosition) const;
	Windows::UI::Text::ITextRange GetRangeFromPoint(Windows::Foundation::Point const & point, Windows::UI::Text::PointOptions options) const;
	void GetText(Windows::UI::Text::TextGetOptions options, String & value) const;
	void LoadFromStream(Windows::UI::Text::TextSetOptions options, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	void Redo() const;
	void SaveToStream(Windows::UI::Text::TextGetOptions options, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	void SetDefaultCharacterFormat(Windows::UI::Text::ITextCharacterFormat const & value) const;
	void SetDefaultParagraphFormat(Windows::UI::Text::ITextParagraphFormat const & value) const;
	void SetText(Windows::UI::Text::TextSetOptions options, String const & value) const;
	template <unsigned S0> void SetText(Windows::UI::Text::TextSetOptions options, wchar_t const (&value)[S0]) const;
	void Undo() const;
};

template <typename T>
struct impl_ITextRange
{
	wchar_t Character() const;
	void Character(wchar_t value) const;
	Windows::UI::Text::ITextCharacterFormat CharacterFormat() const;
	void CharacterFormat(Windows::UI::Text::ITextCharacterFormat const & value) const;
	Windows::UI::Text::ITextRange FormattedText() const;
	void FormattedText(Windows::UI::Text::ITextRange const & value) const;
	int EndPosition() const;
	void EndPosition(int value) const;
	Windows::UI::Text::RangeGravity Gravity() const;
	void Gravity(Windows::UI::Text::RangeGravity value) const;
	int Length() const;
	String Link() const;
	void Link(String const & value) const;
	template <unsigned S0> void Link(wchar_t const (&value)[S0]) const;
	Windows::UI::Text::ITextParagraphFormat ParagraphFormat() const;
	void ParagraphFormat(Windows::UI::Text::ITextParagraphFormat const & value) const;
	int StartPosition() const;
	void StartPosition(int value) const;
	int StoryLength() const;
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	bool CanPaste(int format) const;
	void ChangeCase(Windows::UI::Text::LetterCase value) const;
	void Collapse(bool value) const;
	void Copy() const;
	void Cut() const;
	int Delete(Windows::UI::Text::TextRangeUnit unit, int count) const;
	int EndOf(Windows::UI::Text::TextRangeUnit unit, bool extend) const;
	int Expand(Windows::UI::Text::TextRangeUnit unit) const;
	int FindText(String const & value, int scanLength, Windows::UI::Text::FindOptions options) const;
	template <unsigned S0> int FindText(wchar_t const (&value)[S0], int scanLength, Windows::UI::Text::FindOptions options) const;
	void GetCharacterUtf32(unsigned & value, int offset) const;
	Windows::UI::Text::ITextRange GetClone() const;
	int GetIndex(Windows::UI::Text::TextRangeUnit unit) const;
	void GetPoint(Windows::UI::Text::HorizontalCharacterAlignment horizontalAlign, Windows::UI::Text::VerticalCharacterAlignment verticalAlign, Windows::UI::Text::PointOptions options, Windows::Foundation::Point & point) const;
	void GetRect(Windows::UI::Text::PointOptions options, Windows::Foundation::Rect & rect, int & hit) const;
	void GetText(Windows::UI::Text::TextGetOptions options, String & value) const;
	void GetTextViaStream(Windows::UI::Text::TextGetOptions options, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	bool InRange(Windows::UI::Text::ITextRange const & range) const;
	void InsertImage(int width, int height, int ascent, Windows::UI::Text::VerticalCharacterAlignment verticalAlign, String const & alternateText, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	template <unsigned S0> void InsertImage(int width, int height, int ascent, Windows::UI::Text::VerticalCharacterAlignment verticalAlign, wchar_t const (&alternateText)[S0], Windows::Storage::Streams::IRandomAccessStream const & value) const;
	bool InStory(Windows::UI::Text::ITextRange const & range) const;
	bool IsEqual(Windows::UI::Text::ITextRange const & range) const;
	int Move(Windows::UI::Text::TextRangeUnit unit, int count) const;
	int MoveEnd(Windows::UI::Text::TextRangeUnit unit, int count) const;
	int MoveStart(Windows::UI::Text::TextRangeUnit unit, int count) const;
	void Paste(int format) const;
	void ScrollIntoView(Windows::UI::Text::PointOptions value) const;
	void MatchSelection() const;
	void SetIndex(Windows::UI::Text::TextRangeUnit unit, int index, bool extend) const;
	void SetPoint(Windows::Foundation::Point const & point, Windows::UI::Text::PointOptions options, bool extend) const;
	void SetRange(int startPosition, int endPosition) const;
	void SetText(Windows::UI::Text::TextSetOptions options, String const & value) const;
	template <unsigned S0> void SetText(Windows::UI::Text::TextSetOptions options, wchar_t const (&value)[S0]) const;
	void SetTextViaStream(Windows::UI::Text::TextSetOptions options, Windows::Storage::Streams::IRandomAccessStream const & value) const;
	int StartOf(Windows::UI::Text::TextRangeUnit unit, bool extend) const;
};

template <typename T>
struct impl_ITextSelection
{
	Windows::UI::Text::SelectionOptions Options() const;
	void Options(Windows::UI::Text::SelectionOptions value) const;
	Windows::UI::Text::SelectionType Type() const;
	int EndKey(Windows::UI::Text::TextRangeUnit unit, bool extend) const;
	int HomeKey(Windows::UI::Text::TextRangeUnit unit, bool extend) const;
	int MoveDown(Windows::UI::Text::TextRangeUnit unit, int count, bool extend) const;
	int MoveLeft(Windows::UI::Text::TextRangeUnit unit, int count, bool extend) const;
	int MoveRight(Windows::UI::Text::TextRangeUnit unit, int count, bool extend) const;
	int MoveUp(Windows::UI::Text::TextRangeUnit unit, int count, bool extend) const;
	void TypeText(String const & value) const;
	template <unsigned S0> void TypeText(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ITextCharacterFormat
{
	Windows::UI::Text::FormatEffect AllCaps() const;
	void AllCaps(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Color BackgroundColor() const;
	void BackgroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Text::FormatEffect Bold() const;
	void Bold(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FontStretch FontStretch() const;
	void FontStretch(Windows::UI::Text::FontStretch value) const;
	Windows::UI::Text::FontStyle FontStyle() const;
	void FontStyle(Windows::UI::Text::FontStyle value) const;
	Windows::UI::Color ForegroundColor() const;
	void ForegroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Text::FormatEffect Hidden() const;
	void Hidden(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect Italic() const;
	void Italic(Windows::UI::Text::FormatEffect value) const;
	float Kerning() const;
	void Kerning(float value) const;
	String LanguageTag() const;
	void LanguageTag(String const & value) const;
	template <unsigned S0> void LanguageTag(wchar_t const (&value)[S0]) const;
	Windows::UI::Text::LinkType LinkType() const;
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	Windows::UI::Text::FormatEffect Outline() const;
	void Outline(Windows::UI::Text::FormatEffect value) const;
	float Position() const;
	void Position(float value) const;
	Windows::UI::Text::FormatEffect ProtectedText() const;
	void ProtectedText(Windows::UI::Text::FormatEffect value) const;
	float Size() const;
	void Size(float value) const;
	Windows::UI::Text::FormatEffect SmallCaps() const;
	void SmallCaps(Windows::UI::Text::FormatEffect value) const;
	float Spacing() const;
	void Spacing(float value) const;
	Windows::UI::Text::FormatEffect Strikethrough() const;
	void Strikethrough(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect Subscript() const;
	void Subscript(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect Superscript() const;
	void Superscript(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::TextScript TextScript() const;
	void TextScript(Windows::UI::Text::TextScript value) const;
	Windows::UI::Text::UnderlineType Underline() const;
	void Underline(Windows::UI::Text::UnderlineType value) const;
	int Weight() const;
	void Weight(int value) const;
	void SetClone(Windows::UI::Text::ITextCharacterFormat const & value) const;
	Windows::UI::Text::ITextCharacterFormat GetClone() const;
	bool IsEqual(Windows::UI::Text::ITextCharacterFormat const & format) const;
};

template <typename T>
struct impl_ITextParagraphFormat
{
	Windows::UI::Text::ParagraphAlignment Alignment() const;
	void Alignment(Windows::UI::Text::ParagraphAlignment value) const;
	float FirstLineIndent() const;
	Windows::UI::Text::FormatEffect KeepTogether() const;
	void KeepTogether(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect KeepWithNext() const;
	void KeepWithNext(Windows::UI::Text::FormatEffect value) const;
	float LeftIndent() const;
	float LineSpacing() const;
	Windows::UI::Text::LineSpacingRule LineSpacingRule() const;
	Windows::UI::Text::MarkerAlignment ListAlignment() const;
	void ListAlignment(Windows::UI::Text::MarkerAlignment value) const;
	int ListLevelIndex() const;
	void ListLevelIndex(int value) const;
	int ListStart() const;
	void ListStart(int value) const;
	Windows::UI::Text::MarkerStyle ListStyle() const;
	void ListStyle(Windows::UI::Text::MarkerStyle value) const;
	float ListTab() const;
	void ListTab(float value) const;
	Windows::UI::Text::MarkerType ListType() const;
	void ListType(Windows::UI::Text::MarkerType value) const;
	Windows::UI::Text::FormatEffect NoLineNumber() const;
	void NoLineNumber(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::FormatEffect PageBreakBefore() const;
	void PageBreakBefore(Windows::UI::Text::FormatEffect value) const;
	float RightIndent() const;
	void RightIndent(float value) const;
	Windows::UI::Text::FormatEffect RightToLeft() const;
	void RightToLeft(Windows::UI::Text::FormatEffect value) const;
	Windows::UI::Text::ParagraphStyle Style() const;
	void Style(Windows::UI::Text::ParagraphStyle value) const;
	float SpaceAfter() const;
	void SpaceAfter(float value) const;
	float SpaceBefore() const;
	void SpaceBefore(float value) const;
	Windows::UI::Text::FormatEffect WidowControl() const;
	void WidowControl(Windows::UI::Text::FormatEffect value) const;
	int TabCount() const;
	void AddTab(float position, Windows::UI::Text::TabAlignment align, Windows::UI::Text::TabLeader leader) const;
	void ClearAllTabs() const;
	void DeleteTab(float position) const;
	Windows::UI::Text::ITextParagraphFormat GetClone() const;
	void GetTab(int index, float & position, Windows::UI::Text::TabAlignment & align, Windows::UI::Text::TabLeader & leader) const;
	bool IsEqual(Windows::UI::Text::ITextParagraphFormat const & format) const;
	void SetClone(Windows::UI::Text::ITextParagraphFormat const & format) const;
	void SetIndents(float start, float left, float right) const;
	void SetLineSpacing(Windows::UI::Text::LineSpacingRule rule, float spacing) const;
};

template <typename T>
struct impl_IFontWeights
{
};

template <typename T>
struct impl_IFontWeightsStatics
{
	Windows::UI::Text::FontWeight Black() const;
	Windows::UI::Text::FontWeight Bold() const;
	Windows::UI::Text::FontWeight ExtraBlack() const;
	Windows::UI::Text::FontWeight ExtraBold() const;
	Windows::UI::Text::FontWeight ExtraLight() const;
	Windows::UI::Text::FontWeight Light() const;
	Windows::UI::Text::FontWeight Medium() const;
	Windows::UI::Text::FontWeight Normal() const;
	Windows::UI::Text::FontWeight SemiBold() const;
	Windows::UI::Text::FontWeight SemiLight() const;
	Windows::UI::Text::FontWeight Thin() const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

template <typename T>
struct impl_IApplicationViewSwitcherStatics
{
	void DisableShowingMainViewOnActivation() const;
	Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId) const;
	Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference) const;
	Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference, int anchorViewId, Windows::UI::ViewManagement::ViewSizePreference anchorSizePreference) const;
	Windows::Foundation::IAsyncAction SwitchAsync(int viewId) const;
	Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId) const;
	Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options) const;
	Windows::Foundation::IAsyncOperation<bool> PrepareForCustomAnimatedSwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options) const;
};

template <typename T>
struct impl_IApplicationViewInteropStatics
{
	int GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window) const;
};

template <typename T>
struct impl_IApplicationViewStatics2
{
	Windows::UI::ViewManagement::ApplicationView GetForCurrentView() const;
	bool TerminateAppOnFinalViewClose() const;
	void TerminateAppOnFinalViewClose(bool value) const;
};

template <typename T>
struct impl_IApplicationView
{
	Windows::UI::ViewManagement::ApplicationViewOrientation Orientation() const;
	bool AdjacentToLeftDisplayEdge() const;
	bool AdjacentToRightDisplayEdge() const;
	bool IsFullScreen() const;
	bool IsOnLockScreen() const;
	bool IsScreenCaptureEnabled() const;
	void IsScreenCaptureEnabled(bool value) const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	String Title() const;
	int Id() const;
	EventRegistrationToken Consolidated(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::ApplicationView, Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Consolidated(F handler) const;
	void Consolidated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IApplicationViewConsolidatedEventArgs
{
	bool IsUserInitiated() const;
};

template <typename T>
struct impl_IProjectionManagerStatics
{
	Windows::Foundation::IAsyncAction StartProjectingAsync(int projectionViewId, int anchorViewId) const;
	Windows::Foundation::IAsyncAction SwapDisplaysForViewsAsync(int projectionViewId, int anchorViewId) const;
	Windows::Foundation::IAsyncAction StopProjectingAsync(int projectionViewId, int anchorViewId) const;
	bool ProjectionDisplayAvailable() const;
	EventRegistrationToken ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken ProjectionDisplayAvailableChanged(F handler) const;
	void ProjectionDisplayAvailableChanged(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IInputPaneVisibilityEventArgs
{
	Windows::Foundation::Rect OccludedRect() const;
	void EnsuredFocusedElementInView(bool value) const;
	bool EnsuredFocusedElementInView() const;
};

template <typename T>
struct impl_IInputPane
{
	EventRegistrationToken Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Showing(F handler) const;
	void Showing(EventRegistrationToken token) const;
	EventRegistrationToken Hiding(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const;
	template <typename F> EventRegistrationToken Hiding(F handler) const;
	void Hiding(EventRegistrationToken token) const;
	Windows::Foundation::Rect OccludedRect() const;
};

template <typename T>
struct impl_IInputPaneStatics
{
	Windows::UI::ViewManagement::InputPane GetForCurrentView() const;
};

template <typename T>
struct impl_IAccessibilitySettings
{
	bool HighContrast() const;
	String HighContrastScheme() const;
	EventRegistrationToken HighContrastChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::AccessibilitySettings, IInspectable> const & handler) const;
	template <typename F> EventRegistrationToken HighContrastChanged(F handler) const;
	void HighContrastChanged(EventRegistrationToken cookie) const;
};

template <typename T>
struct impl_IUISettings
{
	Windows::UI::ViewManagement::HandPreference HandPreference() const;
	Windows::Foundation::Size CursorSize() const;
	Windows::Foundation::Size ScrollBarSize() const;
	Windows::Foundation::Size ScrollBarArrowSize() const;
	Windows::Foundation::Size ScrollBarThumbBoxSize() const;
	unsigned MessageDuration() const;
	bool AnimationsEnabled() const;
	bool CaretBrowsingEnabled() const;
	unsigned CaretBlinkRate() const;
	unsigned CaretWidth() const;
	unsigned DoubleClickTime() const;
	unsigned MouseHoverTime() const;
	Windows::UI::Color UIElementColor(Windows::UI::ViewManagement::UIElementType desiredElement) const;
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

template <typename T>
struct impl_IActivatedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::ApplicationModel::Activation::IActivatedEventArgs const & eventArgs) const;
};

template <typename T>
struct impl_IResumingEventHandler
{
	void Invoke(IInspectable const & sender) const;
};

template <typename T>
struct impl_ISuspendingEventHandler
{
	void Invoke(IInspectable const & sender, Windows::ApplicationModel::ISuspendingEventArgs const & e) const;
};

template <typename T>
struct impl_INavigatedEventHandler
{
	void Invoke(IInspectable const & sender, Windows::UI::WebUI::IWebUINavigatedEventArgs const & e) const;
};

template <typename T>
struct impl_IActivatedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IActivatedOperation
{
	Windows::UI::WebUI::ActivatedDeferral GetDeferral() const;
};

template <typename T>
struct impl_IActivatedEventArgsDeferral
{
	Windows::UI::WebUI::ActivatedOperation ActivatedOperation() const;
};

template <typename T>
struct impl_IWebUINavigatedEventArgs
{
	Windows::UI::WebUI::WebUINavigatedOperation NavigatedOperation() const;
};

template <typename T>
struct impl_IWebUIBackgroundTaskInstance
{
	bool Succeeded() const;
	void Succeeded(bool succeeded) const;
};

template <typename T>
struct impl_IWebUIBackgroundTaskInstanceStatics
{
	Windows::UI::WebUI::IWebUIBackgroundTaskInstance Current() const;
};

template <typename T>
struct impl_IWebUINavigatedDeferral
{
	void Complete() const;
};

template <typename T>
struct impl_IWebUINavigatedOperation
{
	Windows::UI::WebUI::WebUINavigatedDeferral GetDeferral() const;
};

template <typename T>
struct impl_IWebUIActivationStatics
{
	EventRegistrationToken Activated(Windows::UI::WebUI::IActivatedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Activated(F handler) const;
	void Activated(EventRegistrationToken token) const;
	EventRegistrationToken Suspending(Windows::UI::WebUI::ISuspendingEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Suspending(F handler) const;
	void Suspending(EventRegistrationToken token) const;
	EventRegistrationToken Resuming(Windows::UI::WebUI::IResumingEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Resuming(F handler) const;
	void Resuming(EventRegistrationToken token) const;
	EventRegistrationToken Navigated(Windows::UI::WebUI::INavigatedEventHandler const & handler) const;
	template <typename F> EventRegistrationToken Navigated(F handler) const;
	void Navigated(EventRegistrationToken token) const;
};

template <typename T>
struct impl_IHtmlPrintDocumentSource
{
	Windows::UI::WebUI::PrintContent Content() const;
	void Content(Windows::UI::WebUI::PrintContent value) const;
	float LeftMargin() const;
	void LeftMargin(float value) const;
	float TopMargin() const;
	void TopMargin(float value) const;
	float RightMargin() const;
	void RightMargin(float value) const;
	float BottomMargin() const;
	void BottomMargin(float value) const;
	bool EnableHeaderFooter() const;
	void EnableHeaderFooter(bool value) const;
	bool ShrinkToFit() const;
	void ShrinkToFit(bool value) const;
	float PercentScale() const;
	void PercentScale(float scalePercent) const;
	String PageRange() const;
	bool TrySetPageRange(String const & strPageRange) const;
	template <unsigned S0> bool TrySetPageRange(wchar_t const (&strPageRange)[S0]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Web {

template <typename T>
struct impl_IUriToStreamResolver
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> UriToStreamAsync(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_IWebErrorStatics
{
	Windows::Web::WebErrorStatus GetStatus(int hresult) const;
};

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

template <typename T>
struct impl_IResourceCollection
{
	Windows::Web::Syndication::ISyndicationText Title() const;
	Windows::Foundation::Uri Uri() const;
	Windows::Foundation::Collections::IVectorView<Windows::Web::Syndication::SyndicationCategory> Categories() const;
	Windows::Foundation::Collections::IVectorView<String> Accepts() const;
};

template <typename T>
struct impl_IWorkspace
{
	Windows::Web::Syndication::ISyndicationText Title() const;
	Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::ResourceCollection> Collections() const;
};

template <typename T>
struct impl_IServiceDocument
{
	Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::Workspace> Workspaces() const;
};

template <typename T>
struct impl_IAtomPubClient
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::AtomPub::ServiceDocument, Modern::Windows::Web::Syndication::RetrievalProgress> RetrieveServiceDocumentAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, Modern::Windows::Web::Syndication::RetrievalProgress> RetrieveMediaResourceAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::RetrievalProgress> RetrieveResourceAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> CreateResourceAsync(Windows::Foundation::Uri const & uri, String const & description, Windows::Web::Syndication::SyndicationItem const & item) const;
	template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> CreateResourceAsync(Windows::Foundation::Uri const & uri, wchar_t const (&description)[S0], Windows::Web::Syndication::SyndicationItem const & item) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> CreateMediaResourceAsync(Windows::Foundation::Uri const & uri, String const & mediaType, String const & description, Windows::Storage::Streams::IInputStream const & mediaStream) const;
	template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> CreateMediaResourceAsync(Windows::Foundation::Uri const & uri, wchar_t const (&mediaType)[S0], wchar_t const (&description)[S1], Windows::Storage::Streams::IInputStream const & mediaStream) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> UpdateMediaResourceAsync(Windows::Foundation::Uri const & uri, String const & mediaType, Windows::Storage::Streams::IInputStream const & mediaStream) const;
	template <unsigned S0> Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> UpdateMediaResourceAsync(Windows::Foundation::Uri const & uri, wchar_t const (&mediaType)[S0], Windows::Storage::Streams::IInputStream const & mediaStream) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> UpdateResourceAsync(Windows::Foundation::Uri const & uri, Windows::Web::Syndication::SyndicationItem const & item) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> UpdateResourceItemAsync(Windows::Web::Syndication::SyndicationItem const & item) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> DeleteResourceAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> DeleteResourceItemAsync(Windows::Web::Syndication::SyndicationItem const & item) const;
	void CancelAsyncOperations() const;
};

template <typename T>
struct impl_IAtomPubClientFactory
{
	Windows::Web::AtomPub::AtomPubClient CreateAtomPubClientWithCredentials(Windows::Security::Credentials::PasswordCredential const & serverCredential) const;
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

template <typename T>
struct impl_IHttpClientFactory
{
	Windows::Web::Http::HttpClient Create(Windows::Web::Http::Filters::IHttpFilter const & filter) const;
};

template <typename T>
struct impl_IHttpClient
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> DeleteAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> GetAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> GetAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::HttpCompletionOption completionOption) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, Modern::Windows::Web::Http::HttpProgress> GetBufferAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, Modern::Windows::Web::Http::HttpProgress> GetInputStreamAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<String, Modern::Windows::Web::Http::HttpProgress> GetStringAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> PostAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> PutAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request, Windows::Web::Http::HttpCompletionOption completionOption) const;
	Windows::Web::Http::Headers::HttpRequestHeaderCollection DefaultRequestHeaders() const;
};

template <typename T>
struct impl_IHttpContent
{
	Windows::Web::Http::Headers::HttpContentHeaderCollection Headers() const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> BufferAllAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned long long> ReadAsBufferAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, unsigned long long> ReadAsInputStreamAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<String, unsigned long long> ReadAsStringAsync() const;
	bool TryComputeLength(unsigned long long & length) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> WriteToStreamAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const;
};

template <typename T>
struct impl_IHttpCookieManager
{
	bool SetCookie(Windows::Web::Http::HttpCookie const & cookie) const;
	bool SetCookie(Windows::Web::Http::HttpCookie const & cookie, bool thirdParty) const;
	void DeleteCookie(Windows::Web::Http::HttpCookie const & cookie) const;
	Windows::Web::Http::HttpCookieCollection GetCookies(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_IHttpCookieFactory
{
	Windows::Web::Http::HttpCookie Create(String const & name, String const & domain, String const & path) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Http::HttpCookie Create(wchar_t const (&name)[S0], wchar_t const (&domain)[S1], wchar_t const (&path)[S2]) const;
};

template <typename T>
struct impl_IHttpCookie
{
	String Name() const;
	String Domain() const;
	String Path() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Expires() const;
	void Expires(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	bool HttpOnly() const;
	void HttpOnly(bool value) const;
	bool Secure() const;
	void Secure(bool value) const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IHttpMethodStatics
{
	Windows::Web::Http::HttpMethod Delete() const;
	Windows::Web::Http::HttpMethod Get() const;
	Windows::Web::Http::HttpMethod Head() const;
	Windows::Web::Http::HttpMethod Options() const;
	Windows::Web::Http::HttpMethod Patch() const;
	Windows::Web::Http::HttpMethod Post() const;
	Windows::Web::Http::HttpMethod Put() const;
};

template <typename T>
struct impl_IHttpMethodFactory
{
	Windows::Web::Http::HttpMethod Create(String const & method) const;
	template <unsigned S0> Windows::Web::Http::HttpMethod Create(wchar_t const (&method)[S0]) const;
};

template <typename T>
struct impl_IHttpMethod
{
	String Method() const;
};

template <typename T>
struct impl_IHttpTransportInformation
{
	Windows::Security::Cryptography::Certificates::Certificate ServerCertificate() const;
	Windows::Networking::Sockets::SocketSslErrorSeverity ServerCertificateErrorSeverity() const;
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> ServerCertificateErrors() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> ServerIntermediateCertificates() const;
};

template <typename T>
struct impl_IHttpRequestMessageFactory
{
	Windows::Web::Http::HttpRequestMessage Create(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_IHttpRequestMessage
{
	Windows::Web::Http::IHttpContent Content() const;
	void Content(Windows::Web::Http::IHttpContent const & value) const;
	Windows::Web::Http::Headers::HttpRequestHeaderCollection Headers() const;
	Windows::Web::Http::HttpMethod Method() const;
	void Method(Windows::Web::Http::HttpMethod const & value) const;
	Windows::Foundation::Collections::IMap<String, IInspectable> Properties() const;
	Windows::Foundation::Uri RequestUri() const;
	void RequestUri(Windows::Foundation::Uri const & value) const;
	Windows::Web::Http::HttpTransportInformation TransportInformation() const;
};

template <typename T>
struct impl_IHttpResponseMessageFactory
{
	Windows::Web::Http::HttpResponseMessage Create(Windows::Web::Http::HttpStatusCode statusCode) const;
};

template <typename T>
struct impl_IHttpResponseMessage
{
	Windows::Web::Http::IHttpContent Content() const;
	void Content(Windows::Web::Http::IHttpContent const & value) const;
	Windows::Web::Http::Headers::HttpResponseHeaderCollection Headers() const;
	bool IsSuccessStatusCode() const;
	String ReasonPhrase() const;
	void ReasonPhrase(String const & value) const;
	template <unsigned S0> void ReasonPhrase(wchar_t const (&value)[S0]) const;
	Windows::Web::Http::HttpRequestMessage RequestMessage() const;
	void RequestMessage(Windows::Web::Http::HttpRequestMessage const & value) const;
	Windows::Web::Http::HttpResponseMessageSource Source() const;
	void Source(Windows::Web::Http::HttpResponseMessageSource value) const;
	Windows::Web::Http::HttpStatusCode StatusCode() const;
	void StatusCode(Windows::Web::Http::HttpStatusCode value) const;
	Windows::Web::Http::HttpVersion Version() const;
	void Version(Windows::Web::Http::HttpVersion value) const;
	Windows::Web::Http::HttpResponseMessage EnsureSuccessStatusCode() const;
};

template <typename T>
struct impl_IHttpStringContentFactory
{
	Windows::Web::Http::HttpStringContent CreateFromString(String const & content) const;
	template <unsigned S0> Windows::Web::Http::HttpStringContent CreateFromString(wchar_t const (&content)[S0]) const;
	Windows::Web::Http::HttpStringContent CreateFromStringWithEncoding(String const & content, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	template <unsigned S0> Windows::Web::Http::HttpStringContent CreateFromStringWithEncoding(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Web::Http::HttpStringContent CreateFromStringWithEncodingAndMediaType(String const & content, Windows::Storage::Streams::UnicodeEncoding encoding, String const & mediaType) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::HttpStringContent CreateFromStringWithEncodingAndMediaType(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding encoding, wchar_t const (&mediaType)[S1]) const;
};

template <typename T>
struct impl_IHttpBufferContentFactory
{
	Windows::Web::Http::HttpBufferContent CreateFromBuffer(Windows::Storage::Streams::IBuffer const & content) const;
	Windows::Web::Http::HttpBufferContent CreateFromBufferWithOffset(Windows::Storage::Streams::IBuffer const & content, unsigned offset, unsigned count) const;
};

template <typename T>
struct impl_IHttpStreamContentFactory
{
	Windows::Web::Http::HttpStreamContent CreateFromInputStream(Windows::Storage::Streams::IInputStream const & content) const;
};

template <typename T>
struct impl_IHttpFormUrlEncodedContentFactory
{
	Windows::Web::Http::HttpFormUrlEncodedContent Create(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content) const;
};

template <typename T>
struct impl_IHttpMultipartContentFactory
{
	Windows::Web::Http::HttpMultipartContent CreateWithSubtype(String const & subtype) const;
	template <unsigned S0> Windows::Web::Http::HttpMultipartContent CreateWithSubtype(wchar_t const (&subtype)[S0]) const;
	Windows::Web::Http::HttpMultipartContent CreateWithSubtypeAndBoundary(String const & subtype, String const & boundary) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::HttpMultipartContent CreateWithSubtypeAndBoundary(wchar_t const (&subtype)[S0], wchar_t const (&boundary)[S1]) const;
};

template <typename T>
struct impl_IHttpMultipartContent
{
	void Add(Windows::Web::Http::IHttpContent const & content) const;
};

template <typename T>
struct impl_IHttpMultipartFormDataContentFactory
{
	Windows::Web::Http::HttpMultipartFormDataContent CreateWithBoundary(String const & boundary) const;
	template <unsigned S0> Windows::Web::Http::HttpMultipartFormDataContent CreateWithBoundary(wchar_t const (&boundary)[S0]) const;
};

template <typename T>
struct impl_IHttpMultipartFormDataContent
{
	void Add(Windows::Web::Http::IHttpContent const & content) const;
	void Add(Windows::Web::Http::IHttpContent const & content, String const & name) const;
	template <unsigned S0> void Add(Windows::Web::Http::IHttpContent const & content, wchar_t const (&name)[S0]) const;
	void Add(Windows::Web::Http::IHttpContent const & content, String const & name, String const & fileName) const;
	template <unsigned S0, unsigned S1> void Add(Windows::Web::Http::IHttpContent const & content, wchar_t const (&name)[S0], wchar_t const (&fileName)[S1]) const;
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

template <typename T>
struct impl_IHttpFilter
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const;
};

template <typename T>
struct impl_IHttpCacheControl
{
	Windows::Web::Http::Filters::HttpCacheReadBehavior ReadBehavior() const;
	void ReadBehavior(Windows::Web::Http::Filters::HttpCacheReadBehavior value) const;
	Windows::Web::Http::Filters::HttpCacheWriteBehavior WriteBehavior() const;
	void WriteBehavior(Windows::Web::Http::Filters::HttpCacheWriteBehavior value) const;
};

template <typename T>
struct impl_IHttpBaseProtocolFilter
{
	bool AllowAutoRedirect() const;
	void AllowAutoRedirect(bool value) const;
	bool AllowUI() const;
	void AllowUI(bool value) const;
	bool AutomaticDecompression() const;
	void AutomaticDecompression(bool value) const;
	Windows::Web::Http::Filters::HttpCacheControl CacheControl() const;
	Windows::Web::Http::HttpCookieManager CookieManager() const;
	Windows::Security::Cryptography::Certificates::Certificate ClientCertificate() const;
	void ClientCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
	Windows::Foundation::Collections::IVector<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> IgnorableServerCertificateErrors() const;
	unsigned MaxConnectionsPerServer() const;
	void MaxConnectionsPerServer(unsigned value) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	bool UseProxy() const;
	void UseProxy(bool value) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

template <typename T>
struct impl_IHttpContentHeaderCollection
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue ContentDisposition() const;
	void ContentDisposition(Windows::Web::Http::Headers::HttpContentDispositionHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection ContentEncoding() const;
	Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection ContentLanguage() const;
	Windows::Foundation::IReference<unsigned long long> ContentLength() const;
	void ContentLength(Windows::Foundation::IReference<unsigned long long> const & value) const;
	Windows::Foundation::Uri ContentLocation() const;
	void ContentLocation(Windows::Foundation::Uri const & value) const;
	Windows::Storage::Streams::IBuffer ContentMD5() const;
	void ContentMD5(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue ContentRange() const;
	void ContentRange(Windows::Web::Http::Headers::HttpContentRangeHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue ContentType() const;
	void ContentType(Windows::Web::Http::Headers::HttpMediaTypeHeaderValue const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Expires() const;
	void Expires(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> LastModified() const;
	void LastModified(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	void Append(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> void Append(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
	bool TryAppendWithoutValidation(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> bool TryAppendWithoutValidation(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpRequestHeaderCollection
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection Accept() const;
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection AcceptEncoding() const;
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection AcceptLanguage() const;
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue Authorization() const;
	void Authorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection CacheControl() const;
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection Connection() const;
	Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection Cookie() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Date() const;
	void Date(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection Expect() const;
	String From() const;
	void From(String const & value) const;
	template <unsigned S0> void From(wchar_t const (&value)[S0]) const;
	Windows::Networking::HostName Host() const;
	void Host(Windows::Networking::HostName const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> IfModifiedSince() const;
	void IfModifiedSince(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> IfUnmodifiedSince() const;
	void IfUnmodifiedSince(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<unsigned> MaxForwards() const;
	void MaxForwards(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue ProxyAuthorization() const;
	void ProxyAuthorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const;
	Windows::Foundation::Uri Referer() const;
	void Referer(Windows::Foundation::Uri const & value) const;
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection TransferEncoding() const;
	Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection UserAgent() const;
	void Append(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> void Append(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
	bool TryAppendWithoutValidation(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> bool TryAppendWithoutValidation(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpResponseHeaderCollection
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> Age() const;
	void Age(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Web::Http::Headers::HttpMethodHeaderValueCollection Allow() const;
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection CacheControl() const;
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection Connection() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Date() const;
	void Date(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::Uri Location() const;
	void Location(Windows::Foundation::Uri const & value) const;
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection ProxyAuthenticate() const;
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue RetryAfter() const;
	void RetryAfter(Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection TransferEncoding() const;
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection WwwAuthenticate() const;
	void Append(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> void Append(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
	bool TryAppendWithoutValidation(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> bool TryAppendWithoutValidation(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpCacheDirectiveHeaderValueCollection
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> MaxAge() const;
	void MaxAge(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> MaxStale() const;
	void MaxStale(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> MinFresh() const;
	void MinFresh(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> SharedMaxAge() const;
	void SharedMaxAge(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const;
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpChallengeHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue) const;
};

template <typename T>
struct impl_IHttpChallengeHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromScheme(String const & scheme) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromScheme(wchar_t const (&scheme)[S0]) const;
	Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromSchemeWithToken(String const & scheme, String const & token) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromSchemeWithToken(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]) const;
};

template <typename T>
struct impl_IHttpChallengeHeaderValue
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	String Scheme() const;
	String Token() const;
};

template <typename T>
struct impl_IHttpChallengeHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpCredentialsHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue) const;
};

template <typename T>
struct impl_IHttpCredentialsHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromScheme(String const & scheme) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromScheme(wchar_t const (&scheme)[S0]) const;
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromSchemeWithToken(String const & scheme, String const & token) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromSchemeWithToken(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]) const;
};

template <typename T>
struct impl_IHttpCredentialsHeaderValue
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	String Scheme() const;
	String Token() const;
};

template <typename T>
struct impl_IHttpConnectionOptionHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue) const;
};

template <typename T>
struct impl_IHttpConnectionOptionHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Create(String const & token) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Create(wchar_t const (&token)[S0]) const;
};

template <typename T>
struct impl_IHttpConnectionOptionHeaderValue
{
	String Token() const;
};

template <typename T>
struct impl_IHttpConnectionOptionHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpContentCodingHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue) const;
};

template <typename T>
struct impl_IHttpContentCodingHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue Create(String const & contentCoding) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingHeaderValue Create(wchar_t const (&contentCoding)[S0]) const;
};

template <typename T>
struct impl_IHttpContentCodingHeaderValue
{
	String ContentCoding() const;
};

template <typename T>
struct impl_IHttpContentCodingHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpContentDispositionHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue) const;
};

template <typename T>
struct impl_IHttpContentDispositionHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Create(String const & dispositionType) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Create(wchar_t const (&dispositionType)[S0]) const;
};

template <typename T>
struct impl_IHttpContentDispositionHeaderValue
{
	String DispositionType() const;
	void DispositionType(String const & value) const;
	template <unsigned S0> void DispositionType(wchar_t const (&value)[S0]) const;
	String FileName() const;
	void FileName(String const & value) const;
	template <unsigned S0> void FileName(wchar_t const (&value)[S0]) const;
	String FileNameStar() const;
	void FileNameStar(String const & value) const;
	template <unsigned S0> void FileNameStar(wchar_t const (&value)[S0]) const;
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	Windows::Foundation::IReference<unsigned long long> Size() const;
	void Size(Windows::Foundation::IReference<unsigned long long> const & value) const;
};

template <typename T>
struct impl_IHttpContentRangeHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue) const;
};

template <typename T>
struct impl_IHttpContentRangeHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue CreateFromLength(unsigned long long length) const;
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue CreateFromRange(unsigned long long from, unsigned long long to) const;
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue CreateFromRangeWithLength(unsigned long long from, unsigned long long to, unsigned long long length) const;
};

template <typename T>
struct impl_IHttpContentRangeHeaderValue
{
	Windows::Foundation::IReference<unsigned long long> FirstBytePosition() const;
	Windows::Foundation::IReference<unsigned long long> LastBytePosition() const;
	Windows::Foundation::IReference<unsigned long long> Length() const;
	String Unit() const;
	void Unit(String const & value) const;
	template <unsigned S0> void Unit(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IHttpCookiePairHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue) const;
};

template <typename T>
struct impl_IHttpCookiePairHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromName(String const & name) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromName(wchar_t const (&name)[S0]) const;
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromNameWithValue(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromNameWithValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpCookiePairHeaderValue
{
	String Name() const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IHttpCookiePairHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpDateOrDeltaHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue) const;
};

template <typename T>
struct impl_IHttpDateOrDeltaHeaderValue
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> Date() const;
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> Delta() const;
};

template <typename T>
struct impl_IHttpExpectationHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue) const;
};

template <typename T>
struct impl_IHttpExpectationHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromName(String const & name) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromName(wchar_t const (&name)[S0]) const;
	Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromNameWithValue(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromNameWithValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpExpectationHeaderValue
{
	String Name() const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
};

template <typename T>
struct impl_IHttpExpectationHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpLanguageHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpLanguageRangeWithQualityHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue) const;
};

template <typename T>
struct impl_IHttpLanguageRangeWithQualityHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRange(String const & languageRange) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRange(wchar_t const (&languageRange)[S0]) const;
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRangeWithQuality(String const & languageRange, double quality) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRangeWithQuality(wchar_t const (&languageRange)[S0], double quality) const;
};

template <typename T>
struct impl_IHttpLanguageRangeWithQualityHeaderValue
{
	String LanguageRange() const;
	Windows::Foundation::IReference<double> Quality() const;
};

template <typename T>
struct impl_IHttpLanguageRangeWithQualityHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpMediaTypeHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue) const;
};

template <typename T>
struct impl_IHttpMediaTypeHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Create(String const & mediaType) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Create(wchar_t const (&mediaType)[S0]) const;
};

template <typename T>
struct impl_IHttpMediaTypeHeaderValue
{
	String CharSet() const;
	void CharSet(String const & value) const;
	template <unsigned S0> void CharSet(wchar_t const (&value)[S0]) const;
	String MediaType() const;
	void MediaType(String const & value) const;
	template <unsigned S0> void MediaType(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
};

template <typename T>
struct impl_IHttpMediaTypeWithQualityHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue) const;
};

template <typename T>
struct impl_IHttpMediaTypeWithQualityHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaType(String const & mediaType) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaType(wchar_t const (&mediaType)[S0]) const;
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaTypeWithQuality(String const & mediaType, double quality) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaTypeWithQuality(wchar_t const (&mediaType)[S0], double quality) const;
};

template <typename T>
struct impl_IHttpMediaTypeWithQualityHeaderValue
{
	String CharSet() const;
	void CharSet(String const & value) const;
	template <unsigned S0> void CharSet(wchar_t const (&value)[S0]) const;
	String MediaType() const;
	void MediaType(String const & value) const;
	template <unsigned S0> void MediaType(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	Windows::Foundation::IReference<double> Quality() const;
	void Quality(Windows::Foundation::IReference<double> const & value) const;
};

template <typename T>
struct impl_IHttpMediaTypeWithQualityHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpMethodHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpNameValueHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue) const;
};

template <typename T>
struct impl_IHttpNameValueHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromName(String const & name) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromName(wchar_t const (&name)[S0]) const;
	Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromNameWithValue(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromNameWithValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
};

template <typename T>
struct impl_IHttpNameValueHeaderValue
{
	String Name() const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_IHttpProductHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpProductHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpProductHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue) const;
};

template <typename T>
struct impl_IHttpProductHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromName(String const & productName) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromName(wchar_t const (&productName)[S0]) const;
	Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromNameWithVersion(String const & productName, String const & productVersion) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromNameWithVersion(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]) const;
};

template <typename T>
struct impl_IHttpProductHeaderValue
{
	String Name() const;
	String Version() const;
};

template <typename T>
struct impl_IHttpProductInfoHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue) const;
};

template <typename T>
struct impl_IHttpProductInfoHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromComment(String const & productComment) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromComment(wchar_t const (&productComment)[S0]) const;
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromNameWithVersion(String const & productName, String const & productVersion) const;
	template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromNameWithVersion(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]) const;
};

template <typename T>
struct impl_IHttpProductInfoHeaderValue
{
	Windows::Web::Http::Headers::HttpProductHeaderValue Product() const;
	String Comment() const;
};

template <typename T>
struct impl_IHttpProductInfoHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpContentCodingWithQualityHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue) const;
};

template <typename T>
struct impl_IHttpContentCodingWithQualityHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValue(String const & contentCoding) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValue(wchar_t const (&contentCoding)[S0]) const;
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValueWithQuality(String const & contentCoding, double quality) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValueWithQuality(wchar_t const (&contentCoding)[S0], double quality) const;
};

template <typename T>
struct impl_IHttpContentCodingWithQualityHeaderValue
{
	String ContentCoding() const;
	Windows::Foundation::IReference<double> Quality() const;
};

template <typename T>
struct impl_IHttpContentCodingWithQualityHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpTransferCodingHeaderValueStatics
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(wchar_t const (&input)[S0]) const;
	bool TryParse(String const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue) const;
	template <unsigned S0> bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue) const;
};

template <typename T>
struct impl_IHttpTransferCodingHeaderValueFactory
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Create(String const & input) const;
	template <unsigned S0> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Create(wchar_t const (&input)[S0]) const;
};

template <typename T>
struct impl_IHttpTransferCodingHeaderValue
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	String Value() const;
};

template <typename T>
struct impl_IHttpTransferCodingHeaderValueCollection
{
	void ParseAdd(String const & input) const;
	template <unsigned S0> void ParseAdd(wchar_t const (&input)[S0]) const;
	bool TryParseAdd(String const & input) const;
	template <unsigned S0> bool TryParseAdd(wchar_t const (&input)[S0]) const;
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

template <typename T>
struct impl_ISyndicationAttribute
{
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	String Namespace() const;
	void Namespace(String const & value) const;
	template <unsigned S0> void Namespace(wchar_t const (&value)[S0]) const;
	String Value() const;
	void Value(String const & value) const;
	template <unsigned S0> void Value(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISyndicationAttributeFactory
{
	Windows::Web::Syndication::SyndicationAttribute CreateSyndicationAttribute(String const & attributeName, String const & attributeNamespace, String const & attributeValue) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationAttribute CreateSyndicationAttribute(wchar_t const (&attributeName)[S0], wchar_t const (&attributeNamespace)[S1], wchar_t const (&attributeValue)[S2]) const;
};

template <typename T>
struct impl_ISyndicationNode
{
	String NodeName() const;
	void NodeName(String const & value) const;
	template <unsigned S0> void NodeName(wchar_t const (&value)[S0]) const;
	String NodeNamespace() const;
	void NodeNamespace(String const & value) const;
	template <unsigned S0> void NodeNamespace(wchar_t const (&value)[S0]) const;
	String NodeValue() const;
	void NodeValue(String const & value) const;
	template <unsigned S0> void NodeValue(wchar_t const (&value)[S0]) const;
	String Language() const;
	void Language(String const & value) const;
	template <unsigned S0> void Language(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri BaseUri() const;
	void BaseUri(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationAttribute> AttributeExtensions() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::ISyndicationNode> ElementExtensions() const;
	Windows::Data::Xml::Dom::XmlDocument GetXmlDocument(Windows::Web::Syndication::SyndicationFormat format) const;
};

template <typename T>
struct impl_ISyndicationNodeFactory
{
	Windows::Web::Syndication::SyndicationNode CreateSyndicationNode(String const & nodeName, String const & nodeNamespace, String const & nodeValue) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationNode CreateSyndicationNode(wchar_t const (&nodeName)[S0], wchar_t const (&nodeNamespace)[S1], wchar_t const (&nodeValue)[S2]) const;
};

template <typename T>
struct impl_ISyndicationGenerator
{
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
	String Version() const;
	void Version(String const & value) const;
	template <unsigned S0> void Version(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISyndicationGeneratorFactory
{
	Windows::Web::Syndication::SyndicationGenerator CreateSyndicationGenerator(String const & text) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationGenerator CreateSyndicationGenerator(wchar_t const (&text)[S0]) const;
};

template <typename T>
struct impl_ISyndicationText
{
	String Text() const;
	void Text(String const & value) const;
	template <unsigned S0> void Text(wchar_t const (&value)[S0]) const;
	String Type() const;
	void Type(String const & value) const;
	template <unsigned S0> void Type(wchar_t const (&value)[S0]) const;
	Windows::Data::Xml::Dom::XmlDocument Xml() const;
	void Xml(Windows::Data::Xml::Dom::XmlDocument const & value) const;
};

template <typename T>
struct impl_ISyndicationTextFactory
{
	Windows::Web::Syndication::SyndicationText CreateSyndicationText(String const & text) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationText CreateSyndicationText(wchar_t const (&text)[S0]) const;
	Windows::Web::Syndication::SyndicationText CreateSyndicationText(String const & text, Windows::Web::Syndication::SyndicationTextType type) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationText CreateSyndicationText(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType type) const;
};

template <typename T>
struct impl_ISyndicationContent
{
	Windows::Foundation::Uri SourceUri() const;
	void SourceUri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_ISyndicationContentFactory
{
	Windows::Web::Syndication::SyndicationContent CreateSyndicationContent(String const & text, Windows::Web::Syndication::SyndicationTextType type) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationContent CreateSyndicationContent(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType type) const;
	Windows::Web::Syndication::SyndicationContent CreateSyndicationContent(Windows::Foundation::Uri const & sourceUri) const;
};

template <typename T>
struct impl_ISyndicationLink
{
	unsigned Length() const;
	void Length(unsigned value) const;
	String MediaType() const;
	void MediaType(String const & value) const;
	template <unsigned S0> void MediaType(wchar_t const (&value)[S0]) const;
	String Relationship() const;
	void Relationship(String const & value) const;
	template <unsigned S0> void Relationship(wchar_t const (&value)[S0]) const;
	String Title() const;
	void Title(String const & value) const;
	template <unsigned S0> void Title(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
	String ResourceLanguage() const;
	void ResourceLanguage(String const & value) const;
	template <unsigned S0> void ResourceLanguage(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISyndicationLinkFactory
{
	Windows::Web::Syndication::SyndicationLink CreateSyndicationLink(Windows::Foundation::Uri const & uri) const;
	Windows::Web::Syndication::SyndicationLink CreateSyndicationLink(Windows::Foundation::Uri const & uri, String const & relationship, String const & title, String const & mediaType, unsigned length) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationLink CreateSyndicationLink(Windows::Foundation::Uri const & uri, wchar_t const (&relationship)[S0], wchar_t const (&title)[S1], wchar_t const (&mediaType)[S2], unsigned length) const;
};

template <typename T>
struct impl_ISyndicationPerson
{
	String Email() const;
	void Email(String const & value) const;
	template <unsigned S0> void Email(wchar_t const (&value)[S0]) const;
	String Name() const;
	void Name(String const & value) const;
	template <unsigned S0> void Name(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
struct impl_ISyndicationPersonFactory
{
	Windows::Web::Syndication::SyndicationPerson CreateSyndicationPerson(String const & name) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationPerson CreateSyndicationPerson(wchar_t const (&name)[S0]) const;
	Windows::Web::Syndication::SyndicationPerson CreateSyndicationPerson(String const & name, String const & email, Windows::Foundation::Uri const & uri) const;
	template <unsigned S0, unsigned S1> Windows::Web::Syndication::SyndicationPerson CreateSyndicationPerson(wchar_t const (&name)[S0], wchar_t const (&email)[S1], Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_ISyndicationCategory
{
	String Label() const;
	void Label(String const & value) const;
	template <unsigned S0> void Label(wchar_t const (&value)[S0]) const;
	String Scheme() const;
	void Scheme(String const & value) const;
	template <unsigned S0> void Scheme(wchar_t const (&value)[S0]) const;
	String Term() const;
	void Term(String const & value) const;
	template <unsigned S0> void Term(wchar_t const (&value)[S0]) const;
};

template <typename T>
struct impl_ISyndicationCategoryFactory
{
	Windows::Web::Syndication::SyndicationCategory CreateSyndicationCategory(String const & term) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationCategory CreateSyndicationCategory(wchar_t const (&term)[S0]) const;
	Windows::Web::Syndication::SyndicationCategory CreateSyndicationCategory(String const & term, String const & scheme, String const & label) const;
	template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationCategory CreateSyndicationCategory(wchar_t const (&term)[S0], wchar_t const (&scheme)[S1], wchar_t const (&label)[S2]) const;
};

template <typename T>
struct impl_ISyndicationItem
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> Authors() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> Categories() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> Contributors() const;
	Windows::Web::Syndication::SyndicationContent Content() const;
	void Content(Windows::Web::Syndication::SyndicationContent const & value) const;
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	Windows::Foundation::DateTime LastUpdatedTime() const;
	void LastUpdatedTime(Windows::Foundation::DateTime const & value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> Links() const;
	Windows::Foundation::DateTime PublishedDate() const;
	void PublishedDate(Windows::Foundation::DateTime const & value) const;
	Windows::Web::Syndication::ISyndicationText Rights() const;
	void Rights(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Web::Syndication::SyndicationFeed Source() const;
	void Source(Windows::Web::Syndication::SyndicationFeed const & value) const;
	Windows::Web::Syndication::ISyndicationText Summary() const;
	void Summary(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Web::Syndication::ISyndicationText Title() const;
	void Title(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Foundation::Uri CommentsUri() const;
	void CommentsUri(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri EditUri() const;
	Windows::Foundation::Uri EditMediaUri() const;
	String ETag() const;
	Windows::Foundation::Uri ItemUri() const;
	void Load(String const & item) const;
	template <unsigned S0> void Load(wchar_t const (&item)[S0]) const;
	void LoadFromXml(Windows::Data::Xml::Dom::XmlDocument const & itemDocument) const;
};

template <typename T>
struct impl_ISyndicationItemFactory
{
	Windows::Web::Syndication::SyndicationItem CreateSyndicationItem(String const & title, Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) const;
	template <unsigned S0> Windows::Web::Syndication::SyndicationItem CreateSyndicationItem(wchar_t const (&title)[S0], Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_ISyndicationFeed
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> Authors() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> Categories() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> Contributors() const;
	Windows::Web::Syndication::SyndicationGenerator Generator() const;
	void Generator(Windows::Web::Syndication::SyndicationGenerator const & value) const;
	Windows::Foundation::Uri IconUri() const;
	void IconUri(Windows::Foundation::Uri const & value) const;
	String Id() const;
	void Id(String const & value) const;
	template <unsigned S0> void Id(wchar_t const (&value)[S0]) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationItem> Items() const;
	Windows::Foundation::DateTime LastUpdatedTime() const;
	void LastUpdatedTime(Windows::Foundation::DateTime const & value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> Links() const;
	Windows::Foundation::Uri ImageUri() const;
	void ImageUri(Windows::Foundation::Uri const & value) const;
	Windows::Web::Syndication::ISyndicationText Rights() const;
	void Rights(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Web::Syndication::ISyndicationText Subtitle() const;
	void Subtitle(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Web::Syndication::ISyndicationText Title() const;
	void Title(Windows::Web::Syndication::ISyndicationText const & value) const;
	Windows::Foundation::Uri FirstUri() const;
	Windows::Foundation::Uri LastUri() const;
	Windows::Foundation::Uri NextUri() const;
	Windows::Foundation::Uri PreviousUri() const;
	Windows::Web::Syndication::SyndicationFormat SourceFormat() const;
	void Load(String const & feed) const;
	template <unsigned S0> void Load(wchar_t const (&feed)[S0]) const;
	void LoadFromXml(Windows::Data::Xml::Dom::XmlDocument const & feedDocument) const;
};

template <typename T>
struct impl_ISyndicationFeedFactory
{
	Windows::Web::Syndication::SyndicationFeed CreateSyndicationFeed(String const & title, String const & subtitle, Windows::Foundation::Uri const & uri) const;
	template <unsigned S0, unsigned S1> Windows::Web::Syndication::SyndicationFeed CreateSyndicationFeed(wchar_t const (&title)[S0], wchar_t const (&subtitle)[S1], Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_ISyndicationClient
{
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	unsigned MaxResponseBufferSize() const;
	void MaxResponseBufferSize(unsigned value) const;
	unsigned Timeout() const;
	void Timeout(unsigned value) const;
	bool BypassCacheOnRetrieve() const;
	void BypassCacheOnRetrieve(bool value) const;
	void SetRequestHeader(String const & name, String const & value) const;
	template <unsigned S0, unsigned S1> void SetRequestHeader(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationFeed, Modern::Windows::Web::Syndication::RetrievalProgress> RetrieveFeedAsync(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
struct impl_ISyndicationClientFactory
{
	Windows::Web::Syndication::SyndicationClient CreateSyndicationClient(Windows::Security::Credentials::PasswordCredential const & serverCredential) const;
};

template <typename T>
struct impl_ISyndicationErrorStatics
{
	Windows::Web::Syndication::SyndicationErrorStatus GetStatus(int hresult) const;
};

}}}}

namespace Modern {

template <> struct Traits<Windows::Foundation::IAsyncActionCompletedHandler>
{
	using Abi = ABI::Windows::Foundation::IAsyncActionCompletedHandler;
	template <typename T> using Methods = Windows::Foundation::impl_IAsyncActionCompletedHandler<T>;
};

template <> struct Traits<Windows::Foundation::IUriRuntimeClass>
{
	using Abi = ABI::Windows::Foundation::IUriRuntimeClass;
	template <typename T> using Methods = Windows::Foundation::impl_IUriRuntimeClass<T>;
};

template <> struct Traits<Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri>
{
	using Abi = ABI::Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri;
	template <typename T> using Methods = Windows::Foundation::impl_IUriRuntimeClassWithAbsoluteCanonicalUri<T>;
};

template <> struct Traits<Windows::Foundation::IUriEscapeStatics>
{
	using Abi = ABI::Windows::Foundation::IUriEscapeStatics;
	template <typename T> using Methods = Windows::Foundation::impl_IUriEscapeStatics<T>;
};

template <> struct Traits<Windows::Foundation::IUriRuntimeClassFactory>
{
	using Abi = ABI::Windows::Foundation::IUriRuntimeClassFactory;
	template <typename T> using Methods = Windows::Foundation::impl_IUriRuntimeClassFactory<T>;
};

template <> struct Traits<Windows::Foundation::IWwwFormUrlDecoderEntry>
{
	using Abi = ABI::Windows::Foundation::IWwwFormUrlDecoderEntry;
	template <typename T> using Methods = Windows::Foundation::impl_IWwwFormUrlDecoderEntry<T>;
};

template <> struct Traits<Windows::Foundation::IWwwFormUrlDecoderRuntimeClass>
{
	using Abi = ABI::Windows::Foundation::IWwwFormUrlDecoderRuntimeClass;
	template <typename T> using Methods = Windows::Foundation::impl_IWwwFormUrlDecoderRuntimeClass<T>;
};

template <> struct Traits<Windows::Foundation::IWwwFormUrlDecoderRuntimeClassFactory>
{
	using Abi = ABI::Windows::Foundation::IWwwFormUrlDecoderRuntimeClassFactory;
	template <typename T> using Methods = Windows::Foundation::impl_IWwwFormUrlDecoderRuntimeClassFactory<T>;
};

template <> struct Traits<Windows::Foundation::IGetActivationFactory>
{
	using Abi = ABI::Windows::Foundation::IGetActivationFactory;
	template <typename T> using Methods = Windows::Foundation::impl_IGetActivationFactory<T>;
};

template <> struct Traits<Windows::Foundation::IClosable>
{
	using Abi = ABI::Windows::Foundation::IClosable;
	template <typename T> using Methods = Windows::Foundation::impl_IClosable<T>;
};

template <> struct Traits<Windows::Foundation::IPropertyValue>
{
	using Abi = ABI::Windows::Foundation::IPropertyValue;
	template <typename T> using Methods = Windows::Foundation::impl_IPropertyValue<T>;
};

template <> struct Traits<Windows::Foundation::IPropertyValueStatics>
{
	using Abi = ABI::Windows::Foundation::IPropertyValueStatics;
	template <typename T> using Methods = Windows::Foundation::impl_IPropertyValueStatics<T>;
};

template <> struct Traits<Windows::Foundation::IStringable>
{
	using Abi = ABI::Windows::Foundation::IStringable;
	template <typename T> using Methods = Windows::Foundation::impl_IStringable<T>;
};

template <> struct Traits<Windows::Foundation::Collections::IPropertySet>
{
	using Abi = ABI::Windows::Foundation::Collections::IPropertySet;
	template <typename T> using Methods = Windows::Foundation::Collections::impl_IPropertySet<T>;
};

template <> struct Traits<Windows::Foundation::IAsyncAction>
{
	using Abi = ABI::Windows::Foundation::IAsyncAction;
	template <typename T> using Methods = Windows::Foundation::impl_IAsyncAction<T>;
};

template <> struct Traits<Windows::UI::Popups::IUICommandInvokedHandler>
{
	using Abi = ABI::Windows::UI::Popups::IUICommandInvokedHandler;
	template <typename T> using Methods = Windows::UI::Popups::impl_IUICommandInvokedHandler<T>;
};

template <> struct Traits<Windows::UI::Popups::IMessageDialog>
{
	using Abi = ABI::Windows::UI::Popups::IMessageDialog;
	template <typename T> using Methods = Windows::UI::Popups::impl_IMessageDialog<T>;
};

template <> struct Traits<Windows::UI::Popups::IMessageDialogFactory>
{
	using Abi = ABI::Windows::UI::Popups::IMessageDialogFactory;
	template <typename T> using Methods = Windows::UI::Popups::impl_IMessageDialogFactory<T>;
};

template <> struct Traits<Windows::UI::Popups::IUICommand>
{
	using Abi = ABI::Windows::UI::Popups::IUICommand;
	template <typename T> using Methods = Windows::UI::Popups::impl_IUICommand<T>;
};

template <> struct Traits<Windows::UI::Popups::IUICommandFactory>
{
	using Abi = ABI::Windows::UI::Popups::IUICommandFactory;
	template <typename T> using Methods = Windows::UI::Popups::impl_IUICommandFactory<T>;
};

template <> struct Traits<Windows::UI::Popups::IPopupMenu>
{
	using Abi = ABI::Windows::UI::Popups::IPopupMenu;
	template <typename T> using Methods = Windows::UI::Popups::impl_IPopupMenu<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointmentManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointmentParticipant>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentParticipant;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointmentParticipant<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointmentInvitee>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentInvitee;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointmentInvitee<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointmentRecurrence>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentRecurrence;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointmentRecurrence<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::IAppointment>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::IAppointment;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::impl_IAppointment<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IAppointmentsProviderLaunchActionVerbsStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IAddAppointmentOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IReplaceAppointmentOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation;
	template <typename T> using Methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IRemoveAppointmentOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::Calls::impl_ILockScreenCallEndCallDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Calls::impl_ILockScreenCallEndRequestedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Calls::ILockScreenCallUI>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::ILockScreenCallUI;
	template <typename T> using Methods = Windows::ApplicationModel::Calls::impl_ILockScreenCallUI<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IThumbnailProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IThumbnailProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IThumbnailProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IStorageItemExtraProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IStorageItemExtraProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IStorageItemContentProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IStorageItemContentProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IStorageItemContentProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IMusicProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IMusicProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IMusicProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IImageProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IImageProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IImageProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IVideoProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IVideoProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IVideoProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IDocumentProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IDocumentProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IDocumentProperties<T>;
};

template <> struct Traits<Windows::Storage::FileProperties::IBasicProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::IBasicProperties;
	template <typename T> using Methods = Windows::Storage::FileProperties::impl_IBasicProperties<T>;
};

template <> struct Traits<Windows::Storage::Provider::ICachedFileUpdaterUI>
{
	using Abi = ABI::Windows::Storage::Provider::ICachedFileUpdaterUI;
	template <typename T> using Methods = Windows::Storage::Provider::impl_ICachedFileUpdaterUI<T>;
};

template <> struct Traits<Windows::Storage::Provider::IFileUpdateRequestedEventArgs>
{
	using Abi = ABI::Windows::Storage::Provider::IFileUpdateRequestedEventArgs;
	template <typename T> using Methods = Windows::Storage::Provider::impl_IFileUpdateRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Storage::Provider::IFileUpdateRequest>
{
	using Abi = ABI::Windows::Storage::Provider::IFileUpdateRequest;
	template <typename T> using Methods = Windows::Storage::Provider::impl_IFileUpdateRequest<T>;
};

template <> struct Traits<Windows::Storage::Provider::IFileUpdateRequestDeferral>
{
	using Abi = ABI::Windows::Storage::Provider::IFileUpdateRequestDeferral;
	template <typename T> using Methods = Windows::Storage::Provider::impl_IFileUpdateRequestDeferral<T>;
};

template <> struct Traits<Windows::Storage::Provider::ICachedFileUpdaterStatics>
{
	using Abi = ABI::Windows::Storage::Provider::ICachedFileUpdaterStatics;
	template <typename T> using Methods = Windows::Storage::Provider::impl_ICachedFileUpdaterStatics<T>;
};

template <> struct Traits<Windows::Data::Text::IWordSegmentsTokenizingHandler>
{
	using Abi = ABI::Windows::Data::Text::IWordSegmentsTokenizingHandler;
	template <typename T> using Methods = Windows::Data::Text::impl_IWordSegmentsTokenizingHandler<T>;
};

template <> struct Traits<Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler>
{
	using Abi = ABI::Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler;
	template <typename T> using Methods = Windows::Data::Text::impl_ISelectableWordSegmentsTokenizingHandler<T>;
};

template <> struct Traits<Windows::Data::Text::ISemanticTextQueryFactory>
{
	using Abi = ABI::Windows::Data::Text::ISemanticTextQueryFactory;
	template <typename T> using Methods = Windows::Data::Text::impl_ISemanticTextQueryFactory<T>;
};

template <> struct Traits<Windows::Data::Text::ISemanticTextQuery>
{
	using Abi = ABI::Windows::Data::Text::ISemanticTextQuery;
	template <typename T> using Methods = Windows::Data::Text::impl_ISemanticTextQuery<T>;
};

template <> struct Traits<Windows::Data::Text::IUnicodeCharactersStatics>
{
	using Abi = ABI::Windows::Data::Text::IUnicodeCharactersStatics;
	template <typename T> using Methods = Windows::Data::Text::impl_IUnicodeCharactersStatics<T>;
};

template <> struct Traits<Windows::Data::Text::IAlternateWordForm>
{
	using Abi = ABI::Windows::Data::Text::IAlternateWordForm;
	template <typename T> using Methods = Windows::Data::Text::impl_IAlternateWordForm<T>;
};

template <> struct Traits<Windows::Data::Text::ISelectableWordSegment>
{
	using Abi = ABI::Windows::Data::Text::ISelectableWordSegment;
	template <typename T> using Methods = Windows::Data::Text::impl_ISelectableWordSegment<T>;
};

template <> struct Traits<Windows::Data::Text::IWordSegment>
{
	using Abi = ABI::Windows::Data::Text::IWordSegment;
	template <typename T> using Methods = Windows::Data::Text::impl_IWordSegment<T>;
};

template <> struct Traits<Windows::Data::Text::IWordsSegmenter>
{
	using Abi = ABI::Windows::Data::Text::IWordsSegmenter;
	template <typename T> using Methods = Windows::Data::Text::impl_IWordsSegmenter<T>;
};

template <> struct Traits<Windows::Data::Text::IWordsSegmenterFactory>
{
	using Abi = ABI::Windows::Data::Text::IWordsSegmenterFactory;
	template <typename T> using Methods = Windows::Data::Text::impl_IWordsSegmenterFactory<T>;
};

template <> struct Traits<Windows::Data::Text::ISelectableWordsSegmenter>
{
	using Abi = ABI::Windows::Data::Text::ISelectableWordsSegmenter;
	template <typename T> using Methods = Windows::Data::Text::impl_ISelectableWordsSegmenter<T>;
};

template <> struct Traits<Windows::Data::Text::ISelectableWordsSegmenterFactory>
{
	using Abi = ABI::Windows::Data::Text::ISelectableWordsSegmenterFactory;
	template <typename T> using Methods = Windows::Data::Text::impl_ISelectableWordsSegmenterFactory<T>;
};

template <> struct Traits<Windows::Storage::Search::IContentIndexerStatics>
{
	using Abi = ABI::Windows::Storage::Search::IContentIndexerStatics;
	template <typename T> using Methods = Windows::Storage::Search::impl_IContentIndexerStatics<T>;
};

template <> struct Traits<Windows::Storage::Search::IIndexableContent>
{
	using Abi = ABI::Windows::Storage::Search::IIndexableContent;
	template <typename T> using Methods = Windows::Storage::Search::impl_IIndexableContent<T>;
};

template <> struct Traits<Windows::Storage::Search::IContentIndexer>
{
	using Abi = ABI::Windows::Storage::Search::IContentIndexer;
	template <typename T> using Methods = Windows::Storage::Search::impl_IContentIndexer<T>;
};

template <> struct Traits<Windows::Storage::Search::IValueAndLanguage>
{
	using Abi = ABI::Windows::Storage::Search::IValueAndLanguage;
	template <typename T> using Methods = Windows::Storage::Search::impl_IValueAndLanguage<T>;
};

template <> struct Traits<Windows::Storage::Search::IContentIndexerQueryOperations>
{
	using Abi = ABI::Windows::Storage::Search::IContentIndexerQueryOperations;
	template <typename T> using Methods = Windows::Storage::Search::impl_IContentIndexerQueryOperations<T>;
};

template <> struct Traits<Windows::Storage::Search::IContentIndexerQuery>
{
	using Abi = ABI::Windows::Storage::Search::IContentIndexerQuery;
	template <typename T> using Methods = Windows::Storage::Search::impl_IContentIndexerQuery<T>;
};

template <> struct Traits<Windows::Storage::Search::IQueryOptions>
{
	using Abi = ABI::Windows::Storage::Search::IQueryOptions;
	template <typename T> using Methods = Windows::Storage::Search::impl_IQueryOptions<T>;
};

template <> struct Traits<Windows::Storage::Search::IQueryOptionsWithProviderFilter>
{
	using Abi = ABI::Windows::Storage::Search::IQueryOptionsWithProviderFilter;
	template <typename T> using Methods = Windows::Storage::Search::impl_IQueryOptionsWithProviderFilter<T>;
};

template <> struct Traits<Windows::Storage::Search::IQueryOptionsFactory>
{
	using Abi = ABI::Windows::Storage::Search::IQueryOptionsFactory;
	template <typename T> using Methods = Windows::Storage::Search::impl_IQueryOptionsFactory<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageQueryResultBase>
{
	using Abi = ABI::Windows::Storage::Search::IStorageQueryResultBase;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageQueryResultBase<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageFileQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::IStorageFileQueryResult;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageFileQueryResult<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageFileQueryResult2>
{
	using Abi = ABI::Windows::Storage::Search::IStorageFileQueryResult2;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageFileQueryResult2<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageFolderQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::IStorageFolderQueryResult;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageFolderQueryResult<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageItemQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::IStorageItemQueryResult;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageItemQueryResult<T>;
};

template <> struct Traits<Windows::Storage::Search::IStorageFolderQueryOperations>
{
	using Abi = ABI::Windows::Storage::Search::IStorageFolderQueryOperations;
	template <typename T> using Methods = Windows::Storage::Search::impl_IStorageFolderQueryOperations<T>;
};

template <> struct Traits<Windows::Storage::IStreamedFileDataRequestedHandler>
{
	using Abi = ABI::Windows::Storage::IStreamedFileDataRequestedHandler;
	template <typename T> using Methods = Windows::Storage::impl_IStreamedFileDataRequestedHandler<T>;
};

template <> struct Traits<Windows::Storage::IApplicationDataSetVersionHandler>
{
	using Abi = ABI::Windows::Storage::IApplicationDataSetVersionHandler;
	template <typename T> using Methods = Windows::Storage::impl_IApplicationDataSetVersionHandler<T>;
};

template <> struct Traits<Windows::Storage::IStorageLibraryStatics>
{
	using Abi = ABI::Windows::Storage::IStorageLibraryStatics;
	template <typename T> using Methods = Windows::Storage::impl_IStorageLibraryStatics<T>;
};

template <> struct Traits<Windows::Storage::IStorageLibrary>
{
	using Abi = ABI::Windows::Storage::IStorageLibrary;
	template <typename T> using Methods = Windows::Storage::impl_IStorageLibrary<T>;
};

template <> struct Traits<Windows::Storage::IKnownFoldersStatics>
{
	using Abi = ABI::Windows::Storage::IKnownFoldersStatics;
	template <typename T> using Methods = Windows::Storage::impl_IKnownFoldersStatics<T>;
};

template <> struct Traits<Windows::Storage::IKnownFoldersPlaylistsStatics>
{
	using Abi = ABI::Windows::Storage::IKnownFoldersPlaylistsStatics;
	template <typename T> using Methods = Windows::Storage::impl_IKnownFoldersPlaylistsStatics<T>;
};

template <> struct Traits<Windows::Storage::IKnownFoldersCameraRollStatics>
{
	using Abi = ABI::Windows::Storage::IKnownFoldersCameraRollStatics;
	template <typename T> using Methods = Windows::Storage::impl_IKnownFoldersCameraRollStatics<T>;
};

template <> struct Traits<Windows::Storage::IKnownFoldersSavedPicturesStatics>
{
	using Abi = ABI::Windows::Storage::IKnownFoldersSavedPicturesStatics;
	template <typename T> using Methods = Windows::Storage::impl_IKnownFoldersSavedPicturesStatics<T>;
};

template <> struct Traits<Windows::Storage::IDownloadsFolderStatics>
{
	using Abi = ABI::Windows::Storage::IDownloadsFolderStatics;
	template <typename T> using Methods = Windows::Storage::impl_IDownloadsFolderStatics<T>;
};

template <> struct Traits<Windows::Storage::IStreamedFileDataRequest>
{
	using Abi = ABI::Windows::Storage::IStreamedFileDataRequest;
	template <typename T> using Methods = Windows::Storage::impl_IStreamedFileDataRequest<T>;
};

template <> struct Traits<Windows::Storage::IStorageFileStatics>
{
	using Abi = ABI::Windows::Storage::IStorageFileStatics;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFileStatics<T>;
};

template <> struct Traits<Windows::Storage::IStorageItem>
{
	using Abi = ABI::Windows::Storage::IStorageItem;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItem<T>;
};

template <> struct Traits<Windows::Storage::IStorageFolder>
{
	using Abi = ABI::Windows::Storage::IStorageFolder;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFolder<T>;
};

template <> struct Traits<Windows::Storage::IStorageFile>
{
	using Abi = ABI::Windows::Storage::IStorageFile;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFile<T>;
};

template <> struct Traits<Windows::Storage::IStorageFolderStatics>
{
	using Abi = ABI::Windows::Storage::IStorageFolderStatics;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFolderStatics<T>;
};

template <> struct Traits<Windows::Storage::IStorageItem2>
{
	using Abi = ABI::Windows::Storage::IStorageItem2;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItem2<T>;
};

template <> struct Traits<Windows::Storage::IStorageItemProperties>
{
	using Abi = ABI::Windows::Storage::IStorageItemProperties;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItemProperties<T>;
};

template <> struct Traits<Windows::Storage::IStorageItemProperties2>
{
	using Abi = ABI::Windows::Storage::IStorageItemProperties2;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItemProperties2<T>;
};

template <> struct Traits<Windows::Storage::IStorageItemPropertiesWithProvider>
{
	using Abi = ABI::Windows::Storage::IStorageItemPropertiesWithProvider;
	template <typename T> using Methods = Windows::Storage::impl_IStorageItemPropertiesWithProvider<T>;
};

template <> struct Traits<Windows::Storage::IStorageFilePropertiesWithAvailability>
{
	using Abi = ABI::Windows::Storage::IStorageFilePropertiesWithAvailability;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFilePropertiesWithAvailability<T>;
};

template <> struct Traits<Windows::Storage::IStorageProvider>
{
	using Abi = ABI::Windows::Storage::IStorageProvider;
	template <typename T> using Methods = Windows::Storage::impl_IStorageProvider<T>;
};

template <> struct Traits<Windows::Storage::IStorageFolder2>
{
	using Abi = ABI::Windows::Storage::IStorageFolder2;
	template <typename T> using Methods = Windows::Storage::impl_IStorageFolder2<T>;
};

template <> struct Traits<Windows::Storage::IFileIOStatics>
{
	using Abi = ABI::Windows::Storage::IFileIOStatics;
	template <typename T> using Methods = Windows::Storage::impl_IFileIOStatics<T>;
};

template <> struct Traits<Windows::Storage::IPathIOStatics>
{
	using Abi = ABI::Windows::Storage::IPathIOStatics;
	template <typename T> using Methods = Windows::Storage::impl_IPathIOStatics<T>;
};

template <> struct Traits<Windows::Storage::ICachedFileManagerStatics>
{
	using Abi = ABI::Windows::Storage::ICachedFileManagerStatics;
	template <typename T> using Methods = Windows::Storage::impl_ICachedFileManagerStatics<T>;
};

template <> struct Traits<Windows::Storage::ISystemAudioProperties>
{
	using Abi = ABI::Windows::Storage::ISystemAudioProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemAudioProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemGPSProperties>
{
	using Abi = ABI::Windows::Storage::ISystemGPSProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemGPSProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemImageProperties>
{
	using Abi = ABI::Windows::Storage::ISystemImageProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemImageProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemMediaProperties>
{
	using Abi = ABI::Windows::Storage::ISystemMediaProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemMediaProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemMusicProperties>
{
	using Abi = ABI::Windows::Storage::ISystemMusicProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemMusicProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemPhotoProperties>
{
	using Abi = ABI::Windows::Storage::ISystemPhotoProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemPhotoProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemVideoProperties>
{
	using Abi = ABI::Windows::Storage::ISystemVideoProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemVideoProperties<T>;
};

template <> struct Traits<Windows::Storage::ISystemProperties>
{
	using Abi = ABI::Windows::Storage::ISystemProperties;
	template <typename T> using Methods = Windows::Storage::impl_ISystemProperties<T>;
};

template <> struct Traits<Windows::Storage::IStorageStreamTransaction>
{
	using Abi = ABI::Windows::Storage::IStorageStreamTransaction;
	template <typename T> using Methods = Windows::Storage::impl_IStorageStreamTransaction<T>;
};

template <> struct Traits<Windows::Storage::IApplicationDataStatics>
{
	using Abi = ABI::Windows::Storage::IApplicationDataStatics;
	template <typename T> using Methods = Windows::Storage::impl_IApplicationDataStatics<T>;
};

template <> struct Traits<Windows::Storage::IApplicationData>
{
	using Abi = ABI::Windows::Storage::IApplicationData;
	template <typename T> using Methods = Windows::Storage::impl_IApplicationData<T>;
};

template <> struct Traits<Windows::Storage::ISetVersionRequest>
{
	using Abi = ABI::Windows::Storage::ISetVersionRequest;
	template <typename T> using Methods = Windows::Storage::impl_ISetVersionRequest<T>;
};

template <> struct Traits<Windows::Storage::ISetVersionDeferral>
{
	using Abi = ABI::Windows::Storage::ISetVersionDeferral;
	template <typename T> using Methods = Windows::Storage::impl_ISetVersionDeferral<T>;
};

template <> struct Traits<Windows::Storage::IApplicationDataContainer>
{
	using Abi = ABI::Windows::Storage::IApplicationDataContainer;
	template <typename T> using Methods = Windows::Storage::impl_IApplicationDataContainer<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataReader>
{
	using Abi = ABI::Windows::Storage::Streams::IDataReader;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataReader<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataReaderFactory>
{
	using Abi = ABI::Windows::Storage::Streams::IDataReaderFactory;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataReaderFactory<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataReaderStatics>
{
	using Abi = ABI::Windows::Storage::Streams::IDataReaderStatics;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataReaderStatics<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataWriter>
{
	using Abi = ABI::Windows::Storage::Streams::IDataWriter;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataWriter<T>;
};

template <> struct Traits<Windows::Storage::Streams::IDataWriterFactory>
{
	using Abi = ABI::Windows::Storage::Streams::IDataWriterFactory;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IDataWriterFactory<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStreamStatics>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStreamStatics;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStreamStatics<T>;
};

template <> struct Traits<Windows::Storage::Streams::IBufferFactory>
{
	using Abi = ABI::Windows::Storage::Streams::IBufferFactory;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IBufferFactory<T>;
};

template <> struct Traits<Windows::Storage::Streams::IBuffer>
{
	using Abi = ABI::Windows::Storage::Streams::IBuffer;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IBuffer<T>;
};

template <> struct Traits<Windows::Storage::Streams::IContentTypeProvider>
{
	using Abi = ABI::Windows::Storage::Streams::IContentTypeProvider;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IContentTypeProvider<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStreamReference>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStreamReference;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStreamReference<T>;
};

template <> struct Traits<Windows::Storage::Streams::IInputStreamReference>
{
	using Abi = ABI::Windows::Storage::Streams::IInputStreamReference;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IInputStreamReference<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStreamReferenceStatics>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStreamReferenceStatics;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStreamReferenceStatics<T>;
};

template <> struct Traits<Windows::Storage::Streams::IInputStream>
{
	using Abi = ABI::Windows::Storage::Streams::IInputStream;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IInputStream<T>;
};

template <> struct Traits<Windows::Storage::Streams::IOutputStream>
{
	using Abi = ABI::Windows::Storage::Streams::IOutputStream;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IOutputStream<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStream>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStream;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStream<T>;
};

template <> struct Traits<Windows::Storage::Streams::IRandomAccessStreamWithContentType>
{
	using Abi = ABI::Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	template <typename T> using Methods = Windows::Storage::Streams::impl_IRandomAccessStreamWithContentType<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactLaunchActionVerbsStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactLaunchActionVerbsStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactLaunchActionVerbsStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactPicker>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactPicker;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactPicker<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactPicker2>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactPicker2;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactPicker2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactSignificantOther>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactSignificantOther;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactSignificantOther<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactWebsite>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactWebsite;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactWebsite<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactEmail>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactEmail;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactEmail<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactPhone>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactPhone;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactPhone<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactAddress>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactAddress;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactAddress<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactConnectedServiceAccount<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactDate>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactDate;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactDate<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactName>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactName;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactName<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactJobInfo>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactJobInfo;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactJobInfo<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContact>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContact;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContact<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContact2>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContact2;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContact2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::impl_IContactCardDelayedDataLoader<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::Provider::impl_IContactRemovedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::IContactPickerUI;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::Provider::impl_IContactPickerUI<T>;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2;
	template <typename T> using Methods = Windows::ApplicationModel::Contacts::Provider::impl_IContactPickerUI2<T>;
};

template <> struct Traits<Windows::UI::IColorHelper>
{
	using Abi = ABI::Windows::UI::IColorHelper;
	template <typename T> using Methods = Windows::UI::impl_IColorHelper<T>;
};

template <> struct Traits<Windows::UI::IColorHelperStatics>
{
	using Abi = ABI::Windows::UI::IColorHelperStatics;
	template <typename T> using Methods = Windows::UI::impl_IColorHelperStatics<T>;
};

template <> struct Traits<Windows::UI::IColors>
{
	using Abi = ABI::Windows::UI::IColors;
	template <typename T> using Methods = Windows::UI::impl_IColors<T>;
};

template <> struct Traits<Windows::UI::IColorsStatics>
{
	using Abi = ABI::Windows::UI::IColorsStatics;
	template <typename T> using Methods = Windows::UI::impl_IColorsStatics<T>;
};

template <> struct Traits<Windows::Devices::Input::IMouseCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::IMouseCapabilities;
	template <typename T> using Methods = Windows::Devices::Input::impl_IMouseCapabilities<T>;
};

template <> struct Traits<Windows::Devices::Input::IKeyboardCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::IKeyboardCapabilities;
	template <typename T> using Methods = Windows::Devices::Input::impl_IKeyboardCapabilities<T>;
};

template <> struct Traits<Windows::Devices::Input::ITouchCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::ITouchCapabilities;
	template <typename T> using Methods = Windows::Devices::Input::impl_ITouchCapabilities<T>;
};

template <> struct Traits<Windows::Devices::Input::IPointerDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Input::IPointerDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Input::impl_IPointerDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Input::IPointerDevice>
{
	using Abi = ABI::Windows::Devices::Input::IPointerDevice;
	template <typename T> using Methods = Windows::Devices::Input::impl_IPointerDevice<T>;
};

template <> struct Traits<Windows::Devices::Input::IMouseEventArgs>
{
	using Abi = ABI::Windows::Devices::Input::IMouseEventArgs;
	template <typename T> using Methods = Windows::Devices::Input::impl_IMouseEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Input::IMouseDevice>
{
	using Abi = ABI::Windows::Devices::Input::IMouseDevice;
	template <typename T> using Methods = Windows::Devices::Input::impl_IMouseDevice<T>;
};

template <> struct Traits<Windows::Devices::Input::IMouseDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Input::IMouseDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Input::impl_IMouseDeviceStatics<T>;
};

template <> struct Traits<Windows::UI::Input::IEdgeGestureEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IEdgeGestureEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IEdgeGestureEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IEdgeGestureStatics>
{
	using Abi = ABI::Windows::UI::Input::IEdgeGestureStatics;
	template <typename T> using Methods = Windows::UI::Input::impl_IEdgeGestureStatics<T>;
};

template <> struct Traits<Windows::UI::Input::IEdgeGesture>
{
	using Abi = ABI::Windows::UI::Input::IEdgeGesture;
	template <typename T> using Methods = Windows::UI::Input::impl_IEdgeGesture<T>;
};

template <> struct Traits<Windows::UI::Input::ITappedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ITappedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_ITappedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IRightTappedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IRightTappedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IRightTappedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IHoldingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IHoldingEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IHoldingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IDraggingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IDraggingEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IDraggingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IManipulationStartedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IManipulationStartedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IManipulationStartedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IManipulationUpdatedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IManipulationUpdatedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IManipulationUpdatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IManipulationInertiaStartingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IManipulationInertiaStartingEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IManipulationInertiaStartingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IManipulationCompletedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::IManipulationCompletedEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_IManipulationCompletedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::ICrossSlidingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ICrossSlidingEventArgs;
	template <typename T> using Methods = Windows::UI::Input::impl_ICrossSlidingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Input::IMouseWheelParameters>
{
	using Abi = ABI::Windows::UI::Input::IMouseWheelParameters;
	template <typename T> using Methods = Windows::UI::Input::impl_IMouseWheelParameters<T>;
};

template <> struct Traits<Windows::UI::Input::IGestureRecognizer>
{
	using Abi = ABI::Windows::UI::Input::IGestureRecognizer;
	template <typename T> using Methods = Windows::UI::Input::impl_IGestureRecognizer<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerPointStatics>
{
	using Abi = ABI::Windows::UI::Input::IPointerPointStatics;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerPointStatics<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerPointTransform>
{
	using Abi = ABI::Windows::UI::Input::IPointerPointTransform;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerPointTransform<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerPoint>
{
	using Abi = ABI::Windows::UI::Input::IPointerPoint;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerPoint<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerPointProperties>
{
	using Abi = ABI::Windows::UI::Input::IPointerPointProperties;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerPointProperties<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerVisualizationSettings>
{
	using Abi = ABI::Windows::UI::Input::IPointerVisualizationSettings;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerVisualizationSettings<T>;
};

template <> struct Traits<Windows::UI::Input::IPointerVisualizationSettingsStatics>
{
	using Abi = ABI::Windows::UI::Input::IPointerVisualizationSettingsStatics;
	template <typename T> using Methods = Windows::UI::Input::impl_IPointerVisualizationSettingsStatics<T>;
};

template <> struct Traits<Windows::UI::Core::IDispatchedHandler>
{
	using Abi = ABI::Windows::UI::Core::IDispatchedHandler;
	template <typename T> using Methods = Windows::UI::Core::impl_IDispatchedHandler<T>;
};

template <> struct Traits<Windows::UI::Core::IIdleDispatchedHandler>
{
	using Abi = ABI::Windows::UI::Core::IIdleDispatchedHandler;
	template <typename T> using Methods = Windows::UI::Core::impl_IIdleDispatchedHandler<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowEventArgs>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IAutomationProviderRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IAutomationProviderRequestedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IAutomationProviderRequestedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICharacterReceivedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::ICharacterReceivedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_ICharacterReceivedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IInputEnabledEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IInputEnabledEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IInputEnabledEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IKeyEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IKeyEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IKeyEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IPointerEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IPointerEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IPointerEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ITouchHitTestingEventArgs>
{
	using Abi = ABI::Windows::UI::Core::ITouchHitTestingEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_ITouchHitTestingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IWindowActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IWindowActivatedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IWindowActivatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IWindowSizeChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IWindowSizeChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IWindowSizeChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::IVisibilityChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IVisibilityChangedEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IVisibilityChangedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindow>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindow;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindow<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowStatic>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowStatic;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowStatic<T>;
};

template <> struct Traits<Windows::UI::Core::IAcceleratorKeyEventArgs>
{
	using Abi = ABI::Windows::UI::Core::IAcceleratorKeyEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IAcceleratorKeyEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreAcceleratorKeys>
{
	using Abi = ABI::Windows::UI::Core::ICoreAcceleratorKeys;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreAcceleratorKeys<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreDispatcher>
{
	using Abi = ABI::Windows::UI::Core::ICoreDispatcher;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreDispatcher<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreDispatcherWithTaskPriority>
{
	using Abi = ABI::Windows::UI::Core::ICoreDispatcherWithTaskPriority;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreDispatcherWithTaskPriority<T>;
};

template <> struct Traits<Windows::UI::Core::IIdleDispatchedHandlerArgs>
{
	using Abi = ABI::Windows::UI::Core::IIdleDispatchedHandlerArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_IIdleDispatchedHandlerArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreCursor>
{
	using Abi = ABI::Windows::UI::Core::ICoreCursor;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreCursor<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreCursorFactory>
{
	using Abi = ABI::Windows::UI::Core::ICoreCursorFactory;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreCursorFactory<T>;
};

template <> struct Traits<Windows::UI::Core::IInitializeWithCoreWindow>
{
	using Abi = ABI::Windows::UI::Core::IInitializeWithCoreWindow;
	template <typename T> using Methods = Windows::UI::Core::impl_IInitializeWithCoreWindow<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowResizeManager>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowResizeManager;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowResizeManager<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowResizeManagerLayoutCapability<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowResizeManagerStatics>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowResizeManagerStatics;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowResizeManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreInputSourceBase>
{
	using Abi = ABI::Windows::UI::Core::ICoreInputSourceBase;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreInputSourceBase<T>;
};

template <> struct Traits<Windows::UI::Core::ICorePointerInputSource>
{
	using Abi = ABI::Windows::UI::Core::ICorePointerInputSource;
	template <typename T> using Methods = Windows::UI::Core::impl_ICorePointerInputSource<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreKeyboardInputSource>
{
	using Abi = ABI::Windows::UI::Core::ICoreKeyboardInputSource;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreKeyboardInputSource<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreComponentFocusable>
{
	using Abi = ABI::Windows::UI::Core::ICoreComponentFocusable;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreComponentFocusable<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreTouchHitTesting>
{
	using Abi = ABI::Windows::UI::Core::ICoreTouchHitTesting;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreTouchHitTesting<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowPopupShowingEventArgs>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowPopupShowingEventArgs;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowPopupShowingEventArgs<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowDialog>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowDialog;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowDialog<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowDialogFactory>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowDialogFactory;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowDialogFactory<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowFlyout>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowFlyout;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowFlyout<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowFlyoutFactory>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowFlyoutFactory;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowFlyoutFactory<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationViewSwitcherStatics;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationViewSwitcherStatics<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationViewInteropStatics>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationViewInteropStatics;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationViewInteropStatics<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationViewStatics2>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationViewStatics2;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationViewStatics2<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationView>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationView;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationView<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs>
{
	using Abi = ABI::Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IApplicationViewConsolidatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IProjectionManagerStatics>
{
	using Abi = ABI::Windows::UI::ViewManagement::IProjectionManagerStatics;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IProjectionManagerStatics<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs>
{
	using Abi = ABI::Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IInputPaneVisibilityEventArgs<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IInputPane>
{
	using Abi = ABI::Windows::UI::ViewManagement::IInputPane;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IInputPane<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IInputPaneStatics>
{
	using Abi = ABI::Windows::UI::ViewManagement::IInputPaneStatics;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IInputPaneStatics<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IAccessibilitySettings>
{
	using Abi = ABI::Windows::UI::ViewManagement::IAccessibilitySettings;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IAccessibilitySettings<T>;
};

template <> struct Traits<Windows::UI::ViewManagement::IUISettings>
{
	using Abi = ABI::Windows::UI::ViewManagement::IUISettings;
	template <typename T> using Methods = Windows::UI::ViewManagement::impl_IUISettings<T>;
};

template <> struct Traits<Windows::System::ILauncherUIOptions>
{
	using Abi = ABI::Windows::System::ILauncherUIOptions;
	template <typename T> using Methods = Windows::System::impl_ILauncherUIOptions<T>;
};

template <> struct Traits<Windows::System::ILauncherOptions>
{
	using Abi = ABI::Windows::System::ILauncherOptions;
	template <typename T> using Methods = Windows::System::impl_ILauncherOptions<T>;
};

template <> struct Traits<Windows::System::ILauncherViewOptions>
{
	using Abi = ABI::Windows::System::ILauncherViewOptions;
	template <typename T> using Methods = Windows::System::impl_ILauncherViewOptions<T>;
};

template <> struct Traits<Windows::System::ILauncherStatics>
{
	using Abi = ABI::Windows::System::ILauncherStatics;
	template <typename T> using Methods = Windows::System::impl_ILauncherStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::ISuspendingDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::ISuspendingDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::impl_ISuspendingDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::ISuspendingOperation>
{
	using Abi = ABI::Windows::ApplicationModel::ISuspendingOperation;
	template <typename T> using Methods = Windows::ApplicationModel::impl_ISuspendingOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::ISuspendingEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::ISuspendingEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::impl_ISuspendingEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::IPackageId>
{
	using Abi = ABI::Windows::ApplicationModel::IPackageId;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IPackageId<T>;
};

template <> struct Traits<Windows::ApplicationModel::IPackage>
{
	using Abi = ABI::Windows::ApplicationModel::IPackage;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IPackage<T>;
};

template <> struct Traits<Windows::ApplicationModel::IPackage2>
{
	using Abi = ABI::Windows::ApplicationModel::IPackage2;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IPackage2<T>;
};

template <> struct Traits<Windows::ApplicationModel::IPackageStatics>
{
	using Abi = ABI::Windows::ApplicationModel::IPackageStatics;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IPackageStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::IDesignModeStatics>
{
	using Abi = ABI::Windows::ApplicationModel::IDesignModeStatics;
	template <typename T> using Methods = Windows::ApplicationModel::impl_IDesignModeStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::IFrameworkView>
{
	using Abi = ABI::Windows::ApplicationModel::Core::IFrameworkView;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_IFrameworkView<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::IFrameworkViewSource>
{
	using Abi = ABI::Windows::ApplicationModel::Core::IFrameworkViewSource;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_IFrameworkViewSource<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplication>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplication;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplication<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationUseCount>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationUseCount;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationUseCount<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationExit>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationExit;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationExit<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreImmersiveApplication>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreImmersiveApplication;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreImmersiveApplication<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreImmersiveApplication2>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreImmersiveApplication2;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreImmersiveApplication2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationUnhandledError<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationView>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationView;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationView<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::ICoreApplicationView2>
{
	using Abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationView2;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_ICoreApplicationView2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_IUnhandledErrorDetectedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Core::IUnhandledError>
{
	using Abi = ABI::Windows::ApplicationModel::Core::IUnhandledError;
	template <typename T> using Methods = Windows::ApplicationModel::Core::impl_IUnhandledError<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataProviderHandler>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataProviderHandler;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataProviderHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IStandardDataFormatsStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IStandardDataFormatsStatics2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySetView<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySetView2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySet<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySet2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataProviderDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataProviderDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataProviderDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataProviderRequest>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataProviderRequest;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataProviderRequest<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IOperationCompletedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackageView>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackageView;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackageView<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackageView2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackageView2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackageView2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackage>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackage;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackage<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataPackage2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackage2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackage2<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IHtmlFormatHelperStatics>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IHtmlFormatHelperStatics;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IHtmlFormatHelperStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IClipboardStatics>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IClipboardStatics;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IClipboardStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataRequestDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataRequestDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataRequest>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataRequest;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataRequest<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataRequestedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_ITargetApplicationChosenEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataTransferManager>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataTransferManager;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataTransferManager<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::impl_IDataTransferManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::ShareTarget::impl_IQuickLink<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::ShareTarget::impl_IShareOperation<T>;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2;
	template <typename T> using Methods = Windows::ApplicationModel::DataTransfer::ShareTarget::impl_IShareOperation2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneQueryLinguisticDetails<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneVisibilityChangedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneQueryChangedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneQuerySubmittedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneResultSuggestionChosenEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchSuggestionCollection>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchSuggestionCollection;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchSuggestionCollection<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneSuggestionsRequestDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneSuggestionsRequest<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneSuggestionsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ILocalContentSuggestionSettings>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ILocalContentSuggestionSettings;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ILocalContentSuggestionSettings<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPaneStaticsWithHideThisApplication>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPaneStaticsWithHideThisApplication;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPaneStaticsWithHideThisApplication<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchPane>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchPane;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchPane<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetailsFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchQueryLinguisticDetailsFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchQueryLinguisticDetailsFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchQueryLinguisticDetails<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchSuggestionsRequestDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Search::ISearchSuggestionsRequest>
{
	using Abi = ABI::Windows::ApplicationModel::Search::ISearchSuggestionsRequest;
	template <typename T> using Methods = Windows::ApplicationModel::Search::impl_ISearchSuggestionsRequest<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfigurationSaveRequestedDeferral<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfigurationSaveRequest<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfigurationSaveRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintTaskConfiguration>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfiguration;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfiguration<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintNotificationEventDetails<T>;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::IPrintExtensionContextStatic>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::IPrintExtensionContextStatic;
	template <typename T> using Methods = Windows::Devices::Printers::Extensions::impl_IPrintExtensionContextStatic<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IFileRemovedEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IFileRemovedEventArgs;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IFileRemovedEventArgs<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IFileOpenPickerUI>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IFileOpenPickerUI;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IFileOpenPickerUI<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IPickerClosingEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IPickerClosingEventArgs;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IPickerClosingEventArgs<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IPickerClosingOperation>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IPickerClosingOperation;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IPickerClosingOperation<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IPickerClosingDeferral>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IPickerClosingDeferral;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IPickerClosingDeferral<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::IFileSavePickerUI>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::IFileSavePickerUI;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_IFileSavePickerUI<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_ITargetFileRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::ITargetFileRequest>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::ITargetFileRequest;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_ITargetFileRequest<T>;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral;
	template <typename T> using Methods = Windows::Storage::Pickers::Provider::impl_ITargetFileRequestDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ISplashScreen>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ISplashScreen;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ISplashScreen<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IApplicationViewActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IPrelaunchActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ILaunchActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ISearchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ISearchActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ISearchActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ISearchActivatedEventArgsWithLinguisticDetails<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IShareTargetActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IFileActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IFileActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IFileActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IFileActivatedEventArgsWithNeighboringFiles<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IProtocolActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IFileOpenPickerActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IFileSavePickerActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ICachedFileUpdaterActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactPickerActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IDeviceActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IPrintTaskSettingsActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ICameraSettingsActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderAddAppointmentActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactCallActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactMessageActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactMapActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactPostActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactVideoCallActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IContactsProviderActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_IRestrictedLaunchActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Activation::impl_ILockScreenCallActivatedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskCanceledEventHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskProgressEventHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskCompletedEventHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IAlarmApplicationManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundExecutionManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskInstance>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskInstance;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskInstance<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundWorkCostStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundWorkCostStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundWorkCostStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskDeferral;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskDeferral<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskInstance2>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskInstance2;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskInstance2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTask>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTask;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTask<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskRegistration>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskRegistration;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskRegistration<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskRegistrationStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskBuilder;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskBuilder<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundCondition>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundCondition;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundCondition<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskBuilder2>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskBuilder2;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskBuilder2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskCompletedEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskProgressEventArgs<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ISystemTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ISystemTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ISystemTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ISystemTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ISystemTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ISystemTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ISystemCondition>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ISystemCondition;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ISystemCondition<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ISystemConditionFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ISystemConditionFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ISystemConditionFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_INetworkOperatorNotificationTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::INetworkOperatorNotificationTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::INetworkOperatorNotificationTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_INetworkOperatorNotificationTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ITimeTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ITimeTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ITimeTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ITimeTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ITimeTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ITimeTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IMaintenanceTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IMaintenanceTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IMaintenanceTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IMaintenanceTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IMaintenanceTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IMaintenanceTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IDeviceUseTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IDeviceUseTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IDeviceUseTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IDeviceServicingTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IDeviceServicingTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IDeviceServicingTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ILocationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ILocationTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ILocationTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::ILocationTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::ILocationTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_ILocationTriggerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_INetworkOperatorHotspotAuthenticationTrigger<T>;
};

template <> struct Traits<Windows::ApplicationModel::Background::IPushNotificationTriggerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Background::IPushNotificationTriggerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Background::impl_IPushNotificationTriggerFactory<T>;
};

template <> struct Traits<Windows::UI::Core::ICoreWindowFactory>
{
	using Abi = ABI::Windows::UI::Core::ICoreWindowFactory;
	template <typename T> using Methods = Windows::UI::Core::impl_ICoreWindowFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Infrastructure::ISetWindowWithWindowFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Infrastructure::ISetWindowWithWindowFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Infrastructure::impl_ISetWindowWithWindowFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceManager>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceManager;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceManager<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceManagerStatics>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceManagerStatics;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceManagerStatics<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceQualifier>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceQualifier;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceQualifier<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceContext>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceContext;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceContext<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceContextStatics2>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceContextStatics2;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceContextStatics2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceCandidate>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceCandidate;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceCandidate<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::INamedResource>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::INamedResource;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_INamedResource<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::IResourceMap>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::IResourceMap;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Core::impl_IResourceMap<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::IResourceLoader>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::IResourceLoader;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::impl_IResourceLoader<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::IResourceLoader2>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::IResourceLoader2;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::impl_IResourceLoader2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::IResourceLoaderStatics2>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::IResourceLoaderStatics2;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::impl_IResourceLoaderStatics2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IResourceIndexer>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IResourceIndexer;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IResourceIndexer<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IResourceIndexerFactory<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory2>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IResourceIndexerFactory2;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IResourceIndexerFactory2<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IIndexedResourceQualifier<T>;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate;
	template <typename T> using Methods = Windows::ApplicationModel::Resources::Management::impl_IIndexedResourceCandidate<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ILicenseChangedEventHandler>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ILicenseChangedEventHandler;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ILicenseChangedEventHandler<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ICurrentApp>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ICurrentApp;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ICurrentApp<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ICurrentAppWithConsumables>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ICurrentAppWithConsumables;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ICurrentAppWithConsumables<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ICurrentAppSimulator>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ICurrentAppSimulator;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ICurrentAppSimulator<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ICurrentAppSimulatorWithConsumables>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ICurrentAppSimulatorWithConsumables;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ICurrentAppSimulatorWithConsumables<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IPurchaseResults>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IPurchaseResults;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IPurchaseResults<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::ILicenseInformation>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ILicenseInformation;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_ILicenseInformation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductLicense>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductLicense;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductLicense<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IListingInformation>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IListingInformation;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IListingInformation<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductListing>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductListing;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductListing<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductListingWithConsumables>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductListingWithConsumables;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductListingWithConsumables<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IUnfulfilledConsumable>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IUnfulfilledConsumable;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IUnfulfilledConsumable<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductPurchaseDisplayProperties<T>;
};

template <> struct Traits<Windows::ApplicationModel::Store::IProductPurchaseDisplayPropertiesFactory>
{
	using Abi = ABI::Windows::ApplicationModel::Store::IProductPurchaseDisplayPropertiesFactory;
	template <typename T> using Methods = Windows::ApplicationModel::Store::impl_IProductPurchaseDisplayPropertiesFactory<T>;
};

template <> struct Traits<Windows::Data::Html::IHtmlUtilities>
{
	using Abi = ABI::Windows::Data::Html::IHtmlUtilities;
	template <typename T> using Methods = Windows::Data::Html::impl_IHtmlUtilities<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonValue>
{
	using Abi = ABI::Windows::Data::Json::IJsonValue;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonValue<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonValueStatics>
{
	using Abi = ABI::Windows::Data::Json::IJsonValueStatics;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonValueStatics<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonObject>
{
	using Abi = ABI::Windows::Data::Json::IJsonObject;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonObject<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonObjectWithDefaultValues>
{
	using Abi = ABI::Windows::Data::Json::IJsonObjectWithDefaultValues;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonObjectWithDefaultValues<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonObjectStatics>
{
	using Abi = ABI::Windows::Data::Json::IJsonObjectStatics;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonObjectStatics<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonArray>
{
	using Abi = ABI::Windows::Data::Json::IJsonArray;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonArray<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonArrayStatics>
{
	using Abi = ABI::Windows::Data::Json::IJsonArrayStatics;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonArrayStatics<T>;
};

template <> struct Traits<Windows::Data::Json::IJsonErrorStatics2>
{
	using Abi = ABI::Windows::Data::Json::IJsonErrorStatics2;
	template <typename T> using Methods = Windows::Data::Json::impl_IJsonErrorStatics2<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfPageDimensions>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfPageDimensions;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfPageDimensions<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfPageRenderOptions>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfPageRenderOptions;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfPageRenderOptions<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfPage>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfPage;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfPage<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfDocument>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfDocument;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfDocument<T>;
};

template <> struct Traits<Windows::Data::Pdf::IPdfDocumentStatics>
{
	using Abi = ABI::Windows::Data::Pdf::IPdfDocumentStatics;
	template <typename T> using Methods = Windows::Data::Pdf::impl_IPdfDocumentStatics<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNodeSelector>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNodeSelector;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNodeSelector<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNodeSerializer;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNodeSerializer<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNode>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNode;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNode<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDomImplementation>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDomImplementation;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDomImplementation<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocumentType>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocumentType;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocumentType<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlAttribute>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlAttribute;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlAttribute<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocumentFragment>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocumentFragment;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocumentFragment<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlElement>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlElement;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlElement<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IDtdNotation>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IDtdNotation;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IDtdNotation<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IDtdEntity>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IDtdEntity;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IDtdEntity<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlEntityReference>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlEntityReference;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlEntityReference<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlProcessingInstruction>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlProcessingInstruction;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlProcessingInstruction<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlCharacterData>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlCharacterData;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlCharacterData<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlComment>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlComment;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlComment<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlText>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlText;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlText<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlCDataSection>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlCDataSection;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlCDataSection<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocument>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocument;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocument<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNamedNodeMap>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNamedNodeMap;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNamedNodeMap<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlNodeList>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlNodeList;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlNodeList<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlLoadSettings>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlLoadSettings;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlLoadSettings<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocumentIO>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocumentIO;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocumentIO<T>;
};

template <> struct Traits<Windows::Data::Xml::Dom::IXmlDocumentStatics>
{
	using Abi = ABI::Windows::Data::Xml::Dom::IXmlDocumentStatics;
	template <typename T> using Methods = Windows::Data::Xml::Dom::impl_IXmlDocumentStatics<T>;
};

template <> struct Traits<Windows::Data::Xml::Xsl::IXsltProcessor>
{
	using Abi = ABI::Windows::Data::Xml::Xsl::IXsltProcessor;
	template <typename T> using Methods = Windows::Data::Xml::Xsl::impl_IXsltProcessor<T>;
};

template <> struct Traits<Windows::Data::Xml::Xsl::IXsltProcessorFactory>
{
	using Abi = ABI::Windows::Data::Xml::Xsl::IXsltProcessorFactory;
	template <typename T> using Methods = Windows::Data::Xml::Xsl::impl_IXsltProcessorFactory<T>;
};

template <> struct Traits<Windows::Devices::Background::IDeviceUseDetails>
{
	using Abi = ABI::Windows::Devices::Background::IDeviceUseDetails;
	template <typename T> using Methods = Windows::Devices::Background::impl_IDeviceUseDetails<T>;
};

template <> struct Traits<Windows::Devices::Background::IDeviceServicingDetails>
{
	using Abi = ABI::Windows::Devices::Background::IDeviceServicingDetails;
	template <typename T> using Methods = Windows::Devices::Background::impl_IDeviceServicingDetails<T>;
};

template <> struct Traits<Windows::Devices::Custom::IKnownDeviceTypesStatics>
{
	using Abi = ABI::Windows::Devices::Custom::IKnownDeviceTypesStatics;
	template <typename T> using Methods = Windows::Devices::Custom::impl_IKnownDeviceTypesStatics<T>;
};

template <> struct Traits<Windows::Devices::Custom::IIOControlCode>
{
	using Abi = ABI::Windows::Devices::Custom::IIOControlCode;
	template <typename T> using Methods = Windows::Devices::Custom::impl_IIOControlCode<T>;
};

template <> struct Traits<Windows::Devices::Custom::IIOControlCodeFactory>
{
	using Abi = ABI::Windows::Devices::Custom::IIOControlCodeFactory;
	template <typename T> using Methods = Windows::Devices::Custom::impl_IIOControlCodeFactory<T>;
};

template <> struct Traits<Windows::Devices::Custom::ICustomDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Custom::ICustomDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Custom::impl_ICustomDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Custom::ICustomDevice>
{
	using Abi = ABI::Windows::Devices::Custom::ICustomDevice;
	template <typename T> using Methods = Windows::Devices::Custom::impl_ICustomDevice<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IEnclosureLocation>
{
	using Abi = ABI::Windows::Devices::Enumeration::IEnclosureLocation;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IEnclosureLocation<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceInformationUpdate>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceInformationUpdate;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceInformationUpdate<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceWatcher>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceWatcher;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceWatcher<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceInformationStatics>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceInformationStatics;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceInformationStatics<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceInformation>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceInformation;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceInformation<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceAccessChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceAccessInformation>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceAccessInformation;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceAccessInformation<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::IDeviceAccessInformationStatics>
{
	using Abi = ABI::Windows::Devices::Enumeration::IDeviceAccessInformationStatics;
	template <typename T> using Methods = Windows::Devices::Enumeration::impl_IDeviceAccessInformationStatics<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate;
	template <typename T> using Methods = Windows::Devices::Enumeration::Pnp::impl_IPnpObjectUpdate<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher;
	template <typename T> using Methods = Windows::Devices::Enumeration::Pnp::impl_IPnpObjectWatcher<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::IPnpObjectStatics>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::IPnpObjectStatics;
	template <typename T> using Methods = Windows::Devices::Enumeration::Pnp::impl_IPnpObjectStatics<T>;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::IPnpObject>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::IPnpObject;
	template <typename T> using Methods = Windows::Devices::Enumeration::Pnp::impl_IPnpObject<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeoshape>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeoshape;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeoshape<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeopoint>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeopoint;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeopoint<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeopointFactory>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeopointFactory;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeopointFactory<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocoordinateSatelliteData>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocoordinateSatelliteData;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocoordinateSatelliteData<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocoordinate>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocoordinate;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocoordinate<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocoordinateWithPositionData>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocoordinateWithPositionData;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocoordinateWithPositionData<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocoordinateWithPoint>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocoordinateWithPoint;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocoordinateWithPoint<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::ICivicAddress>
{
	using Abi = ABI::Windows::Devices::Geolocation::ICivicAddress;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_ICivicAddress<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeoposition>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeoposition;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeoposition<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IPositionChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Geolocation::IPositionChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IPositionChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IStatusChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Geolocation::IStatusChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IStatusChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeolocator>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeolocator;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeolocator<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeolocatorWithScalarAccuracy>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeolocatorWithScalarAccuracy;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeolocatorWithScalarAccuracy<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocircle>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocircle;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocircle<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::IGeocircleFactory>
{
	using Abi = ABI::Windows::Devices::Geolocation::IGeocircleFactory;
	template <typename T> using Methods = Windows::Devices::Geolocation::impl_IGeocircleFactory<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofenceFactory>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofenceFactory;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofenceFactory<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofence>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofence;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofence<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofenceStateChangeReport>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofenceStateChangeReport;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofenceStateChangeReport<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofenceMonitorStatics>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofenceMonitorStatics;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofenceMonitorStatics<T>;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor;
	template <typename T> using Methods = Windows::Devices::Geolocation::Geofencing::impl_IGeofenceMonitor<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidDeviceStatics>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidDeviceStatics;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidBooleanControlDescription<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidNumericControlDescription<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidCollection>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidCollection;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidCollection<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidInputReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidInputReport;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidInputReport<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidOutputReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidOutputReport;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidOutputReport<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidFeatureReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidFeatureReport;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidFeatureReport<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidInputReportReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidBooleanControl>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidBooleanControl;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidBooleanControl<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidNumericControl>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidNumericControl;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidNumericControl<T>;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::IHidDevice>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::IHidDevice;
	template <typename T> using Methods = Windows::Devices::HumanInterfaceDevice::impl_IHidDevice<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IUnifiedPosErrorData>
{
	using Abi = ABI::Windows::Devices::PointOfService::IUnifiedPosErrorData;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IUnifiedPosErrorData<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerStatusUpdatedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeSymbologiesStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeSymbologiesStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeSymbologiesStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerDataReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerReport>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerReport;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerReport<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerErrorOccurredEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerImagePreviewReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerCapabilities>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerCapabilities;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerCapabilities<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScannerStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScannerStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScannerStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IBarcodeScanner>
{
	using Abi = ABI::Windows::Devices::PointOfService::IBarcodeScanner;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IBarcodeScanner<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderEncryptionAlgorithmsStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderEncryptionAlgorithmsStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderCardTypesStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderCardTypesStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderCardTypesStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderTrackData>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderTrackData;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderTrackData<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderReport>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderReport;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderReport<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderErrorOccurredEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderStatusUpdatedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderCapabilities<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReaderStatics>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReaderStatics;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReaderStatics<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IMagneticStripeReader>
{
	using Abi = ABI::Windows::Devices::PointOfService::IMagneticStripeReader;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IMagneticStripeReader<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IClaimedBarcodeScanner>
{
	using Abi = ABI::Windows::Devices::PointOfService::IClaimedBarcodeScanner;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IClaimedBarcodeScanner<T>;
};

template <> struct Traits<Windows::Devices::PointOfService::IClaimedMagneticStripeReader>
{
	using Abi = ABI::Windows::Devices::PointOfService::IClaimedMagneticStripeReader;
	template <typename T> using Methods = Windows::Devices::PointOfService::impl_IClaimedMagneticStripeReader<T>;
};

template <> struct Traits<Windows::Devices::Portable::IStorageDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Portable::IStorageDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Portable::impl_IStorageDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Portable::IServiceDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Portable::IServiceDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Portable::impl_IServiceDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometerStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometerStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometerStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometer>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometer;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometer<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometerReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometerReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometerReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IAccelerometerShakenEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IAccelerometerShakenEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IAccelerometerShakenEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometerStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometerStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometerStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometer>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometer;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometer<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometerReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometerReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometerReadingYawAccuracy>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometerReadingYawAccuracy;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometerReadingYawAccuracy<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IInclinometerReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IGyrometerStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::IGyrometerStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IGyrometerStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IGyrometer>
{
	using Abi = ABI::Windows::Devices::Sensors::IGyrometer;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IGyrometer<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IGyrometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::IGyrometerReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IGyrometerReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IGyrometerReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompassStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompassStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompassStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompass>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompass;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompass<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompassReading>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompassReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompassReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompassReadingHeadingAccuracy>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompassReadingHeadingAccuracy;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompassReadingHeadingAccuracy<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ICompassReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::ICompassReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ICompassReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ILightSensorStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::ILightSensorStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ILightSensorStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ILightSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::ILightSensor;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ILightSensor<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ILightSensorReading>
{
	using Abi = ABI::Windows::Devices::Sensors::ILightSensorReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ILightSensorReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ILightSensorReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISensorRotationMatrix>
{
	using Abi = ABI::Windows::Devices::Sensors::ISensorRotationMatrix;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISensorRotationMatrix<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISensorQuaternion>
{
	using Abi = ABI::Windows::Devices::Sensors::ISensorQuaternion;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISensorQuaternion<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensorStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensorStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensorStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensor;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensor<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensorReading>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensorReading;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensorReading<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensorReadingYawAccuracy<T>;
};

template <> struct Traits<Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_IOrientationSensorReadingChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISimpleOrientationSensorStatics>
{
	using Abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensorStatics;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensorStatics<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISimpleOrientationSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensor;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensor<T>;
};

template <> struct Traits<Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensorOrientationChangedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardPinResetHandler>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardPinResetHandler;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardPinResetHandler<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardReaderStatics>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardReaderStatics;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardReaderStatics<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardReader>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardReader;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardReader<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ICardAddedEventArgs>
{
	using Abi = ABI::Windows::Devices::SmartCards::ICardAddedEventArgs;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ICardAddedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ICardRemovedEventArgs>
{
	using Abi = ABI::Windows::Devices::SmartCards::ICardRemovedEventArgs;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ICardRemovedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCard>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCard;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCard<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardProvisioningStatics>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardProvisioningStatics;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardProvisioningStatics<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardProvisioning>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardProvisioning;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardProvisioning<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardPinResetRequest>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardPinResetRequest;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardPinResetRequest<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardPinResetDeferral>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardPinResetDeferral;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardPinResetDeferral<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardPinPolicy>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardPinPolicy;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardPinPolicy<T>;
};

template <> struct Traits<Windows::Devices::SmartCards::ISmartCardChallengeContext>
{
	using Abi = ABI::Windows::Devices::SmartCards::ISmartCardChallengeContext;
	template <typename T> using Methods = Windows::Devices::SmartCards::impl_ISmartCardChallengeContext<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsMessageReceivedEventHandler>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsMessageReceivedEventHandler;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsMessageReceivedEventHandler<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDeviceStatusChangedEventHandler<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsMessage>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsMessage;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsMessage<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsBinaryMessage>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsBinaryMessage;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsBinaryMessage<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsTextMessage>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsTextMessage;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsTextMessage<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsTextMessageStatics>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsTextMessageStatics;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsTextMessageStatics<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDeviceMessageStore>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDeviceMessageStore;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDeviceMessageStore<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsMessageReceivedEventArgs;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsMessageReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDeviceStatics2>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDeviceStatics2;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDeviceStatics2<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsDevice>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsDevice;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsDevice<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsReceivedEventDetails>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsReceivedEventDetails;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsReceivedEventDetails<T>;
};

template <> struct Traits<Windows::Devices::Sms::ISmsReceivedEventDetails2>
{
	using Abi = ABI::Windows::Devices::Sms::ISmsReceivedEventDetails2;
	template <typename T> using Methods = Windows::Devices::Sms::impl_ISmsReceivedEventDetails2<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbControlRequestType>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbControlRequestType;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbControlRequestType<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbSetupPacketFactory>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbSetupPacketFactory;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbSetupPacketFactory<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbSetupPacket>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbSetupPacket;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbSetupPacket<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceClass>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceClass;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceClass<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceClassesStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceClassesStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceClassesStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceClasses>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceClasses;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceClasses<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDeviceDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDeviceDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDeviceDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbConfigurationDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbConfigurationDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbConfigurationDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbConfigurationDescriptorStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbConfigurationDescriptorStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbConfigurationDescriptorStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterfaceDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterfaceDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterfaceDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterfaceDescriptorStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterfaceDescriptorStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterfaceDescriptorStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbEndpointDescriptorStatics>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbEndpointDescriptorStatics;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbEndpointDescriptorStatics<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptInEventArgs>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptInEventArgs;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptInEventArgs<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbBulkInPipe>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbBulkInPipe;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbBulkInPipe<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptInPipe>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptInPipe;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptInPipe<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbBulkOutPipe>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbBulkOutPipe;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbBulkOutPipe<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptOutPipe>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptOutPipe;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptOutPipe<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbConfiguration>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbConfiguration;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbConfiguration<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterface>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterface;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterface<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterfaceSetting>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterfaceSetting;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterfaceSetting<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbBulkInEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbBulkInEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbBulkInEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptInEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptInEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptInEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbBulkOutEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbBulkOutEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbBulkOutEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbInterruptOutEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbInterruptOutEndpointDescriptor;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbInterruptOutEndpointDescriptor<T>;
};

template <> struct Traits<Windows::Devices::Usb::IUsbDevice>
{
	using Abi = ABI::Windows::Devices::Usb::IUsbDevice;
	template <typename T> using Methods = Windows::Devices::Usb::impl_IUsbDevice<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkStatusChangedEventHandler>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkStatusChangedEventHandler;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkStatusChangedEventHandler<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IDataPlanUsage>
{
	using Abi = ABI::Windows::Networking::Connectivity::IDataPlanUsage;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IDataPlanUsage<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IDataPlanStatus>
{
	using Abi = ABI::Windows::Networking::Connectivity::IDataPlanStatus;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IDataPlanStatus<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionCost>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionCost;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionCost<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkSecuritySettings>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkSecuritySettings;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkSecuritySettings<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionProfile>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionProfile;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionProfile<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IWwanConnectionProfileDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::IWwanConnectionProfileDetails;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IWwanConnectionProfileDetails<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IWlanConnectionProfileDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::IWlanConnectionProfileDetails;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IWlanConnectionProfileDetails<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectivityInterval>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectivityInterval;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectivityInterval<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkUsage>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkUsage;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkUsage<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionProfile2>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionProfile2;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionProfile2<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::ILanIdentifierData>
{
	using Abi = ABI::Windows::Networking::Connectivity::ILanIdentifierData;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_ILanIdentifierData<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::ILanIdentifier>
{
	using Abi = ABI::Windows::Networking::Connectivity::ILanIdentifier;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_ILanIdentifier<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkInformationStatics>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkInformationStatics;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkInformationStatics<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionProfileFilter>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionProfileFilter;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionProfileFilter<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkInformationStatics2>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkInformationStatics2;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkInformationStatics2<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkItem>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkItem;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkItem<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkAdapter>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkAdapter;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkAdapter<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IIPInformation>
{
	using Abi = ABI::Windows::Networking::Connectivity::IIPInformation;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IIPInformation<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IProxyConfiguration>
{
	using Abi = ABI::Windows::Networking::Connectivity::IProxyConfiguration;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IProxyConfiguration<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectionSession>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectionSession;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectionSession<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IRoutePolicy>
{
	using Abi = ABI::Windows::Networking::Connectivity::IRoutePolicy;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IRoutePolicy<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IRoutePolicyFactory>
{
	using Abi = ABI::Windows::Networking::Connectivity::IRoutePolicyFactory;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IRoutePolicyFactory<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::ICellularApnContext>
{
	using Abi = ABI::Windows::Networking::Connectivity::ICellularApnContext;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_ICellularApnContext<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::IConnectivityManagerStatics>
{
	using Abi = ABI::Windows::Networking::Connectivity::IConnectivityManagerStatics;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_IConnectivityManagerStatics<T>;
};

template <> struct Traits<Windows::Networking::Connectivity::INetworkStateChangeEventDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::INetworkStateChangeEventDetails;
	template <typename T> using Methods = Windows::Networking::Connectivity::impl_INetworkStateChangeEventDetails<T>;
};

template <> struct Traits<Windows::Networking::IHostNameStatics>
{
	using Abi = ABI::Windows::Networking::IHostNameStatics;
	template <typename T> using Methods = Windows::Networking::impl_IHostNameStatics<T>;
};

template <> struct Traits<Windows::Networking::IHostName>
{
	using Abi = ABI::Windows::Networking::IHostName;
	template <typename T> using Methods = Windows::Networking::impl_IHostName<T>;
};

template <> struct Traits<Windows::Networking::IHostNameFactory>
{
	using Abi = ABI::Windows::Networking::IHostNameFactory;
	template <typename T> using Methods = Windows::Networking::impl_IHostNameFactory<T>;
};

template <> struct Traits<Windows::Networking::IEndpointPair>
{
	using Abi = ABI::Windows::Networking::IEndpointPair;
	template <typename T> using Methods = Windows::Networking::impl_IEndpointPair<T>;
};

template <> struct Traits<Windows::Networking::IEndpointPairFactory>
{
	using Abi = ABI::Windows::Networking::IEndpointPairFactory;
	template <typename T> using Methods = Windows::Networking::impl_IEndpointPairFactory<T>;
};

template <> struct Traits<Windows::Devices::WiFiDirect::IWiFiDirectDeviceStatics>
{
	using Abi = ABI::Windows::Devices::WiFiDirect::IWiFiDirectDeviceStatics;
	template <typename T> using Methods = Windows::Devices::WiFiDirect::impl_IWiFiDirectDeviceStatics<T>;
};

template <> struct Traits<Windows::Devices::WiFiDirect::IWiFiDirectDevice>
{
	using Abi = ABI::Windows::Devices::WiFiDirect::IWiFiDirectDevice;
	template <typename T> using Methods = Windows::Devices::WiFiDirect::impl_IWiFiDirectDevice<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ITracingStatusChangedEventArgs<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_IAsyncCausalityTracerStatics<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::IErrorReportingSettings>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::IErrorReportingSettings;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_IErrorReportingSettings<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingChannel>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannel;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingChannel<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingChannelFactory>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannelFactory;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingChannelFactory<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingActivity>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingActivity;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingActivity<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingActivityFactory>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingActivityFactory;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingActivityFactory<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingSession>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingSession;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingSession<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILoggingSessionFactory>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILoggingSessionFactory;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILoggingSessionFactory<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_ILogFileGeneratedEventArgs<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::IFileLoggingSession>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::IFileLoggingSession;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_IFileLoggingSession<T>;
};

template <> struct Traits<Windows::Foundation::Diagnostics::IFileLoggingSessionFactory>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::IFileLoggingSessionFactory;
	template <typename T> using Methods = Windows::Foundation::Diagnostics::impl_IFileLoggingSessionFactory<T>;
};

template <> struct Traits<Windows::Globalization::Collation::ICharacterGrouping>
{
	using Abi = ABI::Windows::Globalization::Collation::ICharacterGrouping;
	template <typename T> using Methods = Windows::Globalization::Collation::impl_ICharacterGrouping<T>;
};

template <> struct Traits<Windows::Globalization::Collation::ICharacterGroupings>
{
	using Abi = ABI::Windows::Globalization::Collation::ICharacterGroupings;
	template <typename T> using Methods = Windows::Globalization::Collation::impl_ICharacterGroupings<T>;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::IDateTimeFormatter>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::IDateTimeFormatter;
	template <typename T> using Methods = Windows::Globalization::DateTimeFormatting::impl_IDateTimeFormatter<T>;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::IDateTimeFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::IDateTimeFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::DateTimeFormatting::impl_IDateTimeFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::IDateTimeFormatterStatics>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::IDateTimeFormatterStatics;
	template <typename T> using Methods = Windows::Globalization::DateTimeFormatting::impl_IDateTimeFormatterStatics<T>;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::IDateTimeFormatter2>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::IDateTimeFormatter2;
	template <typename T> using Methods = Windows::Globalization::DateTimeFormatting::impl_IDateTimeFormatter2<T>;
};

template <> struct Traits<Windows::UI::Text::ITextConstantsStatics>
{
	using Abi = ABI::Windows::UI::Text::ITextConstantsStatics;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextConstantsStatics<T>;
};

template <> struct Traits<Windows::UI::Text::ITextDocument>
{
	using Abi = ABI::Windows::UI::Text::ITextDocument;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextDocument<T>;
};

template <> struct Traits<Windows::UI::Text::ITextRange>
{
	using Abi = ABI::Windows::UI::Text::ITextRange;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextRange<T>;
};

template <> struct Traits<Windows::UI::Text::ITextSelection>
{
	using Abi = ABI::Windows::UI::Text::ITextSelection;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextSelection<T>;
};

template <> struct Traits<Windows::UI::Text::ITextCharacterFormat>
{
	using Abi = ABI::Windows::UI::Text::ITextCharacterFormat;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextCharacterFormat<T>;
};

template <> struct Traits<Windows::UI::Text::ITextParagraphFormat>
{
	using Abi = ABI::Windows::UI::Text::ITextParagraphFormat;
	template <typename T> using Methods = Windows::UI::Text::impl_ITextParagraphFormat<T>;
};

template <> struct Traits<Windows::UI::Text::IFontWeights>
{
	using Abi = ABI::Windows::UI::Text::IFontWeights;
	template <typename T> using Methods = Windows::UI::Text::impl_IFontWeights<T>;
};

template <> struct Traits<Windows::UI::Text::IFontWeightsStatics>
{
	using Abi = ABI::Windows::UI::Text::IFontWeightsStatics;
	template <typename T> using Methods = Windows::UI::Text::impl_IFontWeightsStatics<T>;
};

template <> struct Traits<Windows::Globalization::Fonts::ILanguageFontGroup>
{
	using Abi = ABI::Windows::Globalization::Fonts::ILanguageFontGroup;
	template <typename T> using Methods = Windows::Globalization::Fonts::impl_ILanguageFontGroup<T>;
};

template <> struct Traits<Windows::Globalization::Fonts::ILanguageFontGroupFactory>
{
	using Abi = ABI::Windows::Globalization::Fonts::ILanguageFontGroupFactory;
	template <typename T> using Methods = Windows::Globalization::Fonts::impl_ILanguageFontGroupFactory<T>;
};

template <> struct Traits<Windows::Globalization::Fonts::ILanguageFont>
{
	using Abi = ABI::Windows::Globalization::Fonts::ILanguageFont;
	template <typename T> using Methods = Windows::Globalization::Fonts::impl_ILanguageFont<T>;
};

template <> struct Traits<Windows::Globalization::IJapanesePhoneticAnalyzerStatics>
{
	using Abi = ABI::Windows::Globalization::IJapanesePhoneticAnalyzerStatics;
	template <typename T> using Methods = Windows::Globalization::impl_IJapanesePhoneticAnalyzerStatics<T>;
};

template <> struct Traits<Windows::Globalization::IJapanesePhoneme>
{
	using Abi = ABI::Windows::Globalization::IJapanesePhoneme;
	template <typename T> using Methods = Windows::Globalization::impl_IJapanesePhoneme<T>;
};

template <> struct Traits<Windows::Globalization::ICalendarIdentifiersStatics>
{
	using Abi = ABI::Windows::Globalization::ICalendarIdentifiersStatics;
	template <typename T> using Methods = Windows::Globalization::impl_ICalendarIdentifiersStatics<T>;
};

template <> struct Traits<Windows::Globalization::IClockIdentifiersStatics>
{
	using Abi = ABI::Windows::Globalization::IClockIdentifiersStatics;
	template <typename T> using Methods = Windows::Globalization::impl_IClockIdentifiersStatics<T>;
};

template <> struct Traits<Windows::Globalization::INumeralSystemIdentifiersStatics>
{
	using Abi = ABI::Windows::Globalization::INumeralSystemIdentifiersStatics;
	template <typename T> using Methods = Windows::Globalization::impl_INumeralSystemIdentifiersStatics<T>;
};

template <> struct Traits<Windows::Globalization::ICurrencyIdentifiersStatics>
{
	using Abi = ABI::Windows::Globalization::ICurrencyIdentifiersStatics;
	template <typename T> using Methods = Windows::Globalization::impl_ICurrencyIdentifiersStatics<T>;
};

template <> struct Traits<Windows::Globalization::IGeographicRegion>
{
	using Abi = ABI::Windows::Globalization::IGeographicRegion;
	template <typename T> using Methods = Windows::Globalization::impl_IGeographicRegion<T>;
};

template <> struct Traits<Windows::Globalization::IGeographicRegionFactory>
{
	using Abi = ABI::Windows::Globalization::IGeographicRegionFactory;
	template <typename T> using Methods = Windows::Globalization::impl_IGeographicRegionFactory<T>;
};

template <> struct Traits<Windows::Globalization::IGeographicRegionStatics>
{
	using Abi = ABI::Windows::Globalization::IGeographicRegionStatics;
	template <typename T> using Methods = Windows::Globalization::impl_IGeographicRegionStatics<T>;
};

template <> struct Traits<Windows::Globalization::ILanguage>
{
	using Abi = ABI::Windows::Globalization::ILanguage;
	template <typename T> using Methods = Windows::Globalization::impl_ILanguage<T>;
};

template <> struct Traits<Windows::Globalization::ILanguageExtensionSubtags>
{
	using Abi = ABI::Windows::Globalization::ILanguageExtensionSubtags;
	template <typename T> using Methods = Windows::Globalization::impl_ILanguageExtensionSubtags<T>;
};

template <> struct Traits<Windows::Globalization::ILanguageFactory>
{
	using Abi = ABI::Windows::Globalization::ILanguageFactory;
	template <typename T> using Methods = Windows::Globalization::impl_ILanguageFactory<T>;
};

template <> struct Traits<Windows::Globalization::ILanguageStatics>
{
	using Abi = ABI::Windows::Globalization::ILanguageStatics;
	template <typename T> using Methods = Windows::Globalization::impl_ILanguageStatics<T>;
};

template <> struct Traits<Windows::Globalization::ICalendar>
{
	using Abi = ABI::Windows::Globalization::ICalendar;
	template <typename T> using Methods = Windows::Globalization::impl_ICalendar<T>;
};

template <> struct Traits<Windows::Globalization::ICalendarFactory2>
{
	using Abi = ABI::Windows::Globalization::ICalendarFactory2;
	template <typename T> using Methods = Windows::Globalization::impl_ICalendarFactory2<T>;
};

template <> struct Traits<Windows::Globalization::ITimeZoneOnCalendar>
{
	using Abi = ABI::Windows::Globalization::ITimeZoneOnCalendar;
	template <typename T> using Methods = Windows::Globalization::impl_ITimeZoneOnCalendar<T>;
};

template <> struct Traits<Windows::Globalization::ICalendarFactory>
{
	using Abi = ABI::Windows::Globalization::ICalendarFactory;
	template <typename T> using Methods = Windows::Globalization::impl_ICalendarFactory<T>;
};

template <> struct Traits<Windows::Globalization::IApplicationLanguagesStatics>
{
	using Abi = ABI::Windows::Globalization::IApplicationLanguagesStatics;
	template <typename T> using Methods = Windows::Globalization::impl_IApplicationLanguagesStatics<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberRounder;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberRounder<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ISignificantDigitsNumberRounder<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IIncrementNumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IIncrementNumberRounder;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_IIncrementNumberRounder<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberFormatter;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberFormatter<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberFormatter2>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberFormatter2;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberFormatter2<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberParser>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberParser;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberParser<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberFormatterOptions>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberFormatterOptions;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberFormatterOptions<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ISignificantDigitsOption>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ISignificantDigitsOption;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ISignificantDigitsOption<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumberRounderOption>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumberRounderOption;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumberRounderOption<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ISignedZeroOption;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ISignedZeroOption<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IDecimalFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IDecimalFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_IDecimalFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IPercentFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IPercentFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_IPercentFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IPermilleFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IPermilleFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_IPermilleFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ICurrencyFormatterFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ICurrencyFormatterFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ICurrencyFormatterFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ICurrencyFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ICurrencyFormatter;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ICurrencyFormatter<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::ICurrencyFormatter2>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::ICurrencyFormatter2;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_ICurrencyFormatter2<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumeralSystemTranslatorFactory>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumeralSystemTranslatorFactory;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumeralSystemTranslatorFactory<T>;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::INumeralSystemTranslator>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::INumeralSystemTranslator;
	template <typename T> using Methods = Windows::Globalization::NumberFormatting::impl_INumeralSystemTranslator<T>;
};

template <> struct Traits<Windows::Graphics::Display::IDisplayInformationStatics>
{
	using Abi = ABI::Windows::Graphics::Display::IDisplayInformationStatics;
	template <typename T> using Methods = Windows::Graphics::Display::impl_IDisplayInformationStatics<T>;
};

template <> struct Traits<Windows::Graphics::Display::IDisplayInformation>
{
	using Abi = ABI::Windows::Graphics::Display::IDisplayInformation;
	template <typename T> using Methods = Windows::Graphics::Display::impl_IDisplayInformation<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapTransform>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapTransform;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapTransform<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapTypedValue>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapTypedValue;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapTypedValue<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapTypedValueFactory>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapTypedValueFactory;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapTypedValueFactory<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapPropertiesView>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapPropertiesView;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapPropertiesView<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapProperties>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapProperties;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapProperties<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IPixelDataProvider>
{
	using Abi = ABI::Windows::Graphics::Imaging::IPixelDataProvider;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IPixelDataProvider<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapFrame>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapFrame;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapFrame<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapCodecInformation>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapCodecInformation;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapCodecInformation<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapDecoderStatics>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapDecoderStatics;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapDecoderStatics<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapDecoder>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapDecoder;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapDecoder<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapEncoderStatics>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapEncoderStatics;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapEncoderStatics<T>;
};

template <> struct Traits<Windows::Graphics::Imaging::IBitmapEncoder>
{
	using Abi = ABI::Windows::Graphics::Imaging::IBitmapEncoder;
	template <typename T> using Methods = Windows::Graphics::Imaging::impl_IBitmapEncoder<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskSourceRequestedHandler<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskOptionsCoreProperties<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskOptionsCoreUIConfiguration<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskOptionsCore>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskOptionsCore;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskOptionsCore<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic>
{
	using Abi = ABI::Windows::Graphics::Printing::IStandardPrintTaskOptionsStatic;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IStandardPrintTaskOptionsStatic<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintDocumentSource>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintDocumentSource;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintDocumentSource<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskProgressingEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskProgressingEventArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskProgressingEventArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskCompletedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskCompletedEventArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskCompletedEventArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTask>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTask;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTask<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskTargetDeviceSupport<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskSourceRequestedDeferral<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskSourceRequestedArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskRequestedDeferral>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskRequestedDeferral;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskRequestedDeferral<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskRequest>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskRequest;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskRequest<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintTaskRequestedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintTaskRequestedEventArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintTaskRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintManagerStatic>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintManagerStatic;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintManagerStatic<T>;
};

template <> struct Traits<Windows::Graphics::Printing::IPrintManager>
{
	using Abi = ABI::Windows::Graphics::Printing::IPrintManager;
	template <typename T> using Methods = Windows::Graphics::Printing::impl_IPrintManager<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintNumberOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintNumberOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintNumberOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintTextOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintTextOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintTextOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintItemListOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintCustomOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintCustomTextOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintCustomTextOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintCustomTextOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintCustomItemDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintCustomItemDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintCustomItemDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintCustomItemListOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintCustomItemListOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintCustomItemListOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionChangedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionChangedEventArgs;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintTaskOptionChangedEventArgs<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetails;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintTaskOptionDetails<T>;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetailsStatic>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetailsStatic;
	template <typename T> using Methods = Windows::Graphics::Printing::OptionDetails::impl_IPrintTaskOptionDetailsStatic<T>;
};

template <> struct Traits<Windows::Management::Core::IApplicationDataManagerStatics>
{
	using Abi = ABI::Windows::Management::Core::IApplicationDataManagerStatics;
	template <typename T> using Methods = Windows::Management::Core::impl_IApplicationDataManagerStatics<T>;
};

template <> struct Traits<Windows::Management::Core::IApplicationDataManager>
{
	using Abi = ABI::Windows::Management::Core::IApplicationDataManager;
	template <typename T> using Methods = Windows::Management::Core::impl_IApplicationDataManager<T>;
};

template <> struct Traits<Windows::Management::Deployment::IDeploymentResult>
{
	using Abi = ABI::Windows::Management::Deployment::IDeploymentResult;
	template <typename T> using Methods = Windows::Management::Deployment::impl_IDeploymentResult<T>;
};

template <> struct Traits<Windows::Management::Deployment::IPackageUserInformation>
{
	using Abi = ABI::Windows::Management::Deployment::IPackageUserInformation;
	template <typename T> using Methods = Windows::Management::Deployment::impl_IPackageUserInformation<T>;
};

template <> struct Traits<Windows::Management::Deployment::IPackageManager>
{
	using Abi = ABI::Windows::Management::Deployment::IPackageManager;
	template <typename T> using Methods = Windows::Management::Deployment::impl_IPackageManager<T>;
};

template <> struct Traits<Windows::Management::Deployment::IPackageManager2>
{
	using Abi = ABI::Windows::Management::Deployment::IPackageManager2;
	template <typename T> using Methods = Windows::Management::Deployment::impl_IPackageManager2<T>;
};

template <> struct Traits<Windows::Management::Workplace::IWorkplaceSettingsStatics>
{
	using Abi = ABI::Windows::Management::Workplace::IWorkplaceSettingsStatics;
	template <typename T> using Methods = Windows::Management::Workplace::impl_IWorkplaceSettingsStatics<T>;
};

template <> struct Traits<Windows::Media::IMediaMarker>
{
	using Abi = ABI::Windows::Media::IMediaMarker;
	template <typename T> using Methods = Windows::Media::impl_IMediaMarker<T>;
};

template <> struct Traits<Windows::Media::IMediaMarkers>
{
	using Abi = ABI::Windows::Media::IMediaMarkers;
	template <typename T> using Methods = Windows::Media::impl_IMediaMarkers<T>;
};

template <> struct Traits<Windows::Media::IMediaMarkerTypesStatics>
{
	using Abi = ABI::Windows::Media::IMediaMarkerTypesStatics;
	template <typename T> using Methods = Windows::Media::impl_IMediaMarkerTypesStatics<T>;
};

template <> struct Traits<Windows::Media::IMusicDisplayProperties>
{
	using Abi = ABI::Windows::Media::IMusicDisplayProperties;
	template <typename T> using Methods = Windows::Media::impl_IMusicDisplayProperties<T>;
};

template <> struct Traits<Windows::Media::IVideoDisplayProperties>
{
	using Abi = ABI::Windows::Media::IVideoDisplayProperties;
	template <typename T> using Methods = Windows::Media::impl_IVideoDisplayProperties<T>;
};

template <> struct Traits<Windows::Media::IImageDisplayProperties>
{
	using Abi = ABI::Windows::Media::IImageDisplayProperties;
	template <typename T> using Methods = Windows::Media::impl_IImageDisplayProperties<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControlsDisplayUpdater>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControlsDisplayUpdater;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControlsDisplayUpdater<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControlsButtonPressedEventArgs>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControlsButtonPressedEventArgs;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControlsButtonPressedEventArgs<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControlsPropertyChangedEventArgs>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControlsPropertyChangedEventArgs;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControlsPropertyChangedEventArgs<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControls>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControls;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControls<T>;
};

template <> struct Traits<Windows::Media::ISystemMediaTransportControlsStatics>
{
	using Abi = ABI::Windows::Media::ISystemMediaTransportControlsStatics;
	template <typename T> using Methods = Windows::Media::impl_ISystemMediaTransportControlsStatics<T>;
};

template <> struct Traits<Windows::Media::IMediaExtension>
{
	using Abi = ABI::Windows::Media::IMediaExtension;
	template <typename T> using Methods = Windows::Media::impl_IMediaExtension<T>;
};

template <> struct Traits<Windows::Media::IMediaExtensionManager>
{
	using Abi = ABI::Windows::Media::IMediaExtensionManager;
	template <typename T> using Methods = Windows::Media::impl_IMediaExtensionManager<T>;
};

template <> struct Traits<Windows::Media::IVideoEffectsStatics>
{
	using Abi = ABI::Windows::Media::IVideoEffectsStatics;
	template <typename T> using Methods = Windows::Media::impl_IVideoEffectsStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaRatio>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaRatio;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaRatio<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IAudioEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IAudioEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IAudioEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData>
{
	using Abi = ABI::Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IAudioEncodingPropertiesWithFormatUserData<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IAudioEncodingPropertiesStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IAudioEncodingPropertiesStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IAudioEncodingPropertiesStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IVideoEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IVideoEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IVideoEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingSubtypesStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingSubtypesStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IH264ProfileIdsStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IH264ProfileIdsStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IH264ProfileIdsStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMpeg2ProfileIdsStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMpeg2ProfileIdsStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMpeg2ProfileIdsStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IVideoEncodingProperties2>
{
	using Abi = ABI::Windows::Media::MediaProperties::IVideoEncodingProperties2;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IVideoEncodingProperties2<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IVideoEncodingPropertiesStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IVideoEncodingPropertiesStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IVideoEncodingPropertiesStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IImageEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IImageEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IImageEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IImageEncodingPropertiesStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IImageEncodingPropertiesStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IImageEncodingPropertiesStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IImageEncodingPropertiesStatics2>
{
	using Abi = ABI::Windows::Media::MediaProperties::IImageEncodingPropertiesStatics2;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IImageEncodingPropertiesStatics2<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IContainerEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::IContainerEncodingProperties;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IContainerEncodingProperties<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingProfileStatics>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingProfileStatics;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingProfileStatics<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingProfileStatics2>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingProfileStatics2;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingProfileStatics2<T>;
};

template <> struct Traits<Windows::Media::MediaProperties::IMediaEncodingProfile>
{
	using Abi = ABI::Windows::Media::MediaProperties::IMediaEncodingProfile;
	template <typename T> using Methods = Windows::Media::MediaProperties::impl_IMediaEncodingProfile<T>;
};

template <> struct Traits<Windows::Media::Devices::ICallControlEventHandler>
{
	using Abi = ABI::Windows::Media::Devices::ICallControlEventHandler;
	template <typename T> using Methods = Windows::Media::Devices::impl_ICallControlEventHandler<T>;
};

template <> struct Traits<Windows::Media::Devices::IDialRequestedEventHandler>
{
	using Abi = ABI::Windows::Media::Devices::IDialRequestedEventHandler;
	template <typename T> using Methods = Windows::Media::Devices::impl_IDialRequestedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Devices::IRedialRequestedEventHandler>
{
	using Abi = ABI::Windows::Media::Devices::IRedialRequestedEventHandler;
	template <typename T> using Methods = Windows::Media::Devices::impl_IRedialRequestedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Devices::IKeypadPressedEventHandler>
{
	using Abi = ABI::Windows::Media::Devices::IKeypadPressedEventHandler;
	template <typename T> using Methods = Windows::Media::Devices::impl_IKeypadPressedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Devices::IDialRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::IDialRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Devices::impl_IDialRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Devices::IRedialRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::IRedialRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Devices::impl_IRedialRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Devices::IKeypadPressedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::IKeypadPressedEventArgs;
	template <typename T> using Methods = Windows::Media::Devices::impl_IKeypadPressedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Devices::ICallControl>
{
	using Abi = ABI::Windows::Media::Devices::ICallControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ICallControl<T>;
};

template <> struct Traits<Windows::Media::Devices::ICallControlStatics>
{
	using Abi = ABI::Windows::Media::Devices::ICallControlStatics;
	template <typename T> using Methods = Windows::Media::Devices::impl_ICallControlStatics<T>;
};

template <> struct Traits<Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs;
	template <typename T> using Methods = Windows::Media::Devices::impl_IDefaultAudioDeviceChangedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Devices::IMediaDeviceStatics>
{
	using Abi = ABI::Windows::Media::Devices::IMediaDeviceStatics;
	template <typename T> using Methods = Windows::Media::Devices::impl_IMediaDeviceStatics<T>;
};

template <> struct Traits<Windows::Media::Devices::ISceneModeControl>
{
	using Abi = ABI::Windows::Media::Devices::ISceneModeControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ISceneModeControl<T>;
};

template <> struct Traits<Windows::Media::Devices::ITorchControl>
{
	using Abi = ABI::Windows::Media::Devices::ITorchControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ITorchControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IFlashControl>
{
	using Abi = ABI::Windows::Media::Devices::IFlashControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IFlashControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IExposureCompensationControl>
{
	using Abi = ABI::Windows::Media::Devices::IExposureCompensationControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IExposureCompensationControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IIsoSpeedControl>
{
	using Abi = ABI::Windows::Media::Devices::IIsoSpeedControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IIsoSpeedControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IWhiteBalanceControl>
{
	using Abi = ABI::Windows::Media::Devices::IWhiteBalanceControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IWhiteBalanceControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IExposureControl>
{
	using Abi = ABI::Windows::Media::Devices::IExposureControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IExposureControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IFocusControl>
{
	using Abi = ABI::Windows::Media::Devices::IFocusControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IFocusControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IRegionOfInterest>
{
	using Abi = ABI::Windows::Media::Devices::IRegionOfInterest;
	template <typename T> using Methods = Windows::Media::Devices::impl_IRegionOfInterest<T>;
};

template <> struct Traits<Windows::Media::Devices::IRegionsOfInterestControl>
{
	using Abi = ABI::Windows::Media::Devices::IRegionsOfInterestControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IRegionsOfInterestControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IMediaDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::IMediaDeviceController;
	template <typename T> using Methods = Windows::Media::Devices::impl_IMediaDeviceController<T>;
};

template <> struct Traits<Windows::Media::Devices::IAudioDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::IAudioDeviceController;
	template <typename T> using Methods = Windows::Media::Devices::impl_IAudioDeviceController<T>;
};

template <> struct Traits<Windows::Media::Devices::IVideoDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::IVideoDeviceController;
	template <typename T> using Methods = Windows::Media::Devices::impl_IVideoDeviceController<T>;
};

template <> struct Traits<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2>
{
	using Abi = ABI::Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2;
	template <typename T> using Methods = Windows::Media::Devices::impl_IAdvancedVideoCaptureDeviceController2<T>;
};

template <> struct Traits<Windows::Media::Devices::IMediaDeviceControl>
{
	using Abi = ABI::Windows::Media::Devices::IMediaDeviceControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_IMediaDeviceControl<T>;
};

template <> struct Traits<Windows::Media::Devices::IMediaDeviceControlCapabilities>
{
	using Abi = ABI::Windows::Media::Devices::IMediaDeviceControlCapabilities;
	template <typename T> using Methods = Windows::Media::Devices::impl_IMediaDeviceControlCapabilities<T>;
};

template <> struct Traits<Windows::Media::Devices::IAdvancedVideoCaptureDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::IAdvancedVideoCaptureDeviceController;
	template <typename T> using Methods = Windows::Media::Devices::impl_IAdvancedVideoCaptureDeviceController<T>;
};

template <> struct Traits<Windows::Media::Devices::ILowLagPhotoSequenceControl>
{
	using Abi = ABI::Windows::Media::Devices::ILowLagPhotoSequenceControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ILowLagPhotoSequenceControl<T>;
};

template <> struct Traits<Windows::Media::Devices::ILowLagPhotoControl>
{
	using Abi = ABI::Windows::Media::Devices::ILowLagPhotoControl;
	template <typename T> using Methods = Windows::Media::Devices::impl_ILowLagPhotoControl<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureFailedEventHandler>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureFailedEventHandler;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureFailedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Capture::IRecordLimitationExceededEventHandler>
{
	using Abi = ABI::Windows::Media::Capture::IRecordLimitationExceededEventHandler;
	template <typename T> using Methods = Windows::Media::Capture::impl_IRecordLimitationExceededEventHandler<T>;
};

template <> struct Traits<Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICameraCaptureUIPhotoCaptureSettings<T>;
};

template <> struct Traits<Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICameraCaptureUIVideoCaptureSettings<T>;
};

template <> struct Traits<Windows::Media::Capture::ICameraCaptureUI>
{
	using Abi = ABI::Windows::Media::Capture::ICameraCaptureUI;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICameraCaptureUI<T>;
};

template <> struct Traits<Windows::Media::Capture::ICameraOptionsUIStatics>
{
	using Abi = ABI::Windows::Media::Capture::ICameraOptionsUIStatics;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICameraOptionsUIStatics<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureFailedEventArgs>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureFailedEventArgs;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureFailedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureInitializationSettings>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureInitializationSettings;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureInitializationSettings<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureInitializationSettings2>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureInitializationSettings2;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureInitializationSettings2<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCapture>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCapture;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCapture<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCapture2>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCapture2;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCapture2<T>;
};

template <> struct Traits<Windows::Media::Capture::ILowLagPhotoCapture>
{
	using Abi = ABI::Windows::Media::Capture::ILowLagPhotoCapture;
	template <typename T> using Methods = Windows::Media::Capture::impl_ILowLagPhotoCapture<T>;
};

template <> struct Traits<Windows::Media::Capture::ILowLagMediaRecording>
{
	using Abi = ABI::Windows::Media::Capture::ILowLagMediaRecording;
	template <typename T> using Methods = Windows::Media::Capture::impl_ILowLagMediaRecording<T>;
};

template <> struct Traits<Windows::Media::Capture::ILowLagPhotoSequenceCapture>
{
	using Abi = ABI::Windows::Media::Capture::ILowLagPhotoSequenceCapture;
	template <typename T> using Methods = Windows::Media::Capture::impl_ILowLagPhotoSequenceCapture<T>;
};

template <> struct Traits<Windows::Media::Capture::IPhotoCapturedEventArgs>
{
	using Abi = ABI::Windows::Media::Capture::IPhotoCapturedEventArgs;
	template <typename T> using Methods = Windows::Media::Capture::impl_IPhotoCapturedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Capture::ICapturedPhoto>
{
	using Abi = ABI::Windows::Media::Capture::ICapturedPhoto;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICapturedPhoto<T>;
};

template <> struct Traits<Windows::Media::Capture::ICapturedFrame>
{
	using Abi = ABI::Windows::Media::Capture::ICapturedFrame;
	template <typename T> using Methods = Windows::Media::Capture::impl_ICapturedFrame<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureVideoPreview>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureVideoPreview;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureVideoPreview<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureSettings;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureSettings<T>;
};

template <> struct Traits<Windows::Media::Capture::IMediaCaptureSettings2>
{
	using Abi = ABI::Windows::Media::Capture::IMediaCaptureSettings2;
	template <typename T> using Methods = Windows::Media::Capture::impl_IMediaCaptureSettings2<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IRatedContentDescription>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IRatedContentDescription;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IRatedContentDescription<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IRatedContentDescriptionFactory>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IRatedContentDescriptionFactory;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IRatedContentDescriptionFactory<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IContentRestrictionsBrowsePolicy<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IRatedContentRestrictions>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IRatedContentRestrictions;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IRatedContentRestrictions<T>;
};

template <> struct Traits<Windows::Media::ContentRestrictions::IRatedContentRestrictionsFactory>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::IRatedContentRestrictionsFactory;
	template <typename T> using Methods = Windows::Media::ContentRestrictions::impl_IRatedContentRestrictionsFactory<T>;
};

template <> struct Traits<Windows::Media::Protection::IServiceRequestedEventHandler>
{
	using Abi = ABI::Windows::Media::Protection::IServiceRequestedEventHandler;
	template <typename T> using Methods = Windows::Media::Protection::impl_IServiceRequestedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Protection::IRebootNeededEventHandler>
{
	using Abi = ABI::Windows::Media::Protection::IRebootNeededEventHandler;
	template <typename T> using Methods = Windows::Media::Protection::impl_IRebootNeededEventHandler<T>;
};

template <> struct Traits<Windows::Media::Protection::IComponentLoadFailedEventHandler>
{
	using Abi = ABI::Windows::Media::Protection::IComponentLoadFailedEventHandler;
	template <typename T> using Methods = Windows::Media::Protection::impl_IComponentLoadFailedEventHandler<T>;
};

template <> struct Traits<Windows::Media::Protection::IMediaProtectionManager>
{
	using Abi = ABI::Windows::Media::Protection::IMediaProtectionManager;
	template <typename T> using Methods = Windows::Media::Protection::impl_IMediaProtectionManager<T>;
};

template <> struct Traits<Windows::Media::Protection::IMediaProtectionServiceCompletion>
{
	using Abi = ABI::Windows::Media::Protection::IMediaProtectionServiceCompletion;
	template <typename T> using Methods = Windows::Media::Protection::impl_IMediaProtectionServiceCompletion<T>;
};

template <> struct Traits<Windows::Media::Protection::IServiceRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Protection::IServiceRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Protection::impl_IServiceRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Protection::IMediaProtectionServiceRequest>
{
	using Abi = ABI::Windows::Media::Protection::IMediaProtectionServiceRequest;
	template <typename T> using Methods = Windows::Media::Protection::impl_IMediaProtectionServiceRequest<T>;
};

template <> struct Traits<Windows::Media::Protection::IComponentLoadFailedEventArgs>
{
	using Abi = ABI::Windows::Media::Protection::IComponentLoadFailedEventArgs;
	template <typename T> using Methods = Windows::Media::Protection::impl_IComponentLoadFailedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Protection::IRevocationAndRenewalInformation>
{
	using Abi = ABI::Windows::Media::Protection::IRevocationAndRenewalInformation;
	template <typename T> using Methods = Windows::Media::Protection::impl_IRevocationAndRenewalInformation<T>;
};

template <> struct Traits<Windows::Media::Protection::IRevocationAndRenewalItem>
{
	using Abi = ABI::Windows::Media::Protection::IRevocationAndRenewalItem;
	template <typename T> using Methods = Windows::Media::Protection::impl_IRevocationAndRenewalItem<T>;
};

template <> struct Traits<Windows::Media::Protection::IComponentRenewalStatics>
{
	using Abi = ABI::Windows::Media::Protection::IComponentRenewalStatics;
	template <typename T> using Methods = Windows::Media::Protection::impl_IComponentRenewalStatics<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamDescriptor;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamDescriptor<T>;
};

template <> struct Traits<Windows::Media::Core::IAudioStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::IAudioStreamDescriptor;
	template <typename T> using Methods = Windows::Media::Core::impl_IAudioStreamDescriptor<T>;
};

template <> struct Traits<Windows::Media::Core::IAudioStreamDescriptorFactory>
{
	using Abi = ABI::Windows::Media::Core::IAudioStreamDescriptorFactory;
	template <typename T> using Methods = Windows::Media::Core::impl_IAudioStreamDescriptorFactory<T>;
};

template <> struct Traits<Windows::Media::Core::IVideoStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::IVideoStreamDescriptor;
	template <typename T> using Methods = Windows::Media::Core::impl_IVideoStreamDescriptor<T>;
};

template <> struct Traits<Windows::Media::Core::IVideoStreamDescriptorFactory>
{
	using Abi = ABI::Windows::Media::Core::IVideoStreamDescriptorFactory;
	template <typename T> using Methods = Windows::Media::Core::impl_IVideoStreamDescriptorFactory<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaSource>
{
	using Abi = ABI::Windows::Media::Core::IMediaSource;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaSource<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSource>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSource;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSource<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceFactory>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceFactory;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceFactory<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSample>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSample;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSample<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSampleStatics>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSampleStatics;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSampleStatics<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSampleProtectionProperties>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSampleProtectionProperties;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSampleProtectionProperties<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceClosedRequest>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceClosedRequest;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceClosedRequest<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceClosedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceClosedEventArgs;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceClosedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceStartingRequestDeferral<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceStartingRequest>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceStartingRequest;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceStartingRequest<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceStartingEventArgs>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceStartingEventArgs;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceStartingEventArgs<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSampleRequestDeferral<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSampleRequest>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSampleRequest;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSampleRequest<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSampleRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSwitchStreamsRequestDeferral<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSwitchStreamsRequest<T>;
};

template <> struct Traits<Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::Core::impl_IMediaStreamSourceSwitchStreamsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::Effects::IAudioEffect>
{
	using Abi = ABI::Windows::Media::Effects::IAudioEffect;
	template <typename T> using Methods = Windows::Media::Effects::impl_IAudioEffect<T>;
};

template <> struct Traits<Windows::Media::Effects::IAudioEffectsManagerStatics>
{
	using Abi = ABI::Windows::Media::Effects::IAudioEffectsManagerStatics;
	template <typename T> using Methods = Windows::Media::Effects::impl_IAudioEffectsManagerStatics<T>;
};

template <> struct Traits<Windows::Media::Effects::IAudioRenderEffectsManager>
{
	using Abi = ABI::Windows::Media::Effects::IAudioRenderEffectsManager;
	template <typename T> using Methods = Windows::Media::Effects::impl_IAudioRenderEffectsManager<T>;
};

template <> struct Traits<Windows::Media::Effects::IAudioCaptureEffectsManager>
{
	using Abi = ABI::Windows::Media::Effects::IAudioCaptureEffectsManager;
	template <typename T> using Methods = Windows::Media::Effects::impl_IAudioCaptureEffectsManager<T>;
};

template <> struct Traits<Windows::Media::Playlists::IPlaylist>
{
	using Abi = ABI::Windows::Media::Playlists::IPlaylist;
	template <typename T> using Methods = Windows::Media::Playlists::impl_IPlaylist<T>;
};

template <> struct Traits<Windows::Media::Playlists::IPlaylistStatics>
{
	using Abi = ABI::Windows::Media::Playlists::IPlaylistStatics;
	template <typename T> using Methods = Windows::Media::Playlists::impl_IPlaylistStatics<T>;
};

template <> struct Traits<Windows::Media::PlayTo::ISourceChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::ISourceChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_ISourceChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlaybackRateChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_ICurrentTimeChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IMuteChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IMuteChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IMuteChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IVolumeChangeRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToReceiver>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToReceiver;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToReceiver<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSource>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSource;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSource<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceWithPreferredSourceUri<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToConnectionStateChangedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToConnectionTransferredEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToConnectionErrorEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToConnection>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToConnection;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToConnection<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceSelectedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceDeferral>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceDeferral;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceDeferral<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceRequest>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceRequest;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceRequest<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToSourceRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToManager>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToManager;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToManager<T>;
};

template <> struct Traits<Windows::Media::PlayTo::IPlayToManagerStatics>
{
	using Abi = ABI::Windows::Media::PlayTo::IPlayToManagerStatics;
	template <typename T> using Methods = Windows::Media::PlayTo::impl_IPlayToManagerStatics<T>;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::IVoiceInformation>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::IVoiceInformation;
	template <typename T> using Methods = Windows::Media::SpeechSynthesis::impl_IVoiceInformation<T>;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::IInstalledVoicesStatic>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::IInstalledVoicesStatic;
	template <typename T> using Methods = Windows::Media::SpeechSynthesis::impl_IInstalledVoicesStatic<T>;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::ISpeechSynthesisStream>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::ISpeechSynthesisStream;
	template <typename T> using Methods = Windows::Media::SpeechSynthesis::impl_ISpeechSynthesisStream<T>;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::ISpeechSynthesizer>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::ISpeechSynthesizer;
	template <typename T> using Methods = Windows::Media::SpeechSynthesis::impl_ISpeechSynthesizer<T>;
};

template <> struct Traits<Windows::Media::Streaming::IDeviceControllerFinderHandler>
{
	using Abi = ABI::Windows::Media::Streaming::IDeviceControllerFinderHandler;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IDeviceControllerFinderHandler<T>;
};

template <> struct Traits<Windows::Media::Streaming::IConnectionStatusHandler>
{
	using Abi = ABI::Windows::Media::Streaming::IConnectionStatusHandler;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IConnectionStatusHandler<T>;
};

template <> struct Traits<Windows::Media::Streaming::IDeviceController>
{
	using Abi = ABI::Windows::Media::Streaming::IDeviceController;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IDeviceController<T>;
};

template <> struct Traits<Windows::Media::Streaming::IBasicDevice>
{
	using Abi = ABI::Windows::Media::Streaming::IBasicDevice;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IBasicDevice<T>;
};

template <> struct Traits<Windows::Media::Streaming::IActiveBasicDevice>
{
	using Abi = ABI::Windows::Media::Streaming::IActiveBasicDevice;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IActiveBasicDevice<T>;
};

template <> struct Traits<Windows::Media::Streaming::IDeviceIcon>
{
	using Abi = ABI::Windows::Media::Streaming::IDeviceIcon;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IDeviceIcon<T>;
};

template <> struct Traits<Windows::Media::Streaming::IActiveBasicDeviceStatics>
{
	using Abi = ABI::Windows::Media::Streaming::IActiveBasicDeviceStatics;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IActiveBasicDeviceStatics<T>;
};

template <> struct Traits<Windows::Media::Streaming::IDevicePair>
{
	using Abi = ABI::Windows::Media::Streaming::IDevicePair;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IDevicePair<T>;
};

template <> struct Traits<Windows::Media::Streaming::ITransportParametersUpdateHandler>
{
	using Abi = ABI::Windows::Media::Streaming::ITransportParametersUpdateHandler;
	template <typename T> using Methods = Windows::Media::Streaming::impl_ITransportParametersUpdateHandler<T>;
};

template <> struct Traits<Windows::Media::Streaming::IRenderingParametersUpdateHandler>
{
	using Abi = ABI::Windows::Media::Streaming::IRenderingParametersUpdateHandler;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IRenderingParametersUpdateHandler<T>;
};

template <> struct Traits<Windows::Media::Streaming::IMediaRenderer>
{
	using Abi = ABI::Windows::Media::Streaming::IMediaRenderer;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IMediaRenderer<T>;
};

template <> struct Traits<Windows::Media::Streaming::IMediaRendererActionInformation>
{
	using Abi = ABI::Windows::Media::Streaming::IMediaRendererActionInformation;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IMediaRendererActionInformation<T>;
};

template <> struct Traits<Windows::Media::Streaming::ITransportParameters>
{
	using Abi = ABI::Windows::Media::Streaming::ITransportParameters;
	template <typename T> using Methods = Windows::Media::Streaming::impl_ITransportParameters<T>;
};

template <> struct Traits<Windows::Media::Streaming::IMediaRendererFactory>
{
	using Abi = ABI::Windows::Media::Streaming::IMediaRendererFactory;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IMediaRendererFactory<T>;
};

template <> struct Traits<Windows::Media::Streaming::IStreamSelectorStatics>
{
	using Abi = ABI::Windows::Media::Streaming::IStreamSelectorStatics;
	template <typename T> using Methods = Windows::Media::Streaming::impl_IStreamSelectorStatics<T>;
};

template <> struct Traits<Windows::Media::Transcoding::IMediaTranscoder2>
{
	using Abi = ABI::Windows::Media::Transcoding::IMediaTranscoder2;
	template <typename T> using Methods = Windows::Media::Transcoding::impl_IMediaTranscoder2<T>;
};

template <> struct Traits<Windows::Media::Transcoding::IMediaTranscoder>
{
	using Abi = ABI::Windows::Media::Transcoding::IMediaTranscoder;
	template <typename T> using Methods = Windows::Media::Transcoding::impl_IMediaTranscoder<T>;
};

template <> struct Traits<Windows::Media::Transcoding::IPrepareTranscodeResult>
{
	using Abi = ABI::Windows::Media::Transcoding::IPrepareTranscodeResult;
	template <typename T> using Methods = Windows::Media::Transcoding::impl_IPrepareTranscodeResult<T>;
};

template <> struct Traits<Windows::Security::Credentials::IPasswordCredential>
{
	using Abi = ABI::Windows::Security::Credentials::IPasswordCredential;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IPasswordCredential<T>;
};

template <> struct Traits<Windows::Security::Credentials::ICredentialFactory>
{
	using Abi = ABI::Windows::Security::Credentials::ICredentialFactory;
	template <typename T> using Methods = Windows::Security::Credentials::impl_ICredentialFactory<T>;
};

template <> struct Traits<Windows::Security::Credentials::IPasswordVault>
{
	using Abi = ABI::Windows::Security::Credentials::IPasswordVault;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IPasswordVault<T>;
};

template <> struct Traits<Windows::Security::Credentials::IWebAccountProviderFactory>
{
	using Abi = ABI::Windows::Security::Credentials::IWebAccountProviderFactory;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IWebAccountProviderFactory<T>;
};

template <> struct Traits<Windows::Security::Credentials::IWebAccountFactory>
{
	using Abi = ABI::Windows::Security::Credentials::IWebAccountFactory;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IWebAccountFactory<T>;
};

template <> struct Traits<Windows::Security::Credentials::IWebAccountProvider>
{
	using Abi = ABI::Windows::Security::Credentials::IWebAccountProvider;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IWebAccountProvider<T>;
};

template <> struct Traits<Windows::Security::Credentials::IWebAccount>
{
	using Abi = ABI::Windows::Security::Credentials::IWebAccount;
	template <typename T> using Methods = Windows::Security::Credentials::impl_IWebAccount<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastDismissedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::IToastDismissedEventArgs;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastDismissedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::IToastFailedEventArgs;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastFailedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::IToastActivatedEventArgs;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastActivatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileUpdateManagerStatics>
{
	using Abi = ABI::Windows::UI::Notifications::ITileUpdateManagerStatics;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileUpdateManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileUpdater>
{
	using Abi = ABI::Windows::UI::Notifications::ITileUpdater;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileUpdater<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileUpdater2>
{
	using Abi = ABI::Windows::UI::Notifications::ITileUpdater2;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileUpdater2<T>;
};

template <> struct Traits<Windows::UI::Notifications::IBadgeUpdateManagerStatics>
{
	using Abi = ABI::Windows::UI::Notifications::IBadgeUpdateManagerStatics;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IBadgeUpdateManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Notifications::IBadgeUpdater>
{
	using Abi = ABI::Windows::UI::Notifications::IBadgeUpdater;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IBadgeUpdater<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastNotificationManagerStatics>
{
	using Abi = ABI::Windows::UI::Notifications::IToastNotificationManagerStatics;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastNotificationManagerStatics<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastNotifier>
{
	using Abi = ABI::Windows::UI::Notifications::IToastNotifier;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastNotifier<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::ITileNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::ITileNotification>
{
	using Abi = ABI::Windows::UI::Notifications::ITileNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_ITileNotification<T>;
};

template <> struct Traits<Windows::UI::Notifications::IBadgeNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::IBadgeNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IBadgeNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::IBadgeNotification>
{
	using Abi = ABI::Windows::UI::Notifications::IBadgeNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IBadgeNotification<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::IToastNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::IToastNotification>
{
	using Abi = ABI::Windows::UI::Notifications::IToastNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IToastNotification<T>;
};

template <> struct Traits<Windows::UI::Notifications::IScheduledToastNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::IScheduledToastNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IScheduledToastNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::IScheduledToastNotification>
{
	using Abi = ABI::Windows::UI::Notifications::IScheduledToastNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IScheduledToastNotification<T>;
};

template <> struct Traits<Windows::UI::Notifications::IScheduledTileNotificationFactory>
{
	using Abi = ABI::Windows::UI::Notifications::IScheduledTileNotificationFactory;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IScheduledTileNotificationFactory<T>;
};

template <> struct Traits<Windows::UI::Notifications::IScheduledTileNotification>
{
	using Abi = ABI::Windows::UI::Notifications::IScheduledTileNotification;
	template <typename T> using Methods = Windows::UI::Notifications::impl_IScheduledTileNotification<T>;
};

template <> struct Traits<Windows::Web::IUriToStreamResolver>
{
	using Abi = ABI::Windows::Web::IUriToStreamResolver;
	template <typename T> using Methods = Windows::Web::impl_IUriToStreamResolver<T>;
};

template <> struct Traits<Windows::Web::IWebErrorStatics>
{
	using Abi = ABI::Windows::Web::IWebErrorStatics;
	template <typename T> using Methods = Windows::Web::impl_IWebErrorStatics<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferBase>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferBase;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferBase<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IUnconstrainedTransferRequestResult>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IUnconstrainedTransferRequestResult;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IUnconstrainedTransferRequestResult<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloaderUserConsent>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloaderUserConsent;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloaderUserConsent<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploaderUserConsent>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploaderUserConsent;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploaderUserConsent<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloader>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloader;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloader<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloader2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloader2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloader2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploader>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploader;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploader<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploader2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploader2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploader2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferOperation;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferOperation<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferOperationPriority>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferOperationPriority;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferOperationPriority<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IDownloadOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IDownloadOperation;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IDownloadOperation<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IDownloadOperation2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IDownloadOperation2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IDownloadOperation2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IUploadOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IUploadOperation;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IUploadOperation<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IUploadOperation2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IUploadOperation2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IUploadOperation2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloaderStaticMethods>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloaderStaticMethods;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloaderStaticMethods<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundDownloaderStaticMethods2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundDownloaderStaticMethods2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundDownloaderStaticMethods2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploaderStaticMethods>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploaderStaticMethods;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploaderStaticMethods<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundUploaderStaticMethods2>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundUploaderStaticMethods2;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundUploaderStaticMethods2<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IResponseInformation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IResponseInformation;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IResponseInformation<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferErrorStaticMethods>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferErrorStaticMethods;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferErrorStaticMethods<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferContentPart<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPartFactory>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPartFactory;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferContentPartFactory<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferGroup>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferGroup;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferGroup<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IBackgroundTransferGroupStatics>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IBackgroundTransferGroupStatics;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IBackgroundTransferGroupStatics<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IContentPrefetcherTime>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IContentPrefetcherTime;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IContentPrefetcherTime<T>;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::IContentPrefetcher>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::IContentPrefetcher;
	template <typename T> using Methods = Windows::Networking::BackgroundTransfer::impl_IContentPrefetcher<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccountStatics>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccountStatics;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccountStatics<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccount>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccount;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccount<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccount2>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccount2;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccount2<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandDeviceInformation<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandNetwork>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandNetwork;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandNetwork<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorNotificationEventDetails<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringEntitlementCheck<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringAccessPointConfiguration<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringOperationResult<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringManagerStatics;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringManagerStatics<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_INetworkOperatorTetheringManager<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccountEventArgs<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccountUpdatedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IMobileBroadbandAccountWatcher<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotAuthenticationEventDetails<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotAuthenticationContextStatics>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotAuthenticationContextStatics;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotAuthenticationContextStatics<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotAuthenticationContext>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotAuthenticationContext;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotAuthenticationContext<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotCredentialsAuthenticationResult<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IHotspotAuthenticationContext2<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IProvisionFromXmlDocumentResults<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IProvisionedProfile>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IProvisionedProfile;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IProvisionedProfile<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IProvisioningAgent>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IProvisioningAgent;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IProvisioningAgent<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IProvisioningAgentStaticMethods>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IProvisioningAgentStaticMethods;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IProvisioningAgentStaticMethods<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdMessage>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdMessage;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdMessage<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdMessageFactory>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdMessageFactory;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdMessageFactory<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdReply>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdReply;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdReply<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdSession>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdSession;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdSession<T>;
};

template <> struct Traits<Windows::Networking::NetworkOperators::IUssdSessionStatics>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::IUssdSessionStatics;
	template <typename T> using Methods = Windows::Networking::NetworkOperators::impl_IUssdSessionStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateRequestProperties>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateRequestProperties;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateRequestProperties<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateRequestProperties2>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateRequestProperties2;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateRequestProperties2<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateEnrollmentManagerStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics2>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics2;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateEnrollmentManagerStatics2<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IKeyAttestationHelperStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IKeyAttestationHelperStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IKeyAttestationHelperStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateStoresStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateStoresStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateStoresStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IUserCertificateEnrollmentManager<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateStore>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateStore;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateStore<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IKeyAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IKeyAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IKeyAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IKeyStorageProviderNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IKeyStorageProviderNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IKeyStorageProviderNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IChainBuildingParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IChainBuildingParameters;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IChainBuildingParameters<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::IChainValidationParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::IChainValidationParameters;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_IChainValidationParameters<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateQuery>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateQuery;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateQuery<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateChain>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateChain;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateChain<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificate>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificate;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificate<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICertificateFactory>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateFactory;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICertificateFactory<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsTimestampInfo>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsTimestampInfo;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsTimestampInfo<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsSignerInfo>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsSignerInfo;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsSignerInfo<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsAttachedSignature>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsAttachedSignature;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsAttachedSignature<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureFactory>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureFactory;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsAttachedSignatureFactory<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsAttachedSignatureStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsDetachedSignature>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsDetachedSignature;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsDetachedSignature<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureFactory>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureFactory;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsDetachedSignatureFactory<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Certificates::impl_ICmsDetachedSignatureStatics<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IControlChannelTrigger>
{
	using Abi = ABI::Windows::Networking::Sockets::IControlChannelTrigger;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IControlChannelTrigger<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IControlChannelTriggerFactory>
{
	using Abi = ABI::Windows::Networking::Sockets::IControlChannelTriggerFactory;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IControlChannelTriggerFactory<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IControlChannelTriggerEventDetails>
{
	using Abi = ABI::Windows::Networking::Sockets::IControlChannelTriggerEventDetails;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IControlChannelTriggerEventDetails<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IControlChannelTriggerResetEventDetails>
{
	using Abi = ABI::Windows::Networking::Sockets::IControlChannelTriggerResetEventDetails;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IControlChannelTriggerResetEventDetails<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketMessageReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IMessageWebSocketMessageReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocketClosedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocketClosedEventArgs;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocketClosedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketInformation;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketInformation<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketControl2>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketControl2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketControl2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocketStatics>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocketStatics;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocketStatics<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IDatagramSocket2>
{
	using Abi = ABI::Windows::Networking::Sockets::IDatagramSocket2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IDatagramSocket2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketInformation;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketInformation<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketInformation2>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketInformation2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketInformation2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketControl2>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketControl2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketControl2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocket2>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocket2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocket2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListenerControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListenerControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListenerInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerInformation;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListenerInformation<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListenerConnectionReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListener>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListener;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListener<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamSocketListener2>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamSocketListener2;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamSocketListener2<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocketInformation;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocketInformation<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IMessageWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IMessageWebSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IMessageWebSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IMessageWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IMessageWebSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IMessageWebSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamWebSocketControl;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamWebSocketControl<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IStreamWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::IStreamWebSocket;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IStreamWebSocket<T>;
};

template <> struct Traits<Windows::Networking::Sockets::ISocketErrorStatics>
{
	using Abi = ABI::Windows::Networking::Sockets::ISocketErrorStatics;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_ISocketErrorStatics<T>;
};

template <> struct Traits<Windows::Networking::Sockets::IWebSocketErrorStatics>
{
	using Abi = ABI::Windows::Networking::Sockets::IWebSocketErrorStatics;
	template <typename T> using Methods = Windows::Networking::Sockets::impl_IWebSocketErrorStatics<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IMessageReceivedHandler>
{
	using Abi = ABI::Windows::Networking::Proximity::IMessageReceivedHandler;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IMessageReceivedHandler<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IMessageTransmittedHandler>
{
	using Abi = ABI::Windows::Networking::Proximity::IMessageTransmittedHandler;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IMessageTransmittedHandler<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IDeviceArrivedEventHandler>
{
	using Abi = ABI::Windows::Networking::Proximity::IDeviceArrivedEventHandler;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IDeviceArrivedEventHandler<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IDeviceDepartedEventHandler>
{
	using Abi = ABI::Windows::Networking::Proximity::IDeviceDepartedEventHandler;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IDeviceDepartedEventHandler<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IProximityMessage>
{
	using Abi = ABI::Windows::Networking::Proximity::IProximityMessage;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IProximityMessage<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IProximityDevice>
{
	using Abi = ABI::Windows::Networking::Proximity::IProximityDevice;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IProximityDevice<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IProximityDeviceStatics>
{
	using Abi = ABI::Windows::Networking::Proximity::IProximityDeviceStatics;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IProximityDeviceStatics<T>;
};

template <> struct Traits<Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs>
{
	using Abi = ABI::Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_ITriggeredConnectionStateChangedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerInformation>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerInformation;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerInformation<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerInformation3>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerInformation3;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerInformation3<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IConnectionRequestedEventArgs>
{
	using Abi = ABI::Windows::Networking::Proximity::IConnectionRequestedEventArgs;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IConnectionRequestedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerWatcher>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerWatcher;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerWatcher<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerFinderStatics>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerFinderStatics;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerFinderStatics<T>;
};

template <> struct Traits<Windows::Networking::Proximity::IPeerFinderStatics2>
{
	using Abi = ABI::Windows::Networking::Proximity::IPeerFinderStatics2;
	template <typename T> using Methods = Windows::Networking::Proximity::impl_IPeerFinderStatics2<T>;
};

template <> struct Traits<Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics>
{
	using Abi = ABI::Windows::Networking::PushNotifications::IPushNotificationChannelManagerStatics;
	template <typename T> using Methods = Windows::Networking::PushNotifications::impl_IPushNotificationChannelManagerStatics<T>;
};

template <> struct Traits<Windows::Networking::PushNotifications::IPushNotificationChannel>
{
	using Abi = ABI::Windows::Networking::PushNotifications::IPushNotificationChannel;
	template <typename T> using Methods = Windows::Networking::PushNotifications::impl_IPushNotificationChannel<T>;
};

template <> struct Traits<Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs;
	template <typename T> using Methods = Windows::Networking::PushNotifications::impl_IPushNotificationReceivedEventArgs<T>;
};

template <> struct Traits<Windows::Networking::PushNotifications::IRawNotification>
{
	using Abi = ABI::Windows::Networking::PushNotifications::IRawNotification;
	template <typename T> using Methods = Windows::Networking::PushNotifications::impl_IRawNotification<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IOnlineIdServiceTicketRequest<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequestFactory>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequestFactory;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IOnlineIdServiceTicketRequestFactory<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicket>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicket;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IOnlineIdServiceTicket<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IUserIdentity>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IUserIdentity;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IUserIdentity<T>;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator;
	template <typename T> using Methods = Windows::Security::Authentication::OnlineId::impl_IOnlineIdAuthenticator<T>;
};

template <> struct Traits<Windows::Security::Authentication::Web::IWebAuthenticationResult>
{
	using Abi = ABI::Windows::Security::Authentication::Web::IWebAuthenticationResult;
	template <typename T> using Methods = Windows::Security::Authentication::Web::impl_IWebAuthenticationResult<T>;
};

template <> struct Traits<Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics>
{
	using Abi = ABI::Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics;
	template <typename T> using Methods = Windows::Security::Authentication::Web::impl_IWebAuthenticationBrokerStatics<T>;
};

template <> struct Traits<Windows::Security::Credentials::UI::IUserConsentVerifierStatics>
{
	using Abi = ABI::Windows::Security::Credentials::UI::IUserConsentVerifierStatics;
	template <typename T> using Methods = Windows::Security::Credentials::UI::impl_IUserConsentVerifierStatics<T>;
};

template <> struct Traits<Windows::Security::Credentials::UI::ICredentialPickerOptions>
{
	using Abi = ABI::Windows::Security::Credentials::UI::ICredentialPickerOptions;
	template <typename T> using Methods = Windows::Security::Credentials::UI::impl_ICredentialPickerOptions<T>;
};

template <> struct Traits<Windows::Security::Credentials::UI::ICredentialPickerStatics>
{
	using Abi = ABI::Windows::Security::Credentials::UI::ICredentialPickerStatics;
	template <typename T> using Methods = Windows::Security::Credentials::UI::impl_ICredentialPickerStatics<T>;
};

template <> struct Traits<Windows::Security::Credentials::UI::ICredentialPickerResults>
{
	using Abi = ABI::Windows::Security::Credentials::UI::ICredentialPickerResults;
	template <typename T> using Methods = Windows::Security::Credentials::UI::impl_ICredentialPickerResults<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationParameters;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationParameters<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationParametersStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ICryptographicKey>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ICryptographicKey;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ICryptographicKey<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IHashComputation>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IHashComputation;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IHashComputation<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IHashAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IHashAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IHashAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IMacAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IMacAlgorithmProvider2>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmProvider2;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmProvider2<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ISymmetricKeyAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IAsymmetricKeyAlgorithmProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IPersistedKeyProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IPersistedKeyProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IPersistedKeyProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IEncryptedAndAuthenticatedData<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ICryptographicEngineStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ICryptographicEngineStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ICryptographicEngineStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ICryptographicEngineStatics2>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ICryptographicEngineStatics2;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ICryptographicEngineStatics2<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IHashAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IHashAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IHashAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IMacAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ISymmetricKeyAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProviderStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProviderStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IAsymmetricKeyAlgorithmProviderStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IHashAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IHashAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IHashAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IMacAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::ISymmetricAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::ISymmetricAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_ISymmetricAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IAsymmetricAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmNamesStatics<T>;
};

template <> struct Traits<Windows::Security::Cryptography::DataProtection::IDataProtectionProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::DataProtection::IDataProtectionProvider;
	template <typename T> using Methods = Windows::Security::Cryptography::DataProtection::impl_IDataProtectionProvider<T>;
};

template <> struct Traits<Windows::Security::Cryptography::DataProtection::IDataProtectionProviderFactory>
{
	using Abi = ABI::Windows::Security::Cryptography::DataProtection::IDataProtectionProviderFactory;
	template <typename T> using Methods = Windows::Security::Cryptography::DataProtection::impl_IDataProtectionProviderFactory<T>;
};

template <> struct Traits<Windows::Security::Cryptography::ICryptographicBufferStatics>
{
	using Abi = ABI::Windows::Security::Cryptography::ICryptographicBufferStatics;
	template <typename T> using Methods = Windows::Security::Cryptography::impl_ICryptographicBufferStatics<T>;
};

template <> struct Traits<Windows::Security::EnterpriseData::IFileRevocationManagerStatics>
{
	using Abi = ABI::Windows::Security::EnterpriseData::IFileRevocationManagerStatics;
	template <typename T> using Methods = Windows::Security::EnterpriseData::impl_IFileRevocationManagerStatics<T>;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::IEasClientDeviceInformation>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::IEasClientDeviceInformation;
	template <typename T> using Methods = Windows::Security::ExchangeActiveSyncProvisioning::impl_IEasClientDeviceInformation<T>;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::IEasClientSecurityPolicy>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::IEasClientSecurityPolicy;
	template <typename T> using Methods = Windows::Security::ExchangeActiveSyncProvisioning::impl_IEasClientSecurityPolicy<T>;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults;
	template <typename T> using Methods = Windows::Security::ExchangeActiveSyncProvisioning::impl_IEasComplianceResults<T>;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults2>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults2;
	template <typename T> using Methods = Windows::Security::ExchangeActiveSyncProvisioning::impl_IEasComplianceResults2<T>;
};

template <> struct Traits<Windows::Storage::AccessCache::IItemRemovedEventArgs>
{
	using Abi = ABI::Windows::Storage::AccessCache::IItemRemovedEventArgs;
	template <typename T> using Methods = Windows::Storage::AccessCache::impl_IItemRemovedEventArgs<T>;
};

template <> struct Traits<Windows::Storage::AccessCache::IStorageItemAccessList>
{
	using Abi = ABI::Windows::Storage::AccessCache::IStorageItemAccessList;
	template <typename T> using Methods = Windows::Storage::AccessCache::impl_IStorageItemAccessList<T>;
};

template <> struct Traits<Windows::Storage::AccessCache::IStorageItemMostRecentlyUsedList>
{
	using Abi = ABI::Windows::Storage::AccessCache::IStorageItemMostRecentlyUsedList;
	template <typename T> using Methods = Windows::Storage::AccessCache::impl_IStorageItemMostRecentlyUsedList<T>;
};

template <> struct Traits<Windows::Storage::AccessCache::IStorageApplicationPermissionsStatics>
{
	using Abi = ABI::Windows::Storage::AccessCache::IStorageApplicationPermissionsStatics;
	template <typename T> using Methods = Windows::Storage::AccessCache::impl_IStorageApplicationPermissionsStatics<T>;
};

template <> struct Traits<Windows::Storage::BulkAccess::IStorageItemInformation>
{
	using Abi = ABI::Windows::Storage::BulkAccess::IStorageItemInformation;
	template <typename T> using Methods = Windows::Storage::BulkAccess::impl_IStorageItemInformation<T>;
};

template <> struct Traits<Windows::Storage::BulkAccess::IFileInformationFactoryFactory>
{
	using Abi = ABI::Windows::Storage::BulkAccess::IFileInformationFactoryFactory;
	template <typename T> using Methods = Windows::Storage::BulkAccess::impl_IFileInformationFactoryFactory<T>;
};

template <> struct Traits<Windows::Storage::BulkAccess::IFileInformationFactory>
{
	using Abi = ABI::Windows::Storage::BulkAccess::IFileInformationFactory;
	template <typename T> using Methods = Windows::Storage::BulkAccess::impl_IFileInformationFactory<T>;
};

template <> struct Traits<Windows::Storage::Compression::ICompressor>
{
	using Abi = ABI::Windows::Storage::Compression::ICompressor;
	template <typename T> using Methods = Windows::Storage::Compression::impl_ICompressor<T>;
};

template <> struct Traits<Windows::Storage::Compression::IDecompressor>
{
	using Abi = ABI::Windows::Storage::Compression::IDecompressor;
	template <typename T> using Methods = Windows::Storage::Compression::impl_IDecompressor<T>;
};

template <> struct Traits<Windows::Storage::Compression::ICompressorFactory>
{
	using Abi = ABI::Windows::Storage::Compression::ICompressorFactory;
	template <typename T> using Methods = Windows::Storage::Compression::impl_ICompressorFactory<T>;
};

template <> struct Traits<Windows::Storage::Compression::IDecompressorFactory>
{
	using Abi = ABI::Windows::Storage::Compression::IDecompressorFactory;
	template <typename T> using Methods = Windows::Storage::Compression::impl_IDecompressorFactory<T>;
};

template <> struct Traits<Windows::Storage::Pickers::IFileOpenPicker>
{
	using Abi = ABI::Windows::Storage::Pickers::IFileOpenPicker;
	template <typename T> using Methods = Windows::Storage::Pickers::impl_IFileOpenPicker<T>;
};

template <> struct Traits<Windows::Storage::Pickers::IFileSavePicker>
{
	using Abi = ABI::Windows::Storage::Pickers::IFileSavePicker;
	template <typename T> using Methods = Windows::Storage::Pickers::impl_IFileSavePicker<T>;
};

template <> struct Traits<Windows::Storage::Pickers::IFolderPicker>
{
	using Abi = ABI::Windows::Storage::Pickers::IFolderPicker;
	template <typename T> using Methods = Windows::Storage::Pickers::impl_IFolderPicker<T>;
};

template <> struct Traits<Windows::System::Display::IDisplayRequest>
{
	using Abi = ABI::Windows::System::Display::IDisplayRequest;
	template <typename T> using Methods = Windows::System::Display::impl_IDisplayRequest<T>;
};

template <> struct Traits<Windows::System::Profile::IHardwareToken>
{
	using Abi = ABI::Windows::System::Profile::IHardwareToken;
	template <typename T> using Methods = Windows::System::Profile::impl_IHardwareToken<T>;
};

template <> struct Traits<Windows::System::Profile::IHardwareIdentificationStatics>
{
	using Abi = ABI::Windows::System::Profile::IHardwareIdentificationStatics;
	template <typename T> using Methods = Windows::System::Profile::impl_IHardwareIdentificationStatics<T>;
};

template <> struct Traits<Windows::System::Profile::SystemManufacturers::ISmbiosInformationStatics>
{
	using Abi = ABI::Windows::System::Profile::SystemManufacturers::ISmbiosInformationStatics;
	template <typename T> using Methods = Windows::System::Profile::SystemManufacturers::impl_ISmbiosInformationStatics<T>;
};

template <> struct Traits<Windows::System::RemoteDesktop::IInteractiveSessionStatics>
{
	using Abi = ABI::Windows::System::RemoteDesktop::IInteractiveSessionStatics;
	template <typename T> using Methods = Windows::System::RemoteDesktop::impl_IInteractiveSessionStatics<T>;
};

template <> struct Traits<Windows::System::Threading::ITimerElapsedHandler>
{
	using Abi = ABI::Windows::System::Threading::ITimerElapsedHandler;
	template <typename T> using Methods = Windows::System::Threading::impl_ITimerElapsedHandler<T>;
};

template <> struct Traits<Windows::System::Threading::ITimerDestroyedHandler>
{
	using Abi = ABI::Windows::System::Threading::ITimerDestroyedHandler;
	template <typename T> using Methods = Windows::System::Threading::impl_ITimerDestroyedHandler<T>;
};

template <> struct Traits<Windows::System::Threading::IWorkItemHandler>
{
	using Abi = ABI::Windows::System::Threading::IWorkItemHandler;
	template <typename T> using Methods = Windows::System::Threading::impl_IWorkItemHandler<T>;
};

template <> struct Traits<Windows::System::Threading::IThreadPoolStatics>
{
	using Abi = ABI::Windows::System::Threading::IThreadPoolStatics;
	template <typename T> using Methods = Windows::System::Threading::impl_IThreadPoolStatics<T>;
};

template <> struct Traits<Windows::System::Threading::IThreadPoolTimer>
{
	using Abi = ABI::Windows::System::Threading::IThreadPoolTimer;
	template <typename T> using Methods = Windows::System::Threading::impl_IThreadPoolTimer<T>;
};

template <> struct Traits<Windows::System::Threading::IThreadPoolTimerStatics>
{
	using Abi = ABI::Windows::System::Threading::IThreadPoolTimerStatics;
	template <typename T> using Methods = Windows::System::Threading::impl_IThreadPoolTimerStatics<T>;
};

template <> struct Traits<Windows::System::Threading::Core::ISignalHandler>
{
	using Abi = ABI::Windows::System::Threading::Core::ISignalHandler;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_ISignalHandler<T>;
};

template <> struct Traits<Windows::System::Threading::Core::ISignalNotifierStatics>
{
	using Abi = ABI::Windows::System::Threading::Core::ISignalNotifierStatics;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_ISignalNotifierStatics<T>;
};

template <> struct Traits<Windows::System::Threading::Core::IPreallocatedWorkItemFactory>
{
	using Abi = ABI::Windows::System::Threading::Core::IPreallocatedWorkItemFactory;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_IPreallocatedWorkItemFactory<T>;
};

template <> struct Traits<Windows::System::Threading::Core::IPreallocatedWorkItem>
{
	using Abi = ABI::Windows::System::Threading::Core::IPreallocatedWorkItem;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_IPreallocatedWorkItem<T>;
};

template <> struct Traits<Windows::System::Threading::Core::ISignalNotifier>
{
	using Abi = ABI::Windows::System::Threading::Core::ISignalNotifier;
	template <typename T> using Methods = Windows::System::Threading::Core::impl_ISignalNotifier<T>;
};

template <> struct Traits<Windows::System::UserProfile::IAdvertisingManagerStatics>
{
	using Abi = ABI::Windows::System::UserProfile::IAdvertisingManagerStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_IAdvertisingManagerStatics<T>;
};

template <> struct Traits<Windows::System::UserProfile::IUserInformationStatics>
{
	using Abi = ABI::Windows::System::UserProfile::IUserInformationStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_IUserInformationStatics<T>;
};

template <> struct Traits<Windows::System::UserProfile::ILockScreenStatics>
{
	using Abi = ABI::Windows::System::UserProfile::ILockScreenStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_ILockScreenStatics<T>;
};

template <> struct Traits<Windows::System::UserProfile::ILockScreenImageFeedStatics>
{
	using Abi = ABI::Windows::System::UserProfile::ILockScreenImageFeedStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_ILockScreenImageFeedStatics<T>;
};

template <> struct Traits<Windows::System::UserProfile::IGlobalizationPreferencesStatics>
{
	using Abi = ABI::Windows::System::UserProfile::IGlobalizationPreferencesStatics;
	template <typename T> using Methods = Windows::System::UserProfile::impl_IGlobalizationPreferencesStatics<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountProviderCommandInvokedHandler<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountCommandInvokedHandler<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ICredentialCommandCredentialDeletedHandler<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsCommandFactory>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsCommandFactory;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsCommandFactory<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsCommandStatics>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsCommandStatics;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsCommandStatics<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsPaneCommandsRequest<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsPaneCommandsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsPaneStatics>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsPaneStatics;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsPaneStatics<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ISettingsPane>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ISettingsPane;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ISettingsPane<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountProviderCommandFactory>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountProviderCommandFactory;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountProviderCommandFactory<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountCommandFactory>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountCommandFactory;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountCommandFactory<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ICredentialCommandFactory>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ICredentialCommandFactory;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ICredentialCommandFactory<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountProviderCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountProviderCommand;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountProviderCommand<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountInvokedArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountInvokedArgs;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountInvokedArgs<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IWebAccountCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IWebAccountCommand;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IWebAccountCommand<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::ICredentialCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::ICredentialCommand;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_ICredentialCommand<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IAccountsSettingsPaneEventDeferral<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IAccountsSettingsPaneStatics;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IAccountsSettingsPaneStatics<T>;
};

template <> struct Traits<Windows::UI::ApplicationSettings::IAccountsSettingsPane>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::IAccountsSettingsPane;
	template <typename T> using Methods = Windows::UI::ApplicationSettings::impl_IAccountsSettingsPane<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IPropertyAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IPropertyAnimation;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IPropertyAnimation<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IScaleAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IScaleAnimation;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IScaleAnimation<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IOpacityAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IOpacityAnimation;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IOpacityAnimation<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IAnimationDescription>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IAnimationDescription;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IAnimationDescription<T>;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::IAnimationDescriptionFactory>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::IAnimationDescriptionFactory;
	template <typename T> using Methods = Windows::UI::Core::AnimationMetrics::impl_IAnimationDescriptionFactory<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkDrawingAttributes>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkDrawingAttributes;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkDrawingAttributes<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkStrokeRenderingSegment>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkStrokeRenderingSegment;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkStrokeRenderingSegment<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkStroke>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkStroke;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkStroke<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkStrokeBuilder>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkStrokeBuilder;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkStrokeBuilder<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkRecognitionResult>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkRecognitionResult;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkRecognitionResult<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkStrokeContainer>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkStrokeContainer;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkStrokeContainer<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkRecognizer>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkRecognizer;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkRecognizer<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkRecognizerContainer>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkRecognizerContainer;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkRecognizerContainer<T>;
};

template <> struct Traits<Windows::UI::Input::Inking::IInkManager>
{
	using Abi = ABI::Windows::UI::Input::Inking::IInkManager;
	template <typename T> using Methods = Windows::UI::Input::Inking::impl_IInkManager<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTile>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTile;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTile<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTile2>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTile2;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTile2<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTileVisualElements>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTileVisualElements;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTileVisualElements<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTileFactory>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTileFactory;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTileFactory<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTileFactory2>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTileFactory2;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTileFactory2<T>;
};

template <> struct Traits<Windows::UI::StartScreen::ISecondaryTileStatics>
{
	using Abi = ABI::Windows::UI::StartScreen::ISecondaryTileStatics;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_ISecondaryTileStatics<T>;
};

template <> struct Traits<Windows::UI::StartScreen::IVisualElementsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::StartScreen::IVisualElementsRequestedEventArgs;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_IVisualElementsRequestedEventArgs<T>;
};

template <> struct Traits<Windows::UI::StartScreen::IVisualElementsRequest>
{
	using Abi = ABI::Windows::UI::StartScreen::IVisualElementsRequest;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_IVisualElementsRequest<T>;
};

template <> struct Traits<Windows::UI::StartScreen::IVisualElementsRequestDeferral>
{
	using Abi = ABI::Windows::UI::StartScreen::IVisualElementsRequestDeferral;
	template <typename T> using Methods = Windows::UI::StartScreen::impl_IVisualElementsRequestDeferral<T>;
};

template <> struct Traits<Windows::UI::WebUI::IActivatedEventHandler>
{
	using Abi = ABI::Windows::UI::WebUI::IActivatedEventHandler;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IActivatedEventHandler<T>;
};

template <> struct Traits<Windows::UI::WebUI::IResumingEventHandler>
{
	using Abi = ABI::Windows::UI::WebUI::IResumingEventHandler;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IResumingEventHandler<T>;
};

template <> struct Traits<Windows::UI::WebUI::ISuspendingEventHandler>
{
	using Abi = ABI::Windows::UI::WebUI::ISuspendingEventHandler;
	template <typename T> using Methods = Windows::UI::WebUI::impl_ISuspendingEventHandler<T>;
};

template <> struct Traits<Windows::UI::WebUI::INavigatedEventHandler>
{
	using Abi = ABI::Windows::UI::WebUI::INavigatedEventHandler;
	template <typename T> using Methods = Windows::UI::WebUI::impl_INavigatedEventHandler<T>;
};

template <> struct Traits<Windows::UI::WebUI::IActivatedDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::IActivatedDeferral;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IActivatedDeferral<T>;
};

template <> struct Traits<Windows::UI::WebUI::IActivatedOperation>
{
	using Abi = ABI::Windows::UI::WebUI::IActivatedOperation;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IActivatedOperation<T>;
};

template <> struct Traits<Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::IActivatedEventArgsDeferral;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IActivatedEventArgsDeferral<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUINavigatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUINavigatedEventArgs;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUINavigatedEventArgs<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUIBackgroundTaskInstance>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUIBackgroundTaskInstance;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUIBackgroundTaskInstance<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUIBackgroundTaskInstanceStatics>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUIBackgroundTaskInstanceStatics;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUIBackgroundTaskInstanceStatics<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUINavigatedDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUINavigatedDeferral;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUINavigatedDeferral<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUINavigatedOperation>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUINavigatedOperation;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUINavigatedOperation<T>;
};

template <> struct Traits<Windows::UI::WebUI::IWebUIActivationStatics>
{
	using Abi = ABI::Windows::UI::WebUI::IWebUIActivationStatics;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IWebUIActivationStatics<T>;
};

template <> struct Traits<Windows::UI::WebUI::IHtmlPrintDocumentSource>
{
	using Abi = ABI::Windows::UI::WebUI::IHtmlPrintDocumentSource;
	template <typename T> using Methods = Windows::UI::WebUI::impl_IHtmlPrintDocumentSource<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationAttribute>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationAttribute;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationAttribute<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationAttributeFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationAttributeFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationAttributeFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationNode>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationNode;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationNode<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationNodeFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationNodeFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationNodeFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationGenerator>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationGenerator;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationGenerator<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationGeneratorFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationGeneratorFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationGeneratorFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationText>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationText;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationText<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationTextFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationTextFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationTextFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationContent>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationContent;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationContent<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationContentFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationContentFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationContentFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationLink>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationLink;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationLink<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationLinkFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationLinkFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationLinkFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationPerson>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationPerson;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationPerson<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationPersonFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationPersonFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationPersonFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationCategory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationCategory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationCategory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationCategoryFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationCategoryFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationCategoryFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationItem>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationItem;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationItem<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationItemFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationItemFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationItemFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationFeed>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationFeed;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationFeed<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationFeedFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationFeedFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationFeedFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationClient>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationClient;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationClient<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationClientFactory>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationClientFactory;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationClientFactory<T>;
};

template <> struct Traits<Windows::Web::Syndication::ISyndicationErrorStatics>
{
	using Abi = ABI::Windows::Web::Syndication::ISyndicationErrorStatics;
	template <typename T> using Methods = Windows::Web::Syndication::impl_ISyndicationErrorStatics<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IResourceCollection>
{
	using Abi = ABI::Windows::Web::AtomPub::IResourceCollection;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IResourceCollection<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IWorkspace>
{
	using Abi = ABI::Windows::Web::AtomPub::IWorkspace;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IWorkspace<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IServiceDocument>
{
	using Abi = ABI::Windows::Web::AtomPub::IServiceDocument;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IServiceDocument<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IAtomPubClient>
{
	using Abi = ABI::Windows::Web::AtomPub::IAtomPubClient;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IAtomPubClient<T>;
};

template <> struct Traits<Windows::Web::AtomPub::IAtomPubClientFactory>
{
	using Abi = ABI::Windows::Web::AtomPub::IAtomPubClientFactory;
	template <typename T> using Methods = Windows::Web::AtomPub::impl_IAtomPubClientFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentHeaderCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentHeaderCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpRequestHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpRequestHeaderCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpRequestHeaderCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpResponseHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpResponseHeaderCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpResponseHeaderCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCacheDirectiveHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCredentialsHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCredentialsHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCredentialsHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCredentialsHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCredentialsHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCredentialsHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCredentialsHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCredentialsHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCredentialsHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentDispositionHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentDispositionHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentDispositionHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentRangeHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentRangeHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentRangeHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentRangeHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentRangeHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentRangeHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentRangeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentRangeHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentRangeHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpDateOrDeltaHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpDateOrDeltaHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpMethodHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpNameValueHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpNameValueHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpNameValueHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpNameValueHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpNameValueHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpNameValueHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpNameValueHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpNameValueHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpNameValueHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueStatics>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueStatics;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValueStatics<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueFactory>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueFactory;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValueFactory<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValue<T>;
};

template <> struct Traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection;
	template <typename T> using Methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValueCollection<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpClientFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpClientFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpClientFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpClient>
{
	using Abi = ABI::Windows::Web::Http::IHttpClient;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpClient<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpContent>
{
	using Abi = ABI::Windows::Web::Http::IHttpContent;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpContent<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpCookieManager>
{
	using Abi = ABI::Windows::Web::Http::IHttpCookieManager;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpCookieManager<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpCookieFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpCookieFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpCookieFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpCookie>
{
	using Abi = ABI::Windows::Web::Http::IHttpCookie;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpCookie<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMethodStatics>
{
	using Abi = ABI::Windows::Web::Http::IHttpMethodStatics;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMethodStatics<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMethodFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpMethodFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMethodFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMethod>
{
	using Abi = ABI::Windows::Web::Http::IHttpMethod;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMethod<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpTransportInformation>
{
	using Abi = ABI::Windows::Web::Http::IHttpTransportInformation;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpTransportInformation<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpRequestMessageFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpRequestMessageFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpRequestMessageFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpRequestMessage>
{
	using Abi = ABI::Windows::Web::Http::IHttpRequestMessage;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpRequestMessage<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpResponseMessageFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpResponseMessageFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpResponseMessageFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpResponseMessage>
{
	using Abi = ABI::Windows::Web::Http::IHttpResponseMessage;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpResponseMessage<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpStringContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpStringContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpStringContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpBufferContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpBufferContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpBufferContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpStreamContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpStreamContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpStreamContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpFormUrlEncodedContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpFormUrlEncodedContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpFormUrlEncodedContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMultipartContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpMultipartContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMultipartContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMultipartContent>
{
	using Abi = ABI::Windows::Web::Http::IHttpMultipartContent;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMultipartContent<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMultipartFormDataContentFactory>
{
	using Abi = ABI::Windows::Web::Http::IHttpMultipartFormDataContentFactory;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMultipartFormDataContentFactory<T>;
};

template <> struct Traits<Windows::Web::Http::IHttpMultipartFormDataContent>
{
	using Abi = ABI::Windows::Web::Http::IHttpMultipartFormDataContent;
	template <typename T> using Methods = Windows::Web::Http::impl_IHttpMultipartFormDataContent<T>;
};

template <> struct Traits<Windows::Web::Http::Filters::IHttpFilter>
{
	using Abi = ABI::Windows::Web::Http::Filters::IHttpFilter;
	template <typename T> using Methods = Windows::Web::Http::Filters::impl_IHttpFilter<T>;
};

template <> struct Traits<Windows::Web::Http::Filters::IHttpCacheControl>
{
	using Abi = ABI::Windows::Web::Http::Filters::IHttpCacheControl;
	template <typename T> using Methods = Windows::Web::Http::Filters::impl_IHttpCacheControl<T>;
};

template <> struct Traits<Windows::Web::Http::Filters::IHttpBaseProtocolFilter>
{
	using Abi = ABI::Windows::Web::Http::Filters::IHttpBaseProtocolFilter;
	template <typename T> using Methods = Windows::Web::Http::Filters::impl_IHttpBaseProtocolFilter<T>;
};

template <> struct Traits<Windows::Foundation::WwwFormUrlDecoder>
{
	using Abi = ABI::Windows::Foundation::WwwFormUrlDecoder;
	using Default = Windows::Foundation::IWwwFormUrlDecoderRuntimeClass;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.WwwFormUrlDecoder"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Foundation::Uri>
{
	using Abi = ABI::Windows::Foundation::Uri;
	using Default = Windows::Foundation::IUriRuntimeClass;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Uri"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::Foundation::WwwFormUrlDecoderEntry>
{
	using Abi = ABI::Windows::Foundation::WwwFormUrlDecoderEntry;
	using Default = Windows::Foundation::IWwwFormUrlDecoderEntry;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.WwwFormUrlDecoderEntry"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Foundation::PropertyValue>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.PropertyValue"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Foundation::Collections::PropertySet>
{
	using Abi = ABI::Windows::Foundation::Collections::PropertySet;
	using Default = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Collections.PropertySet"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Popups::MessageDialog>
{
	using Abi = ABI::Windows::UI::Popups::MessageDialog;
	using Default = Windows::UI::Popups::IMessageDialog;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Popups.MessageDialog"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::UI::Popups::UICommand>
{
	using Abi = ABI::Windows::UI::Popups::UICommand;
	using Default = Windows::UI::Popups::IUICommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Popups.UICommand"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::UI::Popups::UICommandSeparator>
{
	using Abi = ABI::Windows::UI::Popups::UICommandSeparator;
	using Default = Windows::UI::Popups::IUICommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Popups.UICommandSeparator"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Popups::PopupMenu>
{
	using Abi = ABI::Windows::UI::Popups::PopupMenu;
	using Default = Windows::UI::Popups::IPopupMenu;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Popups.PopupMenu"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::Appointment>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::Appointment;
	using Default = Windows::ApplicationModel::Appointments::IAppointment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.Appointment"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentOrganizer>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentOrganizer;
	using Default = Windows::ApplicationModel::Appointments::IAppointmentParticipant;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentOrganizer"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentInvitee>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentInvitee;
	using Default = Windows::ApplicationModel::Appointments::IAppointmentInvitee;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentInvitee"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentRecurrence>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentRecurrence;
	using Default = Windows::ApplicationModel::Appointments::IAppointmentRecurrence;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentRecurrence"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentManager"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::AppointmentsProviderLaunchActionVerbs>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.AppointmentsProviderLaunchActionVerbs"; }
	static constexpr unsigned NameLength = 96;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation;
	using Default = Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.AddAppointmentOperation"; }
	static constexpr unsigned NameLength = 82;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation;
	using Default = Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.ReplaceAppointmentOperation"; }
	static constexpr unsigned NameLength = 86;
};

template <> struct Traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation>
{
	using Abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation;
	using Default = Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.RemoveAppointmentOperation"; }
	static constexpr unsigned NameLength = 85;
};

template <> struct Traits<Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral;
	using Default = Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Calls.LockScreenCallEndCallDeferral"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Calls::LockScreenCallUI>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::LockScreenCallUI;
	using Default = Windows::ApplicationModel::Calls::ILockScreenCallUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Calls.LockScreenCallUI"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs;
	using Default = Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Calls.LockScreenCallEndRequestedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Storage::FileProperties::StorageItemThumbnail>
{
	using Abi = ABI::Windows::Storage::FileProperties::StorageItemThumbnail;
	using Default = Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.StorageItemThumbnail"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Storage::FileProperties::MusicProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::MusicProperties;
	using Default = Windows::Storage::FileProperties::IMusicProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.MusicProperties"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::FileProperties::VideoProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::VideoProperties;
	using Default = Windows::Storage::FileProperties::IVideoProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.VideoProperties"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::FileProperties::ImageProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::ImageProperties;
	using Default = Windows::Storage::FileProperties::IImageProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.ImageProperties"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::FileProperties::DocumentProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::DocumentProperties;
	using Default = Windows::Storage::FileProperties::IDocumentProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.DocumentProperties"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::FileProperties::StorageItemContentProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::StorageItemContentProperties;
	using Default = Windows::Storage::FileProperties::IStorageItemContentProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.StorageItemContentProperties"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Storage::FileProperties::BasicProperties>
{
	using Abi = ABI::Windows::Storage::FileProperties::BasicProperties;
	using Default = Windows::Storage::FileProperties::IBasicProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileProperties.BasicProperties"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::StorageFile>
{
	using Abi = ABI::Windows::Storage::StorageFile;
	using Default = Windows::Storage::IStorageFile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageFile"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Storage::Provider::CachedFileUpdaterUI>
{
	using Abi = ABI::Windows::Storage::Provider::CachedFileUpdaterUI;
	using Default = Windows::Storage::Provider::ICachedFileUpdaterUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.CachedFileUpdaterUI"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Storage::Provider::FileUpdateRequestedEventArgs>
{
	using Abi = ABI::Windows::Storage::Provider::FileUpdateRequestedEventArgs;
	using Default = Windows::Storage::Provider::IFileUpdateRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.FileUpdateRequestedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Storage::Provider::FileUpdateRequest>
{
	using Abi = ABI::Windows::Storage::Provider::FileUpdateRequest;
	using Default = Windows::Storage::Provider::IFileUpdateRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.FileUpdateRequest"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::Provider::FileUpdateRequestDeferral>
{
	using Abi = ABI::Windows::Storage::Provider::FileUpdateRequestDeferral;
	using Default = Windows::Storage::Provider::IFileUpdateRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.FileUpdateRequestDeferral"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Storage::Provider::CachedFileUpdater>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Provider.CachedFileUpdater"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Data::Text::SemanticTextQuery>
{
	using Abi = ABI::Windows::Data::Text::SemanticTextQuery;
	using Default = Windows::Data::Text::ISemanticTextQuery;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.SemanticTextQuery"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Data::Text::UnicodeCharacters>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.UnicodeCharacters"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Data::Text::AlternateWordForm>
{
	using Abi = ABI::Windows::Data::Text::AlternateWordForm;
	using Default = Windows::Data::Text::IAlternateWordForm;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.AlternateWordForm"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Data::Text::WordSegment>
{
	using Abi = ABI::Windows::Data::Text::WordSegment;
	using Default = Windows::Data::Text::IWordSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.WordSegment"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Data::Text::WordsSegmenter>
{
	using Abi = ABI::Windows::Data::Text::WordsSegmenter;
	using Default = Windows::Data::Text::IWordsSegmenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.WordsSegmenter"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Data::Text::SelectableWordSegment>
{
	using Abi = ABI::Windows::Data::Text::SelectableWordSegment;
	using Default = Windows::Data::Text::ISelectableWordSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.SelectableWordSegment"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Data::Text::SelectableWordsSegmenter>
{
	using Abi = ABI::Windows::Data::Text::SelectableWordsSegmenter;
	using Default = Windows::Data::Text::ISelectableWordsSegmenter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Text.SelectableWordsSegmenter"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::StorageFolder>
{
	using Abi = ABI::Windows::Storage::StorageFolder;
	using Default = Windows::Storage::IStorageFolder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageFolder"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Storage::Search::ContentIndexer>
{
	using Abi = ABI::Windows::Storage::Search::ContentIndexer;
	using Default = Windows::Storage::Search::IContentIndexer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.ContentIndexer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::Search::ValueAndLanguage>
{
	using Abi = ABI::Windows::Storage::Search::ValueAndLanguage;
	using Default = Windows::Storage::Search::IValueAndLanguage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.ValueAndLanguage"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Storage::Search::ContentIndexerQuery>
{
	using Abi = ABI::Windows::Storage::Search::ContentIndexerQuery;
	using Default = Windows::Storage::Search::IContentIndexerQuery;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.ContentIndexerQuery"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::Search::IndexableContent>
{
	using Abi = ABI::Windows::Storage::Search::IndexableContent;
	using Default = Windows::Storage::Search::IIndexableContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.IndexableContent"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Storage::Search::QueryOptions>
{
	using Abi = ABI::Windows::Storage::Search::QueryOptions;
	using Default = Windows::Storage::Search::IQueryOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.QueryOptions"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Storage::Search::StorageFileQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::StorageFileQueryResult;
	using Default = Windows::Storage::Search::IStorageFileQueryResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.StorageFileQueryResult"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Storage::Search::StorageFolderQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::StorageFolderQueryResult;
	using Default = Windows::Storage::Search::IStorageFolderQueryResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.StorageFolderQueryResult"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Storage::Search::StorageItemQueryResult>
{
	using Abi = ABI::Windows::Storage::Search::StorageItemQueryResult;
	using Default = Windows::Storage::Search::IStorageItemQueryResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.StorageItemQueryResult"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Storage::Search::SortEntryVector>
{
	using Abi = ABI::Windows::Storage::Search::SortEntryVector;
	using Default = Windows::Foundation::Collections::IVector<Modern::Windows::Storage::Search::SortEntry>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Search.SortEntryVector"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Storage::StorageLibrary>
{
	using Abi = ABI::Windows::Storage::StorageLibrary;
	using Default = Windows::Storage::IStorageLibrary;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageLibrary"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Storage::KnownFolders>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.KnownFolders"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::Storage::DownloadsFolder>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.DownloadsFolder"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Storage::StreamedFileDataRequest>
{
	using Abi = ABI::Windows::Storage::StreamedFileDataRequest;
	using Default = Windows::Storage::Streams::IOutputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StreamedFileDataRequest"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Storage::StorageStreamTransaction>
{
	using Abi = ABI::Windows::Storage::StorageStreamTransaction;
	using Default = Windows::Storage::IStorageStreamTransaction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageStreamTransaction"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Storage::StorageProvider>
{
	using Abi = ABI::Windows::Storage::StorageProvider;
	using Default = Windows::Storage::IStorageProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.StorageProvider"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Storage::FileIO>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.FileIO"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::Storage::PathIO>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.PathIO"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::Storage::CachedFileManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.CachedFileManager"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Storage::SystemAudioProperties>
{
	using Abi = ABI::Windows::Storage::SystemAudioProperties;
	using Default = Windows::Storage::ISystemAudioProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemAudioProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemGPSProperties>
{
	using Abi = ABI::Windows::Storage::SystemGPSProperties;
	using Default = Windows::Storage::ISystemGPSProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemGPSProperties"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Storage::SystemImageProperties>
{
	using Abi = ABI::Windows::Storage::SystemImageProperties;
	using Default = Windows::Storage::ISystemImageProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemImageProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemMediaProperties>
{
	using Abi = ABI::Windows::Storage::SystemMediaProperties;
	using Default = Windows::Storage::ISystemMediaProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemMediaProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemMusicProperties>
{
	using Abi = ABI::Windows::Storage::SystemMusicProperties;
	using Default = Windows::Storage::ISystemMusicProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemMusicProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemPhotoProperties>
{
	using Abi = ABI::Windows::Storage::SystemPhotoProperties;
	using Default = Windows::Storage::ISystemPhotoProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemPhotoProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemVideoProperties>
{
	using Abi = ABI::Windows::Storage::SystemVideoProperties;
	using Default = Windows::Storage::ISystemVideoProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemVideoProperties"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Storage::SystemProperties>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SystemProperties"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Storage::ApplicationData>
{
	using Abi = ABI::Windows::Storage::ApplicationData;
	using Default = Windows::Storage::IApplicationData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.ApplicationData"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Storage::SetVersionRequest>
{
	using Abi = ABI::Windows::Storage::SetVersionRequest;
	using Default = Windows::Storage::ISetVersionRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SetVersionRequest"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Storage::ApplicationDataContainer>
{
	using Abi = ABI::Windows::Storage::ApplicationDataContainer;
	using Default = Windows::Storage::IApplicationDataContainer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.ApplicationDataContainer"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Storage::SetVersionDeferral>
{
	using Abi = ABI::Windows::Storage::SetVersionDeferral;
	using Default = Windows::Storage::ISetVersionDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.SetVersionDeferral"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Storage::ApplicationDataContainerSettings>
{
	using Abi = ABI::Windows::Storage::ApplicationDataContainerSettings;
	using Default = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.ApplicationDataContainerSettings"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Storage::ApplicationDataCompositeValue>
{
	using Abi = ABI::Windows::Storage::ApplicationDataCompositeValue;
	using Default = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.ApplicationDataCompositeValue"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Storage::Streams::DataReaderLoadOperation>
{
	using Abi = ABI::Windows::Storage::Streams::DataReaderLoadOperation;
	using Default = Windows::Foundation::IAsyncOperation<unsigned>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.DataReaderLoadOperation"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Storage::Streams::DataReader>
{
	using Abi = ABI::Windows::Storage::Streams::DataReader;
	using Default = Windows::Storage::Streams::IDataReader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.DataReader"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Storage::Streams::DataWriterStoreOperation>
{
	using Abi = ABI::Windows::Storage::Streams::DataWriterStoreOperation;
	using Default = Windows::Foundation::IAsyncOperation<unsigned>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.DataWriterStoreOperation"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Storage::Streams::DataWriter>
{
	using Abi = ABI::Windows::Storage::Streams::DataWriter;
	using Default = Windows::Storage::Streams::IDataWriter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.DataWriter"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Storage::Streams::RandomAccessStream>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.RandomAccessStream"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::Streams::Buffer>
{
	using Abi = ABI::Windows::Storage::Streams::Buffer;
	using Default = Windows::Storage::Streams::IBuffer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.Buffer"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Storage::Streams::RandomAccessStreamReference>
{
	using Abi = ABI::Windows::Storage::Streams::RandomAccessStreamReference;
	using Default = Windows::Storage::Streams::IRandomAccessStreamReference;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.RandomAccessStreamReference"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Storage::Streams::FileRandomAccessStream>
{
	using Abi = ABI::Windows::Storage::Streams::FileRandomAccessStream;
	using Default = Windows::Storage::Streams::IRandomAccessStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.FileRandomAccessStream"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::Streams::FileInputStream>
{
	using Abi = ABI::Windows::Storage::Streams::FileInputStream;
	using Default = Windows::Storage::Streams::IInputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.FileInputStream"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Storage::Streams::FileOutputStream>
{
	using Abi = ABI::Windows::Storage::Streams::FileOutputStream;
	using Default = Windows::Storage::Streams::IOutputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.FileOutputStream"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Storage::Streams::RandomAccessStreamOverStream>
{
	using Abi = ABI::Windows::Storage::Streams::RandomAccessStreamOverStream;
	using Default = Windows::Storage::Streams::IRandomAccessStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.RandomAccessStreamOverStream"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Storage::Streams::InputStreamOverStream>
{
	using Abi = ABI::Windows::Storage::Streams::InputStreamOverStream;
	using Default = Windows::Storage::Streams::IInputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.InputStreamOverStream"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Storage::Streams::OutputStreamOverStream>
{
	using Abi = ABI::Windows::Storage::Streams::OutputStreamOverStream;
	using Default = Windows::Storage::Streams::IOutputStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.OutputStreamOverStream"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Storage::Streams::InMemoryRandomAccessStream>
{
	using Abi = ABI::Windows::Storage::Streams::InMemoryRandomAccessStream;
	using Default = Windows::Storage::Streams::IRandomAccessStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Streams.InMemoryRandomAccessStream"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader;
	using Default = Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactCardDelayedDataLoader"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactManager"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactLaunchActionVerbs>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactLaunchActionVerbs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Contact>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Contact;
	using Default = Windows::ApplicationModel::Contacts::IContact;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.Contact"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactPicker>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactPicker;
	using Default = Windows::ApplicationModel::Contacts::IContactPicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactPicker"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactSignificantOther>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactSignificantOther;
	using Default = Windows::ApplicationModel::Contacts::IContactSignificantOther;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactSignificantOther"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactWebsite>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactWebsite;
	using Default = Windows::ApplicationModel::Contacts::IContactWebsite;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactWebsite"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactEmail>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactEmail;
	using Default = Windows::ApplicationModel::Contacts::IContactEmail;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactEmail"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactPhone>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactPhone;
	using Default = Windows::ApplicationModel::Contacts::IContactPhone;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactPhone"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactAddress>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactAddress;
	using Default = Windows::ApplicationModel::Contacts::IContactAddress;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactAddress"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount;
	using Default = Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactConnectedServiceAccount"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactDate>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactDate;
	using Default = Windows::ApplicationModel::Contacts::IContactDate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactDate"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::ContactJobInfo>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::ContactJobInfo;
	using Default = Windows::ApplicationModel::Contacts::IContactJobInfo;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactJobInfo"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs;
	using Default = Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.Provider.ContactRemovedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI>
{
	using Abi = ABI::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI;
	using Default = Windows::ApplicationModel::Contacts::Provider::IContactPickerUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::ColorHelper>
{
	using Abi = ABI::Windows::UI::ColorHelper;
	using Default = Windows::UI::IColorHelper;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ColorHelper"; }
	static constexpr unsigned NameLength = 22;
};

template <> struct Traits<Windows::UI::Colors>
{
	using Abi = ABI::Windows::UI::Colors;
	using Default = Windows::UI::IColors;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Colors"; }
	static constexpr unsigned NameLength = 17;
};

template <> struct Traits<Windows::Devices::Input::PointerDevice>
{
	using Abi = ABI::Windows::Devices::Input::PointerDevice;
	using Default = Windows::Devices::Input::IPointerDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.PointerDevice"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Devices::Input::MouseDevice>
{
	using Abi = ABI::Windows::Devices::Input::MouseDevice;
	using Default = Windows::Devices::Input::IMouseDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.MouseDevice"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Devices::Input::MouseEventArgs>
{
	using Abi = ABI::Windows::Devices::Input::MouseEventArgs;
	using Default = Windows::Devices::Input::IMouseEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.MouseEventArgs"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Input::MouseCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::MouseCapabilities;
	using Default = Windows::Devices::Input::IMouseCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.MouseCapabilities"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Input::KeyboardCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::KeyboardCapabilities;
	using Default = Windows::Devices::Input::IKeyboardCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.KeyboardCapabilities"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::Input::TouchCapabilities>
{
	using Abi = ABI::Windows::Devices::Input::TouchCapabilities;
	using Default = Windows::Devices::Input::ITouchCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Input.TouchCapabilities"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Input::EdgeGestureEventArgs>
{
	using Abi = ABI::Windows::UI::Input::EdgeGestureEventArgs;
	using Default = Windows::UI::Input::IEdgeGestureEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.EdgeGestureEventArgs"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Input::EdgeGesture>
{
	using Abi = ABI::Windows::UI::Input::EdgeGesture;
	using Default = Windows::UI::Input::IEdgeGesture;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.EdgeGesture"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Input::MouseWheelParameters>
{
	using Abi = ABI::Windows::UI::Input::MouseWheelParameters;
	using Default = Windows::UI::Input::IMouseWheelParameters;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.MouseWheelParameters"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Input::GestureRecognizer>
{
	using Abi = ABI::Windows::UI::Input::GestureRecognizer;
	using Default = Windows::UI::Input::IGestureRecognizer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.GestureRecognizer"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Input::TappedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::TappedEventArgs;
	using Default = Windows::UI::Input::ITappedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.TappedEventArgs"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Input::RightTappedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::RightTappedEventArgs;
	using Default = Windows::UI::Input::IRightTappedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.RightTappedEventArgs"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Input::HoldingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::HoldingEventArgs;
	using Default = Windows::UI::Input::IHoldingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.HoldingEventArgs"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Input::DraggingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::DraggingEventArgs;
	using Default = Windows::UI::Input::IDraggingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.DraggingEventArgs"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::Input::ManipulationStartedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ManipulationStartedEventArgs;
	using Default = Windows::UI::Input::IManipulationStartedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.ManipulationStartedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Input::ManipulationUpdatedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ManipulationUpdatedEventArgs;
	using Default = Windows::UI::Input::IManipulationUpdatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.ManipulationUpdatedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Input::ManipulationInertiaStartingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ManipulationInertiaStartingEventArgs;
	using Default = Windows::UI::Input::IManipulationInertiaStartingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.ManipulationInertiaStartingEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Input::ManipulationCompletedEventArgs>
{
	using Abi = ABI::Windows::UI::Input::ManipulationCompletedEventArgs;
	using Default = Windows::UI::Input::IManipulationCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.ManipulationCompletedEventArgs"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Input::CrossSlidingEventArgs>
{
	using Abi = ABI::Windows::UI::Input::CrossSlidingEventArgs;
	using Default = Windows::UI::Input::ICrossSlidingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.CrossSlidingEventArgs"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Input::PointerPoint>
{
	using Abi = ABI::Windows::UI::Input::PointerPoint;
	using Default = Windows::UI::Input::IPointerPoint;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.PointerPoint"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Input::PointerPointProperties>
{
	using Abi = ABI::Windows::UI::Input::PointerPointProperties;
	using Default = Windows::UI::Input::IPointerPointProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.PointerPointProperties"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Input::PointerVisualizationSettings>
{
	using Abi = ABI::Windows::UI::Input::PointerVisualizationSettings;
	using Default = Windows::UI::Input::IPointerVisualizationSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.PointerVisualizationSettings"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Core::CoreDispatcher>
{
	using Abi = ABI::Windows::UI::Core::CoreDispatcher;
	using Default = Windows::UI::Core::ICoreDispatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreDispatcher"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::UI::Core::CoreCursor>
{
	using Abi = ABI::Windows::UI::Core::CoreCursor;
	using Default = Windows::UI::Core::ICoreCursor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreCursor"; }
	static constexpr unsigned NameLength = 26;
};

template <> struct Traits<Windows::UI::Core::CoreWindow>
{
	using Abi = ABI::Windows::UI::Core::CoreWindow;
	using Default = Windows::UI::Core::ICoreWindow;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindow"; }
	static constexpr unsigned NameLength = 26;
};

template <> struct Traits<Windows::UI::Core::WindowActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::WindowActivatedEventArgs;
	using Default = Windows::UI::Core::IWindowActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.WindowActivatedEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Core::AutomationProviderRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::AutomationProviderRequestedEventArgs;
	using Default = Windows::UI::Core::IAutomationProviderRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AutomationProviderRequestedEventArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::Core::CharacterReceivedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::CharacterReceivedEventArgs;
	using Default = Windows::UI::Core::ICharacterReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CharacterReceivedEventArgs"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::CoreWindowEventArgs>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowEventArgs;
	using Default = Windows::UI::Core::ICoreWindowEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowEventArgs"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Core::InputEnabledEventArgs>
{
	using Abi = ABI::Windows::UI::Core::InputEnabledEventArgs;
	using Default = Windows::UI::Core::IInputEnabledEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.InputEnabledEventArgs"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Core::KeyEventArgs>
{
	using Abi = ABI::Windows::UI::Core::KeyEventArgs;
	using Default = Windows::UI::Core::IKeyEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.KeyEventArgs"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::UI::Core::PointerEventArgs>
{
	using Abi = ABI::Windows::UI::Core::PointerEventArgs;
	using Default = Windows::UI::Core::IPointerEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.PointerEventArgs"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Core::TouchHitTestingEventArgs>
{
	using Abi = ABI::Windows::UI::Core::TouchHitTestingEventArgs;
	using Default = Windows::UI::Core::ITouchHitTestingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.TouchHitTestingEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Core::WindowSizeChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::WindowSizeChangedEventArgs;
	using Default = Windows::UI::Core::IWindowSizeChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.WindowSizeChangedEventArgs"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::VisibilityChangedEventArgs>
{
	using Abi = ABI::Windows::UI::Core::VisibilityChangedEventArgs;
	using Default = Windows::UI::Core::IVisibilityChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.VisibilityChangedEventArgs"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::IdleDispatchedHandlerArgs>
{
	using Abi = ABI::Windows::UI::Core::IdleDispatchedHandlerArgs;
	using Default = Windows::UI::Core::IIdleDispatchedHandlerArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.IdleDispatchedHandlerArgs"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Core::AcceleratorKeyEventArgs>
{
	using Abi = ABI::Windows::UI::Core::AcceleratorKeyEventArgs;
	using Default = Windows::UI::Core::IAcceleratorKeyEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AcceleratorKeyEventArgs"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Core::CoreAcceleratorKeys>
{
	using Abi = ABI::Windows::UI::Core::CoreAcceleratorKeys;
	using Default = Windows::UI::Core::ICoreAcceleratorKeys;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreAcceleratorKeys"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::Core::CoreWindowResizeManager>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowResizeManager;
	using Default = Windows::UI::Core::ICoreWindowResizeManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowResizeManager"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Core::CoreIndependentInputSource>
{
	using Abi = ABI::Windows::UI::Core::CoreIndependentInputSource;
	using Default = Windows::UI::Core::ICoreInputSourceBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreIndependentInputSource"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::CoreComponentInputSource>
{
	using Abi = ABI::Windows::UI::Core::CoreComponentInputSource;
	using Default = Windows::UI::Core::ICoreInputSourceBase;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreComponentInputSource"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Core::CoreWindowPopupShowingEventArgs>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowPopupShowingEventArgs;
	using Default = Windows::UI::Core::ICoreWindowPopupShowingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowPopupShowingEventArgs"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Core::CoreWindowDialog>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowDialog;
	using Default = Windows::UI::Core::ICoreWindowDialog;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowDialog"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::Core::CoreWindowFlyout>
{
	using Abi = ABI::Windows::UI::Core::CoreWindowFlyout;
	using Default = Windows::UI::Core::ICoreWindowFlyout;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.CoreWindowFlyout"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::UI::ViewManagement::ApplicationView>
{
	using Abi = ABI::Windows::UI::ViewManagement::ApplicationView;
	using Default = Windows::UI::ViewManagement::IApplicationView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.ApplicationView"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>
{
	using Abi = ABI::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs;
	using Default = Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::UI::ViewManagement::ApplicationViewSwitcher>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.ApplicationViewSwitcher"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::ViewManagement::ProjectionManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.ProjectionManager"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>
{
	using Abi = ABI::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs;
	using Default = Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.InputPaneVisibilityEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::ViewManagement::InputPane>
{
	using Abi = ABI::Windows::UI::ViewManagement::InputPane;
	using Default = Windows::UI::ViewManagement::IInputPane;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.InputPane"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::ViewManagement::AccessibilitySettings>
{
	using Abi = ABI::Windows::UI::ViewManagement::AccessibilitySettings;
	using Default = Windows::UI::ViewManagement::IAccessibilitySettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.AccessibilitySettings"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::ViewManagement::UISettings>
{
	using Abi = ABI::Windows::UI::ViewManagement::UISettings;
	using Default = Windows::UI::ViewManagement::IUISettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ViewManagement.UISettings"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::System::LauncherUIOptions>
{
	using Abi = ABI::Windows::System::LauncherUIOptions;
	using Default = Windows::System::ILauncherUIOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.LauncherUIOptions"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::System::LauncherOptions>
{
	using Abi = ABI::Windows::System::LauncherOptions;
	using Default = Windows::System::ILauncherOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.LauncherOptions"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::System::Launcher>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Launcher"; }
	static constexpr unsigned NameLength = 23;
};

template <> struct Traits<Windows::ApplicationModel::SuspendingEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::SuspendingEventArgs;
	using Default = Windows::ApplicationModel::ISuspendingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.SuspendingEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::ApplicationModel::SuspendingDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::SuspendingDeferral;
	using Default = Windows::ApplicationModel::ISuspendingDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.SuspendingDeferral"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::ApplicationModel::SuspendingOperation>
{
	using Abi = ABI::Windows::ApplicationModel::SuspendingOperation;
	using Default = Windows::ApplicationModel::ISuspendingOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.SuspendingOperation"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::ApplicationModel::PackageId>
{
	using Abi = ABI::Windows::ApplicationModel::PackageId;
	using Default = Windows::ApplicationModel::IPackageId;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.PackageId"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::ApplicationModel::Package>
{
	using Abi = ABI::Windows::ApplicationModel::Package;
	using Default = Windows::ApplicationModel::IPackage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Package"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::ApplicationModel::DesignMode>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DesignMode"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::ApplicationModel::Core::CoreApplication>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Core.CoreApplication"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::ApplicationModel::Core::CoreApplicationView>
{
	using Abi = ABI::Windows::ApplicationModel::Core::CoreApplicationView;
	using Default = Windows::ApplicationModel::Core::ICoreApplicationView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Core.CoreApplicationView"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs;
	using Default = Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::ApplicationModel::Core::UnhandledError>
{
	using Abi = ABI::Windows::ApplicationModel::Core::UnhandledError;
	using Default = Windows::ApplicationModel::Core::IUnhandledError;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Core.UnhandledError"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::StandardDataFormats>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.StandardDataFormats"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView;
	using Default = Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataPackagePropertySet>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackagePropertySet;
	using Default = Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackagePropertySet"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataProviderDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataProviderDeferral;
	using Default = Windows::ApplicationModel::DataTransfer::IDataProviderDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataProviderDeferral"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataProviderRequest>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataProviderRequest;
	using Default = Windows::ApplicationModel::DataTransfer::IDataProviderRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataProviderRequest"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs;
	using Default = Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataPackageView>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackageView;
	using Default = Windows::ApplicationModel::DataTransfer::IDataPackageView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackageView"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataPackage>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackage;
	using Default = Windows::ApplicationModel::DataTransfer::IDataPackage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackage"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::HtmlFormatHelper>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.HtmlFormatHelper"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::Clipboard>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.Clipboard"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataRequestDeferral;
	using Default = Windows::ApplicationModel::DataTransfer::IDataRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataRequestDeferral"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataRequest>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataRequest;
	using Default = Windows::ApplicationModel::DataTransfer::IDataRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataRequest"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs;
	using Default = Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs;
	using Default = Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.TargetApplicationChosenEventArgs"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::DataTransferManager>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::DataTransferManager;
	using Default = Windows::ApplicationModel::DataTransfer::IDataTransferManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataTransferManager"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink;
	using Default = Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.ShareTarget.QuickLink"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation>
{
	using Abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation;
	using Default = Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.DataTransfer.ShareTarget.ShareOperation"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails;
	using Default = Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneVisibilityChangedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneQueryChangedEventArgs"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneQuerySubmittedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneResultSuggestionChosenEventArgs"; }
	static constexpr unsigned NameLength = 73;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchSuggestionCollection>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchSuggestionCollection;
	using Default = Windows::ApplicationModel::Search::ISearchSuggestionCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchSuggestionCollection"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral;
	using Default = Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneSuggestionsRequestDeferral"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest;
	using Default = Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneSuggestionsRequest"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs;
	using Default = Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneSuggestionsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::ApplicationModel::Search::LocalContentSuggestionSettings>
{
	using Abi = ABI::Windows::ApplicationModel::Search::LocalContentSuggestionSettings;
	using Default = Windows::ApplicationModel::Search::ILocalContentSuggestionSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.LocalContentSuggestionSettings"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchPane>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchPane;
	using Default = Windows::ApplicationModel::Search::ISearchPane;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchPane"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchQueryLinguisticDetails>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchQueryLinguisticDetails;
	using Default = Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchQueryLinguisticDetails"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral;
	using Default = Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchSuggestionsRequestDeferral"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Search::SearchSuggestionsRequest>
{
	using Abi = ABI::Windows::ApplicationModel::Search::SearchSuggestionsRequest;
	using Default = Windows::ApplicationModel::Search::ISearchSuggestionsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Search.SearchSuggestionsRequest"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral;
	using Default = Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequestedDeferral"; }
	static constexpr unsigned NameLength = 79;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest;
	using Default = Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequest"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs;
	using Default = Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequestedEventArgs"; }
	static constexpr unsigned NameLength = 80;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintTaskConfiguration>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfiguration;
	using Default = Windows::Devices::Printers::Extensions::IPrintTaskConfiguration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfiguration"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintNotificationEventDetails>
{
	using Abi = ABI::Windows::Devices::Printers::Extensions::PrintNotificationEventDetails;
	using Default = Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintNotificationEventDetails"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Devices::Printers::Extensions::PrintExtensionContext>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintExtensionContext"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::FileRemovedEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::FileRemovedEventArgs;
	using Default = Windows::Storage::Pickers::Provider::IFileRemovedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.FileRemovedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::FileOpenPickerUI>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::FileOpenPickerUI;
	using Default = Windows::Storage::Pickers::Provider::IFileOpenPickerUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.FileOpenPickerUI"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::PickerClosingEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::PickerClosingEventArgs;
	using Default = Windows::Storage::Pickers::Provider::IPickerClosingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.PickerClosingEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::PickerClosingOperation>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::PickerClosingOperation;
	using Default = Windows::Storage::Pickers::Provider::IPickerClosingOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.PickerClosingOperation"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::PickerClosingDeferral>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::PickerClosingDeferral;
	using Default = Windows::Storage::Pickers::Provider::IPickerClosingDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.PickerClosingDeferral"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::FileSavePickerUI>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::FileSavePickerUI;
	using Default = Windows::Storage::Pickers::Provider::IFileSavePickerUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.FileSavePickerUI"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs;
	using Default = Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::TargetFileRequest>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::TargetFileRequest;
	using Default = Windows::Storage::Pickers::Provider::ITargetFileRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.TargetFileRequest"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>
{
	using Abi = ABI::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral;
	using Default = Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.Provider.TargetFileRequestDeferral"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Activation::SplashScreen>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::SplashScreen;
	using Default = Windows::ApplicationModel::Activation::ISplashScreen;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.SplashScreen"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::ApplicationModel::Activation::LaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::LaunchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.LaunchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Activation::SearchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::SearchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ISearchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.SearchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ShareTargetActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ShareTargetActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::Activation::FileActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::FileActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.FileActivatedEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ProtocolActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ProtocolActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Activation::FileOpenPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::FileOpenPickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Activation::FileSavePickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::FileSavePickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Activation::CachedFileUpdaterActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::CachedFileUpdaterActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactPickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactPickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::ApplicationModel::Activation::DeviceActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::DeviceActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.DeviceActivatedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::ApplicationModel::Activation::PrintTaskSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::PrintTaskSettingsActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.PrintTaskSettingsActivatedEventArgs"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::ApplicationModel::Activation::CameraSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::CameraSettingsActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.CameraSettingsActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Activation::AppointmentsProviderAddAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderAddAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderAddAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 88;
};

template <> struct Traits<Windows::ApplicationModel::Activation::AppointmentsProviderReplaceAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderReplaceAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderReplaceAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 92;
};

template <> struct Traits<Windows::ApplicationModel::Activation::AppointmentsProviderRemoveAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderRemoveAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderRemoveAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 91;
};

template <> struct Traits<Windows::ApplicationModel::Activation::AppointmentsProviderShowTimeFrameActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderShowTimeFrameActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderShowTimeFrameActivatedEventArgs"; }
	static constexpr unsigned NameLength = 87;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactMessageActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactMessageActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactMessageActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactMapActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactMapActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactMapActivatedEventArgs"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactPostActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactPostActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactPostActivatedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::ApplicationModel::Activation::ContactVideoCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::ContactVideoCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.ContactVideoCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Activation::RestrictedLaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::RestrictedLaunchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.RestrictedLaunchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Activation::LockScreenCallActivatedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Activation::LockScreenCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Activation.LockScreenCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Background::AlarmApplicationManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.AlarmApplicationManager"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundExecutionManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundExecutionManager"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskRegistration>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskRegistration;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskRegistration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskRegistration"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskDeferral>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskDeferral;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskDeferral"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundTaskBuilder>
{
	using Abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskBuilder;
	using Default = Windows::ApplicationModel::Background::IBackgroundTaskBuilder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskBuilder"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::Background::BackgroundWorkCost>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundWorkCost"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::ApplicationModel::Background::SystemTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::SystemTrigger;
	using Default = Windows::ApplicationModel::Background::ISystemTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.SystemTrigger"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Background::SystemCondition>
{
	using Abi = ABI::Windows::ApplicationModel::Background::SystemCondition;
	using Default = Windows::ApplicationModel::Background::ISystemCondition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.SystemCondition"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger;
	using Default = Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.NetworkOperatorNotificationTrigger"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Background::TimeTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::TimeTrigger;
	using Default = Windows::ApplicationModel::Background::ITimeTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.TimeTrigger"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::ApplicationModel::Background::MaintenanceTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::MaintenanceTrigger;
	using Default = Windows::ApplicationModel::Background::IMaintenanceTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.MaintenanceTrigger"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::ApplicationModel::Background::DeviceUseTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::DeviceUseTrigger;
	using Default = Windows::ApplicationModel::Background::IDeviceUseTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.DeviceUseTrigger"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::ApplicationModel::Background::DeviceServicingTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::DeviceServicingTrigger;
	using Default = Windows::ApplicationModel::Background::IDeviceServicingTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.DeviceServicingTrigger"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Background::LocationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::LocationTrigger;
	using Default = Windows::ApplicationModel::Background::ILocationTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.LocationTrigger"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::ApplicationModel::Background::NetworkOperatorHotspotAuthenticationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::NetworkOperatorHotspotAuthenticationTrigger;
	using Default = Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.NetworkOperatorHotspotAuthenticationTrigger"; }
	static constexpr unsigned NameLength = 79;
};

template <> struct Traits<Windows::ApplicationModel::Background::PushNotificationTrigger>
{
	using Abi = ABI::Windows::ApplicationModel::Background::PushNotificationTrigger;
	using Default = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Background.PushNotificationTrigger"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::UI::Core::ImmersiveCoreWindowFactory>
{
	using Abi = ABI::Windows::UI::Core::ImmersiveCoreWindowFactory;
	using Default = Windows::UI::Core::ICoreWindowFactory;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.ImmersiveCoreWindowFactory"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Core::HostedCoreWindowFactory>
{
	using Abi = ABI::Windows::UI::Core::HostedCoreWindowFactory;
	using Default = Windows::UI::Core::ICoreWindowFactory;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.HostedCoreWindowFactory"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceMap>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceMap;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceMap;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceMap"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceContext>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceContext;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceContext;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceContext"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceManager>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceManager;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceManager"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceQualifier>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceQualifier;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceQualifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceQualifier"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceCandidate>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceCandidate;
	using Default = Windows::ApplicationModel::Resources::Core::IResourceCandidate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceCandidate"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::NamedResource>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::NamedResource;
	using Default = Windows::ApplicationModel::Resources::Core::INamedResource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.NamedResource"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceMapIterator>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceMapIterator;
	using Default = Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::NamedResource>>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceMapIterator"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceMapMapView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceMapMapView;
	using Default = Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceMapMapView"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceMapMapViewIterator;
	using Default = Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::ResourceMap>>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceMapMapViewIterator"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceQualifierObservableMap;
	using Default = Windows::Foundation::Collections::IObservableMap<String, String>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceQualifierObservableMap"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceQualifierMapView;
	using Default = Windows::Foundation::Collections::IMapView<String, String>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceQualifierMapView"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceQualifierVectorView;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceQualifierVectorView"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceCandidateVectorView;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceCandidateVectorView"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Core::ResourceContextLanguagesVectorView;
	using Default = Windows::Foundation::Collections::IVectorView<String>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Core.ResourceContextLanguagesVectorView"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::ApplicationModel::Resources::ResourceLoader>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::ResourceLoader;
	using Default = Windows::ApplicationModel::Resources::IResourceLoader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.ResourceLoader"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate;
	using Default = Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Management.IndexedResourceCandidate"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::ResourceIndexer>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::ResourceIndexer;
	using Default = Windows::ApplicationModel::Resources::Management::IResourceIndexer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Management.ResourceIndexer"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier>
{
	using Abi = ABI::Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier;
	using Default = Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Resources.Management.IndexedResourceQualifier"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::ApplicationModel::Store::LicenseInformation>
{
	using Abi = ABI::Windows::ApplicationModel::Store::LicenseInformation;
	using Default = Windows::ApplicationModel::Store::ILicenseInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.LicenseInformation"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Store::ListingInformation>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ListingInformation;
	using Default = Windows::ApplicationModel::Store::IListingInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.ListingInformation"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::ApplicationModel::Store::PurchaseResults>
{
	using Abi = ABI::Windows::ApplicationModel::Store::PurchaseResults;
	using Default = Windows::ApplicationModel::Store::IPurchaseResults;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.PurchaseResults"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties;
	using Default = Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::ApplicationModel::Store::UnfulfilledConsumable>
{
	using Abi = ABI::Windows::ApplicationModel::Store::UnfulfilledConsumable;
	using Default = Windows::ApplicationModel::Store::IUnfulfilledConsumable;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.UnfulfilledConsumable"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::ApplicationModel::Store::ProductLicense>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ProductLicense;
	using Default = Windows::ApplicationModel::Store::IProductLicense;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.ProductLicense"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::ApplicationModel::Store::ProductListing>
{
	using Abi = ABI::Windows::ApplicationModel::Store::ProductListing;
	using Default = Windows::ApplicationModel::Store::IProductListing;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.ProductListing"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::ApplicationModel::Store::CurrentApp>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.CurrentApp"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::ApplicationModel::Store::CurrentAppSimulator>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.ApplicationModel.Store.CurrentAppSimulator"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Data::Html::HtmlUtilities>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Html.HtmlUtilities"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Data::Json::JsonArray>
{
	using Abi = ABI::Windows::Data::Json::JsonArray;
	using Default = Windows::Data::Json::IJsonArray;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Json.JsonArray"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Data::Json::JsonObject>
{
	using Abi = ABI::Windows::Data::Json::JsonObject;
	using Default = Windows::Data::Json::IJsonObject;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Json.JsonObject"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::Data::Json::JsonValue>
{
	using Abi = ABI::Windows::Data::Json::JsonValue;
	using Default = Windows::Data::Json::IJsonValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Json.JsonValue"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Data::Json::JsonError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Json.JsonError"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Data::Pdf::PdfPageRenderOptions>
{
	using Abi = ABI::Windows::Data::Pdf::PdfPageRenderOptions;
	using Default = Windows::Data::Pdf::IPdfPageRenderOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Pdf.PdfPageRenderOptions"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Data::Pdf::PdfPageDimensions>
{
	using Abi = ABI::Windows::Data::Pdf::PdfPageDimensions;
	using Default = Windows::Data::Pdf::IPdfPageDimensions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Pdf.PdfPageDimensions"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Data::Pdf::PdfPage>
{
	using Abi = ABI::Windows::Data::Pdf::PdfPage;
	using Default = Windows::Data::Pdf::IPdfPage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Pdf.PdfPage"; }
	static constexpr unsigned NameLength = 24;
};

template <> struct Traits<Windows::Data::Pdf::PdfDocument>
{
	using Abi = ABI::Windows::Data::Pdf::PdfDocument;
	using Default = Windows::Data::Pdf::IPdfDocument;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Pdf.PdfDocument"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlNodeList>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlNodeList;
	using Default = Windows::Data::Xml::Dom::IXmlNodeList;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlNodeList"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlNamedNodeMap>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlNamedNodeMap;
	using Default = Windows::Data::Xml::Dom::IXmlNamedNodeMap;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlNamedNodeMap"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlDocument>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlDocument;
	using Default = Windows::Data::Xml::Dom::IXmlDocument;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlDocument"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlAttribute>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlAttribute;
	using Default = Windows::Data::Xml::Dom::IXmlAttribute;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlAttribute"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlDocumentType>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlDocumentType;
	using Default = Windows::Data::Xml::Dom::IXmlDocumentType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlDocumentType"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlDomImplementation>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlDomImplementation;
	using Default = Windows::Data::Xml::Dom::IXmlDomImplementation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlDomImplementation"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlElement>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlElement;
	using Default = Windows::Data::Xml::Dom::IXmlElement;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlElement"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlDocumentFragment>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlDocumentFragment;
	using Default = Windows::Data::Xml::Dom::IXmlDocumentFragment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlDocumentFragment"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlText>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlText;
	using Default = Windows::Data::Xml::Dom::IXmlText;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlText"; }
	static constexpr unsigned NameLength = 28;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlComment>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlComment;
	using Default = Windows::Data::Xml::Dom::IXmlComment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlComment"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlProcessingInstruction>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlProcessingInstruction;
	using Default = Windows::Data::Xml::Dom::IXmlProcessingInstruction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlProcessingInstruction"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlEntityReference>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlEntityReference;
	using Default = Windows::Data::Xml::Dom::IXmlEntityReference;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlEntityReference"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlCDataSection>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlCDataSection;
	using Default = Windows::Data::Xml::Dom::IXmlCDataSection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlCDataSection"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Data::Xml::Dom::XmlLoadSettings>
{
	using Abi = ABI::Windows::Data::Xml::Dom::XmlLoadSettings;
	using Default = Windows::Data::Xml::Dom::IXmlLoadSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.XmlLoadSettings"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Data::Xml::Dom::DtdNotation>
{
	using Abi = ABI::Windows::Data::Xml::Dom::DtdNotation;
	using Default = Windows::Data::Xml::Dom::IDtdNotation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.DtdNotation"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Data::Xml::Dom::DtdEntity>
{
	using Abi = ABI::Windows::Data::Xml::Dom::DtdEntity;
	using Default = Windows::Data::Xml::Dom::IDtdEntity;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Dom.DtdEntity"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Data::Xml::Xsl::XsltProcessor>
{
	using Abi = ABI::Windows::Data::Xml::Xsl::XsltProcessor;
	using Default = Windows::Data::Xml::Xsl::IXsltProcessor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Data.Xml.Xsl.XsltProcessor"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Background::DeviceUseDetails>
{
	using Abi = ABI::Windows::Devices::Background::DeviceUseDetails;
	using Default = Windows::Devices::Background::IDeviceUseDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Background.DeviceUseDetails"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Background::DeviceServicingDetails>
{
	using Abi = ABI::Windows::Devices::Background::DeviceServicingDetails;
	using Default = Windows::Devices::Background::IDeviceServicingDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Background.DeviceServicingDetails"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Devices::Custom::KnownDeviceTypes>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Custom.KnownDeviceTypes"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Custom::IOControlCode>
{
	using Abi = ABI::Windows::Devices::Custom::IOControlCode;
	using Default = Windows::Devices::Custom::IIOControlCode;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Custom.IOControlCode"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Custom::CustomDevice>
{
	using Abi = ABI::Windows::Devices::Custom::CustomDevice;
	using Default = Windows::Devices::Custom::ICustomDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Custom.CustomDevice"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceThumbnail>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceThumbnail;
	using Default = Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceThumbnail"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Enumeration::EnclosureLocation>
{
	using Abi = ABI::Windows::Devices::Enumeration::EnclosureLocation;
	using Default = Windows::Devices::Enumeration::IEnclosureLocation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.EnclosureLocation"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceInformationUpdate>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceInformationUpdate;
	using Default = Windows::Devices::Enumeration::IDeviceInformationUpdate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformationUpdate"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceInformationCollection>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceInformationCollection;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceInformation>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformationCollection"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceWatcher>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceWatcher;
	using Default = Windows::Devices::Enumeration::IDeviceWatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceWatcher"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceInformation>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceInformation;
	using Default = Windows::Devices::Enumeration::IDeviceInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformation"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceAccessChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceAccessChangedEventArgs;
	using Default = Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceAccessChangedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Devices::Enumeration::DeviceAccessInformation>
{
	using Abi = ABI::Windows::Devices::Enumeration::DeviceAccessInformation;
	using Default = Windows::Devices::Enumeration::IDeviceAccessInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.DeviceAccessInformation"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::PnpObjectUpdate>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::PnpObjectUpdate;
	using Default = Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.Pnp.PnpObjectUpdate"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::PnpObjectCollection>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::PnpObjectCollection;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::Pnp::PnpObject>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.Pnp.PnpObjectCollection"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::PnpObjectWatcher;
	using Default = Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.Pnp.PnpObjectWatcher"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Devices::Enumeration::Pnp::PnpObject>
{
	using Abi = ABI::Windows::Devices::Enumeration::Pnp::PnpObject;
	using Default = Windows::Devices::Enumeration::Pnp::IPnpObject;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Enumeration.Pnp.PnpObject"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Geolocation::Geopoint>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geopoint;
	using Default = Windows::Devices::Geolocation::IGeopoint;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geopoint"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Geolocation::GeocoordinateSatelliteData>
{
	using Abi = ABI::Windows::Devices::Geolocation::GeocoordinateSatelliteData;
	using Default = Windows::Devices::Geolocation::IGeocoordinateSatelliteData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.GeocoordinateSatelliteData"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::Geolocation::Geocoordinate>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geocoordinate;
	using Default = Windows::Devices::Geolocation::IGeocoordinate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geocoordinate"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Geolocation::CivicAddress>
{
	using Abi = ABI::Windows::Devices::Geolocation::CivicAddress;
	using Default = Windows::Devices::Geolocation::ICivicAddress;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.CivicAddress"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Devices::Geolocation::Geoposition>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geoposition;
	using Default = Windows::Devices::Geolocation::IGeoposition;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geoposition"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Geolocation::PositionChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Geolocation::PositionChangedEventArgs;
	using Default = Windows::Devices::Geolocation::IPositionChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.PositionChangedEventArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::Geolocation::StatusChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Geolocation::StatusChangedEventArgs;
	using Default = Windows::Devices::Geolocation::IStatusChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.StatusChangedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Devices::Geolocation::Geolocator>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geolocator;
	using Default = Windows::Devices::Geolocation::IGeolocator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geolocator"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Geolocation::Geocircle>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geocircle;
	using Default = Windows::Devices::Geolocation::IGeocircle;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geocircle"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::Geofence>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::Geofence;
	using Default = Windows::Devices::Geolocation::Geofencing::IGeofence;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geofencing.Geofence"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::GeofenceMonitor;
	using Default = Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geofencing.GeofenceMonitor"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport>
{
	using Abi = ABI::Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport;
	using Default = Windows::Devices::Geolocation::Geofencing::IGeofenceStateChangeReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Geolocation.Geofencing.GeofenceStateChangeReport"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidDevice>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidDevice;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidDevice"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidInputReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidInputReport;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidInputReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidInputReport"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidFeatureReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidFeatureReport;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidFeatureReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidFeatureReport"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidOutputReport>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidOutputReport;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidOutputReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidOutputReport"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidBooleanControlDescription"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidNumericControlDescription"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidInputReportReceivedEventArgs"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidCollection>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidCollection;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidCollection"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidBooleanControl>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidBooleanControl;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidBooleanControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidBooleanControl"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::HumanInterfaceDevice::HidNumericControl>
{
	using Abi = ABI::Windows::Devices::HumanInterfaceDevice::HidNumericControl;
	using Default = Windows::Devices::HumanInterfaceDevice::IHidNumericControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.HumanInterfaceDevice.HidNumericControl"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::PointOfService::UnifiedPosErrorData>
{
	using Abi = ABI::Windows::Devices::PointOfService::UnifiedPosErrorData;
	using Default = Windows::Devices::PointOfService::IUnifiedPosErrorData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.UnifiedPosErrorData"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerStatusUpdatedEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeSymbologies>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeSymbologies"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerReport>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerReport;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerReport"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerDataReceivedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerErrorOccurredEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerImagePreviewReceivedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScannerCapabilities>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScannerCapabilities;
	using Default = Windows::Devices::PointOfService::IBarcodeScannerCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScannerCapabilities"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Devices::PointOfService::BarcodeScanner>
{
	using Abi = ABI::Windows::Devices::PointOfService::BarcodeScanner;
	using Default = Windows::Devices::PointOfService::IBarcodeScanner;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.BarcodeScanner"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::PointOfService::ClaimedBarcodeScanner>
{
	using Abi = ABI::Windows::Devices::PointOfService::ClaimedBarcodeScanner;
	using Default = Windows::Devices::PointOfService::IClaimedBarcodeScanner;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.ClaimedBarcodeScanner"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderEncryptionAlgorithms>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderEncryptionAlgorithms"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderCardTypes>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderCardTypes"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderTrackData>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderTrackData;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderTrackData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderTrackData"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderReport>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderReport;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderReport;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderReport"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderBankCardDataReceivedEventArgs"; }
	static constexpr unsigned NameLength = 80;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderAamvaCardDataReceivedEventArgs"; }
	static constexpr unsigned NameLength = 81;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs"; }
	static constexpr unsigned NameLength = 90;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderErrorOccurredEventArgs"; }
	static constexpr unsigned NameLength = 73;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderStatusUpdatedEventArgs"; }
	static constexpr unsigned NameLength = 73;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReaderCapabilities>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReaderCapabilities;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReaderCapabilities"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Devices::PointOfService::ClaimedMagneticStripeReader>
{
	using Abi = ABI::Windows::Devices::PointOfService::ClaimedMagneticStripeReader;
	using Default = Windows::Devices::PointOfService::IClaimedMagneticStripeReader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.ClaimedMagneticStripeReader"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Devices::PointOfService::MagneticStripeReader>
{
	using Abi = ABI::Windows::Devices::PointOfService::MagneticStripeReader;
	using Default = Windows::Devices::PointOfService::IMagneticStripeReader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.PointOfService.MagneticStripeReader"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::Portable::StorageDevice>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Portable.StorageDevice"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Portable::ServiceDevice>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Portable.ServiceDevice"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Sensors::Accelerometer>
{
	using Abi = ABI::Windows::Devices::Sensors::Accelerometer;
	using Default = Windows::Devices::Sensors::IAccelerometer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.Accelerometer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Devices::Sensors::AccelerometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::AccelerometerReading;
	using Default = Windows::Devices::Sensors::IAccelerometerReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.AccelerometerReading"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Devices::Sensors::AccelerometerShakenEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::AccelerometerShakenEventArgs;
	using Default = Windows::Devices::Sensors::IAccelerometerShakenEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.AccelerometerShakenEventArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::Sensors::Inclinometer>
{
	using Abi = ABI::Windows::Devices::Sensors::Inclinometer;
	using Default = Windows::Devices::Sensors::IInclinometer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.Inclinometer"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Sensors::InclinometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::InclinometerReading;
	using Default = Windows::Devices::Sensors::IInclinometerReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.InclinometerReading"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Sensors::InclinometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::InclinometerReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.InclinometerReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Devices::Sensors::Gyrometer>
{
	using Abi = ABI::Windows::Devices::Sensors::Gyrometer;
	using Default = Windows::Devices::Sensors::IGyrometer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.Gyrometer"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Devices::Sensors::GyrometerReading>
{
	using Abi = ABI::Windows::Devices::Sensors::GyrometerReading;
	using Default = Windows::Devices::Sensors::IGyrometerReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.GyrometerReading"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Devices::Sensors::GyrometerReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::GyrometerReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.GyrometerReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Devices::Sensors::Compass>
{
	using Abi = ABI::Windows::Devices::Sensors::Compass;
	using Default = Windows::Devices::Sensors::ICompass;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.Compass"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Devices::Sensors::CompassReading>
{
	using Abi = ABI::Windows::Devices::Sensors::CompassReading;
	using Default = Windows::Devices::Sensors::ICompassReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.CompassReading"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Sensors::CompassReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::CompassReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::ICompassReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.CompassReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Devices::Sensors::LightSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::LightSensor;
	using Default = Windows::Devices::Sensors::ILightSensor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.LightSensor"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Devices::Sensors::LightSensorReading>
{
	using Abi = ABI::Windows::Devices::Sensors::LightSensorReading;
	using Default = Windows::Devices::Sensors::ILightSensorReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.LightSensorReading"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::Sensors::LightSensorReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::LightSensorReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.LightSensorReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Devices::Sensors::SensorRotationMatrix>
{
	using Abi = ABI::Windows::Devices::Sensors::SensorRotationMatrix;
	using Default = Windows::Devices::Sensors::ISensorRotationMatrix;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.SensorRotationMatrix"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Devices::Sensors::SensorQuaternion>
{
	using Abi = ABI::Windows::Devices::Sensors::SensorQuaternion;
	using Default = Windows::Devices::Sensors::ISensorQuaternion;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.SensorQuaternion"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Devices::Sensors::OrientationSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::OrientationSensor;
	using Default = Windows::Devices::Sensors::IOrientationSensor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.OrientationSensor"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Sensors::OrientationSensorReading>
{
	using Abi = ABI::Windows::Devices::Sensors::OrientationSensorReading;
	using Default = Windows::Devices::Sensors::IOrientationSensorReading;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.OrientationSensorReading"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs;
	using Default = Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Devices::Sensors::SimpleOrientationSensor>
{
	using Abi = ABI::Windows::Devices::Sensors::SimpleOrientationSensor;
	using Default = Windows::Devices::Sensors::ISimpleOrientationSensor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.SimpleOrientationSensor"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs;
	using Default = Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardReader>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardReader;
	using Default = Windows::Devices::SmartCards::ISmartCardReader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardReader"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCard>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCard;
	using Default = Windows::Devices::SmartCards::ISmartCard;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCard"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::SmartCards::CardAddedEventArgs>
{
	using Abi = ABI::Windows::Devices::SmartCards::CardAddedEventArgs;
	using Default = Windows::Devices::SmartCards::ICardAddedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.CardAddedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::SmartCards::CardRemovedEventArgs>
{
	using Abi = ABI::Windows::Devices::SmartCards::CardRemovedEventArgs;
	using Default = Windows::Devices::SmartCards::ICardRemovedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.CardRemovedEventArgs"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardProvisioning>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardProvisioning;
	using Default = Windows::Devices::SmartCards::ISmartCardProvisioning;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardProvisioning"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardPinPolicy>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardPinPolicy;
	using Default = Windows::Devices::SmartCards::ISmartCardPinPolicy;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardPinPolicy"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardChallengeContext>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardChallengeContext;
	using Default = Windows::Devices::SmartCards::ISmartCardChallengeContext;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardChallengeContext"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardPinResetRequest>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardPinResetRequest;
	using Default = Windows::Devices::SmartCards::ISmartCardPinResetRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardPinResetRequest"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Devices::SmartCards::SmartCardPinResetDeferral>
{
	using Abi = ABI::Windows::Devices::SmartCards::SmartCardPinResetDeferral;
	using Default = Windows::Devices::SmartCards::ISmartCardPinResetDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.SmartCards.SmartCardPinResetDeferral"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::Sms::SmsBinaryMessage>
{
	using Abi = ABI::Windows::Devices::Sms::SmsBinaryMessage;
	using Default = Windows::Devices::Sms::ISmsBinaryMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsBinaryMessage"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Sms::SmsTextMessage>
{
	using Abi = ABI::Windows::Devices::Sms::SmsTextMessage;
	using Default = Windows::Devices::Sms::ISmsTextMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsTextMessage"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Sms::DeleteSmsMessageOperation>
{
	using Abi = ABI::Windows::Devices::Sms::DeleteSmsMessageOperation;
	using Default = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.DeleteSmsMessageOperation"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Devices::Sms::DeleteSmsMessagesOperation>
{
	using Abi = ABI::Windows::Devices::Sms::DeleteSmsMessagesOperation;
	using Default = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.DeleteSmsMessagesOperation"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Devices::Sms::GetSmsMessageOperation>
{
	using Abi = ABI::Windows::Devices::Sms::GetSmsMessageOperation;
	using Default = Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.GetSmsMessageOperation"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::Sms::GetSmsMessagesOperation>
{
	using Abi = ABI::Windows::Devices::Sms::GetSmsMessagesOperation;
	using Default = Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.GetSmsMessagesOperation"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Sms::SmsDeviceMessageStore>
{
	using Abi = ABI::Windows::Devices::Sms::SmsDeviceMessageStore;
	using Default = Windows::Devices::Sms::ISmsDeviceMessageStore;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsDeviceMessageStore"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Sms::SendSmsMessageOperation>
{
	using Abi = ABI::Windows::Devices::Sms::SendSmsMessageOperation;
	using Default = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SendSmsMessageOperation"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Sms::SmsMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Devices::Sms::SmsMessageReceivedEventArgs;
	using Default = Windows::Devices::Sms::ISmsMessageReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsMessageReceivedEventArgs"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Sms::SmsDevice>
{
	using Abi = ABI::Windows::Devices::Sms::SmsDevice;
	using Default = Windows::Devices::Sms::ISmsDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsDevice"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Devices::Sms::GetSmsDeviceOperation>
{
	using Abi = ABI::Windows::Devices::Sms::GetSmsDeviceOperation;
	using Default = Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.GetSmsDeviceOperation"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Sms::SmsReceivedEventDetails>
{
	using Abi = ABI::Windows::Devices::Sms::SmsReceivedEventDetails;
	using Default = Windows::Devices::Sms::ISmsReceivedEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Sms.SmsReceivedEventDetails"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Usb::UsbControlRequestType>
{
	using Abi = ABI::Windows::Devices::Usb::UsbControlRequestType;
	using Default = Windows::Devices::Usb::IUsbControlRequestType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbControlRequestType"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Usb::UsbSetupPacket>
{
	using Abi = ABI::Windows::Devices::Usb::UsbSetupPacket;
	using Default = Windows::Devices::Usb::IUsbSetupPacket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbSetupPacket"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Usb::UsbDeviceClass>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDeviceClass;
	using Default = Windows::Devices::Usb::IUsbDeviceClass;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDeviceClass"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Usb::UsbDeviceClasses>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDeviceClasses;
	using Default = Windows::Devices::Usb::IUsbDeviceClasses;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDeviceClasses"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Usb::UsbDevice>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDevice;
	using Default = Windows::Devices::Usb::IUsbDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDevice"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterface>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterface;
	using Default = Windows::Devices::Usb::IUsbInterface;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterface"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Devices::Usb::UsbDeviceDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDeviceDescriptor;
	using Default = Windows::Devices::Usb::IUsbDeviceDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDeviceDescriptor"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Usb::UsbConfiguration>
{
	using Abi = ABI::Windows::Devices::Usb::UsbConfiguration;
	using Default = Windows::Devices::Usb::IUsbConfiguration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbConfiguration"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Devices::Usb::UsbDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbDescriptor;
	using Default = Windows::Devices::Usb::IUsbDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbDescriptor"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Devices::Usb::UsbConfigurationDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbConfigurationDescriptor;
	using Default = Windows::Devices::Usb::IUsbConfigurationDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbConfigurationDescriptor"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterfaceDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterfaceDescriptor;
	using Default = Windows::Devices::Usb::IUsbInterfaceDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterfaceDescriptor"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Devices::Usb::UsbBulkInEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbBulkInEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbBulkInEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbBulkInEndpointDescriptor"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptInEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptInEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbInterruptInEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptInEndpointDescriptor"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Devices::Usb::UsbBulkOutEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbBulkOutEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbBulkOutEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbBulkOutEndpointDescriptor"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbInterruptOutEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptOutEndpointDescriptor"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Devices::Usb::UsbEndpointDescriptor>
{
	using Abi = ABI::Windows::Devices::Usb::UsbEndpointDescriptor;
	using Default = Windows::Devices::Usb::IUsbEndpointDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbEndpointDescriptor"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptInEventArgs>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptInEventArgs;
	using Default = Windows::Devices::Usb::IUsbInterruptInEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptInEventArgs"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptInPipe>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptInPipe;
	using Default = Windows::Devices::Usb::IUsbInterruptInPipe;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptInPipe"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Devices::Usb::UsbBulkInPipe>
{
	using Abi = ABI::Windows::Devices::Usb::UsbBulkInPipe;
	using Default = Windows::Devices::Usb::IUsbBulkInPipe;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbBulkInPipe"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Devices::Usb::UsbBulkOutPipe>
{
	using Abi = ABI::Windows::Devices::Usb::UsbBulkOutPipe;
	using Default = Windows::Devices::Usb::IUsbBulkOutPipe;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbBulkOutPipe"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterruptOutPipe>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterruptOutPipe;
	using Default = Windows::Devices::Usb::IUsbInterruptOutPipe;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterruptOutPipe"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Devices::Usb::UsbInterfaceSetting>
{
	using Abi = ABI::Windows::Devices::Usb::UsbInterfaceSetting;
	using Default = Windows::Devices::Usb::IUsbInterfaceSetting;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.Usb.UsbInterfaceSetting"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Networking::EndpointPair>
{
	using Abi = ABI::Windows::Networking::EndpointPair;
	using Default = Windows::Networking::IEndpointPair;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.EndpointPair"; }
	static constexpr unsigned NameLength = 31;
};

template <> struct Traits<Windows::Networking::HostName>
{
	using Abi = ABI::Windows::Networking::HostName;
	using Default = Windows::Networking::IHostName;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.HostName"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Networking::Connectivity::IPInformation>
{
	using Abi = ABI::Windows::Networking::Connectivity::IPInformation;
	using Default = Windows::Networking::Connectivity::IIPInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.IPInformation"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Connectivity::DataPlanUsage>
{
	using Abi = ABI::Windows::Networking::Connectivity::DataPlanUsage;
	using Default = Windows::Networking::Connectivity::IDataPlanUsage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.DataPlanUsage"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectionCost>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectionCost;
	using Default = Windows::Networking::Connectivity::IConnectionCost;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectionCost"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Networking::Connectivity::DataPlanStatus>
{
	using Abi = ABI::Windows::Networking::Connectivity::DataPlanStatus;
	using Default = Windows::Networking::Connectivity::IDataPlanStatus;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.DataPlanStatus"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkAdapter>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkAdapter;
	using Default = Windows::Networking::Connectivity::INetworkAdapter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkAdapter"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkSecuritySettings>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkSecuritySettings;
	using Default = Windows::Networking::Connectivity::INetworkSecuritySettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkSecuritySettings"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Networking::Connectivity::WwanConnectionProfileDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::WwanConnectionProfileDetails;
	using Default = Windows::Networking::Connectivity::IWwanConnectionProfileDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.WwanConnectionProfileDetails"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Networking::Connectivity::WlanConnectionProfileDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::WlanConnectionProfileDetails;
	using Default = Windows::Networking::Connectivity::IWlanConnectionProfileDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.WlanConnectionProfileDetails"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkUsage>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkUsage;
	using Default = Windows::Networking::Connectivity::INetworkUsage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkUsage"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectivityInterval>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectivityInterval;
	using Default = Windows::Networking::Connectivity::IConnectivityInterval;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectivityInterval"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Networking::Connectivity::LanIdentifierData>
{
	using Abi = ABI::Windows::Networking::Connectivity::LanIdentifierData;
	using Default = Windows::Networking::Connectivity::ILanIdentifierData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.LanIdentifierData"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectionProfile>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectionProfile;
	using Default = Windows::Networking::Connectivity::IConnectionProfile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectionProfile"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Networking::Connectivity::LanIdentifier>
{
	using Abi = ABI::Windows::Networking::Connectivity::LanIdentifier;
	using Default = Windows::Networking::Connectivity::ILanIdentifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.LanIdentifier"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Connectivity::ProxyConfiguration>
{
	using Abi = ABI::Windows::Networking::Connectivity::ProxyConfiguration;
	using Default = Windows::Networking::Connectivity::IProxyConfiguration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ProxyConfiguration"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectionProfileFilter>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectionProfileFilter;
	using Default = Windows::Networking::Connectivity::IConnectionProfileFilter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectionProfileFilter"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkItem>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkItem;
	using Default = Windows::Networking::Connectivity::INetworkItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkItem"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Networking::Connectivity::RoutePolicy>
{
	using Abi = ABI::Windows::Networking::Connectivity::RoutePolicy;
	using Default = Windows::Networking::Connectivity::IRoutePolicy;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.RoutePolicy"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Networking::Connectivity::CellularApnContext>
{
	using Abi = ABI::Windows::Networking::Connectivity::CellularApnContext;
	using Default = Windows::Networking::Connectivity::ICellularApnContext;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.CellularApnContext"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectionSession>
{
	using Abi = ABI::Windows::Networking::Connectivity::ConnectionSession;
	using Default = Windows::Networking::Connectivity::IConnectionSession;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectionSession"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkInformation>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkInformation"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Connectivity::ConnectivityManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.ConnectivityManager"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Networking::Connectivity::NetworkStateChangeEventDetails>
{
	using Abi = ABI::Windows::Networking::Connectivity::NetworkStateChangeEventDetails;
	using Default = Windows::Networking::Connectivity::INetworkStateChangeEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Connectivity.NetworkStateChangeEventDetails"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Devices::WiFiDirect::WiFiDirectDevice>
{
	using Abi = ABI::Windows::Devices::WiFiDirect::WiFiDirectDevice;
	using Default = Windows::Devices::WiFiDirect::IWiFiDirectDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Devices.WiFiDirect.WiFiDirectDevice"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs;
	using Default = Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Foundation::Diagnostics::AsyncCausalityTracer>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.AsyncCausalityTracer"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Foundation::Diagnostics::RuntimeBrokerErrorSettings>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::RuntimeBrokerErrorSettings;
	using Default = Windows::Foundation::Diagnostics::IErrorReportingSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Foundation::Diagnostics::LoggingChannel>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::LoggingChannel;
	using Default = Windows::Foundation::Diagnostics::ILoggingChannel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingChannel"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Foundation::Diagnostics::LoggingActivity>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::LoggingActivity;
	using Default = Windows::Foundation::Diagnostics::ILoggingActivity;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingActivity"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Foundation::Diagnostics::LoggingSession>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::LoggingSession;
	using Default = Windows::Foundation::Diagnostics::ILoggingSession;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingSession"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs;
	using Default = Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Foundation::Diagnostics::FileLoggingSession>
{
	using Abi = ABI::Windows::Foundation::Diagnostics::FileLoggingSession;
	using Default = Windows::Foundation::Diagnostics::IFileLoggingSession;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Foundation.Diagnostics.FileLoggingSession"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Globalization::Collation::CharacterGrouping>
{
	using Abi = ABI::Windows::Globalization::Collation::CharacterGrouping;
	using Default = Windows::Globalization::Collation::ICharacterGrouping;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Collation.CharacterGrouping"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Globalization::Collation::CharacterGroupings>
{
	using Abi = ABI::Windows::Globalization::Collation::CharacterGroupings;
	using Default = Windows::Globalization::Collation::ICharacterGroupings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Collation.CharacterGroupings"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Globalization::DateTimeFormatting::DateTimeFormatter>
{
	using Abi = ABI::Windows::Globalization::DateTimeFormatting::DateTimeFormatter;
	using Default = Windows::Globalization::DateTimeFormatting::IDateTimeFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.DateTimeFormatting.DateTimeFormatter"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::Text::TextConstants>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Text.TextConstants"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::UI::Text::FontWeights>
{
	using Abi = ABI::Windows::UI::Text::FontWeights;
	using Default = Windows::UI::Text::IFontWeights;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Text.FontWeights"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Globalization::Fonts::LanguageFont>
{
	using Abi = ABI::Windows::Globalization::Fonts::LanguageFont;
	using Default = Windows::Globalization::Fonts::ILanguageFont;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Fonts.LanguageFont"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Globalization::Fonts::LanguageFontGroup>
{
	using Abi = ABI::Windows::Globalization::Fonts::LanguageFontGroup;
	using Default = Windows::Globalization::Fonts::ILanguageFontGroup;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Fonts.LanguageFontGroup"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Globalization::JapanesePhoneme>
{
	using Abi = ABI::Windows::Globalization::JapanesePhoneme;
	using Default = Windows::Globalization::IJapanesePhoneme;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.JapanesePhoneme"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Globalization::JapanesePhoneticAnalyzer>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.JapanesePhoneticAnalyzer"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Globalization::CalendarIdentifiers>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.CalendarIdentifiers"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Globalization::ClockIdentifiers>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.ClockIdentifiers"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Globalization::NumeralSystemIdentifiers>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumeralSystemIdentifiers"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Globalization::CurrencyIdentifiers>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.CurrencyIdentifiers"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Globalization::GeographicRegion>
{
	using Abi = ABI::Windows::Globalization::GeographicRegion;
	using Default = Windows::Globalization::IGeographicRegion;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.GeographicRegion"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Globalization::Language>
{
	using Abi = ABI::Windows::Globalization::Language;
	using Default = Windows::Globalization::ILanguage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Language"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Globalization::Calendar>
{
	using Abi = ABI::Windows::Globalization::Calendar;
	using Default = Windows::Globalization::ICalendar;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.Calendar"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Globalization::ApplicationLanguages>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.ApplicationLanguages"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder;
	using Default = Windows::Globalization::NumberFormatting::INumberRounder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.SignificantDigitsNumberRounder"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::IncrementNumberRounder>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::IncrementNumberRounder;
	using Default = Windows::Globalization::NumberFormatting::INumberRounder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.IncrementNumberRounder"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::DecimalFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::DecimalFormatter;
	using Default = Windows::Globalization::NumberFormatting::INumberFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.DecimalFormatter"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::PercentFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::PercentFormatter;
	using Default = Windows::Globalization::NumberFormatting::INumberFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.PercentFormatter"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::PermilleFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::PermilleFormatter;
	using Default = Windows::Globalization::NumberFormatting::INumberFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.PermilleFormatter"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::CurrencyFormatter>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::CurrencyFormatter;
	using Default = Windows::Globalization::NumberFormatting::ICurrencyFormatter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.CurrencyFormatter"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Globalization::NumberFormatting::NumeralSystemTranslator>
{
	using Abi = ABI::Windows::Globalization::NumberFormatting::NumeralSystemTranslator;
	using Default = Windows::Globalization::NumberFormatting::INumeralSystemTranslator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Globalization.NumberFormatting.NumeralSystemTranslator"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Graphics::Display::DisplayInformation>
{
	using Abi = ABI::Windows::Graphics::Display::DisplayInformation;
	using Default = Windows::Graphics::Display::IDisplayInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Display.DisplayInformation"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapTransform>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapTransform;
	using Default = Windows::Graphics::Imaging::IBitmapTransform;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapTransform"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapTypedValue>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapTypedValue;
	using Default = Windows::Graphics::Imaging::IBitmapTypedValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapTypedValue"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapPropertySet>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapPropertySet;
	using Default = Windows::Foundation::Collections::IMap<String, Windows::Graphics::Imaging::BitmapTypedValue>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapPropertySet"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapPropertiesView>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapPropertiesView;
	using Default = Windows::Graphics::Imaging::IBitmapPropertiesView;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapPropertiesView"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapProperties>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapProperties;
	using Default = Windows::Graphics::Imaging::IBitmapProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapProperties"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Graphics::Imaging::PixelDataProvider>
{
	using Abi = ABI::Windows::Graphics::Imaging::PixelDataProvider;
	using Default = Windows::Graphics::Imaging::IPixelDataProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.PixelDataProvider"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Graphics::Imaging::ImageStream>
{
	using Abi = ABI::Windows::Graphics::Imaging::ImageStream;
	using Default = Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.ImageStream"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapFrame>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapFrame;
	using Default = Windows::Graphics::Imaging::IBitmapFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapFrame"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapCodecInformation>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapCodecInformation;
	using Default = Windows::Graphics::Imaging::IBitmapCodecInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapCodecInformation"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapDecoder>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapDecoder;
	using Default = Windows::Graphics::Imaging::IBitmapDecoder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapDecoder"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Graphics::Imaging::BitmapEncoder>
{
	using Abi = ABI::Windows::Graphics::Imaging::BitmapEncoder;
	using Default = Windows::Graphics::Imaging::IBitmapEncoder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Imaging.BitmapEncoder"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskOptions>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskOptions;
	using Default = Windows::Graphics::Printing::IPrintTaskOptionsCore;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskOptions"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Graphics::Printing::StandardPrintTaskOptions>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.StandardPrintTaskOptions"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskProgressingEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskProgressingEventArgs;
	using Default = Windows::Graphics::Printing::IPrintTaskProgressingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskProgressingEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskCompletedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskCompletedEventArgs;
	using Default = Windows::Graphics::Printing::IPrintTaskCompletedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskCompletedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTask>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTask;
	using Default = Windows::Graphics::Printing::IPrintTask;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTask"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral;
	using Default = Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskSourceRequestedDeferral"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskSourceRequestedArgs;
	using Default = Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskSourceRequestedArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskRequestedDeferral>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskRequestedDeferral;
	using Default = Windows::Graphics::Printing::IPrintTaskRequestedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskRequestedDeferral"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskRequest>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskRequest;
	using Default = Windows::Graphics::Printing::IPrintTaskRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskRequest"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Graphics::Printing::PrintTaskRequestedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintTaskRequestedEventArgs;
	using Default = Windows::Graphics::Printing::IPrintTaskRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintTaskRequestedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Graphics::Printing::PrintManager>
{
	using Abi = ABI::Windows::Graphics::Printing::PrintManager;
	using Default = Windows::Graphics::Printing::IPrintManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.PrintManager"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCopiesOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCopiesOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCopiesOptionDetails"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintMediaSizeOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintMediaSizeOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintMediaSizeOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintMediaTypeOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintMediaTypeOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintMediaTypeOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintOrientationOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintOrientationOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintOrientationOptionDetails"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintQualityOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintQualityOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintQualityOptionDetails"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintColorModeOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintColorModeOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintColorModeOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintDuplexOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintDuplexOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintDuplexOptionDetails"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCollationOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCollationOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCollationOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintStapleOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintStapleOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintStapleOptionDetails"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintHolePunchOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintHolePunchOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintHolePunchOptionDetails"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintBindingOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintBindingOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintBindingOptionDetails"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCustomTextOptionDetails"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCustomItemDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCustomItemDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintCustomItemDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCustomItemDetails"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintCustomItemListOptionDetails"; }
	static constexpr unsigned NameLength = 72;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintTaskOptionChangedEventArgs"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails>
{
	using Abi = ABI::Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails;
	using Default = Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Graphics.Printing.OptionDetails.PrintTaskOptionDetails"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Management::Core::ApplicationDataManager>
{
	using Abi = ABI::Windows::Management::Core::ApplicationDataManager;
	using Default = Windows::Management::Core::IApplicationDataManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Core.ApplicationDataManager"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Management::Deployment::DeploymentResult>
{
	using Abi = ABI::Windows::Management::Deployment::DeploymentResult;
	using Default = Windows::Management::Deployment::IDeploymentResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Deployment.DeploymentResult"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Management::Deployment::PackageUserInformation>
{
	using Abi = ABI::Windows::Management::Deployment::PackageUserInformation;
	using Default = Windows::Management::Deployment::IPackageUserInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Deployment.PackageUserInformation"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Management::Deployment::PackageManager>
{
	using Abi = ABI::Windows::Management::Deployment::PackageManager;
	using Default = Windows::Management::Deployment::IPackageManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Deployment.PackageManager"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Management::Workplace::WorkplaceSettings>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Management.Workplace.WorkplaceSettings"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::MediaMarkerTypes>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaMarkerTypes"; }
	static constexpr unsigned NameLength = 30;
};

template <> struct Traits<Windows::Media::MusicDisplayProperties>
{
	using Abi = ABI::Windows::Media::MusicDisplayProperties;
	using Default = Windows::Media::IMusicDisplayProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MusicDisplayProperties"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::VideoDisplayProperties>
{
	using Abi = ABI::Windows::Media::VideoDisplayProperties;
	using Default = Windows::Media::IVideoDisplayProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.VideoDisplayProperties"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::ImageDisplayProperties>
{
	using Abi = ABI::Windows::Media::ImageDisplayProperties;
	using Default = Windows::Media::IImageDisplayProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.ImageDisplayProperties"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::SystemMediaTransportControlsDisplayUpdater>
{
	using Abi = ABI::Windows::Media::SystemMediaTransportControlsDisplayUpdater;
	using Default = Windows::Media::ISystemMediaTransportControlsDisplayUpdater;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SystemMediaTransportControlsDisplayUpdater"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>
{
	using Abi = ABI::Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs;
	using Default = Windows::Media::ISystemMediaTransportControlsButtonPressedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SystemMediaTransportControlsButtonPressedEventArgs"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>
{
	using Abi = ABI::Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs;
	using Default = Windows::Media::ISystemMediaTransportControlsPropertyChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SystemMediaTransportControlsPropertyChangedEventArgs"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Media::SystemMediaTransportControls>
{
	using Abi = ABI::Windows::Media::SystemMediaTransportControls;
	using Default = Windows::Media::ISystemMediaTransportControls;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SystemMediaTransportControls"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Media::MediaExtensionManager>
{
	using Abi = ABI::Windows::Media::MediaExtensionManager;
	using Default = Windows::Media::IMediaExtensionManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaExtensionManager"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::VideoEffects>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.VideoEffects"; }
	static constexpr unsigned NameLength = 26;
};

template <> struct Traits<Windows::Media::MediaProperties::MediaRatio>
{
	using Abi = ABI::Windows::Media::MediaProperties::MediaRatio;
	using Default = Windows::Media::MediaProperties::IMediaRatio;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.MediaRatio"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::MediaProperties::MediaPropertySet>
{
	using Abi = ABI::Windows::Media::MediaProperties::MediaPropertySet;
	using Default = Windows::Foundation::Collections::IMap<GUID, IInspectable>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.MediaPropertySet"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::MediaProperties::AudioEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::AudioEncodingProperties;
	using Default = Windows::Media::MediaProperties::IAudioEncodingProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.AudioEncodingProperties"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::MediaProperties::MediaEncodingSubtypes>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.MediaEncodingSubtypes"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::MediaProperties::H264ProfileIds>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.H264ProfileIds"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Media::MediaProperties::Mpeg2ProfileIds>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.Mpeg2ProfileIds"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Media::MediaProperties::VideoEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::VideoEncodingProperties;
	using Default = Windows::Media::MediaProperties::IVideoEncodingProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.VideoEncodingProperties"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::MediaProperties::ImageEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::ImageEncodingProperties;
	using Default = Windows::Media::MediaProperties::IImageEncodingProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.ImageEncodingProperties"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::MediaProperties::ContainerEncodingProperties>
{
	using Abi = ABI::Windows::Media::MediaProperties::ContainerEncodingProperties;
	using Default = Windows::Media::MediaProperties::IContainerEncodingProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.ContainerEncodingProperties"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::MediaProperties::MediaEncodingProfile>
{
	using Abi = ABI::Windows::Media::MediaProperties::MediaEncodingProfile;
	using Default = Windows::Media::MediaProperties::IMediaEncodingProfile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.MediaProperties.MediaEncodingProfile"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Media::Devices::DialRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::DialRequestedEventArgs;
	using Default = Windows::Media::Devices::IDialRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.DialRequestedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Media::Devices::RedialRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::RedialRequestedEventArgs;
	using Default = Windows::Media::Devices::IRedialRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.RedialRequestedEventArgs"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::Devices::KeypadPressedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::KeypadPressedEventArgs;
	using Default = Windows::Media::Devices::IKeypadPressedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.KeypadPressedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Media::Devices::CallControl>
{
	using Abi = ABI::Windows::Media::Devices::CallControl;
	using Default = Windows::Media::Devices::ICallControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.CallControl"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs;
	using Default = Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.DefaultAudioCaptureDeviceChangedEventArgs"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs>
{
	using Abi = ABI::Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs;
	using Default = Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.DefaultAudioRenderDeviceChangedEventArgs"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Media::Devices::MediaDevice>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.MediaDevice"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Media::Devices::AudioDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::AudioDeviceController;
	using Default = Windows::Media::Devices::IAudioDeviceController;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.AudioDeviceController"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Media::Devices::VideoDeviceController>
{
	using Abi = ABI::Windows::Media::Devices::VideoDeviceController;
	using Default = Windows::Media::Devices::IVideoDeviceController;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.VideoDeviceController"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Media::Devices::SceneModeControl>
{
	using Abi = ABI::Windows::Media::Devices::SceneModeControl;
	using Default = Windows::Media::Devices::ISceneModeControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.SceneModeControl"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Media::Devices::TorchControl>
{
	using Abi = ABI::Windows::Media::Devices::TorchControl;
	using Default = Windows::Media::Devices::ITorchControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.TorchControl"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Devices::FlashControl>
{
	using Abi = ABI::Windows::Media::Devices::FlashControl;
	using Default = Windows::Media::Devices::IFlashControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.FlashControl"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Devices::ExposureCompensationControl>
{
	using Abi = ABI::Windows::Media::Devices::ExposureCompensationControl;
	using Default = Windows::Media::Devices::IExposureCompensationControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.ExposureCompensationControl"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Devices::IsoSpeedControl>
{
	using Abi = ABI::Windows::Media::Devices::IsoSpeedControl;
	using Default = Windows::Media::Devices::IIsoSpeedControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.IsoSpeedControl"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Devices::WhiteBalanceControl>
{
	using Abi = ABI::Windows::Media::Devices::WhiteBalanceControl;
	using Default = Windows::Media::Devices::IWhiteBalanceControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.WhiteBalanceControl"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::Devices::ExposureControl>
{
	using Abi = ABI::Windows::Media::Devices::ExposureControl;
	using Default = Windows::Media::Devices::IExposureControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.ExposureControl"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Devices::FocusControl>
{
	using Abi = ABI::Windows::Media::Devices::FocusControl;
	using Default = Windows::Media::Devices::IFocusControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.FocusControl"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Devices::RegionOfInterest>
{
	using Abi = ABI::Windows::Media::Devices::RegionOfInterest;
	using Default = Windows::Media::Devices::IRegionOfInterest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.RegionOfInterest"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Media::Devices::RegionsOfInterestControl>
{
	using Abi = ABI::Windows::Media::Devices::RegionsOfInterestControl;
	using Default = Windows::Media::Devices::IRegionsOfInterestControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.RegionsOfInterestControl"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::Devices::MediaDeviceControl>
{
	using Abi = ABI::Windows::Media::Devices::MediaDeviceControl;
	using Default = Windows::Media::Devices::IMediaDeviceControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.MediaDeviceControl"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Devices::LowLagPhotoSequenceControl>
{
	using Abi = ABI::Windows::Media::Devices::LowLagPhotoSequenceControl;
	using Default = Windows::Media::Devices::ILowLagPhotoSequenceControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.LowLagPhotoSequenceControl"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Media::Devices::LowLagPhotoControl>
{
	using Abi = ABI::Windows::Media::Devices::LowLagPhotoControl;
	using Default = Windows::Media::Devices::ILowLagPhotoControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.LowLagPhotoControl"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Devices::MediaDeviceControlCapabilities>
{
	using Abi = ABI::Windows::Media::Devices::MediaDeviceControlCapabilities;
	using Default = Windows::Media::Devices::IMediaDeviceControlCapabilities;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Devices.MediaDeviceControlCapabilities"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings;
	using Default = Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CameraCaptureUIPhotoCaptureSettings"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings;
	using Default = Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CameraCaptureUIVideoCaptureSettings"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::Capture::CameraCaptureUI>
{
	using Abi = ABI::Windows::Media::Capture::CameraCaptureUI;
	using Default = Windows::Media::Capture::ICameraCaptureUI;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CameraCaptureUI"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Capture::CameraOptionsUI>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CameraOptionsUI"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Capture::MediaCaptureFailedEventArgs>
{
	using Abi = ABI::Windows::Media::Capture::MediaCaptureFailedEventArgs;
	using Default = Windows::Media::Capture::IMediaCaptureFailedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.MediaCaptureFailedEventArgs"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Capture::MediaCapture>
{
	using Abi = ABI::Windows::Media::Capture::MediaCapture;
	using Default = Windows::Media::Capture::IMediaCapture;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.MediaCapture"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Capture::MediaCaptureInitializationSettings>
{
	using Abi = ABI::Windows::Media::Capture::MediaCaptureInitializationSettings;
	using Default = Windows::Media::Capture::IMediaCaptureInitializationSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.MediaCaptureInitializationSettings"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::Capture::MediaCaptureSettings>
{
	using Abi = ABI::Windows::Media::Capture::MediaCaptureSettings;
	using Default = Windows::Media::Capture::IMediaCaptureSettings;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.MediaCaptureSettings"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Media::Capture::LowLagMediaRecording>
{
	using Abi = ABI::Windows::Media::Capture::LowLagMediaRecording;
	using Default = Windows::Media::Capture::ILowLagMediaRecording;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.LowLagMediaRecording"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Media::Capture::LowLagPhotoCapture>
{
	using Abi = ABI::Windows::Media::Capture::LowLagPhotoCapture;
	using Default = Windows::Media::Capture::ILowLagPhotoCapture;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.LowLagPhotoCapture"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Capture::LowLagPhotoSequenceCapture>
{
	using Abi = ABI::Windows::Media::Capture::LowLagPhotoSequenceCapture;
	using Default = Windows::Media::Capture::ILowLagPhotoSequenceCapture;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.LowLagPhotoSequenceCapture"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Media::Capture::CapturedPhoto>
{
	using Abi = ABI::Windows::Media::Capture::CapturedPhoto;
	using Default = Windows::Media::Capture::ICapturedPhoto;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CapturedPhoto"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::Capture::PhotoCapturedEventArgs>
{
	using Abi = ABI::Windows::Media::Capture::PhotoCapturedEventArgs;
	using Default = Windows::Media::Capture::IPhotoCapturedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.PhotoCapturedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Media::Capture::CapturedFrame>
{
	using Abi = ABI::Windows::Media::Capture::CapturedFrame;
	using Default = Windows::Media::Capture::ICapturedFrame;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Capture.CapturedFrame"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::ContentRestrictions::RatedContentDescription>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::RatedContentDescription;
	using Default = Windows::Media::ContentRestrictions::IRatedContentDescription;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.ContentRestrictions.RatedContentDescription"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy;
	using Default = Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.ContentRestrictions.ContentRestrictionsBrowsePolicy"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Media::ContentRestrictions::RatedContentRestrictions>
{
	using Abi = ABI::Windows::Media::ContentRestrictions::RatedContentRestrictions;
	using Default = Windows::Media::ContentRestrictions::IRatedContentRestrictions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.ContentRestrictions.RatedContentRestrictions"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Media::Protection::MediaProtectionManager>
{
	using Abi = ABI::Windows::Media::Protection::MediaProtectionManager;
	using Default = Windows::Media::Protection::IMediaProtectionManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.MediaProtectionManager"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Media::Protection::ServiceRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Protection::ServiceRequestedEventArgs;
	using Default = Windows::Media::Protection::IServiceRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.ServiceRequestedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Media::Protection::ComponentLoadFailedEventArgs>
{
	using Abi = ABI::Windows::Media::Protection::ComponentLoadFailedEventArgs;
	using Default = Windows::Media::Protection::IComponentLoadFailedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.ComponentLoadFailedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::Protection::MediaProtectionServiceCompletion>
{
	using Abi = ABI::Windows::Media::Protection::MediaProtectionServiceCompletion;
	using Default = Windows::Media::Protection::IMediaProtectionServiceCompletion;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.MediaProtectionServiceCompletion"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::Protection::RevocationAndRenewalInformation>
{
	using Abi = ABI::Windows::Media::Protection::RevocationAndRenewalInformation;
	using Default = Windows::Media::Protection::IRevocationAndRenewalInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.RevocationAndRenewalInformation"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::Protection::RevocationAndRenewalItem>
{
	using Abi = ABI::Windows::Media::Protection::RevocationAndRenewalItem;
	using Default = Windows::Media::Protection::IRevocationAndRenewalItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.RevocationAndRenewalItem"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Protection::ComponentRenewal>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Protection.ComponentRenewal"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::Core::AudioStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::AudioStreamDescriptor;
	using Default = Windows::Media::Core::IAudioStreamDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.AudioStreamDescriptor"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Core::VideoStreamDescriptor>
{
	using Abi = ABI::Windows::Media::Core::VideoStreamDescriptor;
	using Default = Windows::Media::Core::IVideoStreamDescriptor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.VideoStreamDescriptor"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSource>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSource;
	using Default = Windows::Media::Core::IMediaStreamSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSource"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceClosedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceClosedEventArgs;
	using Default = Windows::Media::Core::IMediaStreamSourceClosedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceClosedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceStartingEventArgs>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceStartingEventArgs;
	using Default = Windows::Media::Core::IMediaStreamSourceStartingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceStartingEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs;
	using Default = Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSampleRequestedEventArgs"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs;
	using Default = Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSamplePropertySet>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSamplePropertySet;
	using Default = Windows::Foundation::Collections::IMap<GUID, IInspectable>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSamplePropertySet"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSample>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSample;
	using Default = Windows::Media::Core::IMediaStreamSample;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSample"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSampleProtectionProperties>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSampleProtectionProperties;
	using Default = Windows::Media::Core::IMediaStreamSampleProtectionProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSampleProtectionProperties"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceClosedRequest>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceClosedRequest;
	using Default = Windows::Media::Core::IMediaStreamSourceClosedRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceClosedRequest"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceStartingRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceStartingRequestDeferral;
	using Default = Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceStartingRequestDeferral"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceStartingRequest>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceStartingRequest;
	using Default = Windows::Media::Core::IMediaStreamSourceStartingRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceStartingRequest"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSampleRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSampleRequestDeferral;
	using Default = Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSampleRequestDeferral"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSampleRequest>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSampleRequest;
	using Default = Windows::Media::Core::IMediaStreamSourceSampleRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSampleRequest"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral;
	using Default = Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequestDeferral"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest>
{
	using Abi = ABI::Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest;
	using Default = Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Core.MediaStreamSourceSwitchStreamsRequest"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::Effects::AudioEffect>
{
	using Abi = ABI::Windows::Media::Effects::AudioEffect;
	using Default = Windows::Media::Effects::IAudioEffect;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Effects.AudioEffect"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Media::Effects::AudioRenderEffectsManager>
{
	using Abi = ABI::Windows::Media::Effects::AudioRenderEffectsManager;
	using Default = Windows::Media::Effects::IAudioRenderEffectsManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Effects.AudioRenderEffectsManager"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Media::Effects::AudioCaptureEffectsManager>
{
	using Abi = ABI::Windows::Media::Effects::AudioCaptureEffectsManager;
	using Default = Windows::Media::Effects::IAudioCaptureEffectsManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Effects.AudioCaptureEffectsManager"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Media::Effects::AudioEffectsManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Effects.AudioEffectsManager"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::Playlists::Playlist>
{
	using Abi = ABI::Windows::Media::Playlists::Playlist;
	using Default = Windows::Media::Playlists::IPlaylist;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Playlists.Playlist"; }
	static constexpr unsigned NameLength = 32;
};

template <> struct Traits<Windows::Media::PlayTo::SourceChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::SourceChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::ISourceChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.SourceChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlaybackRateChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.CurrentTimeChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Media::PlayTo::MuteChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::MuteChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::IMuteChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.MuteChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Media::PlayTo::VolumeChangeRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::VolumeChangeRequestedEventArgs;
	using Default = Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.VolumeChangeRequestedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToReceiver>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToReceiver;
	using Default = Windows::Media::PlayTo::IPlayToReceiver;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToReceiver"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToConnection>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToConnection;
	using Default = Windows::Media::PlayTo::IPlayToConnection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToConnection"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSource>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSource;
	using Default = Windows::Media::PlayTo::IPlayToSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSource"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToConnectionStateChangedEventArgs"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToConnectionTransferredEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToConnectionErrorEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToConnectionErrorEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToConnectionErrorEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSourceSelectedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSourceSelectedEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSourceSelectedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSourceDeferral>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSourceDeferral;
	using Default = Windows::Media::PlayTo::IPlayToSourceDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSourceDeferral"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSourceRequest>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSourceRequest;
	using Default = Windows::Media::PlayTo::IPlayToSourceRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSourceRequest"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToSourceRequestedEventArgs>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToSourceRequestedEventArgs;
	using Default = Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToSourceRequestedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::PlayTo::PlayToManager>
{
	using Abi = ABI::Windows::Media::PlayTo::PlayToManager;
	using Default = Windows::Media::PlayTo::IPlayToManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.PlayTo.PlayToManager"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::VoiceInformation>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::VoiceInformation;
	using Default = Windows::Media::SpeechSynthesis::IVoiceInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SpeechSynthesis.VoiceInformation"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::SpeechSynthesisStream>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::SpeechSynthesisStream;
	using Default = Windows::Media::SpeechSynthesis::ISpeechSynthesisStream;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SpeechSynthesis.SpeechSynthesisStream"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Media::SpeechSynthesis::SpeechSynthesizer>
{
	using Abi = ABI::Windows::Media::SpeechSynthesis::SpeechSynthesizer;
	using Default = Windows::Media::SpeechSynthesis::ISpeechSynthesizer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.SpeechSynthesis.SpeechSynthesizer"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Media::Streaming::BasicDevice>
{
	using Abi = ABI::Windows::Media::Streaming::BasicDevice;
	using Default = Windows::Media::Streaming::IBasicDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.BasicDevice"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Media::Streaming::ActiveBasicDevice>
{
	using Abi = ABI::Windows::Media::Streaming::ActiveBasicDevice;
	using Default = Windows::Media::Streaming::IActiveBasicDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.ActiveBasicDevice"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Media::Streaming::DevicePair>
{
	using Abi = ABI::Windows::Media::Streaming::DevicePair;
	using Default = Windows::Media::Streaming::IDevicePair;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.DevicePair"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Media::Streaming::DeviceController>
{
	using Abi = ABI::Windows::Media::Streaming::DeviceController;
	using Default = Windows::Media::Streaming::IDeviceController;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.DeviceController"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Media::Streaming::MediaRenderer>
{
	using Abi = ABI::Windows::Media::Streaming::MediaRenderer;
	using Default = Windows::Media::Streaming::IMediaRenderer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.MediaRenderer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Media::Streaming::CreateMediaRendererOperation>
{
	using Abi = ABI::Windows::Media::Streaming::CreateMediaRendererOperation;
	using Default = Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::MediaRenderer>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.CreateMediaRendererOperation"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Media::Streaming::StreamSelector>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Streaming.StreamSelector"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Media::Transcoding::PrepareTranscodeResult>
{
	using Abi = ABI::Windows::Media::Transcoding::PrepareTranscodeResult;
	using Default = Windows::Media::Transcoding::IPrepareTranscodeResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Transcoding.PrepareTranscodeResult"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Media::Transcoding::MediaTranscoder>
{
	using Abi = ABI::Windows::Media::Transcoding::MediaTranscoder;
	using Default = Windows::Media::Transcoding::IMediaTranscoder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Media.Transcoding.MediaTranscoder"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Security::Credentials::PasswordCredential>
{
	using Abi = ABI::Windows::Security::Credentials::PasswordCredential;
	using Default = Windows::Security::Credentials::IPasswordCredential;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.PasswordCredential"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Security::Credentials::PasswordVault>
{
	using Abi = ABI::Windows::Security::Credentials::PasswordVault;
	using Default = Windows::Security::Credentials::IPasswordVault;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.PasswordVault"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Security::Credentials::PasswordCredentialPropertyStore>
{
	using Abi = ABI::Windows::Security::Credentials::PasswordCredentialPropertyStore;
	using Default = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.PasswordCredentialPropertyStore"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Security::Credentials::WebAccountProvider>
{
	using Abi = ABI::Windows::Security::Credentials::WebAccountProvider;
	using Default = Windows::Security::Credentials::IWebAccountProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.WebAccountProvider"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Security::Credentials::WebAccount>
{
	using Abi = ABI::Windows::Security::Credentials::WebAccount;
	using Default = Windows::Security::Credentials::IWebAccount;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.WebAccount"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::Notifications::TileUpdater>
{
	using Abi = ABI::Windows::UI::Notifications::TileUpdater;
	using Default = Windows::UI::Notifications::ITileUpdater;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.TileUpdater"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::Notifications::TileNotification>
{
	using Abi = ABI::Windows::UI::Notifications::TileNotification;
	using Default = Windows::UI::Notifications::ITileNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.TileNotification"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::UI::Notifications::ScheduledTileNotification>
{
	using Abi = ABI::Windows::UI::Notifications::ScheduledTileNotification;
	using Default = Windows::UI::Notifications::IScheduledTileNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ScheduledTileNotification"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Notifications::BadgeUpdater>
{
	using Abi = ABI::Windows::UI::Notifications::BadgeUpdater;
	using Default = Windows::UI::Notifications::IBadgeUpdater;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.BadgeUpdater"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Notifications::BadgeNotification>
{
	using Abi = ABI::Windows::UI::Notifications::BadgeNotification;
	using Default = Windows::UI::Notifications::IBadgeNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.BadgeNotification"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Notifications::ToastNotifier>
{
	using Abi = ABI::Windows::UI::Notifications::ToastNotifier;
	using Default = Windows::UI::Notifications::IToastNotifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastNotifier"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::UI::Notifications::ToastNotification>
{
	using Abi = ABI::Windows::UI::Notifications::ToastNotification;
	using Default = Windows::UI::Notifications::IToastNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastNotification"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Notifications::ScheduledToastNotification>
{
	using Abi = ABI::Windows::UI::Notifications::ScheduledToastNotification;
	using Default = Windows::UI::Notifications::IScheduledToastNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ScheduledToastNotification"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Notifications::ToastDismissedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::ToastDismissedEventArgs;
	using Default = Windows::UI::Notifications::IToastDismissedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastDismissedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::Notifications::ToastFailedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::ToastFailedEventArgs;
	using Default = Windows::UI::Notifications::IToastFailedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastFailedEventArgs"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::UI::Notifications::TileUpdateManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.TileUpdateManager"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Notifications::BadgeUpdateManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.BadgeUpdateManager"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::Notifications::ToastNotificationManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastNotificationManager"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Notifications::ToastActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::Notifications::ToastActivatedEventArgs;
	using Default = Windows::UI::Notifications::IToastActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Notifications.ToastActivatedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Web::WebError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.WebError"; }
	static constexpr unsigned NameLength = 20;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::DownloadOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::DownloadOperation;
	using Default = Windows::Networking::BackgroundTransfer::IDownloadOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.DownloadOperation"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult;
	using Default = Windows::Networking::BackgroundTransfer::IUnconstrainedTransferRequestResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.UnconstrainedTransferRequestResult"; }
	static constexpr unsigned NameLength = 72;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::UploadOperation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::UploadOperation;
	using Default = Windows::Networking::BackgroundTransfer::IUploadOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.UploadOperation"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundTransferGroup>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::BackgroundTransferGroup;
	using Default = Windows::Networking::BackgroundTransfer::IBackgroundTransferGroup;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundTransferGroup"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart;
	using Default = Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundTransferContentPart"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::ResponseInformation>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::ResponseInformation;
	using Default = Windows::Networking::BackgroundTransfer::IResponseInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.ResponseInformation"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundDownloader>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::BackgroundDownloader;
	using Default = Windows::Networking::BackgroundTransfer::IBackgroundDownloader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundDownloader"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundUploader>
{
	using Abi = ABI::Windows::Networking::BackgroundTransfer::BackgroundUploader;
	using Default = Windows::Networking::BackgroundTransfer::IBackgroundUploader;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundUploader"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::BackgroundTransferError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.BackgroundTransferError"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Networking::BackgroundTransfer::ContentPrefetcher>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.BackgroundTransfer.ContentPrefetcher"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandAccount>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandAccount;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandAccount;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandAccount"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandNetwork>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandNetwork;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandNetwork;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandNetwork"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandDeviceInformation"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Networking::NetworkOperators::NetworkOperatorNotificationEventDetails>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::NetworkOperatorNotificationEventDetails;
	using Default = Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.NetworkOperatorNotificationEventDetails"; }
	static constexpr unsigned NameLength = 75;
};

template <> struct Traits<Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration;
	using Default = Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.NetworkOperatorTetheringAccessPointConfiguration"; }
	static constexpr unsigned NameLength = 84;
};

template <> struct Traits<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult;
	using Default = Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.NetworkOperatorTetheringOperationResult"; }
	static constexpr unsigned NameLength = 75;
};

template <> struct Traits<Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager;
	using Default = Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.NetworkOperatorTetheringManager"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandAccountEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandAccountUpdatedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher;
	using Default = Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.MobileBroadbandAccountWatcher"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Networking::NetworkOperators::HotspotAuthenticationEventDetails>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::HotspotAuthenticationEventDetails;
	using Default = Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.HotspotAuthenticationEventDetails"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Networking::NetworkOperators::HotspotAuthenticationContext>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::HotspotAuthenticationContext;
	using Default = Windows::Networking::NetworkOperators::IHotspotAuthenticationContext;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.HotspotAuthenticationContext"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult;
	using Default = Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.HotspotCredentialsAuthenticationResult"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults;
	using Default = Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.ProvisionFromXmlDocumentResults"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::NetworkOperators::ProvisionedProfile>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::ProvisionedProfile;
	using Default = Windows::Networking::NetworkOperators::IProvisionedProfile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.ProvisionedProfile"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Networking::NetworkOperators::ProvisioningAgent>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::ProvisioningAgent;
	using Default = Windows::Networking::NetworkOperators::IProvisioningAgent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.ProvisioningAgent"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Networking::NetworkOperators::UssdMessage>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::UssdMessage;
	using Default = Windows::Networking::NetworkOperators::IUssdMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.UssdMessage"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Networking::NetworkOperators::UssdReply>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::UssdReply;
	using Default = Windows::Networking::NetworkOperators::IUssdReply;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.UssdReply"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::NetworkOperators::UssdSession>
{
	using Abi = ABI::Windows::Networking::NetworkOperators::UssdSession;
	using Default = Windows::Networking::NetworkOperators::IUssdSession;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.NetworkOperators.UssdSession"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::Certificate>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::Certificate;
	using Default = Windows::Security::Cryptography::Certificates::ICertificate;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.Certificate"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateRequestProperties>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CertificateRequestProperties;
	using Default = Windows::Security::Cryptography::Certificates::ICertificateRequestProperties;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateRequestProperties"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager;
	using Default = Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager"; }
	static constexpr unsigned NameLength = 75;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateEnrollmentManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::KeyAttestationHelper>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.KeyAttestationHelper"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateQuery>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CertificateQuery;
	using Default = Windows::Security::Cryptography::Certificates::ICertificateQuery;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateQuery"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateStore>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CertificateStore;
	using Default = Windows::Security::Cryptography::Certificates::ICertificateStore;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateStore"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateStores>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateStores"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::KeyAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.KeyAlgorithmNames"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::KeyStorageProviderNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.KeyStorageProviderNames"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ChainBuildingParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ChainBuildingParameters;
	using Default = Windows::Security::Cryptography::Certificates::IChainBuildingParameters;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.ChainBuildingParameters"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::ChainValidationParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::ChainValidationParameters;
	using Default = Windows::Security::Cryptography::Certificates::IChainValidationParameters;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.ChainValidationParameters"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CertificateChain>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CertificateChain;
	using Default = Windows::Security::Cryptography::Certificates::ICertificateChain;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateChain"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CmsTimestampInfo>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CmsTimestampInfo;
	using Default = Windows::Security::Cryptography::Certificates::ICmsTimestampInfo;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsTimestampInfo"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CmsSignerInfo>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CmsSignerInfo;
	using Default = Windows::Security::Cryptography::Certificates::ICmsSignerInfo;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsSignerInfo"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CmsAttachedSignature>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CmsAttachedSignature;
	using Default = Windows::Security::Cryptography::Certificates::ICmsAttachedSignature;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsAttachedSignature"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Security::Cryptography::Certificates::CmsDetachedSignature>
{
	using Abi = ABI::Windows::Security::Cryptography::Certificates::CmsDetachedSignature;
	using Default = Windows::Security::Cryptography::Certificates::ICmsDetachedSignature;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsDetachedSignature"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Networking::Sockets::ControlChannelTrigger>
{
	using Abi = ABI::Windows::Networking::Sockets::ControlChannelTrigger;
	using Default = Windows::Networking::Sockets::IControlChannelTrigger;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.ControlChannelTrigger"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Networking::Sockets::DatagramSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::DatagramSocketControl;
	using Default = Windows::Networking::Sockets::IDatagramSocketControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.DatagramSocketControl"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Networking::Sockets::DatagramSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::DatagramSocketInformation;
	using Default = Windows::Networking::Sockets::IDatagramSocketInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.DatagramSocketInformation"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Networking::Sockets::DatagramSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::DatagramSocket;
	using Default = Windows::Networking::Sockets::IDatagramSocket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.DatagramSocket"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs;
	using Default = Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketControl;
	using Default = Windows::Networking::Sockets::IStreamSocketControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketControl"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketInformation;
	using Default = Windows::Networking::Sockets::IStreamSocketInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketInformation"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocket;
	using Default = Windows::Networking::Sockets::IStreamSocket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocket"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketListenerControl>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketListenerControl;
	using Default = Windows::Networking::Sockets::IStreamSocketListenerControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListenerControl"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketListenerInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketListenerInformation;
	using Default = Windows::Networking::Sockets::IStreamSocketListenerInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListenerInformation"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketListener>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketListener;
	using Default = Windows::Networking::Sockets::IStreamSocketListener;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListener"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs;
	using Default = Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Networking::Sockets::WebSocketClosedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::WebSocketClosedEventArgs;
	using Default = Windows::Networking::Sockets::IWebSocketClosedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.WebSocketClosedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Networking::Sockets::MessageWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::MessageWebSocketControl;
	using Default = Windows::Networking::Sockets::IMessageWebSocketControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocketControl"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Networking::Sockets::MessageWebSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::MessageWebSocketInformation;
	using Default = Windows::Networking::Sockets::IWebSocketInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocketInformation"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Networking::Sockets::MessageWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::MessageWebSocket;
	using Default = Windows::Networking::Sockets::IMessageWebSocket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocket"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs;
	using Default = Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Networking::Sockets::StreamWebSocketControl>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamWebSocketControl;
	using Default = Windows::Networking::Sockets::IStreamWebSocketControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamWebSocketControl"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Networking::Sockets::StreamWebSocketInformation>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamWebSocketInformation;
	using Default = Windows::Networking::Sockets::IWebSocketInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamWebSocketInformation"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Networking::Sockets::StreamWebSocket>
{
	using Abi = ABI::Windows::Networking::Sockets::StreamWebSocket;
	using Default = Windows::Networking::Sockets::IStreamWebSocket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.StreamWebSocket"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Networking::Sockets::WebSocketKeepAlive>
{
	using Abi = ABI::Windows::Networking::Sockets::WebSocketKeepAlive;
	using Default = Windows::ApplicationModel::Background::IBackgroundTask;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.WebSocketKeepAlive"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Sockets::SocketError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.SocketError"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Networking::Sockets::WebSocketError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Sockets.WebSocketError"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Networking::Proximity::ProximityMessage>
{
	using Abi = ABI::Windows::Networking::Proximity::ProximityMessage;
	using Default = Windows::Networking::Proximity::IProximityMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.ProximityMessage"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Networking::Proximity::ProximityDevice>
{
	using Abi = ABI::Windows::Networking::Proximity::ProximityDevice;
	using Default = Windows::Networking::Proximity::IProximityDevice;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.ProximityDevice"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>
{
	using Abi = ABI::Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs;
	using Default = Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.TriggeredConnectionStateChangedEventArgs"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Networking::Proximity::PeerInformation>
{
	using Abi = ABI::Windows::Networking::Proximity::PeerInformation;
	using Default = Windows::Networking::Proximity::IPeerInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.PeerInformation"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Networking::Proximity::ConnectionRequestedEventArgs>
{
	using Abi = ABI::Windows::Networking::Proximity::ConnectionRequestedEventArgs;
	using Default = Windows::Networking::Proximity::IConnectionRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.ConnectionRequestedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Networking::Proximity::PeerWatcher>
{
	using Abi = ABI::Windows::Networking::Proximity::PeerWatcher;
	using Default = Windows::Networking::Proximity::IPeerWatcher;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.PeerWatcher"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Networking::Proximity::PeerFinder>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.Proximity.PeerFinder"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Networking::PushNotifications::PushNotificationChannel>
{
	using Abi = ABI::Windows::Networking::PushNotifications::PushNotificationChannel;
	using Default = Windows::Networking::PushNotifications::IPushNotificationChannel;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.PushNotifications.PushNotificationChannel"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs>
{
	using Abi = ABI::Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs;
	using Default = Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.PushNotifications.PushNotificationReceivedEventArgs"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::Networking::PushNotifications::RawNotification>
{
	using Abi = ABI::Windows::Networking::PushNotifications::RawNotification;
	using Default = Windows::Networking::PushNotifications::IRawNotification;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.PushNotifications.RawNotification"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Networking::PushNotifications::PushNotificationChannelManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Networking.PushNotifications.PushNotificationChannelManager"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest;
	using Default = Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.OnlineIdServiceTicketRequest"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket;
	using Default = Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicket;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.OnlineIdServiceTicket"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::UserAuthenticationOperation>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::UserAuthenticationOperation;
	using Default = Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::OnlineId::UserIdentity>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.UserAuthenticationOperation"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::SignOutUserOperation>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::SignOutUserOperation;
	using Default = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.SignOutUserOperation"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::UserIdentity>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::UserIdentity;
	using Default = Windows::Security::Authentication::OnlineId::IUserIdentity;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.UserIdentity"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Security::Authentication::OnlineId::OnlineIdAuthenticator>
{
	using Abi = ABI::Windows::Security::Authentication::OnlineId::OnlineIdAuthenticator;
	using Default = Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.OnlineId.OnlineIdAuthenticator"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Security::Authentication::Web::WebAuthenticationResult>
{
	using Abi = ABI::Windows::Security::Authentication::Web::WebAuthenticationResult;
	using Default = Windows::Security::Authentication::Web::IWebAuthenticationResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.Web.WebAuthenticationResult"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Authentication::Web::WebAuthenticationBroker>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Authentication.Web.WebAuthenticationBroker"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Credentials::UI::UserConsentVerifier>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.UI.UserConsentVerifier"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Security::Credentials::UI::CredentialPickerOptions>
{
	using Abi = ABI::Windows::Security::Credentials::UI::CredentialPickerOptions;
	using Default = Windows::Security::Credentials::UI::ICredentialPickerOptions;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.UI.CredentialPickerOptions"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Security::Credentials::UI::CredentialPickerResults>
{
	using Abi = ABI::Windows::Security::Credentials::UI::CredentialPickerResults;
	using Default = Windows::Security::Credentials::UI::ICredentialPickerResults;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.UI.CredentialPickerResults"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Security::Credentials::UI::CredentialPicker>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Credentials.UI.CredentialPicker"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Security::Cryptography::Core::KeyDerivationParameters>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::KeyDerivationParameters;
	using Default = Windows::Security::Cryptography::Core::IKeyDerivationParameters;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.KeyDerivationParameters"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Security::Cryptography::Core::CryptographicKey>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::CryptographicKey;
	using Default = Windows::Security::Cryptography::Core::ICryptographicKey;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.CryptographicKey"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Security::Cryptography::Core::CryptographicHash>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::CryptographicHash;
	using Default = Windows::Security::Cryptography::Core::IHashComputation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.CryptographicHash"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Security::Cryptography::Core::PersistedKeyProvider>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.PersistedKeyProvider"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData;
	using Default = Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Security::Cryptography::Core::CryptographicEngine>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.CryptographicEngine"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Security::Cryptography::Core::HashAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::HashAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::IHashAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.HashAlgorithmProvider"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Security::Cryptography::Core::MacAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::MacAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::IMacAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.MacAlgorithmProvider"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.KeyDerivationAlgorithmProvider"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.SymmetricKeyAlgorithmProvider"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider;
	using Default = Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.AsymmetricKeyAlgorithmProvider"; }
	static constexpr unsigned NameLength = 65;
};

template <> struct Traits<Windows::Security::Cryptography::Core::HashAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.HashAlgorithmNames"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Security::Cryptography::Core::MacAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.MacAlgorithmNames"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Security::Cryptography::Core::SymmetricAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.SymmetricAlgorithmNames"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Security::Cryptography::Core::AsymmetricAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.AsymmetricAlgorithmNames"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Security::Cryptography::Core::KeyDerivationAlgorithmNames>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.Core.KeyDerivationAlgorithmNames"; }
	static constexpr unsigned NameLength = 62;
};

template <> struct Traits<Windows::Security::Cryptography::DataProtection::DataProtectionProvider>
{
	using Abi = ABI::Windows::Security::Cryptography::DataProtection::DataProtectionProvider;
	using Default = Windows::Security::Cryptography::DataProtection::IDataProtectionProvider;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.DataProtection.DataProtectionProvider"; }
	static constexpr unsigned NameLength = 67;
};

template <> struct Traits<Windows::Security::Cryptography::CryptographicBuffer>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.Cryptography.CryptographicBuffer"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Security::EnterpriseData::FileRevocationManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.EnterpriseData.FileRevocationManager"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults;
	using Default = Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.ExchangeActiveSyncProvisioning.EasComplianceResults"; }
	static constexpr unsigned NameLength = 68;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::EasClientSecurityPolicy>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::EasClientSecurityPolicy;
	using Default = Windows::Security::ExchangeActiveSyncProvisioning::IEasClientSecurityPolicy;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.ExchangeActiveSyncProvisioning.EasClientSecurityPolicy"; }
	static constexpr unsigned NameLength = 71;
};

template <> struct Traits<Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation>
{
	using Abi = ABI::Windows::Security::ExchangeActiveSyncProvisioning::EasClientDeviceInformation;
	using Default = Windows::Security::ExchangeActiveSyncProvisioning::IEasClientDeviceInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Storage::AccessCache::AccessListEntryView>
{
	using Abi = ABI::Windows::Storage::AccessCache::AccessListEntryView;
	using Default = Windows::Foundation::Collections::IVectorView<Modern::Windows::Storage::AccessCache::AccessListEntry>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.AccessListEntryView"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList>
{
	using Abi = ABI::Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList;
	using Default = Windows::Storage::AccessCache::IStorageItemMostRecentlyUsedList;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.StorageItemMostRecentlyUsedList"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Storage::AccessCache::ItemRemovedEventArgs>
{
	using Abi = ABI::Windows::Storage::AccessCache::ItemRemovedEventArgs;
	using Default = Windows::Storage::AccessCache::IItemRemovedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.ItemRemovedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::Storage::AccessCache::StorageItemAccessList>
{
	using Abi = ABI::Windows::Storage::AccessCache::StorageItemAccessList;
	using Default = Windows::Storage::AccessCache::IStorageItemAccessList;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.StorageItemAccessList"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::AccessCache::StorageApplicationPermissions>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.AccessCache.StorageApplicationPermissions"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::Storage::BulkAccess::FileInformationFactory>
{
	using Abi = ABI::Windows::Storage::BulkAccess::FileInformationFactory;
	using Default = Windows::Storage::BulkAccess::IFileInformationFactory;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.BulkAccess.FileInformationFactory"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Storage::BulkAccess::FileInformation>
{
	using Abi = ABI::Windows::Storage::BulkAccess::FileInformation;
	using Default = Windows::Storage::BulkAccess::IStorageItemInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.BulkAccess.FileInformation"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Storage::BulkAccess::FolderInformation>
{
	using Abi = ABI::Windows::Storage::BulkAccess::FolderInformation;
	using Default = Windows::Storage::BulkAccess::IStorageItemInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.BulkAccess.FolderInformation"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Storage::Compression::Compressor>
{
	using Abi = ABI::Windows::Storage::Compression::Compressor;
	using Default = Windows::Storage::Compression::ICompressor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Compression.Compressor"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Storage::Compression::Decompressor>
{
	using Abi = ABI::Windows::Storage::Compression::Decompressor;
	using Default = Windows::Storage::Compression::IDecompressor;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Compression.Decompressor"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Storage::Pickers::FilePickerSelectedFilesArray>
{
	using Abi = ABI::Windows::Storage::Pickers::FilePickerSelectedFilesArray;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FilePickerSelectedFilesArray"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Storage::Pickers::FilePickerFileTypesOrderedMap>
{
	using Abi = ABI::Windows::Storage::Pickers::FilePickerFileTypesOrderedMap;
	using Default = Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FilePickerFileTypesOrderedMap"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Storage::Pickers::FileExtensionVector>
{
	using Abi = ABI::Windows::Storage::Pickers::FileExtensionVector;
	using Default = Windows::Foundation::Collections::IVector<String>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FileExtensionVector"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Storage::Pickers::FileOpenPicker>
{
	using Abi = ABI::Windows::Storage::Pickers::FileOpenPicker;
	using Default = Windows::Storage::Pickers::IFileOpenPicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FileOpenPicker"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Storage::Pickers::FileSavePicker>
{
	using Abi = ABI::Windows::Storage::Pickers::FileSavePicker;
	using Default = Windows::Storage::Pickers::IFileSavePicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FileSavePicker"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Storage::Pickers::FolderPicker>
{
	using Abi = ABI::Windows::Storage::Pickers::FolderPicker;
	using Default = Windows::Storage::Pickers::IFolderPicker;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Storage.Pickers.FolderPicker"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::System::Display::DisplayRequest>
{
	using Abi = ABI::Windows::System::Display::DisplayRequest;
	using Default = Windows::System::Display::IDisplayRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Display.DisplayRequest"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::System::Profile::HardwareToken>
{
	using Abi = ABI::Windows::System::Profile::HardwareToken;
	using Default = Windows::System::Profile::IHardwareToken;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Profile.HardwareToken"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::System::Profile::HardwareIdentification>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Profile.HardwareIdentification"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::System::Profile::SystemManufacturers::SmbiosInformation>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Profile.SystemManufacturers.SmbiosInformation"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::System::RemoteDesktop::InteractiveSession>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.RemoteDesktop.InteractiveSession"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::System::Threading::ThreadPoolTimer>
{
	using Abi = ABI::Windows::System::Threading::ThreadPoolTimer;
	using Default = Windows::System::Threading::IThreadPoolTimer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Threading.ThreadPoolTimer"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::System::Threading::ThreadPool>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Threading.ThreadPool"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::System::Threading::Core::SignalNotifier>
{
	using Abi = ABI::Windows::System::Threading::Core::SignalNotifier;
	using Default = Windows::System::Threading::Core::ISignalNotifier;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Threading.Core.SignalNotifier"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::System::Threading::Core::PreallocatedWorkItem>
{
	using Abi = ABI::Windows::System::Threading::Core::PreallocatedWorkItem;
	using Default = Windows::System::Threading::Core::IPreallocatedWorkItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.Threading.Core.PreallocatedWorkItem"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::System::UserProfile::AdvertisingManager>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.UserProfile.AdvertisingManager"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::System::UserProfile::UserInformation>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.UserProfile.UserInformation"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::System::UserProfile::LockScreen>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.UserProfile.LockScreen"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::System::UserProfile::GlobalizationPreferences>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.System.UserProfile.GlobalizationPreferences"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::ApplicationSettings::SettingsCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::SettingsCommand;
	using Default = Windows::UI::Popups::IUICommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.SettingsCommand"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest;
	using Default = Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.SettingsPaneCommandsRequest"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs;
	using Default = Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.SettingsPaneCommandsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 69;
};

template <> struct Traits<Windows::UI::ApplicationSettings::SettingsPane>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::SettingsPane;
	using Default = Windows::UI::ApplicationSettings::ISettingsPane;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.SettingsPane"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::UI::ApplicationSettings::WebAccountProviderCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::WebAccountProviderCommand;
	using Default = Windows::UI::ApplicationSettings::IWebAccountProviderCommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.WebAccountProviderCommand"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::ApplicationSettings::WebAccountCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::WebAccountCommand;
	using Default = Windows::UI::ApplicationSettings::IWebAccountCommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.WebAccountCommand"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::ApplicationSettings::WebAccountInvokedArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::WebAccountInvokedArgs;
	using Default = Windows::UI::ApplicationSettings::IWebAccountInvokedArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.WebAccountInvokedArgs"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::ApplicationSettings::CredentialCommand>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::CredentialCommand;
	using Default = Windows::UI::ApplicationSettings::ICredentialCommand;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.CredentialCommand"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral;
	using Default = Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.AccountsSettingsPaneEventDeferral"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs;
	using Default = Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.AccountsSettingsPaneCommandsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 77;
};

template <> struct Traits<Windows::UI::ApplicationSettings::AccountsSettingsPane>
{
	using Abi = ABI::Windows::UI::ApplicationSettings::AccountsSettingsPane;
	using Default = Windows::UI::ApplicationSettings::IAccountsSettingsPane;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.ApplicationSettings.AccountsSettingsPane"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::AnimationDescription>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::AnimationDescription;
	using Default = Windows::UI::Core::AnimationMetrics::IAnimationDescription;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.AnimationDescription"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::PropertyAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::PropertyAnimation;
	using Default = Windows::UI::Core::AnimationMetrics::IPropertyAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.PropertyAnimation"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::ScaleAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::ScaleAnimation;
	using Default = Windows::UI::Core::AnimationMetrics::IScaleAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.ScaleAnimation"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::TranslationAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::TranslationAnimation;
	using Default = Windows::UI::Core::AnimationMetrics::IPropertyAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.TranslationAnimation"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::Core::AnimationMetrics::OpacityAnimation>
{
	using Abi = ABI::Windows::UI::Core::AnimationMetrics::OpacityAnimation;
	using Default = Windows::UI::Core::AnimationMetrics::IOpacityAnimation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Core.AnimationMetrics.OpacityAnimation"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Input::Inking::InkDrawingAttributes>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkDrawingAttributes;
	using Default = Windows::UI::Input::Inking::IInkDrawingAttributes;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkDrawingAttributes"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Input::Inking::InkStrokeRenderingSegment>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkStrokeRenderingSegment;
	using Default = Windows::UI::Input::Inking::IInkStrokeRenderingSegment;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeRenderingSegment"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::UI::Input::Inking::InkStroke>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkStroke;
	using Default = Windows::UI::Input::Inking::IInkStroke;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkStroke"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::Input::Inking::InkStrokeBuilder>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkStrokeBuilder;
	using Default = Windows::UI::Input::Inking::IInkStrokeBuilder;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeBuilder"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::Input::Inking::InkRecognitionResult>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkRecognitionResult;
	using Default = Windows::UI::Input::Inking::IInkRecognitionResult;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkRecognitionResult"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::Input::Inking::InkStrokeContainer>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkStrokeContainer;
	using Default = Windows::UI::Input::Inking::IInkStrokeContainer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeContainer"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::UI::Input::Inking::InkRecognizer>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkRecognizer;
	using Default = Windows::UI::Input::Inking::IInkRecognizer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkRecognizer"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::UI::Input::Inking::InkRecognizerContainer>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkRecognizerContainer;
	using Default = Windows::UI::Input::Inking::IInkRecognizerContainer;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkRecognizerContainer"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::Input::Inking::InkManager>
{
	using Abi = ABI::Windows::UI::Input::Inking::InkManager;
	using Default = Windows::UI::Input::Inking::IInkManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.Input.Inking.InkManager"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::StartScreen::SecondaryTileVisualElements>
{
	using Abi = ABI::Windows::UI::StartScreen::SecondaryTileVisualElements;
	using Default = Windows::UI::StartScreen::ISecondaryTileVisualElements;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.SecondaryTileVisualElements"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::StartScreen::SecondaryTile>
{
	using Abi = ABI::Windows::UI::StartScreen::SecondaryTile;
	using Default = Windows::UI::StartScreen::ISecondaryTile;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.SecondaryTile"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::StartScreen::VisualElementsRequestedEventArgs>
{
	using Abi = ABI::Windows::UI::StartScreen::VisualElementsRequestedEventArgs;
	using Default = Windows::UI::StartScreen::IVisualElementsRequestedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.VisualElementsRequestedEventArgs"; }
	static constexpr unsigned NameLength = 55;
};

template <> struct Traits<Windows::UI::StartScreen::VisualElementsRequest>
{
	using Abi = ABI::Windows::UI::StartScreen::VisualElementsRequest;
	using Default = Windows::UI::StartScreen::IVisualElementsRequest;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.VisualElementsRequest"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::StartScreen::VisualElementsRequestDeferral>
{
	using Abi = ABI::Windows::UI::StartScreen::VisualElementsRequestDeferral;
	using Default = Windows::UI::StartScreen::IVisualElementsRequestDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.StartScreen.VisualElementsRequestDeferral"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::UI::WebUI::ActivatedDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::ActivatedDeferral;
	using Default = Windows::UI::WebUI::IActivatedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.ActivatedDeferral"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::UI::WebUI::ActivatedOperation>
{
	using Abi = ABI::Windows::UI::WebUI::ActivatedOperation;
	using Default = Windows::UI::WebUI::IActivatedOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.ActivatedOperation"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::WebUI::WebUILaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUILaunchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUILaunchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::WebUI::WebUISearchActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUISearchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ISearchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUISearchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIShareTargetActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIShareTargetActivatedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::WebUI::WebUIFileActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIFileActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIFileActivatedEventArgs"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::WebUI::WebUIProtocolActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIProtocolActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIProtocolActivatedEventArgs"; }
	static constexpr unsigned NameLength = 48;
};

template <> struct Traits<Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIFileOpenPickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIFileOpenPickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIFileSavePickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIFileSavePickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUICachedFileUpdaterActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUICachedFileUpdaterActivatedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactPickerActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactPickerActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactPickerActivatedEventArgs"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::UI::WebUI::WebUIDeviceActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIDeviceActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIDeviceActivatedEventArgs"; }
	static constexpr unsigned NameLength = 46;
};

template <> struct Traits<Windows::UI::WebUI::WebUIPrintTaskSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIPrintTaskSettingsActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIPrintTaskSettingsActivatedEventArgs"; }
	static constexpr unsigned NameLength = 57;
};

template <> struct Traits<Windows::UI::WebUI::WebUICameraSettingsActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUICameraSettingsActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUICameraSettingsActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIAppointmentsProviderAddAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIAppointmentsProviderAddAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 78;
};

template <> struct Traits<Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs"; }
	static constexpr unsigned NameLength = 77;
};

template <> struct Traits<Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs"; }
	static constexpr unsigned NameLength = 73;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactCallActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactMessageActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactMessageActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactMessageActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactMapActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactMapActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactMapActivatedEventArgs"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactPostActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactPostActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactPostActivatedEventArgs"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::UI::WebUI::WebUIContactVideoCallActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIContactVideoCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIContactVideoCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::WebUI::WebUILockScreenCallActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUILockScreenCallActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUILockScreenCallActivatedEventArgs"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIRestrictedLaunchActivatedEventArgs;
	using Default = Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIRestrictedLaunchActivatedEventArgs"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::WebUI::WebUINavigatedOperation>
{
	using Abi = ABI::Windows::UI::WebUI::WebUINavigatedOperation;
	using Default = Windows::UI::WebUI::IWebUINavigatedOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUINavigatedOperation"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::WebUI::SuspendingDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::SuspendingDeferral;
	using Default = Windows::ApplicationModel::ISuspendingDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.SuspendingDeferral"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::UI::WebUI::SuspendingOperation>
{
	using Abi = ABI::Windows::UI::WebUI::SuspendingOperation;
	using Default = Windows::ApplicationModel::ISuspendingOperation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.SuspendingOperation"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::WebUI::SuspendingEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::SuspendingEventArgs;
	using Default = Windows::ApplicationModel::ISuspendingEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.SuspendingEventArgs"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass>
{
	using Abi = ABI::Windows::UI::WebUI::WebUIBackgroundTaskInstanceRuntimeClass;
	using Default = Windows::UI::WebUI::IWebUIBackgroundTaskInstance;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIBackgroundTaskInstanceRuntimeClass"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::UI::WebUI::WebUIBackgroundTaskInstance>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIBackgroundTaskInstance"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::UI::WebUI::WebUINavigatedDeferral>
{
	using Abi = ABI::Windows::UI::WebUI::WebUINavigatedDeferral;
	using Default = Windows::UI::WebUI::IWebUINavigatedDeferral;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUINavigatedDeferral"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::UI::WebUI::WebUINavigatedEventArgs>
{
	using Abi = ABI::Windows::UI::WebUI::WebUINavigatedEventArgs;
	using Default = Windows::UI::WebUI::IWebUINavigatedEventArgs;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUINavigatedEventArgs"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::UI::WebUI::WebUIApplication>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.WebUIApplication"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::UI::WebUI::HtmlPrintDocumentSource>
{
	using Abi = ABI::Windows::UI::WebUI::HtmlPrintDocumentSource;
	using Default = Windows::UI::WebUI::IHtmlPrintDocumentSource;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.UI.WebUI.HtmlPrintDocumentSource"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Web::AtomPub::ServiceDocument>
{
	using Abi = ABI::Windows::Web::AtomPub::ServiceDocument;
	using Default = Windows::Web::AtomPub::IServiceDocument;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.AtomPub.ServiceDocument"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationAttribute>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationAttribute;
	using Default = Windows::Web::Syndication::ISyndicationAttribute;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationAttribute"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationNode>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationNode;
	using Default = Windows::Web::Syndication::ISyndicationNode;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationNode"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationGenerator>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationGenerator;
	using Default = Windows::Web::Syndication::ISyndicationGenerator;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationGenerator"; }
	static constexpr unsigned NameLength = 44;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationText>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationText;
	using Default = Windows::Web::Syndication::ISyndicationText;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationText"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationContent>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationContent;
	using Default = Windows::Web::Syndication::ISyndicationContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationContent"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationLink>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationLink;
	using Default = Windows::Web::Syndication::ISyndicationLink;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationLink"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationPerson>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationPerson;
	using Default = Windows::Web::Syndication::ISyndicationPerson;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationPerson"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationCategory>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationCategory;
	using Default = Windows::Web::Syndication::ISyndicationCategory;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationCategory"; }
	static constexpr unsigned NameLength = 43;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationFeed>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationFeed;
	using Default = Windows::Web::Syndication::ISyndicationFeed;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationFeed"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationItem>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationItem;
	using Default = Windows::Web::Syndication::ISyndicationItem;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationItem"; }
	static constexpr unsigned NameLength = 39;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationClient>
{
	using Abi = ABI::Windows::Web::Syndication::SyndicationClient;
	using Default = Windows::Web::Syndication::ISyndicationClient;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationClient"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Web::Syndication::SyndicationError>
{
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Syndication.SyndicationError"; }
	static constexpr unsigned NameLength = 40;
};

template <> struct Traits<Windows::Web::AtomPub::ResourceCollection>
{
	using Abi = ABI::Windows::Web::AtomPub::ResourceCollection;
	using Default = Windows::Web::AtomPub::IResourceCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.AtomPub.ResourceCollection"; }
	static constexpr unsigned NameLength = 38;
};

template <> struct Traits<Windows::Web::AtomPub::Workspace>
{
	using Abi = ABI::Windows::Web::AtomPub::Workspace;
	using Default = Windows::Web::AtomPub::IWorkspace;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.AtomPub.Workspace"; }
	static constexpr unsigned NameLength = 29;
};

template <> struct Traits<Windows::Web::AtomPub::AtomPubClient>
{
	using Abi = ABI::Windows::Web::AtomPub::AtomPubClient;
	using Default = Windows::Web::AtomPub::IAtomPubClient;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.AtomPub.AtomPubClient"; }
	static constexpr unsigned NameLength = 33;
};

template <> struct Traits<Windows::Web::Http::HttpMethod>
{
	using Abi = ABI::Windows::Web::Http::HttpMethod;
	using Default = Windows::Web::Http::IHttpMethod;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpMethod"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentHeaderCollection;
	using Default = Windows::Web::Http::Headers::IHttpContentHeaderCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentHeaderCollection"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpRequestHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpRequestHeaderCollection;
	using Default = Windows::Web::Http::Headers::IHttpRequestHeaderCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpRequestHeaderCollection"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpResponseHeaderCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpResponseHeaderCollection;
	using Default = Windows::Web::Http::Headers::IHttpResponseHeaderCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpResponseHeaderCollection"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentDispositionHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentDispositionHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentDispositionHeaderValue"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection"; }
	static constexpr unsigned NameLength = 63;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection"; }
	static constexpr unsigned NameLength = 58;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentRangeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentRangeHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpContentRangeHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentRangeHeaderValue"; }
	static constexpr unsigned NameLength = 52;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpMediaTypeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpMediaTypeHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpMediaTypeHeaderValue"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection"; }
	static constexpr unsigned NameLength = 70;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection"; }
	static constexpr unsigned NameLength = 74;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpCredentialsHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpCredentialsHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpCredentialsHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpCredentialsHeaderValue"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection"; }
	static constexpr unsigned NameLength = 66;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection"; }
	static constexpr unsigned NameLength = 61;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpMethodHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpMethodHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpMethodHeaderValueCollection"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection;
	using Default = Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection"; }
	static constexpr unsigned NameLength = 59;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpNameValueHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpNameValueHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpNameValueHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpNameValueHeaderValue"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpChallengeHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpChallengeHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpChallengeHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpChallengeHeaderValue"; }
	static constexpr unsigned NameLength = 49;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue"; }
	static constexpr unsigned NameLength = 56;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentCodingHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentCodingHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpContentCodingHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingHeaderValue"; }
	static constexpr unsigned NameLength = 53;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpCookiePairHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpCookiePairHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpCookiePairHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpCookiePairHeaderValue"; }
	static constexpr unsigned NameLength = 50;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpExpectationHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpExpectationHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpExpectationHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpExpectationHeaderValue"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue"; }
	static constexpr unsigned NameLength = 60;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpProductHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpProductHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpProductHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpProductHeaderValue"; }
	static constexpr unsigned NameLength = 47;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpProductInfoHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpProductInfoHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpProductInfoHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpProductInfoHeaderValue"; }
	static constexpr unsigned NameLength = 51;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue"; }
	static constexpr unsigned NameLength = 64;
};

template <> struct Traits<Windows::Web::Http::Headers::HttpTransferCodingHeaderValue>
{
	using Abi = ABI::Windows::Web::Http::Headers::HttpTransferCodingHeaderValue;
	using Default = Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Headers.HttpTransferCodingHeaderValue"; }
	static constexpr unsigned NameLength = 54;
};

template <> struct Traits<Windows::Web::Http::HttpRequestMessage>
{
	using Abi = ABI::Windows::Web::Http::HttpRequestMessage;
	using Default = Windows::Web::Http::IHttpRequestMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpRequestMessage"; }
	static constexpr unsigned NameLength = 35;
};

template <> struct Traits<Windows::Web::Http::HttpResponseMessage>
{
	using Abi = ABI::Windows::Web::Http::HttpResponseMessage;
	using Default = Windows::Web::Http::IHttpResponseMessage;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpResponseMessage"; }
	static constexpr unsigned NameLength = 36;
};

template <> struct Traits<Windows::Web::Http::HttpClient>
{
	using Abi = ABI::Windows::Web::Http::HttpClient;
	using Default = Windows::Web::Http::IHttpClient;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpClient"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Web::Http::HttpCookie>
{
	using Abi = ABI::Windows::Web::Http::HttpCookie;
	using Default = Windows::Web::Http::IHttpCookie;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpCookie"; }
	static constexpr unsigned NameLength = 27;
};

template <> struct Traits<Windows::Web::Http::HttpCookieCollection>
{
	using Abi = ABI::Windows::Web::Http::HttpCookieCollection;
	using Default = Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie>;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpCookieCollection"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Web::Http::HttpTransportInformation>
{
	using Abi = ABI::Windows::Web::Http::HttpTransportInformation;
	using Default = Windows::Web::Http::IHttpTransportInformation;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpTransportInformation"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Web::Http::HttpStringContent>
{
	using Abi = ABI::Windows::Web::Http::HttpStringContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpStringContent"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Web::Http::HttpBufferContent>
{
	using Abi = ABI::Windows::Web::Http::HttpBufferContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpBufferContent"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Web::Http::HttpStreamContent>
{
	using Abi = ABI::Windows::Web::Http::HttpStreamContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpStreamContent"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Web::Http::HttpFormUrlEncodedContent>
{
	using Abi = ABI::Windows::Web::Http::HttpFormUrlEncodedContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpFormUrlEncodedContent"; }
	static constexpr unsigned NameLength = 42;
};

template <> struct Traits<Windows::Web::Http::HttpMultipartContent>
{
	using Abi = ABI::Windows::Web::Http::HttpMultipartContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpMultipartContent"; }
	static constexpr unsigned NameLength = 37;
};

template <> struct Traits<Windows::Web::Http::HttpMultipartFormDataContent>
{
	using Abi = ABI::Windows::Web::Http::HttpMultipartFormDataContent;
	using Default = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpMultipartFormDataContent"; }
	static constexpr unsigned NameLength = 45;
};

template <> struct Traits<Windows::Web::Http::HttpCookieManager>
{
	using Abi = ABI::Windows::Web::Http::HttpCookieManager;
	using Default = Windows::Web::Http::IHttpCookieManager;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.HttpCookieManager"; }
	static constexpr unsigned NameLength = 34;
};

template <> struct Traits<Windows::Web::Http::Filters::HttpCacheControl>
{
	using Abi = ABI::Windows::Web::Http::Filters::HttpCacheControl;
	using Default = Windows::Web::Http::Filters::IHttpCacheControl;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Filters.HttpCacheControl"; }
	static constexpr unsigned NameLength = 41;
};

template <> struct Traits<Windows::Web::Http::Filters::HttpBaseProtocolFilter>
{
	using Abi = ABI::Windows::Web::Http::Filters::HttpBaseProtocolFilter;
	using Default = Windows::Web::Http::Filters::IHttpBaseProtocolFilter;
	static constexpr wchar_t const * Name() noexcept { return L"Windows.Web.Http.Filters.HttpBaseProtocolFilter"; }
	static constexpr unsigned NameLength = 47;
};

}

namespace Modern { namespace Windows { namespace ApplicationModel {

struct ISuspendingDeferral :
	IInspectable,
	impl_ISuspendingDeferral<ISuspendingDeferral>
{
	ISuspendingDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISuspendingDeferral>>(m_ptr); }
};

struct ISuspendingOperation :
	IInspectable,
	impl_ISuspendingOperation<ISuspendingOperation>
{
	ISuspendingOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISuspendingOperation>>(m_ptr); }
};

struct ISuspendingEventArgs :
	IInspectable,
	impl_ISuspendingEventArgs<ISuspendingEventArgs>
{
	ISuspendingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISuspendingEventArgs>>(m_ptr); }
};

struct IPackageId :
	IInspectable,
	impl_IPackageId<IPackageId>
{
	IPackageId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageId>>(m_ptr); }
};

struct IPackage :
	IInspectable,
	impl_IPackage<IPackage>
{
	IPackage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackage>>(m_ptr); }
};

struct IPackage2 :
	IInspectable,
	impl_IPackage2<IPackage2>
{
	IPackage2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackage2>>(m_ptr); }
};

struct IPackageStatics :
	IInspectable,
	impl_IPackageStatics<IPackageStatics>
{
	IPackageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageStatics>>(m_ptr); }
};

struct IDesignModeStatics :
	IInspectable,
	impl_IDesignModeStatics<IDesignModeStatics>
{
	IDesignModeStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDesignModeStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

struct ISplashScreen :
	IInspectable,
	impl_ISplashScreen<ISplashScreen>
{
	ISplashScreen(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISplashScreen>>(m_ptr); }
};

struct IActivatedEventArgs :
	IInspectable,
	impl_IActivatedEventArgs<IActivatedEventArgs>
{
	IActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedEventArgs>>(m_ptr); }
};

struct IApplicationViewActivatedEventArgs :
	IInspectable,
	impl_IApplicationViewActivatedEventArgs<IApplicationViewActivatedEventArgs>,
	Requires<IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IApplicationViewActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewActivatedEventArgs>>(m_ptr); }
};

struct IPrelaunchActivatedEventArgs :
	IInspectable,
	impl_IPrelaunchActivatedEventArgs<IPrelaunchActivatedEventArgs>,
	Requires<IPrelaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IPrelaunchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrelaunchActivatedEventArgs>>(m_ptr); }
};

struct ILaunchActivatedEventArgs :
	IInspectable,
	impl_ILaunchActivatedEventArgs<ILaunchActivatedEventArgs>,
	Requires<ILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ILaunchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILaunchActivatedEventArgs>>(m_ptr); }
};

struct ISearchActivatedEventArgs :
	IInspectable,
	impl_ISearchActivatedEventArgs<ISearchActivatedEventArgs>,
	Requires<ISearchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ISearchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchActivatedEventArgs>>(m_ptr); }
};

struct ISearchActivatedEventArgsWithLinguisticDetails :
	IInspectable,
	impl_ISearchActivatedEventArgsWithLinguisticDetails<ISearchActivatedEventArgsWithLinguisticDetails>
{
	ISearchActivatedEventArgsWithLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchActivatedEventArgsWithLinguisticDetails>>(m_ptr); }
};

struct IShareTargetActivatedEventArgs :
	IInspectable,
	impl_IShareTargetActivatedEventArgs<IShareTargetActivatedEventArgs>,
	Requires<IShareTargetActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IShareTargetActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IShareTargetActivatedEventArgs>>(m_ptr); }
};

struct IFileActivatedEventArgs :
	IInspectable,
	impl_IFileActivatedEventArgs<IFileActivatedEventArgs>,
	Requires<IFileActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileActivatedEventArgs>>(m_ptr); }
};

struct IFileActivatedEventArgsWithNeighboringFiles :
	IInspectable,
	impl_IFileActivatedEventArgsWithNeighboringFiles<IFileActivatedEventArgsWithNeighboringFiles>,
	Requires<IFileActivatedEventArgsWithNeighboringFiles, Windows::ApplicationModel::Activation::IFileActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileActivatedEventArgsWithNeighboringFiles(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileActivatedEventArgsWithNeighboringFiles>>(m_ptr); }
};

struct IProtocolActivatedEventArgs :
	IInspectable,
	impl_IProtocolActivatedEventArgs<IProtocolActivatedEventArgs>,
	Requires<IProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IProtocolActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProtocolActivatedEventArgs>>(m_ptr); }
};

struct IFileOpenPickerActivatedEventArgs :
	IInspectable,
	impl_IFileOpenPickerActivatedEventArgs<IFileOpenPickerActivatedEventArgs>,
	Requires<IFileOpenPickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileOpenPickerActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileOpenPickerActivatedEventArgs>>(m_ptr); }
};

struct IFileSavePickerActivatedEventArgs :
	IInspectable,
	impl_IFileSavePickerActivatedEventArgs<IFileSavePickerActivatedEventArgs>,
	Requires<IFileSavePickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileSavePickerActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileSavePickerActivatedEventArgs>>(m_ptr); }
};

struct ICachedFileUpdaterActivatedEventArgs :
	IInspectable,
	impl_ICachedFileUpdaterActivatedEventArgs<ICachedFileUpdaterActivatedEventArgs>,
	Requires<ICachedFileUpdaterActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ICachedFileUpdaterActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICachedFileUpdaterActivatedEventArgs>>(m_ptr); }
};

struct IContactPickerActivatedEventArgs :
	IInspectable,
	impl_IContactPickerActivatedEventArgs<IContactPickerActivatedEventArgs>,
	Requires<IContactPickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactPickerActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPickerActivatedEventArgs>>(m_ptr); }
};

struct IDeviceActivatedEventArgs :
	IInspectable,
	impl_IDeviceActivatedEventArgs<IDeviceActivatedEventArgs>,
	Requires<IDeviceActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IDeviceActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceActivatedEventArgs>>(m_ptr); }
};

struct IPrintTaskSettingsActivatedEventArgs :
	IInspectable,
	impl_IPrintTaskSettingsActivatedEventArgs<IPrintTaskSettingsActivatedEventArgs>,
	Requires<IPrintTaskSettingsActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IPrintTaskSettingsActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskSettingsActivatedEventArgs>>(m_ptr); }
};

struct ICameraSettingsActivatedEventArgs :
	IInspectable,
	impl_ICameraSettingsActivatedEventArgs<ICameraSettingsActivatedEventArgs>,
	Requires<ICameraSettingsActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ICameraSettingsActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraSettingsActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderActivatedEventArgs<IAppointmentsProviderActivatedEventArgs>,
	Requires<IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderAddAppointmentActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderAddAppointmentActivatedEventArgs<IAppointmentsProviderAddAppointmentActivatedEventArgs>,
	Requires<IAppointmentsProviderAddAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderAddAppointmentActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderAddAppointmentActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs<IAppointmentsProviderReplaceAppointmentActivatedEventArgs>,
	Requires<IAppointmentsProviderReplaceAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderReplaceAppointmentActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderReplaceAppointmentActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs<IAppointmentsProviderRemoveAppointmentActivatedEventArgs>,
	Requires<IAppointmentsProviderRemoveAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderRemoveAppointmentActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderRemoveAppointmentActivatedEventArgs>>(m_ptr); }
};

struct IAppointmentsProviderShowTimeFrameActivatedEventArgs :
	IInspectable,
	impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<IAppointmentsProviderShowTimeFrameActivatedEventArgs>,
	Requires<IAppointmentsProviderShowTimeFrameActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderShowTimeFrameActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderShowTimeFrameActivatedEventArgs>>(m_ptr); }
};

struct IContactActivatedEventArgs :
	IInspectable,
	impl_IContactActivatedEventArgs<IContactActivatedEventArgs>,
	Requires<IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactActivatedEventArgs>>(m_ptr); }
};

struct IContactCallActivatedEventArgs :
	IInspectable,
	impl_IContactCallActivatedEventArgs<IContactCallActivatedEventArgs>,
	Requires<IContactCallActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactCallActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactCallActivatedEventArgs>>(m_ptr); }
};

struct IContactMessageActivatedEventArgs :
	IInspectable,
	impl_IContactMessageActivatedEventArgs<IContactMessageActivatedEventArgs>,
	Requires<IContactMessageActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactMessageActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactMessageActivatedEventArgs>>(m_ptr); }
};

struct IContactMapActivatedEventArgs :
	IInspectable,
	impl_IContactMapActivatedEventArgs<IContactMapActivatedEventArgs>,
	Requires<IContactMapActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactMapActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactMapActivatedEventArgs>>(m_ptr); }
};

struct IContactPostActivatedEventArgs :
	IInspectable,
	impl_IContactPostActivatedEventArgs<IContactPostActivatedEventArgs>,
	Requires<IContactPostActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactPostActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPostActivatedEventArgs>>(m_ptr); }
};

struct IContactVideoCallActivatedEventArgs :
	IInspectable,
	impl_IContactVideoCallActivatedEventArgs<IContactVideoCallActivatedEventArgs>,
	Requires<IContactVideoCallActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactVideoCallActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactVideoCallActivatedEventArgs>>(m_ptr); }
};

struct IContactsProviderActivatedEventArgs :
	IInspectable,
	impl_IContactsProviderActivatedEventArgs<IContactsProviderActivatedEventArgs>,
	Requires<IContactsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactsProviderActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactsProviderActivatedEventArgs>>(m_ptr); }
};

struct IRestrictedLaunchActivatedEventArgs :
	IInspectable,
	impl_IRestrictedLaunchActivatedEventArgs<IRestrictedLaunchActivatedEventArgs>,
	Requires<IRestrictedLaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IRestrictedLaunchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRestrictedLaunchActivatedEventArgs>>(m_ptr); }
};

struct ILockScreenCallActivatedEventArgs :
	IInspectable,
	impl_ILockScreenCallActivatedEventArgs<ILockScreenCallActivatedEventArgs>,
	Requires<ILockScreenCallActivatedEventArgs, Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ILockScreenCallActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenCallActivatedEventArgs>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

struct IAppointmentManagerStatics :
	IInspectable,
	impl_IAppointmentManagerStatics<IAppointmentManagerStatics>
{
	IAppointmentManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentManagerStatics>>(m_ptr); }
};

struct IAppointmentParticipant :
	IInspectable,
	impl_IAppointmentParticipant<IAppointmentParticipant>
{
	IAppointmentParticipant(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentParticipant>>(m_ptr); }
};

struct IAppointmentInvitee :
	IInspectable,
	impl_IAppointmentInvitee<IAppointmentInvitee>,
	Requires<IAppointmentInvitee, Windows::ApplicationModel::Appointments::IAppointmentParticipant>
{
	IAppointmentInvitee(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentInvitee>>(m_ptr); }
};

struct IAppointmentRecurrence :
	IInspectable,
	impl_IAppointmentRecurrence<IAppointmentRecurrence>
{
	IAppointmentRecurrence(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentRecurrence>>(m_ptr); }
};

struct IAppointment :
	IInspectable,
	impl_IAppointment<IAppointment>
{
	IAppointment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointment>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

struct IAppointmentsProviderLaunchActionVerbsStatics :
	IInspectable,
	impl_IAppointmentsProviderLaunchActionVerbsStatics<IAppointmentsProviderLaunchActionVerbsStatics>
{
	IAppointmentsProviderLaunchActionVerbsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAppointmentsProviderLaunchActionVerbsStatics>>(m_ptr); }
};

struct IAddAppointmentOperation :
	IInspectable,
	impl_IAddAppointmentOperation<IAddAppointmentOperation>
{
	IAddAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAddAppointmentOperation>>(m_ptr); }
};

struct IReplaceAppointmentOperation :
	IInspectable,
	impl_IReplaceAppointmentOperation<IReplaceAppointmentOperation>
{
	IReplaceAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IReplaceAppointmentOperation>>(m_ptr); }
};

struct IRemoveAppointmentOperation :
	IInspectable,
	impl_IRemoveAppointmentOperation<IRemoveAppointmentOperation>
{
	IRemoveAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRemoveAppointmentOperation>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

struct IBackgroundTaskCanceledEventHandler :
	IUnknown,
	impl_IBackgroundTaskCanceledEventHandler<IBackgroundTaskCanceledEventHandler>
{
	IBackgroundTaskCanceledEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskCanceledEventHandler>>(m_ptr); }
};

struct IBackgroundTaskProgressEventHandler :
	IUnknown,
	impl_IBackgroundTaskProgressEventHandler<IBackgroundTaskProgressEventHandler>
{
	IBackgroundTaskProgressEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskProgressEventHandler>>(m_ptr); }
};

struct IBackgroundTaskCompletedEventHandler :
	IUnknown,
	impl_IBackgroundTaskCompletedEventHandler<IBackgroundTaskCompletedEventHandler>
{
	IBackgroundTaskCompletedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskCompletedEventHandler>>(m_ptr); }
};

struct IAlarmApplicationManagerStatics :
	IInspectable,
	impl_IAlarmApplicationManagerStatics<IAlarmApplicationManagerStatics>
{
	IAlarmApplicationManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAlarmApplicationManagerStatics>>(m_ptr); }
};

struct IBackgroundExecutionManagerStatics :
	IInspectable,
	impl_IBackgroundExecutionManagerStatics<IBackgroundExecutionManagerStatics>
{
	IBackgroundExecutionManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundExecutionManagerStatics>>(m_ptr); }
};

struct IBackgroundTaskInstance :
	IInspectable,
	impl_IBackgroundTaskInstance<IBackgroundTaskInstance>
{
	IBackgroundTaskInstance(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskInstance>>(m_ptr); }
};

struct IBackgroundWorkCostStatics :
	IInspectable,
	impl_IBackgroundWorkCostStatics<IBackgroundWorkCostStatics>
{
	IBackgroundWorkCostStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundWorkCostStatics>>(m_ptr); }
};

struct IBackgroundTaskDeferral :
	IInspectable,
	impl_IBackgroundTaskDeferral<IBackgroundTaskDeferral>
{
	IBackgroundTaskDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskDeferral>>(m_ptr); }
};

struct IBackgroundTaskInstance2 :
	IInspectable,
	impl_IBackgroundTaskInstance2<IBackgroundTaskInstance2>,
	Requires<IBackgroundTaskInstance2, Windows::ApplicationModel::Background::IBackgroundTaskInstance>
{
	IBackgroundTaskInstance2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskInstance2>>(m_ptr); }
};

struct IBackgroundTask :
	IInspectable,
	impl_IBackgroundTask<IBackgroundTask>
{
	IBackgroundTask(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTask>>(m_ptr); }
};

struct IBackgroundTaskRegistration :
	IInspectable,
	impl_IBackgroundTaskRegistration<IBackgroundTaskRegistration>
{
	IBackgroundTaskRegistration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskRegistration>>(m_ptr); }
};

struct IBackgroundTaskRegistrationStatics :
	IInspectable,
	impl_IBackgroundTaskRegistrationStatics<IBackgroundTaskRegistrationStatics>
{
	IBackgroundTaskRegistrationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskRegistrationStatics>>(m_ptr); }
};

struct IBackgroundTaskBuilder :
	IInspectable,
	impl_IBackgroundTaskBuilder<IBackgroundTaskBuilder>
{
	IBackgroundTaskBuilder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskBuilder>>(m_ptr); }
};

struct IBackgroundTrigger :
	IInspectable,
	impl_IBackgroundTrigger<IBackgroundTrigger>
{
	IBackgroundTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTrigger>>(m_ptr); }
};

struct IBackgroundCondition :
	IInspectable,
	impl_IBackgroundCondition<IBackgroundCondition>
{
	IBackgroundCondition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundCondition>>(m_ptr); }
};

struct IBackgroundTaskBuilder2 :
	IInspectable,
	impl_IBackgroundTaskBuilder2<IBackgroundTaskBuilder2>,
	Requires<IBackgroundTaskBuilder2, Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
{
	IBackgroundTaskBuilder2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskBuilder2>>(m_ptr); }
};

struct IBackgroundTaskCompletedEventArgs :
	IInspectable,
	impl_IBackgroundTaskCompletedEventArgs<IBackgroundTaskCompletedEventArgs>
{
	IBackgroundTaskCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskCompletedEventArgs>>(m_ptr); }
};

struct IBackgroundTaskProgressEventArgs :
	IInspectable,
	impl_IBackgroundTaskProgressEventArgs<IBackgroundTaskProgressEventArgs>
{
	IBackgroundTaskProgressEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTaskProgressEventArgs>>(m_ptr); }
};

struct ISystemTrigger :
	IInspectable,
	impl_ISystemTrigger<ISystemTrigger>,
	Requires<ISystemTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ISystemTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemTrigger>>(m_ptr); }
};

struct ISystemTriggerFactory :
	IInspectable,
	impl_ISystemTriggerFactory<ISystemTriggerFactory>
{
	ISystemTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemTriggerFactory>>(m_ptr); }
};

struct ISystemCondition :
	IInspectable,
	impl_ISystemCondition<ISystemCondition>,
	Requires<ISystemCondition, Windows::ApplicationModel::Background::IBackgroundCondition>
{
	ISystemCondition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemCondition>>(m_ptr); }
};

struct ISystemConditionFactory :
	IInspectable,
	impl_ISystemConditionFactory<ISystemConditionFactory>
{
	ISystemConditionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemConditionFactory>>(m_ptr); }
};

struct INetworkOperatorNotificationTrigger :
	IInspectable,
	impl_INetworkOperatorNotificationTrigger<INetworkOperatorNotificationTrigger>,
	Requires<INetworkOperatorNotificationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	INetworkOperatorNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorNotificationTrigger>>(m_ptr); }
};

struct INetworkOperatorNotificationTriggerFactory :
	IInspectable,
	impl_INetworkOperatorNotificationTriggerFactory<INetworkOperatorNotificationTriggerFactory>
{
	INetworkOperatorNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorNotificationTriggerFactory>>(m_ptr); }
};

struct ITimeTrigger :
	IInspectable,
	impl_ITimeTrigger<ITimeTrigger>,
	Requires<ITimeTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ITimeTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimeTrigger>>(m_ptr); }
};

struct ITimeTriggerFactory :
	IInspectable,
	impl_ITimeTriggerFactory<ITimeTriggerFactory>
{
	ITimeTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimeTriggerFactory>>(m_ptr); }
};

struct IMaintenanceTrigger :
	IInspectable,
	impl_IMaintenanceTrigger<IMaintenanceTrigger>,
	Requires<IMaintenanceTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IMaintenanceTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMaintenanceTrigger>>(m_ptr); }
};

struct IMaintenanceTriggerFactory :
	IInspectable,
	impl_IMaintenanceTriggerFactory<IMaintenanceTriggerFactory>
{
	IMaintenanceTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMaintenanceTriggerFactory>>(m_ptr); }
};

struct IDeviceUseTrigger :
	IInspectable,
	impl_IDeviceUseTrigger<IDeviceUseTrigger>,
	Requires<IDeviceUseTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IDeviceUseTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceUseTrigger>>(m_ptr); }
};

struct IDeviceServicingTrigger :
	IInspectable,
	impl_IDeviceServicingTrigger<IDeviceServicingTrigger>,
	Requires<IDeviceServicingTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IDeviceServicingTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceServicingTrigger>>(m_ptr); }
};

struct ILocationTrigger :
	IInspectable,
	impl_ILocationTrigger<ILocationTrigger>,
	Requires<ILocationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ILocationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILocationTrigger>>(m_ptr); }
};

struct ILocationTriggerFactory :
	IInspectable,
	impl_ILocationTriggerFactory<ILocationTriggerFactory>
{
	ILocationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILocationTriggerFactory>>(m_ptr); }
};

struct INetworkOperatorHotspotAuthenticationTrigger :
	IInspectable,
	impl_INetworkOperatorHotspotAuthenticationTrigger<INetworkOperatorHotspotAuthenticationTrigger>,
	Requires<INetworkOperatorHotspotAuthenticationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	INetworkOperatorHotspotAuthenticationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorHotspotAuthenticationTrigger>>(m_ptr); }
};

struct IPushNotificationTriggerFactory :
	IInspectable,
	impl_IPushNotificationTriggerFactory<IPushNotificationTriggerFactory>
{
	IPushNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPushNotificationTriggerFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

struct ILockScreenCallEndCallDeferral :
	IInspectable,
	impl_ILockScreenCallEndCallDeferral<ILockScreenCallEndCallDeferral>
{
	ILockScreenCallEndCallDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenCallEndCallDeferral>>(m_ptr); }
};

struct ILockScreenCallEndRequestedEventArgs :
	IInspectable,
	impl_ILockScreenCallEndRequestedEventArgs<ILockScreenCallEndRequestedEventArgs>
{
	ILockScreenCallEndRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenCallEndRequestedEventArgs>>(m_ptr); }
};

struct ILockScreenCallUI :
	IInspectable,
	impl_ILockScreenCallUI<ILockScreenCallUI>
{
	ILockScreenCallUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenCallUI>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

struct IContactManagerStatics :
	IInspectable,
	impl_IContactManagerStatics<IContactManagerStatics>
{
	IContactManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactManagerStatics>>(m_ptr); }
};

struct IContactLaunchActionVerbsStatics :
	IInspectable,
	impl_IContactLaunchActionVerbsStatics<IContactLaunchActionVerbsStatics>
{
	IContactLaunchActionVerbsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactLaunchActionVerbsStatics>>(m_ptr); }
};

struct IContactPicker :
	IInspectable,
	impl_IContactPicker<IContactPicker>
{
	IContactPicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPicker>>(m_ptr); }
};

struct IContactPicker2 :
	IInspectable,
	impl_IContactPicker2<IContactPicker2>
{
	IContactPicker2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPicker2>>(m_ptr); }
};

struct IContactSignificantOther :
	IInspectable,
	impl_IContactSignificantOther<IContactSignificantOther>
{
	IContactSignificantOther(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactSignificantOther>>(m_ptr); }
};

struct IContactWebsite :
	IInspectable,
	impl_IContactWebsite<IContactWebsite>
{
	IContactWebsite(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactWebsite>>(m_ptr); }
};

struct IContactEmail :
	IInspectable,
	impl_IContactEmail<IContactEmail>
{
	IContactEmail(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactEmail>>(m_ptr); }
};

struct IContactPhone :
	IInspectable,
	impl_IContactPhone<IContactPhone>
{
	IContactPhone(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPhone>>(m_ptr); }
};

struct IContactAddress :
	IInspectable,
	impl_IContactAddress<IContactAddress>
{
	IContactAddress(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactAddress>>(m_ptr); }
};

struct IContactConnectedServiceAccount :
	IInspectable,
	impl_IContactConnectedServiceAccount<IContactConnectedServiceAccount>
{
	IContactConnectedServiceAccount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactConnectedServiceAccount>>(m_ptr); }
};

struct IContactDate :
	IInspectable,
	impl_IContactDate<IContactDate>
{
	IContactDate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactDate>>(m_ptr); }
};

struct IContactName :
	IInspectable,
	impl_IContactName<IContactName>
{
	IContactName(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactName>>(m_ptr); }
};

struct IContactJobInfo :
	IInspectable,
	impl_IContactJobInfo<IContactJobInfo>
{
	IContactJobInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactJobInfo>>(m_ptr); }
};

struct IContact :
	IInspectable,
	impl_IContact<IContact>
{
	IContact(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContact>>(m_ptr); }
};

struct IContact2 :
	IInspectable,
	impl_IContact2<IContact2>,
	Requires<IContact2, Windows::ApplicationModel::Contacts::IContact>
{
	IContact2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContact2>>(m_ptr); }
};

struct IContactCardDelayedDataLoader :
	IInspectable,
	impl_IContactCardDelayedDataLoader<IContactCardDelayedDataLoader>
{
	IContactCardDelayedDataLoader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactCardDelayedDataLoader>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

struct IContactRemovedEventArgs :
	IInspectable,
	impl_IContactRemovedEventArgs<IContactRemovedEventArgs>
{
	IContactRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactRemovedEventArgs>>(m_ptr); }
};

struct IContactPickerUI :
	IInspectable,
	impl_IContactPickerUI<IContactPickerUI>
{
	IContactPickerUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPickerUI>>(m_ptr); }
};

struct IContactPickerUI2 :
	IInspectable,
	impl_IContactPickerUI2<IContactPickerUI2>
{
	IContactPickerUI2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContactPickerUI2>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

struct IFrameworkView :
	IInspectable,
	impl_IFrameworkView<IFrameworkView>
{
	IFrameworkView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkView>>(m_ptr); }
};

struct IFrameworkViewSource :
	IInspectable,
	impl_IFrameworkViewSource<IFrameworkViewSource>
{
	IFrameworkViewSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFrameworkViewSource>>(m_ptr); }
};

struct ICoreApplication :
	IInspectable,
	impl_ICoreApplication<ICoreApplication>
{
	ICoreApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplication>>(m_ptr); }
};

struct ICoreApplicationUseCount :
	IInspectable,
	impl_ICoreApplicationUseCount<ICoreApplicationUseCount>
{
	ICoreApplicationUseCount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationUseCount>>(m_ptr); }
};

struct ICoreApplicationExit :
	IInspectable,
	impl_ICoreApplicationExit<ICoreApplicationExit>
{
	ICoreApplicationExit(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationExit>>(m_ptr); }
};

struct ICoreImmersiveApplication :
	IInspectable,
	impl_ICoreImmersiveApplication<ICoreImmersiveApplication>
{
	ICoreImmersiveApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreImmersiveApplication>>(m_ptr); }
};

struct ICoreImmersiveApplication2 :
	IInspectable,
	impl_ICoreImmersiveApplication2<ICoreImmersiveApplication2>
{
	ICoreImmersiveApplication2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreImmersiveApplication2>>(m_ptr); }
};

struct ICoreApplicationUnhandledError :
	IInspectable,
	impl_ICoreApplicationUnhandledError<ICoreApplicationUnhandledError>
{
	ICoreApplicationUnhandledError(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationUnhandledError>>(m_ptr); }
};

struct ICoreApplicationView :
	IInspectable,
	impl_ICoreApplicationView<ICoreApplicationView>
{
	ICoreApplicationView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationView>>(m_ptr); }
};

struct ICoreApplicationView2 :
	IInspectable,
	impl_ICoreApplicationView2<ICoreApplicationView2>
{
	ICoreApplicationView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreApplicationView2>>(m_ptr); }
};

struct IUnhandledErrorDetectedEventArgs :
	IInspectable,
	impl_IUnhandledErrorDetectedEventArgs<IUnhandledErrorDetectedEventArgs>
{
	IUnhandledErrorDetectedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnhandledErrorDetectedEventArgs>>(m_ptr); }
};

struct IUnhandledError :
	IInspectable,
	impl_IUnhandledError<IUnhandledError>
{
	IUnhandledError(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnhandledError>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

struct IDataProviderHandler :
	IUnknown,
	impl_IDataProviderHandler<IDataProviderHandler>
{
	IDataProviderHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProviderHandler>>(m_ptr); }
};

struct IStandardDataFormatsStatics :
	IInspectable,
	impl_IStandardDataFormatsStatics<IStandardDataFormatsStatics>
{
	IStandardDataFormatsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStandardDataFormatsStatics>>(m_ptr); }
};

struct IStandardDataFormatsStatics2 :
	IInspectable,
	impl_IStandardDataFormatsStatics2<IStandardDataFormatsStatics2>
{
	IStandardDataFormatsStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStandardDataFormatsStatics2>>(m_ptr); }
};

struct IDataPackagePropertySetView :
	IInspectable,
	impl_IDataPackagePropertySetView<IDataPackagePropertySetView>,
	Requires<IDataPackagePropertySetView, Windows::Foundation::Collections::IMapView<String, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>>>
{
	IDataPackagePropertySetView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackagePropertySetView>>(m_ptr); }
};

struct IDataPackagePropertySetView2 :
	IInspectable,
	impl_IDataPackagePropertySetView2<IDataPackagePropertySetView2>
{
	IDataPackagePropertySetView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackagePropertySetView2>>(m_ptr); }
};

struct IDataPackagePropertySet :
	IInspectable,
	impl_IDataPackagePropertySet<IDataPackagePropertySet>,
	Requires<IDataPackagePropertySet, Windows::Foundation::Collections::IMap<String, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>>>
{
	IDataPackagePropertySet(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackagePropertySet>>(m_ptr); }
};

struct IDataPackagePropertySet2 :
	IInspectable,
	impl_IDataPackagePropertySet2<IDataPackagePropertySet2>
{
	IDataPackagePropertySet2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackagePropertySet2>>(m_ptr); }
};

struct IDataProviderDeferral :
	IInspectable,
	impl_IDataProviderDeferral<IDataProviderDeferral>
{
	IDataProviderDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProviderDeferral>>(m_ptr); }
};

struct IDataProviderRequest :
	IInspectable,
	impl_IDataProviderRequest<IDataProviderRequest>
{
	IDataProviderRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProviderRequest>>(m_ptr); }
};

struct IOperationCompletedEventArgs :
	IInspectable,
	impl_IOperationCompletedEventArgs<IOperationCompletedEventArgs>
{
	IOperationCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOperationCompletedEventArgs>>(m_ptr); }
};

struct IDataPackageView :
	IInspectable,
	impl_IDataPackageView<IDataPackageView>
{
	IDataPackageView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackageView>>(m_ptr); }
};

struct IDataPackageView2 :
	IInspectable,
	impl_IDataPackageView2<IDataPackageView2>
{
	IDataPackageView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackageView2>>(m_ptr); }
};

struct IDataPackage :
	IInspectable,
	impl_IDataPackage<IDataPackage>
{
	IDataPackage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackage>>(m_ptr); }
};

struct IDataPackage2 :
	IInspectable,
	impl_IDataPackage2<IDataPackage2>
{
	IDataPackage2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPackage2>>(m_ptr); }
};

struct IHtmlFormatHelperStatics :
	IInspectable,
	impl_IHtmlFormatHelperStatics<IHtmlFormatHelperStatics>
{
	IHtmlFormatHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHtmlFormatHelperStatics>>(m_ptr); }
};

struct IClipboardStatics :
	IInspectable,
	impl_IClipboardStatics<IClipboardStatics>
{
	IClipboardStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClipboardStatics>>(m_ptr); }
};

struct IDataRequestDeferral :
	IInspectable,
	impl_IDataRequestDeferral<IDataRequestDeferral>
{
	IDataRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataRequestDeferral>>(m_ptr); }
};

struct IDataRequest :
	IInspectable,
	impl_IDataRequest<IDataRequest>
{
	IDataRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataRequest>>(m_ptr); }
};

struct IDataRequestedEventArgs :
	IInspectable,
	impl_IDataRequestedEventArgs<IDataRequestedEventArgs>
{
	IDataRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataRequestedEventArgs>>(m_ptr); }
};

struct ITargetApplicationChosenEventArgs :
	IInspectable,
	impl_ITargetApplicationChosenEventArgs<ITargetApplicationChosenEventArgs>
{
	ITargetApplicationChosenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITargetApplicationChosenEventArgs>>(m_ptr); }
};

struct IDataTransferManager :
	IInspectable,
	impl_IDataTransferManager<IDataTransferManager>
{
	IDataTransferManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTransferManager>>(m_ptr); }
};

struct IDataTransferManagerStatics :
	IInspectable,
	impl_IDataTransferManagerStatics<IDataTransferManagerStatics>
{
	IDataTransferManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataTransferManagerStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

struct IQuickLink :
	IInspectable,
	impl_IQuickLink<IQuickLink>
{
	IQuickLink(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQuickLink>>(m_ptr); }
};

struct IShareOperation :
	IInspectable,
	impl_IShareOperation<IShareOperation>
{
	IShareOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IShareOperation>>(m_ptr); }
};

struct IShareOperation2 :
	IInspectable,
	impl_IShareOperation2<IShareOperation2>
{
	IShareOperation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IShareOperation2>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Infrastructure {

struct ISetWindowWithWindowFactory :
	IInspectable,
	impl_ISetWindowWithWindowFactory<ISetWindowWithWindowFactory>
{
	ISetWindowWithWindowFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetWindowWithWindowFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

struct IResourceLoader :
	IInspectable,
	impl_IResourceLoader<IResourceLoader>
{
	IResourceLoader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceLoader>>(m_ptr); }
};

struct IResourceLoader2 :
	IInspectable,
	impl_IResourceLoader2<IResourceLoader2>
{
	IResourceLoader2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceLoader2>>(m_ptr); }
};

struct IResourceLoaderStatics2 :
	IInspectable,
	impl_IResourceLoaderStatics2<IResourceLoaderStatics2>
{
	IResourceLoaderStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceLoaderStatics2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

struct IResourceManager :
	IInspectable,
	impl_IResourceManager<IResourceManager>
{
	IResourceManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceManager>>(m_ptr); }
};

struct IResourceManagerStatics :
	IInspectable,
	impl_IResourceManagerStatics<IResourceManagerStatics>
{
	IResourceManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceManagerStatics>>(m_ptr); }
};

struct IResourceQualifier :
	IInspectable,
	impl_IResourceQualifier<IResourceQualifier>
{
	IResourceQualifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceQualifier>>(m_ptr); }
};

struct IResourceContext :
	IInspectable,
	impl_IResourceContext<IResourceContext>
{
	IResourceContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceContext>>(m_ptr); }
};

struct IResourceContextStatics2 :
	IInspectable,
	impl_IResourceContextStatics2<IResourceContextStatics2>
{
	IResourceContextStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceContextStatics2>>(m_ptr); }
};

struct IResourceCandidate :
	IInspectable,
	impl_IResourceCandidate<IResourceCandidate>
{
	IResourceCandidate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceCandidate>>(m_ptr); }
};

struct INamedResource :
	IInspectable,
	impl_INamedResource<INamedResource>
{
	INamedResource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INamedResource>>(m_ptr); }
};

struct IResourceMap :
	IInspectable,
	impl_IResourceMap<IResourceMap>,
	Requires<IResourceMap, Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::NamedResource>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::NamedResource>>>
{
	IResourceMap(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceMap>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

struct IResourceIndexer :
	IInspectable,
	impl_IResourceIndexer<IResourceIndexer>
{
	IResourceIndexer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceIndexer>>(m_ptr); }
};

struct IResourceIndexerFactory :
	IInspectable,
	impl_IResourceIndexerFactory<IResourceIndexerFactory>
{
	IResourceIndexerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceIndexerFactory>>(m_ptr); }
};

struct IResourceIndexerFactory2 :
	IInspectable,
	impl_IResourceIndexerFactory2<IResourceIndexerFactory2>
{
	IResourceIndexerFactory2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceIndexerFactory2>>(m_ptr); }
};

struct IIndexedResourceQualifier :
	IInspectable,
	impl_IIndexedResourceQualifier<IIndexedResourceQualifier>
{
	IIndexedResourceQualifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIndexedResourceQualifier>>(m_ptr); }
};

struct IIndexedResourceCandidate :
	IInspectable,
	impl_IIndexedResourceCandidate<IIndexedResourceCandidate>
{
	IIndexedResourceCandidate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIndexedResourceCandidate>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

struct ISearchPaneQueryLinguisticDetails :
	IInspectable,
	impl_ISearchPaneQueryLinguisticDetails<ISearchPaneQueryLinguisticDetails>
{
	ISearchPaneQueryLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneQueryLinguisticDetails>>(m_ptr); }
};

struct ISearchPaneVisibilityChangedEventArgs :
	IInspectable,
	impl_ISearchPaneVisibilityChangedEventArgs<ISearchPaneVisibilityChangedEventArgs>
{
	ISearchPaneVisibilityChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneVisibilityChangedEventArgs>>(m_ptr); }
};

struct ISearchPaneQueryChangedEventArgs :
	IInspectable,
	impl_ISearchPaneQueryChangedEventArgs<ISearchPaneQueryChangedEventArgs>
{
	ISearchPaneQueryChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneQueryChangedEventArgs>>(m_ptr); }
};

struct ISearchPaneQuerySubmittedEventArgs :
	IInspectable,
	impl_ISearchPaneQuerySubmittedEventArgs<ISearchPaneQuerySubmittedEventArgs>
{
	ISearchPaneQuerySubmittedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneQuerySubmittedEventArgs>>(m_ptr); }
};

struct ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails :
	IInspectable,
	impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails<ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>
{
	ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>>(m_ptr); }
};

struct ISearchPaneResultSuggestionChosenEventArgs :
	IInspectable,
	impl_ISearchPaneResultSuggestionChosenEventArgs<ISearchPaneResultSuggestionChosenEventArgs>
{
	ISearchPaneResultSuggestionChosenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneResultSuggestionChosenEventArgs>>(m_ptr); }
};

struct ISearchSuggestionCollection :
	IInspectable,
	impl_ISearchSuggestionCollection<ISearchSuggestionCollection>
{
	ISearchSuggestionCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchSuggestionCollection>>(m_ptr); }
};

struct ISearchPaneSuggestionsRequestDeferral :
	IInspectable,
	impl_ISearchPaneSuggestionsRequestDeferral<ISearchPaneSuggestionsRequestDeferral>
{
	ISearchPaneSuggestionsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneSuggestionsRequestDeferral>>(m_ptr); }
};

struct ISearchPaneSuggestionsRequest :
	IInspectable,
	impl_ISearchPaneSuggestionsRequest<ISearchPaneSuggestionsRequest>
{
	ISearchPaneSuggestionsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneSuggestionsRequest>>(m_ptr); }
};

struct ISearchPaneSuggestionsRequestedEventArgs :
	IInspectable,
	impl_ISearchPaneSuggestionsRequestedEventArgs<ISearchPaneSuggestionsRequestedEventArgs>,
	Requires<ISearchPaneSuggestionsRequestedEventArgs, Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs>
{
	ISearchPaneSuggestionsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneSuggestionsRequestedEventArgs>>(m_ptr); }
};

struct ILocalContentSuggestionSettings :
	IInspectable,
	impl_ILocalContentSuggestionSettings<ILocalContentSuggestionSettings>
{
	ILocalContentSuggestionSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILocalContentSuggestionSettings>>(m_ptr); }
};

struct ISearchPaneStatics :
	IInspectable,
	impl_ISearchPaneStatics<ISearchPaneStatics>
{
	ISearchPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneStatics>>(m_ptr); }
};

struct ISearchPaneStaticsWithHideThisApplication :
	IInspectable,
	impl_ISearchPaneStaticsWithHideThisApplication<ISearchPaneStaticsWithHideThisApplication>
{
	ISearchPaneStaticsWithHideThisApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPaneStaticsWithHideThisApplication>>(m_ptr); }
};

struct ISearchPane :
	IInspectable,
	impl_ISearchPane<ISearchPane>
{
	ISearchPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchPane>>(m_ptr); }
};

struct ISearchQueryLinguisticDetailsFactory :
	IInspectable,
	impl_ISearchQueryLinguisticDetailsFactory<ISearchQueryLinguisticDetailsFactory>
{
	ISearchQueryLinguisticDetailsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchQueryLinguisticDetailsFactory>>(m_ptr); }
};

struct ISearchQueryLinguisticDetails :
	IInspectable,
	impl_ISearchQueryLinguisticDetails<ISearchQueryLinguisticDetails>
{
	ISearchQueryLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchQueryLinguisticDetails>>(m_ptr); }
};

struct ISearchSuggestionsRequestDeferral :
	IInspectable,
	impl_ISearchSuggestionsRequestDeferral<ISearchSuggestionsRequestDeferral>
{
	ISearchSuggestionsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchSuggestionsRequestDeferral>>(m_ptr); }
};

struct ISearchSuggestionsRequest :
	IInspectable,
	impl_ISearchSuggestionsRequest<ISearchSuggestionsRequest>
{
	ISearchSuggestionsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISearchSuggestionsRequest>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

struct ILicenseChangedEventHandler :
	IUnknown,
	impl_ILicenseChangedEventHandler<ILicenseChangedEventHandler>
{
	ILicenseChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILicenseChangedEventHandler>>(m_ptr); }
};

struct ICurrentApp :
	IInspectable,
	impl_ICurrentApp<ICurrentApp>
{
	ICurrentApp(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentApp>>(m_ptr); }
};

struct ICurrentAppWithConsumables :
	IInspectable,
	impl_ICurrentAppWithConsumables<ICurrentAppWithConsumables>
{
	ICurrentAppWithConsumables(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentAppWithConsumables>>(m_ptr); }
};

struct ICurrentAppSimulator :
	IInspectable,
	impl_ICurrentAppSimulator<ICurrentAppSimulator>
{
	ICurrentAppSimulator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentAppSimulator>>(m_ptr); }
};

struct ICurrentAppSimulatorWithConsumables :
	IInspectable,
	impl_ICurrentAppSimulatorWithConsumables<ICurrentAppSimulatorWithConsumables>
{
	ICurrentAppSimulatorWithConsumables(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentAppSimulatorWithConsumables>>(m_ptr); }
};

struct IPurchaseResults :
	IInspectable,
	impl_IPurchaseResults<IPurchaseResults>
{
	IPurchaseResults(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPurchaseResults>>(m_ptr); }
};

struct ILicenseInformation :
	IInspectable,
	impl_ILicenseInformation<ILicenseInformation>
{
	ILicenseInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILicenseInformation>>(m_ptr); }
};

struct IProductLicense :
	IInspectable,
	impl_IProductLicense<IProductLicense>
{
	IProductLicense(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductLicense>>(m_ptr); }
};

struct IListingInformation :
	IInspectable,
	impl_IListingInformation<IListingInformation>
{
	IListingInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IListingInformation>>(m_ptr); }
};

struct IProductListing :
	IInspectable,
	impl_IProductListing<IProductListing>
{
	IProductListing(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductListing>>(m_ptr); }
};

struct IProductListingWithConsumables :
	IInspectable,
	impl_IProductListingWithConsumables<IProductListingWithConsumables>
{
	IProductListingWithConsumables(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductListingWithConsumables>>(m_ptr); }
};

struct IUnfulfilledConsumable :
	IInspectable,
	impl_IUnfulfilledConsumable<IUnfulfilledConsumable>
{
	IUnfulfilledConsumable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnfulfilledConsumable>>(m_ptr); }
};

struct IProductPurchaseDisplayProperties :
	IInspectable,
	impl_IProductPurchaseDisplayProperties<IProductPurchaseDisplayProperties>
{
	IProductPurchaseDisplayProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductPurchaseDisplayProperties>>(m_ptr); }
};

struct IProductPurchaseDisplayPropertiesFactory :
	IInspectable,
	impl_IProductPurchaseDisplayPropertiesFactory<IProductPurchaseDisplayPropertiesFactory>
{
	IProductPurchaseDisplayPropertiesFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProductPurchaseDisplayPropertiesFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

struct IHtmlUtilities :
	IInspectable,
	impl_IHtmlUtilities<IHtmlUtilities>
{
	IHtmlUtilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHtmlUtilities>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

struct IJsonValue :
	IInspectable,
	impl_IJsonValue<IJsonValue>
{
	IJsonValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonValue>>(m_ptr); }
};

struct IJsonValueStatics :
	IInspectable,
	impl_IJsonValueStatics<IJsonValueStatics>
{
	IJsonValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonValueStatics>>(m_ptr); }
};

struct IJsonObject :
	IInspectable,
	impl_IJsonObject<IJsonObject>,
	Requires<IJsonObject, Windows::Data::Json::IJsonValue>
{
	IJsonObject(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonObject>>(m_ptr); }
};

struct IJsonObjectWithDefaultValues :
	IInspectable,
	impl_IJsonObjectWithDefaultValues<IJsonObjectWithDefaultValues>,
	Requires<IJsonObjectWithDefaultValues, Windows::Data::Json::IJsonObject, Windows::Data::Json::IJsonValue>
{
	IJsonObjectWithDefaultValues(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonObjectWithDefaultValues>>(m_ptr); }
	using impl_IJsonObject::GetNamedValue;
	using impl_IJsonObject::GetNamedObject;
	using impl_IJsonObject::GetNamedArray;
	using impl_IJsonObject::GetNamedString;
	using impl_IJsonObject::GetNamedNumber;
	using impl_IJsonObject::GetNamedBoolean;
	using impl_IJsonObjectWithDefaultValues::GetNamedValue;
	using impl_IJsonObjectWithDefaultValues::GetNamedObject;
	using impl_IJsonObjectWithDefaultValues::GetNamedString;
	using impl_IJsonObjectWithDefaultValues::GetNamedArray;
	using impl_IJsonObjectWithDefaultValues::GetNamedNumber;
	using impl_IJsonObjectWithDefaultValues::GetNamedBoolean;
};

struct IJsonObjectStatics :
	IInspectable,
	impl_IJsonObjectStatics<IJsonObjectStatics>
{
	IJsonObjectStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonObjectStatics>>(m_ptr); }
};

struct IJsonArray :
	IInspectable,
	impl_IJsonArray<IJsonArray>,
	Requires<IJsonArray, Windows::Data::Json::IJsonValue>
{
	IJsonArray(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonArray>>(m_ptr); }
};

struct IJsonArrayStatics :
	IInspectable,
	impl_IJsonArrayStatics<IJsonArrayStatics>
{
	IJsonArrayStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonArrayStatics>>(m_ptr); }
};

struct IJsonErrorStatics2 :
	IInspectable,
	impl_IJsonErrorStatics2<IJsonErrorStatics2>
{
	IJsonErrorStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJsonErrorStatics2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

struct IPdfPageDimensions :
	IInspectable,
	impl_IPdfPageDimensions<IPdfPageDimensions>
{
	IPdfPageDimensions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfPageDimensions>>(m_ptr); }
};

struct IPdfPageRenderOptions :
	IInspectable,
	impl_IPdfPageRenderOptions<IPdfPageRenderOptions>
{
	IPdfPageRenderOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfPageRenderOptions>>(m_ptr); }
};

struct IPdfPage :
	IInspectable,
	impl_IPdfPage<IPdfPage>
{
	IPdfPage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfPage>>(m_ptr); }
};

struct IPdfDocument :
	IInspectable,
	impl_IPdfDocument<IPdfDocument>
{
	IPdfDocument(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfDocument>>(m_ptr); }
};

struct IPdfDocumentStatics :
	IInspectable,
	impl_IPdfDocumentStatics<IPdfDocumentStatics>
{
	IPdfDocumentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPdfDocumentStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

struct IWordSegmentsTokenizingHandler :
	IUnknown,
	impl_IWordSegmentsTokenizingHandler<IWordSegmentsTokenizingHandler>
{
	IWordSegmentsTokenizingHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWordSegmentsTokenizingHandler>>(m_ptr); }
};

struct ISelectableWordSegmentsTokenizingHandler :
	IUnknown,
	impl_ISelectableWordSegmentsTokenizingHandler<ISelectableWordSegmentsTokenizingHandler>
{
	ISelectableWordSegmentsTokenizingHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectableWordSegmentsTokenizingHandler>>(m_ptr); }
};

struct ISemanticTextQueryFactory :
	IInspectable,
	impl_ISemanticTextQueryFactory<ISemanticTextQueryFactory>
{
	ISemanticTextQueryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticTextQueryFactory>>(m_ptr); }
};

struct ISemanticTextQuery :
	IInspectable,
	impl_ISemanticTextQuery<ISemanticTextQuery>
{
	ISemanticTextQuery(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISemanticTextQuery>>(m_ptr); }
};

struct IUnicodeCharactersStatics :
	IInspectable,
	impl_IUnicodeCharactersStatics<IUnicodeCharactersStatics>
{
	IUnicodeCharactersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnicodeCharactersStatics>>(m_ptr); }
};

struct IAlternateWordForm :
	IInspectable,
	impl_IAlternateWordForm<IAlternateWordForm>
{
	IAlternateWordForm(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAlternateWordForm>>(m_ptr); }
};

struct ISelectableWordSegment :
	IInspectable,
	impl_ISelectableWordSegment<ISelectableWordSegment>
{
	ISelectableWordSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectableWordSegment>>(m_ptr); }
};

struct IWordSegment :
	IInspectable,
	impl_IWordSegment<IWordSegment>
{
	IWordSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWordSegment>>(m_ptr); }
};

struct IWordsSegmenter :
	IInspectable,
	impl_IWordsSegmenter<IWordsSegmenter>
{
	IWordsSegmenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWordsSegmenter>>(m_ptr); }
};

struct IWordsSegmenterFactory :
	IInspectable,
	impl_IWordsSegmenterFactory<IWordsSegmenterFactory>
{
	IWordsSegmenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWordsSegmenterFactory>>(m_ptr); }
};

struct ISelectableWordsSegmenter :
	IInspectable,
	impl_ISelectableWordsSegmenter<ISelectableWordsSegmenter>
{
	ISelectableWordsSegmenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectableWordsSegmenter>>(m_ptr); }
};

struct ISelectableWordsSegmenterFactory :
	IInspectable,
	impl_ISelectableWordsSegmenterFactory<ISelectableWordsSegmenterFactory>
{
	ISelectableWordsSegmenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISelectableWordsSegmenterFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

struct IXmlNodeSelector :
	IInspectable,
	impl_IXmlNodeSelector<IXmlNodeSelector>
{
	IXmlNodeSelector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNodeSelector>>(m_ptr); }
};

struct IXmlNodeSerializer :
	IInspectable,
	impl_IXmlNodeSerializer<IXmlNodeSerializer>
{
	IXmlNodeSerializer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNodeSerializer>>(m_ptr); }
};

struct IXmlNode :
	IInspectable,
	impl_IXmlNode<IXmlNode>,
	Requires<IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlNode(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNode>>(m_ptr); }
};

struct IXmlDomImplementation :
	IInspectable,
	impl_IXmlDomImplementation<IXmlDomImplementation>
{
	IXmlDomImplementation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDomImplementation>>(m_ptr); }
};

struct IXmlDocumentType :
	IInspectable,
	impl_IXmlDocumentType<IXmlDocumentType>,
	Requires<IXmlDocumentType, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlDocumentType(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocumentType>>(m_ptr); }
};

struct IXmlAttribute :
	IInspectable,
	impl_IXmlAttribute<IXmlAttribute>,
	Requires<IXmlAttribute, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlAttribute(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlAttribute>>(m_ptr); }
};

struct IXmlDocumentFragment :
	IInspectable,
	impl_IXmlDocumentFragment<IXmlDocumentFragment>,
	Requires<IXmlDocumentFragment, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlDocumentFragment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocumentFragment>>(m_ptr); }
};

struct IXmlElement :
	IInspectable,
	impl_IXmlElement<IXmlElement>,
	Requires<IXmlElement, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlElement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlElement>>(m_ptr); }
};

struct IDtdNotation :
	IInspectable,
	impl_IDtdNotation<IDtdNotation>,
	Requires<IDtdNotation, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IDtdNotation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDtdNotation>>(m_ptr); }
};

struct IDtdEntity :
	IInspectable,
	impl_IDtdEntity<IDtdEntity>,
	Requires<IDtdEntity, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IDtdEntity(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDtdEntity>>(m_ptr); }
};

struct IXmlEntityReference :
	IInspectable,
	impl_IXmlEntityReference<IXmlEntityReference>,
	Requires<IXmlEntityReference, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlEntityReference(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlEntityReference>>(m_ptr); }
};

struct IXmlProcessingInstruction :
	IInspectable,
	impl_IXmlProcessingInstruction<IXmlProcessingInstruction>,
	Requires<IXmlProcessingInstruction, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlProcessingInstruction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlProcessingInstruction>>(m_ptr); }
};

struct IXmlCharacterData :
	IInspectable,
	impl_IXmlCharacterData<IXmlCharacterData>,
	Requires<IXmlCharacterData, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlCharacterData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlCharacterData>>(m_ptr); }
};

struct IXmlComment :
	IInspectable,
	impl_IXmlComment<IXmlComment>,
	Requires<IXmlComment, Windows::Data::Xml::Dom::IXmlCharacterData, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlComment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlComment>>(m_ptr); }
};

struct IXmlText :
	IInspectable,
	impl_IXmlText<IXmlText>,
	Requires<IXmlText, Windows::Data::Xml::Dom::IXmlCharacterData, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlText(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlText>>(m_ptr); }
};

struct IXmlCDataSection :
	IInspectable,
	impl_IXmlCDataSection<IXmlCDataSection>,
	Requires<IXmlCDataSection, Windows::Data::Xml::Dom::IXmlText, Windows::Data::Xml::Dom::IXmlCharacterData, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlCDataSection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlCDataSection>>(m_ptr); }
};

struct IXmlDocument :
	IInspectable,
	impl_IXmlDocument<IXmlDocument>,
	Requires<IXmlDocument, Windows::Data::Xml::Dom::IXmlNode, Windows::Data::Xml::Dom::IXmlNodeSelector, Windows::Data::Xml::Dom::IXmlNodeSerializer>
{
	IXmlDocument(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocument>>(m_ptr); }
};

struct IXmlNamedNodeMap :
	IInspectable,
	impl_IXmlNamedNodeMap<IXmlNamedNodeMap>,
	Requires<IXmlNamedNodeMap, Windows::Foundation::Collections::IVectorView<Windows::Data::Xml::Dom::IXmlNode>, Windows::Foundation::Collections::IIterable<Windows::Data::Xml::Dom::IXmlNode>>
{
	IXmlNamedNodeMap(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNamedNodeMap>>(m_ptr); }
};

struct IXmlNodeList :
	IInspectable,
	impl_IXmlNodeList<IXmlNodeList>,
	Requires<IXmlNodeList, Windows::Foundation::Collections::IVectorView<Windows::Data::Xml::Dom::IXmlNode>, Windows::Foundation::Collections::IIterable<Windows::Data::Xml::Dom::IXmlNode>>
{
	IXmlNodeList(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlNodeList>>(m_ptr); }
};

struct IXmlLoadSettings :
	IInspectable,
	impl_IXmlLoadSettings<IXmlLoadSettings>
{
	IXmlLoadSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlLoadSettings>>(m_ptr); }
};

struct IXmlDocumentIO :
	IInspectable,
	impl_IXmlDocumentIO<IXmlDocumentIO>
{
	IXmlDocumentIO(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocumentIO>>(m_ptr); }
};

struct IXmlDocumentStatics :
	IInspectable,
	impl_IXmlDocumentStatics<IXmlDocumentStatics>
{
	IXmlDocumentStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXmlDocumentStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

struct IXsltProcessor :
	IInspectable,
	impl_IXsltProcessor<IXsltProcessor>
{
	IXsltProcessor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXsltProcessor>>(m_ptr); }
};

struct IXsltProcessorFactory :
	IInspectable,
	impl_IXsltProcessorFactory<IXsltProcessorFactory>
{
	IXsltProcessorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IXsltProcessorFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

struct IDeviceUseDetails :
	IInspectable,
	impl_IDeviceUseDetails<IDeviceUseDetails>
{
	IDeviceUseDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceUseDetails>>(m_ptr); }
};

struct IDeviceServicingDetails :
	IInspectable,
	impl_IDeviceServicingDetails<IDeviceServicingDetails>
{
	IDeviceServicingDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceServicingDetails>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

struct IKnownDeviceTypesStatics :
	IInspectable,
	impl_IKnownDeviceTypesStatics<IKnownDeviceTypesStatics>
{
	IKnownDeviceTypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownDeviceTypesStatics>>(m_ptr); }
};

struct IIOControlCode :
	IInspectable,
	impl_IIOControlCode<IIOControlCode>
{
	IIOControlCode(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIOControlCode>>(m_ptr); }
};

struct IIOControlCodeFactory :
	IInspectable,
	impl_IIOControlCodeFactory<IIOControlCodeFactory>
{
	IIOControlCodeFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIOControlCodeFactory>>(m_ptr); }
};

struct ICustomDeviceStatics :
	IInspectable,
	impl_ICustomDeviceStatics<ICustomDeviceStatics>
{
	ICustomDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomDeviceStatics>>(m_ptr); }
};

struct ICustomDevice :
	IInspectable,
	impl_ICustomDevice<ICustomDevice>
{
	ICustomDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICustomDevice>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

struct IEnclosureLocation :
	IInspectable,
	impl_IEnclosureLocation<IEnclosureLocation>
{
	IEnclosureLocation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEnclosureLocation>>(m_ptr); }
};

struct IDeviceInformationUpdate :
	IInspectable,
	impl_IDeviceInformationUpdate<IDeviceInformationUpdate>
{
	IDeviceInformationUpdate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceInformationUpdate>>(m_ptr); }
};

struct IDeviceWatcher :
	IInspectable,
	impl_IDeviceWatcher<IDeviceWatcher>
{
	IDeviceWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceWatcher>>(m_ptr); }
};

struct IDeviceInformationStatics :
	IInspectable,
	impl_IDeviceInformationStatics<IDeviceInformationStatics>
{
	IDeviceInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceInformationStatics>>(m_ptr); }
};

struct IDeviceInformation :
	IInspectable,
	impl_IDeviceInformation<IDeviceInformation>
{
	IDeviceInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceInformation>>(m_ptr); }
};

struct IDeviceAccessChangedEventArgs :
	IInspectable,
	impl_IDeviceAccessChangedEventArgs<IDeviceAccessChangedEventArgs>
{
	IDeviceAccessChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceAccessChangedEventArgs>>(m_ptr); }
};

struct IDeviceAccessInformation :
	IInspectable,
	impl_IDeviceAccessInformation<IDeviceAccessInformation>
{
	IDeviceAccessInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceAccessInformation>>(m_ptr); }
};

struct IDeviceAccessInformationStatics :
	IInspectable,
	impl_IDeviceAccessInformationStatics<IDeviceAccessInformationStatics>
{
	IDeviceAccessInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceAccessInformationStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

struct IPnpObjectUpdate :
	IInspectable,
	impl_IPnpObjectUpdate<IPnpObjectUpdate>
{
	IPnpObjectUpdate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPnpObjectUpdate>>(m_ptr); }
};

struct IPnpObjectWatcher :
	IInspectable,
	impl_IPnpObjectWatcher<IPnpObjectWatcher>
{
	IPnpObjectWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPnpObjectWatcher>>(m_ptr); }
};

struct IPnpObjectStatics :
	IInspectable,
	impl_IPnpObjectStatics<IPnpObjectStatics>
{
	IPnpObjectStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPnpObjectStatics>>(m_ptr); }
};

struct IPnpObject :
	IInspectable,
	impl_IPnpObject<IPnpObject>
{
	IPnpObject(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPnpObject>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

struct IGeoshape :
	IInspectable,
	impl_IGeoshape<IGeoshape>
{
	IGeoshape(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeoshape>>(m_ptr); }
};

struct IGeopoint :
	IInspectable,
	impl_IGeopoint<IGeopoint>,
	Requires<IGeopoint, Windows::Devices::Geolocation::IGeoshape>
{
	IGeopoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeopoint>>(m_ptr); }
};

struct IGeopointFactory :
	IInspectable,
	impl_IGeopointFactory<IGeopointFactory>
{
	IGeopointFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeopointFactory>>(m_ptr); }
};

struct IGeocoordinateSatelliteData :
	IInspectable,
	impl_IGeocoordinateSatelliteData<IGeocoordinateSatelliteData>
{
	IGeocoordinateSatelliteData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocoordinateSatelliteData>>(m_ptr); }
};

struct IGeocoordinate :
	IInspectable,
	impl_IGeocoordinate<IGeocoordinate>
{
	IGeocoordinate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocoordinate>>(m_ptr); }
};

struct IGeocoordinateWithPositionData :
	IInspectable,
	impl_IGeocoordinateWithPositionData<IGeocoordinateWithPositionData>,
	Requires<IGeocoordinateWithPositionData, Windows::Devices::Geolocation::IGeocoordinate>
{
	IGeocoordinateWithPositionData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocoordinateWithPositionData>>(m_ptr); }
};

struct IGeocoordinateWithPoint :
	IInspectable,
	impl_IGeocoordinateWithPoint<IGeocoordinateWithPoint>
{
	IGeocoordinateWithPoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocoordinateWithPoint>>(m_ptr); }
};

struct ICivicAddress :
	IInspectable,
	impl_ICivicAddress<ICivicAddress>
{
	ICivicAddress(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICivicAddress>>(m_ptr); }
};

struct IGeoposition :
	IInspectable,
	impl_IGeoposition<IGeoposition>
{
	IGeoposition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeoposition>>(m_ptr); }
};

struct IPositionChangedEventArgs :
	IInspectable,
	impl_IPositionChangedEventArgs<IPositionChangedEventArgs>
{
	IPositionChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPositionChangedEventArgs>>(m_ptr); }
};

struct IStatusChangedEventArgs :
	IInspectable,
	impl_IStatusChangedEventArgs<IStatusChangedEventArgs>
{
	IStatusChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStatusChangedEventArgs>>(m_ptr); }
};

struct IGeolocator :
	IInspectable,
	impl_IGeolocator<IGeolocator>
{
	IGeolocator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeolocator>>(m_ptr); }
};

struct IGeolocatorWithScalarAccuracy :
	IInspectable,
	impl_IGeolocatorWithScalarAccuracy<IGeolocatorWithScalarAccuracy>,
	Requires<IGeolocatorWithScalarAccuracy, Windows::Devices::Geolocation::IGeolocator>
{
	IGeolocatorWithScalarAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeolocatorWithScalarAccuracy>>(m_ptr); }
};

struct IGeocircle :
	IInspectable,
	impl_IGeocircle<IGeocircle>,
	Requires<IGeocircle, Windows::Devices::Geolocation::IGeoshape>
{
	IGeocircle(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocircle>>(m_ptr); }
};

struct IGeocircleFactory :
	IInspectable,
	impl_IGeocircleFactory<IGeocircleFactory>
{
	IGeocircleFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeocircleFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

struct IGeofenceFactory :
	IInspectable,
	impl_IGeofenceFactory<IGeofenceFactory>
{
	IGeofenceFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofenceFactory>>(m_ptr); }
};

struct IGeofence :
	IInspectable,
	impl_IGeofence<IGeofence>
{
	IGeofence(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofence>>(m_ptr); }
};

struct IGeofenceStateChangeReport :
	IInspectable,
	impl_IGeofenceStateChangeReport<IGeofenceStateChangeReport>
{
	IGeofenceStateChangeReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofenceStateChangeReport>>(m_ptr); }
};

struct IGeofenceMonitorStatics :
	IInspectable,
	impl_IGeofenceMonitorStatics<IGeofenceMonitorStatics>
{
	IGeofenceMonitorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofenceMonitorStatics>>(m_ptr); }
};

struct IGeofenceMonitor :
	IInspectable,
	impl_IGeofenceMonitor<IGeofenceMonitor>
{
	IGeofenceMonitor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeofenceMonitor>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

struct IHidDeviceStatics :
	IInspectable,
	impl_IHidDeviceStatics<IHidDeviceStatics>
{
	IHidDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidDeviceStatics>>(m_ptr); }
};

struct IHidBooleanControlDescription :
	IInspectable,
	impl_IHidBooleanControlDescription<IHidBooleanControlDescription>
{
	IHidBooleanControlDescription(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidBooleanControlDescription>>(m_ptr); }
};

struct IHidNumericControlDescription :
	IInspectable,
	impl_IHidNumericControlDescription<IHidNumericControlDescription>
{
	IHidNumericControlDescription(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidNumericControlDescription>>(m_ptr); }
};

struct IHidCollection :
	IInspectable,
	impl_IHidCollection<IHidCollection>
{
	IHidCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidCollection>>(m_ptr); }
};

struct IHidInputReport :
	IInspectable,
	impl_IHidInputReport<IHidInputReport>
{
	IHidInputReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidInputReport>>(m_ptr); }
};

struct IHidOutputReport :
	IInspectable,
	impl_IHidOutputReport<IHidOutputReport>
{
	IHidOutputReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidOutputReport>>(m_ptr); }
};

struct IHidFeatureReport :
	IInspectable,
	impl_IHidFeatureReport<IHidFeatureReport>
{
	IHidFeatureReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidFeatureReport>>(m_ptr); }
};

struct IHidInputReportReceivedEventArgs :
	IInspectable,
	impl_IHidInputReportReceivedEventArgs<IHidInputReportReceivedEventArgs>
{
	IHidInputReportReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidInputReportReceivedEventArgs>>(m_ptr); }
};

struct IHidBooleanControl :
	IInspectable,
	impl_IHidBooleanControl<IHidBooleanControl>
{
	IHidBooleanControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidBooleanControl>>(m_ptr); }
};

struct IHidNumericControl :
	IInspectable,
	impl_IHidNumericControl<IHidNumericControl>
{
	IHidNumericControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidNumericControl>>(m_ptr); }
};

struct IHidDevice :
	IInspectable,
	impl_IHidDevice<IHidDevice>
{
	IHidDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHidDevice>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

struct IMouseCapabilities :
	IInspectable,
	impl_IMouseCapabilities<IMouseCapabilities>
{
	IMouseCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseCapabilities>>(m_ptr); }
};

struct IKeyboardCapabilities :
	IInspectable,
	impl_IKeyboardCapabilities<IKeyboardCapabilities>
{
	IKeyboardCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyboardCapabilities>>(m_ptr); }
};

struct ITouchCapabilities :
	IInspectable,
	impl_ITouchCapabilities<ITouchCapabilities>
{
	ITouchCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITouchCapabilities>>(m_ptr); }
};

struct IPointerDeviceStatics :
	IInspectable,
	impl_IPointerDeviceStatics<IPointerDeviceStatics>
{
	IPointerDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerDeviceStatics>>(m_ptr); }
};

struct IPointerDevice :
	IInspectable,
	impl_IPointerDevice<IPointerDevice>
{
	IPointerDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerDevice>>(m_ptr); }
};

struct IMouseEventArgs :
	IInspectable,
	impl_IMouseEventArgs<IMouseEventArgs>
{
	IMouseEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseEventArgs>>(m_ptr); }
};

struct IMouseDevice :
	IInspectable,
	impl_IMouseDevice<IMouseDevice>
{
	IMouseDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseDevice>>(m_ptr); }
};

struct IMouseDeviceStatics :
	IInspectable,
	impl_IMouseDeviceStatics<IMouseDeviceStatics>
{
	IMouseDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseDeviceStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

struct IUnifiedPosErrorData :
	IInspectable,
	impl_IUnifiedPosErrorData<IUnifiedPosErrorData>
{
	IUnifiedPosErrorData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnifiedPosErrorData>>(m_ptr); }
};

struct IBarcodeScannerStatusUpdatedEventArgs :
	IInspectable,
	impl_IBarcodeScannerStatusUpdatedEventArgs<IBarcodeScannerStatusUpdatedEventArgs>
{
	IBarcodeScannerStatusUpdatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerStatusUpdatedEventArgs>>(m_ptr); }
};

struct IBarcodeSymbologiesStatics :
	IInspectable,
	impl_IBarcodeSymbologiesStatics<IBarcodeSymbologiesStatics>
{
	IBarcodeSymbologiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeSymbologiesStatics>>(m_ptr); }
};

struct IBarcodeScannerDataReceivedEventArgs :
	IInspectable,
	impl_IBarcodeScannerDataReceivedEventArgs<IBarcodeScannerDataReceivedEventArgs>
{
	IBarcodeScannerDataReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerDataReceivedEventArgs>>(m_ptr); }
};

struct IBarcodeScannerReport :
	IInspectable,
	impl_IBarcodeScannerReport<IBarcodeScannerReport>
{
	IBarcodeScannerReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerReport>>(m_ptr); }
};

struct IBarcodeScannerErrorOccurredEventArgs :
	IInspectable,
	impl_IBarcodeScannerErrorOccurredEventArgs<IBarcodeScannerErrorOccurredEventArgs>
{
	IBarcodeScannerErrorOccurredEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerErrorOccurredEventArgs>>(m_ptr); }
};

struct IBarcodeScannerImagePreviewReceivedEventArgs :
	IInspectable,
	impl_IBarcodeScannerImagePreviewReceivedEventArgs<IBarcodeScannerImagePreviewReceivedEventArgs>
{
	IBarcodeScannerImagePreviewReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerImagePreviewReceivedEventArgs>>(m_ptr); }
};

struct IBarcodeScannerCapabilities :
	IInspectable,
	impl_IBarcodeScannerCapabilities<IBarcodeScannerCapabilities>
{
	IBarcodeScannerCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerCapabilities>>(m_ptr); }
};

struct IBarcodeScannerStatics :
	IInspectable,
	impl_IBarcodeScannerStatics<IBarcodeScannerStatics>
{
	IBarcodeScannerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScannerStatics>>(m_ptr); }
};

struct IBarcodeScanner :
	IInspectable,
	impl_IBarcodeScanner<IBarcodeScanner>
{
	IBarcodeScanner(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBarcodeScanner>>(m_ptr); }
};

struct IMagneticStripeReaderEncryptionAlgorithmsStatics :
	IInspectable,
	impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<IMagneticStripeReaderEncryptionAlgorithmsStatics>
{
	IMagneticStripeReaderEncryptionAlgorithmsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderEncryptionAlgorithmsStatics>>(m_ptr); }
};

struct IMagneticStripeReaderCardTypesStatics :
	IInspectable,
	impl_IMagneticStripeReaderCardTypesStatics<IMagneticStripeReaderCardTypesStatics>
{
	IMagneticStripeReaderCardTypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderCardTypesStatics>>(m_ptr); }
};

struct IMagneticStripeReaderTrackData :
	IInspectable,
	impl_IMagneticStripeReaderTrackData<IMagneticStripeReaderTrackData>
{
	IMagneticStripeReaderTrackData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderTrackData>>(m_ptr); }
};

struct IMagneticStripeReaderReport :
	IInspectable,
	impl_IMagneticStripeReaderReport<IMagneticStripeReaderReport>
{
	IMagneticStripeReaderReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderReport>>(m_ptr); }
};

struct IMagneticStripeReaderBankCardDataReceivedEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<IMagneticStripeReaderBankCardDataReceivedEventArgs>
{
	IMagneticStripeReaderBankCardDataReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderBankCardDataReceivedEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderAamvaCardDataReceivedEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<IMagneticStripeReaderAamvaCardDataReceivedEventArgs>
{
	IMagneticStripeReaderAamvaCardDataReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderAamvaCardDataReceivedEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs<IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>
{
	IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderErrorOccurredEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderErrorOccurredEventArgs<IMagneticStripeReaderErrorOccurredEventArgs>
{
	IMagneticStripeReaderErrorOccurredEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderErrorOccurredEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderStatusUpdatedEventArgs :
	IInspectable,
	impl_IMagneticStripeReaderStatusUpdatedEventArgs<IMagneticStripeReaderStatusUpdatedEventArgs>
{
	IMagneticStripeReaderStatusUpdatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderStatusUpdatedEventArgs>>(m_ptr); }
};

struct IMagneticStripeReaderCapabilities :
	IInspectable,
	impl_IMagneticStripeReaderCapabilities<IMagneticStripeReaderCapabilities>
{
	IMagneticStripeReaderCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderCapabilities>>(m_ptr); }
};

struct IMagneticStripeReaderStatics :
	IInspectable,
	impl_IMagneticStripeReaderStatics<IMagneticStripeReaderStatics>
{
	IMagneticStripeReaderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReaderStatics>>(m_ptr); }
};

struct IMagneticStripeReader :
	IInspectable,
	impl_IMagneticStripeReader<IMagneticStripeReader>
{
	IMagneticStripeReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMagneticStripeReader>>(m_ptr); }
};

struct IClaimedBarcodeScanner :
	IInspectable,
	impl_IClaimedBarcodeScanner<IClaimedBarcodeScanner>
{
	IClaimedBarcodeScanner(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClaimedBarcodeScanner>>(m_ptr); }
};

struct IClaimedMagneticStripeReader :
	IInspectable,
	impl_IClaimedMagneticStripeReader<IClaimedMagneticStripeReader>
{
	IClaimedMagneticStripeReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClaimedMagneticStripeReader>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

struct IStorageDeviceStatics :
	IInspectable,
	impl_IStorageDeviceStatics<IStorageDeviceStatics>
{
	IStorageDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageDeviceStatics>>(m_ptr); }
};

struct IServiceDeviceStatics :
	IInspectable,
	impl_IServiceDeviceStatics<IServiceDeviceStatics>
{
	IServiceDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IServiceDeviceStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

struct IPrintTaskConfigurationSaveRequestedDeferral :
	IInspectable,
	impl_IPrintTaskConfigurationSaveRequestedDeferral<IPrintTaskConfigurationSaveRequestedDeferral>
{
	IPrintTaskConfigurationSaveRequestedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskConfigurationSaveRequestedDeferral>>(m_ptr); }
};

struct IPrintTaskConfigurationSaveRequest :
	IInspectable,
	impl_IPrintTaskConfigurationSaveRequest<IPrintTaskConfigurationSaveRequest>
{
	IPrintTaskConfigurationSaveRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskConfigurationSaveRequest>>(m_ptr); }
};

struct IPrintTaskConfigurationSaveRequestedEventArgs :
	IInspectable,
	impl_IPrintTaskConfigurationSaveRequestedEventArgs<IPrintTaskConfigurationSaveRequestedEventArgs>
{
	IPrintTaskConfigurationSaveRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskConfigurationSaveRequestedEventArgs>>(m_ptr); }
};

struct IPrintTaskConfiguration :
	IInspectable,
	impl_IPrintTaskConfiguration<IPrintTaskConfiguration>
{
	IPrintTaskConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskConfiguration>>(m_ptr); }
};

struct IPrintNotificationEventDetails :
	IInspectable,
	impl_IPrintNotificationEventDetails<IPrintNotificationEventDetails>
{
	IPrintNotificationEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintNotificationEventDetails>>(m_ptr); }
};

struct IPrintExtensionContextStatic :
	IInspectable,
	impl_IPrintExtensionContextStatic<IPrintExtensionContextStatic>
{
	IPrintExtensionContextStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintExtensionContextStatic>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

struct IAccelerometerStatics :
	IInspectable,
	impl_IAccelerometerStatics<IAccelerometerStatics>
{
	IAccelerometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometerStatics>>(m_ptr); }
};

struct IAccelerometer :
	IInspectable,
	impl_IAccelerometer<IAccelerometer>
{
	IAccelerometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometer>>(m_ptr); }
};

struct IAccelerometerReading :
	IInspectable,
	impl_IAccelerometerReading<IAccelerometerReading>
{
	IAccelerometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometerReading>>(m_ptr); }
};

struct IAccelerometerReadingChangedEventArgs :
	IInspectable,
	impl_IAccelerometerReadingChangedEventArgs<IAccelerometerReadingChangedEventArgs>
{
	IAccelerometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometerReadingChangedEventArgs>>(m_ptr); }
};

struct IAccelerometerShakenEventArgs :
	IInspectable,
	impl_IAccelerometerShakenEventArgs<IAccelerometerShakenEventArgs>
{
	IAccelerometerShakenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccelerometerShakenEventArgs>>(m_ptr); }
};

struct IInclinometerStatics :
	IInspectable,
	impl_IInclinometerStatics<IInclinometerStatics>
{
	IInclinometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometerStatics>>(m_ptr); }
};

struct IInclinometer :
	IInspectable,
	impl_IInclinometer<IInclinometer>
{
	IInclinometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometer>>(m_ptr); }
};

struct IInclinometerReading :
	IInspectable,
	impl_IInclinometerReading<IInclinometerReading>
{
	IInclinometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometerReading>>(m_ptr); }
};

struct IInclinometerReadingYawAccuracy :
	IInspectable,
	impl_IInclinometerReadingYawAccuracy<IInclinometerReadingYawAccuracy>
{
	IInclinometerReadingYawAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometerReadingYawAccuracy>>(m_ptr); }
};

struct IInclinometerReadingChangedEventArgs :
	IInspectable,
	impl_IInclinometerReadingChangedEventArgs<IInclinometerReadingChangedEventArgs>
{
	IInclinometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInclinometerReadingChangedEventArgs>>(m_ptr); }
};

struct IGyrometerStatics :
	IInspectable,
	impl_IGyrometerStatics<IGyrometerStatics>
{
	IGyrometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGyrometerStatics>>(m_ptr); }
};

struct IGyrometer :
	IInspectable,
	impl_IGyrometer<IGyrometer>
{
	IGyrometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGyrometer>>(m_ptr); }
};

struct IGyrometerReading :
	IInspectable,
	impl_IGyrometerReading<IGyrometerReading>
{
	IGyrometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGyrometerReading>>(m_ptr); }
};

struct IGyrometerReadingChangedEventArgs :
	IInspectable,
	impl_IGyrometerReadingChangedEventArgs<IGyrometerReadingChangedEventArgs>
{
	IGyrometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGyrometerReadingChangedEventArgs>>(m_ptr); }
};

struct ICompassStatics :
	IInspectable,
	impl_ICompassStatics<ICompassStatics>
{
	ICompassStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompassStatics>>(m_ptr); }
};

struct ICompass :
	IInspectable,
	impl_ICompass<ICompass>
{
	ICompass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompass>>(m_ptr); }
};

struct ICompassReading :
	IInspectable,
	impl_ICompassReading<ICompassReading>
{
	ICompassReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompassReading>>(m_ptr); }
};

struct ICompassReadingHeadingAccuracy :
	IInspectable,
	impl_ICompassReadingHeadingAccuracy<ICompassReadingHeadingAccuracy>
{
	ICompassReadingHeadingAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompassReadingHeadingAccuracy>>(m_ptr); }
};

struct ICompassReadingChangedEventArgs :
	IInspectable,
	impl_ICompassReadingChangedEventArgs<ICompassReadingChangedEventArgs>
{
	ICompassReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompassReadingChangedEventArgs>>(m_ptr); }
};

struct ILightSensorStatics :
	IInspectable,
	impl_ILightSensorStatics<ILightSensorStatics>
{
	ILightSensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILightSensorStatics>>(m_ptr); }
};

struct ILightSensor :
	IInspectable,
	impl_ILightSensor<ILightSensor>
{
	ILightSensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILightSensor>>(m_ptr); }
};

struct ILightSensorReading :
	IInspectable,
	impl_ILightSensorReading<ILightSensorReading>
{
	ILightSensorReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILightSensorReading>>(m_ptr); }
};

struct ILightSensorReadingChangedEventArgs :
	IInspectable,
	impl_ILightSensorReadingChangedEventArgs<ILightSensorReadingChangedEventArgs>
{
	ILightSensorReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILightSensorReadingChangedEventArgs>>(m_ptr); }
};

struct ISensorRotationMatrix :
	IInspectable,
	impl_ISensorRotationMatrix<ISensorRotationMatrix>
{
	ISensorRotationMatrix(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISensorRotationMatrix>>(m_ptr); }
};

struct ISensorQuaternion :
	IInspectable,
	impl_ISensorQuaternion<ISensorQuaternion>
{
	ISensorQuaternion(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISensorQuaternion>>(m_ptr); }
};

struct IOrientationSensorStatics :
	IInspectable,
	impl_IOrientationSensorStatics<IOrientationSensorStatics>
{
	IOrientationSensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensorStatics>>(m_ptr); }
};

struct IOrientationSensor :
	IInspectable,
	impl_IOrientationSensor<IOrientationSensor>
{
	IOrientationSensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensor>>(m_ptr); }
};

struct IOrientationSensorReading :
	IInspectable,
	impl_IOrientationSensorReading<IOrientationSensorReading>
{
	IOrientationSensorReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensorReading>>(m_ptr); }
};

struct IOrientationSensorReadingYawAccuracy :
	IInspectable,
	impl_IOrientationSensorReadingYawAccuracy<IOrientationSensorReadingYawAccuracy>
{
	IOrientationSensorReadingYawAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensorReadingYawAccuracy>>(m_ptr); }
};

struct IOrientationSensorReadingChangedEventArgs :
	IInspectable,
	impl_IOrientationSensorReadingChangedEventArgs<IOrientationSensorReadingChangedEventArgs>
{
	IOrientationSensorReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOrientationSensorReadingChangedEventArgs>>(m_ptr); }
};

struct ISimpleOrientationSensorStatics :
	IInspectable,
	impl_ISimpleOrientationSensorStatics<ISimpleOrientationSensorStatics>
{
	ISimpleOrientationSensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISimpleOrientationSensorStatics>>(m_ptr); }
};

struct ISimpleOrientationSensor :
	IInspectable,
	impl_ISimpleOrientationSensor<ISimpleOrientationSensor>
{
	ISimpleOrientationSensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISimpleOrientationSensor>>(m_ptr); }
};

struct ISimpleOrientationSensorOrientationChangedEventArgs :
	IInspectable,
	impl_ISimpleOrientationSensorOrientationChangedEventArgs<ISimpleOrientationSensorOrientationChangedEventArgs>
{
	ISimpleOrientationSensorOrientationChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISimpleOrientationSensorOrientationChangedEventArgs>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

struct ISmartCardPinResetHandler :
	IUnknown,
	impl_ISmartCardPinResetHandler<ISmartCardPinResetHandler>
{
	ISmartCardPinResetHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardPinResetHandler>>(m_ptr); }
};

struct ISmartCardReaderStatics :
	IInspectable,
	impl_ISmartCardReaderStatics<ISmartCardReaderStatics>
{
	ISmartCardReaderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardReaderStatics>>(m_ptr); }
};

struct ISmartCardReader :
	IInspectable,
	impl_ISmartCardReader<ISmartCardReader>
{
	ISmartCardReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardReader>>(m_ptr); }
};

struct ICardAddedEventArgs :
	IInspectable,
	impl_ICardAddedEventArgs<ICardAddedEventArgs>
{
	ICardAddedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICardAddedEventArgs>>(m_ptr); }
};

struct ICardRemovedEventArgs :
	IInspectable,
	impl_ICardRemovedEventArgs<ICardRemovedEventArgs>
{
	ICardRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICardRemovedEventArgs>>(m_ptr); }
};

struct ISmartCard :
	IInspectable,
	impl_ISmartCard<ISmartCard>
{
	ISmartCard(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCard>>(m_ptr); }
};

struct ISmartCardProvisioningStatics :
	IInspectable,
	impl_ISmartCardProvisioningStatics<ISmartCardProvisioningStatics>
{
	ISmartCardProvisioningStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardProvisioningStatics>>(m_ptr); }
};

struct ISmartCardProvisioning :
	IInspectable,
	impl_ISmartCardProvisioning<ISmartCardProvisioning>
{
	ISmartCardProvisioning(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardProvisioning>>(m_ptr); }
};

struct ISmartCardPinResetRequest :
	IInspectable,
	impl_ISmartCardPinResetRequest<ISmartCardPinResetRequest>
{
	ISmartCardPinResetRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardPinResetRequest>>(m_ptr); }
};

struct ISmartCardPinResetDeferral :
	IInspectable,
	impl_ISmartCardPinResetDeferral<ISmartCardPinResetDeferral>
{
	ISmartCardPinResetDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardPinResetDeferral>>(m_ptr); }
};

struct ISmartCardPinPolicy :
	IInspectable,
	impl_ISmartCardPinPolicy<ISmartCardPinPolicy>
{
	ISmartCardPinPolicy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardPinPolicy>>(m_ptr); }
};

struct ISmartCardChallengeContext :
	IInspectable,
	impl_ISmartCardChallengeContext<ISmartCardChallengeContext>
{
	ISmartCardChallengeContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmartCardChallengeContext>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

struct ISmsMessageReceivedEventHandler :
	IUnknown,
	impl_ISmsMessageReceivedEventHandler<ISmsMessageReceivedEventHandler>
{
	ISmsMessageReceivedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsMessageReceivedEventHandler>>(m_ptr); }
};

struct ISmsDeviceStatusChangedEventHandler :
	IUnknown,
	impl_ISmsDeviceStatusChangedEventHandler<ISmsDeviceStatusChangedEventHandler>
{
	ISmsDeviceStatusChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDeviceStatusChangedEventHandler>>(m_ptr); }
};

struct ISmsMessage :
	IInspectable,
	impl_ISmsMessage<ISmsMessage>
{
	ISmsMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsMessage>>(m_ptr); }
};

struct ISmsBinaryMessage :
	IInspectable,
	impl_ISmsBinaryMessage<ISmsBinaryMessage>,
	Requires<ISmsBinaryMessage, Windows::Devices::Sms::ISmsMessage>
{
	ISmsBinaryMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsBinaryMessage>>(m_ptr); }
};

struct ISmsTextMessage :
	IInspectable,
	impl_ISmsTextMessage<ISmsTextMessage>,
	Requires<ISmsTextMessage, Windows::Devices::Sms::ISmsMessage>
{
	ISmsTextMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsTextMessage>>(m_ptr); }
};

struct ISmsTextMessageStatics :
	IInspectable,
	impl_ISmsTextMessageStatics<ISmsTextMessageStatics>
{
	ISmsTextMessageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsTextMessageStatics>>(m_ptr); }
};

struct ISmsDeviceMessageStore :
	IInspectable,
	impl_ISmsDeviceMessageStore<ISmsDeviceMessageStore>
{
	ISmsDeviceMessageStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDeviceMessageStore>>(m_ptr); }
};

struct ISmsMessageReceivedEventArgs :
	IInspectable,
	impl_ISmsMessageReceivedEventArgs<ISmsMessageReceivedEventArgs>
{
	ISmsMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsMessageReceivedEventArgs>>(m_ptr); }
};

struct ISmsDeviceStatics :
	IInspectable,
	impl_ISmsDeviceStatics<ISmsDeviceStatics>
{
	ISmsDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDeviceStatics>>(m_ptr); }
};

struct ISmsDeviceStatics2 :
	IInspectable,
	impl_ISmsDeviceStatics2<ISmsDeviceStatics2>
{
	ISmsDeviceStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDeviceStatics2>>(m_ptr); }
};

struct ISmsDevice :
	IInspectable,
	impl_ISmsDevice<ISmsDevice>
{
	ISmsDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsDevice>>(m_ptr); }
};

struct ISmsReceivedEventDetails :
	IInspectable,
	impl_ISmsReceivedEventDetails<ISmsReceivedEventDetails>
{
	ISmsReceivedEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsReceivedEventDetails>>(m_ptr); }
};

struct ISmsReceivedEventDetails2 :
	IInspectable,
	impl_ISmsReceivedEventDetails2<ISmsReceivedEventDetails2>
{
	ISmsReceivedEventDetails2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmsReceivedEventDetails2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

struct IUsbControlRequestType :
	IInspectable,
	impl_IUsbControlRequestType<IUsbControlRequestType>
{
	IUsbControlRequestType(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbControlRequestType>>(m_ptr); }
};

struct IUsbSetupPacketFactory :
	IInspectable,
	impl_IUsbSetupPacketFactory<IUsbSetupPacketFactory>
{
	IUsbSetupPacketFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbSetupPacketFactory>>(m_ptr); }
};

struct IUsbSetupPacket :
	IInspectable,
	impl_IUsbSetupPacket<IUsbSetupPacket>
{
	IUsbSetupPacket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbSetupPacket>>(m_ptr); }
};

struct IUsbDeviceClass :
	IInspectable,
	impl_IUsbDeviceClass<IUsbDeviceClass>
{
	IUsbDeviceClass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceClass>>(m_ptr); }
};

struct IUsbDeviceClassesStatics :
	IInspectable,
	impl_IUsbDeviceClassesStatics<IUsbDeviceClassesStatics>
{
	IUsbDeviceClassesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceClassesStatics>>(m_ptr); }
};

struct IUsbDeviceClasses :
	IInspectable,
	impl_IUsbDeviceClasses<IUsbDeviceClasses>
{
	IUsbDeviceClasses(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceClasses>>(m_ptr); }
};

struct IUsbDeviceStatics :
	IInspectable,
	impl_IUsbDeviceStatics<IUsbDeviceStatics>
{
	IUsbDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceStatics>>(m_ptr); }
};

struct IUsbDeviceDescriptor :
	IInspectable,
	impl_IUsbDeviceDescriptor<IUsbDeviceDescriptor>
{
	IUsbDeviceDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDeviceDescriptor>>(m_ptr); }
};

struct IUsbConfigurationDescriptor :
	IInspectable,
	impl_IUsbConfigurationDescriptor<IUsbConfigurationDescriptor>
{
	IUsbConfigurationDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbConfigurationDescriptor>>(m_ptr); }
};

struct IUsbConfigurationDescriptorStatics :
	IInspectable,
	impl_IUsbConfigurationDescriptorStatics<IUsbConfigurationDescriptorStatics>
{
	IUsbConfigurationDescriptorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbConfigurationDescriptorStatics>>(m_ptr); }
};

struct IUsbInterfaceDescriptor :
	IInspectable,
	impl_IUsbInterfaceDescriptor<IUsbInterfaceDescriptor>
{
	IUsbInterfaceDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterfaceDescriptor>>(m_ptr); }
};

struct IUsbInterfaceDescriptorStatics :
	IInspectable,
	impl_IUsbInterfaceDescriptorStatics<IUsbInterfaceDescriptorStatics>
{
	IUsbInterfaceDescriptorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterfaceDescriptorStatics>>(m_ptr); }
};

struct IUsbEndpointDescriptor :
	IInspectable,
	impl_IUsbEndpointDescriptor<IUsbEndpointDescriptor>
{
	IUsbEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbEndpointDescriptor>>(m_ptr); }
};

struct IUsbEndpointDescriptorStatics :
	IInspectable,
	impl_IUsbEndpointDescriptorStatics<IUsbEndpointDescriptorStatics>
{
	IUsbEndpointDescriptorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbEndpointDescriptorStatics>>(m_ptr); }
};

struct IUsbDescriptor :
	IInspectable,
	impl_IUsbDescriptor<IUsbDescriptor>
{
	IUsbDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDescriptor>>(m_ptr); }
};

struct IUsbInterruptInEventArgs :
	IInspectable,
	impl_IUsbInterruptInEventArgs<IUsbInterruptInEventArgs>
{
	IUsbInterruptInEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptInEventArgs>>(m_ptr); }
};

struct IUsbBulkInPipe :
	IInspectable,
	impl_IUsbBulkInPipe<IUsbBulkInPipe>
{
	IUsbBulkInPipe(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbBulkInPipe>>(m_ptr); }
};

struct IUsbInterruptInPipe :
	IInspectable,
	impl_IUsbInterruptInPipe<IUsbInterruptInPipe>
{
	IUsbInterruptInPipe(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptInPipe>>(m_ptr); }
};

struct IUsbBulkOutPipe :
	IInspectable,
	impl_IUsbBulkOutPipe<IUsbBulkOutPipe>
{
	IUsbBulkOutPipe(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbBulkOutPipe>>(m_ptr); }
};

struct IUsbInterruptOutPipe :
	IInspectable,
	impl_IUsbInterruptOutPipe<IUsbInterruptOutPipe>
{
	IUsbInterruptOutPipe(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptOutPipe>>(m_ptr); }
};

struct IUsbConfiguration :
	IInspectable,
	impl_IUsbConfiguration<IUsbConfiguration>
{
	IUsbConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbConfiguration>>(m_ptr); }
};

struct IUsbInterface :
	IInspectable,
	impl_IUsbInterface<IUsbInterface>
{
	IUsbInterface(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterface>>(m_ptr); }
};

struct IUsbInterfaceSetting :
	IInspectable,
	impl_IUsbInterfaceSetting<IUsbInterfaceSetting>
{
	IUsbInterfaceSetting(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterfaceSetting>>(m_ptr); }
};

struct IUsbBulkInEndpointDescriptor :
	IInspectable,
	impl_IUsbBulkInEndpointDescriptor<IUsbBulkInEndpointDescriptor>
{
	IUsbBulkInEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbBulkInEndpointDescriptor>>(m_ptr); }
};

struct IUsbInterruptInEndpointDescriptor :
	IInspectable,
	impl_IUsbInterruptInEndpointDescriptor<IUsbInterruptInEndpointDescriptor>
{
	IUsbInterruptInEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptInEndpointDescriptor>>(m_ptr); }
};

struct IUsbBulkOutEndpointDescriptor :
	IInspectable,
	impl_IUsbBulkOutEndpointDescriptor<IUsbBulkOutEndpointDescriptor>
{
	IUsbBulkOutEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbBulkOutEndpointDescriptor>>(m_ptr); }
};

struct IUsbInterruptOutEndpointDescriptor :
	IInspectable,
	impl_IUsbInterruptOutEndpointDescriptor<IUsbInterruptOutEndpointDescriptor>
{
	IUsbInterruptOutEndpointDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbInterruptOutEndpointDescriptor>>(m_ptr); }
};

struct IUsbDevice :
	IInspectable,
	impl_IUsbDevice<IUsbDevice>
{
	IUsbDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUsbDevice>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

struct IWiFiDirectDeviceStatics :
	IInspectable,
	impl_IWiFiDirectDeviceStatics<IWiFiDirectDeviceStatics>
{
	IWiFiDirectDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWiFiDirectDeviceStatics>>(m_ptr); }
};

struct IWiFiDirectDevice :
	IInspectable,
	impl_IWiFiDirectDevice<IWiFiDirectDevice>
{
	IWiFiDirectDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWiFiDirectDevice>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Foundation {

struct IAsyncActionCompletedHandler :
	IUnknown,
	impl_IAsyncActionCompletedHandler<IAsyncActionCompletedHandler>
{
	IAsyncActionCompletedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsyncActionCompletedHandler>>(m_ptr); }
};

struct IUriRuntimeClass :
	IInspectable,
	impl_IUriRuntimeClass<IUriRuntimeClass>
{
	IUriRuntimeClass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriRuntimeClass>>(m_ptr); }
};

struct IUriRuntimeClassWithAbsoluteCanonicalUri :
	IInspectable,
	impl_IUriRuntimeClassWithAbsoluteCanonicalUri<IUriRuntimeClassWithAbsoluteCanonicalUri>
{
	IUriRuntimeClassWithAbsoluteCanonicalUri(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriRuntimeClassWithAbsoluteCanonicalUri>>(m_ptr); }
};

struct IUriEscapeStatics :
	IInspectable,
	impl_IUriEscapeStatics<IUriEscapeStatics>
{
	IUriEscapeStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriEscapeStatics>>(m_ptr); }
};

struct IUriRuntimeClassFactory :
	IInspectable,
	impl_IUriRuntimeClassFactory<IUriRuntimeClassFactory>
{
	IUriRuntimeClassFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriRuntimeClassFactory>>(m_ptr); }
};

struct IWwwFormUrlDecoderEntry :
	IInspectable,
	impl_IWwwFormUrlDecoderEntry<IWwwFormUrlDecoderEntry>
{
	IWwwFormUrlDecoderEntry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWwwFormUrlDecoderEntry>>(m_ptr); }
};

struct IWwwFormUrlDecoderRuntimeClass :
	IInspectable,
	impl_IWwwFormUrlDecoderRuntimeClass<IWwwFormUrlDecoderRuntimeClass>,
	Requires<IWwwFormUrlDecoderRuntimeClass, Windows::Foundation::Collections::IIterable<Windows::Foundation::IWwwFormUrlDecoderEntry>, Windows::Foundation::Collections::IVectorView<Windows::Foundation::IWwwFormUrlDecoderEntry>>
{
	IWwwFormUrlDecoderRuntimeClass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWwwFormUrlDecoderRuntimeClass>>(m_ptr); }
};

struct IWwwFormUrlDecoderRuntimeClassFactory :
	IInspectable,
	impl_IWwwFormUrlDecoderRuntimeClassFactory<IWwwFormUrlDecoderRuntimeClassFactory>
{
	IWwwFormUrlDecoderRuntimeClassFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWwwFormUrlDecoderRuntimeClassFactory>>(m_ptr); }
};

struct IGetActivationFactory :
	IInspectable,
	impl_IGetActivationFactory<IGetActivationFactory>
{
	IGetActivationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGetActivationFactory>>(m_ptr); }
};

struct IClosable :
	IInspectable,
	impl_IClosable<IClosable>
{
	IClosable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClosable>>(m_ptr); }
};

struct IPropertyValue :
	IInspectable,
	impl_IPropertyValue<IPropertyValue>
{
	IPropertyValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyValue>>(m_ptr); }
};

struct IPropertyValueStatics :
	IInspectable,
	impl_IPropertyValueStatics<IPropertyValueStatics>
{
	IPropertyValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyValueStatics>>(m_ptr); }
};

struct IStringable :
	IInspectable,
	impl_IStringable<IStringable>
{
	IStringable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStringable>>(m_ptr); }
};

struct IAsyncAction :
	IInspectable,
	impl_IAsyncAction<IAsyncAction>,
	Requires<IAsyncAction, IAsyncInfo>
{
	IAsyncAction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsyncAction>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

struct IPropertySet :
	IInspectable,
	impl_IPropertySet<IPropertySet>,
	Requires<IPropertySet, Windows::Foundation::Collections::IObservableMap<String, IInspectable>, Windows::Foundation::Collections::IMap<String, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>>>
{
	IPropertySet(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertySet>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

struct ITracingStatusChangedEventArgs :
	IInspectable,
	impl_ITracingStatusChangedEventArgs<ITracingStatusChangedEventArgs>
{
	ITracingStatusChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITracingStatusChangedEventArgs>>(m_ptr); }
};

struct IAsyncCausalityTracerStatics :
	IInspectable,
	impl_IAsyncCausalityTracerStatics<IAsyncCausalityTracerStatics>
{
	IAsyncCausalityTracerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsyncCausalityTracerStatics>>(m_ptr); }
};

struct IErrorReportingSettings :
	IInspectable,
	impl_IErrorReportingSettings<IErrorReportingSettings>
{
	IErrorReportingSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IErrorReportingSettings>>(m_ptr); }
};

struct ILoggingChannel :
	IInspectable,
	impl_ILoggingChannel<ILoggingChannel>
{
	ILoggingChannel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingChannel>>(m_ptr); }
};

struct ILoggingChannelFactory :
	IInspectable,
	impl_ILoggingChannelFactory<ILoggingChannelFactory>
{
	ILoggingChannelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingChannelFactory>>(m_ptr); }
};

struct ILoggingActivity :
	IInspectable,
	impl_ILoggingActivity<ILoggingActivity>
{
	ILoggingActivity(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingActivity>>(m_ptr); }
};

struct ILoggingActivityFactory :
	IInspectable,
	impl_ILoggingActivityFactory<ILoggingActivityFactory>
{
	ILoggingActivityFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingActivityFactory>>(m_ptr); }
};

struct ILoggingSession :
	IInspectable,
	impl_ILoggingSession<ILoggingSession>
{
	ILoggingSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingSession>>(m_ptr); }
};

struct ILoggingSessionFactory :
	IInspectable,
	impl_ILoggingSessionFactory<ILoggingSessionFactory>
{
	ILoggingSessionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILoggingSessionFactory>>(m_ptr); }
};

struct ILogFileGeneratedEventArgs :
	IInspectable,
	impl_ILogFileGeneratedEventArgs<ILogFileGeneratedEventArgs>
{
	ILogFileGeneratedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILogFileGeneratedEventArgs>>(m_ptr); }
};

struct IFileLoggingSession :
	IInspectable,
	impl_IFileLoggingSession<IFileLoggingSession>
{
	IFileLoggingSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileLoggingSession>>(m_ptr); }
};

struct IFileLoggingSessionFactory :
	IInspectable,
	impl_IFileLoggingSessionFactory<IFileLoggingSessionFactory>
{
	IFileLoggingSessionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileLoggingSessionFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Globalization {

struct IJapanesePhoneticAnalyzerStatics :
	IInspectable,
	impl_IJapanesePhoneticAnalyzerStatics<IJapanesePhoneticAnalyzerStatics>
{
	IJapanesePhoneticAnalyzerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJapanesePhoneticAnalyzerStatics>>(m_ptr); }
};

struct IJapanesePhoneme :
	IInspectable,
	impl_IJapanesePhoneme<IJapanesePhoneme>
{
	IJapanesePhoneme(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IJapanesePhoneme>>(m_ptr); }
};

struct ICalendarIdentifiersStatics :
	IInspectable,
	impl_ICalendarIdentifiersStatics<ICalendarIdentifiersStatics>
{
	ICalendarIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICalendarIdentifiersStatics>>(m_ptr); }
};

struct IClockIdentifiersStatics :
	IInspectable,
	impl_IClockIdentifiersStatics<IClockIdentifiersStatics>
{
	IClockIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IClockIdentifiersStatics>>(m_ptr); }
};

struct INumeralSystemIdentifiersStatics :
	IInspectable,
	impl_INumeralSystemIdentifiersStatics<INumeralSystemIdentifiersStatics>
{
	INumeralSystemIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumeralSystemIdentifiersStatics>>(m_ptr); }
};

struct ICurrencyIdentifiersStatics :
	IInspectable,
	impl_ICurrencyIdentifiersStatics<ICurrencyIdentifiersStatics>
{
	ICurrencyIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrencyIdentifiersStatics>>(m_ptr); }
};

struct IGeographicRegion :
	IInspectable,
	impl_IGeographicRegion<IGeographicRegion>
{
	IGeographicRegion(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeographicRegion>>(m_ptr); }
};

struct IGeographicRegionFactory :
	IInspectable,
	impl_IGeographicRegionFactory<IGeographicRegionFactory>
{
	IGeographicRegionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeographicRegionFactory>>(m_ptr); }
};

struct IGeographicRegionStatics :
	IInspectable,
	impl_IGeographicRegionStatics<IGeographicRegionStatics>
{
	IGeographicRegionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGeographicRegionStatics>>(m_ptr); }
};

struct ILanguage :
	IInspectable,
	impl_ILanguage<ILanguage>
{
	ILanguage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguage>>(m_ptr); }
};

struct ILanguageExtensionSubtags :
	IInspectable,
	impl_ILanguageExtensionSubtags<ILanguageExtensionSubtags>
{
	ILanguageExtensionSubtags(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageExtensionSubtags>>(m_ptr); }
};

struct ILanguageFactory :
	IInspectable,
	impl_ILanguageFactory<ILanguageFactory>
{
	ILanguageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageFactory>>(m_ptr); }
};

struct ILanguageStatics :
	IInspectable,
	impl_ILanguageStatics<ILanguageStatics>
{
	ILanguageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageStatics>>(m_ptr); }
};

struct ICalendar :
	IInspectable,
	impl_ICalendar<ICalendar>
{
	ICalendar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICalendar>>(m_ptr); }
};

struct ICalendarFactory2 :
	IInspectable,
	impl_ICalendarFactory2<ICalendarFactory2>
{
	ICalendarFactory2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICalendarFactory2>>(m_ptr); }
};

struct ITimeZoneOnCalendar :
	IInspectable,
	impl_ITimeZoneOnCalendar<ITimeZoneOnCalendar>
{
	ITimeZoneOnCalendar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimeZoneOnCalendar>>(m_ptr); }
};

struct ICalendarFactory :
	IInspectable,
	impl_ICalendarFactory<ICalendarFactory>
{
	ICalendarFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICalendarFactory>>(m_ptr); }
};

struct IApplicationLanguagesStatics :
	IInspectable,
	impl_IApplicationLanguagesStatics<IApplicationLanguagesStatics>
{
	IApplicationLanguagesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationLanguagesStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

struct ICharacterGrouping :
	IInspectable,
	impl_ICharacterGrouping<ICharacterGrouping>
{
	ICharacterGrouping(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICharacterGrouping>>(m_ptr); }
};

struct ICharacterGroupings :
	IInspectable,
	impl_ICharacterGroupings<ICharacterGroupings>,
	Requires<ICharacterGroupings, Windows::Foundation::Collections::IVectorView<Windows::Globalization::Collation::CharacterGrouping>, Windows::Foundation::Collections::IIterable<Windows::Globalization::Collation::CharacterGrouping>>
{
	ICharacterGroupings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICharacterGroupings>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

struct IDateTimeFormatter :
	IInspectable,
	impl_IDateTimeFormatter<IDateTimeFormatter>
{
	IDateTimeFormatter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDateTimeFormatter>>(m_ptr); }
};

struct IDateTimeFormatterFactory :
	IInspectable,
	impl_IDateTimeFormatterFactory<IDateTimeFormatterFactory>
{
	IDateTimeFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDateTimeFormatterFactory>>(m_ptr); }
};

struct IDateTimeFormatterStatics :
	IInspectable,
	impl_IDateTimeFormatterStatics<IDateTimeFormatterStatics>
{
	IDateTimeFormatterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDateTimeFormatterStatics>>(m_ptr); }
};

struct IDateTimeFormatter2 :
	IInspectable,
	impl_IDateTimeFormatter2<IDateTimeFormatter2>
{
	IDateTimeFormatter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDateTimeFormatter2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

struct ILanguageFontGroup :
	IInspectable,
	impl_ILanguageFontGroup<ILanguageFontGroup>
{
	ILanguageFontGroup(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageFontGroup>>(m_ptr); }
};

struct ILanguageFontGroupFactory :
	IInspectable,
	impl_ILanguageFontGroupFactory<ILanguageFontGroupFactory>
{
	ILanguageFontGroupFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageFontGroupFactory>>(m_ptr); }
};

struct ILanguageFont :
	IInspectable,
	impl_ILanguageFont<ILanguageFont>
{
	ILanguageFont(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanguageFont>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

struct INumberRounder :
	IInspectable,
	impl_INumberRounder<INumberRounder>
{
	INumberRounder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberRounder>>(m_ptr); }
};

struct ISignificantDigitsNumberRounder :
	IInspectable,
	impl_ISignificantDigitsNumberRounder<ISignificantDigitsNumberRounder>
{
	ISignificantDigitsNumberRounder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignificantDigitsNumberRounder>>(m_ptr); }
};

struct IIncrementNumberRounder :
	IInspectable,
	impl_IIncrementNumberRounder<IIncrementNumberRounder>
{
	IIncrementNumberRounder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIncrementNumberRounder>>(m_ptr); }
};

struct INumberFormatter :
	IInspectable,
	impl_INumberFormatter<INumberFormatter>
{
	INumberFormatter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberFormatter>>(m_ptr); }
};

struct INumberFormatter2 :
	IInspectable,
	impl_INumberFormatter2<INumberFormatter2>
{
	INumberFormatter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberFormatter2>>(m_ptr); }
};

struct INumberParser :
	IInspectable,
	impl_INumberParser<INumberParser>
{
	INumberParser(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberParser>>(m_ptr); }
};

struct INumberFormatterOptions :
	IInspectable,
	impl_INumberFormatterOptions<INumberFormatterOptions>
{
	INumberFormatterOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberFormatterOptions>>(m_ptr); }
};

struct ISignificantDigitsOption :
	IInspectable,
	impl_ISignificantDigitsOption<ISignificantDigitsOption>
{
	ISignificantDigitsOption(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignificantDigitsOption>>(m_ptr); }
};

struct INumberRounderOption :
	IInspectable,
	impl_INumberRounderOption<INumberRounderOption>
{
	INumberRounderOption(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumberRounderOption>>(m_ptr); }
};

struct ISignedZeroOption :
	IInspectable,
	impl_ISignedZeroOption<ISignedZeroOption>
{
	ISignedZeroOption(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignedZeroOption>>(m_ptr); }
};

struct IDecimalFormatterFactory :
	IInspectable,
	impl_IDecimalFormatterFactory<IDecimalFormatterFactory>
{
	IDecimalFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDecimalFormatterFactory>>(m_ptr); }
};

struct IPercentFormatterFactory :
	IInspectable,
	impl_IPercentFormatterFactory<IPercentFormatterFactory>
{
	IPercentFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPercentFormatterFactory>>(m_ptr); }
};

struct IPermilleFormatterFactory :
	IInspectable,
	impl_IPermilleFormatterFactory<IPermilleFormatterFactory>
{
	IPermilleFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPermilleFormatterFactory>>(m_ptr); }
};

struct ICurrencyFormatterFactory :
	IInspectable,
	impl_ICurrencyFormatterFactory<ICurrencyFormatterFactory>
{
	ICurrencyFormatterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrencyFormatterFactory>>(m_ptr); }
};

struct ICurrencyFormatter :
	IInspectable,
	impl_ICurrencyFormatter<ICurrencyFormatter>,
	Requires<ICurrencyFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser>
{
	ICurrencyFormatter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrencyFormatter>>(m_ptr); }
};

struct ICurrencyFormatter2 :
	IInspectable,
	impl_ICurrencyFormatter2<ICurrencyFormatter2>
{
	ICurrencyFormatter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrencyFormatter2>>(m_ptr); }
};

struct INumeralSystemTranslatorFactory :
	IInspectable,
	impl_INumeralSystemTranslatorFactory<INumeralSystemTranslatorFactory>
{
	INumeralSystemTranslatorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumeralSystemTranslatorFactory>>(m_ptr); }
};

struct INumeralSystemTranslator :
	IInspectable,
	impl_INumeralSystemTranslator<INumeralSystemTranslator>
{
	INumeralSystemTranslator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INumeralSystemTranslator>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

struct IDisplayInformationStatics :
	IInspectable,
	impl_IDisplayInformationStatics<IDisplayInformationStatics>
{
	IDisplayInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDisplayInformationStatics>>(m_ptr); }
};

struct IDisplayInformation :
	IInspectable,
	impl_IDisplayInformation<IDisplayInformation>
{
	IDisplayInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDisplayInformation>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

struct IBitmapTransform :
	IInspectable,
	impl_IBitmapTransform<IBitmapTransform>
{
	IBitmapTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapTransform>>(m_ptr); }
};

struct IBitmapTypedValue :
	IInspectable,
	impl_IBitmapTypedValue<IBitmapTypedValue>
{
	IBitmapTypedValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapTypedValue>>(m_ptr); }
};

struct IBitmapTypedValueFactory :
	IInspectable,
	impl_IBitmapTypedValueFactory<IBitmapTypedValueFactory>
{
	IBitmapTypedValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapTypedValueFactory>>(m_ptr); }
};

struct IBitmapPropertiesView :
	IInspectable,
	impl_IBitmapPropertiesView<IBitmapPropertiesView>
{
	IBitmapPropertiesView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapPropertiesView>>(m_ptr); }
};

struct IBitmapProperties :
	IInspectable,
	impl_IBitmapProperties<IBitmapProperties>,
	Requires<IBitmapProperties, Windows::Graphics::Imaging::IBitmapPropertiesView>
{
	IBitmapProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapProperties>>(m_ptr); }
};

struct IPixelDataProvider :
	IInspectable,
	impl_IPixelDataProvider<IPixelDataProvider>
{
	IPixelDataProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPixelDataProvider>>(m_ptr); }
};

struct IBitmapFrame :
	IInspectable,
	impl_IBitmapFrame<IBitmapFrame>
{
	IBitmapFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapFrame>>(m_ptr); }
};

struct IBitmapCodecInformation :
	IInspectable,
	impl_IBitmapCodecInformation<IBitmapCodecInformation>
{
	IBitmapCodecInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapCodecInformation>>(m_ptr); }
};

struct IBitmapDecoderStatics :
	IInspectable,
	impl_IBitmapDecoderStatics<IBitmapDecoderStatics>
{
	IBitmapDecoderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapDecoderStatics>>(m_ptr); }
};

struct IBitmapDecoder :
	IInspectable,
	impl_IBitmapDecoder<IBitmapDecoder>
{
	IBitmapDecoder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapDecoder>>(m_ptr); }
};

struct IBitmapEncoderStatics :
	IInspectable,
	impl_IBitmapEncoderStatics<IBitmapEncoderStatics>
{
	IBitmapEncoderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapEncoderStatics>>(m_ptr); }
};

struct IBitmapEncoder :
	IInspectable,
	impl_IBitmapEncoder<IBitmapEncoder>
{
	IBitmapEncoder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBitmapEncoder>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

struct IPrintTaskSourceRequestedHandler :
	IUnknown,
	impl_IPrintTaskSourceRequestedHandler<IPrintTaskSourceRequestedHandler>
{
	IPrintTaskSourceRequestedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskSourceRequestedHandler>>(m_ptr); }
};

struct IPrintTaskOptionsCoreProperties :
	IInspectable,
	impl_IPrintTaskOptionsCoreProperties<IPrintTaskOptionsCoreProperties>
{
	IPrintTaskOptionsCoreProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionsCoreProperties>>(m_ptr); }
};

struct IPrintTaskOptionsCoreUIConfiguration :
	IInspectable,
	impl_IPrintTaskOptionsCoreUIConfiguration<IPrintTaskOptionsCoreUIConfiguration>
{
	IPrintTaskOptionsCoreUIConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionsCoreUIConfiguration>>(m_ptr); }
};

struct IPrintTaskOptionsCore :
	IInspectable,
	impl_IPrintTaskOptionsCore<IPrintTaskOptionsCore>
{
	IPrintTaskOptionsCore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionsCore>>(m_ptr); }
};

struct IStandardPrintTaskOptionsStatic :
	IInspectable,
	impl_IStandardPrintTaskOptionsStatic<IStandardPrintTaskOptionsStatic>
{
	IStandardPrintTaskOptionsStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStandardPrintTaskOptionsStatic>>(m_ptr); }
};

struct IPrintDocumentSource :
	IInspectable,
	impl_IPrintDocumentSource<IPrintDocumentSource>
{
	IPrintDocumentSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintDocumentSource>>(m_ptr); }
};

struct IPrintTaskProgressingEventArgs :
	IInspectable,
	impl_IPrintTaskProgressingEventArgs<IPrintTaskProgressingEventArgs>
{
	IPrintTaskProgressingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskProgressingEventArgs>>(m_ptr); }
};

struct IPrintTaskCompletedEventArgs :
	IInspectable,
	impl_IPrintTaskCompletedEventArgs<IPrintTaskCompletedEventArgs>
{
	IPrintTaskCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskCompletedEventArgs>>(m_ptr); }
};

struct IPrintTask :
	IInspectable,
	impl_IPrintTask<IPrintTask>
{
	IPrintTask(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTask>>(m_ptr); }
};

struct IPrintTaskTargetDeviceSupport :
	IInspectable,
	impl_IPrintTaskTargetDeviceSupport<IPrintTaskTargetDeviceSupport>
{
	IPrintTaskTargetDeviceSupport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskTargetDeviceSupport>>(m_ptr); }
};

struct IPrintTaskSourceRequestedDeferral :
	IInspectable,
	impl_IPrintTaskSourceRequestedDeferral<IPrintTaskSourceRequestedDeferral>
{
	IPrintTaskSourceRequestedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskSourceRequestedDeferral>>(m_ptr); }
};

struct IPrintTaskSourceRequestedArgs :
	IInspectable,
	impl_IPrintTaskSourceRequestedArgs<IPrintTaskSourceRequestedArgs>
{
	IPrintTaskSourceRequestedArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskSourceRequestedArgs>>(m_ptr); }
};

struct IPrintTaskRequestedDeferral :
	IInspectable,
	impl_IPrintTaskRequestedDeferral<IPrintTaskRequestedDeferral>
{
	IPrintTaskRequestedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskRequestedDeferral>>(m_ptr); }
};

struct IPrintTaskRequest :
	IInspectable,
	impl_IPrintTaskRequest<IPrintTaskRequest>
{
	IPrintTaskRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskRequest>>(m_ptr); }
};

struct IPrintTaskRequestedEventArgs :
	IInspectable,
	impl_IPrintTaskRequestedEventArgs<IPrintTaskRequestedEventArgs>
{
	IPrintTaskRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskRequestedEventArgs>>(m_ptr); }
};

struct IPrintManagerStatic :
	IInspectable,
	impl_IPrintManagerStatic<IPrintManagerStatic>
{
	IPrintManagerStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintManagerStatic>>(m_ptr); }
};

struct IPrintManager :
	IInspectable,
	impl_IPrintManager<IPrintManager>
{
	IPrintManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintManager>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

struct IPrintOptionDetails :
	IInspectable,
	impl_IPrintOptionDetails<IPrintOptionDetails>
{
	IPrintOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintOptionDetails>>(m_ptr); }
};

struct IPrintNumberOptionDetails :
	IInspectable,
	impl_IPrintNumberOptionDetails<IPrintNumberOptionDetails>,
	Requires<IPrintNumberOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintNumberOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintNumberOptionDetails>>(m_ptr); }
};

struct IPrintTextOptionDetails :
	IInspectable,
	impl_IPrintTextOptionDetails<IPrintTextOptionDetails>,
	Requires<IPrintTextOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintTextOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTextOptionDetails>>(m_ptr); }
};

struct IPrintItemListOptionDetails :
	IInspectable,
	impl_IPrintItemListOptionDetails<IPrintItemListOptionDetails>,
	Requires<IPrintItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintItemListOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintItemListOptionDetails>>(m_ptr); }
};

struct IPrintCustomOptionDetails :
	IInspectable,
	impl_IPrintCustomOptionDetails<IPrintCustomOptionDetails>,
	Requires<IPrintCustomOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintCustomOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintCustomOptionDetails>>(m_ptr); }
};

struct IPrintCustomTextOptionDetails :
	IInspectable,
	impl_IPrintCustomTextOptionDetails<IPrintCustomTextOptionDetails>,
	Requires<IPrintCustomTextOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails>
{
	IPrintCustomTextOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintCustomTextOptionDetails>>(m_ptr); }
};

struct IPrintCustomItemDetails :
	IInspectable,
	impl_IPrintCustomItemDetails<IPrintCustomItemDetails>
{
	IPrintCustomItemDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintCustomItemDetails>>(m_ptr); }
};

struct IPrintCustomItemListOptionDetails :
	IInspectable,
	impl_IPrintCustomItemListOptionDetails<IPrintCustomItemListOptionDetails>,
	Requires<IPrintCustomItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails>
{
	IPrintCustomItemListOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintCustomItemListOptionDetails>>(m_ptr); }
};

struct IPrintTaskOptionChangedEventArgs :
	IInspectable,
	impl_IPrintTaskOptionChangedEventArgs<IPrintTaskOptionChangedEventArgs>
{
	IPrintTaskOptionChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionChangedEventArgs>>(m_ptr); }
};

struct IPrintTaskOptionDetails :
	IInspectable,
	impl_IPrintTaskOptionDetails<IPrintTaskOptionDetails>
{
	IPrintTaskOptionDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionDetails>>(m_ptr); }
};

struct IPrintTaskOptionDetailsStatic :
	IInspectable,
	impl_IPrintTaskOptionDetailsStatic<IPrintTaskOptionDetailsStatic>
{
	IPrintTaskOptionDetailsStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrintTaskOptionDetailsStatic>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

struct IApplicationDataManagerStatics :
	IInspectable,
	impl_IApplicationDataManagerStatics<IApplicationDataManagerStatics>
{
	IApplicationDataManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataManagerStatics>>(m_ptr); }
};

struct IApplicationDataManager :
	IInspectable,
	impl_IApplicationDataManager<IApplicationDataManager>
{
	IApplicationDataManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataManager>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

struct IDeploymentResult :
	IInspectable,
	impl_IDeploymentResult<IDeploymentResult>
{
	IDeploymentResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeploymentResult>>(m_ptr); }
};

struct IPackageUserInformation :
	IInspectable,
	impl_IPackageUserInformation<IPackageUserInformation>
{
	IPackageUserInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageUserInformation>>(m_ptr); }
};

struct IPackageManager :
	IInspectable,
	impl_IPackageManager<IPackageManager>
{
	IPackageManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageManager>>(m_ptr); }
};

struct IPackageManager2 :
	IInspectable,
	impl_IPackageManager2<IPackageManager2>
{
	IPackageManager2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPackageManager2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

struct IWorkplaceSettingsStatics :
	IInspectable,
	impl_IWorkplaceSettingsStatics<IWorkplaceSettingsStatics>
{
	IWorkplaceSettingsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWorkplaceSettingsStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media {

struct IMediaMarker :
	IInspectable,
	impl_IMediaMarker<IMediaMarker>
{
	IMediaMarker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaMarker>>(m_ptr); }
};

struct IMediaMarkers :
	IInspectable,
	impl_IMediaMarkers<IMediaMarkers>
{
	IMediaMarkers(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaMarkers>>(m_ptr); }
};

struct IMediaMarkerTypesStatics :
	IInspectable,
	impl_IMediaMarkerTypesStatics<IMediaMarkerTypesStatics>
{
	IMediaMarkerTypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaMarkerTypesStatics>>(m_ptr); }
};

struct IMusicDisplayProperties :
	IInspectable,
	impl_IMusicDisplayProperties<IMusicDisplayProperties>
{
	IMusicDisplayProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMusicDisplayProperties>>(m_ptr); }
};

struct IVideoDisplayProperties :
	IInspectable,
	impl_IVideoDisplayProperties<IVideoDisplayProperties>
{
	IVideoDisplayProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoDisplayProperties>>(m_ptr); }
};

struct IImageDisplayProperties :
	IInspectable,
	impl_IImageDisplayProperties<IImageDisplayProperties>
{
	IImageDisplayProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageDisplayProperties>>(m_ptr); }
};

struct ISystemMediaTransportControlsDisplayUpdater :
	IInspectable,
	impl_ISystemMediaTransportControlsDisplayUpdater<ISystemMediaTransportControlsDisplayUpdater>
{
	ISystemMediaTransportControlsDisplayUpdater(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControlsDisplayUpdater>>(m_ptr); }
};

struct ISystemMediaTransportControlsButtonPressedEventArgs :
	IInspectable,
	impl_ISystemMediaTransportControlsButtonPressedEventArgs<ISystemMediaTransportControlsButtonPressedEventArgs>
{
	ISystemMediaTransportControlsButtonPressedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControlsButtonPressedEventArgs>>(m_ptr); }
};

struct ISystemMediaTransportControlsPropertyChangedEventArgs :
	IInspectable,
	impl_ISystemMediaTransportControlsPropertyChangedEventArgs<ISystemMediaTransportControlsPropertyChangedEventArgs>
{
	ISystemMediaTransportControlsPropertyChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControlsPropertyChangedEventArgs>>(m_ptr); }
};

struct ISystemMediaTransportControls :
	IInspectable,
	impl_ISystemMediaTransportControls<ISystemMediaTransportControls>
{
	ISystemMediaTransportControls(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControls>>(m_ptr); }
};

struct ISystemMediaTransportControlsStatics :
	IInspectable,
	impl_ISystemMediaTransportControlsStatics<ISystemMediaTransportControlsStatics>
{
	ISystemMediaTransportControlsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaTransportControlsStatics>>(m_ptr); }
};

struct IMediaExtension :
	IInspectable,
	impl_IMediaExtension<IMediaExtension>
{
	IMediaExtension(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaExtension>>(m_ptr); }
};

struct IMediaExtensionManager :
	IInspectable,
	impl_IMediaExtensionManager<IMediaExtensionManager>
{
	IMediaExtensionManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaExtensionManager>>(m_ptr); }
};

struct IVideoEffectsStatics :
	IInspectable,
	impl_IVideoEffectsStatics<IVideoEffectsStatics>
{
	IVideoEffectsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoEffectsStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

struct IMediaCaptureFailedEventHandler :
	IUnknown,
	impl_IMediaCaptureFailedEventHandler<IMediaCaptureFailedEventHandler>
{
	IMediaCaptureFailedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureFailedEventHandler>>(m_ptr); }
};

struct IRecordLimitationExceededEventHandler :
	IUnknown,
	impl_IRecordLimitationExceededEventHandler<IRecordLimitationExceededEventHandler>
{
	IRecordLimitationExceededEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRecordLimitationExceededEventHandler>>(m_ptr); }
};

struct ICameraCaptureUIPhotoCaptureSettings :
	IInspectable,
	impl_ICameraCaptureUIPhotoCaptureSettings<ICameraCaptureUIPhotoCaptureSettings>
{
	ICameraCaptureUIPhotoCaptureSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraCaptureUIPhotoCaptureSettings>>(m_ptr); }
};

struct ICameraCaptureUIVideoCaptureSettings :
	IInspectable,
	impl_ICameraCaptureUIVideoCaptureSettings<ICameraCaptureUIVideoCaptureSettings>
{
	ICameraCaptureUIVideoCaptureSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraCaptureUIVideoCaptureSettings>>(m_ptr); }
};

struct ICameraCaptureUI :
	IInspectable,
	impl_ICameraCaptureUI<ICameraCaptureUI>
{
	ICameraCaptureUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraCaptureUI>>(m_ptr); }
};

struct ICameraOptionsUIStatics :
	IInspectable,
	impl_ICameraOptionsUIStatics<ICameraOptionsUIStatics>
{
	ICameraOptionsUIStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICameraOptionsUIStatics>>(m_ptr); }
};

struct IMediaCaptureFailedEventArgs :
	IInspectable,
	impl_IMediaCaptureFailedEventArgs<IMediaCaptureFailedEventArgs>
{
	IMediaCaptureFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureFailedEventArgs>>(m_ptr); }
};

struct IMediaCaptureInitializationSettings :
	IInspectable,
	impl_IMediaCaptureInitializationSettings<IMediaCaptureInitializationSettings>
{
	IMediaCaptureInitializationSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureInitializationSettings>>(m_ptr); }
};

struct IMediaCaptureInitializationSettings2 :
	IInspectable,
	impl_IMediaCaptureInitializationSettings2<IMediaCaptureInitializationSettings2>
{
	IMediaCaptureInitializationSettings2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureInitializationSettings2>>(m_ptr); }
};

struct IMediaCapture :
	IInspectable,
	impl_IMediaCapture<IMediaCapture>
{
	IMediaCapture(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCapture>>(m_ptr); }
};

struct IMediaCapture2 :
	IInspectable,
	impl_IMediaCapture2<IMediaCapture2>
{
	IMediaCapture2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCapture2>>(m_ptr); }
};

struct ILowLagPhotoCapture :
	IInspectable,
	impl_ILowLagPhotoCapture<ILowLagPhotoCapture>
{
	ILowLagPhotoCapture(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagPhotoCapture>>(m_ptr); }
};

struct ILowLagMediaRecording :
	IInspectable,
	impl_ILowLagMediaRecording<ILowLagMediaRecording>
{
	ILowLagMediaRecording(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagMediaRecording>>(m_ptr); }
};

struct ILowLagPhotoSequenceCapture :
	IInspectable,
	impl_ILowLagPhotoSequenceCapture<ILowLagPhotoSequenceCapture>
{
	ILowLagPhotoSequenceCapture(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagPhotoSequenceCapture>>(m_ptr); }
};

struct IPhotoCapturedEventArgs :
	IInspectable,
	impl_IPhotoCapturedEventArgs<IPhotoCapturedEventArgs>
{
	IPhotoCapturedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPhotoCapturedEventArgs>>(m_ptr); }
};

struct ICapturedPhoto :
	IInspectable,
	impl_ICapturedPhoto<ICapturedPhoto>
{
	ICapturedPhoto(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICapturedPhoto>>(m_ptr); }
};

struct ICapturedFrame :
	IInspectable,
	impl_ICapturedFrame<ICapturedFrame>,
	Requires<ICapturedFrame, Windows::Storage::Streams::IRandomAccessStreamWithContentType, Windows::Storage::Streams::IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream, Windows::Storage::Streams::IContentTypeProvider>
{
	ICapturedFrame(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICapturedFrame>>(m_ptr); }
};

struct IMediaCaptureVideoPreview :
	IInspectable,
	impl_IMediaCaptureVideoPreview<IMediaCaptureVideoPreview>
{
	IMediaCaptureVideoPreview(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureVideoPreview>>(m_ptr); }
};

struct IMediaCaptureSettings :
	IInspectable,
	impl_IMediaCaptureSettings<IMediaCaptureSettings>
{
	IMediaCaptureSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureSettings>>(m_ptr); }
};

struct IMediaCaptureSettings2 :
	IInspectable,
	impl_IMediaCaptureSettings2<IMediaCaptureSettings2>
{
	IMediaCaptureSettings2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaCaptureSettings2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

struct IRatedContentDescription :
	IInspectable,
	impl_IRatedContentDescription<IRatedContentDescription>
{
	IRatedContentDescription(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRatedContentDescription>>(m_ptr); }
};

struct IRatedContentDescriptionFactory :
	IInspectable,
	impl_IRatedContentDescriptionFactory<IRatedContentDescriptionFactory>
{
	IRatedContentDescriptionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRatedContentDescriptionFactory>>(m_ptr); }
};

struct IContentRestrictionsBrowsePolicy :
	IInspectable,
	impl_IContentRestrictionsBrowsePolicy<IContentRestrictionsBrowsePolicy>
{
	IContentRestrictionsBrowsePolicy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentRestrictionsBrowsePolicy>>(m_ptr); }
};

struct IRatedContentRestrictions :
	IInspectable,
	impl_IRatedContentRestrictions<IRatedContentRestrictions>
{
	IRatedContentRestrictions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRatedContentRestrictions>>(m_ptr); }
};

struct IRatedContentRestrictionsFactory :
	IInspectable,
	impl_IRatedContentRestrictionsFactory<IRatedContentRestrictionsFactory>
{
	IRatedContentRestrictionsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRatedContentRestrictionsFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

struct IMediaStreamDescriptor :
	IInspectable,
	impl_IMediaStreamDescriptor<IMediaStreamDescriptor>
{
	IMediaStreamDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamDescriptor>>(m_ptr); }
};

struct IAudioStreamDescriptor :
	IInspectable,
	impl_IAudioStreamDescriptor<IAudioStreamDescriptor>,
	Requires<IAudioStreamDescriptor, Windows::Media::Core::IMediaStreamDescriptor>
{
	IAudioStreamDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioStreamDescriptor>>(m_ptr); }
};

struct IAudioStreamDescriptorFactory :
	IInspectable,
	impl_IAudioStreamDescriptorFactory<IAudioStreamDescriptorFactory>
{
	IAudioStreamDescriptorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioStreamDescriptorFactory>>(m_ptr); }
};

struct IVideoStreamDescriptor :
	IInspectable,
	impl_IVideoStreamDescriptor<IVideoStreamDescriptor>,
	Requires<IVideoStreamDescriptor, Windows::Media::Core::IMediaStreamDescriptor>
{
	IVideoStreamDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoStreamDescriptor>>(m_ptr); }
};

struct IVideoStreamDescriptorFactory :
	IInspectable,
	impl_IVideoStreamDescriptorFactory<IVideoStreamDescriptorFactory>
{
	IVideoStreamDescriptorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoStreamDescriptorFactory>>(m_ptr); }
};

struct IMediaSource :
	IInspectable,
	impl_IMediaSource<IMediaSource>
{
	IMediaSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaSource>>(m_ptr); }
};

struct IMediaStreamSource :
	IInspectable,
	impl_IMediaStreamSource<IMediaStreamSource>,
	Requires<IMediaStreamSource, Windows::Media::Core::IMediaSource>
{
	IMediaStreamSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSource>>(m_ptr); }
};

struct IMediaStreamSourceFactory :
	IInspectable,
	impl_IMediaStreamSourceFactory<IMediaStreamSourceFactory>
{
	IMediaStreamSourceFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceFactory>>(m_ptr); }
};

struct IMediaStreamSample :
	IInspectable,
	impl_IMediaStreamSample<IMediaStreamSample>
{
	IMediaStreamSample(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSample>>(m_ptr); }
};

struct IMediaStreamSampleStatics :
	IInspectable,
	impl_IMediaStreamSampleStatics<IMediaStreamSampleStatics>
{
	IMediaStreamSampleStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSampleStatics>>(m_ptr); }
};

struct IMediaStreamSampleProtectionProperties :
	IInspectable,
	impl_IMediaStreamSampleProtectionProperties<IMediaStreamSampleProtectionProperties>
{
	IMediaStreamSampleProtectionProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSampleProtectionProperties>>(m_ptr); }
};

struct IMediaStreamSourceClosedRequest :
	IInspectable,
	impl_IMediaStreamSourceClosedRequest<IMediaStreamSourceClosedRequest>
{
	IMediaStreamSourceClosedRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceClosedRequest>>(m_ptr); }
};

struct IMediaStreamSourceClosedEventArgs :
	IInspectable,
	impl_IMediaStreamSourceClosedEventArgs<IMediaStreamSourceClosedEventArgs>
{
	IMediaStreamSourceClosedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceClosedEventArgs>>(m_ptr); }
};

struct IMediaStreamSourceStartingRequestDeferral :
	IInspectable,
	impl_IMediaStreamSourceStartingRequestDeferral<IMediaStreamSourceStartingRequestDeferral>
{
	IMediaStreamSourceStartingRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceStartingRequestDeferral>>(m_ptr); }
};

struct IMediaStreamSourceStartingRequest :
	IInspectable,
	impl_IMediaStreamSourceStartingRequest<IMediaStreamSourceStartingRequest>
{
	IMediaStreamSourceStartingRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceStartingRequest>>(m_ptr); }
};

struct IMediaStreamSourceStartingEventArgs :
	IInspectable,
	impl_IMediaStreamSourceStartingEventArgs<IMediaStreamSourceStartingEventArgs>
{
	IMediaStreamSourceStartingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceStartingEventArgs>>(m_ptr); }
};

struct IMediaStreamSourceSampleRequestDeferral :
	IInspectable,
	impl_IMediaStreamSourceSampleRequestDeferral<IMediaStreamSourceSampleRequestDeferral>
{
	IMediaStreamSourceSampleRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSampleRequestDeferral>>(m_ptr); }
};

struct IMediaStreamSourceSampleRequest :
	IInspectable,
	impl_IMediaStreamSourceSampleRequest<IMediaStreamSourceSampleRequest>
{
	IMediaStreamSourceSampleRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSampleRequest>>(m_ptr); }
};

struct IMediaStreamSourceSampleRequestedEventArgs :
	IInspectable,
	impl_IMediaStreamSourceSampleRequestedEventArgs<IMediaStreamSourceSampleRequestedEventArgs>
{
	IMediaStreamSourceSampleRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSampleRequestedEventArgs>>(m_ptr); }
};

struct IMediaStreamSourceSwitchStreamsRequestDeferral :
	IInspectable,
	impl_IMediaStreamSourceSwitchStreamsRequestDeferral<IMediaStreamSourceSwitchStreamsRequestDeferral>
{
	IMediaStreamSourceSwitchStreamsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSwitchStreamsRequestDeferral>>(m_ptr); }
};

struct IMediaStreamSourceSwitchStreamsRequest :
	IInspectable,
	impl_IMediaStreamSourceSwitchStreamsRequest<IMediaStreamSourceSwitchStreamsRequest>
{
	IMediaStreamSourceSwitchStreamsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSwitchStreamsRequest>>(m_ptr); }
};

struct IMediaStreamSourceSwitchStreamsRequestedEventArgs :
	IInspectable,
	impl_IMediaStreamSourceSwitchStreamsRequestedEventArgs<IMediaStreamSourceSwitchStreamsRequestedEventArgs>
{
	IMediaStreamSourceSwitchStreamsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaStreamSourceSwitchStreamsRequestedEventArgs>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

struct ICallControlEventHandler :
	IUnknown,
	impl_ICallControlEventHandler<ICallControlEventHandler>
{
	ICallControlEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICallControlEventHandler>>(m_ptr); }
};

struct IDialRequestedEventHandler :
	IUnknown,
	impl_IDialRequestedEventHandler<IDialRequestedEventHandler>
{
	IDialRequestedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDialRequestedEventHandler>>(m_ptr); }
};

struct IRedialRequestedEventHandler :
	IUnknown,
	impl_IRedialRequestedEventHandler<IRedialRequestedEventHandler>
{
	IRedialRequestedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRedialRequestedEventHandler>>(m_ptr); }
};

struct IKeypadPressedEventHandler :
	IUnknown,
	impl_IKeypadPressedEventHandler<IKeypadPressedEventHandler>
{
	IKeypadPressedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeypadPressedEventHandler>>(m_ptr); }
};

struct IDialRequestedEventArgs :
	IInspectable,
	impl_IDialRequestedEventArgs<IDialRequestedEventArgs>
{
	IDialRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDialRequestedEventArgs>>(m_ptr); }
};

struct IRedialRequestedEventArgs :
	IInspectable,
	impl_IRedialRequestedEventArgs<IRedialRequestedEventArgs>
{
	IRedialRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRedialRequestedEventArgs>>(m_ptr); }
};

struct IKeypadPressedEventArgs :
	IInspectable,
	impl_IKeypadPressedEventArgs<IKeypadPressedEventArgs>
{
	IKeypadPressedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeypadPressedEventArgs>>(m_ptr); }
};

struct ICallControl :
	IInspectable,
	impl_ICallControl<ICallControl>
{
	ICallControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICallControl>>(m_ptr); }
};

struct ICallControlStatics :
	IInspectable,
	impl_ICallControlStatics<ICallControlStatics>
{
	ICallControlStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICallControlStatics>>(m_ptr); }
};

struct IDefaultAudioDeviceChangedEventArgs :
	IInspectable,
	impl_IDefaultAudioDeviceChangedEventArgs<IDefaultAudioDeviceChangedEventArgs>
{
	IDefaultAudioDeviceChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDefaultAudioDeviceChangedEventArgs>>(m_ptr); }
};

struct IMediaDeviceStatics :
	IInspectable,
	impl_IMediaDeviceStatics<IMediaDeviceStatics>
{
	IMediaDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaDeviceStatics>>(m_ptr); }
};

struct ISceneModeControl :
	IInspectable,
	impl_ISceneModeControl<ISceneModeControl>
{
	ISceneModeControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISceneModeControl>>(m_ptr); }
};

struct ITorchControl :
	IInspectable,
	impl_ITorchControl<ITorchControl>
{
	ITorchControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITorchControl>>(m_ptr); }
};

struct IFlashControl :
	IInspectable,
	impl_IFlashControl<IFlashControl>
{
	IFlashControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFlashControl>>(m_ptr); }
};

struct IExposureCompensationControl :
	IInspectable,
	impl_IExposureCompensationControl<IExposureCompensationControl>
{
	IExposureCompensationControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExposureCompensationControl>>(m_ptr); }
};

struct IIsoSpeedControl :
	IInspectable,
	impl_IIsoSpeedControl<IIsoSpeedControl>
{
	IIsoSpeedControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIsoSpeedControl>>(m_ptr); }
};

struct IWhiteBalanceControl :
	IInspectable,
	impl_IWhiteBalanceControl<IWhiteBalanceControl>
{
	IWhiteBalanceControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWhiteBalanceControl>>(m_ptr); }
};

struct IExposureControl :
	IInspectable,
	impl_IExposureControl<IExposureControl>
{
	IExposureControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IExposureControl>>(m_ptr); }
};

struct IFocusControl :
	IInspectable,
	impl_IFocusControl<IFocusControl>
{
	IFocusControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFocusControl>>(m_ptr); }
};

struct IRegionOfInterest :
	IInspectable,
	impl_IRegionOfInterest<IRegionOfInterest>
{
	IRegionOfInterest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRegionOfInterest>>(m_ptr); }
};

struct IRegionsOfInterestControl :
	IInspectable,
	impl_IRegionsOfInterestControl<IRegionsOfInterestControl>
{
	IRegionsOfInterestControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRegionsOfInterestControl>>(m_ptr); }
};

struct IMediaDeviceController :
	IInspectable,
	impl_IMediaDeviceController<IMediaDeviceController>
{
	IMediaDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaDeviceController>>(m_ptr); }
};

struct IAudioDeviceController :
	IInspectable,
	impl_IAudioDeviceController<IAudioDeviceController>,
	Requires<IAudioDeviceController, Windows::Media::Devices::IMediaDeviceController>
{
	IAudioDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioDeviceController>>(m_ptr); }
};

struct IVideoDeviceController :
	IInspectable,
	impl_IVideoDeviceController<IVideoDeviceController>,
	Requires<IVideoDeviceController, Windows::Media::Devices::IMediaDeviceController>
{
	IVideoDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoDeviceController>>(m_ptr); }
};

struct IAdvancedVideoCaptureDeviceController2 :
	IInspectable,
	impl_IAdvancedVideoCaptureDeviceController2<IAdvancedVideoCaptureDeviceController2>
{
	IAdvancedVideoCaptureDeviceController2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAdvancedVideoCaptureDeviceController2>>(m_ptr); }
};

struct IMediaDeviceControl :
	IInspectable,
	impl_IMediaDeviceControl<IMediaDeviceControl>
{
	IMediaDeviceControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaDeviceControl>>(m_ptr); }
};

struct IMediaDeviceControlCapabilities :
	IInspectable,
	impl_IMediaDeviceControlCapabilities<IMediaDeviceControlCapabilities>
{
	IMediaDeviceControlCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaDeviceControlCapabilities>>(m_ptr); }
};

struct IAdvancedVideoCaptureDeviceController :
	IInspectable,
	impl_IAdvancedVideoCaptureDeviceController<IAdvancedVideoCaptureDeviceController>
{
	IAdvancedVideoCaptureDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAdvancedVideoCaptureDeviceController>>(m_ptr); }
};

struct ILowLagPhotoSequenceControl :
	IInspectable,
	impl_ILowLagPhotoSequenceControl<ILowLagPhotoSequenceControl>
{
	ILowLagPhotoSequenceControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagPhotoSequenceControl>>(m_ptr); }
};

struct ILowLagPhotoControl :
	IInspectable,
	impl_ILowLagPhotoControl<ILowLagPhotoControl>
{
	ILowLagPhotoControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILowLagPhotoControl>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

struct IAudioEffect :
	IInspectable,
	impl_IAudioEffect<IAudioEffect>
{
	IAudioEffect(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEffect>>(m_ptr); }
};

struct IAudioEffectsManagerStatics :
	IInspectable,
	impl_IAudioEffectsManagerStatics<IAudioEffectsManagerStatics>
{
	IAudioEffectsManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEffectsManagerStatics>>(m_ptr); }
};

struct IAudioRenderEffectsManager :
	IInspectable,
	impl_IAudioRenderEffectsManager<IAudioRenderEffectsManager>
{
	IAudioRenderEffectsManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioRenderEffectsManager>>(m_ptr); }
};

struct IAudioCaptureEffectsManager :
	IInspectable,
	impl_IAudioCaptureEffectsManager<IAudioCaptureEffectsManager>
{
	IAudioCaptureEffectsManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioCaptureEffectsManager>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

struct IMediaRatio :
	IInspectable,
	impl_IMediaRatio<IMediaRatio>
{
	IMediaRatio(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaRatio>>(m_ptr); }
};

struct IMediaEncodingProperties :
	IInspectable,
	impl_IMediaEncodingProperties<IMediaEncodingProperties>
{
	IMediaEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingProperties>>(m_ptr); }
};

struct IAudioEncodingProperties :
	IInspectable,
	impl_IAudioEncodingProperties<IAudioEncodingProperties>,
	Requires<IAudioEncodingProperties, Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	IAudioEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEncodingProperties>>(m_ptr); }
};

struct IAudioEncodingPropertiesWithFormatUserData :
	IInspectable,
	impl_IAudioEncodingPropertiesWithFormatUserData<IAudioEncodingPropertiesWithFormatUserData>
{
	IAudioEncodingPropertiesWithFormatUserData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEncodingPropertiesWithFormatUserData>>(m_ptr); }
};

struct IAudioEncodingPropertiesStatics :
	IInspectable,
	impl_IAudioEncodingPropertiesStatics<IAudioEncodingPropertiesStatics>
{
	IAudioEncodingPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAudioEncodingPropertiesStatics>>(m_ptr); }
};

struct IVideoEncodingProperties :
	IInspectable,
	impl_IVideoEncodingProperties<IVideoEncodingProperties>,
	Requires<IVideoEncodingProperties, Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	IVideoEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoEncodingProperties>>(m_ptr); }
};

struct IMediaEncodingSubtypesStatics :
	IInspectable,
	impl_IMediaEncodingSubtypesStatics<IMediaEncodingSubtypesStatics>
{
	IMediaEncodingSubtypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingSubtypesStatics>>(m_ptr); }
};

struct IH264ProfileIdsStatics :
	IInspectable,
	impl_IH264ProfileIdsStatics<IH264ProfileIdsStatics>
{
	IH264ProfileIdsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IH264ProfileIdsStatics>>(m_ptr); }
};

struct IMpeg2ProfileIdsStatics :
	IInspectable,
	impl_IMpeg2ProfileIdsStatics<IMpeg2ProfileIdsStatics>
{
	IMpeg2ProfileIdsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMpeg2ProfileIdsStatics>>(m_ptr); }
};

struct IVideoEncodingProperties2 :
	IInspectable,
	impl_IVideoEncodingProperties2<IVideoEncodingProperties2>
{
	IVideoEncodingProperties2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoEncodingProperties2>>(m_ptr); }
};

struct IVideoEncodingPropertiesStatics :
	IInspectable,
	impl_IVideoEncodingPropertiesStatics<IVideoEncodingPropertiesStatics>
{
	IVideoEncodingPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoEncodingPropertiesStatics>>(m_ptr); }
};

struct IImageEncodingProperties :
	IInspectable,
	impl_IImageEncodingProperties<IImageEncodingProperties>,
	Requires<IImageEncodingProperties, Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	IImageEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageEncodingProperties>>(m_ptr); }
};

struct IImageEncodingPropertiesStatics :
	IInspectable,
	impl_IImageEncodingPropertiesStatics<IImageEncodingPropertiesStatics>
{
	IImageEncodingPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageEncodingPropertiesStatics>>(m_ptr); }
};

struct IImageEncodingPropertiesStatics2 :
	IInspectable,
	impl_IImageEncodingPropertiesStatics2<IImageEncodingPropertiesStatics2>
{
	IImageEncodingPropertiesStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageEncodingPropertiesStatics2>>(m_ptr); }
};

struct IContainerEncodingProperties :
	IInspectable,
	impl_IContainerEncodingProperties<IContainerEncodingProperties>,
	Requires<IContainerEncodingProperties, Windows::Media::MediaProperties::IMediaEncodingProperties>
{
	IContainerEncodingProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContainerEncodingProperties>>(m_ptr); }
};

struct IMediaEncodingProfileStatics :
	IInspectable,
	impl_IMediaEncodingProfileStatics<IMediaEncodingProfileStatics>
{
	IMediaEncodingProfileStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingProfileStatics>>(m_ptr); }
};

struct IMediaEncodingProfileStatics2 :
	IInspectable,
	impl_IMediaEncodingProfileStatics2<IMediaEncodingProfileStatics2>
{
	IMediaEncodingProfileStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingProfileStatics2>>(m_ptr); }
};

struct IMediaEncodingProfile :
	IInspectable,
	impl_IMediaEncodingProfile<IMediaEncodingProfile>
{
	IMediaEncodingProfile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaEncodingProfile>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

struct ISourceChangeRequestedEventArgs :
	IInspectable,
	impl_ISourceChangeRequestedEventArgs<ISourceChangeRequestedEventArgs>
{
	ISourceChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISourceChangeRequestedEventArgs>>(m_ptr); }
};

struct IPlaybackRateChangeRequestedEventArgs :
	IInspectable,
	impl_IPlaybackRateChangeRequestedEventArgs<IPlaybackRateChangeRequestedEventArgs>
{
	IPlaybackRateChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlaybackRateChangeRequestedEventArgs>>(m_ptr); }
};

struct ICurrentTimeChangeRequestedEventArgs :
	IInspectable,
	impl_ICurrentTimeChangeRequestedEventArgs<ICurrentTimeChangeRequestedEventArgs>
{
	ICurrentTimeChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICurrentTimeChangeRequestedEventArgs>>(m_ptr); }
};

struct IMuteChangeRequestedEventArgs :
	IInspectable,
	impl_IMuteChangeRequestedEventArgs<IMuteChangeRequestedEventArgs>
{
	IMuteChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMuteChangeRequestedEventArgs>>(m_ptr); }
};

struct IVolumeChangeRequestedEventArgs :
	IInspectable,
	impl_IVolumeChangeRequestedEventArgs<IVolumeChangeRequestedEventArgs>
{
	IVolumeChangeRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVolumeChangeRequestedEventArgs>>(m_ptr); }
};

struct IPlayToReceiver :
	IInspectable,
	impl_IPlayToReceiver<IPlayToReceiver>
{
	IPlayToReceiver(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToReceiver>>(m_ptr); }
};

struct IPlayToSource :
	IInspectable,
	impl_IPlayToSource<IPlayToSource>
{
	IPlayToSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSource>>(m_ptr); }
};

struct IPlayToSourceWithPreferredSourceUri :
	IInspectable,
	impl_IPlayToSourceWithPreferredSourceUri<IPlayToSourceWithPreferredSourceUri>
{
	IPlayToSourceWithPreferredSourceUri(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceWithPreferredSourceUri>>(m_ptr); }
};

struct IPlayToConnectionStateChangedEventArgs :
	IInspectable,
	impl_IPlayToConnectionStateChangedEventArgs<IPlayToConnectionStateChangedEventArgs>
{
	IPlayToConnectionStateChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToConnectionStateChangedEventArgs>>(m_ptr); }
};

struct IPlayToConnectionTransferredEventArgs :
	IInspectable,
	impl_IPlayToConnectionTransferredEventArgs<IPlayToConnectionTransferredEventArgs>
{
	IPlayToConnectionTransferredEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToConnectionTransferredEventArgs>>(m_ptr); }
};

struct IPlayToConnectionErrorEventArgs :
	IInspectable,
	impl_IPlayToConnectionErrorEventArgs<IPlayToConnectionErrorEventArgs>
{
	IPlayToConnectionErrorEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToConnectionErrorEventArgs>>(m_ptr); }
};

struct IPlayToConnection :
	IInspectable,
	impl_IPlayToConnection<IPlayToConnection>
{
	IPlayToConnection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToConnection>>(m_ptr); }
};

struct IPlayToSourceSelectedEventArgs :
	IInspectable,
	impl_IPlayToSourceSelectedEventArgs<IPlayToSourceSelectedEventArgs>
{
	IPlayToSourceSelectedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceSelectedEventArgs>>(m_ptr); }
};

struct IPlayToSourceDeferral :
	IInspectable,
	impl_IPlayToSourceDeferral<IPlayToSourceDeferral>
{
	IPlayToSourceDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceDeferral>>(m_ptr); }
};

struct IPlayToSourceRequest :
	IInspectable,
	impl_IPlayToSourceRequest<IPlayToSourceRequest>
{
	IPlayToSourceRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceRequest>>(m_ptr); }
};

struct IPlayToSourceRequestedEventArgs :
	IInspectable,
	impl_IPlayToSourceRequestedEventArgs<IPlayToSourceRequestedEventArgs>
{
	IPlayToSourceRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToSourceRequestedEventArgs>>(m_ptr); }
};

struct IPlayToManager :
	IInspectable,
	impl_IPlayToManager<IPlayToManager>
{
	IPlayToManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToManager>>(m_ptr); }
};

struct IPlayToManagerStatics :
	IInspectable,
	impl_IPlayToManagerStatics<IPlayToManagerStatics>
{
	IPlayToManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlayToManagerStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

struct IPlaylist :
	IInspectable,
	impl_IPlaylist<IPlaylist>
{
	IPlaylist(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlaylist>>(m_ptr); }
};

struct IPlaylistStatics :
	IInspectable,
	impl_IPlaylistStatics<IPlaylistStatics>
{
	IPlaylistStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPlaylistStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

struct IServiceRequestedEventHandler :
	IUnknown,
	impl_IServiceRequestedEventHandler<IServiceRequestedEventHandler>
{
	IServiceRequestedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IServiceRequestedEventHandler>>(m_ptr); }
};

struct IRebootNeededEventHandler :
	IUnknown,
	impl_IRebootNeededEventHandler<IRebootNeededEventHandler>
{
	IRebootNeededEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRebootNeededEventHandler>>(m_ptr); }
};

struct IComponentLoadFailedEventHandler :
	IUnknown,
	impl_IComponentLoadFailedEventHandler<IComponentLoadFailedEventHandler>
{
	IComponentLoadFailedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComponentLoadFailedEventHandler>>(m_ptr); }
};

struct IMediaProtectionManager :
	IInspectable,
	impl_IMediaProtectionManager<IMediaProtectionManager>
{
	IMediaProtectionManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaProtectionManager>>(m_ptr); }
};

struct IMediaProtectionServiceCompletion :
	IInspectable,
	impl_IMediaProtectionServiceCompletion<IMediaProtectionServiceCompletion>
{
	IMediaProtectionServiceCompletion(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaProtectionServiceCompletion>>(m_ptr); }
};

struct IServiceRequestedEventArgs :
	IInspectable,
	impl_IServiceRequestedEventArgs<IServiceRequestedEventArgs>
{
	IServiceRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IServiceRequestedEventArgs>>(m_ptr); }
};

struct IMediaProtectionServiceRequest :
	IInspectable,
	impl_IMediaProtectionServiceRequest<IMediaProtectionServiceRequest>
{
	IMediaProtectionServiceRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaProtectionServiceRequest>>(m_ptr); }
};

struct IComponentLoadFailedEventArgs :
	IInspectable,
	impl_IComponentLoadFailedEventArgs<IComponentLoadFailedEventArgs>
{
	IComponentLoadFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComponentLoadFailedEventArgs>>(m_ptr); }
};

struct IRevocationAndRenewalInformation :
	IInspectable,
	impl_IRevocationAndRenewalInformation<IRevocationAndRenewalInformation>
{
	IRevocationAndRenewalInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRevocationAndRenewalInformation>>(m_ptr); }
};

struct IRevocationAndRenewalItem :
	IInspectable,
	impl_IRevocationAndRenewalItem<IRevocationAndRenewalItem>
{
	IRevocationAndRenewalItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRevocationAndRenewalItem>>(m_ptr); }
};

struct IComponentRenewalStatics :
	IInspectable,
	impl_IComponentRenewalStatics<IComponentRenewalStatics>
{
	IComponentRenewalStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IComponentRenewalStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

struct IVoiceInformation :
	IInspectable,
	impl_IVoiceInformation<IVoiceInformation>
{
	IVoiceInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVoiceInformation>>(m_ptr); }
};

struct IInstalledVoicesStatic :
	IInspectable,
	impl_IInstalledVoicesStatic<IInstalledVoicesStatic>
{
	IInstalledVoicesStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInstalledVoicesStatic>>(m_ptr); }
};

struct ISpeechSynthesisStream :
	IInspectable,
	impl_ISpeechSynthesisStream<ISpeechSynthesisStream>,
	Requires<ISpeechSynthesisStream, Windows::Storage::Streams::IRandomAccessStreamWithContentType, Windows::Storage::Streams::IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream, Windows::Storage::Streams::IContentTypeProvider>
{
	ISpeechSynthesisStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpeechSynthesisStream>>(m_ptr); }
};

struct ISpeechSynthesizer :
	IInspectable,
	impl_ISpeechSynthesizer<ISpeechSynthesizer>
{
	ISpeechSynthesizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISpeechSynthesizer>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

struct IDeviceControllerFinderHandler :
	IUnknown,
	impl_IDeviceControllerFinderHandler<IDeviceControllerFinderHandler>
{
	IDeviceControllerFinderHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceControllerFinderHandler>>(m_ptr); }
};

struct IConnectionStatusHandler :
	IUnknown,
	impl_IConnectionStatusHandler<IConnectionStatusHandler>
{
	IConnectionStatusHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionStatusHandler>>(m_ptr); }
};

struct IDeviceController :
	IInspectable,
	impl_IDeviceController<IDeviceController>
{
	IDeviceController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceController>>(m_ptr); }
};

struct IBasicDevice :
	IInspectable,
	impl_IBasicDevice<IBasicDevice>
{
	IBasicDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBasicDevice>>(m_ptr); }
};

struct IActiveBasicDevice :
	IInspectable,
	impl_IActiveBasicDevice<IActiveBasicDevice>,
	Requires<IActiveBasicDevice, IBasicDevice>
{
	IActiveBasicDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActiveBasicDevice>>(m_ptr); }
};

struct IDeviceIcon :
	IInspectable,
	impl_IDeviceIcon<IDeviceIcon>
{
	IDeviceIcon(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceIcon>>(m_ptr); }
};

struct IActiveBasicDeviceStatics :
	IInspectable,
	impl_IActiveBasicDeviceStatics<IActiveBasicDeviceStatics>
{
	IActiveBasicDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActiveBasicDeviceStatics>>(m_ptr); }
};

struct IDevicePair :
	IInspectable,
	impl_IDevicePair<IDevicePair>
{
	IDevicePair(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDevicePair>>(m_ptr); }
};

struct ITransportParametersUpdateHandler :
	IUnknown,
	impl_ITransportParametersUpdateHandler<ITransportParametersUpdateHandler>
{
	ITransportParametersUpdateHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransportParametersUpdateHandler>>(m_ptr); }
};

struct IRenderingParametersUpdateHandler :
	IUnknown,
	impl_IRenderingParametersUpdateHandler<IRenderingParametersUpdateHandler>
{
	IRenderingParametersUpdateHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRenderingParametersUpdateHandler>>(m_ptr); }
};

struct IMediaRenderer :
	IInspectable,
	impl_IMediaRenderer<IMediaRenderer>,
	Requires<IMediaRenderer, IBasicDevice>
{
	IMediaRenderer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaRenderer>>(m_ptr); }
};

struct IMediaRendererActionInformation :
	IInspectable,
	impl_IMediaRendererActionInformation<IMediaRendererActionInformation>
{
	IMediaRendererActionInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaRendererActionInformation>>(m_ptr); }
};

struct ITransportParameters :
	IInspectable,
	impl_ITransportParameters<ITransportParameters>
{
	ITransportParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITransportParameters>>(m_ptr); }
};

struct IMediaRendererFactory :
	IInspectable,
	impl_IMediaRendererFactory<IMediaRendererFactory>
{
	IMediaRendererFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaRendererFactory>>(m_ptr); }
};

struct IStreamSelectorStatics :
	IInspectable,
	impl_IStreamSelectorStatics<IStreamSelectorStatics>
{
	IStreamSelectorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSelectorStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

struct IMediaTranscoder2 :
	IInspectable,
	impl_IMediaTranscoder2<IMediaTranscoder2>
{
	IMediaTranscoder2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaTranscoder2>>(m_ptr); }
};

struct IMediaTranscoder :
	IInspectable,
	impl_IMediaTranscoder<IMediaTranscoder>
{
	IMediaTranscoder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMediaTranscoder>>(m_ptr); }
};

struct IPrepareTranscodeResult :
	IInspectable,
	impl_IPrepareTranscodeResult<IPrepareTranscodeResult>
{
	IPrepareTranscodeResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPrepareTranscodeResult>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking {

struct IHostNameStatics :
	IInspectable,
	impl_IHostNameStatics<IHostNameStatics>
{
	IHostNameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHostNameStatics>>(m_ptr); }
};

struct IHostName :
	IInspectable,
	impl_IHostName<IHostName>
{
	IHostName(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHostName>>(m_ptr); }
};

struct IHostNameFactory :
	IInspectable,
	impl_IHostNameFactory<IHostNameFactory>
{
	IHostNameFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHostNameFactory>>(m_ptr); }
};

struct IEndpointPair :
	IInspectable,
	impl_IEndpointPair<IEndpointPair>
{
	IEndpointPair(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEndpointPair>>(m_ptr); }
};

struct IEndpointPairFactory :
	IInspectable,
	impl_IEndpointPairFactory<IEndpointPairFactory>
{
	IEndpointPairFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEndpointPairFactory>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

struct IBackgroundTransferBase :
	IInspectable,
	impl_IBackgroundTransferBase<IBackgroundTransferBase>
{
	IBackgroundTransferBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferBase>>(m_ptr); }
};

struct IUnconstrainedTransferRequestResult :
	IInspectable,
	impl_IUnconstrainedTransferRequestResult<IUnconstrainedTransferRequestResult>
{
	IUnconstrainedTransferRequestResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUnconstrainedTransferRequestResult>>(m_ptr); }
};

struct IBackgroundDownloaderUserConsent :
	IInspectable,
	impl_IBackgroundDownloaderUserConsent<IBackgroundDownloaderUserConsent>
{
	IBackgroundDownloaderUserConsent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloaderUserConsent>>(m_ptr); }
};

struct IBackgroundUploaderUserConsent :
	IInspectable,
	impl_IBackgroundUploaderUserConsent<IBackgroundUploaderUserConsent>
{
	IBackgroundUploaderUserConsent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploaderUserConsent>>(m_ptr); }
};

struct IBackgroundDownloader :
	IInspectable,
	impl_IBackgroundDownloader<IBackgroundDownloader>,
	Requires<IBackgroundDownloader, Windows::Networking::BackgroundTransfer::IBackgroundTransferBase>
{
	IBackgroundDownloader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloader>>(m_ptr); }
};

struct IBackgroundDownloader2 :
	IInspectable,
	impl_IBackgroundDownloader2<IBackgroundDownloader2>
{
	IBackgroundDownloader2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloader2>>(m_ptr); }
};

struct IBackgroundUploader :
	IInspectable,
	impl_IBackgroundUploader<IBackgroundUploader>,
	Requires<IBackgroundUploader, Windows::Networking::BackgroundTransfer::IBackgroundTransferBase>
{
	IBackgroundUploader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploader>>(m_ptr); }
};

struct IBackgroundUploader2 :
	IInspectable,
	impl_IBackgroundUploader2<IBackgroundUploader2>
{
	IBackgroundUploader2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploader2>>(m_ptr); }
};

struct IBackgroundTransferOperation :
	IInspectable,
	impl_IBackgroundTransferOperation<IBackgroundTransferOperation>
{
	IBackgroundTransferOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferOperation>>(m_ptr); }
};

struct IBackgroundTransferOperationPriority :
	IInspectable,
	impl_IBackgroundTransferOperationPriority<IBackgroundTransferOperationPriority>
{
	IBackgroundTransferOperationPriority(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferOperationPriority>>(m_ptr); }
};

struct IDownloadOperation :
	IInspectable,
	impl_IDownloadOperation<IDownloadOperation>,
	Requires<IDownloadOperation, Windows::Networking::BackgroundTransfer::IBackgroundTransferOperation>
{
	IDownloadOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDownloadOperation>>(m_ptr); }
};

struct IDownloadOperation2 :
	IInspectable,
	impl_IDownloadOperation2<IDownloadOperation2>
{
	IDownloadOperation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDownloadOperation2>>(m_ptr); }
};

struct IUploadOperation :
	IInspectable,
	impl_IUploadOperation<IUploadOperation>,
	Requires<IUploadOperation, Windows::Networking::BackgroundTransfer::IBackgroundTransferOperation>
{
	IUploadOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUploadOperation>>(m_ptr); }
};

struct IUploadOperation2 :
	IInspectable,
	impl_IUploadOperation2<IUploadOperation2>
{
	IUploadOperation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUploadOperation2>>(m_ptr); }
};

struct IBackgroundDownloaderStaticMethods :
	IInspectable,
	impl_IBackgroundDownloaderStaticMethods<IBackgroundDownloaderStaticMethods>
{
	IBackgroundDownloaderStaticMethods(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloaderStaticMethods>>(m_ptr); }
};

struct IBackgroundDownloaderStaticMethods2 :
	IInspectable,
	impl_IBackgroundDownloaderStaticMethods2<IBackgroundDownloaderStaticMethods2>
{
	IBackgroundDownloaderStaticMethods2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundDownloaderStaticMethods2>>(m_ptr); }
};

struct IBackgroundUploaderStaticMethods :
	IInspectable,
	impl_IBackgroundUploaderStaticMethods<IBackgroundUploaderStaticMethods>
{
	IBackgroundUploaderStaticMethods(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploaderStaticMethods>>(m_ptr); }
};

struct IBackgroundUploaderStaticMethods2 :
	IInspectable,
	impl_IBackgroundUploaderStaticMethods2<IBackgroundUploaderStaticMethods2>
{
	IBackgroundUploaderStaticMethods2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundUploaderStaticMethods2>>(m_ptr); }
};

struct IResponseInformation :
	IInspectable,
	impl_IResponseInformation<IResponseInformation>
{
	IResponseInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResponseInformation>>(m_ptr); }
};

struct IBackgroundTransferErrorStaticMethods :
	IInspectable,
	impl_IBackgroundTransferErrorStaticMethods<IBackgroundTransferErrorStaticMethods>
{
	IBackgroundTransferErrorStaticMethods(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferErrorStaticMethods>>(m_ptr); }
};

struct IBackgroundTransferContentPart :
	IInspectable,
	impl_IBackgroundTransferContentPart<IBackgroundTransferContentPart>
{
	IBackgroundTransferContentPart(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferContentPart>>(m_ptr); }
};

struct IBackgroundTransferContentPartFactory :
	IInspectable,
	impl_IBackgroundTransferContentPartFactory<IBackgroundTransferContentPartFactory>
{
	IBackgroundTransferContentPartFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferContentPartFactory>>(m_ptr); }
};

struct IBackgroundTransferGroup :
	IInspectable,
	impl_IBackgroundTransferGroup<IBackgroundTransferGroup>
{
	IBackgroundTransferGroup(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferGroup>>(m_ptr); }
};

struct IBackgroundTransferGroupStatics :
	IInspectable,
	impl_IBackgroundTransferGroupStatics<IBackgroundTransferGroupStatics>
{
	IBackgroundTransferGroupStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBackgroundTransferGroupStatics>>(m_ptr); }
};

struct IContentPrefetcherTime :
	IInspectable,
	impl_IContentPrefetcherTime<IContentPrefetcherTime>
{
	IContentPrefetcherTime(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPrefetcherTime>>(m_ptr); }
};

struct IContentPrefetcher :
	IInspectable,
	impl_IContentPrefetcher<IContentPrefetcher>
{
	IContentPrefetcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentPrefetcher>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

struct INetworkStatusChangedEventHandler :
	IUnknown,
	impl_INetworkStatusChangedEventHandler<INetworkStatusChangedEventHandler>
{
	INetworkStatusChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkStatusChangedEventHandler>>(m_ptr); }
};

struct IDataPlanUsage :
	IInspectable,
	impl_IDataPlanUsage<IDataPlanUsage>
{
	IDataPlanUsage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPlanUsage>>(m_ptr); }
};

struct IDataPlanStatus :
	IInspectable,
	impl_IDataPlanStatus<IDataPlanStatus>
{
	IDataPlanStatus(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataPlanStatus>>(m_ptr); }
};

struct IConnectionCost :
	IInspectable,
	impl_IConnectionCost<IConnectionCost>
{
	IConnectionCost(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionCost>>(m_ptr); }
};

struct INetworkSecuritySettings :
	IInspectable,
	impl_INetworkSecuritySettings<INetworkSecuritySettings>
{
	INetworkSecuritySettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkSecuritySettings>>(m_ptr); }
};

struct IConnectionProfile :
	IInspectable,
	impl_IConnectionProfile<IConnectionProfile>
{
	IConnectionProfile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionProfile>>(m_ptr); }
};

struct IWwanConnectionProfileDetails :
	IInspectable,
	impl_IWwanConnectionProfileDetails<IWwanConnectionProfileDetails>
{
	IWwanConnectionProfileDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWwanConnectionProfileDetails>>(m_ptr); }
};

struct IWlanConnectionProfileDetails :
	IInspectable,
	impl_IWlanConnectionProfileDetails<IWlanConnectionProfileDetails>
{
	IWlanConnectionProfileDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWlanConnectionProfileDetails>>(m_ptr); }
};

struct IConnectivityInterval :
	IInspectable,
	impl_IConnectivityInterval<IConnectivityInterval>
{
	IConnectivityInterval(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectivityInterval>>(m_ptr); }
};

struct INetworkUsage :
	IInspectable,
	impl_INetworkUsage<INetworkUsage>
{
	INetworkUsage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkUsage>>(m_ptr); }
};

struct IConnectionProfile2 :
	IInspectable,
	impl_IConnectionProfile2<IConnectionProfile2>
{
	IConnectionProfile2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionProfile2>>(m_ptr); }
};

struct ILanIdentifierData :
	IInspectable,
	impl_ILanIdentifierData<ILanIdentifierData>
{
	ILanIdentifierData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanIdentifierData>>(m_ptr); }
};

struct ILanIdentifier :
	IInspectable,
	impl_ILanIdentifier<ILanIdentifier>
{
	ILanIdentifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILanIdentifier>>(m_ptr); }
};

struct INetworkInformationStatics :
	IInspectable,
	impl_INetworkInformationStatics<INetworkInformationStatics>
{
	INetworkInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkInformationStatics>>(m_ptr); }
};

struct IConnectionProfileFilter :
	IInspectable,
	impl_IConnectionProfileFilter<IConnectionProfileFilter>
{
	IConnectionProfileFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionProfileFilter>>(m_ptr); }
};

struct INetworkInformationStatics2 :
	IInspectable,
	impl_INetworkInformationStatics2<INetworkInformationStatics2>
{
	INetworkInformationStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkInformationStatics2>>(m_ptr); }
};

struct INetworkItem :
	IInspectable,
	impl_INetworkItem<INetworkItem>
{
	INetworkItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkItem>>(m_ptr); }
};

struct INetworkAdapter :
	IInspectable,
	impl_INetworkAdapter<INetworkAdapter>
{
	INetworkAdapter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkAdapter>>(m_ptr); }
};

struct IIPInformation :
	IInspectable,
	impl_IIPInformation<IIPInformation>
{
	IIPInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIPInformation>>(m_ptr); }
};

struct IProxyConfiguration :
	IInspectable,
	impl_IProxyConfiguration<IProxyConfiguration>
{
	IProxyConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProxyConfiguration>>(m_ptr); }
};

struct IConnectionSession :
	IInspectable,
	impl_IConnectionSession<IConnectionSession>
{
	IConnectionSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionSession>>(m_ptr); }
};

struct IRoutePolicy :
	IInspectable,
	impl_IRoutePolicy<IRoutePolicy>
{
	IRoutePolicy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRoutePolicy>>(m_ptr); }
};

struct IRoutePolicyFactory :
	IInspectable,
	impl_IRoutePolicyFactory<IRoutePolicyFactory>
{
	IRoutePolicyFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRoutePolicyFactory>>(m_ptr); }
};

struct ICellularApnContext :
	IInspectable,
	impl_ICellularApnContext<ICellularApnContext>
{
	ICellularApnContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICellularApnContext>>(m_ptr); }
};

struct IConnectivityManagerStatics :
	IInspectable,
	impl_IConnectivityManagerStatics<IConnectivityManagerStatics>
{
	IConnectivityManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectivityManagerStatics>>(m_ptr); }
};

struct INetworkStateChangeEventDetails :
	IInspectable,
	impl_INetworkStateChangeEventDetails<INetworkStateChangeEventDetails>
{
	INetworkStateChangeEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkStateChangeEventDetails>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

struct IMobileBroadbandAccountStatics :
	IInspectable,
	impl_IMobileBroadbandAccountStatics<IMobileBroadbandAccountStatics>
{
	IMobileBroadbandAccountStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccountStatics>>(m_ptr); }
};

struct IMobileBroadbandAccount :
	IInspectable,
	impl_IMobileBroadbandAccount<IMobileBroadbandAccount>
{
	IMobileBroadbandAccount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccount>>(m_ptr); }
};

struct IMobileBroadbandAccount2 :
	IInspectable,
	impl_IMobileBroadbandAccount2<IMobileBroadbandAccount2>
{
	IMobileBroadbandAccount2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccount2>>(m_ptr); }
};

struct IMobileBroadbandDeviceInformation :
	IInspectable,
	impl_IMobileBroadbandDeviceInformation<IMobileBroadbandDeviceInformation>
{
	IMobileBroadbandDeviceInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandDeviceInformation>>(m_ptr); }
};

struct IMobileBroadbandNetwork :
	IInspectable,
	impl_IMobileBroadbandNetwork<IMobileBroadbandNetwork>
{
	IMobileBroadbandNetwork(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandNetwork>>(m_ptr); }
};

struct INetworkOperatorNotificationEventDetails :
	IInspectable,
	impl_INetworkOperatorNotificationEventDetails<INetworkOperatorNotificationEventDetails>
{
	INetworkOperatorNotificationEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorNotificationEventDetails>>(m_ptr); }
};

struct INetworkOperatorTetheringEntitlementCheck :
	IInspectable,
	impl_INetworkOperatorTetheringEntitlementCheck<INetworkOperatorTetheringEntitlementCheck>
{
	INetworkOperatorTetheringEntitlementCheck(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringEntitlementCheck>>(m_ptr); }
};

struct INetworkOperatorTetheringAccessPointConfiguration :
	IInspectable,
	impl_INetworkOperatorTetheringAccessPointConfiguration<INetworkOperatorTetheringAccessPointConfiguration>
{
	INetworkOperatorTetheringAccessPointConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringAccessPointConfiguration>>(m_ptr); }
};

struct INetworkOperatorTetheringOperationResult :
	IInspectable,
	impl_INetworkOperatorTetheringOperationResult<INetworkOperatorTetheringOperationResult>
{
	INetworkOperatorTetheringOperationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringOperationResult>>(m_ptr); }
};

struct INetworkOperatorTetheringManagerStatics :
	IInspectable,
	impl_INetworkOperatorTetheringManagerStatics<INetworkOperatorTetheringManagerStatics>
{
	INetworkOperatorTetheringManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringManagerStatics>>(m_ptr); }
};

struct INetworkOperatorTetheringManager :
	IInspectable,
	impl_INetworkOperatorTetheringManager<INetworkOperatorTetheringManager>
{
	INetworkOperatorTetheringManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INetworkOperatorTetheringManager>>(m_ptr); }
};

struct IMobileBroadbandAccountEventArgs :
	IInspectable,
	impl_IMobileBroadbandAccountEventArgs<IMobileBroadbandAccountEventArgs>
{
	IMobileBroadbandAccountEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccountEventArgs>>(m_ptr); }
};

struct IMobileBroadbandAccountUpdatedEventArgs :
	IInspectable,
	impl_IMobileBroadbandAccountUpdatedEventArgs<IMobileBroadbandAccountUpdatedEventArgs>
{
	IMobileBroadbandAccountUpdatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccountUpdatedEventArgs>>(m_ptr); }
};

struct IMobileBroadbandAccountWatcher :
	IInspectable,
	impl_IMobileBroadbandAccountWatcher<IMobileBroadbandAccountWatcher>
{
	IMobileBroadbandAccountWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMobileBroadbandAccountWatcher>>(m_ptr); }
};

struct IHotspotAuthenticationEventDetails :
	IInspectable,
	impl_IHotspotAuthenticationEventDetails<IHotspotAuthenticationEventDetails>
{
	IHotspotAuthenticationEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotAuthenticationEventDetails>>(m_ptr); }
};

struct IHotspotAuthenticationContextStatics :
	IInspectable,
	impl_IHotspotAuthenticationContextStatics<IHotspotAuthenticationContextStatics>
{
	IHotspotAuthenticationContextStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotAuthenticationContextStatics>>(m_ptr); }
};

struct IHotspotAuthenticationContext :
	IInspectable,
	impl_IHotspotAuthenticationContext<IHotspotAuthenticationContext>
{
	IHotspotAuthenticationContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotAuthenticationContext>>(m_ptr); }
};

struct IHotspotCredentialsAuthenticationResult :
	IInspectable,
	impl_IHotspotCredentialsAuthenticationResult<IHotspotCredentialsAuthenticationResult>
{
	IHotspotCredentialsAuthenticationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotCredentialsAuthenticationResult>>(m_ptr); }
};

struct IHotspotAuthenticationContext2 :
	IInspectable,
	impl_IHotspotAuthenticationContext2<IHotspotAuthenticationContext2>
{
	IHotspotAuthenticationContext2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHotspotAuthenticationContext2>>(m_ptr); }
};

struct IProvisionFromXmlDocumentResults :
	IInspectable,
	impl_IProvisionFromXmlDocumentResults<IProvisionFromXmlDocumentResults>
{
	IProvisionFromXmlDocumentResults(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProvisionFromXmlDocumentResults>>(m_ptr); }
};

struct IProvisionedProfile :
	IInspectable,
	impl_IProvisionedProfile<IProvisionedProfile>
{
	IProvisionedProfile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProvisionedProfile>>(m_ptr); }
};

struct IProvisioningAgent :
	IInspectable,
	impl_IProvisioningAgent<IProvisioningAgent>
{
	IProvisioningAgent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProvisioningAgent>>(m_ptr); }
};

struct IProvisioningAgentStaticMethods :
	IInspectable,
	impl_IProvisioningAgentStaticMethods<IProvisioningAgentStaticMethods>
{
	IProvisioningAgentStaticMethods(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProvisioningAgentStaticMethods>>(m_ptr); }
};

struct IUssdMessage :
	IInspectable,
	impl_IUssdMessage<IUssdMessage>
{
	IUssdMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdMessage>>(m_ptr); }
};

struct IUssdMessageFactory :
	IInspectable,
	impl_IUssdMessageFactory<IUssdMessageFactory>
{
	IUssdMessageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdMessageFactory>>(m_ptr); }
};

struct IUssdReply :
	IInspectable,
	impl_IUssdReply<IUssdReply>
{
	IUssdReply(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdReply>>(m_ptr); }
};

struct IUssdSession :
	IInspectable,
	impl_IUssdSession<IUssdSession>
{
	IUssdSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdSession>>(m_ptr); }
};

struct IUssdSessionStatics :
	IInspectable,
	impl_IUssdSessionStatics<IUssdSessionStatics>
{
	IUssdSessionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUssdSessionStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

struct IMessageReceivedHandler :
	IUnknown,
	impl_IMessageReceivedHandler<IMessageReceivedHandler>
{
	IMessageReceivedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageReceivedHandler>>(m_ptr); }
};

struct IMessageTransmittedHandler :
	IUnknown,
	impl_IMessageTransmittedHandler<IMessageTransmittedHandler>
{
	IMessageTransmittedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageTransmittedHandler>>(m_ptr); }
};

struct IDeviceArrivedEventHandler :
	IUnknown,
	impl_IDeviceArrivedEventHandler<IDeviceArrivedEventHandler>
{
	IDeviceArrivedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceArrivedEventHandler>>(m_ptr); }
};

struct IDeviceDepartedEventHandler :
	IUnknown,
	impl_IDeviceDepartedEventHandler<IDeviceDepartedEventHandler>
{
	IDeviceDepartedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDeviceDepartedEventHandler>>(m_ptr); }
};

struct IProximityMessage :
	IInspectable,
	impl_IProximityMessage<IProximityMessage>
{
	IProximityMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProximityMessage>>(m_ptr); }
};

struct IProximityDevice :
	IInspectable,
	impl_IProximityDevice<IProximityDevice>
{
	IProximityDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProximityDevice>>(m_ptr); }
};

struct IProximityDeviceStatics :
	IInspectable,
	impl_IProximityDeviceStatics<IProximityDeviceStatics>
{
	IProximityDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProximityDeviceStatics>>(m_ptr); }
};

struct ITriggeredConnectionStateChangedEventArgs :
	IInspectable,
	impl_ITriggeredConnectionStateChangedEventArgs<ITriggeredConnectionStateChangedEventArgs>
{
	ITriggeredConnectionStateChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITriggeredConnectionStateChangedEventArgs>>(m_ptr); }
};

struct IPeerInformation :
	IInspectable,
	impl_IPeerInformation<IPeerInformation>
{
	IPeerInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerInformation>>(m_ptr); }
};

struct IPeerInformation3 :
	IInspectable,
	impl_IPeerInformation3<IPeerInformation3>
{
	IPeerInformation3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerInformation3>>(m_ptr); }
};

struct IConnectionRequestedEventArgs :
	IInspectable,
	impl_IConnectionRequestedEventArgs<IConnectionRequestedEventArgs>
{
	IConnectionRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IConnectionRequestedEventArgs>>(m_ptr); }
};

struct IPeerWatcher :
	IInspectable,
	impl_IPeerWatcher<IPeerWatcher>
{
	IPeerWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerWatcher>>(m_ptr); }
};

struct IPeerFinderStatics :
	IInspectable,
	impl_IPeerFinderStatics<IPeerFinderStatics>
{
	IPeerFinderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerFinderStatics>>(m_ptr); }
};

struct IPeerFinderStatics2 :
	IInspectable,
	impl_IPeerFinderStatics2<IPeerFinderStatics2>
{
	IPeerFinderStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPeerFinderStatics2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

struct IPushNotificationChannelManagerStatics :
	IInspectable,
	impl_IPushNotificationChannelManagerStatics<IPushNotificationChannelManagerStatics>
{
	IPushNotificationChannelManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPushNotificationChannelManagerStatics>>(m_ptr); }
};

struct IPushNotificationChannel :
	IInspectable,
	impl_IPushNotificationChannel<IPushNotificationChannel>
{
	IPushNotificationChannel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPushNotificationChannel>>(m_ptr); }
};

struct IPushNotificationReceivedEventArgs :
	IInspectable,
	impl_IPushNotificationReceivedEventArgs<IPushNotificationReceivedEventArgs>
{
	IPushNotificationReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPushNotificationReceivedEventArgs>>(m_ptr); }
};

struct IRawNotification :
	IInspectable,
	impl_IRawNotification<IRawNotification>
{
	IRawNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRawNotification>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

struct IControlChannelTrigger :
	IInspectable,
	impl_IControlChannelTrigger<IControlChannelTrigger>
{
	IControlChannelTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlChannelTrigger>>(m_ptr); }
};

struct IControlChannelTriggerFactory :
	IInspectable,
	impl_IControlChannelTriggerFactory<IControlChannelTriggerFactory>
{
	IControlChannelTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlChannelTriggerFactory>>(m_ptr); }
};

struct IControlChannelTriggerEventDetails :
	IInspectable,
	impl_IControlChannelTriggerEventDetails<IControlChannelTriggerEventDetails>
{
	IControlChannelTriggerEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlChannelTriggerEventDetails>>(m_ptr); }
};

struct IControlChannelTriggerResetEventDetails :
	IInspectable,
	impl_IControlChannelTriggerResetEventDetails<IControlChannelTriggerResetEventDetails>
{
	IControlChannelTriggerResetEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IControlChannelTriggerResetEventDetails>>(m_ptr); }
};

struct IDatagramSocketMessageReceivedEventArgs :
	IInspectable,
	impl_IDatagramSocketMessageReceivedEventArgs<IDatagramSocketMessageReceivedEventArgs>
{
	IDatagramSocketMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketMessageReceivedEventArgs>>(m_ptr); }
};

struct IMessageWebSocketMessageReceivedEventArgs :
	IInspectable,
	impl_IMessageWebSocketMessageReceivedEventArgs<IMessageWebSocketMessageReceivedEventArgs>
{
	IMessageWebSocketMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageWebSocketMessageReceivedEventArgs>>(m_ptr); }
};

struct IWebSocketClosedEventArgs :
	IInspectable,
	impl_IWebSocketClosedEventArgs<IWebSocketClosedEventArgs>
{
	IWebSocketClosedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocketClosedEventArgs>>(m_ptr); }
};

struct IDatagramSocketInformation :
	IInspectable,
	impl_IDatagramSocketInformation<IDatagramSocketInformation>
{
	IDatagramSocketInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketInformation>>(m_ptr); }
};

struct IDatagramSocketControl :
	IInspectable,
	impl_IDatagramSocketControl<IDatagramSocketControl>
{
	IDatagramSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketControl>>(m_ptr); }
};

struct IDatagramSocketControl2 :
	IInspectable,
	impl_IDatagramSocketControl2<IDatagramSocketControl2>
{
	IDatagramSocketControl2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketControl2>>(m_ptr); }
};

struct IDatagramSocketStatics :
	IInspectable,
	impl_IDatagramSocketStatics<IDatagramSocketStatics>
{
	IDatagramSocketStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocketStatics>>(m_ptr); }
};

struct IDatagramSocket :
	IInspectable,
	impl_IDatagramSocket<IDatagramSocket>
{
	IDatagramSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocket>>(m_ptr); }
};

struct IDatagramSocket2 :
	IInspectable,
	impl_IDatagramSocket2<IDatagramSocket2>
{
	IDatagramSocket2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDatagramSocket2>>(m_ptr); }
};

struct IStreamSocketInformation :
	IInspectable,
	impl_IStreamSocketInformation<IStreamSocketInformation>
{
	IStreamSocketInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketInformation>>(m_ptr); }
};

struct IStreamSocketInformation2 :
	IInspectable,
	impl_IStreamSocketInformation2<IStreamSocketInformation2>
{
	IStreamSocketInformation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketInformation2>>(m_ptr); }
};

struct IStreamSocketControl :
	IInspectable,
	impl_IStreamSocketControl<IStreamSocketControl>
{
	IStreamSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketControl>>(m_ptr); }
};

struct IStreamSocketControl2 :
	IInspectable,
	impl_IStreamSocketControl2<IStreamSocketControl2>
{
	IStreamSocketControl2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketControl2>>(m_ptr); }
};

struct IStreamSocket :
	IInspectable,
	impl_IStreamSocket<IStreamSocket>
{
	IStreamSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocket>>(m_ptr); }
};

struct IStreamSocket2 :
	IInspectable,
	impl_IStreamSocket2<IStreamSocket2>
{
	IStreamSocket2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocket2>>(m_ptr); }
};

struct IStreamSocketListenerControl :
	IInspectable,
	impl_IStreamSocketListenerControl<IStreamSocketListenerControl>
{
	IStreamSocketListenerControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListenerControl>>(m_ptr); }
};

struct IStreamSocketListenerInformation :
	IInspectable,
	impl_IStreamSocketListenerInformation<IStreamSocketListenerInformation>
{
	IStreamSocketListenerInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListenerInformation>>(m_ptr); }
};

struct IStreamSocketListenerConnectionReceivedEventArgs :
	IInspectable,
	impl_IStreamSocketListenerConnectionReceivedEventArgs<IStreamSocketListenerConnectionReceivedEventArgs>
{
	IStreamSocketListenerConnectionReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListenerConnectionReceivedEventArgs>>(m_ptr); }
};

struct IStreamSocketListener :
	IInspectable,
	impl_IStreamSocketListener<IStreamSocketListener>
{
	IStreamSocketListener(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListener>>(m_ptr); }
};

struct IStreamSocketListener2 :
	IInspectable,
	impl_IStreamSocketListener2<IStreamSocketListener2>
{
	IStreamSocketListener2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamSocketListener2>>(m_ptr); }
};

struct IWebSocketControl :
	IInspectable,
	impl_IWebSocketControl<IWebSocketControl>
{
	IWebSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocketControl>>(m_ptr); }
};

struct IWebSocketInformation :
	IInspectable,
	impl_IWebSocketInformation<IWebSocketInformation>
{
	IWebSocketInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocketInformation>>(m_ptr); }
};

struct IWebSocket :
	IInspectable,
	impl_IWebSocket<IWebSocket>
{
	IWebSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocket>>(m_ptr); }
};

struct IMessageWebSocketControl :
	IInspectable,
	impl_IMessageWebSocketControl<IMessageWebSocketControl>,
	Requires<IMessageWebSocketControl, Windows::Networking::Sockets::IWebSocketControl>
{
	IMessageWebSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageWebSocketControl>>(m_ptr); }
};

struct IMessageWebSocket :
	IInspectable,
	impl_IMessageWebSocket<IMessageWebSocket>,
	Requires<IMessageWebSocket, Windows::Networking::Sockets::IWebSocket>
{
	IMessageWebSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageWebSocket>>(m_ptr); }
};

struct IStreamWebSocketControl :
	IInspectable,
	impl_IStreamWebSocketControl<IStreamWebSocketControl>,
	Requires<IStreamWebSocketControl, Windows::Networking::Sockets::IWebSocketControl>
{
	IStreamWebSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamWebSocketControl>>(m_ptr); }
};

struct IStreamWebSocket :
	IInspectable,
	impl_IStreamWebSocket<IStreamWebSocket>,
	Requires<IStreamWebSocket, Windows::Networking::Sockets::IWebSocket>
{
	IStreamWebSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamWebSocket>>(m_ptr); }
};

struct ISocketErrorStatics :
	IInspectable,
	impl_ISocketErrorStatics<ISocketErrorStatics>
{
	ISocketErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISocketErrorStatics>>(m_ptr); }
};

struct IWebSocketErrorStatics :
	IInspectable,
	impl_IWebSocketErrorStatics<IWebSocketErrorStatics>
{
	IWebSocketErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebSocketErrorStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

struct IOnlineIdServiceTicketRequest :
	IInspectable,
	impl_IOnlineIdServiceTicketRequest<IOnlineIdServiceTicketRequest>
{
	IOnlineIdServiceTicketRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOnlineIdServiceTicketRequest>>(m_ptr); }
};

struct IOnlineIdServiceTicketRequestFactory :
	IInspectable,
	impl_IOnlineIdServiceTicketRequestFactory<IOnlineIdServiceTicketRequestFactory>
{
	IOnlineIdServiceTicketRequestFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOnlineIdServiceTicketRequestFactory>>(m_ptr); }
};

struct IOnlineIdServiceTicket :
	IInspectable,
	impl_IOnlineIdServiceTicket<IOnlineIdServiceTicket>
{
	IOnlineIdServiceTicket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOnlineIdServiceTicket>>(m_ptr); }
};

struct IUserIdentity :
	IInspectable,
	impl_IUserIdentity<IUserIdentity>
{
	IUserIdentity(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserIdentity>>(m_ptr); }
};

struct IOnlineIdAuthenticator :
	IInspectable,
	impl_IOnlineIdAuthenticator<IOnlineIdAuthenticator>
{
	IOnlineIdAuthenticator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOnlineIdAuthenticator>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

struct IWebAuthenticationResult :
	IInspectable,
	impl_IWebAuthenticationResult<IWebAuthenticationResult>
{
	IWebAuthenticationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAuthenticationResult>>(m_ptr); }
};

struct IWebAuthenticationBrokerStatics :
	IInspectable,
	impl_IWebAuthenticationBrokerStatics<IWebAuthenticationBrokerStatics>
{
	IWebAuthenticationBrokerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAuthenticationBrokerStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

struct IPasswordCredential :
	IInspectable,
	impl_IPasswordCredential<IPasswordCredential>
{
	IPasswordCredential(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordCredential>>(m_ptr); }
};

struct ICredentialFactory :
	IInspectable,
	impl_ICredentialFactory<ICredentialFactory>
{
	ICredentialFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialFactory>>(m_ptr); }
};

struct IPasswordVault :
	IInspectable,
	impl_IPasswordVault<IPasswordVault>
{
	IPasswordVault(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPasswordVault>>(m_ptr); }
};

struct IWebAccountProviderFactory :
	IInspectable,
	impl_IWebAccountProviderFactory<IWebAccountProviderFactory>
{
	IWebAccountProviderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProviderFactory>>(m_ptr); }
};

struct IWebAccountFactory :
	IInspectable,
	impl_IWebAccountFactory<IWebAccountFactory>
{
	IWebAccountFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountFactory>>(m_ptr); }
};

struct IWebAccountProvider :
	IInspectable,
	impl_IWebAccountProvider<IWebAccountProvider>
{
	IWebAccountProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProvider>>(m_ptr); }
};

struct IWebAccount :
	IInspectable,
	impl_IWebAccount<IWebAccount>
{
	IWebAccount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccount>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

struct IUserConsentVerifierStatics :
	IInspectable,
	impl_IUserConsentVerifierStatics<IUserConsentVerifierStatics>
{
	IUserConsentVerifierStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserConsentVerifierStatics>>(m_ptr); }
};

struct ICredentialPickerOptions :
	IInspectable,
	impl_ICredentialPickerOptions<ICredentialPickerOptions>
{
	ICredentialPickerOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialPickerOptions>>(m_ptr); }
};

struct ICredentialPickerStatics :
	IInspectable,
	impl_ICredentialPickerStatics<ICredentialPickerStatics>
{
	ICredentialPickerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialPickerStatics>>(m_ptr); }
};

struct ICredentialPickerResults :
	IInspectable,
	impl_ICredentialPickerResults<ICredentialPickerResults>
{
	ICredentialPickerResults(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialPickerResults>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

struct ICryptographicBufferStatics :
	IInspectable,
	impl_ICryptographicBufferStatics<ICryptographicBufferStatics>
{
	ICryptographicBufferStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICryptographicBufferStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

struct ICertificateRequestProperties :
	IInspectable,
	impl_ICertificateRequestProperties<ICertificateRequestProperties>
{
	ICertificateRequestProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateRequestProperties>>(m_ptr); }
};

struct ICertificateRequestProperties2 :
	IInspectable,
	impl_ICertificateRequestProperties2<ICertificateRequestProperties2>
{
	ICertificateRequestProperties2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateRequestProperties2>>(m_ptr); }
};

struct ICertificateEnrollmentManagerStatics :
	IInspectable,
	impl_ICertificateEnrollmentManagerStatics<ICertificateEnrollmentManagerStatics>
{
	ICertificateEnrollmentManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateEnrollmentManagerStatics>>(m_ptr); }
};

struct ICertificateEnrollmentManagerStatics2 :
	IInspectable,
	impl_ICertificateEnrollmentManagerStatics2<ICertificateEnrollmentManagerStatics2>
{
	ICertificateEnrollmentManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateEnrollmentManagerStatics2>>(m_ptr); }
};

struct IKeyAttestationHelperStatics :
	IInspectable,
	impl_IKeyAttestationHelperStatics<IKeyAttestationHelperStatics>
{
	IKeyAttestationHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyAttestationHelperStatics>>(m_ptr); }
};

struct ICertificateStoresStatics :
	IInspectable,
	impl_ICertificateStoresStatics<ICertificateStoresStatics>
{
	ICertificateStoresStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateStoresStatics>>(m_ptr); }
};

struct IUserCertificateEnrollmentManager :
	IInspectable,
	impl_IUserCertificateEnrollmentManager<IUserCertificateEnrollmentManager>
{
	IUserCertificateEnrollmentManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserCertificateEnrollmentManager>>(m_ptr); }
};

struct ICertificateStore :
	IInspectable,
	impl_ICertificateStore<ICertificateStore>
{
	ICertificateStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateStore>>(m_ptr); }
};

struct IKeyAlgorithmNamesStatics :
	IInspectable,
	impl_IKeyAlgorithmNamesStatics<IKeyAlgorithmNamesStatics>
{
	IKeyAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyAlgorithmNamesStatics>>(m_ptr); }
};

struct IKeyStorageProviderNamesStatics :
	IInspectable,
	impl_IKeyStorageProviderNamesStatics<IKeyStorageProviderNamesStatics>
{
	IKeyStorageProviderNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyStorageProviderNamesStatics>>(m_ptr); }
};

struct IChainBuildingParameters :
	IInspectable,
	impl_IChainBuildingParameters<IChainBuildingParameters>
{
	IChainBuildingParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IChainBuildingParameters>>(m_ptr); }
};

struct IChainValidationParameters :
	IInspectable,
	impl_IChainValidationParameters<IChainValidationParameters>
{
	IChainValidationParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IChainValidationParameters>>(m_ptr); }
};

struct ICertificateQuery :
	IInspectable,
	impl_ICertificateQuery<ICertificateQuery>
{
	ICertificateQuery(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateQuery>>(m_ptr); }
};

struct ICertificateChain :
	IInspectable,
	impl_ICertificateChain<ICertificateChain>
{
	ICertificateChain(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateChain>>(m_ptr); }
};

struct ICertificate :
	IInspectable,
	impl_ICertificate<ICertificate>
{
	ICertificate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificate>>(m_ptr); }
};

struct ICertificateFactory :
	IInspectable,
	impl_ICertificateFactory<ICertificateFactory>
{
	ICertificateFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICertificateFactory>>(m_ptr); }
};

struct ICmsTimestampInfo :
	IInspectable,
	impl_ICmsTimestampInfo<ICmsTimestampInfo>
{
	ICmsTimestampInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsTimestampInfo>>(m_ptr); }
};

struct ICmsSignerInfo :
	IInspectable,
	impl_ICmsSignerInfo<ICmsSignerInfo>
{
	ICmsSignerInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsSignerInfo>>(m_ptr); }
};

struct ICmsAttachedSignature :
	IInspectable,
	impl_ICmsAttachedSignature<ICmsAttachedSignature>
{
	ICmsAttachedSignature(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsAttachedSignature>>(m_ptr); }
};

struct ICmsAttachedSignatureFactory :
	IInspectable,
	impl_ICmsAttachedSignatureFactory<ICmsAttachedSignatureFactory>
{
	ICmsAttachedSignatureFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsAttachedSignatureFactory>>(m_ptr); }
};

struct ICmsAttachedSignatureStatics :
	IInspectable,
	impl_ICmsAttachedSignatureStatics<ICmsAttachedSignatureStatics>
{
	ICmsAttachedSignatureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsAttachedSignatureStatics>>(m_ptr); }
};

struct ICmsDetachedSignature :
	IInspectable,
	impl_ICmsDetachedSignature<ICmsDetachedSignature>
{
	ICmsDetachedSignature(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsDetachedSignature>>(m_ptr); }
};

struct ICmsDetachedSignatureFactory :
	IInspectable,
	impl_ICmsDetachedSignatureFactory<ICmsDetachedSignatureFactory>
{
	ICmsDetachedSignatureFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsDetachedSignatureFactory>>(m_ptr); }
};

struct ICmsDetachedSignatureStatics :
	IInspectable,
	impl_ICmsDetachedSignatureStatics<ICmsDetachedSignatureStatics>
{
	ICmsDetachedSignatureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICmsDetachedSignatureStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

struct IKeyDerivationParameters :
	IInspectable,
	impl_IKeyDerivationParameters<IKeyDerivationParameters>
{
	IKeyDerivationParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationParameters>>(m_ptr); }
};

struct IKeyDerivationParametersStatics :
	IInspectable,
	impl_IKeyDerivationParametersStatics<IKeyDerivationParametersStatics>
{
	IKeyDerivationParametersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationParametersStatics>>(m_ptr); }
};

struct ICryptographicKey :
	IInspectable,
	impl_ICryptographicKey<ICryptographicKey>
{
	ICryptographicKey(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICryptographicKey>>(m_ptr); }
};

struct IHashComputation :
	IInspectable,
	impl_IHashComputation<IHashComputation>
{
	IHashComputation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHashComputation>>(m_ptr); }
};

struct IHashAlgorithmProvider :
	IInspectable,
	impl_IHashAlgorithmProvider<IHashAlgorithmProvider>
{
	IHashAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHashAlgorithmProvider>>(m_ptr); }
};

struct IMacAlgorithmProvider :
	IInspectable,
	impl_IMacAlgorithmProvider<IMacAlgorithmProvider>
{
	IMacAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMacAlgorithmProvider>>(m_ptr); }
};

struct IMacAlgorithmProvider2 :
	IInspectable,
	impl_IMacAlgorithmProvider2<IMacAlgorithmProvider2>
{
	IMacAlgorithmProvider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMacAlgorithmProvider2>>(m_ptr); }
};

struct IKeyDerivationAlgorithmProvider :
	IInspectable,
	impl_IKeyDerivationAlgorithmProvider<IKeyDerivationAlgorithmProvider>
{
	IKeyDerivationAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationAlgorithmProvider>>(m_ptr); }
};

struct ISymmetricKeyAlgorithmProvider :
	IInspectable,
	impl_ISymmetricKeyAlgorithmProvider<ISymmetricKeyAlgorithmProvider>
{
	ISymmetricKeyAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISymmetricKeyAlgorithmProvider>>(m_ptr); }
};

struct IAsymmetricKeyAlgorithmProvider :
	IInspectable,
	impl_IAsymmetricKeyAlgorithmProvider<IAsymmetricKeyAlgorithmProvider>
{
	IAsymmetricKeyAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsymmetricKeyAlgorithmProvider>>(m_ptr); }
};

struct IPersistedKeyProviderStatics :
	IInspectable,
	impl_IPersistedKeyProviderStatics<IPersistedKeyProviderStatics>
{
	IPersistedKeyProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPersistedKeyProviderStatics>>(m_ptr); }
};

struct IEncryptedAndAuthenticatedData :
	IInspectable,
	impl_IEncryptedAndAuthenticatedData<IEncryptedAndAuthenticatedData>
{
	IEncryptedAndAuthenticatedData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEncryptedAndAuthenticatedData>>(m_ptr); }
};

struct ICryptographicEngineStatics :
	IInspectable,
	impl_ICryptographicEngineStatics<ICryptographicEngineStatics>
{
	ICryptographicEngineStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICryptographicEngineStatics>>(m_ptr); }
};

struct ICryptographicEngineStatics2 :
	IInspectable,
	impl_ICryptographicEngineStatics2<ICryptographicEngineStatics2>
{
	ICryptographicEngineStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICryptographicEngineStatics2>>(m_ptr); }
};

struct IHashAlgorithmProviderStatics :
	IInspectable,
	impl_IHashAlgorithmProviderStatics<IHashAlgorithmProviderStatics>
{
	IHashAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHashAlgorithmProviderStatics>>(m_ptr); }
};

struct IMacAlgorithmProviderStatics :
	IInspectable,
	impl_IMacAlgorithmProviderStatics<IMacAlgorithmProviderStatics>
{
	IMacAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMacAlgorithmProviderStatics>>(m_ptr); }
};

struct IKeyDerivationAlgorithmProviderStatics :
	IInspectable,
	impl_IKeyDerivationAlgorithmProviderStatics<IKeyDerivationAlgorithmProviderStatics>
{
	IKeyDerivationAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationAlgorithmProviderStatics>>(m_ptr); }
};

struct ISymmetricKeyAlgorithmProviderStatics :
	IInspectable,
	impl_ISymmetricKeyAlgorithmProviderStatics<ISymmetricKeyAlgorithmProviderStatics>
{
	ISymmetricKeyAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISymmetricKeyAlgorithmProviderStatics>>(m_ptr); }
};

struct IAsymmetricKeyAlgorithmProviderStatics :
	IInspectable,
	impl_IAsymmetricKeyAlgorithmProviderStatics<IAsymmetricKeyAlgorithmProviderStatics>
{
	IAsymmetricKeyAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsymmetricKeyAlgorithmProviderStatics>>(m_ptr); }
};

struct IHashAlgorithmNamesStatics :
	IInspectable,
	impl_IHashAlgorithmNamesStatics<IHashAlgorithmNamesStatics>
{
	IHashAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHashAlgorithmNamesStatics>>(m_ptr); }
};

struct IMacAlgorithmNamesStatics :
	IInspectable,
	impl_IMacAlgorithmNamesStatics<IMacAlgorithmNamesStatics>
{
	IMacAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMacAlgorithmNamesStatics>>(m_ptr); }
};

struct ISymmetricAlgorithmNamesStatics :
	IInspectable,
	impl_ISymmetricAlgorithmNamesStatics<ISymmetricAlgorithmNamesStatics>
{
	ISymmetricAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISymmetricAlgorithmNamesStatics>>(m_ptr); }
};

struct IAsymmetricAlgorithmNamesStatics :
	IInspectable,
	impl_IAsymmetricAlgorithmNamesStatics<IAsymmetricAlgorithmNamesStatics>
{
	IAsymmetricAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAsymmetricAlgorithmNamesStatics>>(m_ptr); }
};

struct IKeyDerivationAlgorithmNamesStatics :
	IInspectable,
	impl_IKeyDerivationAlgorithmNamesStatics<IKeyDerivationAlgorithmNamesStatics>
{
	IKeyDerivationAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyDerivationAlgorithmNamesStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

struct IDataProtectionProvider :
	IInspectable,
	impl_IDataProtectionProvider<IDataProtectionProvider>
{
	IDataProtectionProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProtectionProvider>>(m_ptr); }
};

struct IDataProtectionProviderFactory :
	IInspectable,
	impl_IDataProtectionProviderFactory<IDataProtectionProviderFactory>
{
	IDataProtectionProviderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataProtectionProviderFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

struct IFileRevocationManagerStatics :
	IInspectable,
	impl_IFileRevocationManagerStatics<IFileRevocationManagerStatics>
{
	IFileRevocationManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileRevocationManagerStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

struct IEasClientDeviceInformation :
	IInspectable,
	impl_IEasClientDeviceInformation<IEasClientDeviceInformation>
{
	IEasClientDeviceInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasClientDeviceInformation>>(m_ptr); }
};

struct IEasClientSecurityPolicy :
	IInspectable,
	impl_IEasClientSecurityPolicy<IEasClientSecurityPolicy>
{
	IEasClientSecurityPolicy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasClientSecurityPolicy>>(m_ptr); }
};

struct IEasComplianceResults :
	IInspectable,
	impl_IEasComplianceResults<IEasComplianceResults>
{
	IEasComplianceResults(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasComplianceResults>>(m_ptr); }
};

struct IEasComplianceResults2 :
	IInspectable,
	impl_IEasComplianceResults2<IEasComplianceResults2>,
	Requires<IEasComplianceResults2, Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults>
{
	IEasComplianceResults2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEasComplianceResults2>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage {

struct IStreamedFileDataRequestedHandler :
	IUnknown,
	impl_IStreamedFileDataRequestedHandler<IStreamedFileDataRequestedHandler>
{
	IStreamedFileDataRequestedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamedFileDataRequestedHandler>>(m_ptr); }
};

struct IApplicationDataSetVersionHandler :
	IUnknown,
	impl_IApplicationDataSetVersionHandler<IApplicationDataSetVersionHandler>
{
	IApplicationDataSetVersionHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataSetVersionHandler>>(m_ptr); }
};

struct IStorageLibraryStatics :
	IInspectable,
	impl_IStorageLibraryStatics<IStorageLibraryStatics>
{
	IStorageLibraryStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageLibraryStatics>>(m_ptr); }
};

struct IStorageLibrary :
	IInspectable,
	impl_IStorageLibrary<IStorageLibrary>
{
	IStorageLibrary(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageLibrary>>(m_ptr); }
};

struct IKnownFoldersStatics :
	IInspectable,
	impl_IKnownFoldersStatics<IKnownFoldersStatics>
{
	IKnownFoldersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownFoldersStatics>>(m_ptr); }
};

struct IKnownFoldersPlaylistsStatics :
	IInspectable,
	impl_IKnownFoldersPlaylistsStatics<IKnownFoldersPlaylistsStatics>
{
	IKnownFoldersPlaylistsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownFoldersPlaylistsStatics>>(m_ptr); }
};

struct IKnownFoldersCameraRollStatics :
	IInspectable,
	impl_IKnownFoldersCameraRollStatics<IKnownFoldersCameraRollStatics>
{
	IKnownFoldersCameraRollStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownFoldersCameraRollStatics>>(m_ptr); }
};

struct IKnownFoldersSavedPicturesStatics :
	IInspectable,
	impl_IKnownFoldersSavedPicturesStatics<IKnownFoldersSavedPicturesStatics>
{
	IKnownFoldersSavedPicturesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKnownFoldersSavedPicturesStatics>>(m_ptr); }
};

struct IDownloadsFolderStatics :
	IInspectable,
	impl_IDownloadsFolderStatics<IDownloadsFolderStatics>
{
	IDownloadsFolderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDownloadsFolderStatics>>(m_ptr); }
};

struct IStreamedFileDataRequest :
	IInspectable,
	impl_IStreamedFileDataRequest<IStreamedFileDataRequest>
{
	IStreamedFileDataRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStreamedFileDataRequest>>(m_ptr); }
};

struct IStorageFileStatics :
	IInspectable,
	impl_IStorageFileStatics<IStorageFileStatics>
{
	IStorageFileStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFileStatics>>(m_ptr); }
};

struct IStorageItem :
	IInspectable,
	impl_IStorageItem<IStorageItem>
{
	IStorageItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItem>>(m_ptr); }
};

struct IStorageFolder :
	IInspectable,
	impl_IStorageFolder<IStorageFolder>,
	Requires<IStorageFolder, Windows::Storage::IStorageItem>
{
	IStorageFolder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolder>>(m_ptr); }
};

struct IStorageFile :
	IInspectable,
	impl_IStorageFile<IStorageFile>,
	Requires<IStorageFile, Windows::Storage::IStorageItem, Windows::Storage::Streams::IRandomAccessStreamReference, Windows::Storage::Streams::IInputStreamReference>
{
	IStorageFile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFile>>(m_ptr); }
};

struct IStorageFolderStatics :
	IInspectable,
	impl_IStorageFolderStatics<IStorageFolderStatics>
{
	IStorageFolderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolderStatics>>(m_ptr); }
};

struct IStorageItem2 :
	IInspectable,
	impl_IStorageItem2<IStorageItem2>,
	Requires<IStorageItem2, Windows::Storage::IStorageItem>
{
	IStorageItem2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItem2>>(m_ptr); }
};

struct IStorageItemProperties :
	IInspectable,
	impl_IStorageItemProperties<IStorageItemProperties>
{
	IStorageItemProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemProperties>>(m_ptr); }
};

struct IStorageItemProperties2 :
	IInspectable,
	impl_IStorageItemProperties2<IStorageItemProperties2>,
	Requires<IStorageItemProperties2, Windows::Storage::IStorageItemProperties>
{
	IStorageItemProperties2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemProperties2>>(m_ptr); }
};

struct IStorageItemPropertiesWithProvider :
	IInspectable,
	impl_IStorageItemPropertiesWithProvider<IStorageItemPropertiesWithProvider>,
	Requires<IStorageItemPropertiesWithProvider, Windows::Storage::IStorageItemProperties>
{
	IStorageItemPropertiesWithProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemPropertiesWithProvider>>(m_ptr); }
};

struct IStorageFilePropertiesWithAvailability :
	IInspectable,
	impl_IStorageFilePropertiesWithAvailability<IStorageFilePropertiesWithAvailability>
{
	IStorageFilePropertiesWithAvailability(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFilePropertiesWithAvailability>>(m_ptr); }
};

struct IStorageProvider :
	IInspectable,
	impl_IStorageProvider<IStorageProvider>
{
	IStorageProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageProvider>>(m_ptr); }
};

struct IStorageFolder2 :
	IInspectable,
	impl_IStorageFolder2<IStorageFolder2>
{
	IStorageFolder2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolder2>>(m_ptr); }
};

struct IFileIOStatics :
	IInspectable,
	impl_IFileIOStatics<IFileIOStatics>
{
	IFileIOStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileIOStatics>>(m_ptr); }
};

struct IPathIOStatics :
	IInspectable,
	impl_IPathIOStatics<IPathIOStatics>
{
	IPathIOStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPathIOStatics>>(m_ptr); }
};

struct ICachedFileManagerStatics :
	IInspectable,
	impl_ICachedFileManagerStatics<ICachedFileManagerStatics>
{
	ICachedFileManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICachedFileManagerStatics>>(m_ptr); }
};

struct ISystemAudioProperties :
	IInspectable,
	impl_ISystemAudioProperties<ISystemAudioProperties>
{
	ISystemAudioProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemAudioProperties>>(m_ptr); }
};

struct ISystemGPSProperties :
	IInspectable,
	impl_ISystemGPSProperties<ISystemGPSProperties>
{
	ISystemGPSProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemGPSProperties>>(m_ptr); }
};

struct ISystemImageProperties :
	IInspectable,
	impl_ISystemImageProperties<ISystemImageProperties>
{
	ISystemImageProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemImageProperties>>(m_ptr); }
};

struct ISystemMediaProperties :
	IInspectable,
	impl_ISystemMediaProperties<ISystemMediaProperties>
{
	ISystemMediaProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMediaProperties>>(m_ptr); }
};

struct ISystemMusicProperties :
	IInspectable,
	impl_ISystemMusicProperties<ISystemMusicProperties>
{
	ISystemMusicProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemMusicProperties>>(m_ptr); }
};

struct ISystemPhotoProperties :
	IInspectable,
	impl_ISystemPhotoProperties<ISystemPhotoProperties>
{
	ISystemPhotoProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemPhotoProperties>>(m_ptr); }
};

struct ISystemVideoProperties :
	IInspectable,
	impl_ISystemVideoProperties<ISystemVideoProperties>
{
	ISystemVideoProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemVideoProperties>>(m_ptr); }
};

struct ISystemProperties :
	IInspectable,
	impl_ISystemProperties<ISystemProperties>
{
	ISystemProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISystemProperties>>(m_ptr); }
};

struct IStorageStreamTransaction :
	IInspectable,
	impl_IStorageStreamTransaction<IStorageStreamTransaction>
{
	IStorageStreamTransaction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageStreamTransaction>>(m_ptr); }
};

struct IApplicationDataStatics :
	IInspectable,
	impl_IApplicationDataStatics<IApplicationDataStatics>
{
	IApplicationDataStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataStatics>>(m_ptr); }
};

struct IApplicationData :
	IInspectable,
	impl_IApplicationData<IApplicationData>
{
	IApplicationData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationData>>(m_ptr); }
};

struct ISetVersionRequest :
	IInspectable,
	impl_ISetVersionRequest<ISetVersionRequest>
{
	ISetVersionRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetVersionRequest>>(m_ptr); }
};

struct ISetVersionDeferral :
	IInspectable,
	impl_ISetVersionDeferral<ISetVersionDeferral>
{
	ISetVersionDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISetVersionDeferral>>(m_ptr); }
};

struct IApplicationDataContainer :
	IInspectable,
	impl_IApplicationDataContainer<IApplicationDataContainer>
{
	IApplicationDataContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationDataContainer>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

struct IItemRemovedEventArgs :
	IInspectable,
	impl_IItemRemovedEventArgs<IItemRemovedEventArgs>
{
	IItemRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IItemRemovedEventArgs>>(m_ptr); }
};

struct IStorageItemAccessList :
	IInspectable,
	impl_IStorageItemAccessList<IStorageItemAccessList>
{
	IStorageItemAccessList(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemAccessList>>(m_ptr); }
};

struct IStorageItemMostRecentlyUsedList :
	IInspectable,
	impl_IStorageItemMostRecentlyUsedList<IStorageItemMostRecentlyUsedList>,
	Requires<IStorageItemMostRecentlyUsedList, Windows::Storage::AccessCache::IStorageItemAccessList>
{
	IStorageItemMostRecentlyUsedList(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemMostRecentlyUsedList>>(m_ptr); }
};

struct IStorageApplicationPermissionsStatics :
	IInspectable,
	impl_IStorageApplicationPermissionsStatics<IStorageApplicationPermissionsStatics>
{
	IStorageApplicationPermissionsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageApplicationPermissionsStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

struct IStorageItemInformation :
	IInspectable,
	impl_IStorageItemInformation<IStorageItemInformation>
{
	IStorageItemInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemInformation>>(m_ptr); }
};

struct IFileInformationFactoryFactory :
	IInspectable,
	impl_IFileInformationFactoryFactory<IFileInformationFactoryFactory>
{
	IFileInformationFactoryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileInformationFactoryFactory>>(m_ptr); }
};

struct IFileInformationFactory :
	IInspectable,
	impl_IFileInformationFactory<IFileInformationFactory>
{
	IFileInformationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileInformationFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

struct ICompressor :
	IInspectable,
	impl_ICompressor<ICompressor>,
	Requires<ICompressor, Windows::Storage::Streams::IOutputStream>
{
	ICompressor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompressor>>(m_ptr); }
};

struct IDecompressor :
	IInspectable,
	impl_IDecompressor<IDecompressor>,
	Requires<IDecompressor, Windows::Storage::Streams::IInputStream>
{
	IDecompressor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDecompressor>>(m_ptr); }
};

struct ICompressorFactory :
	IInspectable,
	impl_ICompressorFactory<ICompressorFactory>
{
	ICompressorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICompressorFactory>>(m_ptr); }
};

struct IDecompressorFactory :
	IInspectable,
	impl_IDecompressorFactory<IDecompressorFactory>
{
	IDecompressorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDecompressorFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

struct IThumbnailProperties :
	IInspectable,
	impl_IThumbnailProperties<IThumbnailProperties>
{
	IThumbnailProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThumbnailProperties>>(m_ptr); }
};

struct IStorageItemExtraProperties :
	IInspectable,
	impl_IStorageItemExtraProperties<IStorageItemExtraProperties>
{
	IStorageItemExtraProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemExtraProperties>>(m_ptr); }
};

struct IStorageItemContentProperties :
	IInspectable,
	impl_IStorageItemContentProperties<IStorageItemContentProperties>,
	Requires<IStorageItemContentProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IStorageItemContentProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemContentProperties>>(m_ptr); }
};

struct IMusicProperties :
	IInspectable,
	impl_IMusicProperties<IMusicProperties>,
	Requires<IMusicProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IMusicProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMusicProperties>>(m_ptr); }
};

struct IImageProperties :
	IInspectable,
	impl_IImageProperties<IImageProperties>,
	Requires<IImageProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IImageProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IImageProperties>>(m_ptr); }
};

struct IVideoProperties :
	IInspectable,
	impl_IVideoProperties<IVideoProperties>,
	Requires<IVideoProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IVideoProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVideoProperties>>(m_ptr); }
};

struct IDocumentProperties :
	IInspectable,
	impl_IDocumentProperties<IDocumentProperties>,
	Requires<IDocumentProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IDocumentProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDocumentProperties>>(m_ptr); }
};

struct IBasicProperties :
	IInspectable,
	impl_IBasicProperties<IBasicProperties>
{
	IBasicProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBasicProperties>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

struct IFileOpenPicker :
	IInspectable,
	impl_IFileOpenPicker<IFileOpenPicker>
{
	IFileOpenPicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileOpenPicker>>(m_ptr); }
};

struct IFileSavePicker :
	IInspectable,
	impl_IFileSavePicker<IFileSavePicker>
{
	IFileSavePicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileSavePicker>>(m_ptr); }
};

struct IFolderPicker :
	IInspectable,
	impl_IFolderPicker<IFolderPicker>
{
	IFolderPicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFolderPicker>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

struct IFileRemovedEventArgs :
	IInspectable,
	impl_IFileRemovedEventArgs<IFileRemovedEventArgs>
{
	IFileRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileRemovedEventArgs>>(m_ptr); }
};

struct IFileOpenPickerUI :
	IInspectable,
	impl_IFileOpenPickerUI<IFileOpenPickerUI>
{
	IFileOpenPickerUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileOpenPickerUI>>(m_ptr); }
};

struct IPickerClosingEventArgs :
	IInspectable,
	impl_IPickerClosingEventArgs<IPickerClosingEventArgs>
{
	IPickerClosingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPickerClosingEventArgs>>(m_ptr); }
};

struct IPickerClosingOperation :
	IInspectable,
	impl_IPickerClosingOperation<IPickerClosingOperation>
{
	IPickerClosingOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPickerClosingOperation>>(m_ptr); }
};

struct IPickerClosingDeferral :
	IInspectable,
	impl_IPickerClosingDeferral<IPickerClosingDeferral>
{
	IPickerClosingDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPickerClosingDeferral>>(m_ptr); }
};

struct IFileSavePickerUI :
	IInspectable,
	impl_IFileSavePickerUI<IFileSavePickerUI>
{
	IFileSavePickerUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileSavePickerUI>>(m_ptr); }
};

struct ITargetFileRequestedEventArgs :
	IInspectable,
	impl_ITargetFileRequestedEventArgs<ITargetFileRequestedEventArgs>
{
	ITargetFileRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITargetFileRequestedEventArgs>>(m_ptr); }
};

struct ITargetFileRequest :
	IInspectable,
	impl_ITargetFileRequest<ITargetFileRequest>
{
	ITargetFileRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITargetFileRequest>>(m_ptr); }
};

struct ITargetFileRequestDeferral :
	IInspectable,
	impl_ITargetFileRequestDeferral<ITargetFileRequestDeferral>
{
	ITargetFileRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITargetFileRequestDeferral>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

struct ICachedFileUpdaterUI :
	IInspectable,
	impl_ICachedFileUpdaterUI<ICachedFileUpdaterUI>
{
	ICachedFileUpdaterUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICachedFileUpdaterUI>>(m_ptr); }
};

struct IFileUpdateRequestedEventArgs :
	IInspectable,
	impl_IFileUpdateRequestedEventArgs<IFileUpdateRequestedEventArgs>
{
	IFileUpdateRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileUpdateRequestedEventArgs>>(m_ptr); }
};

struct IFileUpdateRequest :
	IInspectable,
	impl_IFileUpdateRequest<IFileUpdateRequest>
{
	IFileUpdateRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileUpdateRequest>>(m_ptr); }
};

struct IFileUpdateRequestDeferral :
	IInspectable,
	impl_IFileUpdateRequestDeferral<IFileUpdateRequestDeferral>
{
	IFileUpdateRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFileUpdateRequestDeferral>>(m_ptr); }
};

struct ICachedFileUpdaterStatics :
	IInspectable,
	impl_ICachedFileUpdaterStatics<ICachedFileUpdaterStatics>
{
	ICachedFileUpdaterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICachedFileUpdaterStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

struct IContentIndexerStatics :
	IInspectable,
	impl_IContentIndexerStatics<IContentIndexerStatics>
{
	IContentIndexerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentIndexerStatics>>(m_ptr); }
};

struct IIndexableContent :
	IInspectable,
	impl_IIndexableContent<IIndexableContent>
{
	IIndexableContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIndexableContent>>(m_ptr); }
};

struct IContentIndexer :
	IInspectable,
	impl_IContentIndexer<IContentIndexer>
{
	IContentIndexer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentIndexer>>(m_ptr); }
};

struct IValueAndLanguage :
	IInspectable,
	impl_IValueAndLanguage<IValueAndLanguage>
{
	IValueAndLanguage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IValueAndLanguage>>(m_ptr); }
};

struct IContentIndexerQueryOperations :
	IInspectable,
	impl_IContentIndexerQueryOperations<IContentIndexerQueryOperations>
{
	IContentIndexerQueryOperations(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentIndexerQueryOperations>>(m_ptr); }
};

struct IContentIndexerQuery :
	IInspectable,
	impl_IContentIndexerQuery<IContentIndexerQuery>
{
	IContentIndexerQuery(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentIndexerQuery>>(m_ptr); }
};

struct IQueryOptions :
	IInspectable,
	impl_IQueryOptions<IQueryOptions>
{
	IQueryOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQueryOptions>>(m_ptr); }
};

struct IQueryOptionsWithProviderFilter :
	IInspectable,
	impl_IQueryOptionsWithProviderFilter<IQueryOptionsWithProviderFilter>
{
	IQueryOptionsWithProviderFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQueryOptionsWithProviderFilter>>(m_ptr); }
};

struct IQueryOptionsFactory :
	IInspectable,
	impl_IQueryOptionsFactory<IQueryOptionsFactory>
{
	IQueryOptionsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IQueryOptionsFactory>>(m_ptr); }
};

struct IStorageQueryResultBase :
	IInspectable,
	impl_IStorageQueryResultBase<IStorageQueryResultBase>
{
	IStorageQueryResultBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageQueryResultBase>>(m_ptr); }
};

struct IStorageFileQueryResult :
	IInspectable,
	impl_IStorageFileQueryResult<IStorageFileQueryResult>,
	Requires<IStorageFileQueryResult, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageFileQueryResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFileQueryResult>>(m_ptr); }
};

struct IStorageFileQueryResult2 :
	IInspectable,
	impl_IStorageFileQueryResult2<IStorageFileQueryResult2>,
	Requires<IStorageFileQueryResult2, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageFileQueryResult2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFileQueryResult2>>(m_ptr); }
};

struct IStorageFolderQueryResult :
	IInspectable,
	impl_IStorageFolderQueryResult<IStorageFolderQueryResult>,
	Requires<IStorageFolderQueryResult, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageFolderQueryResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolderQueryResult>>(m_ptr); }
};

struct IStorageItemQueryResult :
	IInspectable,
	impl_IStorageItemQueryResult<IStorageItemQueryResult>,
	Requires<IStorageItemQueryResult, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageItemQueryResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageItemQueryResult>>(m_ptr); }
};

struct IStorageFolderQueryOperations :
	IInspectable,
	impl_IStorageFolderQueryOperations<IStorageFolderQueryOperations>
{
	IStorageFolderQueryOperations(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IStorageFolderQueryOperations>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

struct IDataReader :
	IInspectable,
	impl_IDataReader<IDataReader>
{
	IDataReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataReader>>(m_ptr); }
};

struct IDataReaderFactory :
	IInspectable,
	impl_IDataReaderFactory<IDataReaderFactory>
{
	IDataReaderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataReaderFactory>>(m_ptr); }
};

struct IDataReaderStatics :
	IInspectable,
	impl_IDataReaderStatics<IDataReaderStatics>
{
	IDataReaderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataReaderStatics>>(m_ptr); }
};

struct IDataWriter :
	IInspectable,
	impl_IDataWriter<IDataWriter>
{
	IDataWriter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataWriter>>(m_ptr); }
};

struct IDataWriterFactory :
	IInspectable,
	impl_IDataWriterFactory<IDataWriterFactory>
{
	IDataWriterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDataWriterFactory>>(m_ptr); }
};

struct IRandomAccessStreamStatics :
	IInspectable,
	impl_IRandomAccessStreamStatics<IRandomAccessStreamStatics>
{
	IRandomAccessStreamStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStreamStatics>>(m_ptr); }
};

struct IBufferFactory :
	IInspectable,
	impl_IBufferFactory<IBufferFactory>
{
	IBufferFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBufferFactory>>(m_ptr); }
};

struct IBuffer :
	IInspectable,
	impl_IBuffer<IBuffer>
{
	IBuffer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBuffer>>(m_ptr); }
};

struct IContentTypeProvider :
	IInspectable,
	impl_IContentTypeProvider<IContentTypeProvider>
{
	IContentTypeProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IContentTypeProvider>>(m_ptr); }
};

struct IRandomAccessStreamReference :
	IInspectable,
	impl_IRandomAccessStreamReference<IRandomAccessStreamReference>
{
	IRandomAccessStreamReference(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStreamReference>>(m_ptr); }
};

struct IInputStreamReference :
	IInspectable,
	impl_IInputStreamReference<IInputStreamReference>
{
	IInputStreamReference(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputStreamReference>>(m_ptr); }
};

struct IRandomAccessStreamReferenceStatics :
	IInspectable,
	impl_IRandomAccessStreamReferenceStatics<IRandomAccessStreamReferenceStatics>
{
	IRandomAccessStreamReferenceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStreamReferenceStatics>>(m_ptr); }
};

struct IInputStream :
	IInspectable,
	impl_IInputStream<IInputStream>
{
	IInputStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputStream>>(m_ptr); }
};

struct IOutputStream :
	IInspectable,
	impl_IOutputStream<IOutputStream>
{
	IOutputStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOutputStream>>(m_ptr); }
};

struct IRandomAccessStream :
	IInspectable,
	impl_IRandomAccessStream<IRandomAccessStream>,
	Requires<IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream>
{
	IRandomAccessStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStream>>(m_ptr); }
};

struct IRandomAccessStreamWithContentType :
	IInspectable,
	impl_IRandomAccessStreamWithContentType<IRandomAccessStreamWithContentType>,
	Requires<IRandomAccessStreamWithContentType, Windows::Storage::Streams::IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream, Windows::Storage::Streams::IContentTypeProvider>
{
	IRandomAccessStreamWithContentType(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRandomAccessStreamWithContentType>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System {

struct ILauncherUIOptions :
	IInspectable,
	impl_ILauncherUIOptions<ILauncherUIOptions>
{
	ILauncherUIOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILauncherUIOptions>>(m_ptr); }
};

struct ILauncherOptions :
	IInspectable,
	impl_ILauncherOptions<ILauncherOptions>
{
	ILauncherOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILauncherOptions>>(m_ptr); }
};

struct ILauncherViewOptions :
	IInspectable,
	impl_ILauncherViewOptions<ILauncherViewOptions>
{
	ILauncherViewOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILauncherViewOptions>>(m_ptr); }
};

struct ILauncherStatics :
	IInspectable,
	impl_ILauncherStatics<ILauncherStatics>
{
	ILauncherStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILauncherStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

struct IDisplayRequest :
	IInspectable,
	impl_IDisplayRequest<IDisplayRequest>
{
	IDisplayRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDisplayRequest>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

struct IHardwareToken :
	IInspectable,
	impl_IHardwareToken<IHardwareToken>
{
	IHardwareToken(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHardwareToken>>(m_ptr); }
};

struct IHardwareIdentificationStatics :
	IInspectable,
	impl_IHardwareIdentificationStatics<IHardwareIdentificationStatics>
{
	IHardwareIdentificationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHardwareIdentificationStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

struct ISmbiosInformationStatics :
	IInspectable,
	impl_ISmbiosInformationStatics<ISmbiosInformationStatics>
{
	ISmbiosInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISmbiosInformationStatics>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

struct IInteractiveSessionStatics :
	IInspectable,
	impl_IInteractiveSessionStatics<IInteractiveSessionStatics>
{
	IInteractiveSessionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInteractiveSessionStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

struct ITimerElapsedHandler :
	IUnknown,
	impl_ITimerElapsedHandler<ITimerElapsedHandler>
{
	ITimerElapsedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimerElapsedHandler>>(m_ptr); }
};

struct ITimerDestroyedHandler :
	IUnknown,
	impl_ITimerDestroyedHandler<ITimerDestroyedHandler>
{
	ITimerDestroyedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITimerDestroyedHandler>>(m_ptr); }
};

struct IWorkItemHandler :
	IUnknown,
	impl_IWorkItemHandler<IWorkItemHandler>
{
	IWorkItemHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWorkItemHandler>>(m_ptr); }
};

struct IThreadPoolStatics :
	IInspectable,
	impl_IThreadPoolStatics<IThreadPoolStatics>
{
	IThreadPoolStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThreadPoolStatics>>(m_ptr); }
};

struct IThreadPoolTimer :
	IInspectable,
	impl_IThreadPoolTimer<IThreadPoolTimer>
{
	IThreadPoolTimer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThreadPoolTimer>>(m_ptr); }
};

struct IThreadPoolTimerStatics :
	IInspectable,
	impl_IThreadPoolTimerStatics<IThreadPoolTimerStatics>
{
	IThreadPoolTimerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IThreadPoolTimerStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

struct ISignalHandler :
	IUnknown,
	impl_ISignalHandler<ISignalHandler>
{
	ISignalHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignalHandler>>(m_ptr); }
};

struct ISignalNotifierStatics :
	IInspectable,
	impl_ISignalNotifierStatics<ISignalNotifierStatics>
{
	ISignalNotifierStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignalNotifierStatics>>(m_ptr); }
};

struct IPreallocatedWorkItemFactory :
	IInspectable,
	impl_IPreallocatedWorkItemFactory<IPreallocatedWorkItemFactory>
{
	IPreallocatedWorkItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPreallocatedWorkItemFactory>>(m_ptr); }
};

struct IPreallocatedWorkItem :
	IInspectable,
	impl_IPreallocatedWorkItem<IPreallocatedWorkItem>
{
	IPreallocatedWorkItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPreallocatedWorkItem>>(m_ptr); }
};

struct ISignalNotifier :
	IInspectable,
	impl_ISignalNotifier<ISignalNotifier>
{
	ISignalNotifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISignalNotifier>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

struct IAdvertisingManagerStatics :
	IInspectable,
	impl_IAdvertisingManagerStatics<IAdvertisingManagerStatics>
{
	IAdvertisingManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAdvertisingManagerStatics>>(m_ptr); }
};

struct IUserInformationStatics :
	IInspectable,
	impl_IUserInformationStatics<IUserInformationStatics>
{
	IUserInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUserInformationStatics>>(m_ptr); }
};

struct ILockScreenStatics :
	IInspectable,
	impl_ILockScreenStatics<ILockScreenStatics>
{
	ILockScreenStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenStatics>>(m_ptr); }
};

struct ILockScreenImageFeedStatics :
	IInspectable,
	impl_ILockScreenImageFeedStatics<ILockScreenImageFeedStatics>
{
	ILockScreenImageFeedStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ILockScreenImageFeedStatics>>(m_ptr); }
};

struct IGlobalizationPreferencesStatics :
	IInspectable,
	impl_IGlobalizationPreferencesStatics<IGlobalizationPreferencesStatics>
{
	IGlobalizationPreferencesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGlobalizationPreferencesStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI {

struct IColorHelper :
	IInspectable,
	impl_IColorHelper<IColorHelper>
{
	IColorHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorHelper>>(m_ptr); }
};

struct IColorHelperStatics :
	IInspectable,
	impl_IColorHelperStatics<IColorHelperStatics>
{
	IColorHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorHelperStatics>>(m_ptr); }
};

struct IColors :
	IInspectable,
	impl_IColors<IColors>
{
	IColors(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColors>>(m_ptr); }
};

struct IColorsStatics :
	IInspectable,
	impl_IColorsStatics<IColorsStatics>
{
	IColorsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IColorsStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

struct IWebAccountProviderCommandInvokedHandler :
	IUnknown,
	impl_IWebAccountProviderCommandInvokedHandler<IWebAccountProviderCommandInvokedHandler>
{
	IWebAccountProviderCommandInvokedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProviderCommandInvokedHandler>>(m_ptr); }
};

struct IWebAccountCommandInvokedHandler :
	IUnknown,
	impl_IWebAccountCommandInvokedHandler<IWebAccountCommandInvokedHandler>
{
	IWebAccountCommandInvokedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountCommandInvokedHandler>>(m_ptr); }
};

struct ICredentialCommandCredentialDeletedHandler :
	IUnknown,
	impl_ICredentialCommandCredentialDeletedHandler<ICredentialCommandCredentialDeletedHandler>
{
	ICredentialCommandCredentialDeletedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialCommandCredentialDeletedHandler>>(m_ptr); }
};

struct ISettingsCommandFactory :
	IInspectable,
	impl_ISettingsCommandFactory<ISettingsCommandFactory>
{
	ISettingsCommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsCommandFactory>>(m_ptr); }
};

struct ISettingsCommandStatics :
	IInspectable,
	impl_ISettingsCommandStatics<ISettingsCommandStatics>
{
	ISettingsCommandStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsCommandStatics>>(m_ptr); }
};

struct ISettingsPaneCommandsRequest :
	IInspectable,
	impl_ISettingsPaneCommandsRequest<ISettingsPaneCommandsRequest>
{
	ISettingsPaneCommandsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsPaneCommandsRequest>>(m_ptr); }
};

struct ISettingsPaneCommandsRequestedEventArgs :
	IInspectable,
	impl_ISettingsPaneCommandsRequestedEventArgs<ISettingsPaneCommandsRequestedEventArgs>
{
	ISettingsPaneCommandsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsPaneCommandsRequestedEventArgs>>(m_ptr); }
};

struct ISettingsPaneStatics :
	IInspectable,
	impl_ISettingsPaneStatics<ISettingsPaneStatics>
{
	ISettingsPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsPaneStatics>>(m_ptr); }
};

struct ISettingsPane :
	IInspectable,
	impl_ISettingsPane<ISettingsPane>
{
	ISettingsPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISettingsPane>>(m_ptr); }
};

struct IWebAccountProviderCommandFactory :
	IInspectable,
	impl_IWebAccountProviderCommandFactory<IWebAccountProviderCommandFactory>
{
	IWebAccountProviderCommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProviderCommandFactory>>(m_ptr); }
};

struct IWebAccountCommandFactory :
	IInspectable,
	impl_IWebAccountCommandFactory<IWebAccountCommandFactory>
{
	IWebAccountCommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountCommandFactory>>(m_ptr); }
};

struct ICredentialCommandFactory :
	IInspectable,
	impl_ICredentialCommandFactory<ICredentialCommandFactory>
{
	ICredentialCommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialCommandFactory>>(m_ptr); }
};

struct IWebAccountProviderCommand :
	IInspectable,
	impl_IWebAccountProviderCommand<IWebAccountProviderCommand>
{
	IWebAccountProviderCommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountProviderCommand>>(m_ptr); }
};

struct IWebAccountInvokedArgs :
	IInspectable,
	impl_IWebAccountInvokedArgs<IWebAccountInvokedArgs>
{
	IWebAccountInvokedArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountInvokedArgs>>(m_ptr); }
};

struct IWebAccountCommand :
	IInspectable,
	impl_IWebAccountCommand<IWebAccountCommand>
{
	IWebAccountCommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebAccountCommand>>(m_ptr); }
};

struct ICredentialCommand :
	IInspectable,
	impl_ICredentialCommand<ICredentialCommand>
{
	ICredentialCommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICredentialCommand>>(m_ptr); }
};

struct IAccountsSettingsPaneEventDeferral :
	IInspectable,
	impl_IAccountsSettingsPaneEventDeferral<IAccountsSettingsPaneEventDeferral>
{
	IAccountsSettingsPaneEventDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccountsSettingsPaneEventDeferral>>(m_ptr); }
};

struct IAccountsSettingsPaneCommandsRequestedEventArgs :
	IInspectable,
	impl_IAccountsSettingsPaneCommandsRequestedEventArgs<IAccountsSettingsPaneCommandsRequestedEventArgs>
{
	IAccountsSettingsPaneCommandsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccountsSettingsPaneCommandsRequestedEventArgs>>(m_ptr); }
};

struct IAccountsSettingsPaneStatics :
	IInspectable,
	impl_IAccountsSettingsPaneStatics<IAccountsSettingsPaneStatics>
{
	IAccountsSettingsPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccountsSettingsPaneStatics>>(m_ptr); }
};

struct IAccountsSettingsPane :
	IInspectable,
	impl_IAccountsSettingsPane<IAccountsSettingsPane>
{
	IAccountsSettingsPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccountsSettingsPane>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

struct IDispatchedHandler :
	IUnknown,
	impl_IDispatchedHandler<IDispatchedHandler>
{
	IDispatchedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDispatchedHandler>>(m_ptr); }
};

struct IIdleDispatchedHandler :
	IUnknown,
	impl_IIdleDispatchedHandler<IIdleDispatchedHandler>
{
	IIdleDispatchedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIdleDispatchedHandler>>(m_ptr); }
};

struct ICoreWindowEventArgs :
	IInspectable,
	impl_ICoreWindowEventArgs<ICoreWindowEventArgs>
{
	ICoreWindowEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowEventArgs>>(m_ptr); }
};

struct IAutomationProviderRequestedEventArgs :
	IInspectable,
	impl_IAutomationProviderRequestedEventArgs<IAutomationProviderRequestedEventArgs>,
	Requires<IAutomationProviderRequestedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IAutomationProviderRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAutomationProviderRequestedEventArgs>>(m_ptr); }
};

struct ICharacterReceivedEventArgs :
	IInspectable,
	impl_ICharacterReceivedEventArgs<ICharacterReceivedEventArgs>,
	Requires<ICharacterReceivedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	ICharacterReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICharacterReceivedEventArgs>>(m_ptr); }
};

struct IInputEnabledEventArgs :
	IInspectable,
	impl_IInputEnabledEventArgs<IInputEnabledEventArgs>,
	Requires<IInputEnabledEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IInputEnabledEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputEnabledEventArgs>>(m_ptr); }
};

struct IKeyEventArgs :
	IInspectable,
	impl_IKeyEventArgs<IKeyEventArgs>,
	Requires<IKeyEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IKeyEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IKeyEventArgs>>(m_ptr); }
};

struct IPointerEventArgs :
	IInspectable,
	impl_IPointerEventArgs<IPointerEventArgs>,
	Requires<IPointerEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IPointerEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerEventArgs>>(m_ptr); }
};

struct ITouchHitTestingEventArgs :
	IInspectable,
	impl_ITouchHitTestingEventArgs<ITouchHitTestingEventArgs>,
	Requires<ITouchHitTestingEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	ITouchHitTestingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITouchHitTestingEventArgs>>(m_ptr); }
};

struct IWindowActivatedEventArgs :
	IInspectable,
	impl_IWindowActivatedEventArgs<IWindowActivatedEventArgs>,
	Requires<IWindowActivatedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IWindowActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowActivatedEventArgs>>(m_ptr); }
};

struct IWindowSizeChangedEventArgs :
	IInspectable,
	impl_IWindowSizeChangedEventArgs<IWindowSizeChangedEventArgs>,
	Requires<IWindowSizeChangedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IWindowSizeChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWindowSizeChangedEventArgs>>(m_ptr); }
};

struct IVisibilityChangedEventArgs :
	IInspectable,
	impl_IVisibilityChangedEventArgs<IVisibilityChangedEventArgs>,
	Requires<IVisibilityChangedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IVisibilityChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisibilityChangedEventArgs>>(m_ptr); }
};

struct ICoreWindow :
	IInspectable,
	impl_ICoreWindow<ICoreWindow>
{
	ICoreWindow(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindow>>(m_ptr); }
};

struct ICoreWindowStatic :
	IInspectable,
	impl_ICoreWindowStatic<ICoreWindowStatic>
{
	ICoreWindowStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowStatic>>(m_ptr); }
};

struct IAcceleratorKeyEventArgs :
	IInspectable,
	impl_IAcceleratorKeyEventArgs<IAcceleratorKeyEventArgs>,
	Requires<IAcceleratorKeyEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IAcceleratorKeyEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAcceleratorKeyEventArgs>>(m_ptr); }
};

struct ICoreAcceleratorKeys :
	IInspectable,
	impl_ICoreAcceleratorKeys<ICoreAcceleratorKeys>
{
	ICoreAcceleratorKeys(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreAcceleratorKeys>>(m_ptr); }
};

struct ICoreDispatcher :
	IInspectable,
	impl_ICoreDispatcher<ICoreDispatcher>,
	Requires<ICoreDispatcher, Windows::UI::Core::ICoreAcceleratorKeys>
{
	ICoreDispatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreDispatcher>>(m_ptr); }
};

struct ICoreDispatcherWithTaskPriority :
	IInspectable,
	impl_ICoreDispatcherWithTaskPriority<ICoreDispatcherWithTaskPriority>
{
	ICoreDispatcherWithTaskPriority(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreDispatcherWithTaskPriority>>(m_ptr); }
};

struct IIdleDispatchedHandlerArgs :
	IInspectable,
	impl_IIdleDispatchedHandlerArgs<IIdleDispatchedHandlerArgs>
{
	IIdleDispatchedHandlerArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IIdleDispatchedHandlerArgs>>(m_ptr); }
};

struct ICoreCursor :
	IInspectable,
	impl_ICoreCursor<ICoreCursor>
{
	ICoreCursor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreCursor>>(m_ptr); }
};

struct ICoreCursorFactory :
	IInspectable,
	impl_ICoreCursorFactory<ICoreCursorFactory>
{
	ICoreCursorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreCursorFactory>>(m_ptr); }
};

struct IInitializeWithCoreWindow :
	IInspectable,
	impl_IInitializeWithCoreWindow<IInitializeWithCoreWindow>
{
	IInitializeWithCoreWindow(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInitializeWithCoreWindow>>(m_ptr); }
};

struct ICoreWindowResizeManager :
	IInspectable,
	impl_ICoreWindowResizeManager<ICoreWindowResizeManager>
{
	ICoreWindowResizeManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowResizeManager>>(m_ptr); }
};

struct ICoreWindowResizeManagerLayoutCapability :
	IInspectable,
	impl_ICoreWindowResizeManagerLayoutCapability<ICoreWindowResizeManagerLayoutCapability>
{
	ICoreWindowResizeManagerLayoutCapability(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowResizeManagerLayoutCapability>>(m_ptr); }
};

struct ICoreWindowResizeManagerStatics :
	IInspectable,
	impl_ICoreWindowResizeManagerStatics<ICoreWindowResizeManagerStatics>
{
	ICoreWindowResizeManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowResizeManagerStatics>>(m_ptr); }
};

struct ICoreInputSourceBase :
	IInspectable,
	impl_ICoreInputSourceBase<ICoreInputSourceBase>
{
	ICoreInputSourceBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreInputSourceBase>>(m_ptr); }
};

struct ICorePointerInputSource :
	IInspectable,
	impl_ICorePointerInputSource<ICorePointerInputSource>
{
	ICorePointerInputSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICorePointerInputSource>>(m_ptr); }
};

struct ICoreKeyboardInputSource :
	IInspectable,
	impl_ICoreKeyboardInputSource<ICoreKeyboardInputSource>
{
	ICoreKeyboardInputSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreKeyboardInputSource>>(m_ptr); }
};

struct ICoreComponentFocusable :
	IInspectable,
	impl_ICoreComponentFocusable<ICoreComponentFocusable>
{
	ICoreComponentFocusable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreComponentFocusable>>(m_ptr); }
};

struct ICoreTouchHitTesting :
	IInspectable,
	impl_ICoreTouchHitTesting<ICoreTouchHitTesting>
{
	ICoreTouchHitTesting(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreTouchHitTesting>>(m_ptr); }
};

struct ICoreWindowPopupShowingEventArgs :
	IInspectable,
	impl_ICoreWindowPopupShowingEventArgs<ICoreWindowPopupShowingEventArgs>
{
	ICoreWindowPopupShowingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowPopupShowingEventArgs>>(m_ptr); }
};

struct ICoreWindowDialog :
	IInspectable,
	impl_ICoreWindowDialog<ICoreWindowDialog>
{
	ICoreWindowDialog(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowDialog>>(m_ptr); }
};

struct ICoreWindowDialogFactory :
	IInspectable,
	impl_ICoreWindowDialogFactory<ICoreWindowDialogFactory>
{
	ICoreWindowDialogFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowDialogFactory>>(m_ptr); }
};

struct ICoreWindowFlyout :
	IInspectable,
	impl_ICoreWindowFlyout<ICoreWindowFlyout>
{
	ICoreWindowFlyout(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowFlyout>>(m_ptr); }
};

struct ICoreWindowFlyoutFactory :
	IInspectable,
	impl_ICoreWindowFlyoutFactory<ICoreWindowFlyoutFactory>
{
	ICoreWindowFlyoutFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowFlyoutFactory>>(m_ptr); }
};

struct ICoreWindowFactory :
	IInspectable,
	impl_ICoreWindowFactory<ICoreWindowFactory>
{
	ICoreWindowFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICoreWindowFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

struct IPropertyAnimation :
	IInspectable,
	impl_IPropertyAnimation<IPropertyAnimation>
{
	IPropertyAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPropertyAnimation>>(m_ptr); }
};

struct IScaleAnimation :
	IInspectable,
	impl_IScaleAnimation<IScaleAnimation>,
	Requires<IScaleAnimation, Windows::UI::Core::AnimationMetrics::IPropertyAnimation>
{
	IScaleAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScaleAnimation>>(m_ptr); }
};

struct IOpacityAnimation :
	IInspectable,
	impl_IOpacityAnimation<IOpacityAnimation>,
	Requires<IOpacityAnimation, Windows::UI::Core::AnimationMetrics::IPropertyAnimation>
{
	IOpacityAnimation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IOpacityAnimation>>(m_ptr); }
};

struct IAnimationDescription :
	IInspectable,
	impl_IAnimationDescription<IAnimationDescription>
{
	IAnimationDescription(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAnimationDescription>>(m_ptr); }
};

struct IAnimationDescriptionFactory :
	IInspectable,
	impl_IAnimationDescriptionFactory<IAnimationDescriptionFactory>
{
	IAnimationDescriptionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAnimationDescriptionFactory>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

struct IEdgeGestureEventArgs :
	IInspectable,
	impl_IEdgeGestureEventArgs<IEdgeGestureEventArgs>
{
	IEdgeGestureEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEdgeGestureEventArgs>>(m_ptr); }
};

struct IEdgeGestureStatics :
	IInspectable,
	impl_IEdgeGestureStatics<IEdgeGestureStatics>
{
	IEdgeGestureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEdgeGestureStatics>>(m_ptr); }
};

struct IEdgeGesture :
	IInspectable,
	impl_IEdgeGesture<IEdgeGesture>
{
	IEdgeGesture(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IEdgeGesture>>(m_ptr); }
};

struct ITappedEventArgs :
	IInspectable,
	impl_ITappedEventArgs<ITappedEventArgs>
{
	ITappedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITappedEventArgs>>(m_ptr); }
};

struct IRightTappedEventArgs :
	IInspectable,
	impl_IRightTappedEventArgs<IRightTappedEventArgs>
{
	IRightTappedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IRightTappedEventArgs>>(m_ptr); }
};

struct IHoldingEventArgs :
	IInspectable,
	impl_IHoldingEventArgs<IHoldingEventArgs>
{
	IHoldingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHoldingEventArgs>>(m_ptr); }
};

struct IDraggingEventArgs :
	IInspectable,
	impl_IDraggingEventArgs<IDraggingEventArgs>
{
	IDraggingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IDraggingEventArgs>>(m_ptr); }
};

struct IManipulationStartedEventArgs :
	IInspectable,
	impl_IManipulationStartedEventArgs<IManipulationStartedEventArgs>
{
	IManipulationStartedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationStartedEventArgs>>(m_ptr); }
};

struct IManipulationUpdatedEventArgs :
	IInspectable,
	impl_IManipulationUpdatedEventArgs<IManipulationUpdatedEventArgs>
{
	IManipulationUpdatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationUpdatedEventArgs>>(m_ptr); }
};

struct IManipulationInertiaStartingEventArgs :
	IInspectable,
	impl_IManipulationInertiaStartingEventArgs<IManipulationInertiaStartingEventArgs>
{
	IManipulationInertiaStartingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationInertiaStartingEventArgs>>(m_ptr); }
};

struct IManipulationCompletedEventArgs :
	IInspectable,
	impl_IManipulationCompletedEventArgs<IManipulationCompletedEventArgs>
{
	IManipulationCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IManipulationCompletedEventArgs>>(m_ptr); }
};

struct ICrossSlidingEventArgs :
	IInspectable,
	impl_ICrossSlidingEventArgs<ICrossSlidingEventArgs>
{
	ICrossSlidingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ICrossSlidingEventArgs>>(m_ptr); }
};

struct IMouseWheelParameters :
	IInspectable,
	impl_IMouseWheelParameters<IMouseWheelParameters>
{
	IMouseWheelParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMouseWheelParameters>>(m_ptr); }
};

struct IGestureRecognizer :
	IInspectable,
	impl_IGestureRecognizer<IGestureRecognizer>
{
	IGestureRecognizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IGestureRecognizer>>(m_ptr); }
};

struct IPointerPointStatics :
	IInspectable,
	impl_IPointerPointStatics<IPointerPointStatics>
{
	IPointerPointStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerPointStatics>>(m_ptr); }
};

struct IPointerPointTransform :
	IInspectable,
	impl_IPointerPointTransform<IPointerPointTransform>
{
	IPointerPointTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerPointTransform>>(m_ptr); }
};

struct IPointerPoint :
	IInspectable,
	impl_IPointerPoint<IPointerPoint>
{
	IPointerPoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerPoint>>(m_ptr); }
};

struct IPointerPointProperties :
	IInspectable,
	impl_IPointerPointProperties<IPointerPointProperties>
{
	IPointerPointProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerPointProperties>>(m_ptr); }
};

struct IPointerVisualizationSettings :
	IInspectable,
	impl_IPointerVisualizationSettings<IPointerVisualizationSettings>
{
	IPointerVisualizationSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerVisualizationSettings>>(m_ptr); }
};

struct IPointerVisualizationSettingsStatics :
	IInspectable,
	impl_IPointerVisualizationSettingsStatics<IPointerVisualizationSettingsStatics>
{
	IPointerVisualizationSettingsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPointerVisualizationSettingsStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

struct IInkDrawingAttributes :
	IInspectable,
	impl_IInkDrawingAttributes<IInkDrawingAttributes>
{
	IInkDrawingAttributes(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkDrawingAttributes>>(m_ptr); }
};

struct IInkStrokeRenderingSegment :
	IInspectable,
	impl_IInkStrokeRenderingSegment<IInkStrokeRenderingSegment>
{
	IInkStrokeRenderingSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkStrokeRenderingSegment>>(m_ptr); }
};

struct IInkStroke :
	IInspectable,
	impl_IInkStroke<IInkStroke>
{
	IInkStroke(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkStroke>>(m_ptr); }
};

struct IInkStrokeBuilder :
	IInspectable,
	impl_IInkStrokeBuilder<IInkStrokeBuilder>
{
	IInkStrokeBuilder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkStrokeBuilder>>(m_ptr); }
};

struct IInkRecognitionResult :
	IInspectable,
	impl_IInkRecognitionResult<IInkRecognitionResult>
{
	IInkRecognitionResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkRecognitionResult>>(m_ptr); }
};

struct IInkStrokeContainer :
	IInspectable,
	impl_IInkStrokeContainer<IInkStrokeContainer>
{
	IInkStrokeContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkStrokeContainer>>(m_ptr); }
};

struct IInkRecognizer :
	IInspectable,
	impl_IInkRecognizer<IInkRecognizer>
{
	IInkRecognizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkRecognizer>>(m_ptr); }
};

struct IInkRecognizerContainer :
	IInspectable,
	impl_IInkRecognizerContainer<IInkRecognizerContainer>
{
	IInkRecognizerContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkRecognizerContainer>>(m_ptr); }
};

struct IInkManager :
	IInspectable,
	impl_IInkManager<IInkManager>,
	Requires<IInkManager, Windows::UI::Input::Inking::IInkStrokeContainer, Windows::UI::Input::Inking::IInkRecognizerContainer>
{
	IInkManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInkManager>>(m_ptr); }
	using impl_IInkRecognizerContainer::RecognizeAsync;
	using impl_IInkManager::RecognizeAsync;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

struct IToastDismissedEventArgs :
	IInspectable,
	impl_IToastDismissedEventArgs<IToastDismissedEventArgs>
{
	IToastDismissedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastDismissedEventArgs>>(m_ptr); }
};

struct IToastFailedEventArgs :
	IInspectable,
	impl_IToastFailedEventArgs<IToastFailedEventArgs>
{
	IToastFailedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastFailedEventArgs>>(m_ptr); }
};

struct IToastActivatedEventArgs :
	IInspectable,
	impl_IToastActivatedEventArgs<IToastActivatedEventArgs>
{
	IToastActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastActivatedEventArgs>>(m_ptr); }
};

struct ITileUpdateManagerStatics :
	IInspectable,
	impl_ITileUpdateManagerStatics<ITileUpdateManagerStatics>
{
	ITileUpdateManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileUpdateManagerStatics>>(m_ptr); }
};

struct ITileUpdater :
	IInspectable,
	impl_ITileUpdater<ITileUpdater>
{
	ITileUpdater(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileUpdater>>(m_ptr); }
};

struct ITileUpdater2 :
	IInspectable,
	impl_ITileUpdater2<ITileUpdater2>
{
	ITileUpdater2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileUpdater2>>(m_ptr); }
};

struct IBadgeUpdateManagerStatics :
	IInspectable,
	impl_IBadgeUpdateManagerStatics<IBadgeUpdateManagerStatics>
{
	IBadgeUpdateManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBadgeUpdateManagerStatics>>(m_ptr); }
};

struct IBadgeUpdater :
	IInspectable,
	impl_IBadgeUpdater<IBadgeUpdater>
{
	IBadgeUpdater(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBadgeUpdater>>(m_ptr); }
};

struct IToastNotificationManagerStatics :
	IInspectable,
	impl_IToastNotificationManagerStatics<IToastNotificationManagerStatics>
{
	IToastNotificationManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastNotificationManagerStatics>>(m_ptr); }
};

struct IToastNotifier :
	IInspectable,
	impl_IToastNotifier<IToastNotifier>
{
	IToastNotifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastNotifier>>(m_ptr); }
};

struct ITileNotificationFactory :
	IInspectable,
	impl_ITileNotificationFactory<ITileNotificationFactory>
{
	ITileNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileNotificationFactory>>(m_ptr); }
};

struct ITileNotification :
	IInspectable,
	impl_ITileNotification<ITileNotification>
{
	ITileNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITileNotification>>(m_ptr); }
};

struct IBadgeNotificationFactory :
	IInspectable,
	impl_IBadgeNotificationFactory<IBadgeNotificationFactory>
{
	IBadgeNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBadgeNotificationFactory>>(m_ptr); }
};

struct IBadgeNotification :
	IInspectable,
	impl_IBadgeNotification<IBadgeNotification>
{
	IBadgeNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IBadgeNotification>>(m_ptr); }
};

struct IToastNotificationFactory :
	IInspectable,
	impl_IToastNotificationFactory<IToastNotificationFactory>
{
	IToastNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastNotificationFactory>>(m_ptr); }
};

struct IToastNotification :
	IInspectable,
	impl_IToastNotification<IToastNotification>
{
	IToastNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IToastNotification>>(m_ptr); }
};

struct IScheduledToastNotificationFactory :
	IInspectable,
	impl_IScheduledToastNotificationFactory<IScheduledToastNotificationFactory>
{
	IScheduledToastNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScheduledToastNotificationFactory>>(m_ptr); }
};

struct IScheduledToastNotification :
	IInspectable,
	impl_IScheduledToastNotification<IScheduledToastNotification>
{
	IScheduledToastNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScheduledToastNotification>>(m_ptr); }
};

struct IScheduledTileNotificationFactory :
	IInspectable,
	impl_IScheduledTileNotificationFactory<IScheduledTileNotificationFactory>
{
	IScheduledTileNotificationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScheduledTileNotificationFactory>>(m_ptr); }
};

struct IScheduledTileNotification :
	IInspectable,
	impl_IScheduledTileNotification<IScheduledTileNotification>
{
	IScheduledTileNotification(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IScheduledTileNotification>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

struct IUICommandInvokedHandler :
	IUnknown,
	impl_IUICommandInvokedHandler<IUICommandInvokedHandler>
{
	IUICommandInvokedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUICommandInvokedHandler>>(m_ptr); }
};

struct IMessageDialog :
	IInspectable,
	impl_IMessageDialog<IMessageDialog>
{
	IMessageDialog(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageDialog>>(m_ptr); }
};

struct IMessageDialogFactory :
	IInspectable,
	impl_IMessageDialogFactory<IMessageDialogFactory>
{
	IMessageDialogFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IMessageDialogFactory>>(m_ptr); }
};

struct IUICommand :
	IInspectable,
	impl_IUICommand<IUICommand>
{
	IUICommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUICommand>>(m_ptr); }
};

struct IUICommandFactory :
	IInspectable,
	impl_IUICommandFactory<IUICommandFactory>
{
	IUICommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUICommandFactory>>(m_ptr); }
};

struct IPopupMenu :
	IInspectable,
	impl_IPopupMenu<IPopupMenu>
{
	IPopupMenu(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IPopupMenu>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

struct ISecondaryTile :
	IInspectable,
	impl_ISecondaryTile<ISecondaryTile>
{
	ISecondaryTile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTile>>(m_ptr); }
};

struct ISecondaryTile2 :
	IInspectable,
	impl_ISecondaryTile2<ISecondaryTile2>,
	Requires<ISecondaryTile2, Windows::UI::StartScreen::ISecondaryTile>
{
	ISecondaryTile2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTile2>>(m_ptr); }
};

struct ISecondaryTileVisualElements :
	IInspectable,
	impl_ISecondaryTileVisualElements<ISecondaryTileVisualElements>
{
	ISecondaryTileVisualElements(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTileVisualElements>>(m_ptr); }
};

struct ISecondaryTileFactory :
	IInspectable,
	impl_ISecondaryTileFactory<ISecondaryTileFactory>
{
	ISecondaryTileFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTileFactory>>(m_ptr); }
};

struct ISecondaryTileFactory2 :
	IInspectable,
	impl_ISecondaryTileFactory2<ISecondaryTileFactory2>,
	Requires<ISecondaryTileFactory2, Windows::UI::StartScreen::ISecondaryTileFactory>
{
	ISecondaryTileFactory2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTileFactory2>>(m_ptr); }
};

struct ISecondaryTileStatics :
	IInspectable,
	impl_ISecondaryTileStatics<ISecondaryTileStatics>
{
	ISecondaryTileStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISecondaryTileStatics>>(m_ptr); }
};

struct IVisualElementsRequestedEventArgs :
	IInspectable,
	impl_IVisualElementsRequestedEventArgs<IVisualElementsRequestedEventArgs>
{
	IVisualElementsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualElementsRequestedEventArgs>>(m_ptr); }
};

struct IVisualElementsRequest :
	IInspectable,
	impl_IVisualElementsRequest<IVisualElementsRequest>
{
	IVisualElementsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualElementsRequest>>(m_ptr); }
};

struct IVisualElementsRequestDeferral :
	IInspectable,
	impl_IVisualElementsRequestDeferral<IVisualElementsRequestDeferral>
{
	IVisualElementsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IVisualElementsRequestDeferral>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

struct ITextConstantsStatics :
	IInspectable,
	impl_ITextConstantsStatics<ITextConstantsStatics>
{
	ITextConstantsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextConstantsStatics>>(m_ptr); }
};

struct ITextDocument :
	IInspectable,
	impl_ITextDocument<ITextDocument>
{
	ITextDocument(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextDocument>>(m_ptr); }
};

struct ITextRange :
	IInspectable,
	impl_ITextRange<ITextRange>
{
	ITextRange(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextRange>>(m_ptr); }
};

struct ITextSelection :
	IInspectable,
	impl_ITextSelection<ITextSelection>,
	Requires<ITextSelection, Windows::UI::Text::ITextRange>
{
	ITextSelection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextSelection>>(m_ptr); }
};

struct ITextCharacterFormat :
	IInspectable,
	impl_ITextCharacterFormat<ITextCharacterFormat>
{
	ITextCharacterFormat(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextCharacterFormat>>(m_ptr); }
};

struct ITextParagraphFormat :
	IInspectable,
	impl_ITextParagraphFormat<ITextParagraphFormat>
{
	ITextParagraphFormat(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ITextParagraphFormat>>(m_ptr); }
};

struct IFontWeights :
	IInspectable,
	impl_IFontWeights<IFontWeights>
{
	IFontWeights(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFontWeights>>(m_ptr); }
};

struct IFontWeightsStatics :
	IInspectable,
	impl_IFontWeightsStatics<IFontWeightsStatics>
{
	IFontWeightsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IFontWeightsStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

struct IApplicationViewSwitcherStatics :
	IInspectable,
	impl_IApplicationViewSwitcherStatics<IApplicationViewSwitcherStatics>
{
	IApplicationViewSwitcherStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewSwitcherStatics>>(m_ptr); }
};

struct IApplicationViewInteropStatics :
	IInspectable,
	impl_IApplicationViewInteropStatics<IApplicationViewInteropStatics>
{
	IApplicationViewInteropStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewInteropStatics>>(m_ptr); }
};

struct IApplicationViewStatics2 :
	IInspectable,
	impl_IApplicationViewStatics2<IApplicationViewStatics2>
{
	IApplicationViewStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewStatics2>>(m_ptr); }
};

struct IApplicationView :
	IInspectable,
	impl_IApplicationView<IApplicationView>
{
	IApplicationView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationView>>(m_ptr); }
};

struct IApplicationViewConsolidatedEventArgs :
	IInspectable,
	impl_IApplicationViewConsolidatedEventArgs<IApplicationViewConsolidatedEventArgs>
{
	IApplicationViewConsolidatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IApplicationViewConsolidatedEventArgs>>(m_ptr); }
};

struct IProjectionManagerStatics :
	IInspectable,
	impl_IProjectionManagerStatics<IProjectionManagerStatics>
{
	IProjectionManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IProjectionManagerStatics>>(m_ptr); }
};

struct IInputPaneVisibilityEventArgs :
	IInspectable,
	impl_IInputPaneVisibilityEventArgs<IInputPaneVisibilityEventArgs>
{
	IInputPaneVisibilityEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputPaneVisibilityEventArgs>>(m_ptr); }
};

struct IInputPane :
	IInspectable,
	impl_IInputPane<IInputPane>
{
	IInputPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputPane>>(m_ptr); }
};

struct IInputPaneStatics :
	IInspectable,
	impl_IInputPaneStatics<IInputPaneStatics>
{
	IInputPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IInputPaneStatics>>(m_ptr); }
};

struct IAccessibilitySettings :
	IInspectable,
	impl_IAccessibilitySettings<IAccessibilitySettings>
{
	IAccessibilitySettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAccessibilitySettings>>(m_ptr); }
};

struct IUISettings :
	IInspectable,
	impl_IUISettings<IUISettings>
{
	IUISettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUISettings>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

struct IActivatedEventHandler :
	IUnknown,
	impl_IActivatedEventHandler<IActivatedEventHandler>
{
	IActivatedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedEventHandler>>(m_ptr); }
};

struct IResumingEventHandler :
	IUnknown,
	impl_IResumingEventHandler<IResumingEventHandler>
{
	IResumingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResumingEventHandler>>(m_ptr); }
};

struct ISuspendingEventHandler :
	IUnknown,
	impl_ISuspendingEventHandler<ISuspendingEventHandler>
{
	ISuspendingEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISuspendingEventHandler>>(m_ptr); }
};

struct INavigatedEventHandler :
	IUnknown,
	impl_INavigatedEventHandler<INavigatedEventHandler>
{
	INavigatedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<INavigatedEventHandler>>(m_ptr); }
};

struct IActivatedDeferral :
	IInspectable,
	impl_IActivatedDeferral<IActivatedDeferral>
{
	IActivatedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedDeferral>>(m_ptr); }
};

struct IActivatedOperation :
	IInspectable,
	impl_IActivatedOperation<IActivatedOperation>
{
	IActivatedOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedOperation>>(m_ptr); }
};

struct IActivatedEventArgsDeferral :
	IInspectable,
	impl_IActivatedEventArgsDeferral<IActivatedEventArgsDeferral>
{
	IActivatedEventArgsDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IActivatedEventArgsDeferral>>(m_ptr); }
};

struct IWebUINavigatedEventArgs :
	IInspectable,
	impl_IWebUINavigatedEventArgs<IWebUINavigatedEventArgs>
{
	IWebUINavigatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUINavigatedEventArgs>>(m_ptr); }
};

struct IWebUIBackgroundTaskInstance :
	IInspectable,
	impl_IWebUIBackgroundTaskInstance<IWebUIBackgroundTaskInstance>
{
	IWebUIBackgroundTaskInstance(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUIBackgroundTaskInstance>>(m_ptr); }
};

struct IWebUIBackgroundTaskInstanceStatics :
	IInspectable,
	impl_IWebUIBackgroundTaskInstanceStatics<IWebUIBackgroundTaskInstanceStatics>
{
	IWebUIBackgroundTaskInstanceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUIBackgroundTaskInstanceStatics>>(m_ptr); }
};

struct IWebUINavigatedDeferral :
	IInspectable,
	impl_IWebUINavigatedDeferral<IWebUINavigatedDeferral>
{
	IWebUINavigatedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUINavigatedDeferral>>(m_ptr); }
};

struct IWebUINavigatedOperation :
	IInspectable,
	impl_IWebUINavigatedOperation<IWebUINavigatedOperation>
{
	IWebUINavigatedOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUINavigatedOperation>>(m_ptr); }
};

struct IWebUIActivationStatics :
	IInspectable,
	impl_IWebUIActivationStatics<IWebUIActivationStatics>
{
	IWebUIActivationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebUIActivationStatics>>(m_ptr); }
};

struct IHtmlPrintDocumentSource :
	IInspectable,
	impl_IHtmlPrintDocumentSource<IHtmlPrintDocumentSource>,
	Requires<IHtmlPrintDocumentSource, Windows::Graphics::Printing::IPrintDocumentSource>
{
	IHtmlPrintDocumentSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHtmlPrintDocumentSource>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Web {

struct IUriToStreamResolver :
	IInspectable,
	impl_IUriToStreamResolver<IUriToStreamResolver>
{
	IUriToStreamResolver(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IUriToStreamResolver>>(m_ptr); }
};

struct IWebErrorStatics :
	IInspectable,
	impl_IWebErrorStatics<IWebErrorStatics>
{
	IWebErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWebErrorStatics>>(m_ptr); }
};

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

struct IResourceCollection :
	IInspectable,
	impl_IResourceCollection<IResourceCollection>,
	Requires<IResourceCollection, Windows::Web::Syndication::ISyndicationNode>
{
	IResourceCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IResourceCollection>>(m_ptr); }
};

struct IWorkspace :
	IInspectable,
	impl_IWorkspace<IWorkspace>,
	Requires<IWorkspace, Windows::Web::Syndication::ISyndicationNode>
{
	IWorkspace(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IWorkspace>>(m_ptr); }
};

struct IServiceDocument :
	IInspectable,
	impl_IServiceDocument<IServiceDocument>,
	Requires<IServiceDocument, Windows::Web::Syndication::ISyndicationNode>
{
	IServiceDocument(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IServiceDocument>>(m_ptr); }
};

struct IAtomPubClient :
	IInspectable,
	impl_IAtomPubClient<IAtomPubClient>,
	Requires<IAtomPubClient, Windows::Web::Syndication::ISyndicationClient>
{
	IAtomPubClient(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAtomPubClient>>(m_ptr); }
};

struct IAtomPubClientFactory :
	IInspectable,
	impl_IAtomPubClientFactory<IAtomPubClientFactory>
{
	IAtomPubClientFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IAtomPubClientFactory>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

struct IHttpClientFactory :
	IInspectable,
	impl_IHttpClientFactory<IHttpClientFactory>
{
	IHttpClientFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpClientFactory>>(m_ptr); }
};

struct IHttpClient :
	IInspectable,
	impl_IHttpClient<IHttpClient>
{
	IHttpClient(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpClient>>(m_ptr); }
};

struct IHttpContent :
	IInspectable,
	impl_IHttpContent<IHttpContent>
{
	IHttpContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContent>>(m_ptr); }
};

struct IHttpCookieManager :
	IInspectable,
	impl_IHttpCookieManager<IHttpCookieManager>
{
	IHttpCookieManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookieManager>>(m_ptr); }
};

struct IHttpCookieFactory :
	IInspectable,
	impl_IHttpCookieFactory<IHttpCookieFactory>
{
	IHttpCookieFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookieFactory>>(m_ptr); }
};

struct IHttpCookie :
	IInspectable,
	impl_IHttpCookie<IHttpCookie>
{
	IHttpCookie(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookie>>(m_ptr); }
};

struct IHttpMethodStatics :
	IInspectable,
	impl_IHttpMethodStatics<IHttpMethodStatics>
{
	IHttpMethodStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMethodStatics>>(m_ptr); }
};

struct IHttpMethodFactory :
	IInspectable,
	impl_IHttpMethodFactory<IHttpMethodFactory>
{
	IHttpMethodFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMethodFactory>>(m_ptr); }
};

struct IHttpMethod :
	IInspectable,
	impl_IHttpMethod<IHttpMethod>
{
	IHttpMethod(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMethod>>(m_ptr); }
};

struct IHttpTransportInformation :
	IInspectable,
	impl_IHttpTransportInformation<IHttpTransportInformation>
{
	IHttpTransportInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransportInformation>>(m_ptr); }
};

struct IHttpRequestMessageFactory :
	IInspectable,
	impl_IHttpRequestMessageFactory<IHttpRequestMessageFactory>
{
	IHttpRequestMessageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpRequestMessageFactory>>(m_ptr); }
};

struct IHttpRequestMessage :
	IInspectable,
	impl_IHttpRequestMessage<IHttpRequestMessage>
{
	IHttpRequestMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpRequestMessage>>(m_ptr); }
};

struct IHttpResponseMessageFactory :
	IInspectable,
	impl_IHttpResponseMessageFactory<IHttpResponseMessageFactory>
{
	IHttpResponseMessageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpResponseMessageFactory>>(m_ptr); }
};

struct IHttpResponseMessage :
	IInspectable,
	impl_IHttpResponseMessage<IHttpResponseMessage>
{
	IHttpResponseMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpResponseMessage>>(m_ptr); }
};

struct IHttpStringContentFactory :
	IInspectable,
	impl_IHttpStringContentFactory<IHttpStringContentFactory>
{
	IHttpStringContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpStringContentFactory>>(m_ptr); }
};

struct IHttpBufferContentFactory :
	IInspectable,
	impl_IHttpBufferContentFactory<IHttpBufferContentFactory>
{
	IHttpBufferContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpBufferContentFactory>>(m_ptr); }
};

struct IHttpStreamContentFactory :
	IInspectable,
	impl_IHttpStreamContentFactory<IHttpStreamContentFactory>
{
	IHttpStreamContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpStreamContentFactory>>(m_ptr); }
};

struct IHttpFormUrlEncodedContentFactory :
	IInspectable,
	impl_IHttpFormUrlEncodedContentFactory<IHttpFormUrlEncodedContentFactory>
{
	IHttpFormUrlEncodedContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpFormUrlEncodedContentFactory>>(m_ptr); }
};

struct IHttpMultipartContentFactory :
	IInspectable,
	impl_IHttpMultipartContentFactory<IHttpMultipartContentFactory>
{
	IHttpMultipartContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMultipartContentFactory>>(m_ptr); }
};

struct IHttpMultipartContent :
	IInspectable,
	impl_IHttpMultipartContent<IHttpMultipartContent>,
	Requires<IHttpMultipartContent, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	IHttpMultipartContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMultipartContent>>(m_ptr); }
};

struct IHttpMultipartFormDataContentFactory :
	IInspectable,
	impl_IHttpMultipartFormDataContentFactory<IHttpMultipartFormDataContentFactory>
{
	IHttpMultipartFormDataContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMultipartFormDataContentFactory>>(m_ptr); }
};

struct IHttpMultipartFormDataContent :
	IInspectable,
	impl_IHttpMultipartFormDataContent<IHttpMultipartFormDataContent>,
	Requires<IHttpMultipartFormDataContent, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	IHttpMultipartFormDataContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMultipartFormDataContent>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

struct IHttpFilter :
	IInspectable,
	impl_IHttpFilter<IHttpFilter>
{
	IHttpFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpFilter>>(m_ptr); }
};

struct IHttpCacheControl :
	IInspectable,
	impl_IHttpCacheControl<IHttpCacheControl>
{
	IHttpCacheControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCacheControl>>(m_ptr); }
};

struct IHttpBaseProtocolFilter :
	IInspectable,
	impl_IHttpBaseProtocolFilter<IHttpBaseProtocolFilter>,
	Requires<IHttpBaseProtocolFilter, Windows::Web::Http::Filters::IHttpFilter>
{
	IHttpBaseProtocolFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpBaseProtocolFilter>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

struct IHttpContentHeaderCollection :
	IInspectable,
	impl_IHttpContentHeaderCollection<IHttpContentHeaderCollection>,
	Requires<IHttpContentHeaderCollection, Windows::Foundation::Collections::IMap<String, String>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>>>
{
	IHttpContentHeaderCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentHeaderCollection>>(m_ptr); }
};

struct IHttpRequestHeaderCollection :
	IInspectable,
	impl_IHttpRequestHeaderCollection<IHttpRequestHeaderCollection>,
	Requires<IHttpRequestHeaderCollection, Windows::Foundation::Collections::IMap<String, String>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>>>
{
	IHttpRequestHeaderCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpRequestHeaderCollection>>(m_ptr); }
};

struct IHttpResponseHeaderCollection :
	IInspectable,
	impl_IHttpResponseHeaderCollection<IHttpResponseHeaderCollection>,
	Requires<IHttpResponseHeaderCollection, Windows::Foundation::Collections::IMap<String, String>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>>>
{
	IHttpResponseHeaderCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpResponseHeaderCollection>>(m_ptr); }
};

struct IHttpCacheDirectiveHeaderValueCollection :
	IInspectable,
	impl_IHttpCacheDirectiveHeaderValueCollection<IHttpCacheDirectiveHeaderValueCollection>,
	Requires<IHttpCacheDirectiveHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpNameValueHeaderValue>>
{
	IHttpCacheDirectiveHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCacheDirectiveHeaderValueCollection>>(m_ptr); }
};

struct IHttpChallengeHeaderValueStatics :
	IInspectable,
	impl_IHttpChallengeHeaderValueStatics<IHttpChallengeHeaderValueStatics>
{
	IHttpChallengeHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpChallengeHeaderValueStatics>>(m_ptr); }
};

struct IHttpChallengeHeaderValueFactory :
	IInspectable,
	impl_IHttpChallengeHeaderValueFactory<IHttpChallengeHeaderValueFactory>
{
	IHttpChallengeHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpChallengeHeaderValueFactory>>(m_ptr); }
};

struct IHttpChallengeHeaderValue :
	IInspectable,
	impl_IHttpChallengeHeaderValue<IHttpChallengeHeaderValue>
{
	IHttpChallengeHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpChallengeHeaderValue>>(m_ptr); }
};

struct IHttpChallengeHeaderValueCollection :
	IInspectable,
	impl_IHttpChallengeHeaderValueCollection<IHttpChallengeHeaderValueCollection>,
	Requires<IHttpChallengeHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpChallengeHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpChallengeHeaderValue>>
{
	IHttpChallengeHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpChallengeHeaderValueCollection>>(m_ptr); }
};

struct IHttpCredentialsHeaderValueStatics :
	IInspectable,
	impl_IHttpCredentialsHeaderValueStatics<IHttpCredentialsHeaderValueStatics>
{
	IHttpCredentialsHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCredentialsHeaderValueStatics>>(m_ptr); }
};

struct IHttpCredentialsHeaderValueFactory :
	IInspectable,
	impl_IHttpCredentialsHeaderValueFactory<IHttpCredentialsHeaderValueFactory>
{
	IHttpCredentialsHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCredentialsHeaderValueFactory>>(m_ptr); }
};

struct IHttpCredentialsHeaderValue :
	IInspectable,
	impl_IHttpCredentialsHeaderValue<IHttpCredentialsHeaderValue>
{
	IHttpCredentialsHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCredentialsHeaderValue>>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValueStatics :
	IInspectable,
	impl_IHttpConnectionOptionHeaderValueStatics<IHttpConnectionOptionHeaderValueStatics>
{
	IHttpConnectionOptionHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpConnectionOptionHeaderValueStatics>>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValueFactory :
	IInspectable,
	impl_IHttpConnectionOptionHeaderValueFactory<IHttpConnectionOptionHeaderValueFactory>
{
	IHttpConnectionOptionHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpConnectionOptionHeaderValueFactory>>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValue :
	IInspectable,
	impl_IHttpConnectionOptionHeaderValue<IHttpConnectionOptionHeaderValue>
{
	IHttpConnectionOptionHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpConnectionOptionHeaderValue>>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValueCollection :
	IInspectable,
	impl_IHttpConnectionOptionHeaderValueCollection<IHttpConnectionOptionHeaderValueCollection>,
	Requires<IHttpConnectionOptionHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue>>
{
	IHttpConnectionOptionHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpConnectionOptionHeaderValueCollection>>(m_ptr); }
};

struct IHttpContentCodingHeaderValueStatics :
	IInspectable,
	impl_IHttpContentCodingHeaderValueStatics<IHttpContentCodingHeaderValueStatics>
{
	IHttpContentCodingHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingHeaderValueStatics>>(m_ptr); }
};

struct IHttpContentCodingHeaderValueFactory :
	IInspectable,
	impl_IHttpContentCodingHeaderValueFactory<IHttpContentCodingHeaderValueFactory>
{
	IHttpContentCodingHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingHeaderValueFactory>>(m_ptr); }
};

struct IHttpContentCodingHeaderValue :
	IInspectable,
	impl_IHttpContentCodingHeaderValue<IHttpContentCodingHeaderValue>
{
	IHttpContentCodingHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingHeaderValue>>(m_ptr); }
};

struct IHttpContentCodingHeaderValueCollection :
	IInspectable,
	impl_IHttpContentCodingHeaderValueCollection<IHttpContentCodingHeaderValueCollection>,
	Requires<IHttpContentCodingHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpContentCodingHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpContentCodingHeaderValue>>
{
	IHttpContentCodingHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingHeaderValueCollection>>(m_ptr); }
};

struct IHttpContentDispositionHeaderValueStatics :
	IInspectable,
	impl_IHttpContentDispositionHeaderValueStatics<IHttpContentDispositionHeaderValueStatics>
{
	IHttpContentDispositionHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentDispositionHeaderValueStatics>>(m_ptr); }
};

struct IHttpContentDispositionHeaderValueFactory :
	IInspectable,
	impl_IHttpContentDispositionHeaderValueFactory<IHttpContentDispositionHeaderValueFactory>
{
	IHttpContentDispositionHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentDispositionHeaderValueFactory>>(m_ptr); }
};

struct IHttpContentDispositionHeaderValue :
	IInspectable,
	impl_IHttpContentDispositionHeaderValue<IHttpContentDispositionHeaderValue>
{
	IHttpContentDispositionHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentDispositionHeaderValue>>(m_ptr); }
};

struct IHttpContentRangeHeaderValueStatics :
	IInspectable,
	impl_IHttpContentRangeHeaderValueStatics<IHttpContentRangeHeaderValueStatics>
{
	IHttpContentRangeHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentRangeHeaderValueStatics>>(m_ptr); }
};

struct IHttpContentRangeHeaderValueFactory :
	IInspectable,
	impl_IHttpContentRangeHeaderValueFactory<IHttpContentRangeHeaderValueFactory>
{
	IHttpContentRangeHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentRangeHeaderValueFactory>>(m_ptr); }
};

struct IHttpContentRangeHeaderValue :
	IInspectable,
	impl_IHttpContentRangeHeaderValue<IHttpContentRangeHeaderValue>
{
	IHttpContentRangeHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentRangeHeaderValue>>(m_ptr); }
};

struct IHttpCookiePairHeaderValueStatics :
	IInspectable,
	impl_IHttpCookiePairHeaderValueStatics<IHttpCookiePairHeaderValueStatics>
{
	IHttpCookiePairHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookiePairHeaderValueStatics>>(m_ptr); }
};

struct IHttpCookiePairHeaderValueFactory :
	IInspectable,
	impl_IHttpCookiePairHeaderValueFactory<IHttpCookiePairHeaderValueFactory>
{
	IHttpCookiePairHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookiePairHeaderValueFactory>>(m_ptr); }
};

struct IHttpCookiePairHeaderValue :
	IInspectable,
	impl_IHttpCookiePairHeaderValue<IHttpCookiePairHeaderValue>
{
	IHttpCookiePairHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookiePairHeaderValue>>(m_ptr); }
};

struct IHttpCookiePairHeaderValueCollection :
	IInspectable,
	impl_IHttpCookiePairHeaderValueCollection<IHttpCookiePairHeaderValueCollection>,
	Requires<IHttpCookiePairHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpCookiePairHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpCookiePairHeaderValue>>
{
	IHttpCookiePairHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpCookiePairHeaderValueCollection>>(m_ptr); }
};

struct IHttpDateOrDeltaHeaderValueStatics :
	IInspectable,
	impl_IHttpDateOrDeltaHeaderValueStatics<IHttpDateOrDeltaHeaderValueStatics>
{
	IHttpDateOrDeltaHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpDateOrDeltaHeaderValueStatics>>(m_ptr); }
};

struct IHttpDateOrDeltaHeaderValue :
	IInspectable,
	impl_IHttpDateOrDeltaHeaderValue<IHttpDateOrDeltaHeaderValue>
{
	IHttpDateOrDeltaHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpDateOrDeltaHeaderValue>>(m_ptr); }
};

struct IHttpExpectationHeaderValueStatics :
	IInspectable,
	impl_IHttpExpectationHeaderValueStatics<IHttpExpectationHeaderValueStatics>
{
	IHttpExpectationHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpExpectationHeaderValueStatics>>(m_ptr); }
};

struct IHttpExpectationHeaderValueFactory :
	IInspectable,
	impl_IHttpExpectationHeaderValueFactory<IHttpExpectationHeaderValueFactory>
{
	IHttpExpectationHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpExpectationHeaderValueFactory>>(m_ptr); }
};

struct IHttpExpectationHeaderValue :
	IInspectable,
	impl_IHttpExpectationHeaderValue<IHttpExpectationHeaderValue>
{
	IHttpExpectationHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpExpectationHeaderValue>>(m_ptr); }
};

struct IHttpExpectationHeaderValueCollection :
	IInspectable,
	impl_IHttpExpectationHeaderValueCollection<IHttpExpectationHeaderValueCollection>,
	Requires<IHttpExpectationHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpExpectationHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpExpectationHeaderValue>>
{
	IHttpExpectationHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpExpectationHeaderValueCollection>>(m_ptr); }
};

struct IHttpLanguageHeaderValueCollection :
	IInspectable,
	impl_IHttpLanguageHeaderValueCollection<IHttpLanguageHeaderValueCollection>,
	Requires<IHttpLanguageHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Globalization::Language>, Windows::Foundation::Collections::IIterable<Windows::Globalization::Language>>
{
	IHttpLanguageHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageHeaderValueCollection>>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValueStatics :
	IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValueStatics<IHttpLanguageRangeWithQualityHeaderValueStatics>
{
	IHttpLanguageRangeWithQualityHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageRangeWithQualityHeaderValueStatics>>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValueFactory :
	IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValueFactory<IHttpLanguageRangeWithQualityHeaderValueFactory>
{
	IHttpLanguageRangeWithQualityHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageRangeWithQualityHeaderValueFactory>>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValue :
	IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValue<IHttpLanguageRangeWithQualityHeaderValue>
{
	IHttpLanguageRangeWithQualityHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageRangeWithQualityHeaderValue>>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValueCollection :
	IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValueCollection<IHttpLanguageRangeWithQualityHeaderValueCollection>,
	Requires<IHttpLanguageRangeWithQualityHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue>>
{
	IHttpLanguageRangeWithQualityHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpLanguageRangeWithQualityHeaderValueCollection>>(m_ptr); }
};

struct IHttpMediaTypeHeaderValueStatics :
	IInspectable,
	impl_IHttpMediaTypeHeaderValueStatics<IHttpMediaTypeHeaderValueStatics>
{
	IHttpMediaTypeHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeHeaderValueStatics>>(m_ptr); }
};

struct IHttpMediaTypeHeaderValueFactory :
	IInspectable,
	impl_IHttpMediaTypeHeaderValueFactory<IHttpMediaTypeHeaderValueFactory>
{
	IHttpMediaTypeHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeHeaderValueFactory>>(m_ptr); }
};

struct IHttpMediaTypeHeaderValue :
	IInspectable,
	impl_IHttpMediaTypeHeaderValue<IHttpMediaTypeHeaderValue>
{
	IHttpMediaTypeHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeHeaderValue>>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValueStatics :
	IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValueStatics<IHttpMediaTypeWithQualityHeaderValueStatics>
{
	IHttpMediaTypeWithQualityHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeWithQualityHeaderValueStatics>>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValueFactory :
	IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValueFactory<IHttpMediaTypeWithQualityHeaderValueFactory>
{
	IHttpMediaTypeWithQualityHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeWithQualityHeaderValueFactory>>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValue :
	IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValue<IHttpMediaTypeWithQualityHeaderValue>
{
	IHttpMediaTypeWithQualityHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeWithQualityHeaderValue>>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValueCollection :
	IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValueCollection<IHttpMediaTypeWithQualityHeaderValueCollection>,
	Requires<IHttpMediaTypeWithQualityHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue>>
{
	IHttpMediaTypeWithQualityHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMediaTypeWithQualityHeaderValueCollection>>(m_ptr); }
};

struct IHttpMethodHeaderValueCollection :
	IInspectable,
	impl_IHttpMethodHeaderValueCollection<IHttpMethodHeaderValueCollection>,
	Requires<IHttpMethodHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::HttpMethod>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::HttpMethod>>
{
	IHttpMethodHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpMethodHeaderValueCollection>>(m_ptr); }
};

struct IHttpNameValueHeaderValueStatics :
	IInspectable,
	impl_IHttpNameValueHeaderValueStatics<IHttpNameValueHeaderValueStatics>
{
	IHttpNameValueHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpNameValueHeaderValueStatics>>(m_ptr); }
};

struct IHttpNameValueHeaderValueFactory :
	IInspectable,
	impl_IHttpNameValueHeaderValueFactory<IHttpNameValueHeaderValueFactory>
{
	IHttpNameValueHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpNameValueHeaderValueFactory>>(m_ptr); }
};

struct IHttpNameValueHeaderValue :
	IInspectable,
	impl_IHttpNameValueHeaderValue<IHttpNameValueHeaderValue>
{
	IHttpNameValueHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpNameValueHeaderValue>>(m_ptr); }
};

struct IHttpProductHeaderValueStatics :
	IInspectable,
	impl_IHttpProductHeaderValueStatics<IHttpProductHeaderValueStatics>
{
	IHttpProductHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductHeaderValueStatics>>(m_ptr); }
};

struct IHttpProductHeaderValueFactory :
	IInspectable,
	impl_IHttpProductHeaderValueFactory<IHttpProductHeaderValueFactory>
{
	IHttpProductHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductHeaderValueFactory>>(m_ptr); }
};

struct IHttpProductHeaderValue :
	IInspectable,
	impl_IHttpProductHeaderValue<IHttpProductHeaderValue>
{
	IHttpProductHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductHeaderValue>>(m_ptr); }
};

struct IHttpProductInfoHeaderValueStatics :
	IInspectable,
	impl_IHttpProductInfoHeaderValueStatics<IHttpProductInfoHeaderValueStatics>
{
	IHttpProductInfoHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductInfoHeaderValueStatics>>(m_ptr); }
};

struct IHttpProductInfoHeaderValueFactory :
	IInspectable,
	impl_IHttpProductInfoHeaderValueFactory<IHttpProductInfoHeaderValueFactory>
{
	IHttpProductInfoHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductInfoHeaderValueFactory>>(m_ptr); }
};

struct IHttpProductInfoHeaderValue :
	IInspectable,
	impl_IHttpProductInfoHeaderValue<IHttpProductInfoHeaderValue>
{
	IHttpProductInfoHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductInfoHeaderValue>>(m_ptr); }
};

struct IHttpProductInfoHeaderValueCollection :
	IInspectable,
	impl_IHttpProductInfoHeaderValueCollection<IHttpProductInfoHeaderValueCollection>,
	Requires<IHttpProductInfoHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpProductInfoHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpProductInfoHeaderValue>>
{
	IHttpProductInfoHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpProductInfoHeaderValueCollection>>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValueStatics :
	IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValueStatics<IHttpContentCodingWithQualityHeaderValueStatics>
{
	IHttpContentCodingWithQualityHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingWithQualityHeaderValueStatics>>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValueFactory :
	IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValueFactory<IHttpContentCodingWithQualityHeaderValueFactory>
{
	IHttpContentCodingWithQualityHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingWithQualityHeaderValueFactory>>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValue :
	IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValue<IHttpContentCodingWithQualityHeaderValue>
{
	IHttpContentCodingWithQualityHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingWithQualityHeaderValue>>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValueCollection :
	IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValueCollection<IHttpContentCodingWithQualityHeaderValueCollection>,
	Requires<IHttpContentCodingWithQualityHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue>>
{
	IHttpContentCodingWithQualityHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpContentCodingWithQualityHeaderValueCollection>>(m_ptr); }
};

struct IHttpTransferCodingHeaderValueStatics :
	IInspectable,
	impl_IHttpTransferCodingHeaderValueStatics<IHttpTransferCodingHeaderValueStatics>
{
	IHttpTransferCodingHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransferCodingHeaderValueStatics>>(m_ptr); }
};

struct IHttpTransferCodingHeaderValueFactory :
	IInspectable,
	impl_IHttpTransferCodingHeaderValueFactory<IHttpTransferCodingHeaderValueFactory>
{
	IHttpTransferCodingHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransferCodingHeaderValueFactory>>(m_ptr); }
};

struct IHttpTransferCodingHeaderValue :
	IInspectable,
	impl_IHttpTransferCodingHeaderValue<IHttpTransferCodingHeaderValue>
{
	IHttpTransferCodingHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransferCodingHeaderValue>>(m_ptr); }
};

struct IHttpTransferCodingHeaderValueCollection :
	IInspectable,
	impl_IHttpTransferCodingHeaderValueCollection<IHttpTransferCodingHeaderValueCollection>,
	Requires<IHttpTransferCodingHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpTransferCodingHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpTransferCodingHeaderValue>>
{
	IHttpTransferCodingHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<IHttpTransferCodingHeaderValueCollection>>(m_ptr); }
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

struct ISyndicationAttribute :
	IInspectable,
	impl_ISyndicationAttribute<ISyndicationAttribute>
{
	ISyndicationAttribute(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationAttribute>>(m_ptr); }
};

struct ISyndicationAttributeFactory :
	IInspectable,
	impl_ISyndicationAttributeFactory<ISyndicationAttributeFactory>
{
	ISyndicationAttributeFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationAttributeFactory>>(m_ptr); }
};

struct ISyndicationNode :
	IInspectable,
	impl_ISyndicationNode<ISyndicationNode>
{
	ISyndicationNode(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationNode>>(m_ptr); }
};

struct ISyndicationNodeFactory :
	IInspectable,
	impl_ISyndicationNodeFactory<ISyndicationNodeFactory>
{
	ISyndicationNodeFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationNodeFactory>>(m_ptr); }
};

struct ISyndicationGenerator :
	IInspectable,
	impl_ISyndicationGenerator<ISyndicationGenerator>
{
	ISyndicationGenerator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationGenerator>>(m_ptr); }
};

struct ISyndicationGeneratorFactory :
	IInspectable,
	impl_ISyndicationGeneratorFactory<ISyndicationGeneratorFactory>
{
	ISyndicationGeneratorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationGeneratorFactory>>(m_ptr); }
};

struct ISyndicationText :
	IInspectable,
	impl_ISyndicationText<ISyndicationText>,
	Requires<ISyndicationText, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationText(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationText>>(m_ptr); }
};

struct ISyndicationTextFactory :
	IInspectable,
	impl_ISyndicationTextFactory<ISyndicationTextFactory>
{
	ISyndicationTextFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationTextFactory>>(m_ptr); }
};

struct ISyndicationContent :
	IInspectable,
	impl_ISyndicationContent<ISyndicationContent>,
	Requires<ISyndicationContent, Windows::Web::Syndication::ISyndicationText, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationContent>>(m_ptr); }
};

struct ISyndicationContentFactory :
	IInspectable,
	impl_ISyndicationContentFactory<ISyndicationContentFactory>
{
	ISyndicationContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationContentFactory>>(m_ptr); }
};

struct ISyndicationLink :
	IInspectable,
	impl_ISyndicationLink<ISyndicationLink>,
	Requires<ISyndicationLink, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationLink(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationLink>>(m_ptr); }
};

struct ISyndicationLinkFactory :
	IInspectable,
	impl_ISyndicationLinkFactory<ISyndicationLinkFactory>
{
	ISyndicationLinkFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationLinkFactory>>(m_ptr); }
};

struct ISyndicationPerson :
	IInspectable,
	impl_ISyndicationPerson<ISyndicationPerson>,
	Requires<ISyndicationPerson, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationPerson(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationPerson>>(m_ptr); }
};

struct ISyndicationPersonFactory :
	IInspectable,
	impl_ISyndicationPersonFactory<ISyndicationPersonFactory>
{
	ISyndicationPersonFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationPersonFactory>>(m_ptr); }
};

struct ISyndicationCategory :
	IInspectable,
	impl_ISyndicationCategory<ISyndicationCategory>,
	Requires<ISyndicationCategory, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationCategory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationCategory>>(m_ptr); }
};

struct ISyndicationCategoryFactory :
	IInspectable,
	impl_ISyndicationCategoryFactory<ISyndicationCategoryFactory>
{
	ISyndicationCategoryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationCategoryFactory>>(m_ptr); }
};

struct ISyndicationItem :
	IInspectable,
	impl_ISyndicationItem<ISyndicationItem>,
	Requires<ISyndicationItem, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationItem>>(m_ptr); }
};

struct ISyndicationItemFactory :
	IInspectable,
	impl_ISyndicationItemFactory<ISyndicationItemFactory>
{
	ISyndicationItemFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationItemFactory>>(m_ptr); }
};

struct ISyndicationFeed :
	IInspectable,
	impl_ISyndicationFeed<ISyndicationFeed>,
	Requires<ISyndicationFeed, Windows::Web::Syndication::ISyndicationNode>
{
	ISyndicationFeed(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationFeed>>(m_ptr); }
};

struct ISyndicationFeedFactory :
	IInspectable,
	impl_ISyndicationFeedFactory<ISyndicationFeedFactory>
{
	ISyndicationFeedFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationFeedFactory>>(m_ptr); }
};

struct ISyndicationClient :
	IInspectable,
	impl_ISyndicationClient<ISyndicationClient>
{
	ISyndicationClient(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationClient>>(m_ptr); }
};

struct ISyndicationClientFactory :
	IInspectable,
	impl_ISyndicationClientFactory<ISyndicationClientFactory>
{
	ISyndicationClientFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationClientFactory>>(m_ptr); }
};

struct ISyndicationErrorStatics :
	IInspectable,
	impl_ISyndicationErrorStatics<ISyndicationErrorStatics>
{
	ISyndicationErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return static_cast<AbiPtr<ISyndicationErrorStatics>>(m_ptr); }
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel {

struct SuspendingEventArgs :
	Windows::ApplicationModel::ISuspendingEventArgs
{
	SuspendingEventArgs(std::nullptr_t) noexcept {}
};

struct SuspendingDeferral :
	Windows::ApplicationModel::ISuspendingDeferral
{
	SuspendingDeferral(std::nullptr_t) noexcept {}
};

struct SuspendingOperation :
	Windows::ApplicationModel::ISuspendingOperation
{
	SuspendingOperation(std::nullptr_t) noexcept {}
};

struct PackageId :
	Windows::ApplicationModel::IPackageId
{
	PackageId(std::nullptr_t) noexcept {}
};

struct Package :
	Windows::ApplicationModel::IPackage,
	Requires<Package, Windows::ApplicationModel::IPackage2>
{
	Package(std::nullptr_t) noexcept {}
	static Windows::ApplicationModel::Package Current();
};

struct DesignMode
{
	DesignMode() = delete;
	static bool DesignModeEnabled();
};

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

struct SplashScreen :
	Windows::ApplicationModel::Activation::ISplashScreen
{
	SplashScreen(std::nullptr_t) noexcept {}
};

struct LaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,
	Requires<LaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs>
{
	LaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ISearchActivatedEventArgs,
	Requires<SearchActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails>
{
	SearchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ShareTargetActivatedEventArgs :
	Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs
{
	ShareTargetActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileActivatedEventArgs,
	Requires<FileActivatedEventArgs, Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	FileActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ProtocolActivatedEventArgs :
	Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,
	Requires<ProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	ProtocolActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileOpenPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs
{
	FileOpenPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileSavePickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs
{
	FileSavePickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct CachedFileUpdaterActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs
{
	CachedFileUpdaterActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs
{
	ContactPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct DeviceActivatedEventArgs :
	Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs,
	Requires<DeviceActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	DeviceActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs
{
	PrintTaskSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct CameraSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs
{
	CameraSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderAddAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs
{
	AppointmentsProviderAddAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderReplaceAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs
{
	AppointmentsProviderReplaceAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderRemoveAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs
{
	AppointmentsProviderRemoveAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderShowTimeFrameActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs
{
	AppointmentsProviderShowTimeFrameActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs
{
	ContactCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactMessageActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs
{
	ContactMessageActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactMapActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs
{
	ContactMapActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactPostActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs
{
	ContactPostActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactVideoCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs
{
	ContactVideoCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct RestrictedLaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs
{
	RestrictedLaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct LockScreenCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs,
	Requires<LockScreenCallActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	LockScreenCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

struct Appointment :
	Windows::ApplicationModel::Appointments::IAppointment
{
	Appointment(std::nullptr_t) noexcept {}
	Appointment();
};

struct AppointmentOrganizer :
	Windows::ApplicationModel::Appointments::IAppointmentParticipant
{
	AppointmentOrganizer(std::nullptr_t) noexcept {}
	AppointmentOrganizer();
};

struct AppointmentInvitee :
	Windows::ApplicationModel::Appointments::IAppointmentInvitee
{
	AppointmentInvitee(std::nullptr_t) noexcept {}
	AppointmentInvitee();
};

struct AppointmentRecurrence :
	Windows::ApplicationModel::Appointments::IAppointmentRecurrence
{
	AppointmentRecurrence(std::nullptr_t) noexcept {}
	AppointmentRecurrence();
};

struct AppointmentManager
{
	AppointmentManager() = delete;
	static Windows::Foundation::IAsyncOperation<String> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<String> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	static Windows::Foundation::IAsyncAction ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration);
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

struct AppointmentsProviderLaunchActionVerbs
{
	AppointmentsProviderLaunchActionVerbs() = delete;
	static String AddAppointment();
	static String ReplaceAppointment();
	static String RemoveAppointment();
	static String ShowTimeFrame();
};

struct AddAppointmentOperation :
	Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation
{
	AddAppointmentOperation(std::nullptr_t) noexcept {}
};

struct ReplaceAppointmentOperation :
	Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation
{
	ReplaceAppointmentOperation(std::nullptr_t) noexcept {}
};

struct RemoveAppointmentOperation :
	Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation
{
	RemoveAppointmentOperation(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

struct AlarmApplicationManager
{
	AlarmApplicationManager() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::AlarmAccessStatus> RequestAccessAsync();
	static Windows::ApplicationModel::Background::AlarmAccessStatus GetAccessStatus();
};

struct BackgroundExecutionManager
{
	BackgroundExecutionManager() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync();
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(String const & applicationId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(wchar_t const (&applicationId)[S0]);
	static void RemoveAccess();
	static void RemoveAccess(String const & applicationId);
	template <unsigned S0> static void RemoveAccess(wchar_t const (&applicationId)[S0]);
	static Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus();
	static Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(String const & applicationId);
	template <unsigned S0> static Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(wchar_t const (&applicationId)[S0]);
};

struct BackgroundTaskRegistration :
	Windows::ApplicationModel::Background::IBackgroundTaskRegistration
{
	BackgroundTaskRegistration(std::nullptr_t) noexcept {}
	static Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> AllTasks();
};

struct BackgroundTaskDeferral :
	Windows::ApplicationModel::Background::IBackgroundTaskDeferral
{
	BackgroundTaskDeferral(std::nullptr_t) noexcept {}
};

struct BackgroundTaskProgressEventArgs :
	Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs
{
	BackgroundTaskProgressEventArgs(std::nullptr_t) noexcept {}
};

struct BackgroundTaskCompletedEventArgs :
	Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs
{
	BackgroundTaskCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct BackgroundTaskBuilder :
	Windows::ApplicationModel::Background::IBackgroundTaskBuilder,
	Requires<BackgroundTaskBuilder, Windows::ApplicationModel::Background::IBackgroundTaskBuilder2>
{
	BackgroundTaskBuilder(std::nullptr_t) noexcept {}
	BackgroundTaskBuilder();
};

struct BackgroundWorkCost
{
	BackgroundWorkCost() = delete;
	static Windows::ApplicationModel::Background::BackgroundWorkCostValue CurrentBackgroundWorkCost();
};

struct SystemTrigger :
	Windows::ApplicationModel::Background::ISystemTrigger
{
	SystemTrigger(std::nullptr_t) noexcept {}
	SystemTrigger(Windows::ApplicationModel::Background::SystemTriggerType triggerType, bool oneShot);
};

struct SystemCondition :
	Windows::ApplicationModel::Background::ISystemCondition
{
	SystemCondition(std::nullptr_t) noexcept {}
	SystemCondition(Windows::ApplicationModel::Background::SystemConditionType conditionType);
};

struct NetworkOperatorNotificationTrigger :
	Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger
{
	NetworkOperatorNotificationTrigger(std::nullptr_t) noexcept {}
	NetworkOperatorNotificationTrigger(String const & networkAccountId);
	template <unsigned S0> NetworkOperatorNotificationTrigger(wchar_t const (&networkAccountId)[S0]);
};

struct TimeTrigger :
	Windows::ApplicationModel::Background::ITimeTrigger
{
	TimeTrigger(std::nullptr_t) noexcept {}
	TimeTrigger(unsigned freshnessTime, bool oneShot);
};

struct MaintenanceTrigger :
	Windows::ApplicationModel::Background::IMaintenanceTrigger
{
	MaintenanceTrigger(std::nullptr_t) noexcept {}
	MaintenanceTrigger(unsigned freshnessTime, bool oneShot);
};

struct DeviceUseTrigger :
	Windows::ApplicationModel::Background::IDeviceUseTrigger
{
	DeviceUseTrigger(std::nullptr_t) noexcept {}
	DeviceUseTrigger();
};

struct DeviceServicingTrigger :
	Windows::ApplicationModel::Background::IDeviceServicingTrigger
{
	DeviceServicingTrigger(std::nullptr_t) noexcept {}
	DeviceServicingTrigger();
};

struct LocationTrigger :
	Windows::ApplicationModel::Background::ILocationTrigger
{
	LocationTrigger(std::nullptr_t) noexcept {}
	LocationTrigger(Windows::ApplicationModel::Background::LocationTriggerType triggerType);
};

struct NetworkOperatorHotspotAuthenticationTrigger :
	Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger
{
	NetworkOperatorHotspotAuthenticationTrigger(std::nullptr_t) noexcept {}
	NetworkOperatorHotspotAuthenticationTrigger();
};

struct PushNotificationTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	PushNotificationTrigger(std::nullptr_t) noexcept {}
	PushNotificationTrigger();
	PushNotificationTrigger(String const & applicationId);
	template <unsigned S0> PushNotificationTrigger(wchar_t const (&applicationId)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

struct LockScreenCallEndCallDeferral :
	Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral
{
	LockScreenCallEndCallDeferral(std::nullptr_t) noexcept {}
};

struct LockScreenCallUI :
	Windows::ApplicationModel::Calls::ILockScreenCallUI
{
	LockScreenCallUI(std::nullptr_t) noexcept {}
};

struct LockScreenCallEndRequestedEventArgs :
	Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs
{
	LockScreenCallEndRequestedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

struct ContactCardDelayedDataLoader :
	Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader
{
	ContactCardDelayedDataLoader(std::nullptr_t) noexcept {}
};

struct ContactManager
{
	ContactManager() = delete;
	static void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection);
	static void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
};

struct ContactLaunchActionVerbs
{
	ContactLaunchActionVerbs() = delete;
	static String Call();
	static String Message();
	static String Map();
	static String Post();
	static String VideoCall();
};

struct Contact :
	Windows::ApplicationModel::Contacts::IContact,
	Requires<Contact, Windows::ApplicationModel::Contacts::IContact2, Windows::ApplicationModel::Contacts::IContactName>
{
	Contact(std::nullptr_t) noexcept {}
	Contact();
};

struct ContactPicker :
	Windows::ApplicationModel::Contacts::IContactPicker,
	Requires<ContactPicker, Windows::ApplicationModel::Contacts::IContactPicker2>
{
	ContactPicker(std::nullptr_t) noexcept {}
	ContactPicker();
};

struct ContactSignificantOther :
	Windows::ApplicationModel::Contacts::IContactSignificantOther
{
	ContactSignificantOther(std::nullptr_t) noexcept {}
	ContactSignificantOther();
};

struct ContactWebsite :
	Windows::ApplicationModel::Contacts::IContactWebsite
{
	ContactWebsite(std::nullptr_t) noexcept {}
	ContactWebsite();
};

struct ContactEmail :
	Windows::ApplicationModel::Contacts::IContactEmail
{
	ContactEmail(std::nullptr_t) noexcept {}
	ContactEmail();
};

struct ContactPhone :
	Windows::ApplicationModel::Contacts::IContactPhone
{
	ContactPhone(std::nullptr_t) noexcept {}
	ContactPhone();
};

struct ContactAddress :
	Windows::ApplicationModel::Contacts::IContactAddress
{
	ContactAddress(std::nullptr_t) noexcept {}
	ContactAddress();
};

struct ContactConnectedServiceAccount :
	Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount
{
	ContactConnectedServiceAccount(std::nullptr_t) noexcept {}
	ContactConnectedServiceAccount();
};

struct ContactDate :
	Windows::ApplicationModel::Contacts::IContactDate
{
	ContactDate(std::nullptr_t) noexcept {}
	ContactDate();
};

struct ContactJobInfo :
	Windows::ApplicationModel::Contacts::IContactJobInfo
{
	ContactJobInfo(std::nullptr_t) noexcept {}
	ContactJobInfo();
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

struct ContactRemovedEventArgs :
	Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs
{
	ContactRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactPickerUI :
	Windows::ApplicationModel::Contacts::Provider::IContactPickerUI,
	Requires<ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2>
{
	ContactPickerUI(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

struct CoreApplication
{
	CoreApplication() = delete;
	static EventRegistrationToken UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken UnhandledErrorDetected(F handler);
	static void UnhandledErrorDetected(EventRegistrationToken token);
	static Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> Views();
	static Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(String const & runtimeType, String const & entryPoint);
	template <unsigned S0, unsigned S1> static Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(wchar_t const (&runtimeType)[S0], wchar_t const (&entryPoint)[S1]);
	static Windows::ApplicationModel::Core::CoreApplicationView MainView();
	static String Id();
	static EventRegistrationToken Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler);
	template <typename F> static EventRegistrationToken Suspending(F handler);
	static void Suspending(EventRegistrationToken token);
	static EventRegistrationToken Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static EventRegistrationToken Resuming(F handler);
	static void Resuming(EventRegistrationToken token);
	static Windows::Foundation::Collections::IPropertySet Properties();
	static Windows::ApplicationModel::Core::CoreApplicationView GetCurrentView();
	static void Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource);
	static void RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback);
	static Windows::ApplicationModel::Core::CoreApplicationView CreateNewView();
	static void Exit();
	static EventRegistrationToken Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static EventRegistrationToken Exiting(F handler);
	static void Exiting(EventRegistrationToken token);
	static void IncrementApplicationUseCount();
	static void DecrementApplicationUseCount();
};

struct CoreApplicationView :
	Windows::ApplicationModel::Core::ICoreApplicationView,
	Requires<CoreApplicationView, Windows::ApplicationModel::Core::ICoreApplicationView2>
{
	CoreApplicationView(std::nullptr_t) noexcept {}
};

struct UnhandledErrorDetectedEventArgs :
	Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs
{
	UnhandledErrorDetectedEventArgs(std::nullptr_t) noexcept {}
};

struct UnhandledError :
	Windows::ApplicationModel::Core::IUnhandledError
{
	UnhandledError(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

struct StandardDataFormats
{
	StandardDataFormats() = delete;
	static String Text();
	static String Html();
	static String Rtf();
	static String Bitmap();
	static String StorageItems();
	static String WebLink();
	static String ApplicationLink();
};

struct DataPackagePropertySetView :
	Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView,
	Requires<DataPackagePropertySetView, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2>
{
	DataPackagePropertySetView(std::nullptr_t) noexcept {}
};

struct DataPackagePropertySet :
	Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet,
	Requires<DataPackagePropertySet, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2>
{
	DataPackagePropertySet(std::nullptr_t) noexcept {}
};

struct DataProviderDeferral :
	Windows::ApplicationModel::DataTransfer::IDataProviderDeferral
{
	DataProviderDeferral(std::nullptr_t) noexcept {}
};

struct DataProviderRequest :
	Windows::ApplicationModel::DataTransfer::IDataProviderRequest
{
	DataProviderRequest(std::nullptr_t) noexcept {}
};

struct OperationCompletedEventArgs :
	Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs
{
	OperationCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct DataPackageView :
	Windows::ApplicationModel::DataTransfer::IDataPackageView,
	Requires<DataPackageView, Windows::ApplicationModel::DataTransfer::IDataPackageView2>
{
	DataPackageView(std::nullptr_t) noexcept {}
};

struct DataPackage :
	Windows::ApplicationModel::DataTransfer::IDataPackage,
	Requires<DataPackage, Windows::ApplicationModel::DataTransfer::IDataPackage2>
{
	DataPackage(std::nullptr_t) noexcept {}
	DataPackage();
};

struct HtmlFormatHelper
{
	HtmlFormatHelper() = delete;
	static String GetStaticFragment(String const & htmlFormat);
	template <unsigned S0> static String GetStaticFragment(wchar_t const (&htmlFormat)[S0]);
	static String CreateHtmlFormat(String const & htmlFragment);
	template <unsigned S0> static String CreateHtmlFormat(wchar_t const (&htmlFragment)[S0]);
};

struct Clipboard
{
	Clipboard() = delete;
	static Windows::ApplicationModel::DataTransfer::DataPackageView GetContent();
	static void SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content);
	static void Flush();
	static void Clear();
	static EventRegistrationToken ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler);
	template <typename F> static EventRegistrationToken ContentChanged(F changeHandler);
	static void ContentChanged(EventRegistrationToken token);
};

struct DataRequestDeferral :
	Windows::ApplicationModel::DataTransfer::IDataRequestDeferral
{
	DataRequestDeferral(std::nullptr_t) noexcept {}
};

struct DataRequest :
	Windows::ApplicationModel::DataTransfer::IDataRequest
{
	DataRequest(std::nullptr_t) noexcept {}
};

struct DataRequestedEventArgs :
	Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs
{
	DataRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct TargetApplicationChosenEventArgs :
	Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs
{
	TargetApplicationChosenEventArgs(std::nullptr_t) noexcept {}
};

struct DataTransferManager :
	Windows::ApplicationModel::DataTransfer::IDataTransferManager
{
	DataTransferManager(std::nullptr_t) noexcept {}
	static void ShowShareUI();
	static Windows::ApplicationModel::DataTransfer::DataTransferManager GetForCurrentView();
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

struct QuickLink :
	Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink
{
	QuickLink(std::nullptr_t) noexcept {}
	QuickLink();
};

struct ShareOperation :
	Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation,
	Requires<ShareOperation, Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2>
{
	ShareOperation(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

struct ResourceLoader :
	Windows::ApplicationModel::Resources::IResourceLoader,
	Requires<ResourceLoader, Windows::ApplicationModel::Resources::IResourceLoader2>
{
	ResourceLoader(std::nullptr_t) noexcept {}
	ResourceLoader();
	static Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView();
	static Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView(String const & name);
	template <unsigned S0> static Windows::ApplicationModel::Resources::ResourceLoader GetForCurrentView(wchar_t const (&name)[S0]);
	static Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse();
	static Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse(String const & name);
	template <unsigned S0> static Windows::ApplicationModel::Resources::ResourceLoader GetForViewIndependentUse(wchar_t const (&name)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

struct ResourceMap :
	Windows::ApplicationModel::Resources::Core::IResourceMap
{
	ResourceMap(std::nullptr_t) noexcept {}
};

struct ResourceContext :
	Windows::ApplicationModel::Resources::Core::IResourceContext
{
	ResourceContext(std::nullptr_t) noexcept {}
	ResourceContext();
	static Windows::ApplicationModel::Resources::Core::ResourceContext GetForCurrentView();
	static void SetGlobalQualifierValue(String const & key, String const & value);
	template <unsigned S0, unsigned S1> static void SetGlobalQualifierValue(wchar_t const (&key)[S0], wchar_t const (&value)[S1]);
	static void ResetGlobalQualifierValues();
	static void ResetGlobalQualifierValues(Windows::Foundation::Collections::IIterable<String> const & qualifierNames);
	static Windows::ApplicationModel::Resources::Core::ResourceContext GetForViewIndependentUse();
};

struct ResourceManager :
	Windows::ApplicationModel::Resources::Core::IResourceManager
{
	ResourceManager(std::nullptr_t) noexcept {}
	static Windows::ApplicationModel::Resources::Core::ResourceManager Current();
	static bool IsResourceReference(String const & resourceReference);
	template <unsigned S0> static bool IsResourceReference(wchar_t const (&resourceReference)[S0]);
};

struct ResourceQualifier :
	Windows::ApplicationModel::Resources::Core::IResourceQualifier
{
	ResourceQualifier(std::nullptr_t) noexcept {}
};

struct ResourceCandidate :
	Windows::ApplicationModel::Resources::Core::IResourceCandidate
{
	ResourceCandidate(std::nullptr_t) noexcept {}
};

struct NamedResource :
	Windows::ApplicationModel::Resources::Core::INamedResource
{
	NamedResource(std::nullptr_t) noexcept {}
};

struct ResourceMapIterator :
	Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::NamedResource>>
{
	ResourceMapIterator(std::nullptr_t) noexcept {}
};

struct ResourceMapMapView :
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap>
{
	ResourceMapMapView(std::nullptr_t) noexcept {}
};

struct ResourceMapMapViewIterator :
	Windows::Foundation::Collections::IIterator<Windows::Foundation::Collections::IKeyValuePair<String, Windows::ApplicationModel::Resources::Core::ResourceMap>>
{
	ResourceMapMapViewIterator(std::nullptr_t) noexcept {}
};

struct ResourceQualifierObservableMap :
	Windows::Foundation::Collections::IObservableMap<String, String>
{
	ResourceQualifierObservableMap(std::nullptr_t) noexcept {}
};

struct ResourceQualifierMapView :
	Windows::Foundation::Collections::IMapView<String, String>
{
	ResourceQualifierMapView(std::nullptr_t) noexcept {}
};

struct ResourceQualifierVectorView :
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier>
{
	ResourceQualifierVectorView(std::nullptr_t) noexcept {}
};

struct ResourceCandidateVectorView :
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate>
{
	ResourceCandidateVectorView(std::nullptr_t) noexcept {}
};

struct ResourceContextLanguagesVectorView :
	Windows::Foundation::Collections::IVectorView<String>
{
	ResourceContextLanguagesVectorView(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

struct IndexedResourceCandidate :
	Windows::ApplicationModel::Resources::Management::IIndexedResourceCandidate
{
	IndexedResourceCandidate(std::nullptr_t) noexcept {}
};

struct ResourceIndexer :
	Windows::ApplicationModel::Resources::Management::IResourceIndexer
{
	ResourceIndexer(std::nullptr_t) noexcept {}
	ResourceIndexer();
	ResourceIndexer(Windows::Foundation::Uri const & projectRoot);
	ResourceIndexer(Windows::Foundation::Uri const & projectRoot, Windows::Foundation::Uri const & extensionDllPath);
};

struct IndexedResourceQualifier :
	Windows::ApplicationModel::Resources::Management::IIndexedResourceQualifier
{
	IndexedResourceQualifier(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

struct SearchPaneQueryLinguisticDetails :
	Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails
{
	SearchPaneQueryLinguisticDetails(std::nullptr_t) noexcept {}
};

struct SearchPaneVisibilityChangedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs
{
	SearchPaneVisibilityChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchPaneQueryChangedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs
{
	SearchPaneQueryChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchPaneQuerySubmittedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs,
	Requires<SearchPaneQuerySubmittedEventArgs, Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>
{
	SearchPaneQuerySubmittedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchPaneResultSuggestionChosenEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs
{
	SearchPaneResultSuggestionChosenEventArgs(std::nullptr_t) noexcept {}
};

struct SearchSuggestionCollection :
	Windows::ApplicationModel::Search::ISearchSuggestionCollection
{
	SearchSuggestionCollection(std::nullptr_t) noexcept {}
};

struct SearchPaneSuggestionsRequestDeferral :
	Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral
{
	SearchPaneSuggestionsRequestDeferral(std::nullptr_t) noexcept {}
};

struct SearchPaneSuggestionsRequest :
	Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest
{
	SearchPaneSuggestionsRequest(std::nullptr_t) noexcept {}
};

struct SearchPaneSuggestionsRequestedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs
{
	SearchPaneSuggestionsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct LocalContentSuggestionSettings :
	Windows::ApplicationModel::Search::ILocalContentSuggestionSettings
{
	LocalContentSuggestionSettings(std::nullptr_t) noexcept {}
	LocalContentSuggestionSettings();
};

struct SearchPane :
	Windows::ApplicationModel::Search::ISearchPane
{
	SearchPane(std::nullptr_t) noexcept {}
	static void HideThisApplication();
	static Windows::ApplicationModel::Search::SearchPane GetForCurrentView();
};

struct SearchQueryLinguisticDetails :
	Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails
{
	SearchQueryLinguisticDetails(std::nullptr_t) noexcept {}
	SearchQueryLinguisticDetails(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned queryTextCompositionStart, unsigned queryTextCompositionLength);
};

struct SearchSuggestionsRequestDeferral :
	Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral
{
	SearchSuggestionsRequestDeferral(std::nullptr_t) noexcept {}
};

struct SearchSuggestionsRequest :
	Windows::ApplicationModel::Search::ISearchSuggestionsRequest
{
	SearchSuggestionsRequest(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

struct LicenseInformation :
	Windows::ApplicationModel::Store::ILicenseInformation
{
	LicenseInformation(std::nullptr_t) noexcept {}
};

struct ListingInformation :
	Windows::ApplicationModel::Store::IListingInformation
{
	ListingInformation(std::nullptr_t) noexcept {}
};

struct PurchaseResults :
	Windows::ApplicationModel::Store::IPurchaseResults
{
	PurchaseResults(std::nullptr_t) noexcept {}
};

struct ProductPurchaseDisplayProperties :
	Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties
{
	ProductPurchaseDisplayProperties(std::nullptr_t) noexcept {}
	ProductPurchaseDisplayProperties();
	ProductPurchaseDisplayProperties(String const & name);
	template <unsigned S0> ProductPurchaseDisplayProperties(wchar_t const (&name)[S0]);
};

struct UnfulfilledConsumable :
	Windows::ApplicationModel::Store::IUnfulfilledConsumable
{
	UnfulfilledConsumable(std::nullptr_t) noexcept {}
};

struct ProductLicense :
	Windows::ApplicationModel::Store::IProductLicense
{
	ProductLicense(std::nullptr_t) noexcept {}
};

struct ProductListing :
	Windows::ApplicationModel::Store::IProductListing,
	Requires<ProductListing, Windows::ApplicationModel::Store::IProductListingWithConsumables>
{
	ProductListing(std::nullptr_t) noexcept {}
};

struct CurrentApp
{
	CurrentApp() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(String const & productId, GUID transactionId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID transactionId);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> GetUnfulfilledConsumablesAsync();
	static Windows::ApplicationModel::Store::LicenseInformation LicenseInformation();
	static Windows::Foundation::Uri LinkUri();
	static GUID AppId();
	static Windows::Foundation::IAsyncOperation<String> RequestAppPurchaseAsync(bool includeReceipt);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> LoadListingInformationAsync();
	static Windows::Foundation::IAsyncOperation<String> GetAppReceiptAsync();
	static Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(String const & productId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(wchar_t const (&productId)[S0]);
};

struct CurrentAppSimulator
{
	CurrentAppSimulator() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(String const & productId, GUID transactionId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID transactionId);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> GetUnfulfilledConsumablesAsync();
	static Windows::ApplicationModel::Store::LicenseInformation LicenseInformation();
	static Windows::Foundation::Uri LinkUri();
	static GUID AppId();
	static Windows::Foundation::IAsyncOperation<String> RequestAppPurchaseAsync(bool includeReceipt);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> LoadListingInformationAsync();
	static Windows::Foundation::IAsyncOperation<String> GetAppReceiptAsync();
	static Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(String const & productId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> GetProductReceiptAsync(wchar_t const (&productId)[S0]);
	static Windows::Foundation::IAsyncAction ReloadSimulatorAsync(Windows::Storage::StorageFile const & simulatorSettingsFile);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

struct HtmlUtilities
{
	HtmlUtilities() = delete;
	static String ConvertToText(String const & html);
	template <unsigned S0> static String ConvertToText(wchar_t const (&html)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

struct JsonArray :
	Windows::Data::Json::IJsonArray,
	Requires<JsonArray, Windows::Foundation::Collections::IVector<Windows::Data::Json::IJsonValue>, Windows::Foundation::Collections::IIterable<Windows::Data::Json::IJsonValue>>
{
	JsonArray(std::nullptr_t) noexcept {}
	JsonArray();
	static Windows::Data::Json::JsonArray Parse(String const & input);
	template <unsigned S0> static Windows::Data::Json::JsonArray Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Data::Json::JsonArray & result);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonArray & result);
};

struct JsonObject :
	Windows::Data::Json::IJsonObject,
	Requires<JsonObject, Windows::Data::Json::IJsonObjectWithDefaultValues, Windows::Foundation::Collections::IMap<String, Windows::Data::Json::IJsonValue>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Data::Json::IJsonValue>>>
{
	JsonObject(std::nullptr_t) noexcept {}
	JsonObject();
	using impl_IJsonObject::GetNamedValue;
	using impl_IJsonObject::GetNamedObject;
	using impl_IJsonObject::GetNamedArray;
	using impl_IJsonObject::GetNamedString;
	using impl_IJsonObject::GetNamedNumber;
	using impl_IJsonObject::GetNamedBoolean;
	using impl_IJsonObjectWithDefaultValues::GetNamedValue;
	using impl_IJsonObjectWithDefaultValues::GetNamedObject;
	using impl_IJsonObjectWithDefaultValues::GetNamedString;
	using impl_IJsonObjectWithDefaultValues::GetNamedArray;
	using impl_IJsonObjectWithDefaultValues::GetNamedNumber;
	using impl_IJsonObjectWithDefaultValues::GetNamedBoolean;
	static Windows::Data::Json::JsonObject Parse(String const & input);
	template <unsigned S0> static Windows::Data::Json::JsonObject Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Data::Json::JsonObject & result);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonObject & result);
};

struct JsonValue :
	Windows::Data::Json::IJsonValue
{
	JsonValue(std::nullptr_t) noexcept {}
	static Windows::Data::Json::JsonValue Parse(String const & input);
	template <unsigned S0> static Windows::Data::Json::JsonValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Data::Json::JsonValue & result);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonValue & result);
	static Windows::Data::Json::JsonValue CreateBooleanValue(bool input);
	static Windows::Data::Json::JsonValue CreateNumberValue(double input);
	static Windows::Data::Json::JsonValue CreateStringValue(String const & input);
	template <unsigned S0> static Windows::Data::Json::JsonValue CreateStringValue(wchar_t const (&input)[S0]);
};

struct JsonError
{
	JsonError() = delete;
	static Windows::Data::Json::JsonErrorStatus GetJsonStatus(int hresult);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

struct PdfPageRenderOptions :
	Windows::Data::Pdf::IPdfPageRenderOptions
{
	PdfPageRenderOptions(std::nullptr_t) noexcept {}
	PdfPageRenderOptions();
};

struct PdfPageDimensions :
	Windows::Data::Pdf::IPdfPageDimensions
{
	PdfPageDimensions(std::nullptr_t) noexcept {}
};

struct PdfPage :
	Windows::Data::Pdf::IPdfPage
{
	PdfPage(std::nullptr_t) noexcept {}
};

struct PdfDocument :
	Windows::Data::Pdf::IPdfDocument
{
	PdfDocument(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, String const & password);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&password)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, String const & password);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, wchar_t const (&password)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

struct SemanticTextQuery :
	Windows::Data::Text::ISemanticTextQuery
{
	SemanticTextQuery(std::nullptr_t) noexcept {}
	SemanticTextQuery(String const & aqsFilter);
	template <unsigned S0> SemanticTextQuery(wchar_t const (&aqsFilter)[S0]);
	SemanticTextQuery(String const & aqsFilter, String const & filterLanguage);
	template <unsigned S0, unsigned S1> SemanticTextQuery(wchar_t const (&aqsFilter)[S0], wchar_t const (&filterLanguage)[S1]);
};

struct UnicodeCharacters
{
	UnicodeCharacters() = delete;
	static unsigned GetCodepointFromSurrogatePair(unsigned highSurrogate, unsigned lowSurrogate);
	static void GetSurrogatePairFromCodepoint(unsigned codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate);
	static bool IsHighSurrogate(unsigned codepoint);
	static bool IsLowSurrogate(unsigned codepoint);
	static bool IsSupplementary(unsigned codepoint);
	static bool IsNoncharacter(unsigned codepoint);
	static bool IsWhitespace(unsigned codepoint);
	static bool IsAlphabetic(unsigned codepoint);
	static bool IsCased(unsigned codepoint);
	static bool IsUppercase(unsigned codepoint);
	static bool IsLowercase(unsigned codepoint);
	static bool IsIdStart(unsigned codepoint);
	static bool IsIdContinue(unsigned codepoint);
	static bool IsGraphemeBase(unsigned codepoint);
	static bool IsGraphemeExtend(unsigned codepoint);
	static Windows::Data::Text::UnicodeNumericType GetNumericType(unsigned codepoint);
	static Windows::Data::Text::UnicodeGeneralCategory GetGeneralCategory(unsigned codepoint);
};

struct AlternateWordForm :
	Windows::Data::Text::IAlternateWordForm
{
	AlternateWordForm(std::nullptr_t) noexcept {}
};

struct WordSegment :
	Windows::Data::Text::IWordSegment
{
	WordSegment(std::nullptr_t) noexcept {}
};

struct WordsSegmenter :
	Windows::Data::Text::IWordsSegmenter
{
	WordsSegmenter(std::nullptr_t) noexcept {}
	WordsSegmenter(String const & language);
	template <unsigned S0> WordsSegmenter(wchar_t const (&language)[S0]);
};

struct SelectableWordSegment :
	Windows::Data::Text::ISelectableWordSegment
{
	SelectableWordSegment(std::nullptr_t) noexcept {}
};

struct SelectableWordsSegmenter :
	Windows::Data::Text::ISelectableWordsSegmenter
{
	SelectableWordsSegmenter(std::nullptr_t) noexcept {}
	SelectableWordsSegmenter(String const & language);
	template <unsigned S0> SelectableWordsSegmenter(wchar_t const (&language)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

struct XmlNodeList :
	Windows::Data::Xml::Dom::IXmlNodeList
{
	XmlNodeList(std::nullptr_t) noexcept {}
};

struct XmlNamedNodeMap :
	Windows::Data::Xml::Dom::IXmlNamedNodeMap
{
	XmlNamedNodeMap(std::nullptr_t) noexcept {}
};

struct XmlDocument :
	Windows::Data::Xml::Dom::IXmlDocument,
	Requires<XmlDocument, Windows::Data::Xml::Dom::IXmlDocumentIO>
{
	XmlDocument(std::nullptr_t) noexcept {}
	XmlDocument();
	static Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromUriAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> LoadFromFileAsync(Windows::Storage::IStorageFile const & file, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings);
};

struct XmlAttribute :
	Windows::Data::Xml::Dom::IXmlAttribute
{
	XmlAttribute(std::nullptr_t) noexcept {}
};

struct XmlDocumentType :
	Windows::Data::Xml::Dom::IXmlDocumentType
{
	XmlDocumentType(std::nullptr_t) noexcept {}
};

struct XmlDomImplementation :
	Windows::Data::Xml::Dom::IXmlDomImplementation
{
	XmlDomImplementation(std::nullptr_t) noexcept {}
};

struct XmlElement :
	Windows::Data::Xml::Dom::IXmlElement
{
	XmlElement(std::nullptr_t) noexcept {}
};

struct XmlDocumentFragment :
	Windows::Data::Xml::Dom::IXmlDocumentFragment
{
	XmlDocumentFragment(std::nullptr_t) noexcept {}
};

struct XmlText :
	Windows::Data::Xml::Dom::IXmlText
{
	XmlText(std::nullptr_t) noexcept {}
};

struct XmlComment :
	Windows::Data::Xml::Dom::IXmlComment
{
	XmlComment(std::nullptr_t) noexcept {}
};

struct XmlProcessingInstruction :
	Windows::Data::Xml::Dom::IXmlProcessingInstruction
{
	XmlProcessingInstruction(std::nullptr_t) noexcept {}
};

struct XmlEntityReference :
	Windows::Data::Xml::Dom::IXmlEntityReference
{
	XmlEntityReference(std::nullptr_t) noexcept {}
};

struct XmlCDataSection :
	Windows::Data::Xml::Dom::IXmlCDataSection
{
	XmlCDataSection(std::nullptr_t) noexcept {}
};

struct XmlLoadSettings :
	Windows::Data::Xml::Dom::IXmlLoadSettings
{
	XmlLoadSettings(std::nullptr_t) noexcept {}
	XmlLoadSettings();
};

struct DtdNotation :
	Windows::Data::Xml::Dom::IDtdNotation
{
	DtdNotation(std::nullptr_t) noexcept {}
};

struct DtdEntity :
	Windows::Data::Xml::Dom::IDtdEntity
{
	DtdEntity(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

struct XsltProcessor :
	Windows::Data::Xml::Xsl::IXsltProcessor
{
	XsltProcessor(std::nullptr_t) noexcept {}
	XsltProcessor(Windows::Data::Xml::Dom::XmlDocument const & document);
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

struct DeviceUseDetails :
	Windows::Devices::Background::IDeviceUseDetails
{
	DeviceUseDetails(std::nullptr_t) noexcept {}
};

struct DeviceServicingDetails :
	Windows::Devices::Background::IDeviceServicingDetails
{
	DeviceServicingDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

struct KnownDeviceTypes
{
	KnownDeviceTypes() = delete;
	static unsigned short Unknown();
};

struct IOControlCode :
	Windows::Devices::Custom::IIOControlCode
{
	IOControlCode(std::nullptr_t) noexcept {}
	IOControlCode(unsigned short deviceType, unsigned short function, Windows::Devices::Custom::IOControlAccessMode accessMode, Windows::Devices::Custom::IOControlBufferingMethod bufferingMethod);
};

struct CustomDevice :
	Windows::Devices::Custom::ICustomDevice
{
	CustomDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector(GUID classGuid);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> FromIdAsync(String const & deviceId, Windows::Devices::Custom::DeviceAccessMode desiredAccess, Windows::Devices::Custom::DeviceSharingMode sharingMode);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Devices::Custom::DeviceAccessMode desiredAccess, Windows::Devices::Custom::DeviceSharingMode sharingMode);
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

struct DeviceThumbnail :
	Windows::Storage::Streams::IRandomAccessStreamWithContentType
{
	DeviceThumbnail(std::nullptr_t) noexcept {}
};

struct EnclosureLocation :
	Windows::Devices::Enumeration::IEnclosureLocation
{
	EnclosureLocation(std::nullptr_t) noexcept {}
};

struct DeviceInformationUpdate :
	Windows::Devices::Enumeration::IDeviceInformationUpdate
{
	DeviceInformationUpdate(std::nullptr_t) noexcept {}
};

struct DeviceInformationCollection :
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceInformation>
{
	DeviceInformationCollection(std::nullptr_t) noexcept {}
};

struct DeviceWatcher :
	Windows::Devices::Enumeration::IDeviceWatcher
{
	DeviceWatcher(std::nullptr_t) noexcept {}
};

struct DeviceInformation :
	Windows::Devices::Enumeration::IDeviceInformation
{
	DeviceInformation(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(wchar_t const (&deviceId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(String const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(Windows::Devices::Enumeration::DeviceClass deviceClass);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(String const & aqsFilter);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(wchar_t const (&aqsFilter)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher();
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(Windows::Devices::Enumeration::DeviceClass deviceClass);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(String const & aqsFilter);
	template <unsigned S0> static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(wchar_t const (&aqsFilter)[S0]);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
	template <unsigned S0> static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties);
};

struct DeviceAccessChangedEventArgs :
	Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs
{
	DeviceAccessChangedEventArgs(std::nullptr_t) noexcept {}
};

struct DeviceAccessInformation :
	Windows::Devices::Enumeration::IDeviceAccessInformation
{
	DeviceAccessInformation(std::nullptr_t) noexcept {}
	static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(String const & deviceId);
	template <unsigned S0> static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(wchar_t const (&deviceId)[S0]);
	static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClassId(GUID deviceClassId);
	static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass deviceClass);
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

struct PnpObjectUpdate :
	Windows::Devices::Enumeration::Pnp::IPnpObjectUpdate
{
	PnpObjectUpdate(std::nullptr_t) noexcept {}
};

struct PnpObjectCollection :
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::Pnp::PnpObject>
{
	PnpObjectCollection(std::nullptr_t) noexcept {}
};

struct PnpObjectWatcher :
	Windows::Devices::Enumeration::Pnp::IPnpObjectWatcher
{
	PnpObjectWatcher(std::nullptr_t) noexcept {}
};

struct PnpObject :
	Windows::Devices::Enumeration::Pnp::IPnpObject
{
	PnpObject(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, String const & id, Windows::Foundation::Collections::IIterable<String> const & requestedProperties);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, wchar_t const (&id)[S0], Windows::Foundation::Collections::IIterable<String> const & requestedProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]);
	static Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties);
	static Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter);
	template <unsigned S0> static Windows::Devices::Enumeration::Pnp::PnpObjectWatcher CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]);
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

struct Geopoint :
	Windows::Devices::Geolocation::IGeopoint
{
	Geopoint(std::nullptr_t) noexcept {}
	Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position);
	Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem);
	Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId);
};

struct GeocoordinateSatelliteData :
	Windows::Devices::Geolocation::IGeocoordinateSatelliteData
{
	GeocoordinateSatelliteData(std::nullptr_t) noexcept {}
};

struct Geocoordinate :
	Windows::Devices::Geolocation::IGeocoordinate,
	Requires<Geocoordinate, Windows::Devices::Geolocation::IGeocoordinateWithPositionData, Windows::Devices::Geolocation::IGeocoordinateWithPoint>
{
	Geocoordinate(std::nullptr_t) noexcept {}
};

struct CivicAddress :
	Windows::Devices::Geolocation::ICivicAddress
{
	CivicAddress(std::nullptr_t) noexcept {}
};

struct Geoposition :
	Windows::Devices::Geolocation::IGeoposition
{
	Geoposition(std::nullptr_t) noexcept {}
};

struct PositionChangedEventArgs :
	Windows::Devices::Geolocation::IPositionChangedEventArgs
{
	PositionChangedEventArgs(std::nullptr_t) noexcept {}
};

struct StatusChangedEventArgs :
	Windows::Devices::Geolocation::IStatusChangedEventArgs
{
	StatusChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Geolocator :
	Windows::Devices::Geolocation::IGeolocator,
	Requires<Geolocator, Windows::Devices::Geolocation::IGeolocatorWithScalarAccuracy>
{
	Geolocator(std::nullptr_t) noexcept {}
	Geolocator();
};

struct Geocircle :
	Windows::Devices::Geolocation::IGeocircle
{
	Geocircle(std::nullptr_t) noexcept {}
	Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius);
	Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem);
	Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId);
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

struct Geofence :
	Windows::Devices::Geolocation::Geofencing::IGeofence
{
	Geofence(std::nullptr_t) noexcept {}
	Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape);
	template <unsigned S0> Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape);
	Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse);
	template <unsigned S0> Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse);
	Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime);
	template <unsigned S0> Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime);
	Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration);
	template <unsigned S0> Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates monitoredStates, bool singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration);
};

struct GeofenceMonitor :
	Windows::Devices::Geolocation::Geofencing::IGeofenceMonitor
{
	GeofenceMonitor(std::nullptr_t) noexcept {}
	static Windows::Devices::Geolocation::Geofencing::GeofenceMonitor Current();
};

struct GeofenceStateChangeReport :
	Windows::Devices::Geolocation::Geofencing::IGeofenceStateChangeReport
{
	GeofenceStateChangeReport(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

struct HidDevice :
	Windows::Devices::HumanInterfaceDevice::IHidDevice
{
	HidDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector(unsigned short usagePage, unsigned short usageId);
	static String GetDeviceSelector(unsigned short usagePage, unsigned short usageId, unsigned short vendorId, unsigned short productId);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> FromIdAsync(String const & deviceId, Windows::Storage::FileAccessMode accessMode);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Storage::FileAccessMode accessMode);
};

struct HidInputReport :
	Windows::Devices::HumanInterfaceDevice::IHidInputReport
{
	HidInputReport(std::nullptr_t) noexcept {}
};

struct HidFeatureReport :
	Windows::Devices::HumanInterfaceDevice::IHidFeatureReport
{
	HidFeatureReport(std::nullptr_t) noexcept {}
};

struct HidOutputReport :
	Windows::Devices::HumanInterfaceDevice::IHidOutputReport
{
	HidOutputReport(std::nullptr_t) noexcept {}
};

struct HidBooleanControlDescription :
	Windows::Devices::HumanInterfaceDevice::IHidBooleanControlDescription
{
	HidBooleanControlDescription(std::nullptr_t) noexcept {}
};

struct HidNumericControlDescription :
	Windows::Devices::HumanInterfaceDevice::IHidNumericControlDescription
{
	HidNumericControlDescription(std::nullptr_t) noexcept {}
};

struct HidInputReportReceivedEventArgs :
	Windows::Devices::HumanInterfaceDevice::IHidInputReportReceivedEventArgs
{
	HidInputReportReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct HidCollection :
	Windows::Devices::HumanInterfaceDevice::IHidCollection
{
	HidCollection(std::nullptr_t) noexcept {}
};

struct HidBooleanControl :
	Windows::Devices::HumanInterfaceDevice::IHidBooleanControl
{
	HidBooleanControl(std::nullptr_t) noexcept {}
};

struct HidNumericControl :
	Windows::Devices::HumanInterfaceDevice::IHidNumericControl
{
	HidNumericControl(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

struct PointerDevice :
	Windows::Devices::Input::IPointerDevice
{
	PointerDevice(std::nullptr_t) noexcept {}
	static Windows::Devices::Input::PointerDevice GetPointerDevice(unsigned pointerId);
	static Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> GetPointerDevices();
};

struct MouseDevice :
	Windows::Devices::Input::IMouseDevice
{
	MouseDevice(std::nullptr_t) noexcept {}
	static Windows::Devices::Input::MouseDevice GetForCurrentView();
};

struct MouseEventArgs :
	Windows::Devices::Input::IMouseEventArgs
{
	MouseEventArgs(std::nullptr_t) noexcept {}
};

struct MouseCapabilities :
	Windows::Devices::Input::IMouseCapabilities
{
	MouseCapabilities(std::nullptr_t) noexcept {}
	MouseCapabilities();
};

struct KeyboardCapabilities :
	Windows::Devices::Input::IKeyboardCapabilities
{
	KeyboardCapabilities(std::nullptr_t) noexcept {}
	KeyboardCapabilities();
};

struct TouchCapabilities :
	Windows::Devices::Input::ITouchCapabilities
{
	TouchCapabilities(std::nullptr_t) noexcept {}
	TouchCapabilities();
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

struct UnifiedPosErrorData :
	Windows::Devices::PointOfService::IUnifiedPosErrorData
{
	UnifiedPosErrorData(std::nullptr_t) noexcept {}
};

struct BarcodeScannerStatusUpdatedEventArgs :
	Windows::Devices::PointOfService::IBarcodeScannerStatusUpdatedEventArgs
{
	BarcodeScannerStatusUpdatedEventArgs(std::nullptr_t) noexcept {}
};

struct BarcodeSymbologies
{
	BarcodeSymbologies() = delete;
	static unsigned Unknown();
	static unsigned Ean8();
	static unsigned Ean8Add2();
	static unsigned Ean8Add5();
	static unsigned Eanv();
	static unsigned EanvAdd2();
	static unsigned EanvAdd5();
	static unsigned Ean13();
	static unsigned Ean13Add2();
	static unsigned Ean13Add5();
	static unsigned Isbn();
	static unsigned IsbnAdd5();
	static unsigned Ismn();
	static unsigned IsmnAdd2();
	static unsigned IsmnAdd5();
	static unsigned Issn();
	static unsigned IssnAdd2();
	static unsigned IssnAdd5();
	static unsigned Ean99();
	static unsigned Ean99Add2();
	static unsigned Ean99Add5();
	static unsigned Upca();
	static unsigned UpcaAdd2();
	static unsigned UpcaAdd5();
	static unsigned Upce();
	static unsigned UpceAdd2();
	static unsigned UpceAdd5();
	static unsigned UpcCoupon();
	static unsigned TfStd();
	static unsigned TfDis();
	static unsigned TfInt();
	static unsigned TfInd();
	static unsigned TfMat();
	static unsigned TfIata();
	static unsigned Gs1DatabarType1();
	static unsigned Gs1DatabarType2();
	static unsigned Gs1DatabarType3();
	static unsigned Code39();
	static unsigned Code39Ex();
	static unsigned Trioptic39();
	static unsigned Code32();
	static unsigned Pzn();
	static unsigned Code93();
	static unsigned Code93Ex();
	static unsigned Code128();
	static unsigned Gs1128();
	static unsigned Gs1128Coupon();
	static unsigned UccEan128();
	static unsigned Sisac();
	static unsigned Isbt();
	static unsigned Codabar();
	static unsigned Code11();
	static unsigned Msi();
	static unsigned Plessey();
	static unsigned Telepen();
	static unsigned Code16k();
	static unsigned CodablockA();
	static unsigned CodablockF();
	static unsigned Codablock128();
	static unsigned Code49();
	static unsigned Aztec();
	static unsigned DataCode();
	static unsigned DataMatrix();
	static unsigned HanXin();
	static unsigned Maxicode();
	static unsigned MicroPdf417();
	static unsigned MicroQr();
	static unsigned Pdf417();
	static unsigned Qr();
	static unsigned MsTag();
	static unsigned Ccab();
	static unsigned Ccc();
	static unsigned Tlc39();
	static unsigned AusPost();
	static unsigned CanPost();
	static unsigned ChinaPost();
	static unsigned DutchKix();
	static unsigned InfoMail();
	static unsigned ItalianPost25();
	static unsigned ItalianPost39();
	static unsigned JapanPost();
	static unsigned KoreanPost();
	static unsigned SwedenPost();
	static unsigned UkPost();
	static unsigned UsIntelligent();
	static unsigned UsIntelligentPkg();
	static unsigned UsPlanet();
	static unsigned UsPostNet();
	static unsigned Us4StateFics();
	static unsigned OcrA();
	static unsigned OcrB();
	static unsigned Micr();
	static unsigned ExtendedBase();
	static String GetName(unsigned scanDataType);
};

struct BarcodeScannerReport :
	Windows::Devices::PointOfService::IBarcodeScannerReport
{
	BarcodeScannerReport(std::nullptr_t) noexcept {}
};

struct BarcodeScannerDataReceivedEventArgs :
	Windows::Devices::PointOfService::IBarcodeScannerDataReceivedEventArgs
{
	BarcodeScannerDataReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct BarcodeScannerErrorOccurredEventArgs :
	Windows::Devices::PointOfService::IBarcodeScannerErrorOccurredEventArgs
{
	BarcodeScannerErrorOccurredEventArgs(std::nullptr_t) noexcept {}
};

struct BarcodeScannerImagePreviewReceivedEventArgs :
	Windows::Devices::PointOfService::IBarcodeScannerImagePreviewReceivedEventArgs
{
	BarcodeScannerImagePreviewReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct BarcodeScannerCapabilities :
	Windows::Devices::PointOfService::IBarcodeScannerCapabilities
{
	BarcodeScannerCapabilities(std::nullptr_t) noexcept {}
};

struct BarcodeScanner :
	Windows::Devices::PointOfService::IBarcodeScanner
{
	BarcodeScanner(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> GetDefaultAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> FromIdAsync(wchar_t const (&deviceId)[S0]);
	static String GetDeviceSelector();
};

struct ClaimedBarcodeScanner :
	Windows::Devices::PointOfService::IClaimedBarcodeScanner
{
	ClaimedBarcodeScanner(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderEncryptionAlgorithms
{
	MagneticStripeReaderEncryptionAlgorithms() = delete;
	static unsigned None();
	static unsigned TripleDesDukpt();
	static unsigned ExtendedBase();
};

struct MagneticStripeReaderCardTypes
{
	MagneticStripeReaderCardTypes() = delete;
	static unsigned Unknown();
	static unsigned Bank();
	static unsigned Aamva();
	static unsigned ExtendedBase();
};

struct MagneticStripeReaderTrackData :
	Windows::Devices::PointOfService::IMagneticStripeReaderTrackData
{
	MagneticStripeReaderTrackData(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderReport :
	Windows::Devices::PointOfService::IMagneticStripeReaderReport
{
	MagneticStripeReaderReport(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderBankCardDataReceivedEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderBankCardDataReceivedEventArgs
{
	MagneticStripeReaderBankCardDataReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderAamvaCardDataReceivedEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderAamvaCardDataReceivedEventArgs
{
	MagneticStripeReaderAamvaCardDataReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs
{
	MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderErrorOccurredEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderErrorOccurredEventArgs
{
	MagneticStripeReaderErrorOccurredEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderStatusUpdatedEventArgs :
	Windows::Devices::PointOfService::IMagneticStripeReaderStatusUpdatedEventArgs
{
	MagneticStripeReaderStatusUpdatedEventArgs(std::nullptr_t) noexcept {}
};

struct MagneticStripeReaderCapabilities :
	Windows::Devices::PointOfService::IMagneticStripeReaderCapabilities
{
	MagneticStripeReaderCapabilities(std::nullptr_t) noexcept {}
};

struct ClaimedMagneticStripeReader :
	Windows::Devices::PointOfService::IClaimedMagneticStripeReader
{
	ClaimedMagneticStripeReader(std::nullptr_t) noexcept {}
};

struct MagneticStripeReader :
	Windows::Devices::PointOfService::IMagneticStripeReader
{
	MagneticStripeReader(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> GetDefaultAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> FromIdAsync(wchar_t const (&deviceId)[S0]);
	static String GetDeviceSelector();
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

struct StorageDevice
{
	StorageDevice() = delete;
	static Windows::Storage::StorageFolder FromId(String const & deviceId);
	template <unsigned S0> static Windows::Storage::StorageFolder FromId(wchar_t const (&deviceId)[S0]);
	static String GetDeviceSelector();
};

struct ServiceDevice
{
	ServiceDevice() = delete;
	static String GetDeviceSelector(Windows::Devices::Portable::ServiceDeviceType serviceType);
	static String GetDeviceSelectorFromServiceId(GUID serviceId);
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

struct PrintTaskConfigurationSaveRequestedDeferral :
	Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral
{
	PrintTaskConfigurationSaveRequestedDeferral(std::nullptr_t) noexcept {}
};

struct PrintTaskConfigurationSaveRequest :
	Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest
{
	PrintTaskConfigurationSaveRequest(std::nullptr_t) noexcept {}
};

struct PrintTaskConfigurationSaveRequestedEventArgs :
	Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs
{
	PrintTaskConfigurationSaveRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskConfiguration :
	Windows::Devices::Printers::Extensions::IPrintTaskConfiguration
{
	PrintTaskConfiguration(std::nullptr_t) noexcept {}
};

struct PrintNotificationEventDetails :
	Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails
{
	PrintNotificationEventDetails(std::nullptr_t) noexcept {}
};

struct PrintExtensionContext
{
	PrintExtensionContext() = delete;
	static IInspectable FromDeviceId(String const & deviceId);
	template <unsigned S0> static IInspectable FromDeviceId(wchar_t const (&deviceId)[S0]);
};

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

struct Accelerometer :
	Windows::Devices::Sensors::IAccelerometer
{
	Accelerometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Accelerometer GetDefault();
};

struct AccelerometerReading :
	Windows::Devices::Sensors::IAccelerometerReading
{
	AccelerometerReading(std::nullptr_t) noexcept {}
};

struct AccelerometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs
{
	AccelerometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct AccelerometerShakenEventArgs :
	Windows::Devices::Sensors::IAccelerometerShakenEventArgs
{
	AccelerometerShakenEventArgs(std::nullptr_t) noexcept {}
};

struct Inclinometer :
	Windows::Devices::Sensors::IInclinometer
{
	Inclinometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Inclinometer GetDefault();
};

struct InclinometerReading :
	Windows::Devices::Sensors::IInclinometerReading,
	Requires<InclinometerReading, Windows::Devices::Sensors::IInclinometerReadingYawAccuracy>
{
	InclinometerReading(std::nullptr_t) noexcept {}
};

struct InclinometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs
{
	InclinometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Gyrometer :
	Windows::Devices::Sensors::IGyrometer
{
	Gyrometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Gyrometer GetDefault();
};

struct GyrometerReading :
	Windows::Devices::Sensors::IGyrometerReading
{
	GyrometerReading(std::nullptr_t) noexcept {}
};

struct GyrometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs
{
	GyrometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Compass :
	Windows::Devices::Sensors::ICompass
{
	Compass(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Compass GetDefault();
};

struct CompassReading :
	Windows::Devices::Sensors::ICompassReading,
	Requires<CompassReading, Windows::Devices::Sensors::ICompassReadingHeadingAccuracy>
{
	CompassReading(std::nullptr_t) noexcept {}
};

struct CompassReadingChangedEventArgs :
	Windows::Devices::Sensors::ICompassReadingChangedEventArgs
{
	CompassReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct LightSensor :
	Windows::Devices::Sensors::ILightSensor
{
	LightSensor(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::LightSensor GetDefault();
};

struct LightSensorReading :
	Windows::Devices::Sensors::ILightSensorReading
{
	LightSensorReading(std::nullptr_t) noexcept {}
};

struct LightSensorReadingChangedEventArgs :
	Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs
{
	LightSensorReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SensorRotationMatrix :
	Windows::Devices::Sensors::ISensorRotationMatrix
{
	SensorRotationMatrix(std::nullptr_t) noexcept {}
};

struct SensorQuaternion :
	Windows::Devices::Sensors::ISensorQuaternion
{
	SensorQuaternion(std::nullptr_t) noexcept {}
};

struct OrientationSensor :
	Windows::Devices::Sensors::IOrientationSensor
{
	OrientationSensor(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::OrientationSensor GetDefault();
};

struct OrientationSensorReading :
	Windows::Devices::Sensors::IOrientationSensorReading,
	Requires<OrientationSensorReading, Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy>
{
	OrientationSensorReading(std::nullptr_t) noexcept {}
};

struct OrientationSensorReadingChangedEventArgs :
	Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs
{
	OrientationSensorReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SimpleOrientationSensor :
	Windows::Devices::Sensors::ISimpleOrientationSensor
{
	SimpleOrientationSensor(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::SimpleOrientationSensor GetDefault();
};

struct SimpleOrientationSensorOrientationChangedEventArgs :
	Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs
{
	SimpleOrientationSensorOrientationChangedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

struct SmartCardReader :
	Windows::Devices::SmartCards::ISmartCardReader
{
	SmartCardReader(std::nullptr_t) noexcept {}
	static String GetDeviceSelector();
	static String GetDeviceSelector(Windows::Devices::SmartCards::SmartCardReaderKind kind);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> FromIdAsync(wchar_t const (&deviceId)[S0]);
};

struct SmartCard :
	Windows::Devices::SmartCards::ISmartCard
{
	SmartCard(std::nullptr_t) noexcept {}
};

struct CardAddedEventArgs :
	Windows::Devices::SmartCards::ICardAddedEventArgs
{
	CardAddedEventArgs(std::nullptr_t) noexcept {}
};

struct CardRemovedEventArgs :
	Windows::Devices::SmartCards::ICardRemovedEventArgs
{
	CardRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct SmartCardProvisioning :
	Windows::Devices::SmartCards::ISmartCardProvisioning
{
	SmartCardProvisioning(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> FromSmartCardAsync(Windows::Devices::SmartCards::SmartCard const & card);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID cardId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID cardId);
	static Windows::Foundation::IAsyncOperation<bool> RequestVirtualSmartCardDeletionAsync(Windows::Devices::SmartCards::SmartCard const & card);
};

struct SmartCardPinPolicy :
	Windows::Devices::SmartCards::ISmartCardPinPolicy
{
	SmartCardPinPolicy(std::nullptr_t) noexcept {}
	SmartCardPinPolicy();
};

struct SmartCardChallengeContext :
	Windows::Devices::SmartCards::ISmartCardChallengeContext
{
	SmartCardChallengeContext(std::nullptr_t) noexcept {}
};

struct SmartCardPinResetRequest :
	Windows::Devices::SmartCards::ISmartCardPinResetRequest
{
	SmartCardPinResetRequest(std::nullptr_t) noexcept {}
};

struct SmartCardPinResetDeferral :
	Windows::Devices::SmartCards::ISmartCardPinResetDeferral
{
	SmartCardPinResetDeferral(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

struct SmsBinaryMessage :
	Windows::Devices::Sms::ISmsBinaryMessage
{
	SmsBinaryMessage(std::nullptr_t) noexcept {}
	SmsBinaryMessage();
};

struct SmsTextMessage :
	Windows::Devices::Sms::ISmsTextMessage
{
	SmsTextMessage(std::nullptr_t) noexcept {}
	SmsTextMessage();
	static Windows::Devices::Sms::SmsTextMessage FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage);
};

struct DeleteSmsMessageOperation :
	Windows::Foundation::IAsyncAction
{
	DeleteSmsMessageOperation(std::nullptr_t) noexcept {}
};

struct DeleteSmsMessagesOperation :
	Windows::Foundation::IAsyncAction
{
	DeleteSmsMessagesOperation(std::nullptr_t) noexcept {}
};

struct GetSmsMessageOperation :
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage>
{
	GetSmsMessageOperation(std::nullptr_t) noexcept {}
};

struct GetSmsMessagesOperation :
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int>
{
	GetSmsMessagesOperation(std::nullptr_t) noexcept {}
};

struct SmsDeviceMessageStore :
	Windows::Devices::Sms::ISmsDeviceMessageStore
{
	SmsDeviceMessageStore(std::nullptr_t) noexcept {}
};

struct SendSmsMessageOperation :
	Windows::Foundation::IAsyncAction
{
	SendSmsMessageOperation(std::nullptr_t) noexcept {}
};

struct SmsMessageReceivedEventArgs :
	Windows::Devices::Sms::ISmsMessageReceivedEventArgs
{
	SmsMessageReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct SmsDevice :
	Windows::Devices::Sms::ISmsDevice
{
	SmsDevice(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(String const & networkAccountId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(wchar_t const (&networkAccountId)[S0]);
	static String GetDeviceSelector();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(wchar_t const (&deviceId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> GetDefaultAsync();
};

struct GetSmsDeviceOperation :
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice>
{
	GetSmsDeviceOperation(std::nullptr_t) noexcept {}
};

struct SmsReceivedEventDetails :
	Windows::Devices::Sms::ISmsReceivedEventDetails,
	Requires<SmsReceivedEventDetails, Windows::Devices::Sms::ISmsReceivedEventDetails2>
{
	SmsReceivedEventDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

struct UsbControlRequestType :
	Windows::Devices::Usb::IUsbControlRequestType
{
	UsbControlRequestType(std::nullptr_t) noexcept {}
	UsbControlRequestType();
};

struct UsbSetupPacket :
	Windows::Devices::Usb::IUsbSetupPacket
{
	UsbSetupPacket(std::nullptr_t) noexcept {}
	UsbSetupPacket();
	UsbSetupPacket(Windows::Storage::Streams::IBuffer const & eightByteBuffer);
};

struct UsbDeviceClass :
	Windows::Devices::Usb::IUsbDeviceClass
{
	UsbDeviceClass(std::nullptr_t) noexcept {}
	UsbDeviceClass();
};

struct UsbDeviceClasses :
	Windows::Devices::Usb::IUsbDeviceClasses
{
	UsbDeviceClasses(std::nullptr_t) noexcept {}
	static Windows::Devices::Usb::UsbDeviceClass CdcControl();
	static Windows::Devices::Usb::UsbDeviceClass Physical();
	static Windows::Devices::Usb::UsbDeviceClass PersonalHealthcare();
	static Windows::Devices::Usb::UsbDeviceClass ActiveSync();
	static Windows::Devices::Usb::UsbDeviceClass PalmSync();
	static Windows::Devices::Usb::UsbDeviceClass DeviceFirmwareUpdate();
	static Windows::Devices::Usb::UsbDeviceClass Irda();
	static Windows::Devices::Usb::UsbDeviceClass Measurement();
	static Windows::Devices::Usb::UsbDeviceClass VendorSpecific();
};

struct UsbDevice :
	Windows::Devices::Usb::IUsbDevice
{
	UsbDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector(unsigned vendorId, unsigned productId, GUID winUsbInterfaceClass);
	static String GetDeviceSelector(GUID winUsbInterfaceClass);
	static String GetDeviceSelector(unsigned vendorId, unsigned productId);
	static String GetDeviceClassSelector(Windows::Devices::Usb::UsbDeviceClass const & usbClass);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> FromIdAsync(wchar_t const (&deviceId)[S0]);
};

struct UsbInterface :
	Windows::Devices::Usb::IUsbInterface
{
	UsbInterface(std::nullptr_t) noexcept {}
};

struct UsbDeviceDescriptor :
	Windows::Devices::Usb::IUsbDeviceDescriptor
{
	UsbDeviceDescriptor(std::nullptr_t) noexcept {}
};

struct UsbConfiguration :
	Windows::Devices::Usb::IUsbConfiguration
{
	UsbConfiguration(std::nullptr_t) noexcept {}
};

struct UsbDescriptor :
	Windows::Devices::Usb::IUsbDescriptor
{
	UsbDescriptor(std::nullptr_t) noexcept {}
};

struct UsbConfigurationDescriptor :
	Windows::Devices::Usb::IUsbConfigurationDescriptor
{
	UsbConfigurationDescriptor(std::nullptr_t) noexcept {}
	static bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbConfigurationDescriptor & parsed);
	static Windows::Devices::Usb::UsbConfigurationDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor);
};

struct UsbInterfaceDescriptor :
	Windows::Devices::Usb::IUsbInterfaceDescriptor
{
	UsbInterfaceDescriptor(std::nullptr_t) noexcept {}
	static bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbInterfaceDescriptor & parsed);
	static Windows::Devices::Usb::UsbInterfaceDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor);
};

struct UsbBulkInEndpointDescriptor :
	Windows::Devices::Usb::IUsbBulkInEndpointDescriptor
{
	UsbBulkInEndpointDescriptor(std::nullptr_t) noexcept {}
};

struct UsbInterruptInEndpointDescriptor :
	Windows::Devices::Usb::IUsbInterruptInEndpointDescriptor
{
	UsbInterruptInEndpointDescriptor(std::nullptr_t) noexcept {}
};

struct UsbBulkOutEndpointDescriptor :
	Windows::Devices::Usb::IUsbBulkOutEndpointDescriptor
{
	UsbBulkOutEndpointDescriptor(std::nullptr_t) noexcept {}
};

struct UsbInterruptOutEndpointDescriptor :
	Windows::Devices::Usb::IUsbInterruptOutEndpointDescriptor
{
	UsbInterruptOutEndpointDescriptor(std::nullptr_t) noexcept {}
};

struct UsbEndpointDescriptor :
	Windows::Devices::Usb::IUsbEndpointDescriptor
{
	UsbEndpointDescriptor(std::nullptr_t) noexcept {}
	static bool TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbEndpointDescriptor & parsed);
	static Windows::Devices::Usb::UsbEndpointDescriptor Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor);
};

struct UsbInterruptInEventArgs :
	Windows::Devices::Usb::IUsbInterruptInEventArgs
{
	UsbInterruptInEventArgs(std::nullptr_t) noexcept {}
};

struct UsbInterruptInPipe :
	Windows::Devices::Usb::IUsbInterruptInPipe
{
	UsbInterruptInPipe(std::nullptr_t) noexcept {}
};

struct UsbBulkInPipe :
	Windows::Devices::Usb::IUsbBulkInPipe
{
	UsbBulkInPipe(std::nullptr_t) noexcept {}
};

struct UsbBulkOutPipe :
	Windows::Devices::Usb::IUsbBulkOutPipe
{
	UsbBulkOutPipe(std::nullptr_t) noexcept {}
};

struct UsbInterruptOutPipe :
	Windows::Devices::Usb::IUsbInterruptOutPipe
{
	UsbInterruptOutPipe(std::nullptr_t) noexcept {}
};

struct UsbInterfaceSetting :
	Windows::Devices::Usb::IUsbInterfaceSetting
{
	UsbInterfaceSetting(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

struct WiFiDirectDevice :
	Windows::Devices::WiFiDirect::IWiFiDirectDevice
{
	WiFiDirectDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> FromIdAsync(String const & deviceId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> FromIdAsync(wchar_t const (&deviceId)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Foundation {

struct WwwFormUrlDecoder :
	Windows::Foundation::IWwwFormUrlDecoderRuntimeClass
{
	WwwFormUrlDecoder(std::nullptr_t) noexcept {}
	WwwFormUrlDecoder(String const & query);
	template <unsigned S0> WwwFormUrlDecoder(wchar_t const (&query)[S0]);
};

struct Uri :
	Windows::Foundation::IUriRuntimeClass,
	Requires<Uri, Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri, Windows::Foundation::IStringable>
{
	Uri(std::nullptr_t) noexcept {}
	Uri(String const & uri);
	template <unsigned S0> Uri(wchar_t const (&uri)[S0]);
	Uri(String const & baseUri, String const & relativeUri);
	template <unsigned S0, unsigned S1> Uri(wchar_t const (&baseUri)[S0], wchar_t const (&relativeUri)[S1]);
	static String UnescapeComponent(String const & toUnescape);
	template <unsigned S0> static String UnescapeComponent(wchar_t const (&toUnescape)[S0]);
	static String EscapeComponent(String const & toEscape);
	template <unsigned S0> static String EscapeComponent(wchar_t const (&toEscape)[S0]);
};

struct WwwFormUrlDecoderEntry :
	Windows::Foundation::IWwwFormUrlDecoderEntry
{
	WwwFormUrlDecoderEntry(std::nullptr_t) noexcept {}
};

struct PropertyValue
{
	PropertyValue() = delete;
	static IInspectable CreateEmpty();
	static IInspectable CreateUInt8(byte value);
	static IInspectable CreateInt16(short value);
	static IInspectable CreateUInt16(unsigned short value);
	static IInspectable CreateInt32(int value);
	static IInspectable CreateUInt32(unsigned value);
	static IInspectable CreateInt64(long long value);
	static IInspectable CreateUInt64(unsigned long long value);
	static IInspectable CreateSingle(float value);
	static IInspectable CreateDouble(double value);
	static IInspectable CreateChar16(wchar_t value);
	static IInspectable CreateBoolean(bool value);
	static IInspectable CreateString(String const & value);
	template <unsigned S0> static IInspectable CreateString(wchar_t const (&value)[S0]);
	static IInspectable CreateInspectable(IInspectable const & value);
	static IInspectable CreateGuid(GUID value);
	static IInspectable CreateDateTime(Windows::Foundation::DateTime const & value);
	static IInspectable CreateTimeSpan(Windows::Foundation::TimeSpan const & value);
	static IInspectable CreatePoint(Windows::Foundation::Point const & value);
	static IInspectable CreateSize(Windows::Foundation::Size const & value);
	static IInspectable CreateRect(Windows::Foundation::Rect const & value);
};

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

struct PropertySet :
	Windows::Foundation::Collections::IPropertySet
{
	PropertySet(std::nullptr_t) noexcept {}
	PropertySet();
};

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

struct TracingStatusChangedEventArgs :
	Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs
{
	TracingStatusChangedEventArgs(std::nullptr_t) noexcept {}
};

struct AsyncCausalityTracer
{
	AsyncCausalityTracer() = delete;
	static void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, String const & operationName, unsigned long long relatedContext);
	template <unsigned S0> static void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, wchar_t const (&operationName)[S0], unsigned long long relatedContext);
	static void TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, AsyncStatus status);
	static void TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalityRelation relation);
	static void TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork work);
	static void TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, Windows::Foundation::Diagnostics::CausalitySynchronousWork work);
	static EventRegistrationToken TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken TracingStatusChanged(F handler);
	static void TracingStatusChanged(EventRegistrationToken cookie);
};

struct RuntimeBrokerErrorSettings :
	Windows::Foundation::Diagnostics::IErrorReportingSettings
{
	RuntimeBrokerErrorSettings(std::nullptr_t) noexcept {}
	RuntimeBrokerErrorSettings();
};

struct LoggingChannel :
	Windows::Foundation::Diagnostics::ILoggingChannel
{
	LoggingChannel(std::nullptr_t) noexcept {}
	LoggingChannel(String const & name);
	template <unsigned S0> LoggingChannel(wchar_t const (&name)[S0]);
};

struct LoggingActivity :
	Windows::Foundation::Diagnostics::ILoggingActivity
{
	LoggingActivity(std::nullptr_t) noexcept {}
	LoggingActivity(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel);
	template <unsigned S0> LoggingActivity(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel);
	LoggingActivity(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level);
	template <unsigned S0> LoggingActivity(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level);
};

struct LoggingSession :
	Windows::Foundation::Diagnostics::ILoggingSession
{
	LoggingSession(std::nullptr_t) noexcept {}
	LoggingSession(String const & name);
	template <unsigned S0> LoggingSession(wchar_t const (&name)[S0]);
};

struct LogFileGeneratedEventArgs :
	Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs
{
	LogFileGeneratedEventArgs(std::nullptr_t) noexcept {}
};

struct FileLoggingSession :
	Windows::Foundation::Diagnostics::IFileLoggingSession
{
	FileLoggingSession(std::nullptr_t) noexcept {}
	FileLoggingSession(String const & name);
	template <unsigned S0> FileLoggingSession(wchar_t const (&name)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Globalization {

struct JapanesePhoneme :
	Windows::Globalization::IJapanesePhoneme
{
	JapanesePhoneme(std::nullptr_t) noexcept {}
};

struct JapanesePhoneticAnalyzer
{
	JapanesePhoneticAnalyzer() = delete;
	static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(String const & input);
	template <unsigned S0> static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(wchar_t const (&input)[S0]);
	static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(String const & input, bool monoRuby);
	template <unsigned S0> static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(wchar_t const (&input)[S0], bool monoRuby);
};

struct CalendarIdentifiers
{
	CalendarIdentifiers() = delete;
	static String Gregorian();
	static String Hebrew();
	static String Hijri();
	static String Japanese();
	static String Julian();
	static String Korean();
	static String Taiwan();
	static String Thai();
	static String UmAlQura();
};

struct ClockIdentifiers
{
	ClockIdentifiers() = delete;
	static String TwelveHour();
	static String TwentyFourHour();
};

struct NumeralSystemIdentifiers
{
	NumeralSystemIdentifiers() = delete;
	static String Arab();
	static String ArabExt();
	static String Bali();
	static String Beng();
	static String Cham();
	static String Deva();
	static String FullWide();
	static String Gujr();
	static String Guru();
	static String HaniDec();
	static String Java();
	static String Kali();
	static String Khmr();
	static String Knda();
	static String Lana();
	static String LanaTham();
	static String Laoo();
	static String Latn();
	static String Lepc();
	static String Limb();
	static String Mlym();
	static String Mong();
	static String Mtei();
	static String Mymr();
	static String MymrShan();
	static String Nkoo();
	static String Olck();
	static String Orya();
	static String Saur();
	static String Sund();
	static String Talu();
	static String TamlDec();
	static String Telu();
	static String Thai();
	static String Tibt();
	static String Vaii();
};

struct CurrencyIdentifiers
{
	CurrencyIdentifiers() = delete;
	static String AED();
	static String AFN();
	static String ALL();
	static String AMD();
	static String ANG();
	static String AOA();
	static String ARS();
	static String AUD();
	static String AWG();
	static String AZN();
	static String BAM();
	static String BBD();
	static String BDT();
	static String BGN();
	static String BHD();
	static String BIF();
	static String BMD();
	static String BND();
	static String BOB();
	static String BRL();
	static String BSD();
	static String BTN();
	static String BWP();
	static String BYR();
	static String BZD();
	static String CAD();
	static String CDF();
	static String CHF();
	static String CLP();
	static String CNY();
	static String COP();
	static String CRC();
	static String CUP();
	static String CVE();
	static String CZK();
	static String DJF();
	static String DKK();
	static String DOP();
	static String DZD();
	static String EGP();
	static String ERN();
	static String ETB();
	static String EUR();
	static String FJD();
	static String FKP();
	static String GBP();
	static String GEL();
	static String GHS();
	static String GIP();
	static String GMD();
	static String GNF();
	static String GTQ();
	static String GYD();
	static String HKD();
	static String HNL();
	static String HRK();
	static String HTG();
	static String HUF();
	static String IDR();
	static String ILS();
	static String INR();
	static String IQD();
	static String IRR();
	static String ISK();
	static String JMD();
	static String JOD();
	static String JPY();
	static String KES();
	static String KGS();
	static String KHR();
	static String KMF();
	static String KPW();
	static String KRW();
	static String KWD();
	static String KYD();
	static String KZT();
	static String LAK();
	static String LBP();
	static String LKR();
	static String LRD();
	static String LSL();
	static String LTL();
	static String LVL();
	static String LYD();
	static String MAD();
	static String MDL();
	static String MGA();
	static String MKD();
	static String MMK();
	static String MNT();
	static String MOP();
	static String MRO();
	static String MUR();
	static String MVR();
	static String MWK();
	static String MXN();
	static String MYR();
	static String MZN();
	static String NAD();
	static String NGN();
	static String NIO();
	static String NOK();
	static String NPR();
	static String NZD();
	static String OMR();
	static String PAB();
	static String PEN();
	static String PGK();
	static String PHP();
	static String PKR();
	static String PLN();
	static String PYG();
	static String QAR();
	static String RON();
	static String RSD();
	static String RUB();
	static String RWF();
	static String SAR();
	static String SBD();
	static String SCR();
	static String SDG();
	static String SEK();
	static String SGD();
	static String SHP();
	static String SLL();
	static String SOS();
	static String SRD();
	static String STD();
	static String SYP();
	static String SZL();
	static String THB();
	static String TJS();
	static String TMT();
	static String TND();
	static String TOP();
	static String TRY();
	static String TTD();
	static String TWD();
	static String TZS();
	static String UAH();
	static String UGX();
	static String USD();
	static String UYU();
	static String UZS();
	static String VEF();
	static String VND();
	static String VUV();
	static String WST();
	static String XAF();
	static String XCD();
	static String XOF();
	static String XPF();
	static String XXX();
	static String YER();
	static String ZAR();
	static String ZMW();
	static String ZWL();
};

struct GeographicRegion :
	Windows::Globalization::IGeographicRegion
{
	GeographicRegion(std::nullptr_t) noexcept {}
	GeographicRegion();
	GeographicRegion(String const & geographicRegionCode);
	template <unsigned S0> GeographicRegion(wchar_t const (&geographicRegionCode)[S0]);
	static bool IsSupported(String const & geographicRegionCode);
	template <unsigned S0> static bool IsSupported(wchar_t const (&geographicRegionCode)[S0]);
};

struct Language :
	Windows::Globalization::ILanguage,
	Requires<Language, Windows::Globalization::ILanguageExtensionSubtags>
{
	Language(std::nullptr_t) noexcept {}
	Language(String const & languageTag);
	template <unsigned S0> Language(wchar_t const (&languageTag)[S0]);
	static bool IsWellFormed(String const & languageTag);
	template <unsigned S0> static bool IsWellFormed(wchar_t const (&languageTag)[S0]);
	static String CurrentInputMethodLanguageTag();
};

struct Calendar :
	Windows::Globalization::ICalendar,
	Requires<Calendar, Windows::Globalization::ITimeZoneOnCalendar>
{
	Calendar(std::nullptr_t) noexcept {}
	Calendar();
	Calendar(Windows::Foundation::Collections::IIterable<String> const & languages);
	Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock);
	template <unsigned S0, unsigned S1> Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1]);
	Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock, String const & timeZoneId);
	template <unsigned S0, unsigned S1, unsigned S2> Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1], wchar_t const (&timeZoneId)[S2]);
};

struct ApplicationLanguages
{
	ApplicationLanguages() = delete;
	static String PrimaryLanguageOverride();
	static void PrimaryLanguageOverride(String const & value);
	template <unsigned S0> static void PrimaryLanguageOverride(wchar_t const (&value)[S0]);
	static Windows::Foundation::Collections::IVectorView<String> Languages();
	static Windows::Foundation::Collections::IVectorView<String> ManifestLanguages();
};

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

struct CharacterGrouping :
	Windows::Globalization::Collation::ICharacterGrouping
{
	CharacterGrouping(std::nullptr_t) noexcept {}
};

struct CharacterGroupings :
	Windows::Globalization::Collation::ICharacterGroupings
{
	CharacterGroupings(std::nullptr_t) noexcept {}
	CharacterGroupings();
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

struct DateTimeFormatter :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter,
	Requires<DateTimeFormatter, Windows::Globalization::DateTimeFormatting::IDateTimeFormatter2>
{
	DateTimeFormatter(std::nullptr_t) noexcept {}
	DateTimeFormatter(String const & formatTemplate);
	template <unsigned S0> DateTimeFormatter(wchar_t const (&formatTemplate)[S0]);
	DateTimeFormatter(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages);
	template <unsigned S0> DateTimeFormatter(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages);
	DateTimeFormatter(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock);
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> DateTimeFormatter(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1], wchar_t const (&calendar)[S2], wchar_t const (&clock)[S3]);
	DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat);
	DateTimeFormatter(Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat);
	DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages);
	DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock);
	template <unsigned S0, unsigned S1, unsigned S2> DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0], wchar_t const (&calendar)[S1], wchar_t const (&clock)[S2]);
	using impl_IDateTimeFormatter::Format;
	using impl_IDateTimeFormatter2::Format;
	static Windows::Globalization::DateTimeFormatting::DateTimeFormatter LongDate();
	static Windows::Globalization::DateTimeFormatting::DateTimeFormatter LongTime();
	static Windows::Globalization::DateTimeFormatting::DateTimeFormatter ShortDate();
	static Windows::Globalization::DateTimeFormatting::DateTimeFormatter ShortTime();
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

struct LanguageFont :
	Windows::Globalization::Fonts::ILanguageFont
{
	LanguageFont(std::nullptr_t) noexcept {}
};

struct LanguageFontGroup :
	Windows::Globalization::Fonts::ILanguageFontGroup
{
	LanguageFontGroup(std::nullptr_t) noexcept {}
	LanguageFontGroup(String const & languageTag);
	template <unsigned S0> LanguageFontGroup(wchar_t const (&languageTag)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

struct SignificantDigitsNumberRounder :
	Windows::Globalization::NumberFormatting::INumberRounder,
	Requires<SignificantDigitsNumberRounder, Windows::Globalization::NumberFormatting::ISignificantDigitsNumberRounder>
{
	SignificantDigitsNumberRounder(std::nullptr_t) noexcept {}
	SignificantDigitsNumberRounder();
};

struct IncrementNumberRounder :
	Windows::Globalization::NumberFormatting::INumberRounder,
	Requires<IncrementNumberRounder, Windows::Globalization::NumberFormatting::IIncrementNumberRounder>
{
	IncrementNumberRounder(std::nullptr_t) noexcept {}
	IncrementNumberRounder();
};

struct DecimalFormatter :
	Windows::Globalization::NumberFormatting::INumberFormatter,
	Requires<DecimalFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	DecimalFormatter(std::nullptr_t) noexcept {}
	DecimalFormatter();
	DecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion);
	template <unsigned S0> DecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]);
};

struct PercentFormatter :
	Windows::Globalization::NumberFormatting::INumberFormatter,
	Requires<PercentFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	PercentFormatter(std::nullptr_t) noexcept {}
	PercentFormatter();
	PercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion);
	template <unsigned S0> PercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]);
};

struct PermilleFormatter :
	Windows::Globalization::NumberFormatting::INumberFormatter,
	Requires<PermilleFormatter, Windows::Globalization::NumberFormatting::INumberFormatterOptions, Windows::Globalization::NumberFormatting::INumberFormatter2, Windows::Globalization::NumberFormatting::INumberParser, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	PermilleFormatter(std::nullptr_t) noexcept {}
	PermilleFormatter();
	PermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion);
	template <unsigned S0> PermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]);
};

struct CurrencyFormatter :
	Windows::Globalization::NumberFormatting::ICurrencyFormatter,
	Requires<CurrencyFormatter, Windows::Globalization::NumberFormatting::ICurrencyFormatter2, Windows::Globalization::NumberFormatting::ISignificantDigitsOption, Windows::Globalization::NumberFormatting::INumberRounderOption, Windows::Globalization::NumberFormatting::ISignedZeroOption>
{
	CurrencyFormatter(std::nullptr_t) noexcept {}
	CurrencyFormatter(String const & currencyCode);
	template <unsigned S0> CurrencyFormatter(wchar_t const (&currencyCode)[S0]);
	CurrencyFormatter(String const & currencyCode, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion);
	template <unsigned S0, unsigned S1> CurrencyFormatter(wchar_t const (&currencyCode)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1]);
};

struct NumeralSystemTranslator :
	Windows::Globalization::NumberFormatting::INumeralSystemTranslator
{
	NumeralSystemTranslator(std::nullptr_t) noexcept {}
	NumeralSystemTranslator();
	NumeralSystemTranslator(Windows::Foundation::Collections::IIterable<String> const & languages);
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

struct DisplayInformation :
	Windows::Graphics::Display::IDisplayInformation
{
	DisplayInformation(std::nullptr_t) noexcept {}
	static Windows::Graphics::Display::DisplayInformation GetForCurrentView();
	static Windows::Graphics::Display::DisplayOrientations AutoRotationPreferences();
	static void AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations value);
	static EventRegistrationToken DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler);
	template <typename F> static EventRegistrationToken DisplayContentsInvalidated(F handler);
	static void DisplayContentsInvalidated(EventRegistrationToken token);
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

struct BitmapTransform :
	Windows::Graphics::Imaging::IBitmapTransform
{
	BitmapTransform(std::nullptr_t) noexcept {}
	BitmapTransform();
};

struct BitmapTypedValue :
	Windows::Graphics::Imaging::IBitmapTypedValue
{
	BitmapTypedValue(std::nullptr_t) noexcept {}
	BitmapTypedValue(IInspectable const & value, Windows::Foundation::PropertyType type);
};

struct BitmapPropertySet :
	Windows::Foundation::Collections::IMap<String, Windows::Graphics::Imaging::BitmapTypedValue>
{
	BitmapPropertySet(std::nullptr_t) noexcept {}
	BitmapPropertySet();
};

struct BitmapPropertiesView :
	Windows::Graphics::Imaging::IBitmapPropertiesView
{
	BitmapPropertiesView(std::nullptr_t) noexcept {}
};

struct BitmapProperties :
	Windows::Graphics::Imaging::IBitmapProperties
{
	BitmapProperties(std::nullptr_t) noexcept {}
};

struct PixelDataProvider :
	Windows::Graphics::Imaging::IPixelDataProvider
{
	PixelDataProvider(std::nullptr_t) noexcept {}
};

struct ImageStream :
	Windows::Storage::Streams::IRandomAccessStreamWithContentType
{
	ImageStream(std::nullptr_t) noexcept {}
};

struct BitmapFrame :
	Windows::Graphics::Imaging::IBitmapFrame
{
	BitmapFrame(std::nullptr_t) noexcept {}
};

struct BitmapCodecInformation :
	Windows::Graphics::Imaging::IBitmapCodecInformation
{
	BitmapCodecInformation(std::nullptr_t) noexcept {}
};

struct BitmapDecoder :
	Windows::Graphics::Imaging::IBitmapDecoder,
	Requires<BitmapDecoder, Windows::Graphics::Imaging::IBitmapFrame>
{
	BitmapDecoder(std::nullptr_t) noexcept {}
	static GUID BmpDecoderId();
	static GUID JpegDecoderId();
	static GUID PngDecoderId();
	static GUID TiffDecoderId();
	static GUID GifDecoderId();
	static GUID JpegXRDecoderId();
	static GUID IcoDecoderId();
	static Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> GetDecoderInformationEnumerator();
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> CreateAsync(Windows::Storage::Streams::IRandomAccessStream const & stream);
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> CreateAsync(GUID decoderId, Windows::Storage::Streams::IRandomAccessStream const & stream);
};

struct BitmapEncoder :
	Windows::Graphics::Imaging::IBitmapEncoder
{
	BitmapEncoder(std::nullptr_t) noexcept {}
	static GUID BmpEncoderId();
	static GUID JpegEncoderId();
	static GUID PngEncoderId();
	static GUID TiffEncoderId();
	static GUID GifEncoderId();
	static GUID JpegXREncoderId();
	static Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> GetEncoderInformationEnumerator();
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateAsync(GUID encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream);
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateAsync(GUID encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions);
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateForTranscodingAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder);
	static Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> CreateForInPlacePropertyEncodingAsync(Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder);
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

struct PrintTaskOptions :
	Windows::Graphics::Printing::IPrintTaskOptionsCore,
	Requires<PrintTaskOptions, Windows::Graphics::Printing::IPrintTaskOptionsCoreProperties, Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>
{
	PrintTaskOptions(std::nullptr_t) noexcept {}
};

struct StandardPrintTaskOptions
{
	StandardPrintTaskOptions() = delete;
	static String MediaSize();
	static String MediaType();
	static String Orientation();
	static String PrintQuality();
	static String ColorMode();
	static String Duplex();
	static String Collation();
	static String Staple();
	static String HolePunch();
	static String Binding();
	static String Copies();
	static String NUp();
	static String InputBin();
};

struct PrintTaskProgressingEventArgs :
	Windows::Graphics::Printing::IPrintTaskProgressingEventArgs
{
	PrintTaskProgressingEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskCompletedEventArgs :
	Windows::Graphics::Printing::IPrintTaskCompletedEventArgs
{
	PrintTaskCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTask :
	Windows::Graphics::Printing::IPrintTask,
	Requires<PrintTask, Windows::Graphics::Printing::IPrintTaskTargetDeviceSupport>
{
	PrintTask(std::nullptr_t) noexcept {}
};

struct PrintTaskSourceRequestedDeferral :
	Windows::Graphics::Printing::IPrintTaskSourceRequestedDeferral
{
	PrintTaskSourceRequestedDeferral(std::nullptr_t) noexcept {}
};

struct PrintTaskSourceRequestedArgs :
	Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs
{
	PrintTaskSourceRequestedArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskRequestedDeferral :
	Windows::Graphics::Printing::IPrintTaskRequestedDeferral
{
	PrintTaskRequestedDeferral(std::nullptr_t) noexcept {}
};

struct PrintTaskRequest :
	Windows::Graphics::Printing::IPrintTaskRequest
{
	PrintTaskRequest(std::nullptr_t) noexcept {}
};

struct PrintTaskRequestedEventArgs :
	Windows::Graphics::Printing::IPrintTaskRequestedEventArgs
{
	PrintTaskRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintManager :
	Windows::Graphics::Printing::IPrintManager
{
	PrintManager(std::nullptr_t) noexcept {}
	static Windows::Graphics::Printing::PrintManager GetForCurrentView();
	static Windows::Foundation::IAsyncOperation<bool> ShowPrintUIAsync();
};

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

struct PrintCopiesOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintCopiesOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintNumberOptionDetails>
{
	PrintCopiesOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintMediaSizeOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintMediaSizeOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintMediaSizeOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintMediaTypeOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintMediaTypeOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintMediaTypeOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintOrientationOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintOrientationOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintOrientationOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintQualityOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintQualityOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintQualityOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintColorModeOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintColorModeOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintColorModeOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintDuplexOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintDuplexOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintDuplexOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintCollationOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintCollationOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintCollationOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintStapleOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintStapleOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintStapleOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintHolePunchOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintHolePunchOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintHolePunchOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintBindingOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintBindingOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails>
{
	PrintBindingOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintCustomTextOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintCustomTextOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomTextOptionDetails>
{
	PrintCustomTextOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintCustomItemDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintCustomItemDetails
{
	PrintCustomItemDetails(std::nullptr_t) noexcept {}
};

struct PrintCustomItemListOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails,
	Requires<PrintCustomItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintItemListOptionDetails, Windows::Graphics::Printing::OptionDetails::IPrintCustomItemListOptionDetails>
{
	PrintCustomItemListOptionDetails(std::nullptr_t) noexcept {}
};

struct PrintTaskOptionChangedEventArgs :
	Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionChangedEventArgs
{
	PrintTaskOptionChangedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskOptionDetails :
	Windows::Graphics::Printing::OptionDetails::IPrintTaskOptionDetails,
	Requires<PrintTaskOptionDetails, Windows::Graphics::Printing::IPrintTaskOptionsCore, Windows::Graphics::Printing::IPrintTaskOptionsCoreUIConfiguration>
{
	PrintTaskOptionDetails(std::nullptr_t) noexcept {}
	static Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails GetFromPrintTaskOptions(Windows::Graphics::Printing::PrintTaskOptions const & printTaskOptions);
};

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

struct ApplicationDataManager :
	Windows::Management::Core::IApplicationDataManager
{
	ApplicationDataManager(std::nullptr_t) noexcept {}
	static Windows::Storage::ApplicationData CreateForPackageFamily(String const & packageFamilyName);
	template <unsigned S0> static Windows::Storage::ApplicationData CreateForPackageFamily(wchar_t const (&packageFamilyName)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

struct DeploymentResult :
	Windows::Management::Deployment::IDeploymentResult
{
	DeploymentResult(std::nullptr_t) noexcept {}
};

struct PackageUserInformation :
	Windows::Management::Deployment::IPackageUserInformation
{
	PackageUserInformation(std::nullptr_t) noexcept {}
};

struct PackageManager :
	Windows::Management::Deployment::IPackageManager,
	Requires<PackageManager, Windows::Management::Deployment::IPackageManager2>
{
	PackageManager(std::nullptr_t) noexcept {}
	PackageManager();
	using impl_IPackageManager::RemovePackageAsync;
	using impl_IPackageManager::StagePackageAsync;
	using impl_IPackageManager2::RemovePackageAsync;
	using impl_IPackageManager2::StagePackageAsync;
};

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

struct WorkplaceSettings
{
	WorkplaceSettings() = delete;
	static bool IsMicrosoftAccountOptional();
};

}}}}

namespace Modern { namespace Windows { namespace Media {

struct MediaMarkerTypes
{
	MediaMarkerTypes() = delete;
	static String Bookmark();
};

struct MusicDisplayProperties :
	Windows::Media::IMusicDisplayProperties
{
	MusicDisplayProperties(std::nullptr_t) noexcept {}
};

struct VideoDisplayProperties :
	Windows::Media::IVideoDisplayProperties
{
	VideoDisplayProperties(std::nullptr_t) noexcept {}
};

struct ImageDisplayProperties :
	Windows::Media::IImageDisplayProperties
{
	ImageDisplayProperties(std::nullptr_t) noexcept {}
};

struct SystemMediaTransportControlsDisplayUpdater :
	Windows::Media::ISystemMediaTransportControlsDisplayUpdater
{
	SystemMediaTransportControlsDisplayUpdater(std::nullptr_t) noexcept {}
};

struct SystemMediaTransportControlsButtonPressedEventArgs :
	Windows::Media::ISystemMediaTransportControlsButtonPressedEventArgs
{
	SystemMediaTransportControlsButtonPressedEventArgs(std::nullptr_t) noexcept {}
};

struct SystemMediaTransportControlsPropertyChangedEventArgs :
	Windows::Media::ISystemMediaTransportControlsPropertyChangedEventArgs
{
	SystemMediaTransportControlsPropertyChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SystemMediaTransportControls :
	Windows::Media::ISystemMediaTransportControls
{
	SystemMediaTransportControls(std::nullptr_t) noexcept {}
	static Windows::Media::SystemMediaTransportControls GetForCurrentView();
};

struct MediaExtensionManager :
	Windows::Media::IMediaExtensionManager
{
	MediaExtensionManager(std::nullptr_t) noexcept {}
	MediaExtensionManager();
};

struct VideoEffects
{
	VideoEffects() = delete;
	static String VideoStabilization();
};

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

struct CameraCaptureUIPhotoCaptureSettings :
	Windows::Media::Capture::ICameraCaptureUIPhotoCaptureSettings
{
	CameraCaptureUIPhotoCaptureSettings(std::nullptr_t) noexcept {}
};

struct CameraCaptureUIVideoCaptureSettings :
	Windows::Media::Capture::ICameraCaptureUIVideoCaptureSettings
{
	CameraCaptureUIVideoCaptureSettings(std::nullptr_t) noexcept {}
};

struct CameraCaptureUI :
	Windows::Media::Capture::ICameraCaptureUI
{
	CameraCaptureUI(std::nullptr_t) noexcept {}
	CameraCaptureUI();
};

struct CameraOptionsUI
{
	CameraOptionsUI() = delete;
	static void Show(Windows::Media::Capture::MediaCapture const & mediaCapture);
};

struct MediaCaptureFailedEventArgs :
	Windows::Media::Capture::IMediaCaptureFailedEventArgs
{
	MediaCaptureFailedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaCapture :
	Windows::Media::Capture::IMediaCapture,
	Requires<MediaCapture, Windows::Media::Capture::IMediaCaptureVideoPreview, Windows::Media::Capture::IMediaCapture2>
{
	MediaCapture(std::nullptr_t) noexcept {}
	MediaCapture();
};

struct MediaCaptureInitializationSettings :
	Windows::Media::Capture::IMediaCaptureInitializationSettings,
	Requires<MediaCaptureInitializationSettings, Windows::Media::Capture::IMediaCaptureInitializationSettings2>
{
	MediaCaptureInitializationSettings(std::nullptr_t) noexcept {}
	MediaCaptureInitializationSettings();
};

struct MediaCaptureSettings :
	Windows::Media::Capture::IMediaCaptureSettings,
	Requires<MediaCaptureSettings, Windows::Media::Capture::IMediaCaptureSettings2>
{
	MediaCaptureSettings(std::nullptr_t) noexcept {}
};

struct LowLagMediaRecording :
	Windows::Media::Capture::ILowLagMediaRecording
{
	LowLagMediaRecording(std::nullptr_t) noexcept {}
};

struct LowLagPhotoCapture :
	Windows::Media::Capture::ILowLagPhotoCapture
{
	LowLagPhotoCapture(std::nullptr_t) noexcept {}
};

struct LowLagPhotoSequenceCapture :
	Windows::Media::Capture::ILowLagPhotoSequenceCapture
{
	LowLagPhotoSequenceCapture(std::nullptr_t) noexcept {}
};

struct CapturedPhoto :
	Windows::Media::Capture::ICapturedPhoto
{
	CapturedPhoto(std::nullptr_t) noexcept {}
};

struct PhotoCapturedEventArgs :
	Windows::Media::Capture::IPhotoCapturedEventArgs
{
	PhotoCapturedEventArgs(std::nullptr_t) noexcept {}
};

struct CapturedFrame :
	Windows::Media::Capture::ICapturedFrame
{
	CapturedFrame(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

struct RatedContentDescription :
	Windows::Media::ContentRestrictions::IRatedContentDescription
{
	RatedContentDescription(std::nullptr_t) noexcept {}
	RatedContentDescription(String const & id, String const & title, Windows::Media::ContentRestrictions::RatedContentCategory category);
	template <unsigned S0, unsigned S1> RatedContentDescription(wchar_t const (&id)[S0], wchar_t const (&title)[S1], Windows::Media::ContentRestrictions::RatedContentCategory category);
};

struct ContentRestrictionsBrowsePolicy :
	Windows::Media::ContentRestrictions::IContentRestrictionsBrowsePolicy
{
	ContentRestrictionsBrowsePolicy(std::nullptr_t) noexcept {}
};

struct RatedContentRestrictions :
	Windows::Media::ContentRestrictions::IRatedContentRestrictions
{
	RatedContentRestrictions(std::nullptr_t) noexcept {}
	RatedContentRestrictions();
	RatedContentRestrictions(unsigned maxAgeRating);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

struct AudioStreamDescriptor :
	Windows::Media::Core::IAudioStreamDescriptor
{
	AudioStreamDescriptor(std::nullptr_t) noexcept {}
	AudioStreamDescriptor(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties);
};

struct VideoStreamDescriptor :
	Windows::Media::Core::IVideoStreamDescriptor
{
	VideoStreamDescriptor(std::nullptr_t) noexcept {}
	VideoStreamDescriptor(Windows::Media::MediaProperties::VideoEncodingProperties const & encodingProperties);
};

struct MediaStreamSource :
	Windows::Media::Core::IMediaStreamSource
{
	MediaStreamSource(std::nullptr_t) noexcept {}
	MediaStreamSource(Windows::Media::Core::IMediaStreamDescriptor const & descriptor);
	MediaStreamSource(Windows::Media::Core::IMediaStreamDescriptor const & descriptor, Windows::Media::Core::IMediaStreamDescriptor const & descriptor2);
};

struct MediaStreamSourceClosedEventArgs :
	Windows::Media::Core::IMediaStreamSourceClosedEventArgs
{
	MediaStreamSourceClosedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceStartingEventArgs :
	Windows::Media::Core::IMediaStreamSourceStartingEventArgs
{
	MediaStreamSourceStartingEventArgs(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSampleRequestedEventArgs :
	Windows::Media::Core::IMediaStreamSourceSampleRequestedEventArgs
{
	MediaStreamSourceSampleRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSwitchStreamsRequestedEventArgs :
	Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestedEventArgs
{
	MediaStreamSourceSwitchStreamsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaStreamSamplePropertySet :
	Windows::Foundation::Collections::IMap<GUID, IInspectable>
{
	MediaStreamSamplePropertySet(std::nullptr_t) noexcept {}
};

struct MediaStreamSample :
	Windows::Media::Core::IMediaStreamSample
{
	MediaStreamSample(std::nullptr_t) noexcept {}
	static Windows::Media::Core::MediaStreamSample CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer, Windows::Foundation::TimeSpan const & timestamp);
	static Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, unsigned count, Windows::Foundation::TimeSpan const & timestamp);
};

struct MediaStreamSampleProtectionProperties :
	Windows::Media::Core::IMediaStreamSampleProtectionProperties
{
	MediaStreamSampleProtectionProperties(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceClosedRequest :
	Windows::Media::Core::IMediaStreamSourceClosedRequest
{
	MediaStreamSourceClosedRequest(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceStartingRequestDeferral :
	Windows::Media::Core::IMediaStreamSourceStartingRequestDeferral
{
	MediaStreamSourceStartingRequestDeferral(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceStartingRequest :
	Windows::Media::Core::IMediaStreamSourceStartingRequest
{
	MediaStreamSourceStartingRequest(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSampleRequestDeferral :
	Windows::Media::Core::IMediaStreamSourceSampleRequestDeferral
{
	MediaStreamSourceSampleRequestDeferral(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSampleRequest :
	Windows::Media::Core::IMediaStreamSourceSampleRequest
{
	MediaStreamSourceSampleRequest(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSwitchStreamsRequestDeferral :
	Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequestDeferral
{
	MediaStreamSourceSwitchStreamsRequestDeferral(std::nullptr_t) noexcept {}
};

struct MediaStreamSourceSwitchStreamsRequest :
	Windows::Media::Core::IMediaStreamSourceSwitchStreamsRequest
{
	MediaStreamSourceSwitchStreamsRequest(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

struct DialRequestedEventArgs :
	Windows::Media::Devices::IDialRequestedEventArgs
{
	DialRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct RedialRequestedEventArgs :
	Windows::Media::Devices::IRedialRequestedEventArgs
{
	RedialRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct KeypadPressedEventArgs :
	Windows::Media::Devices::IKeypadPressedEventArgs
{
	KeypadPressedEventArgs(std::nullptr_t) noexcept {}
};

struct CallControl :
	Windows::Media::Devices::ICallControl
{
	CallControl(std::nullptr_t) noexcept {}
	static Windows::Media::Devices::CallControl GetDefault();
	static Windows::Media::Devices::CallControl FromId(String const & deviceId);
	template <unsigned S0> static Windows::Media::Devices::CallControl FromId(wchar_t const (&deviceId)[S0]);
};

struct DefaultAudioCaptureDeviceChangedEventArgs :
	Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs
{
	DefaultAudioCaptureDeviceChangedEventArgs(std::nullptr_t) noexcept {}
};

struct DefaultAudioRenderDeviceChangedEventArgs :
	Windows::Media::Devices::IDefaultAudioDeviceChangedEventArgs
{
	DefaultAudioRenderDeviceChangedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaDevice
{
	MediaDevice() = delete;
	static String GetAudioCaptureSelector();
	static String GetAudioRenderSelector();
	static String GetVideoCaptureSelector();
	static String GetDefaultAudioCaptureId(Windows::Media::Devices::AudioDeviceRole role);
	static String GetDefaultAudioRenderId(Windows::Media::Devices::AudioDeviceRole role);
	static EventRegistrationToken DefaultAudioCaptureDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken DefaultAudioCaptureDeviceChanged(F handler);
	static void DefaultAudioCaptureDeviceChanged(EventRegistrationToken cookie);
	static EventRegistrationToken DefaultAudioRenderDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken DefaultAudioRenderDeviceChanged(F handler);
	static void DefaultAudioRenderDeviceChanged(EventRegistrationToken cookie);
};

struct AudioDeviceController :
	Windows::Media::Devices::IAudioDeviceController
{
	AudioDeviceController(std::nullptr_t) noexcept {}
};

struct VideoDeviceController :
	Windows::Media::Devices::IVideoDeviceController,
	Requires<VideoDeviceController, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController, Windows::Media::Devices::IAdvancedVideoCaptureDeviceController2>
{
	VideoDeviceController(std::nullptr_t) noexcept {}
};

struct SceneModeControl :
	Windows::Media::Devices::ISceneModeControl
{
	SceneModeControl(std::nullptr_t) noexcept {}
};

struct TorchControl :
	Windows::Media::Devices::ITorchControl
{
	TorchControl(std::nullptr_t) noexcept {}
};

struct FlashControl :
	Windows::Media::Devices::IFlashControl
{
	FlashControl(std::nullptr_t) noexcept {}
};

struct ExposureCompensationControl :
	Windows::Media::Devices::IExposureCompensationControl
{
	ExposureCompensationControl(std::nullptr_t) noexcept {}
};

struct IsoSpeedControl :
	Windows::Media::Devices::IIsoSpeedControl
{
	IsoSpeedControl(std::nullptr_t) noexcept {}
};

struct WhiteBalanceControl :
	Windows::Media::Devices::IWhiteBalanceControl
{
	WhiteBalanceControl(std::nullptr_t) noexcept {}
};

struct ExposureControl :
	Windows::Media::Devices::IExposureControl
{
	ExposureControl(std::nullptr_t) noexcept {}
};

struct FocusControl :
	Windows::Media::Devices::IFocusControl
{
	FocusControl(std::nullptr_t) noexcept {}
};

struct RegionOfInterest :
	Windows::Media::Devices::IRegionOfInterest
{
	RegionOfInterest(std::nullptr_t) noexcept {}
	RegionOfInterest();
};

struct RegionsOfInterestControl :
	Windows::Media::Devices::IRegionsOfInterestControl
{
	RegionsOfInterestControl(std::nullptr_t) noexcept {}
};

struct MediaDeviceControl :
	Windows::Media::Devices::IMediaDeviceControl
{
	MediaDeviceControl(std::nullptr_t) noexcept {}
};

struct LowLagPhotoSequenceControl :
	Windows::Media::Devices::ILowLagPhotoSequenceControl
{
	LowLagPhotoSequenceControl(std::nullptr_t) noexcept {}
};

struct LowLagPhotoControl :
	Windows::Media::Devices::ILowLagPhotoControl
{
	LowLagPhotoControl(std::nullptr_t) noexcept {}
};

struct MediaDeviceControlCapabilities :
	Windows::Media::Devices::IMediaDeviceControlCapabilities
{
	MediaDeviceControlCapabilities(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

struct AudioEffect :
	Windows::Media::Effects::IAudioEffect
{
	AudioEffect(std::nullptr_t) noexcept {}
};

struct AudioRenderEffectsManager :
	Windows::Media::Effects::IAudioRenderEffectsManager
{
	AudioRenderEffectsManager(std::nullptr_t) noexcept {}
};

struct AudioCaptureEffectsManager :
	Windows::Media::Effects::IAudioCaptureEffectsManager
{
	AudioCaptureEffectsManager(std::nullptr_t) noexcept {}
};

struct AudioEffectsManager
{
	AudioEffectsManager() = delete;
	static Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory category);
	template <unsigned S0> static Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory category);
	static Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory category, Windows::Media::AudioProcessing mode);
	template <unsigned S0> static Windows::Media::Effects::AudioRenderEffectsManager CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory category, Windows::Media::AudioProcessing mode);
	static Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory category);
	template <unsigned S0> static Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory category);
	static Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory category, Windows::Media::AudioProcessing mode);
	template <unsigned S0> static Windows::Media::Effects::AudioCaptureEffectsManager CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory category, Windows::Media::AudioProcessing mode);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

struct MediaRatio :
	Windows::Media::MediaProperties::IMediaRatio
{
	MediaRatio(std::nullptr_t) noexcept {}
};

struct MediaPropertySet :
	Windows::Foundation::Collections::IMap<GUID, IInspectable>
{
	MediaPropertySet(std::nullptr_t) noexcept {}
	MediaPropertySet();
};

struct AudioEncodingProperties :
	Windows::Media::MediaProperties::IAudioEncodingProperties,
	Requires<AudioEncodingProperties, Windows::Media::MediaProperties::IAudioEncodingPropertiesWithFormatUserData>
{
	AudioEncodingProperties(std::nullptr_t) noexcept {}
	AudioEncodingProperties();
	static Windows::Media::MediaProperties::AudioEncodingProperties CreateAac(unsigned sampleRate, unsigned channelCount, unsigned bitrate);
	static Windows::Media::MediaProperties::AudioEncodingProperties CreateAacAdts(unsigned sampleRate, unsigned channelCount, unsigned bitrate);
	static Windows::Media::MediaProperties::AudioEncodingProperties CreateMp3(unsigned sampleRate, unsigned channelCount, unsigned bitrate);
	static Windows::Media::MediaProperties::AudioEncodingProperties CreatePcm(unsigned sampleRate, unsigned channelCount, unsigned bitsPerSample);
	static Windows::Media::MediaProperties::AudioEncodingProperties CreateWma(unsigned sampleRate, unsigned channelCount, unsigned bitrate);
};

struct MediaEncodingSubtypes
{
	MediaEncodingSubtypes() = delete;
	static String Aac();
	static String AacAdts();
	static String Ac3();
	static String AmrNb();
	static String AmrWb();
	static String Argb32();
	static String Asf();
	static String Avi();
	static String Bgra8();
	static String Bmp();
	static String Eac3();
	static String Float();
	static String Gif();
	static String H263();
	static String H264();
	static String H264Es();
	static String Hevc();
	static String HevcEs();
	static String Iyuv();
	static String Jpeg();
	static String JpegXr();
	static String Mjpg();
	static String Mpeg();
	static String Mpeg1();
	static String Mpeg2();
	static String Mp3();
	static String Mpeg4();
	static String Nv12();
	static String Pcm();
	static String Png();
	static String Rgb24();
	static String Rgb32();
	static String Tiff();
	static String Wave();
	static String Wma8();
	static String Wma9();
	static String Wmv3();
	static String Wvc1();
	static String Yuy2();
	static String Yv12();
};

struct H264ProfileIds
{
	H264ProfileIds() = delete;
	static int ConstrainedBaseline();
	static int Baseline();
	static int Extended();
	static int Main();
	static int High();
	static int High10();
	static int High422();
	static int High444();
	static int StereoHigh();
	static int MultiviewHigh();
};

struct Mpeg2ProfileIds
{
	Mpeg2ProfileIds() = delete;
	static int Simple();
	static int Main();
	static int SignalNoiseRatioScalable();
	static int SpatiallyScalable();
	static int High();
};

struct VideoEncodingProperties :
	Windows::Media::MediaProperties::IVideoEncodingProperties,
	Requires<VideoEncodingProperties, Windows::Media::MediaProperties::IVideoEncodingProperties2>
{
	VideoEncodingProperties(std::nullptr_t) noexcept {}
	VideoEncodingProperties();
	static Windows::Media::MediaProperties::VideoEncodingProperties CreateH264();
	static Windows::Media::MediaProperties::VideoEncodingProperties CreateMpeg2();
	static Windows::Media::MediaProperties::VideoEncodingProperties CreateUncompressed(String const & subtype, unsigned width, unsigned height);
	template <unsigned S0> static Windows::Media::MediaProperties::VideoEncodingProperties CreateUncompressed(wchar_t const (&subtype)[S0], unsigned width, unsigned height);
};

struct ImageEncodingProperties :
	Windows::Media::MediaProperties::IImageEncodingProperties
{
	ImageEncodingProperties(std::nullptr_t) noexcept {}
	ImageEncodingProperties();
	static Windows::Media::MediaProperties::ImageEncodingProperties CreateJpeg();
	static Windows::Media::MediaProperties::ImageEncodingProperties CreatePng();
	static Windows::Media::MediaProperties::ImageEncodingProperties CreateJpegXR();
	static Windows::Media::MediaProperties::ImageEncodingProperties CreateUncompressed(Windows::Media::MediaProperties::MediaPixelFormat format);
	static Windows::Media::MediaProperties::ImageEncodingProperties CreateBmp();
};

struct ContainerEncodingProperties :
	Windows::Media::MediaProperties::IContainerEncodingProperties
{
	ContainerEncodingProperties(std::nullptr_t) noexcept {}
	ContainerEncodingProperties();
};

struct MediaEncodingProfile :
	Windows::Media::MediaProperties::IMediaEncodingProfile
{
	MediaEncodingProfile(std::nullptr_t) noexcept {}
	MediaEncodingProfile();
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateM4a(Windows::Media::MediaProperties::AudioEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateMp3(Windows::Media::MediaProperties::AudioEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateWma(Windows::Media::MediaProperties::AudioEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateMp4(Windows::Media::MediaProperties::VideoEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateWmv(Windows::Media::MediaProperties::VideoEncodingQuality quality);
	static Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> CreateFromFileAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> CreateFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateWav(Windows::Media::MediaProperties::AudioEncodingQuality quality);
	static Windows::Media::MediaProperties::MediaEncodingProfile CreateAvi(Windows::Media::MediaProperties::VideoEncodingQuality quality);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

struct SourceChangeRequestedEventArgs :
	Windows::Media::PlayTo::ISourceChangeRequestedEventArgs
{
	SourceChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PlaybackRateChangeRequestedEventArgs :
	Windows::Media::PlayTo::IPlaybackRateChangeRequestedEventArgs
{
	PlaybackRateChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct CurrentTimeChangeRequestedEventArgs :
	Windows::Media::PlayTo::ICurrentTimeChangeRequestedEventArgs
{
	CurrentTimeChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct MuteChangeRequestedEventArgs :
	Windows::Media::PlayTo::IMuteChangeRequestedEventArgs
{
	MuteChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct VolumeChangeRequestedEventArgs :
	Windows::Media::PlayTo::IVolumeChangeRequestedEventArgs
{
	VolumeChangeRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToReceiver :
	Windows::Media::PlayTo::IPlayToReceiver
{
	PlayToReceiver(std::nullptr_t) noexcept {}
	PlayToReceiver();
};

struct PlayToConnection :
	Windows::Media::PlayTo::IPlayToConnection
{
	PlayToConnection(std::nullptr_t) noexcept {}
};

struct PlayToSource :
	Windows::Media::PlayTo::IPlayToSource,
	Requires<PlayToSource, Windows::Media::PlayTo::IPlayToSourceWithPreferredSourceUri>
{
	PlayToSource(std::nullptr_t) noexcept {}
};

struct PlayToConnectionStateChangedEventArgs :
	Windows::Media::PlayTo::IPlayToConnectionStateChangedEventArgs
{
	PlayToConnectionStateChangedEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToConnectionTransferredEventArgs :
	Windows::Media::PlayTo::IPlayToConnectionTransferredEventArgs
{
	PlayToConnectionTransferredEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToConnectionErrorEventArgs :
	Windows::Media::PlayTo::IPlayToConnectionErrorEventArgs
{
	PlayToConnectionErrorEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToSourceSelectedEventArgs :
	Windows::Media::PlayTo::IPlayToSourceSelectedEventArgs
{
	PlayToSourceSelectedEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToSourceDeferral :
	Windows::Media::PlayTo::IPlayToSourceDeferral
{
	PlayToSourceDeferral(std::nullptr_t) noexcept {}
};

struct PlayToSourceRequest :
	Windows::Media::PlayTo::IPlayToSourceRequest
{
	PlayToSourceRequest(std::nullptr_t) noexcept {}
};

struct PlayToSourceRequestedEventArgs :
	Windows::Media::PlayTo::IPlayToSourceRequestedEventArgs
{
	PlayToSourceRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PlayToManager :
	Windows::Media::PlayTo::IPlayToManager
{
	PlayToManager(std::nullptr_t) noexcept {}
	static Windows::Media::PlayTo::PlayToManager GetForCurrentView();
	static void ShowPlayToUI();
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

struct Playlist :
	Windows::Media::Playlists::IPlaylist
{
	Playlist(std::nullptr_t) noexcept {}
	Playlist();
	static Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> LoadAsync(Windows::Storage::IStorageFile const & file);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

struct MediaProtectionManager :
	Windows::Media::Protection::IMediaProtectionManager
{
	MediaProtectionManager(std::nullptr_t) noexcept {}
	MediaProtectionManager();
};

struct ServiceRequestedEventArgs :
	Windows::Media::Protection::IServiceRequestedEventArgs
{
	ServiceRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct ComponentLoadFailedEventArgs :
	Windows::Media::Protection::IComponentLoadFailedEventArgs
{
	ComponentLoadFailedEventArgs(std::nullptr_t) noexcept {}
};

struct MediaProtectionServiceCompletion :
	Windows::Media::Protection::IMediaProtectionServiceCompletion
{
	MediaProtectionServiceCompletion(std::nullptr_t) noexcept {}
};

struct RevocationAndRenewalInformation :
	Windows::Media::Protection::IRevocationAndRenewalInformation
{
	RevocationAndRenewalInformation(std::nullptr_t) noexcept {}
};

struct RevocationAndRenewalItem :
	Windows::Media::Protection::IRevocationAndRenewalItem
{
	RevocationAndRenewalItem(std::nullptr_t) noexcept {}
};

struct ComponentRenewal
{
	ComponentRenewal() = delete;
	static Windows::Foundation::IAsyncOperationWithProgress<Modern::Windows::Media::Protection::RenewalStatus, unsigned> RenewSystemComponentsAsync(Windows::Media::Protection::RevocationAndRenewalInformation const & information);
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

struct VoiceInformation :
	Windows::Media::SpeechSynthesis::IVoiceInformation
{
	VoiceInformation(std::nullptr_t) noexcept {}
};

struct SpeechSynthesisStream :
	Windows::Media::SpeechSynthesis::ISpeechSynthesisStream
{
	SpeechSynthesisStream(std::nullptr_t) noexcept {}
};

struct SpeechSynthesizer :
	Windows::Media::SpeechSynthesis::ISpeechSynthesizer
{
	SpeechSynthesizer(std::nullptr_t) noexcept {}
	SpeechSynthesizer();
	static Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> AllVoices();
	static Windows::Media::SpeechSynthesis::VoiceInformation DefaultVoice();
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

struct BasicDevice :
	Windows::Media::Streaming::IBasicDevice
{
	BasicDevice(std::nullptr_t) noexcept {}
	BasicDevice();
};

struct ActiveBasicDevice :
	Windows::Media::Streaming::IActiveBasicDevice
{
	ActiveBasicDevice(std::nullptr_t) noexcept {}
	ActiveBasicDevice();
};

struct DevicePair :
	Windows::Media::Streaming::IDevicePair
{
	DevicePair(std::nullptr_t) noexcept {}
};

struct DeviceController :
	Windows::Media::Streaming::IDeviceController
{
	DeviceController(std::nullptr_t) noexcept {}
	DeviceController();
};

struct MediaRenderer :
	Windows::Media::Streaming::IMediaRenderer
{
	MediaRenderer(std::nullptr_t) noexcept {}
	MediaRenderer();
};

struct CreateMediaRendererOperation :
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::MediaRenderer>
{
	CreateMediaRendererOperation(std::nullptr_t) noexcept {}
};

struct StreamSelector
{
	StreamSelector() = delete;
};

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

struct PrepareTranscodeResult :
	Windows::Media::Transcoding::IPrepareTranscodeResult
{
	PrepareTranscodeResult(std::nullptr_t) noexcept {}
};

struct MediaTranscoder :
	Windows::Media::Transcoding::IMediaTranscoder,
	Requires<MediaTranscoder, Windows::Media::Transcoding::IMediaTranscoder2>
{
	MediaTranscoder(std::nullptr_t) noexcept {}
	MediaTranscoder();
};

}}}}

namespace Modern { namespace Windows { namespace Networking {

struct EndpointPair :
	Windows::Networking::IEndpointPair
{
	EndpointPair(std::nullptr_t) noexcept {}
	EndpointPair(Windows::Networking::HostName const & localHostName, String const & localServiceName, Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName);
	template <unsigned S0, unsigned S1> EndpointPair(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0], Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S1]);
};

struct HostName :
	Windows::Networking::IHostName,
	Requires<HostName, Windows::Foundation::IStringable>
{
	HostName(std::nullptr_t) noexcept {}
	HostName(String const & hostName);
	template <unsigned S0> HostName(wchar_t const (&hostName)[S0]);
	static int Compare(String const & value1, String const & value2);
	template <unsigned S0, unsigned S1> static int Compare(wchar_t const (&value1)[S0], wchar_t const (&value2)[S1]);
};

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

struct DownloadOperation :
	Windows::Networking::BackgroundTransfer::IDownloadOperation,
	Requires<DownloadOperation, Windows::Networking::BackgroundTransfer::IBackgroundTransferOperationPriority, Windows::Networking::BackgroundTransfer::IDownloadOperation2>
{
	DownloadOperation(std::nullptr_t) noexcept {}
};

struct UnconstrainedTransferRequestResult :
	Windows::Networking::BackgroundTransfer::IUnconstrainedTransferRequestResult
{
	UnconstrainedTransferRequestResult(std::nullptr_t) noexcept {}
};

struct UploadOperation :
	Windows::Networking::BackgroundTransfer::IUploadOperation,
	Requires<UploadOperation, Windows::Networking::BackgroundTransfer::IBackgroundTransferOperationPriority, Windows::Networking::BackgroundTransfer::IUploadOperation2>
{
	UploadOperation(std::nullptr_t) noexcept {}
};

struct BackgroundTransferGroup :
	Windows::Networking::BackgroundTransfer::IBackgroundTransferGroup
{
	BackgroundTransferGroup(std::nullptr_t) noexcept {}
	static Windows::Networking::BackgroundTransfer::BackgroundTransferGroup CreateGroup(String const & name);
	template <unsigned S0> static Windows::Networking::BackgroundTransfer::BackgroundTransferGroup CreateGroup(wchar_t const (&name)[S0]);
};

struct BackgroundTransferContentPart :
	Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart
{
	BackgroundTransferContentPart(std::nullptr_t) noexcept {}
	BackgroundTransferContentPart();
	BackgroundTransferContentPart(String const & name);
	template <unsigned S0> BackgroundTransferContentPart(wchar_t const (&name)[S0]);
	BackgroundTransferContentPart(String const & name, String const & fileName);
	template <unsigned S0, unsigned S1> BackgroundTransferContentPart(wchar_t const (&name)[S0], wchar_t const (&fileName)[S1]);
};

struct ResponseInformation :
	Windows::Networking::BackgroundTransfer::IResponseInformation
{
	ResponseInformation(std::nullptr_t) noexcept {}
};

struct BackgroundDownloader :
	Windows::Networking::BackgroundTransfer::IBackgroundDownloader,
	Requires<BackgroundDownloader, Windows::Networking::BackgroundTransfer::IBackgroundDownloader2>
{
	BackgroundDownloader(std::nullptr_t) noexcept {}
	BackgroundDownloader();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> GetCurrentDownloadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group);
	static Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> RequestUnconstrainedDownloadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::DownloadOperation> const & operations);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> GetCurrentDownloadsAsync();
};

struct BackgroundUploader :
	Windows::Networking::BackgroundTransfer::IBackgroundUploader,
	Requires<BackgroundUploader, Windows::Networking::BackgroundTransfer::IBackgroundUploader2>
{
	BackgroundUploader(std::nullptr_t) noexcept {}
	BackgroundUploader();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> GetCurrentUploadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group);
	static Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> RequestUnconstrainedUploadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::UploadOperation> const & operations);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> GetCurrentUploadsAsync();
};

struct BackgroundTransferError
{
	BackgroundTransferError() = delete;
	static Windows::Web::WebErrorStatus GetStatus(int hresult);
};

struct ContentPrefetcher
{
	ContentPrefetcher() = delete;
	static Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> ContentUris();
	static void IndirectContentUri(Windows::Foundation::Uri const & value);
	static Windows::Foundation::Uri IndirectContentUri();
	static Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> LastSuccessfulPrefetchTime();
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

struct IPInformation :
	Windows::Networking::Connectivity::IIPInformation
{
	IPInformation(std::nullptr_t) noexcept {}
};

struct DataPlanUsage :
	Windows::Networking::Connectivity::IDataPlanUsage
{
	DataPlanUsage(std::nullptr_t) noexcept {}
};

struct ConnectionCost :
	Windows::Networking::Connectivity::IConnectionCost
{
	ConnectionCost(std::nullptr_t) noexcept {}
};

struct DataPlanStatus :
	Windows::Networking::Connectivity::IDataPlanStatus
{
	DataPlanStatus(std::nullptr_t) noexcept {}
};

struct NetworkAdapter :
	Windows::Networking::Connectivity::INetworkAdapter
{
	NetworkAdapter(std::nullptr_t) noexcept {}
};

struct NetworkSecuritySettings :
	Windows::Networking::Connectivity::INetworkSecuritySettings
{
	NetworkSecuritySettings(std::nullptr_t) noexcept {}
};

struct WwanConnectionProfileDetails :
	Windows::Networking::Connectivity::IWwanConnectionProfileDetails
{
	WwanConnectionProfileDetails(std::nullptr_t) noexcept {}
};

struct WlanConnectionProfileDetails :
	Windows::Networking::Connectivity::IWlanConnectionProfileDetails
{
	WlanConnectionProfileDetails(std::nullptr_t) noexcept {}
};

struct NetworkUsage :
	Windows::Networking::Connectivity::INetworkUsage
{
	NetworkUsage(std::nullptr_t) noexcept {}
};

struct ConnectivityInterval :
	Windows::Networking::Connectivity::IConnectivityInterval
{
	ConnectivityInterval(std::nullptr_t) noexcept {}
};

struct LanIdentifierData :
	Windows::Networking::Connectivity::ILanIdentifierData
{
	LanIdentifierData(std::nullptr_t) noexcept {}
};

struct ConnectionProfile :
	Windows::Networking::Connectivity::IConnectionProfile,
	Requires<ConnectionProfile, Windows::Networking::Connectivity::IConnectionProfile2>
{
	ConnectionProfile(std::nullptr_t) noexcept {}
};

struct LanIdentifier :
	Windows::Networking::Connectivity::ILanIdentifier
{
	LanIdentifier(std::nullptr_t) noexcept {}
};

struct ProxyConfiguration :
	Windows::Networking::Connectivity::IProxyConfiguration
{
	ProxyConfiguration(std::nullptr_t) noexcept {}
};

struct ConnectionProfileFilter :
	Windows::Networking::Connectivity::IConnectionProfileFilter
{
	ConnectionProfileFilter(std::nullptr_t) noexcept {}
	ConnectionProfileFilter();
};

struct NetworkItem :
	Windows::Networking::Connectivity::INetworkItem
{
	NetworkItem(std::nullptr_t) noexcept {}
};

struct RoutePolicy :
	Windows::Networking::Connectivity::IRoutePolicy
{
	RoutePolicy(std::nullptr_t) noexcept {}
	RoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType type);
};

struct CellularApnContext :
	Windows::Networking::Connectivity::ICellularApnContext
{
	CellularApnContext(std::nullptr_t) noexcept {}
	CellularApnContext();
};

struct ConnectionSession :
	Windows::Networking::Connectivity::IConnectionSession
{
	ConnectionSession(std::nullptr_t) noexcept {}
};

struct NetworkInformation
{
	NetworkInformation() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter);
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> GetConnectionProfiles();
	static Windows::Networking::Connectivity::ConnectionProfile GetInternetConnectionProfile();
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> GetLanIdentifiers();
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> GetHostNames();
	static Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions sortOptions);
	static EventRegistrationToken NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler);
	template <typename F> static EventRegistrationToken NetworkStatusChanged(F networkStatusHandler);
	static void NetworkStatusChanged(EventRegistrationToken eventCookie);
};

struct ConnectivityManager
{
	ConnectivityManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext);
	static void AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy);
	static void RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy);
};

struct NetworkStateChangeEventDetails :
	Windows::Networking::Connectivity::INetworkStateChangeEventDetails
{
	NetworkStateChangeEventDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

struct MobileBroadbandAccount :
	Windows::Networking::NetworkOperators::IMobileBroadbandAccount,
	Requires<MobileBroadbandAccount, Windows::Networking::NetworkOperators::IMobileBroadbandAccount2>
{
	MobileBroadbandAccount(std::nullptr_t) noexcept {}
	static Windows::Foundation::Collections::IVectorView<String> AvailableNetworkAccountIds();
	static Windows::Networking::NetworkOperators::MobileBroadbandAccount CreateFromNetworkAccountId(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::MobileBroadbandAccount CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]);
};

struct MobileBroadbandNetwork :
	Windows::Networking::NetworkOperators::IMobileBroadbandNetwork
{
	MobileBroadbandNetwork(std::nullptr_t) noexcept {}
};

struct MobileBroadbandDeviceInformation :
	Windows::Networking::NetworkOperators::IMobileBroadbandDeviceInformation
{
	MobileBroadbandDeviceInformation(std::nullptr_t) noexcept {}
};

struct NetworkOperatorNotificationEventDetails :
	Windows::Networking::NetworkOperators::INetworkOperatorNotificationEventDetails,
	Requires<NetworkOperatorNotificationEventDetails, Windows::Networking::NetworkOperators::INetworkOperatorTetheringEntitlementCheck>
{
	NetworkOperatorNotificationEventDetails(std::nullptr_t) noexcept {}
};

struct NetworkOperatorTetheringAccessPointConfiguration :
	Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration
{
	NetworkOperatorTetheringAccessPointConfiguration(std::nullptr_t) noexcept {}
	NetworkOperatorTetheringAccessPointConfiguration();
};

struct NetworkOperatorTetheringOperationResult :
	Windows::Networking::NetworkOperators::INetworkOperatorTetheringOperationResult
{
	NetworkOperatorTetheringOperationResult(std::nullptr_t) noexcept {}
};

struct NetworkOperatorTetheringManager :
	Windows::Networking::NetworkOperators::INetworkOperatorTetheringManager
{
	NetworkOperatorTetheringManager(std::nullptr_t) noexcept {}
	static Windows::Networking::NetworkOperators::TetheringCapability GetTetheringCapability(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::TetheringCapability GetTetheringCapability(wchar_t const (&networkAccountId)[S0]);
	static Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager CreateFromNetworkAccountId(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]);
};

struct MobileBroadbandAccountEventArgs :
	Windows::Networking::NetworkOperators::IMobileBroadbandAccountEventArgs
{
	MobileBroadbandAccountEventArgs(std::nullptr_t) noexcept {}
};

struct MobileBroadbandAccountUpdatedEventArgs :
	Windows::Networking::NetworkOperators::IMobileBroadbandAccountUpdatedEventArgs
{
	MobileBroadbandAccountUpdatedEventArgs(std::nullptr_t) noexcept {}
};

struct MobileBroadbandAccountWatcher :
	Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher
{
	MobileBroadbandAccountWatcher(std::nullptr_t) noexcept {}
	MobileBroadbandAccountWatcher();
};

struct HotspotAuthenticationEventDetails :
	Windows::Networking::NetworkOperators::IHotspotAuthenticationEventDetails
{
	HotspotAuthenticationEventDetails(std::nullptr_t) noexcept {}
};

struct HotspotAuthenticationContext :
	Windows::Networking::NetworkOperators::IHotspotAuthenticationContext,
	Requires<HotspotAuthenticationContext, Windows::Networking::NetworkOperators::IHotspotAuthenticationContext2>
{
	HotspotAuthenticationContext(std::nullptr_t) noexcept {}
	static bool TryGetAuthenticationContext(String const & evenToken, Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context);
	template <unsigned S0> static bool TryGetAuthenticationContext(wchar_t const (&evenToken)[S0], Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context);
};

struct HotspotCredentialsAuthenticationResult :
	Windows::Networking::NetworkOperators::IHotspotCredentialsAuthenticationResult
{
	HotspotCredentialsAuthenticationResult(std::nullptr_t) noexcept {}
};

struct ProvisionFromXmlDocumentResults :
	Windows::Networking::NetworkOperators::IProvisionFromXmlDocumentResults
{
	ProvisionFromXmlDocumentResults(std::nullptr_t) noexcept {}
};

struct ProvisionedProfile :
	Windows::Networking::NetworkOperators::IProvisionedProfile
{
	ProvisionedProfile(std::nullptr_t) noexcept {}
};

struct ProvisioningAgent :
	Windows::Networking::NetworkOperators::IProvisioningAgent
{
	ProvisioningAgent(std::nullptr_t) noexcept {}
	ProvisioningAgent();
	static Windows::Networking::NetworkOperators::ProvisioningAgent CreateFromNetworkAccountId(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::ProvisioningAgent CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]);
};

struct UssdMessage :
	Windows::Networking::NetworkOperators::IUssdMessage
{
	UssdMessage(std::nullptr_t) noexcept {}
	UssdMessage(String const & messageText);
	template <unsigned S0> UssdMessage(wchar_t const (&messageText)[S0]);
};

struct UssdReply :
	Windows::Networking::NetworkOperators::IUssdReply
{
	UssdReply(std::nullptr_t) noexcept {}
};

struct UssdSession :
	Windows::Networking::NetworkOperators::IUssdSession
{
	UssdSession(std::nullptr_t) noexcept {}
	static Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkAccountId(String const & networkAccountId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]);
	static Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkInterfaceId(String const & networkInterfaceId);
	template <unsigned S0> static Windows::Networking::NetworkOperators::UssdSession CreateFromNetworkInterfaceId(wchar_t const (&networkInterfaceId)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

struct ProximityMessage :
	Windows::Networking::Proximity::IProximityMessage
{
	ProximityMessage(std::nullptr_t) noexcept {}
};

struct ProximityDevice :
	Windows::Networking::Proximity::IProximityDevice
{
	ProximityDevice(std::nullptr_t) noexcept {}
	static String GetDeviceSelector();
	static Windows::Networking::Proximity::ProximityDevice GetDefault();
	static Windows::Networking::Proximity::ProximityDevice FromId(String const & deviceId);
	template <unsigned S0> static Windows::Networking::Proximity::ProximityDevice FromId(wchar_t const (&deviceId)[S0]);
};

struct TriggeredConnectionStateChangedEventArgs :
	Windows::Networking::Proximity::ITriggeredConnectionStateChangedEventArgs
{
	TriggeredConnectionStateChangedEventArgs(std::nullptr_t) noexcept {}
};

struct PeerInformation :
	Windows::Networking::Proximity::IPeerInformation,
	Requires<PeerInformation, Windows::Networking::Proximity::IPeerInformation3>
{
	PeerInformation(std::nullptr_t) noexcept {}
};

struct ConnectionRequestedEventArgs :
	Windows::Networking::Proximity::IConnectionRequestedEventArgs
{
	ConnectionRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PeerWatcher :
	Windows::Networking::Proximity::IPeerWatcher
{
	PeerWatcher(std::nullptr_t) noexcept {}
};

struct PeerFinder
{
	PeerFinder() = delete;
	static Windows::Networking::Proximity::PeerRole Role();
	static void Role(Windows::Networking::Proximity::PeerRole value);
	static Windows::Storage::Streams::IBuffer DiscoveryData();
	static void DiscoveryData(Windows::Storage::Streams::IBuffer const & value);
	static Windows::Networking::Proximity::PeerWatcher CreateWatcher();
	static bool AllowBluetooth();
	static void AllowBluetooth(bool value);
	static bool AllowInfrastructure();
	static void AllowInfrastructure(bool value);
	static bool AllowWiFiDirect();
	static void AllowWiFiDirect(bool value);
	static String DisplayName();
	static void DisplayName(String const & value);
	template <unsigned S0> static void DisplayName(wchar_t const (&value)[S0]);
	static Windows::Networking::Proximity::PeerDiscoveryTypes SupportedDiscoveryTypes();
	static Windows::Foundation::Collections::IMap<String, String> AlternateIdentities();
	static void Start();
	static void Start(String const & peerMessage);
	template <unsigned S0> static void Start(wchar_t const (&peerMessage)[S0]);
	static void Stop();
	static EventRegistrationToken TriggeredConnectionStateChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken TriggeredConnectionStateChanged(F handler);
	static void TriggeredConnectionStateChanged(EventRegistrationToken cookie);
	static EventRegistrationToken ConnectionRequested(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs> const & handler);
	template <typename F> static EventRegistrationToken ConnectionRequested(F handler);
	static void ConnectionRequested(EventRegistrationToken cookie);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> FindAllPeersAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> ConnectAsync(Windows::Networking::Proximity::PeerInformation const & peerInformation);
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

struct PushNotificationChannel :
	Windows::Networking::PushNotifications::IPushNotificationChannel
{
	PushNotificationChannel(std::nullptr_t) noexcept {}
};

struct PushNotificationReceivedEventArgs :
	Windows::Networking::PushNotifications::IPushNotificationReceivedEventArgs
{
	PushNotificationReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct RawNotification :
	Windows::Networking::PushNotifications::IRawNotification
{
	RawNotification(std::nullptr_t) noexcept {}
};

struct PushNotificationChannelManager
{
	PushNotificationChannelManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(String const & applicationId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForApplicationAsync(wchar_t const (&applicationId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(String const & tileId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> CreatePushNotificationChannelForSecondaryTileAsync(wchar_t const (&tileId)[S0]);
};

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

struct ControlChannelTrigger :
	Windows::Networking::Sockets::IControlChannelTrigger
{
	ControlChannelTrigger(std::nullptr_t) noexcept {}
	ControlChannelTrigger(String const & channelId, unsigned serverKeepAliveIntervalInMinutes);
	template <unsigned S0> ControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned serverKeepAliveIntervalInMinutes);
	ControlChannelTrigger(String const & channelId, unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType);
	template <unsigned S0> ControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType);
};

struct DatagramSocketControl :
	Windows::Networking::Sockets::IDatagramSocketControl,
	Requires<DatagramSocketControl, Windows::Networking::Sockets::IDatagramSocketControl2>
{
	DatagramSocketControl(std::nullptr_t) noexcept {}
};

struct DatagramSocketInformation :
	Windows::Networking::Sockets::IDatagramSocketInformation
{
	DatagramSocketInformation(std::nullptr_t) noexcept {}
};

struct DatagramSocket :
	Windows::Networking::Sockets::IDatagramSocket,
	Requires<DatagramSocket, Windows::Networking::Sockets::IDatagramSocket2>
{
	DatagramSocket(std::nullptr_t) noexcept {}
	DatagramSocket();
	using impl_IDatagramSocket::BindServiceNameAsync;
	using impl_IDatagramSocket2::BindServiceNameAsync;
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::HostNameSortOptions sortOptions);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::HostNameSortOptions sortOptions);
};

struct DatagramSocketMessageReceivedEventArgs :
	Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs
{
	DatagramSocketMessageReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct StreamSocketControl :
	Windows::Networking::Sockets::IStreamSocketControl,
	Requires<StreamSocketControl, Windows::Networking::Sockets::IStreamSocketControl2>
{
	StreamSocketControl(std::nullptr_t) noexcept {}
};

struct StreamSocketInformation :
	Windows::Networking::Sockets::IStreamSocketInformation,
	Requires<StreamSocketInformation, Windows::Networking::Sockets::IStreamSocketInformation2>
{
	StreamSocketInformation(std::nullptr_t) noexcept {}
};

struct StreamSocket :
	Windows::Networking::Sockets::IStreamSocket,
	Requires<StreamSocket, Windows::Networking::Sockets::IStreamSocket2>
{
	StreamSocket(std::nullptr_t) noexcept {}
	StreamSocket();
	using impl_IStreamSocket::ConnectAsync;
	using impl_IStreamSocket2::ConnectAsync;
};

struct StreamSocketListenerControl :
	Windows::Networking::Sockets::IStreamSocketListenerControl
{
	StreamSocketListenerControl(std::nullptr_t) noexcept {}
};

struct StreamSocketListenerInformation :
	Windows::Networking::Sockets::IStreamSocketListenerInformation
{
	StreamSocketListenerInformation(std::nullptr_t) noexcept {}
};

struct StreamSocketListener :
	Windows::Networking::Sockets::IStreamSocketListener,
	Requires<StreamSocketListener, Windows::Networking::Sockets::IStreamSocketListener2>
{
	StreamSocketListener(std::nullptr_t) noexcept {}
	StreamSocketListener();
	using impl_IStreamSocketListener::BindServiceNameAsync;
	using impl_IStreamSocketListener2::BindServiceNameAsync;
};

struct StreamSocketListenerConnectionReceivedEventArgs :
	Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs
{
	StreamSocketListenerConnectionReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct WebSocketClosedEventArgs :
	Windows::Networking::Sockets::IWebSocketClosedEventArgs
{
	WebSocketClosedEventArgs(std::nullptr_t) noexcept {}
};

struct MessageWebSocketControl :
	Windows::Networking::Sockets::IMessageWebSocketControl
{
	MessageWebSocketControl(std::nullptr_t) noexcept {}
};

struct MessageWebSocketInformation :
	Windows::Networking::Sockets::IWebSocketInformation
{
	MessageWebSocketInformation(std::nullptr_t) noexcept {}
};

struct MessageWebSocket :
	Windows::Networking::Sockets::IMessageWebSocket
{
	MessageWebSocket(std::nullptr_t) noexcept {}
	MessageWebSocket();
};

struct MessageWebSocketMessageReceivedEventArgs :
	Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs
{
	MessageWebSocketMessageReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct StreamWebSocketControl :
	Windows::Networking::Sockets::IStreamWebSocketControl
{
	StreamWebSocketControl(std::nullptr_t) noexcept {}
};

struct StreamWebSocketInformation :
	Windows::Networking::Sockets::IWebSocketInformation
{
	StreamWebSocketInformation(std::nullptr_t) noexcept {}
};

struct StreamWebSocket :
	Windows::Networking::Sockets::IStreamWebSocket
{
	StreamWebSocket(std::nullptr_t) noexcept {}
	StreamWebSocket();
};

struct WebSocketKeepAlive :
	Windows::ApplicationModel::Background::IBackgroundTask
{
	WebSocketKeepAlive(std::nullptr_t) noexcept {}
	WebSocketKeepAlive();
};

struct SocketError
{
	SocketError() = delete;
	static Windows::Networking::Sockets::SocketErrorStatus GetStatus(int hresult);
};

struct WebSocketError
{
	WebSocketError() = delete;
	static Windows::Web::WebErrorStatus GetStatus(int hresult);
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

struct OnlineIdServiceTicketRequest :
	Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest
{
	OnlineIdServiceTicketRequest(std::nullptr_t) noexcept {}
	OnlineIdServiceTicketRequest(String const & service, String const & policy);
	template <unsigned S0, unsigned S1> OnlineIdServiceTicketRequest(wchar_t const (&service)[S0], wchar_t const (&policy)[S1]);
	OnlineIdServiceTicketRequest(String const & service);
	template <unsigned S0> OnlineIdServiceTicketRequest(wchar_t const (&service)[S0]);
};

struct OnlineIdServiceTicket :
	Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicket
{
	OnlineIdServiceTicket(std::nullptr_t) noexcept {}
};

struct UserAuthenticationOperation :
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::OnlineId::UserIdentity>
{
	UserAuthenticationOperation(std::nullptr_t) noexcept {}
};

struct SignOutUserOperation :
	Windows::Foundation::IAsyncAction
{
	SignOutUserOperation(std::nullptr_t) noexcept {}
};

struct UserIdentity :
	Windows::Security::Authentication::OnlineId::IUserIdentity
{
	UserIdentity(std::nullptr_t) noexcept {}
};

struct OnlineIdAuthenticator :
	Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator
{
	OnlineIdAuthenticator(std::nullptr_t) noexcept {}
	OnlineIdAuthenticator();
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

struct WebAuthenticationResult :
	Windows::Security::Authentication::Web::IWebAuthenticationResult
{
	WebAuthenticationResult(std::nullptr_t) noexcept {}
};

struct WebAuthenticationBroker
{
	WebAuthenticationBroker() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri);
	static Windows::Foundation::Uri GetCurrentApplicationCallbackUri();
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

struct PasswordCredential :
	Windows::Security::Credentials::IPasswordCredential
{
	PasswordCredential(std::nullptr_t) noexcept {}
	PasswordCredential();
	PasswordCredential(String const & resource, String const & userName, String const & password);
	template <unsigned S0, unsigned S1, unsigned S2> PasswordCredential(wchar_t const (&resource)[S0], wchar_t const (&userName)[S1], wchar_t const (&password)[S2]);
};

struct PasswordVault :
	Windows::Security::Credentials::IPasswordVault
{
	PasswordVault(std::nullptr_t) noexcept {}
	PasswordVault();
};

struct PasswordCredentialPropertyStore :
	Windows::Foundation::Collections::IPropertySet
{
	PasswordCredentialPropertyStore(std::nullptr_t) noexcept {}
	PasswordCredentialPropertyStore();
};

struct WebAccountProvider :
	Windows::Security::Credentials::IWebAccountProvider
{
	WebAccountProvider(std::nullptr_t) noexcept {}
	WebAccountProvider(String const & id, String const & displayName, Windows::Foundation::Uri const & iconUri);
	template <unsigned S0, unsigned S1> WebAccountProvider(wchar_t const (&id)[S0], wchar_t const (&displayName)[S1], Windows::Foundation::Uri const & iconUri);
};

struct WebAccount :
	Windows::Security::Credentials::IWebAccount
{
	WebAccount(std::nullptr_t) noexcept {}
	WebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, String const & userName, Windows::Security::Credentials::WebAccountState state);
	template <unsigned S0> WebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, wchar_t const (&userName)[S0], Windows::Security::Credentials::WebAccountState state);
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

struct UserConsentVerifier
{
	UserConsentVerifier() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> CheckAvailabilityAsync();
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> RequestVerificationAsync(String const & message);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> RequestVerificationAsync(wchar_t const (&message)[S0]);
};

struct CredentialPickerOptions :
	Windows::Security::Credentials::UI::ICredentialPickerOptions
{
	CredentialPickerOptions(std::nullptr_t) noexcept {}
	CredentialPickerOptions();
};

struct CredentialPickerResults :
	Windows::Security::Credentials::UI::ICredentialPickerResults
{
	CredentialPickerResults(std::nullptr_t) noexcept {}
};

struct CredentialPicker
{
	CredentialPicker() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(Windows::Security::Credentials::UI::CredentialPickerOptions const & options);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(String const & targetName, String const & message);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1]);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(String const & targetName, String const & message, String const & caption);
	template <unsigned S0, unsigned S1, unsigned S2> static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1], wchar_t const (&caption)[S2]);
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

struct CryptographicBuffer
{
	CryptographicBuffer() = delete;
	static bool Compare(Windows::Storage::Streams::IBuffer const & object1, Windows::Storage::Streams::IBuffer const & object2);
	static Windows::Storage::Streams::IBuffer GenerateRandom(unsigned length);
	static unsigned GenerateRandomNumber();
	static Windows::Storage::Streams::IBuffer DecodeFromHexString(String const & value);
	template <unsigned S0> static Windows::Storage::Streams::IBuffer DecodeFromHexString(wchar_t const (&value)[S0]);
	static String EncodeToHexString(Windows::Storage::Streams::IBuffer const & buffer);
	static Windows::Storage::Streams::IBuffer DecodeFromBase64String(String const & value);
	template <unsigned S0> static Windows::Storage::Streams::IBuffer DecodeFromBase64String(wchar_t const (&value)[S0]);
	static String EncodeToBase64String(Windows::Storage::Streams::IBuffer const & buffer);
	static Windows::Storage::Streams::IBuffer ConvertStringToBinary(String const & value, Windows::Security::Cryptography::BinaryStringEncoding encoding);
	template <unsigned S0> static Windows::Storage::Streams::IBuffer ConvertStringToBinary(wchar_t const (&value)[S0], Windows::Security::Cryptography::BinaryStringEncoding encoding);
	static String ConvertBinaryToString(Windows::Security::Cryptography::BinaryStringEncoding encoding, Windows::Storage::Streams::IBuffer const & buffer);
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

struct Certificate :
	Windows::Security::Cryptography::Certificates::ICertificate
{
	Certificate(std::nullptr_t) noexcept {}
	Certificate(Windows::Storage::Streams::IBuffer const & certBlob);
};

struct CertificateRequestProperties :
	Windows::Security::Cryptography::Certificates::ICertificateRequestProperties,
	Requires<CertificateRequestProperties, Windows::Security::Cryptography::Certificates::ICertificateRequestProperties2>
{
	CertificateRequestProperties(std::nullptr_t) noexcept {}
	CertificateRequestProperties();
};

struct UserCertificateEnrollmentManager :
	Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager
{
	UserCertificateEnrollmentManager(std::nullptr_t) noexcept {}
};

struct CertificateEnrollmentManager
{
	CertificateEnrollmentManager() = delete;
	static Windows::Foundation::IAsyncOperation<String> CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request);
	static Windows::Foundation::IAsyncAction InstallCertificateAsync(String const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions installOption);
	template <unsigned S0> static Windows::Foundation::IAsyncAction InstallCertificateAsync(wchar_t const (&certificate)[S0], Windows::Security::Cryptography::Certificates::InstallOptions installOption);
	static Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName);
	template <unsigned S0, unsigned S1, unsigned S2> static Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2]);
	static Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager UserCertificateEnrollmentManager();
	static Windows::Foundation::IAsyncAction ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, String const & friendlyName, String const & keyStorageProvider);
	template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> static Windows::Foundation::IAsyncAction ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, wchar_t const (&friendlyName)[S2], wchar_t const (&keyStorageProvider)[S3]);
};

struct KeyAttestationHelper
{
	KeyAttestationHelper() = delete;
	static Windows::Foundation::IAsyncOperation<String> DecryptTpmAttestationCredentialAsync(String const & credential);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> DecryptTpmAttestationCredentialAsync(wchar_t const (&credential)[S0]);
	static String GetTpmAttestationCredentialId(String const & credential);
	template <unsigned S0> static String GetTpmAttestationCredentialId(wchar_t const (&credential)[S0]);
};

struct CertificateQuery :
	Windows::Security::Cryptography::Certificates::ICertificateQuery
{
	CertificateQuery(std::nullptr_t) noexcept {}
	CertificateQuery();
};

struct CertificateStore :
	Windows::Security::Cryptography::Certificates::ICertificateStore
{
	CertificateStore(std::nullptr_t) noexcept {}
};

struct CertificateStores
{
	CertificateStores() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query);
	static Windows::Security::Cryptography::Certificates::CertificateStore TrustedRootCertificationAuthorities();
	static Windows::Security::Cryptography::Certificates::CertificateStore IntermediateCertificationAuthorities();
	static Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(String const & storeName);
	template <unsigned S0> static Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(wchar_t const (&storeName)[S0]);
};

struct KeyAlgorithmNames
{
	KeyAlgorithmNames() = delete;
	static String Rsa();
	static String Dsa();
	static String Ecdh256();
	static String Ecdh384();
	static String Ecdh521();
	static String Ecdsa256();
	static String Ecdsa384();
	static String Ecdsa521();
};

struct KeyStorageProviderNames
{
	KeyStorageProviderNames() = delete;
	static String SoftwareKeyStorageProvider();
	static String SmartcardKeyStorageProvider();
	static String PlatformKeyStorageProvider();
};

struct ChainBuildingParameters :
	Windows::Security::Cryptography::Certificates::IChainBuildingParameters
{
	ChainBuildingParameters(std::nullptr_t) noexcept {}
	ChainBuildingParameters();
};

struct ChainValidationParameters :
	Windows::Security::Cryptography::Certificates::IChainValidationParameters
{
	ChainValidationParameters(std::nullptr_t) noexcept {}
	ChainValidationParameters();
};

struct CertificateChain :
	Windows::Security::Cryptography::Certificates::ICertificateChain
{
	CertificateChain(std::nullptr_t) noexcept {}
};

struct CmsTimestampInfo :
	Windows::Security::Cryptography::Certificates::ICmsTimestampInfo
{
	CmsTimestampInfo(std::nullptr_t) noexcept {}
};

struct CmsSignerInfo :
	Windows::Security::Cryptography::Certificates::ICmsSignerInfo
{
	CmsSignerInfo(std::nullptr_t) noexcept {}
	CmsSignerInfo();
};

struct CmsAttachedSignature :
	Windows::Security::Cryptography::Certificates::ICmsAttachedSignature
{
	CmsAttachedSignature(std::nullptr_t) noexcept {}
	CmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates);
};

struct CmsDetachedSignature :
	Windows::Security::Cryptography::Certificates::ICmsDetachedSignature
{
	CmsDetachedSignature(std::nullptr_t) noexcept {}
	CmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates);
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

struct KeyDerivationParameters :
	Windows::Security::Cryptography::Core::IKeyDerivationParameters
{
	KeyDerivationParameters(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned iterationCount);
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context);
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo);
};

struct CryptographicKey :
	Windows::Security::Cryptography::Core::ICryptographicKey
{
	CryptographicKey(std::nullptr_t) noexcept {}
};

struct CryptographicHash :
	Windows::Security::Cryptography::Core::IHashComputation
{
	CryptographicHash(std::nullptr_t) noexcept {}
};

struct PersistedKeyProvider
{
	PersistedKeyProvider() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding padding);
	static Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding);
	template <unsigned S0> static Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding padding);
};

struct EncryptedAndAuthenticatedData :
	Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData
{
	EncryptedAndAuthenticatedData(std::nullptr_t) noexcept {}
};

struct CryptographicEngine
{
	CryptographicEngine() = delete;
	static Windows::Storage::Streams::IBuffer Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv);
	static Windows::Storage::Streams::IBuffer Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv);
	static Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData);
	static Windows::Storage::Streams::IBuffer DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData);
	static Windows::Storage::Streams::IBuffer Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
	static bool VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature);
	static Windows::Storage::Streams::IBuffer DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned desiredKeySize);
	static Windows::Storage::Streams::IBuffer SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
	static bool VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
};

struct HashAlgorithmProvider :
	Windows::Security::Cryptography::Core::IHashAlgorithmProvider
{
	HashAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct MacAlgorithmProvider :
	Windows::Security::Cryptography::Core::IMacAlgorithmProvider,
	Requires<MacAlgorithmProvider, Windows::Security::Cryptography::Core::IMacAlgorithmProvider2>
{
	MacAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct KeyDerivationAlgorithmProvider :
	Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider
{
	KeyDerivationAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct SymmetricKeyAlgorithmProvider :
	Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider
{
	SymmetricKeyAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct AsymmetricKeyAlgorithmProvider :
	Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider
{
	AsymmetricKeyAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(String const & algorithm);
	template <unsigned S0> static Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(wchar_t const (&algorithm)[S0]);
};

struct HashAlgorithmNames
{
	HashAlgorithmNames() = delete;
	static String Md5();
	static String Sha1();
	static String Sha256();
	static String Sha384();
	static String Sha512();
};

struct MacAlgorithmNames
{
	MacAlgorithmNames() = delete;
	static String HmacMd5();
	static String HmacSha1();
	static String HmacSha256();
	static String HmacSha384();
	static String HmacSha512();
	static String AesCmac();
};

struct SymmetricAlgorithmNames
{
	SymmetricAlgorithmNames() = delete;
	static String DesCbc();
	static String DesEcb();
	static String TripleDesCbc();
	static String TripleDesEcb();
	static String Rc2Cbc();
	static String Rc2Ecb();
	static String AesCbc();
	static String AesEcb();
	static String AesGcm();
	static String AesCcm();
	static String AesCbcPkcs7();
	static String AesEcbPkcs7();
	static String DesCbcPkcs7();
	static String DesEcbPkcs7();
	static String TripleDesCbcPkcs7();
	static String TripleDesEcbPkcs7();
	static String Rc2CbcPkcs7();
	static String Rc2EcbPkcs7();
	static String Rc4();
};

struct AsymmetricAlgorithmNames
{
	AsymmetricAlgorithmNames() = delete;
	static String RsaPkcs1();
	static String RsaOaepSha1();
	static String RsaOaepSha256();
	static String RsaOaepSha384();
	static String RsaOaepSha512();
	static String EcdsaP256Sha256();
	static String EcdsaP384Sha384();
	static String EcdsaP521Sha512();
	static String DsaSha1();
	static String DsaSha256();
	static String RsaSignPkcs1Sha1();
	static String RsaSignPkcs1Sha256();
	static String RsaSignPkcs1Sha384();
	static String RsaSignPkcs1Sha512();
	static String RsaSignPssSha1();
	static String RsaSignPssSha256();
	static String RsaSignPssSha384();
	static String RsaSignPssSha512();
};

struct KeyDerivationAlgorithmNames
{
	KeyDerivationAlgorithmNames() = delete;
	static String Pbkdf2Md5();
	static String Pbkdf2Sha1();
	static String Pbkdf2Sha256();
	static String Pbkdf2Sha384();
	static String Pbkdf2Sha512();
	static String Sp800108CtrHmacMd5();
	static String Sp800108CtrHmacSha1();
	static String Sp800108CtrHmacSha256();
	static String Sp800108CtrHmacSha384();
	static String Sp800108CtrHmacSha512();
	static String Sp80056aConcatMd5();
	static String Sp80056aConcatSha1();
	static String Sp80056aConcatSha256();
	static String Sp80056aConcatSha384();
	static String Sp80056aConcatSha512();
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

struct DataProtectionProvider :
	Windows::Security::Cryptography::DataProtection::IDataProtectionProvider
{
	DataProtectionProvider(std::nullptr_t) noexcept {}
	DataProtectionProvider();
	DataProtectionProvider(String const & protectionDescriptor);
	template <unsigned S0> DataProtectionProvider(wchar_t const (&protectionDescriptor)[S0]);
};

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

struct FileRevocationManager
{
	FileRevocationManager() = delete;
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, String const & enterpriseIdentity);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, wchar_t const (&enterpriseIdentity)[S0]);
	static Windows::Foundation::IAsyncOperation<bool> CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem);
	static void Revoke(String const & enterpriseIdentity);
	template <unsigned S0> static void Revoke(wchar_t const (&enterpriseIdentity)[S0]);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> GetStatusAsync(Windows::Storage::IStorageItem const & storageItem);
};

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

struct EasComplianceResults :
	Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults,
	Requires<EasComplianceResults, Windows::Security::ExchangeActiveSyncProvisioning::IEasComplianceResults2>
{
	EasComplianceResults(std::nullptr_t) noexcept {}
};

struct EasClientSecurityPolicy :
	Windows::Security::ExchangeActiveSyncProvisioning::IEasClientSecurityPolicy
{
	EasClientSecurityPolicy(std::nullptr_t) noexcept {}
	EasClientSecurityPolicy();
};

struct EasClientDeviceInformation :
	Windows::Security::ExchangeActiveSyncProvisioning::IEasClientDeviceInformation
{
	EasClientDeviceInformation(std::nullptr_t) noexcept {}
	EasClientDeviceInformation();
};

}}}}

namespace Modern { namespace Windows { namespace Storage {

struct StorageFile :
	Windows::Storage::IStorageFile,
	Requires<StorageFile, Windows::Storage::IStorageItemProperties, Windows::Storage::IStorageItemProperties2, Windows::Storage::IStorageItem2, Windows::Storage::IStorageItemPropertiesWithProvider, Windows::Storage::IStorageFilePropertiesWithAvailability>
{
	StorageFile(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(String const & path);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(wchar_t const (&path)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(String const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <typename F> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(String const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <unsigned S0, typename F> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <typename F> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(String const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
};

struct StorageFolder :
	Windows::Storage::IStorageFolder,
	Requires<StorageFolder, Windows::Storage::Search::IStorageFolderQueryOperations, Windows::Storage::IStorageItemProperties, Windows::Storage::IStorageItemProperties2, Windows::Storage::IStorageItem2, Windows::Storage::IStorageFolder2, Windows::Storage::IStorageItemPropertiesWithProvider>
{
	StorageFolder(std::nullptr_t) noexcept {}
	using impl_IStorageFolderQueryOperations::GetFilesAsync;
	using impl_IStorageFolderQueryOperations::GetFoldersAsync;
	using impl_IStorageFolderQueryOperations::GetItemsAsync;
	using impl_IStorageFolder::GetFilesAsync;
	using impl_IStorageFolder::GetFoldersAsync;
	using impl_IStorageFolder::GetItemsAsync;
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(String const & path);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(wchar_t const (&path)[S0]);
};

struct StorageLibrary :
	Windows::Storage::IStorageLibrary
{
	StorageLibrary(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> GetLibraryAsync(Windows::Storage::KnownLibraryId libraryId);
};

struct KnownFolders
{
	KnownFolders() = delete;
	static Windows::Storage::StorageFolder SavedPictures();
	static Windows::Storage::StorageFolder Playlists();
	static Windows::Storage::StorageFolder MusicLibrary();
	static Windows::Storage::StorageFolder PicturesLibrary();
	static Windows::Storage::StorageFolder VideosLibrary();
	static Windows::Storage::StorageFolder DocumentsLibrary();
	static Windows::Storage::StorageFolder HomeGroup();
	static Windows::Storage::StorageFolder RemovableDevices();
	static Windows::Storage::StorageFolder MediaServerDevices();
	static Windows::Storage::StorageFolder CameraRoll();
};

struct DownloadsFolder
{
	DownloadsFolder() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(String const & desiredName, Windows::Storage::CreationCollisionOption option);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption option);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(String const & desiredName, Windows::Storage::CreationCollisionOption option);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption option);
};

struct StreamedFileDataRequest :
	Windows::Storage::Streams::IOutputStream,
	Requires<StreamedFileDataRequest, Windows::Storage::IStreamedFileDataRequest>
{
	StreamedFileDataRequest(std::nullptr_t) noexcept {}
};

struct StorageStreamTransaction :
	Windows::Storage::IStorageStreamTransaction
{
	StorageStreamTransaction(std::nullptr_t) noexcept {}
};

struct StorageProvider :
	Windows::Storage::IStorageProvider
{
	StorageProvider(std::nullptr_t) noexcept {}
};

struct FileIO
{
	FileIO() = delete;
	static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]);
	static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents);
	template <unsigned S0> static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]);
	static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncAction WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer);
};

struct PathIO
{
	PathIO() = delete;
	static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(String const & absolutePath);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(wchar_t const (&absolutePath)[S0]);
	static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<String> ReadTextAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteTextAsync(String const & absolutePath, String const & contents);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncAction WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]);
	static Windows::Foundation::IAsyncAction WriteTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncAction WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendTextAsync(String const & absolutePath, String const & contents);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncAction AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]);
	static Windows::Foundation::IAsyncAction AppendTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0, unsigned S1> static Windows::Foundation::IAsyncAction AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(String const & absolutePath);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(wchar_t const (&absolutePath)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> ReadLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines);
	template <unsigned S0> static Windows::Foundation::IAsyncAction AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> static Windows::Foundation::IAsyncAction AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(String const & absolutePath);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(wchar_t const (&absolutePath)[S0]);
	static Windows::Foundation::IAsyncAction WriteBufferAsync(String const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer);
	template <unsigned S0> static Windows::Foundation::IAsyncAction WriteBufferAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::IBuffer const & buffer);
};

struct CachedFileManager
{
	CachedFileManager() = delete;
	static void DeferUpdates(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Provider::FileUpdateStatus> CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file);
};

struct SystemAudioProperties :
	Windows::Storage::ISystemAudioProperties
{
	SystemAudioProperties(std::nullptr_t) noexcept {}
};

struct SystemGPSProperties :
	Windows::Storage::ISystemGPSProperties
{
	SystemGPSProperties(std::nullptr_t) noexcept {}
};

struct SystemImageProperties :
	Windows::Storage::ISystemImageProperties
{
	SystemImageProperties(std::nullptr_t) noexcept {}
};

struct SystemMediaProperties :
	Windows::Storage::ISystemMediaProperties
{
	SystemMediaProperties(std::nullptr_t) noexcept {}
};

struct SystemMusicProperties :
	Windows::Storage::ISystemMusicProperties
{
	SystemMusicProperties(std::nullptr_t) noexcept {}
};

struct SystemPhotoProperties :
	Windows::Storage::ISystemPhotoProperties
{
	SystemPhotoProperties(std::nullptr_t) noexcept {}
};

struct SystemVideoProperties :
	Windows::Storage::ISystemVideoProperties
{
	SystemVideoProperties(std::nullptr_t) noexcept {}
};

struct SystemProperties
{
	SystemProperties() = delete;
	static String Author();
	static String Comment();
	static String ItemNameDisplay();
	static String Keywords();
	static String Rating();
	static String Title();
	static Windows::Storage::SystemAudioProperties Audio();
	static Windows::Storage::SystemGPSProperties GPS();
	static Windows::Storage::SystemMediaProperties Media();
	static Windows::Storage::SystemMusicProperties Music();
	static Windows::Storage::SystemPhotoProperties Photo();
	static Windows::Storage::SystemVideoProperties Video();
	static Windows::Storage::SystemImageProperties Image();
};

struct ApplicationData :
	Windows::Storage::IApplicationData
{
	ApplicationData(std::nullptr_t) noexcept {}
	static Windows::Storage::ApplicationData Current();
};

struct SetVersionRequest :
	Windows::Storage::ISetVersionRequest
{
	SetVersionRequest(std::nullptr_t) noexcept {}
};

struct ApplicationDataContainer :
	Windows::Storage::IApplicationDataContainer
{
	ApplicationDataContainer(std::nullptr_t) noexcept {}
};

struct SetVersionDeferral :
	Windows::Storage::ISetVersionDeferral
{
	SetVersionDeferral(std::nullptr_t) noexcept {}
};

struct ApplicationDataContainerSettings :
	Windows::Foundation::Collections::IPropertySet
{
	ApplicationDataContainerSettings(std::nullptr_t) noexcept {}
};

struct ApplicationDataCompositeValue :
	Windows::Foundation::Collections::IPropertySet
{
	ApplicationDataCompositeValue(std::nullptr_t) noexcept {}
	ApplicationDataCompositeValue();
};

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

struct AccessListEntryView :
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Storage::AccessCache::AccessListEntry>
{
	AccessListEntryView(std::nullptr_t) noexcept {}
};

struct StorageItemMostRecentlyUsedList :
	Windows::Storage::AccessCache::IStorageItemMostRecentlyUsedList
{
	StorageItemMostRecentlyUsedList(std::nullptr_t) noexcept {}
};

struct ItemRemovedEventArgs :
	Windows::Storage::AccessCache::IItemRemovedEventArgs
{
	ItemRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct StorageItemAccessList :
	Windows::Storage::AccessCache::IStorageItemAccessList
{
	StorageItemAccessList(std::nullptr_t) noexcept {}
};

struct StorageApplicationPermissions
{
	StorageApplicationPermissions() = delete;
	static Windows::Storage::AccessCache::StorageItemAccessList FutureAccessList();
	static Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList MostRecentlyUsedList();
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

struct FileInformationFactory :
	Windows::Storage::BulkAccess::IFileInformationFactory
{
	FileInformationFactory(std::nullptr_t) noexcept {}
	FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode);
	FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize);
	FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions thumbnailOptions);
	FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions thumbnailOptions, bool delayLoad);
};

struct FileInformation :
	Windows::Storage::BulkAccess::IStorageItemInformation,
	Requires<FileInformation, Windows::Storage::IStorageFile, Windows::Storage::Streams::IInputStreamReference, Windows::Storage::Streams::IRandomAccessStreamReference, Windows::Storage::IStorageItem, Windows::Storage::IStorageItemProperties, Windows::Storage::IStorageItem2, Windows::Storage::IStorageItemPropertiesWithProvider, Windows::Storage::IStorageFilePropertiesWithAvailability>
{
	FileInformation(std::nullptr_t) noexcept {}
};

struct FolderInformation :
	Windows::Storage::BulkAccess::IStorageItemInformation,
	Requires<FolderInformation, Windows::Storage::IStorageFolder, Windows::Storage::IStorageItem, Windows::Storage::IStorageItemProperties, Windows::Storage::Search::IStorageFolderQueryOperations, Windows::Storage::IStorageItem2, Windows::Storage::IStorageFolder2, Windows::Storage::IStorageItemPropertiesWithProvider>
{
	FolderInformation(std::nullptr_t) noexcept {}
	using impl_IStorageFolderQueryOperations::GetFilesAsync;
	using impl_IStorageFolderQueryOperations::GetFoldersAsync;
	using impl_IStorageFolderQueryOperations::GetItemsAsync;
	using impl_IStorageFolder::GetFilesAsync;
	using impl_IStorageFolder::GetFoldersAsync;
	using impl_IStorageFolder::GetItemsAsync;
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

struct Compressor :
	Windows::Storage::Compression::ICompressor
{
	Compressor(std::nullptr_t) noexcept {}
	Compressor(Windows::Storage::Streams::IOutputStream const & underlyingStream);
	Compressor(Windows::Storage::Streams::IOutputStream const & underlyingStream, Windows::Storage::Compression::CompressAlgorithm algorithm, unsigned blockSize);
};

struct Decompressor :
	Windows::Storage::Compression::IDecompressor
{
	Decompressor(std::nullptr_t) noexcept {}
	Decompressor(Windows::Storage::Streams::IInputStream const & underlyingStream);
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

struct StorageItemThumbnail :
	Windows::Storage::Streams::IRandomAccessStreamWithContentType,
	Requires<StorageItemThumbnail, Windows::Storage::FileProperties::IThumbnailProperties>
{
	StorageItemThumbnail(std::nullptr_t) noexcept {}
};

struct MusicProperties :
	Windows::Storage::FileProperties::IMusicProperties
{
	MusicProperties(std::nullptr_t) noexcept {}
};

struct VideoProperties :
	Windows::Storage::FileProperties::IVideoProperties
{
	VideoProperties(std::nullptr_t) noexcept {}
};

struct ImageProperties :
	Windows::Storage::FileProperties::IImageProperties
{
	ImageProperties(std::nullptr_t) noexcept {}
};

struct DocumentProperties :
	Windows::Storage::FileProperties::IDocumentProperties
{
	DocumentProperties(std::nullptr_t) noexcept {}
};

struct StorageItemContentProperties :
	Windows::Storage::FileProperties::IStorageItemContentProperties
{
	StorageItemContentProperties(std::nullptr_t) noexcept {}
};

struct BasicProperties :
	Windows::Storage::FileProperties::IBasicProperties,
	Requires<BasicProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	BasicProperties(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

struct FilePickerSelectedFilesArray :
	Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>
{
	FilePickerSelectedFilesArray(std::nullptr_t) noexcept {}
};

struct FilePickerFileTypesOrderedMap :
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>>
{
	FilePickerFileTypesOrderedMap(std::nullptr_t) noexcept {}
};

struct FileExtensionVector :
	Windows::Foundation::Collections::IVector<String>
{
	FileExtensionVector(std::nullptr_t) noexcept {}
};

struct FileOpenPicker :
	Windows::Storage::Pickers::IFileOpenPicker
{
	FileOpenPicker(std::nullptr_t) noexcept {}
	FileOpenPicker();
};

struct FileSavePicker :
	Windows::Storage::Pickers::IFileSavePicker
{
	FileSavePicker(std::nullptr_t) noexcept {}
	FileSavePicker();
};

struct FolderPicker :
	Windows::Storage::Pickers::IFolderPicker
{
	FolderPicker(std::nullptr_t) noexcept {}
	FolderPicker();
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

struct FileRemovedEventArgs :
	Windows::Storage::Pickers::Provider::IFileRemovedEventArgs
{
	FileRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct FileOpenPickerUI :
	Windows::Storage::Pickers::Provider::IFileOpenPickerUI
{
	FileOpenPickerUI(std::nullptr_t) noexcept {}
};

struct PickerClosingEventArgs :
	Windows::Storage::Pickers::Provider::IPickerClosingEventArgs
{
	PickerClosingEventArgs(std::nullptr_t) noexcept {}
};

struct PickerClosingOperation :
	Windows::Storage::Pickers::Provider::IPickerClosingOperation
{
	PickerClosingOperation(std::nullptr_t) noexcept {}
};

struct PickerClosingDeferral :
	Windows::Storage::Pickers::Provider::IPickerClosingDeferral
{
	PickerClosingDeferral(std::nullptr_t) noexcept {}
};

struct FileSavePickerUI :
	Windows::Storage::Pickers::Provider::IFileSavePickerUI
{
	FileSavePickerUI(std::nullptr_t) noexcept {}
};

struct TargetFileRequestedEventArgs :
	Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs
{
	TargetFileRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct TargetFileRequest :
	Windows::Storage::Pickers::Provider::ITargetFileRequest
{
	TargetFileRequest(std::nullptr_t) noexcept {}
};

struct TargetFileRequestDeferral :
	Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral
{
	TargetFileRequestDeferral(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

struct CachedFileUpdaterUI :
	Windows::Storage::Provider::ICachedFileUpdaterUI
{
	CachedFileUpdaterUI(std::nullptr_t) noexcept {}
};

struct FileUpdateRequestedEventArgs :
	Windows::Storage::Provider::IFileUpdateRequestedEventArgs
{
	FileUpdateRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct FileUpdateRequest :
	Windows::Storage::Provider::IFileUpdateRequest
{
	FileUpdateRequest(std::nullptr_t) noexcept {}
};

struct FileUpdateRequestDeferral :
	Windows::Storage::Provider::IFileUpdateRequestDeferral
{
	FileUpdateRequestDeferral(std::nullptr_t) noexcept {}
};

struct CachedFileUpdater
{
	CachedFileUpdater() = delete;
	static void SetUpdateInformation(Windows::Storage::IStorageFile const & file, String const & contentId, Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options);
	template <unsigned S0> static void SetUpdateInformation(Windows::Storage::IStorageFile const & file, wchar_t const (&contentId)[S0], Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options);
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

struct ContentIndexer :
	Windows::Storage::Search::IContentIndexer,
	Requires<ContentIndexer, Windows::Storage::Search::IContentIndexerQueryOperations>
{
	ContentIndexer(std::nullptr_t) noexcept {}
	static Windows::Storage::Search::ContentIndexer GetIndexer(String const & indexName);
	template <unsigned S0> static Windows::Storage::Search::ContentIndexer GetIndexer(wchar_t const (&indexName)[S0]);
	static Windows::Storage::Search::ContentIndexer GetIndexer();
};

struct ValueAndLanguage :
	Windows::Storage::Search::IValueAndLanguage
{
	ValueAndLanguage(std::nullptr_t) noexcept {}
	ValueAndLanguage();
};

struct ContentIndexerQuery :
	Windows::Storage::Search::IContentIndexerQuery
{
	ContentIndexerQuery(std::nullptr_t) noexcept {}
};

struct IndexableContent :
	Windows::Storage::Search::IIndexableContent
{
	IndexableContent(std::nullptr_t) noexcept {}
	IndexableContent();
};

struct QueryOptions :
	Windows::Storage::Search::IQueryOptions,
	Requires<QueryOptions, Windows::Storage::Search::IQueryOptionsWithProviderFilter>
{
	QueryOptions(std::nullptr_t) noexcept {}
	QueryOptions();
	QueryOptions(Windows::Storage::Search::CommonFileQuery query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter);
	QueryOptions(Windows::Storage::Search::CommonFolderQuery query);
};

struct StorageFileQueryResult :
	Windows::Storage::Search::IStorageFileQueryResult,
	Requires<StorageFileQueryResult, Windows::Storage::Search::IStorageFileQueryResult2>
{
	StorageFileQueryResult(std::nullptr_t) noexcept {}
};

struct StorageFolderQueryResult :
	Windows::Storage::Search::IStorageFolderQueryResult
{
	StorageFolderQueryResult(std::nullptr_t) noexcept {}
};

struct StorageItemQueryResult :
	Windows::Storage::Search::IStorageItemQueryResult
{
	StorageItemQueryResult(std::nullptr_t) noexcept {}
};

struct SortEntryVector :
	Windows::Foundation::Collections::IVector<Modern::Windows::Storage::Search::SortEntry>
{
	SortEntryVector(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

struct DataReaderLoadOperation :
	Windows::Foundation::IAsyncOperation<unsigned>
{
	DataReaderLoadOperation(std::nullptr_t) noexcept {}
};

struct DataReader :
	Windows::Storage::Streams::IDataReader
{
	DataReader(std::nullptr_t) noexcept {}
	DataReader(Windows::Storage::Streams::IInputStream const & inputStream);
	static Windows::Storage::Streams::DataReader FromBuffer(Windows::Storage::Streams::IBuffer const & buffer);
};

struct DataWriterStoreOperation :
	Windows::Foundation::IAsyncOperation<unsigned>
{
	DataWriterStoreOperation(std::nullptr_t) noexcept {}
};

struct DataWriter :
	Windows::Storage::Streams::IDataWriter
{
	DataWriter(std::nullptr_t) noexcept {}
	DataWriter();
	DataWriter(Windows::Storage::Streams::IOutputStream const & outputStream);
};

struct RandomAccessStream
{
	RandomAccessStream() = delete;
	static Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination);
	static Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long bytesToCopy);
	static Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination);
};

struct Buffer :
	Windows::Storage::Streams::IBuffer
{
	Buffer(std::nullptr_t) noexcept {}
	Buffer(unsigned capacity);
};

struct RandomAccessStreamReference :
	Windows::Storage::Streams::IRandomAccessStreamReference
{
	RandomAccessStreamReference(std::nullptr_t) noexcept {}
	static Windows::Storage::Streams::RandomAccessStreamReference CreateFromFile(Windows::Storage::IStorageFile const & file);
	static Windows::Storage::Streams::RandomAccessStreamReference CreateFromUri(Windows::Foundation::Uri const & uri);
	static Windows::Storage::Streams::RandomAccessStreamReference CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream);
};

struct FileRandomAccessStream :
	Windows::Storage::Streams::IRandomAccessStream
{
	FileRandomAccessStream(std::nullptr_t) noexcept {}
};

struct FileInputStream :
	Windows::Storage::Streams::IInputStream
{
	FileInputStream(std::nullptr_t) noexcept {}
};

struct FileOutputStream :
	Windows::Storage::Streams::IOutputStream
{
	FileOutputStream(std::nullptr_t) noexcept {}
};

struct RandomAccessStreamOverStream :
	Windows::Storage::Streams::IRandomAccessStream
{
	RandomAccessStreamOverStream(std::nullptr_t) noexcept {}
};

struct InputStreamOverStream :
	Windows::Storage::Streams::IInputStream
{
	InputStreamOverStream(std::nullptr_t) noexcept {}
};

struct OutputStreamOverStream :
	Windows::Storage::Streams::IOutputStream
{
	OutputStreamOverStream(std::nullptr_t) noexcept {}
};

struct InMemoryRandomAccessStream :
	Windows::Storage::Streams::IRandomAccessStream
{
	InMemoryRandomAccessStream(std::nullptr_t) noexcept {}
	InMemoryRandomAccessStream();
};

}}}}

namespace Modern { namespace Windows { namespace System {

struct LauncherUIOptions :
	Windows::System::ILauncherUIOptions
{
	LauncherUIOptions(std::nullptr_t) noexcept {}
};

struct LauncherOptions :
	Windows::System::ILauncherOptions,
	Requires<LauncherOptions, Windows::System::ILauncherViewOptions>
{
	LauncherOptions(std::nullptr_t) noexcept {}
	LauncherOptions();
};

struct Launcher
{
	Launcher() = delete;
	static Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options);
	static Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options);
};

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

struct DisplayRequest :
	Windows::System::Display::IDisplayRequest
{
	DisplayRequest(std::nullptr_t) noexcept {}
	DisplayRequest();
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

struct HardwareToken :
	Windows::System::Profile::IHardwareToken
{
	HardwareToken(std::nullptr_t) noexcept {}
};

struct HardwareIdentification
{
	HardwareIdentification() = delete;
	static Windows::System::Profile::HardwareToken GetPackageSpecificToken(Windows::Storage::Streams::IBuffer const & nonce);
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

struct SmbiosInformation
{
	SmbiosInformation() = delete;
	static String SerialNumber();
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

struct InteractiveSession
{
	InteractiveSession() = delete;
	static bool IsRemote();
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

struct ThreadPoolTimer :
	Windows::System::Threading::IThreadPoolTimer
{
	ThreadPoolTimer(std::nullptr_t) noexcept {}
	static Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period);
	template <typename F> static Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period);
	static Windows::System::Threading::ThreadPoolTimer CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay);
	template <typename F> static Windows::System::Threading::ThreadPoolTimer CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay);
	static Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period, Windows::System::Threading::ITimerDestroyedHandler const & destroyed);
	template <typename F> static Windows::System::Threading::ThreadPoolTimer CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period, F destroyed);
	static Windows::System::Threading::ThreadPoolTimer CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay, Windows::System::Threading::ITimerDestroyedHandler const & destroyed);
	template <typename F> static Windows::System::Threading::ThreadPoolTimer CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay, F destroyed);
};

struct ThreadPool
{
	ThreadPool() = delete;
	static Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler);
	template <typename F> static Windows::Foundation::IAsyncAction RunAsync(F handler);
	static Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority);
	template <typename F> static Windows::Foundation::IAsyncAction RunAsync(F handler, Windows::System::Threading::WorkItemPriority priority);
	static Windows::Foundation::IAsyncAction RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options);
	template <typename F> static Windows::Foundation::IAsyncAction RunAsync(F handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options);
};

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

struct SignalNotifier :
	Windows::System::Threading::Core::ISignalNotifier
{
	SignalNotifier(std::nullptr_t) noexcept {}
	static Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler);
	template <unsigned S0> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler);
	template <typename F> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, F handler);
	template <unsigned S0, typename F> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], F handler);
	static Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout);
	template <unsigned S0> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout);
	template <typename F> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout);
	template <unsigned S0, typename F> static Windows::System::Threading::Core::SignalNotifier AttachToEvent(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout);
	static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler);
	template <unsigned S0> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler);
	template <typename F> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, F handler);
	template <unsigned S0, typename F> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], F handler);
	static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout);
	template <unsigned S0> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout);
	template <typename F> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout);
	template <unsigned S0, typename F> static Windows::System::Threading::Core::SignalNotifier AttachToSemaphore(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout);
};

struct PreallocatedWorkItem :
	Windows::System::Threading::Core::IPreallocatedWorkItem
{
	PreallocatedWorkItem(std::nullptr_t) noexcept {}
	PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler);
	template <typename F> PreallocatedWorkItem(F handler);
	PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority);
	template <typename F> PreallocatedWorkItem(F handler, Windows::System::Threading::WorkItemPriority priority);
	PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options);
	template <typename F> PreallocatedWorkItem(F handler, Windows::System::Threading::WorkItemPriority priority, Windows::System::Threading::WorkItemOptions options);
};

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

struct AdvertisingManager
{
	AdvertisingManager() = delete;
	static String AdvertisingId();
};

struct UserInformation
{
	UserInformation() = delete;
	static bool AccountPictureChangeEnabled();
	static bool NameAccessAllowed();
	static Windows::Storage::IStorageFile GetAccountPicture(Windows::System::UserProfile::AccountPictureKind kind);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPictureAsync(Windows::Storage::IStorageFile const & image);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPicturesAsync(Windows::Storage::IStorageFile const & smallImage, Windows::Storage::IStorageFile const & largeImage, Windows::Storage::IStorageFile const & video);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPictureFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & image);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> SetAccountPicturesFromStreamsAsync(Windows::Storage::Streams::IRandomAccessStream const & smallImage, Windows::Storage::Streams::IRandomAccessStream const & largeImage, Windows::Storage::Streams::IRandomAccessStream const & video);
	static EventRegistrationToken AccountPictureChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler);
	template <typename F> static EventRegistrationToken AccountPictureChanged(F changeHandler);
	static void AccountPictureChanged(EventRegistrationToken token);
	static Windows::Foundation::IAsyncOperation<String> GetDisplayNameAsync();
	static Windows::Foundation::IAsyncOperation<String> GetFirstNameAsync();
	static Windows::Foundation::IAsyncOperation<String> GetLastNameAsync();
	static Windows::Foundation::IAsyncOperation<String> GetPrincipalNameAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetSessionInitiationProtocolUriAsync();
	static Windows::Foundation::IAsyncOperation<String> GetDomainNameAsync();
};

struct LockScreen
{
	LockScreen() = delete;
	static Windows::Foundation::Uri OriginalImageFile();
	static Windows::Storage::Streams::IRandomAccessStream GetImageStream();
	static Windows::Foundation::IAsyncAction SetImageFileAsync(Windows::Storage::IStorageFile const & value);
	static Windows::Foundation::IAsyncAction SetImageStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & value);
	static Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetImageFeedResult> RequestSetImageFeedAsync(Windows::Foundation::Uri const & syndicationFeedUri);
	static bool TryRemoveImageFeed();
};

struct GlobalizationPreferences
{
	GlobalizationPreferences() = delete;
	static Windows::Foundation::Collections::IVectorView<String> Calendars();
	static Windows::Foundation::Collections::IVectorView<String> Clocks();
	static Windows::Foundation::Collections::IVectorView<String> Currencies();
	static Windows::Foundation::Collections::IVectorView<String> Languages();
	static String HomeGeographicRegion();
	static Windows::Globalization::DayOfWeek WeekStartsOn();
};

}}}}

namespace Modern { namespace Windows { namespace UI {

struct ColorHelper :
	Windows::UI::IColorHelper
{
	ColorHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Color FromArgb(byte a, byte r, byte g, byte b);
};

struct Colors :
	Windows::UI::IColors
{
	Colors(std::nullptr_t) noexcept {}
	static Windows::UI::Color AliceBlue();
	static Windows::UI::Color AntiqueWhite();
	static Windows::UI::Color Aqua();
	static Windows::UI::Color Aquamarine();
	static Windows::UI::Color Azure();
	static Windows::UI::Color Beige();
	static Windows::UI::Color Bisque();
	static Windows::UI::Color Black();
	static Windows::UI::Color BlanchedAlmond();
	static Windows::UI::Color Blue();
	static Windows::UI::Color BlueViolet();
	static Windows::UI::Color Brown();
	static Windows::UI::Color BurlyWood();
	static Windows::UI::Color CadetBlue();
	static Windows::UI::Color Chartreuse();
	static Windows::UI::Color Chocolate();
	static Windows::UI::Color Coral();
	static Windows::UI::Color CornflowerBlue();
	static Windows::UI::Color Cornsilk();
	static Windows::UI::Color Crimson();
	static Windows::UI::Color Cyan();
	static Windows::UI::Color DarkBlue();
	static Windows::UI::Color DarkCyan();
	static Windows::UI::Color DarkGoldenrod();
	static Windows::UI::Color DarkGray();
	static Windows::UI::Color DarkGreen();
	static Windows::UI::Color DarkKhaki();
	static Windows::UI::Color DarkMagenta();
	static Windows::UI::Color DarkOliveGreen();
	static Windows::UI::Color DarkOrange();
	static Windows::UI::Color DarkOrchid();
	static Windows::UI::Color DarkRed();
	static Windows::UI::Color DarkSalmon();
	static Windows::UI::Color DarkSeaGreen();
	static Windows::UI::Color DarkSlateBlue();
	static Windows::UI::Color DarkSlateGray();
	static Windows::UI::Color DarkTurquoise();
	static Windows::UI::Color DarkViolet();
	static Windows::UI::Color DeepPink();
	static Windows::UI::Color DeepSkyBlue();
	static Windows::UI::Color DimGray();
	static Windows::UI::Color DodgerBlue();
	static Windows::UI::Color Firebrick();
	static Windows::UI::Color FloralWhite();
	static Windows::UI::Color ForestGreen();
	static Windows::UI::Color Fuchsia();
	static Windows::UI::Color Gainsboro();
	static Windows::UI::Color GhostWhite();
	static Windows::UI::Color Gold();
	static Windows::UI::Color Goldenrod();
	static Windows::UI::Color Gray();
	static Windows::UI::Color Green();
	static Windows::UI::Color GreenYellow();
	static Windows::UI::Color Honeydew();
	static Windows::UI::Color HotPink();
	static Windows::UI::Color IndianRed();
	static Windows::UI::Color Indigo();
	static Windows::UI::Color Ivory();
	static Windows::UI::Color Khaki();
	static Windows::UI::Color Lavender();
	static Windows::UI::Color LavenderBlush();
	static Windows::UI::Color LawnGreen();
	static Windows::UI::Color LemonChiffon();
	static Windows::UI::Color LightBlue();
	static Windows::UI::Color LightCoral();
	static Windows::UI::Color LightCyan();
	static Windows::UI::Color LightGoldenrodYellow();
	static Windows::UI::Color LightGreen();
	static Windows::UI::Color LightGray();
	static Windows::UI::Color LightPink();
	static Windows::UI::Color LightSalmon();
	static Windows::UI::Color LightSeaGreen();
	static Windows::UI::Color LightSkyBlue();
	static Windows::UI::Color LightSlateGray();
	static Windows::UI::Color LightSteelBlue();
	static Windows::UI::Color LightYellow();
	static Windows::UI::Color Lime();
	static Windows::UI::Color LimeGreen();
	static Windows::UI::Color Linen();
	static Windows::UI::Color Magenta();
	static Windows::UI::Color Maroon();
	static Windows::UI::Color MediumAquamarine();
	static Windows::UI::Color MediumBlue();
	static Windows::UI::Color MediumOrchid();
	static Windows::UI::Color MediumPurple();
	static Windows::UI::Color MediumSeaGreen();
	static Windows::UI::Color MediumSlateBlue();
	static Windows::UI::Color MediumSpringGreen();
	static Windows::UI::Color MediumTurquoise();
	static Windows::UI::Color MediumVioletRed();
	static Windows::UI::Color MidnightBlue();
	static Windows::UI::Color MintCream();
	static Windows::UI::Color MistyRose();
	static Windows::UI::Color Moccasin();
	static Windows::UI::Color NavajoWhite();
	static Windows::UI::Color Navy();
	static Windows::UI::Color OldLace();
	static Windows::UI::Color Olive();
	static Windows::UI::Color OliveDrab();
	static Windows::UI::Color Orange();
	static Windows::UI::Color OrangeRed();
	static Windows::UI::Color Orchid();
	static Windows::UI::Color PaleGoldenrod();
	static Windows::UI::Color PaleGreen();
	static Windows::UI::Color PaleTurquoise();
	static Windows::UI::Color PaleVioletRed();
	static Windows::UI::Color PapayaWhip();
	static Windows::UI::Color PeachPuff();
	static Windows::UI::Color Peru();
	static Windows::UI::Color Pink();
	static Windows::UI::Color Plum();
	static Windows::UI::Color PowderBlue();
	static Windows::UI::Color Purple();
	static Windows::UI::Color Red();
	static Windows::UI::Color RosyBrown();
	static Windows::UI::Color RoyalBlue();
	static Windows::UI::Color SaddleBrown();
	static Windows::UI::Color Salmon();
	static Windows::UI::Color SandyBrown();
	static Windows::UI::Color SeaGreen();
	static Windows::UI::Color SeaShell();
	static Windows::UI::Color Sienna();
	static Windows::UI::Color Silver();
	static Windows::UI::Color SkyBlue();
	static Windows::UI::Color SlateBlue();
	static Windows::UI::Color SlateGray();
	static Windows::UI::Color Snow();
	static Windows::UI::Color SpringGreen();
	static Windows::UI::Color SteelBlue();
	static Windows::UI::Color Tan();
	static Windows::UI::Color Teal();
	static Windows::UI::Color Thistle();
	static Windows::UI::Color Tomato();
	static Windows::UI::Color Transparent();
	static Windows::UI::Color Turquoise();
	static Windows::UI::Color Violet();
	static Windows::UI::Color Wheat();
	static Windows::UI::Color White();
	static Windows::UI::Color WhiteSmoke();
	static Windows::UI::Color Yellow();
	static Windows::UI::Color YellowGreen();
};

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

struct SettingsCommand :
	Windows::UI::Popups::IUICommand
{
	SettingsCommand(std::nullptr_t) noexcept {}
	SettingsCommand(IInspectable const & settingsCommandId, String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & handler);
	template <unsigned S0> SettingsCommand(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & handler);
	template <typename F> SettingsCommand(IInspectable const & settingsCommandId, String const & label, F handler);
	template <unsigned S0, typename F> SettingsCommand(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], F handler);
	static Windows::UI::ApplicationSettings::SettingsCommand AccountsCommand();
};

struct SettingsPaneCommandsRequest :
	Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequest
{
	SettingsPaneCommandsRequest(std::nullptr_t) noexcept {}
};

struct SettingsPaneCommandsRequestedEventArgs :
	Windows::UI::ApplicationSettings::ISettingsPaneCommandsRequestedEventArgs
{
	SettingsPaneCommandsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct SettingsPane :
	Windows::UI::ApplicationSettings::ISettingsPane
{
	SettingsPane(std::nullptr_t) noexcept {}
	static Windows::UI::ApplicationSettings::SettingsPane GetForCurrentView();
	static void Show();
	static Windows::UI::ApplicationSettings::SettingsEdgeLocation Edge();
};

struct WebAccountProviderCommand :
	Windows::UI::ApplicationSettings::IWebAccountProviderCommand
{
	WebAccountProviderCommand(std::nullptr_t) noexcept {}
	WebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler const & invoked);
	template <typename F> WebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, F invoked);
};

struct WebAccountCommand :
	Windows::UI::ApplicationSettings::IWebAccountCommand
{
	WebAccountCommand(std::nullptr_t) noexcept {}
	WebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler const & invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions actions);
	template <typename F> WebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, F invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions actions);
};

struct WebAccountInvokedArgs :
	Windows::UI::ApplicationSettings::IWebAccountInvokedArgs
{
	WebAccountInvokedArgs(std::nullptr_t) noexcept {}
};

struct CredentialCommand :
	Windows::UI::ApplicationSettings::ICredentialCommand
{
	CredentialCommand(std::nullptr_t) noexcept {}
	CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential);
	CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential, Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler const & deleted);
	template <typename F> CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential, F deleted);
};

struct AccountsSettingsPaneEventDeferral :
	Windows::UI::ApplicationSettings::IAccountsSettingsPaneEventDeferral
{
	AccountsSettingsPaneEventDeferral(std::nullptr_t) noexcept {}
};

struct AccountsSettingsPaneCommandsRequestedEventArgs :
	Windows::UI::ApplicationSettings::IAccountsSettingsPaneCommandsRequestedEventArgs
{
	AccountsSettingsPaneCommandsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct AccountsSettingsPane :
	Windows::UI::ApplicationSettings::IAccountsSettingsPane
{
	AccountsSettingsPane(std::nullptr_t) noexcept {}
	static Windows::UI::ApplicationSettings::AccountsSettingsPane GetForCurrentView();
	static void Show();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

struct CoreDispatcher :
	Windows::UI::Core::ICoreDispatcher,
	Requires<CoreDispatcher, Windows::UI::Core::ICoreDispatcherWithTaskPriority>
{
	CoreDispatcher(std::nullptr_t) noexcept {}
};

struct CoreCursor :
	Windows::UI::Core::ICoreCursor
{
	CoreCursor(std::nullptr_t) noexcept {}
	CoreCursor(Windows::UI::Core::CoreCursorType type, unsigned id);
};

struct CoreWindow :
	Windows::UI::Core::ICoreWindow
{
	CoreWindow(std::nullptr_t) noexcept {}
	static Windows::UI::Core::CoreWindow GetForCurrentThread();
};

struct WindowActivatedEventArgs :
	Windows::UI::Core::IWindowActivatedEventArgs
{
	WindowActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AutomationProviderRequestedEventArgs :
	Windows::UI::Core::IAutomationProviderRequestedEventArgs
{
	AutomationProviderRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct CharacterReceivedEventArgs :
	Windows::UI::Core::ICharacterReceivedEventArgs
{
	CharacterReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct CoreWindowEventArgs :
	Windows::UI::Core::ICoreWindowEventArgs
{
	CoreWindowEventArgs(std::nullptr_t) noexcept {}
};

struct InputEnabledEventArgs :
	Windows::UI::Core::IInputEnabledEventArgs
{
	InputEnabledEventArgs(std::nullptr_t) noexcept {}
};

struct KeyEventArgs :
	Windows::UI::Core::IKeyEventArgs
{
	KeyEventArgs(std::nullptr_t) noexcept {}
};

struct PointerEventArgs :
	Windows::UI::Core::IPointerEventArgs
{
	PointerEventArgs(std::nullptr_t) noexcept {}
};

struct TouchHitTestingEventArgs :
	Windows::UI::Core::ITouchHitTestingEventArgs
{
	TouchHitTestingEventArgs(std::nullptr_t) noexcept {}
};

struct WindowSizeChangedEventArgs :
	Windows::UI::Core::IWindowSizeChangedEventArgs
{
	WindowSizeChangedEventArgs(std::nullptr_t) noexcept {}
};

struct VisibilityChangedEventArgs :
	Windows::UI::Core::IVisibilityChangedEventArgs
{
	VisibilityChangedEventArgs(std::nullptr_t) noexcept {}
};

struct IdleDispatchedHandlerArgs :
	Windows::UI::Core::IIdleDispatchedHandlerArgs
{
	IdleDispatchedHandlerArgs(std::nullptr_t) noexcept {}
};

struct AcceleratorKeyEventArgs :
	Windows::UI::Core::IAcceleratorKeyEventArgs
{
	AcceleratorKeyEventArgs(std::nullptr_t) noexcept {}
};

struct CoreAcceleratorKeys :
	Windows::UI::Core::ICoreAcceleratorKeys
{
	CoreAcceleratorKeys(std::nullptr_t) noexcept {}
};

struct CoreWindowResizeManager :
	Windows::UI::Core::ICoreWindowResizeManager,
	Requires<CoreWindowResizeManager, Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability>
{
	CoreWindowResizeManager(std::nullptr_t) noexcept {}
	static Windows::UI::Core::CoreWindowResizeManager GetForCurrentView();
};

struct CoreIndependentInputSource :
	Windows::UI::Core::ICoreInputSourceBase,
	Requires<CoreIndependentInputSource, Windows::UI::Core::ICorePointerInputSource>
{
	CoreIndependentInputSource(std::nullptr_t) noexcept {}
};

struct CoreComponentInputSource :
	Windows::UI::Core::ICoreInputSourceBase,
	Requires<CoreComponentInputSource, Windows::UI::Core::ICorePointerInputSource, Windows::UI::Core::ICoreKeyboardInputSource, Windows::UI::Core::ICoreComponentFocusable, Windows::UI::Core::ICoreTouchHitTesting>
{
	CoreComponentInputSource(std::nullptr_t) noexcept {}
};

struct CoreWindowPopupShowingEventArgs :
	Windows::UI::Core::ICoreWindowPopupShowingEventArgs
{
	CoreWindowPopupShowingEventArgs(std::nullptr_t) noexcept {}
};

struct CoreWindowDialog :
	Windows::UI::Core::ICoreWindowDialog
{
	CoreWindowDialog(std::nullptr_t) noexcept {}
	CoreWindowDialog();
	CoreWindowDialog(String const & title);
	template <unsigned S0> CoreWindowDialog(wchar_t const (&title)[S0]);
};

struct CoreWindowFlyout :
	Windows::UI::Core::ICoreWindowFlyout
{
	CoreWindowFlyout(std::nullptr_t) noexcept {}
	CoreWindowFlyout(Windows::Foundation::Point const & position);
	CoreWindowFlyout(Windows::Foundation::Point const & position, String const & title);
	template <unsigned S0> CoreWindowFlyout(Windows::Foundation::Point const & position, wchar_t const (&title)[S0]);
};

struct ImmersiveCoreWindowFactory :
	Windows::UI::Core::ICoreWindowFactory
{
	ImmersiveCoreWindowFactory(std::nullptr_t) noexcept {}
};

struct HostedCoreWindowFactory :
	Windows::UI::Core::ICoreWindowFactory
{
	HostedCoreWindowFactory(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

struct AnimationDescription :
	Windows::UI::Core::AnimationMetrics::IAnimationDescription
{
	AnimationDescription(std::nullptr_t) noexcept {}
	AnimationDescription(Windows::UI::Core::AnimationMetrics::AnimationEffect effect, Windows::UI::Core::AnimationMetrics::AnimationEffectTarget target);
};

struct PropertyAnimation :
	Windows::UI::Core::AnimationMetrics::IPropertyAnimation
{
	PropertyAnimation(std::nullptr_t) noexcept {}
};

struct ScaleAnimation :
	Windows::UI::Core::AnimationMetrics::IScaleAnimation
{
	ScaleAnimation(std::nullptr_t) noexcept {}
};

struct TranslationAnimation :
	Windows::UI::Core::AnimationMetrics::IPropertyAnimation
{
	TranslationAnimation(std::nullptr_t) noexcept {}
};

struct OpacityAnimation :
	Windows::UI::Core::AnimationMetrics::IOpacityAnimation
{
	OpacityAnimation(std::nullptr_t) noexcept {}
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

struct EdgeGestureEventArgs :
	Windows::UI::Input::IEdgeGestureEventArgs
{
	EdgeGestureEventArgs(std::nullptr_t) noexcept {}
};

struct EdgeGesture :
	Windows::UI::Input::IEdgeGesture
{
	EdgeGesture(std::nullptr_t) noexcept {}
	static Windows::UI::Input::EdgeGesture GetForCurrentView();
};

struct MouseWheelParameters :
	Windows::UI::Input::IMouseWheelParameters
{
	MouseWheelParameters(std::nullptr_t) noexcept {}
};

struct GestureRecognizer :
	Windows::UI::Input::IGestureRecognizer
{
	GestureRecognizer(std::nullptr_t) noexcept {}
	GestureRecognizer();
};

struct TappedEventArgs :
	Windows::UI::Input::ITappedEventArgs
{
	TappedEventArgs(std::nullptr_t) noexcept {}
};

struct RightTappedEventArgs :
	Windows::UI::Input::IRightTappedEventArgs
{
	RightTappedEventArgs(std::nullptr_t) noexcept {}
};

struct HoldingEventArgs :
	Windows::UI::Input::IHoldingEventArgs
{
	HoldingEventArgs(std::nullptr_t) noexcept {}
};

struct DraggingEventArgs :
	Windows::UI::Input::IDraggingEventArgs
{
	DraggingEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationStartedEventArgs :
	Windows::UI::Input::IManipulationStartedEventArgs
{
	ManipulationStartedEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationUpdatedEventArgs :
	Windows::UI::Input::IManipulationUpdatedEventArgs
{
	ManipulationUpdatedEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationInertiaStartingEventArgs :
	Windows::UI::Input::IManipulationInertiaStartingEventArgs
{
	ManipulationInertiaStartingEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationCompletedEventArgs :
	Windows::UI::Input::IManipulationCompletedEventArgs
{
	ManipulationCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct CrossSlidingEventArgs :
	Windows::UI::Input::ICrossSlidingEventArgs
{
	CrossSlidingEventArgs(std::nullptr_t) noexcept {}
};

struct PointerPoint :
	Windows::UI::Input::IPointerPoint
{
	PointerPoint(std::nullptr_t) noexcept {}
	static Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId);
	static Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId);
	static Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform);
	static Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform);
};

struct PointerPointProperties :
	Windows::UI::Input::IPointerPointProperties
{
	PointerPointProperties(std::nullptr_t) noexcept {}
};

struct PointerVisualizationSettings :
	Windows::UI::Input::IPointerVisualizationSettings
{
	PointerVisualizationSettings(std::nullptr_t) noexcept {}
	static Windows::UI::Input::PointerVisualizationSettings GetForCurrentView();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

struct InkDrawingAttributes :
	Windows::UI::Input::Inking::IInkDrawingAttributes
{
	InkDrawingAttributes(std::nullptr_t) noexcept {}
	InkDrawingAttributes();
};

struct InkStrokeRenderingSegment :
	Windows::UI::Input::Inking::IInkStrokeRenderingSegment
{
	InkStrokeRenderingSegment(std::nullptr_t) noexcept {}
};

struct InkStroke :
	Windows::UI::Input::Inking::IInkStroke
{
	InkStroke(std::nullptr_t) noexcept {}
};

struct InkStrokeBuilder :
	Windows::UI::Input::Inking::IInkStrokeBuilder
{
	InkStrokeBuilder(std::nullptr_t) noexcept {}
	InkStrokeBuilder();
};

struct InkRecognitionResult :
	Windows::UI::Input::Inking::IInkRecognitionResult
{
	InkRecognitionResult(std::nullptr_t) noexcept {}
};

struct InkStrokeContainer :
	Windows::UI::Input::Inking::IInkStrokeContainer
{
	InkStrokeContainer(std::nullptr_t) noexcept {}
	InkStrokeContainer();
};

struct InkRecognizer :
	Windows::UI::Input::Inking::IInkRecognizer
{
	InkRecognizer(std::nullptr_t) noexcept {}
};

struct InkRecognizerContainer :
	Windows::UI::Input::Inking::IInkRecognizerContainer
{
	InkRecognizerContainer(std::nullptr_t) noexcept {}
	InkRecognizerContainer();
};

struct InkManager :
	Windows::UI::Input::Inking::IInkManager
{
	InkManager(std::nullptr_t) noexcept {}
	InkManager();
	using impl_IInkRecognizerContainer::RecognizeAsync;
	using impl_IInkManager::RecognizeAsync;
};

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

struct TileUpdater :
	Windows::UI::Notifications::ITileUpdater,
	Requires<TileUpdater, Windows::UI::Notifications::ITileUpdater2>
{
	TileUpdater(std::nullptr_t) noexcept {}
};

struct TileNotification :
	Windows::UI::Notifications::ITileNotification
{
	TileNotification(std::nullptr_t) noexcept {}
	TileNotification(Windows::Data::Xml::Dom::XmlDocument const & content);
};

struct ScheduledTileNotification :
	Windows::UI::Notifications::IScheduledTileNotification
{
	ScheduledTileNotification(std::nullptr_t) noexcept {}
	ScheduledTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime);
};

struct BadgeUpdater :
	Windows::UI::Notifications::IBadgeUpdater
{
	BadgeUpdater(std::nullptr_t) noexcept {}
};

struct BadgeNotification :
	Windows::UI::Notifications::IBadgeNotification
{
	BadgeNotification(std::nullptr_t) noexcept {}
	BadgeNotification(Windows::Data::Xml::Dom::XmlDocument const & content);
};

struct ToastNotifier :
	Windows::UI::Notifications::IToastNotifier
{
	ToastNotifier(std::nullptr_t) noexcept {}
};

struct ToastNotification :
	Windows::UI::Notifications::IToastNotification
{
	ToastNotification(std::nullptr_t) noexcept {}
	ToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content);
};

struct ScheduledToastNotification :
	Windows::UI::Notifications::IScheduledToastNotification
{
	ScheduledToastNotification(std::nullptr_t) noexcept {}
	ScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime);
	ScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime, Windows::Foundation::TimeSpan const & snoozeInterval, unsigned maximumSnoozeCount);
};

struct ToastDismissedEventArgs :
	Windows::UI::Notifications::IToastDismissedEventArgs
{
	ToastDismissedEventArgs(std::nullptr_t) noexcept {}
};

struct ToastFailedEventArgs :
	Windows::UI::Notifications::IToastFailedEventArgs
{
	ToastFailedEventArgs(std::nullptr_t) noexcept {}
};

struct TileUpdateManager
{
	TileUpdateManager() = delete;
	static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication();
	static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication(String const & applicationId);
	template <unsigned S0> static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForApplication(wchar_t const (&applicationId)[S0]);
	static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForSecondaryTile(String const & tileId);
	template <unsigned S0> static Windows::UI::Notifications::TileUpdater CreateTileUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]);
	static Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::TileTemplateType type);
};

struct BadgeUpdateManager
{
	BadgeUpdateManager() = delete;
	static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication();
	static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication(String const & applicationId);
	template <unsigned S0> static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForApplication(wchar_t const (&applicationId)[S0]);
	static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForSecondaryTile(String const & tileId);
	template <unsigned S0> static Windows::UI::Notifications::BadgeUpdater CreateBadgeUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]);
	static Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::BadgeTemplateType type);
};

struct ToastNotificationManager
{
	ToastNotificationManager() = delete;
	static Windows::UI::Notifications::ToastNotifier CreateToastNotifier();
	static Windows::UI::Notifications::ToastNotifier CreateToastNotifier(String const & applicationId);
	template <unsigned S0> static Windows::UI::Notifications::ToastNotifier CreateToastNotifier(wchar_t const (&applicationId)[S0]);
	static Windows::Data::Xml::Dom::XmlDocument GetTemplateContent(Windows::UI::Notifications::ToastTemplateType type);
};

struct ToastActivatedEventArgs :
	Windows::UI::Notifications::IToastActivatedEventArgs
{
	ToastActivatedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

struct MessageDialog :
	Windows::UI::Popups::IMessageDialog
{
	MessageDialog(std::nullptr_t) noexcept {}
	MessageDialog(String const & content);
	template <unsigned S0> MessageDialog(wchar_t const (&content)[S0]);
	MessageDialog(String const & content, String const & title);
	template <unsigned S0, unsigned S1> MessageDialog(wchar_t const (&content)[S0], wchar_t const (&title)[S1]);
};

struct UICommand :
	Windows::UI::Popups::IUICommand
{
	UICommand(std::nullptr_t) noexcept {}
	UICommand();
	UICommand(String const & label);
	template <unsigned S0> UICommand(wchar_t const (&label)[S0]);
	UICommand(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action);
	template <unsigned S0> UICommand(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action);
	template <typename F> UICommand(String const & label, F action);
	template <unsigned S0, typename F> UICommand(wchar_t const (&label)[S0], F action);
	UICommand(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId);
	template <unsigned S0> UICommand(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId);
	template <typename F> UICommand(String const & label, F action, IInspectable const & commandId);
	template <unsigned S0, typename F> UICommand(wchar_t const (&label)[S0], F action, IInspectable const & commandId);
};

struct UICommandSeparator :
	Windows::UI::Popups::IUICommand
{
	UICommandSeparator(std::nullptr_t) noexcept {}
	UICommandSeparator();
};

struct PopupMenu :
	Windows::UI::Popups::IPopupMenu
{
	PopupMenu(std::nullptr_t) noexcept {}
	PopupMenu();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

struct SecondaryTileVisualElements :
	Windows::UI::StartScreen::ISecondaryTileVisualElements
{
	SecondaryTileVisualElements(std::nullptr_t) noexcept {}
};

struct SecondaryTile :
	Windows::UI::StartScreen::ISecondaryTile,
	Requires<SecondaryTile, Windows::UI::StartScreen::ISecondaryTile2>
{
	SecondaryTile(std::nullptr_t) noexcept {}
	SecondaryTile();
	SecondaryTile(String const & tileId);
	template <unsigned S0> SecondaryTile(wchar_t const (&tileId)[S0]);
	SecondaryTile(String const & tileId, String const & displayName, String const & arguments, Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize desiredSize);
	template <unsigned S0, unsigned S1, unsigned S2> SecondaryTile(wchar_t const (&tileId)[S0], wchar_t const (&displayName)[S1], wchar_t const (&arguments)[S2], Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize desiredSize);
	static bool Exists(String const & tileId);
	template <unsigned S0> static bool Exists(wchar_t const (&tileId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync(String const & applicationId);
	template <unsigned S0> static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllAsync(wchar_t const (&applicationId)[S0]);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> FindAllForPackageAsync();
};

struct VisualElementsRequestedEventArgs :
	Windows::UI::StartScreen::IVisualElementsRequestedEventArgs
{
	VisualElementsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct VisualElementsRequest :
	Windows::UI::StartScreen::IVisualElementsRequest
{
	VisualElementsRequest(std::nullptr_t) noexcept {}
};

struct VisualElementsRequestDeferral :
	Windows::UI::StartScreen::IVisualElementsRequestDeferral
{
	VisualElementsRequestDeferral(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

struct TextConstants
{
	TextConstants() = delete;
	static Windows::UI::Color AutoColor();
	static int MinUnitCount();
	static int MaxUnitCount();
	static Windows::UI::Color UndefinedColor();
	static float UndefinedFloatValue();
	static int UndefinedInt32Value();
	static Windows::UI::Text::FontStretch UndefinedFontStretch();
	static Windows::UI::Text::FontStyle UndefinedFontStyle();
};

struct FontWeights :
	Windows::UI::Text::IFontWeights
{
	FontWeights(std::nullptr_t) noexcept {}
	static Windows::UI::Text::FontWeight Black();
	static Windows::UI::Text::FontWeight Bold();
	static Windows::UI::Text::FontWeight ExtraBlack();
	static Windows::UI::Text::FontWeight ExtraBold();
	static Windows::UI::Text::FontWeight ExtraLight();
	static Windows::UI::Text::FontWeight Light();
	static Windows::UI::Text::FontWeight Medium();
	static Windows::UI::Text::FontWeight Normal();
	static Windows::UI::Text::FontWeight SemiBold();
	static Windows::UI::Text::FontWeight SemiLight();
	static Windows::UI::Text::FontWeight Thin();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

struct ApplicationView :
	Windows::UI::ViewManagement::IApplicationView
{
	ApplicationView(std::nullptr_t) noexcept {}
	static int GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window);
	static Windows::UI::ViewManagement::ApplicationView GetForCurrentView();
	static bool TerminateAppOnFinalViewClose();
	static void TerminateAppOnFinalViewClose(bool value);
};

struct ApplicationViewConsolidatedEventArgs :
	Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs
{
	ApplicationViewConsolidatedEventArgs(std::nullptr_t) noexcept {}
};

struct ApplicationViewSwitcher
{
	ApplicationViewSwitcher() = delete;
	static void DisableShowingMainViewOnActivation();
	static Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId);
	static Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference);
	static Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference, int anchorViewId, Windows::UI::ViewManagement::ViewSizePreference anchorSizePreference);
	static Windows::Foundation::IAsyncAction SwitchAsync(int viewId);
	static Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId);
	static Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options);
	static Windows::Foundation::IAsyncOperation<bool> PrepareForCustomAnimatedSwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options);
};

struct ProjectionManager
{
	ProjectionManager() = delete;
	static Windows::Foundation::IAsyncAction StartProjectingAsync(int projectionViewId, int anchorViewId);
	static Windows::Foundation::IAsyncAction SwapDisplaysForViewsAsync(int projectionViewId, int anchorViewId);
	static Windows::Foundation::IAsyncAction StopProjectingAsync(int projectionViewId, int anchorViewId);
	static bool ProjectionDisplayAvailable();
	static EventRegistrationToken ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static EventRegistrationToken ProjectionDisplayAvailableChanged(F handler);
	static void ProjectionDisplayAvailableChanged(EventRegistrationToken token);
};

struct InputPaneVisibilityEventArgs :
	Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs
{
	InputPaneVisibilityEventArgs(std::nullptr_t) noexcept {}
};

struct InputPane :
	Windows::UI::ViewManagement::IInputPane
{
	InputPane(std::nullptr_t) noexcept {}
	static Windows::UI::ViewManagement::InputPane GetForCurrentView();
};

struct AccessibilitySettings :
	Windows::UI::ViewManagement::IAccessibilitySettings
{
	AccessibilitySettings(std::nullptr_t) noexcept {}
	AccessibilitySettings();
};

struct UISettings :
	Windows::UI::ViewManagement::IUISettings
{
	UISettings(std::nullptr_t) noexcept {}
	UISettings();
};

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

struct ActivatedDeferral :
	Windows::UI::WebUI::IActivatedDeferral
{
	ActivatedDeferral(std::nullptr_t) noexcept {}
};

struct ActivatedOperation :
	Windows::UI::WebUI::IActivatedOperation
{
	ActivatedOperation(std::nullptr_t) noexcept {}
};

struct WebUILaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,
	Requires<WebUILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUILaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUISearchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ISearchActivatedEventArgs,
	Requires<WebUISearchActivatedEventArgs, Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUISearchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIShareTargetActivatedEventArgs :
	Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs,
	Requires<WebUIShareTargetActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIShareTargetActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIFileActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileActivatedEventArgs,
	Requires<WebUIFileActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral, Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles>
{
	WebUIFileActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIProtocolActivatedEventArgs :
	Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,
	Requires<WebUIProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIProtocolActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIFileOpenPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs,
	Requires<WebUIFileOpenPickerActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIFileOpenPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIFileSavePickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs,
	Requires<WebUIFileSavePickerActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIFileSavePickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUICachedFileUpdaterActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs,
	Requires<WebUICachedFileUpdaterActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUICachedFileUpdaterActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs,
	Requires<WebUIContactPickerActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIDeviceActivatedEventArgs :
	Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs,
	Requires<WebUIDeviceActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIDeviceActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIPrintTaskSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs,
	Requires<WebUIPrintTaskSettingsActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIPrintTaskSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUICameraSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs,
	Requires<WebUICameraSettingsActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUICameraSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIAppointmentsProviderAddAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs,
	Requires<WebUIAppointmentsProviderAddAppointmentActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIAppointmentsProviderAddAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs,
	Requires<WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIAppointmentsProviderReplaceAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs,
	Requires<WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIAppointmentsProviderRemoveAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs,
	Requires<WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIAppointmentsProviderShowTimeFrameActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs,
	Requires<WebUIContactCallActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactMessageActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs,
	Requires<WebUIContactMessageActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactMessageActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactMapActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs,
	Requires<WebUIContactMapActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactMapActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactPostActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs,
	Requires<WebUIContactPostActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactPostActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIContactVideoCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs,
	Requires<WebUIContactVideoCallActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIContactVideoCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUILockScreenCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs,
	Requires<WebUILockScreenCallActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUILockScreenCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIRestrictedLaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs,
	Requires<WebUIRestrictedLaunchActivatedEventArgs, Windows::UI::WebUI::IActivatedEventArgsDeferral>
{
	WebUIRestrictedLaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUINavigatedOperation :
	Windows::UI::WebUI::IWebUINavigatedOperation
{
	WebUINavigatedOperation(std::nullptr_t) noexcept {}
};

struct SuspendingDeferral :
	Windows::ApplicationModel::ISuspendingDeferral
{
	SuspendingDeferral(std::nullptr_t) noexcept {}
};

struct SuspendingOperation :
	Windows::ApplicationModel::ISuspendingOperation
{
	SuspendingOperation(std::nullptr_t) noexcept {}
};

struct SuspendingEventArgs :
	Windows::ApplicationModel::ISuspendingEventArgs
{
	SuspendingEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIBackgroundTaskInstanceRuntimeClass :
	Windows::UI::WebUI::IWebUIBackgroundTaskInstance,
	Requires<WebUIBackgroundTaskInstanceRuntimeClass, Windows::ApplicationModel::Background::IBackgroundTaskInstance>
{
	WebUIBackgroundTaskInstanceRuntimeClass(std::nullptr_t) noexcept {}
};

struct WebUIBackgroundTaskInstance
{
	WebUIBackgroundTaskInstance() = delete;
	static Windows::UI::WebUI::IWebUIBackgroundTaskInstance Current();
};

struct WebUINavigatedDeferral :
	Windows::UI::WebUI::IWebUINavigatedDeferral
{
	WebUINavigatedDeferral(std::nullptr_t) noexcept {}
};

struct WebUINavigatedEventArgs :
	Windows::UI::WebUI::IWebUINavigatedEventArgs
{
	WebUINavigatedEventArgs(std::nullptr_t) noexcept {}
};

struct WebUIApplication
{
	WebUIApplication() = delete;
	static EventRegistrationToken Activated(Windows::UI::WebUI::IActivatedEventHandler const & handler);
	template <typename F> static EventRegistrationToken Activated(F handler);
	static void Activated(EventRegistrationToken token);
	static EventRegistrationToken Suspending(Windows::UI::WebUI::ISuspendingEventHandler const & handler);
	template <typename F> static EventRegistrationToken Suspending(F handler);
	static void Suspending(EventRegistrationToken token);
	static EventRegistrationToken Resuming(Windows::UI::WebUI::IResumingEventHandler const & handler);
	template <typename F> static EventRegistrationToken Resuming(F handler);
	static void Resuming(EventRegistrationToken token);
	static EventRegistrationToken Navigated(Windows::UI::WebUI::INavigatedEventHandler const & handler);
	template <typename F> static EventRegistrationToken Navigated(F handler);
	static void Navigated(EventRegistrationToken token);
};

struct HtmlPrintDocumentSource :
	Windows::UI::WebUI::IHtmlPrintDocumentSource
{
	HtmlPrintDocumentSource(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Web {

struct WebError
{
	WebError() = delete;
	static Windows::Web::WebErrorStatus GetStatus(int hresult);
};

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

struct ServiceDocument :
	Windows::Web::AtomPub::IServiceDocument
{
	ServiceDocument(std::nullptr_t) noexcept {}
};

struct ResourceCollection :
	Windows::Web::AtomPub::IResourceCollection
{
	ResourceCollection(std::nullptr_t) noexcept {}
};

struct Workspace :
	Windows::Web::AtomPub::IWorkspace
{
	Workspace(std::nullptr_t) noexcept {}
};

struct AtomPubClient :
	Windows::Web::AtomPub::IAtomPubClient
{
	AtomPubClient(std::nullptr_t) noexcept {}
	AtomPubClient();
	AtomPubClient(Windows::Security::Credentials::PasswordCredential const & serverCredential);
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

struct HttpMethod :
	Windows::Web::Http::IHttpMethod,
	Requires<HttpMethod, Windows::Foundation::IStringable>
{
	HttpMethod(std::nullptr_t) noexcept {}
	HttpMethod(String const & method);
	template <unsigned S0> HttpMethod(wchar_t const (&method)[S0]);
	static Windows::Web::Http::HttpMethod Delete();
	static Windows::Web::Http::HttpMethod Get();
	static Windows::Web::Http::HttpMethod Head();
	static Windows::Web::Http::HttpMethod Options();
	static Windows::Web::Http::HttpMethod Patch();
	static Windows::Web::Http::HttpMethod Post();
	static Windows::Web::Http::HttpMethod Put();
};

struct HttpRequestMessage :
	Windows::Web::Http::IHttpRequestMessage,
	Requires<HttpRequestMessage, Windows::Foundation::IStringable>
{
	HttpRequestMessage(std::nullptr_t) noexcept {}
	HttpRequestMessage();
	HttpRequestMessage(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri);
};

struct HttpResponseMessage :
	Windows::Web::Http::IHttpResponseMessage,
	Requires<HttpResponseMessage, Windows::Foundation::IStringable>
{
	HttpResponseMessage(std::nullptr_t) noexcept {}
	HttpResponseMessage();
	HttpResponseMessage(Windows::Web::Http::HttpStatusCode statusCode);
};

struct HttpClient :
	Windows::Web::Http::IHttpClient,
	Requires<HttpClient, Windows::Foundation::IStringable>
{
	HttpClient(std::nullptr_t) noexcept {}
	HttpClient();
	HttpClient(Windows::Web::Http::Filters::IHttpFilter const & filter);
};

struct HttpCookie :
	Windows::Web::Http::IHttpCookie,
	Requires<HttpCookie, Windows::Foundation::IStringable>
{
	HttpCookie(std::nullptr_t) noexcept {}
	HttpCookie(String const & name, String const & domain, String const & path);
	template <unsigned S0, unsigned S1, unsigned S2> HttpCookie(wchar_t const (&name)[S0], wchar_t const (&domain)[S1], wchar_t const (&path)[S2]);
};

struct HttpCookieCollection :
	Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie>
{
	HttpCookieCollection(std::nullptr_t) noexcept {}
};

struct HttpTransportInformation :
	Windows::Web::Http::IHttpTransportInformation,
	Requires<HttpTransportInformation, Windows::Foundation::IStringable>
{
	HttpTransportInformation(std::nullptr_t) noexcept {}
};

struct HttpStringContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpStringContent, Windows::Foundation::IStringable>
{
	HttpStringContent(std::nullptr_t) noexcept {}
	HttpStringContent(String const & content);
	template <unsigned S0> HttpStringContent(wchar_t const (&content)[S0]);
	HttpStringContent(String const & content, Windows::Storage::Streams::UnicodeEncoding encoding);
	template <unsigned S0> HttpStringContent(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding encoding);
	HttpStringContent(String const & content, Windows::Storage::Streams::UnicodeEncoding encoding, String const & mediaType);
	template <unsigned S0, unsigned S1> HttpStringContent(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding encoding, wchar_t const (&mediaType)[S1]);
};

struct HttpBufferContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpBufferContent, Windows::Foundation::IStringable>
{
	HttpBufferContent(std::nullptr_t) noexcept {}
	HttpBufferContent(Windows::Storage::Streams::IBuffer const & content);
	HttpBufferContent(Windows::Storage::Streams::IBuffer const & content, unsigned offset, unsigned count);
};

struct HttpStreamContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpStreamContent, Windows::Foundation::IStringable>
{
	HttpStreamContent(std::nullptr_t) noexcept {}
	HttpStreamContent(Windows::Storage::Streams::IInputStream const & content);
};

struct HttpFormUrlEncodedContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpFormUrlEncodedContent, Windows::Foundation::IStringable>
{
	HttpFormUrlEncodedContent(std::nullptr_t) noexcept {}
	HttpFormUrlEncodedContent(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content);
};

struct HttpMultipartContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpMultipartContent, Windows::Web::Http::IHttpMultipartContent, Windows::Foundation::IStringable, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	HttpMultipartContent(std::nullptr_t) noexcept {}
	HttpMultipartContent();
	HttpMultipartContent(String const & subtype);
	template <unsigned S0> HttpMultipartContent(wchar_t const (&subtype)[S0]);
	HttpMultipartContent(String const & subtype, String const & boundary);
	template <unsigned S0, unsigned S1> HttpMultipartContent(wchar_t const (&subtype)[S0], wchar_t const (&boundary)[S1]);
};

struct HttpMultipartFormDataContent :
	Windows::Web::Http::IHttpContent,
	Requires<HttpMultipartFormDataContent, Windows::Web::Http::IHttpMultipartFormDataContent, Windows::Foundation::IStringable, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	HttpMultipartFormDataContent(std::nullptr_t) noexcept {}
	HttpMultipartFormDataContent();
	HttpMultipartFormDataContent(String const & boundary);
	template <unsigned S0> HttpMultipartFormDataContent(wchar_t const (&boundary)[S0]);
};

struct HttpCookieManager :
	Windows::Web::Http::IHttpCookieManager
{
	HttpCookieManager(std::nullptr_t) noexcept {}
};

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

struct HttpCacheControl :
	Windows::Web::Http::Filters::IHttpCacheControl
{
	HttpCacheControl(std::nullptr_t) noexcept {}
};

struct HttpBaseProtocolFilter :
	Windows::Web::Http::Filters::IHttpBaseProtocolFilter
{
	HttpBaseProtocolFilter(std::nullptr_t) noexcept {}
	HttpBaseProtocolFilter();
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

struct HttpContentHeaderCollection :
	Windows::Web::Http::Headers::IHttpContentHeaderCollection,
	Requires<HttpContentHeaderCollection, Windows::Foundation::IStringable>
{
	HttpContentHeaderCollection(std::nullptr_t) noexcept {}
	HttpContentHeaderCollection();
};

struct HttpRequestHeaderCollection :
	Windows::Web::Http::Headers::IHttpRequestHeaderCollection,
	Requires<HttpRequestHeaderCollection, Windows::Foundation::IStringable>
{
	HttpRequestHeaderCollection(std::nullptr_t) noexcept {}
};

struct HttpResponseHeaderCollection :
	Windows::Web::Http::Headers::IHttpResponseHeaderCollection,
	Requires<HttpResponseHeaderCollection, Windows::Foundation::IStringable>
{
	HttpResponseHeaderCollection(std::nullptr_t) noexcept {}
};

struct HttpContentDispositionHeaderValue :
	Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue,
	Requires<HttpContentDispositionHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentDispositionHeaderValue(std::nullptr_t) noexcept {}
	HttpContentDispositionHeaderValue(String const & dispositionType);
	template <unsigned S0> HttpContentDispositionHeaderValue(wchar_t const (&dispositionType)[S0]);
	static Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue);
};

struct HttpContentCodingHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection,
	Requires<HttpContentCodingHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpContentCodingHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpLanguageHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection,
	Requires<HttpLanguageHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpLanguageHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpContentRangeHeaderValue :
	Windows::Web::Http::Headers::IHttpContentRangeHeaderValue,
	Requires<HttpContentRangeHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentRangeHeaderValue(std::nullptr_t) noexcept {}
	HttpContentRangeHeaderValue(unsigned long long length);
	HttpContentRangeHeaderValue(unsigned long long from, unsigned long long to);
	HttpContentRangeHeaderValue(unsigned long long from, unsigned long long to, unsigned long long length);
	static Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue);
};

struct HttpMediaTypeHeaderValue :
	Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue,
	Requires<HttpMediaTypeHeaderValue, Windows::Foundation::IStringable>
{
	HttpMediaTypeHeaderValue(std::nullptr_t) noexcept {}
	HttpMediaTypeHeaderValue(String const & mediaType);
	template <unsigned S0> HttpMediaTypeHeaderValue(wchar_t const (&mediaType)[S0]);
	static Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue);
};

struct HttpMediaTypeWithQualityHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection,
	Requires<HttpMediaTypeWithQualityHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpMediaTypeWithQualityHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpContentCodingWithQualityHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection,
	Requires<HttpContentCodingWithQualityHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpContentCodingWithQualityHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpLanguageRangeWithQualityHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection,
	Requires<HttpLanguageRangeWithQualityHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpLanguageRangeWithQualityHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpCredentialsHeaderValue :
	Windows::Web::Http::Headers::IHttpCredentialsHeaderValue,
	Requires<HttpCredentialsHeaderValue, Windows::Foundation::IStringable>
{
	HttpCredentialsHeaderValue(std::nullptr_t) noexcept {}
	HttpCredentialsHeaderValue(String const & scheme);
	template <unsigned S0> HttpCredentialsHeaderValue(wchar_t const (&scheme)[S0]);
	HttpCredentialsHeaderValue(String const & scheme, String const & token);
	template <unsigned S0, unsigned S1> HttpCredentialsHeaderValue(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]);
	static Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue);
};

struct HttpCacheDirectiveHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection,
	Requires<HttpCacheDirectiveHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpCacheDirectiveHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpConnectionOptionHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection,
	Requires<HttpConnectionOptionHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpConnectionOptionHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpCookiePairHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection,
	Requires<HttpCookiePairHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpCookiePairHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpExpectationHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection,
	Requires<HttpExpectationHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpExpectationHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpTransferCodingHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection,
	Requires<HttpTransferCodingHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpTransferCodingHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpProductInfoHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection,
	Requires<HttpProductInfoHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpProductInfoHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpMethodHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection,
	Requires<HttpMethodHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpMethodHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpChallengeHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection,
	Requires<HttpChallengeHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpChallengeHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpDateOrDeltaHeaderValue :
	Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue,
	Requires<HttpDateOrDeltaHeaderValue, Windows::Foundation::IStringable>
{
	HttpDateOrDeltaHeaderValue(std::nullptr_t) noexcept {}
	static Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue);
};

struct HttpNameValueHeaderValue :
	Windows::Web::Http::Headers::IHttpNameValueHeaderValue,
	Requires<HttpNameValueHeaderValue, Windows::Foundation::IStringable>
{
	HttpNameValueHeaderValue(std::nullptr_t) noexcept {}
	HttpNameValueHeaderValue(String const & name);
	template <unsigned S0> HttpNameValueHeaderValue(wchar_t const (&name)[S0]);
	HttpNameValueHeaderValue(String const & name, String const & value);
	template <unsigned S0, unsigned S1> HttpNameValueHeaderValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]);
	static Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue);
};

struct HttpChallengeHeaderValue :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValue,
	Requires<HttpChallengeHeaderValue, Windows::Foundation::IStringable>
{
	HttpChallengeHeaderValue(std::nullptr_t) noexcept {}
	HttpChallengeHeaderValue(String const & scheme);
	template <unsigned S0> HttpChallengeHeaderValue(wchar_t const (&scheme)[S0]);
	HttpChallengeHeaderValue(String const & scheme, String const & token);
	template <unsigned S0, unsigned S1> HttpChallengeHeaderValue(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]);
	static Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue);
};

struct HttpConnectionOptionHeaderValue :
	Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue,
	Requires<HttpConnectionOptionHeaderValue, Windows::Foundation::IStringable>
{
	HttpConnectionOptionHeaderValue(std::nullptr_t) noexcept {}
	HttpConnectionOptionHeaderValue(String const & token);
	template <unsigned S0> HttpConnectionOptionHeaderValue(wchar_t const (&token)[S0]);
	static Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue);
};

struct HttpContentCodingHeaderValue :
	Windows::Web::Http::Headers::IHttpContentCodingHeaderValue,
	Requires<HttpContentCodingHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentCodingHeaderValue(std::nullptr_t) noexcept {}
	HttpContentCodingHeaderValue(String const & contentCoding);
	template <unsigned S0> HttpContentCodingHeaderValue(wchar_t const (&contentCoding)[S0]);
	static Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue);
};

struct HttpCookiePairHeaderValue :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValue,
	Requires<HttpCookiePairHeaderValue, Windows::Foundation::IStringable>
{
	HttpCookiePairHeaderValue(std::nullptr_t) noexcept {}
	HttpCookiePairHeaderValue(String const & name);
	template <unsigned S0> HttpCookiePairHeaderValue(wchar_t const (&name)[S0]);
	HttpCookiePairHeaderValue(String const & name, String const & value);
	template <unsigned S0, unsigned S1> HttpCookiePairHeaderValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]);
	static Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue);
};

struct HttpExpectationHeaderValue :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValue,
	Requires<HttpExpectationHeaderValue, Windows::Foundation::IStringable>
{
	HttpExpectationHeaderValue(std::nullptr_t) noexcept {}
	HttpExpectationHeaderValue(String const & name);
	template <unsigned S0> HttpExpectationHeaderValue(wchar_t const (&name)[S0]);
	HttpExpectationHeaderValue(String const & name, String const & value);
	template <unsigned S0, unsigned S1> HttpExpectationHeaderValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]);
	static Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue);
};

struct HttpLanguageRangeWithQualityHeaderValue :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue,
	Requires<HttpLanguageRangeWithQualityHeaderValue, Windows::Foundation::IStringable>
{
	HttpLanguageRangeWithQualityHeaderValue(std::nullptr_t) noexcept {}
	HttpLanguageRangeWithQualityHeaderValue(String const & languageRange);
	template <unsigned S0> HttpLanguageRangeWithQualityHeaderValue(wchar_t const (&languageRange)[S0]);
	HttpLanguageRangeWithQualityHeaderValue(String const & languageRange, double quality);
	template <unsigned S0> HttpLanguageRangeWithQualityHeaderValue(wchar_t const (&languageRange)[S0], double quality);
	static Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue);
};

struct HttpMediaTypeWithQualityHeaderValue :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue,
	Requires<HttpMediaTypeWithQualityHeaderValue, Windows::Foundation::IStringable>
{
	HttpMediaTypeWithQualityHeaderValue(std::nullptr_t) noexcept {}
	HttpMediaTypeWithQualityHeaderValue(String const & mediaType);
	template <unsigned S0> HttpMediaTypeWithQualityHeaderValue(wchar_t const (&mediaType)[S0]);
	HttpMediaTypeWithQualityHeaderValue(String const & mediaType, double quality);
	template <unsigned S0> HttpMediaTypeWithQualityHeaderValue(wchar_t const (&mediaType)[S0], double quality);
	static Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue);
};

struct HttpProductHeaderValue :
	Windows::Web::Http::Headers::IHttpProductHeaderValue,
	Requires<HttpProductHeaderValue, Windows::Foundation::IStringable>
{
	HttpProductHeaderValue(std::nullptr_t) noexcept {}
	HttpProductHeaderValue(String const & productName);
	template <unsigned S0> HttpProductHeaderValue(wchar_t const (&productName)[S0]);
	HttpProductHeaderValue(String const & productName, String const & productVersion);
	template <unsigned S0, unsigned S1> HttpProductHeaderValue(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]);
	static Windows::Web::Http::Headers::HttpProductHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpProductHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue);
};

struct HttpProductInfoHeaderValue :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValue,
	Requires<HttpProductInfoHeaderValue, Windows::Foundation::IStringable>
{
	HttpProductInfoHeaderValue(std::nullptr_t) noexcept {}
	HttpProductInfoHeaderValue(String const & productComment);
	template <unsigned S0> HttpProductInfoHeaderValue(wchar_t const (&productComment)[S0]);
	HttpProductInfoHeaderValue(String const & productName, String const & productVersion);
	template <unsigned S0, unsigned S1> HttpProductInfoHeaderValue(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]);
	static Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue);
};

struct HttpContentCodingWithQualityHeaderValue :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue,
	Requires<HttpContentCodingWithQualityHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentCodingWithQualityHeaderValue(std::nullptr_t) noexcept {}
	HttpContentCodingWithQualityHeaderValue(String const & contentCoding);
	template <unsigned S0> HttpContentCodingWithQualityHeaderValue(wchar_t const (&contentCoding)[S0]);
	HttpContentCodingWithQualityHeaderValue(String const & contentCoding, double quality);
	template <unsigned S0> HttpContentCodingWithQualityHeaderValue(wchar_t const (&contentCoding)[S0], double quality);
	static Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue);
};

struct HttpTransferCodingHeaderValue :
	Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue,
	Requires<HttpTransferCodingHeaderValue, Windows::Foundation::IStringable>
{
	HttpTransferCodingHeaderValue(std::nullptr_t) noexcept {}
	HttpTransferCodingHeaderValue(String const & input);
	template <unsigned S0> HttpTransferCodingHeaderValue(wchar_t const (&input)[S0]);
	static Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(String const & input);
	template <unsigned S0> static Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(wchar_t const (&input)[S0]);
	static bool TryParse(String const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue);
	template <unsigned S0> static bool TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue);
};

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

struct SyndicationAttribute :
	Windows::Web::Syndication::ISyndicationAttribute
{
	SyndicationAttribute(std::nullptr_t) noexcept {}
	SyndicationAttribute();
	SyndicationAttribute(String const & attributeName, String const & attributeNamespace, String const & attributeValue);
	template <unsigned S0, unsigned S1, unsigned S2> SyndicationAttribute(wchar_t const (&attributeName)[S0], wchar_t const (&attributeNamespace)[S1], wchar_t const (&attributeValue)[S2]);
};

struct SyndicationNode :
	Windows::Web::Syndication::ISyndicationNode
{
	SyndicationNode(std::nullptr_t) noexcept {}
	SyndicationNode();
	SyndicationNode(String const & nodeName, String const & nodeNamespace, String const & nodeValue);
	template <unsigned S0, unsigned S1, unsigned S2> SyndicationNode(wchar_t const (&nodeName)[S0], wchar_t const (&nodeNamespace)[S1], wchar_t const (&nodeValue)[S2]);
};

struct SyndicationGenerator :
	Windows::Web::Syndication::ISyndicationGenerator,
	Requires<SyndicationGenerator, Windows::Web::Syndication::ISyndicationNode>
{
	SyndicationGenerator(std::nullptr_t) noexcept {}
	SyndicationGenerator();
	SyndicationGenerator(String const & text);
	template <unsigned S0> SyndicationGenerator(wchar_t const (&text)[S0]);
};

struct SyndicationText :
	Windows::Web::Syndication::ISyndicationText
{
	SyndicationText(std::nullptr_t) noexcept {}
	SyndicationText();
	SyndicationText(String const & text);
	template <unsigned S0> SyndicationText(wchar_t const (&text)[S0]);
	SyndicationText(String const & text, Windows::Web::Syndication::SyndicationTextType type);
	template <unsigned S0> SyndicationText(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType type);
};

struct SyndicationContent :
	Windows::Web::Syndication::ISyndicationContent
{
	SyndicationContent(std::nullptr_t) noexcept {}
	SyndicationContent();
	SyndicationContent(String const & text, Windows::Web::Syndication::SyndicationTextType type);
	template <unsigned S0> SyndicationContent(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType type);
	SyndicationContent(Windows::Foundation::Uri const & sourceUri);
};

struct SyndicationLink :
	Windows::Web::Syndication::ISyndicationLink
{
	SyndicationLink(std::nullptr_t) noexcept {}
	SyndicationLink();
	SyndicationLink(Windows::Foundation::Uri const & uri);
	SyndicationLink(Windows::Foundation::Uri const & uri, String const & relationship, String const & title, String const & mediaType, unsigned length);
	template <unsigned S0, unsigned S1, unsigned S2> SyndicationLink(Windows::Foundation::Uri const & uri, wchar_t const (&relationship)[S0], wchar_t const (&title)[S1], wchar_t const (&mediaType)[S2], unsigned length);
};

struct SyndicationPerson :
	Windows::Web::Syndication::ISyndicationPerson
{
	SyndicationPerson(std::nullptr_t) noexcept {}
	SyndicationPerson();
	SyndicationPerson(String const & name);
	template <unsigned S0> SyndicationPerson(wchar_t const (&name)[S0]);
	SyndicationPerson(String const & name, String const & email, Windows::Foundation::Uri const & uri);
	template <unsigned S0, unsigned S1> SyndicationPerson(wchar_t const (&name)[S0], wchar_t const (&email)[S1], Windows::Foundation::Uri const & uri);
};

struct SyndicationCategory :
	Windows::Web::Syndication::ISyndicationCategory
{
	SyndicationCategory(std::nullptr_t) noexcept {}
	SyndicationCategory();
	SyndicationCategory(String const & term);
	template <unsigned S0> SyndicationCategory(wchar_t const (&term)[S0]);
	SyndicationCategory(String const & term, String const & scheme, String const & label);
	template <unsigned S0, unsigned S1, unsigned S2> SyndicationCategory(wchar_t const (&term)[S0], wchar_t const (&scheme)[S1], wchar_t const (&label)[S2]);
};

struct SyndicationFeed :
	Windows::Web::Syndication::ISyndicationFeed
{
	SyndicationFeed(std::nullptr_t) noexcept {}
	SyndicationFeed();
	SyndicationFeed(String const & title, String const & subtitle, Windows::Foundation::Uri const & uri);
	template <unsigned S0, unsigned S1> SyndicationFeed(wchar_t const (&title)[S0], wchar_t const (&subtitle)[S1], Windows::Foundation::Uri const & uri);
};

struct SyndicationItem :
	Windows::Web::Syndication::ISyndicationItem
{
	SyndicationItem(std::nullptr_t) noexcept {}
	SyndicationItem();
	SyndicationItem(String const & title, Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri);
	template <unsigned S0> SyndicationItem(wchar_t const (&title)[S0], Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri);
};

struct SyndicationClient :
	Windows::Web::Syndication::ISyndicationClient
{
	SyndicationClient(std::nullptr_t) noexcept {}
	SyndicationClient();
	SyndicationClient(Windows::Security::Credentials::PasswordCredential const & serverCredential);
};

struct SyndicationError
{
	SyndicationError() = delete;
	static Windows::Web::Syndication::SyndicationErrorStatus GetStatus(int hresult);
};

}}}}
