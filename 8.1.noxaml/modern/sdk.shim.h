// Modern v1.23 - http://moderncpp.com
// Copyright (c) 2015 Kenny Kerr

#pragma once

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

template <typename T> struct impl_BackgroundTaskCanceledEventHandler : ImplementsDefault<IBackgroundTaskCanceledEventHandler>
{
	impl_BackgroundTaskCanceledEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::ApplicationModel::Background::IBackgroundTaskInstance> sender, Windows::ApplicationModel::Background::BackgroundTaskCancellationReason reason) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::ApplicationModel::Background::IBackgroundTaskInstance>(sender), reason); });
	}
};

template <typename T> IBackgroundTaskCanceledEventHandler BackgroundTaskCanceledEventHandler(T handler)
{
	return make<impl_BackgroundTaskCanceledEventHandler<T>>(handler);
}

template <typename T> struct impl_BackgroundTaskProgressEventHandler : ImplementsDefault<IBackgroundTaskProgressEventHandler>
{
	impl_BackgroundTaskProgressEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> sender, AbiArgIn<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs> args) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::ApplicationModel::Background::BackgroundTaskRegistration>(sender), forward<Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs>(args)); });
	}
};

template <typename T> IBackgroundTaskProgressEventHandler BackgroundTaskProgressEventHandler(T handler)
{
	return make<impl_BackgroundTaskProgressEventHandler<T>>(handler);
}

template <typename T> struct impl_BackgroundTaskCompletedEventHandler : ImplementsDefault<IBackgroundTaskCompletedEventHandler>
{
	impl_BackgroundTaskCompletedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> sender, AbiArgIn<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs> args) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::ApplicationModel::Background::BackgroundTaskRegistration>(sender), forward<Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs>(args)); });
	}
};

template <typename T> IBackgroundTaskCompletedEventHandler BackgroundTaskCompletedEventHandler(T handler)
{
	return make<impl_BackgroundTaskCompletedEventHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

template <typename T> struct impl_DataProviderHandler : ImplementsDefault<IDataProviderHandler>
{
	impl_DataProviderHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::ApplicationModel::DataTransfer::IDataProviderRequest> request) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::ApplicationModel::DataTransfer::DataProviderRequest>(request)); });
	}
};

template <typename T> IDataProviderHandler DataProviderHandler(T handler)
{
	return make<impl_DataProviderHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

template <typename T> struct impl_LicenseChangedEventHandler : ImplementsDefault<ILicenseChangedEventHandler>
{
	impl_LicenseChangedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke() noexcept override
	{
		return call([&]{ m_handler(); });
	}
};

template <typename T> ILicenseChangedEventHandler LicenseChangedEventHandler(T handler)
{
	return make<impl_LicenseChangedEventHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

template <typename T> struct impl_WordSegmentsTokenizingHandler : ImplementsDefault<IWordSegmentsTokenizingHandler>
{
	impl_WordSegmentsTokenizingHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>> precedingWords, AbiArgIn<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>> words) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>>(precedingWords), forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>>(words)); });
	}
};

template <typename T> IWordSegmentsTokenizingHandler WordSegmentsTokenizingHandler(T handler)
{
	return make<impl_WordSegmentsTokenizingHandler<T>>(handler);
}

template <typename T> struct impl_SelectableWordSegmentsTokenizingHandler : ImplementsDefault<ISelectableWordSegmentsTokenizingHandler>
{
	impl_SelectableWordSegmentsTokenizingHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>> precedingWords, AbiArgIn<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>> words) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>>(precedingWords), forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>>(words)); });
	}
};

template <typename T> ISelectableWordSegmentsTokenizingHandler SelectableWordSegmentsTokenizingHandler(T handler)
{
	return make<impl_SelectableWordSegmentsTokenizingHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

template <typename T> struct impl_SmartCardPinResetHandler : ImplementsDefault<ISmartCardPinResetHandler>
{
	impl_SmartCardPinResetHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Devices::SmartCards::ISmartCardProvisioning> sender, AbiArgIn<Windows::Devices::SmartCards::ISmartCardPinResetRequest> request) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Devices::SmartCards::SmartCardProvisioning>(sender), forward<Windows::Devices::SmartCards::SmartCardPinResetRequest>(request)); });
	}
};

template <typename T> ISmartCardPinResetHandler SmartCardPinResetHandler(T handler)
{
	return make<impl_SmartCardPinResetHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

template <typename T> struct impl_SmsMessageReceivedEventHandler : ImplementsDefault<ISmsMessageReceivedEventHandler>
{
	impl_SmsMessageReceivedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Devices::Sms::ISmsDevice> sender, AbiArgIn<Windows::Devices::Sms::ISmsMessageReceivedEventArgs> e) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Devices::Sms::SmsDevice>(sender), forward<Windows::Devices::Sms::SmsMessageReceivedEventArgs>(e)); });
	}
};

template <typename T> ISmsMessageReceivedEventHandler SmsMessageReceivedEventHandler(T handler)
{
	return make<impl_SmsMessageReceivedEventHandler<T>>(handler);
}

template <typename T> struct impl_SmsDeviceStatusChangedEventHandler : ImplementsDefault<ISmsDeviceStatusChangedEventHandler>
{
	impl_SmsDeviceStatusChangedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Devices::Sms::ISmsDevice> sender) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Devices::Sms::SmsDevice>(sender)); });
	}
};

template <typename T> ISmsDeviceStatusChangedEventHandler SmsDeviceStatusChangedEventHandler(T handler)
{
	return make<impl_SmsDeviceStatusChangedEventHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Foundation {

template <typename T> struct impl_AsyncActionCompletedHandler : ImplementsDefault<IAsyncActionCompletedHandler>
{
	impl_AsyncActionCompletedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Foundation::IAsyncAction> asyncInfo, AsyncStatus asyncStatus) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Foundation::IAsyncAction>(asyncInfo), asyncStatus); });
	}
};

template <typename T> IAsyncActionCompletedHandler AsyncActionCompletedHandler(T handler)
{
	return make<impl_AsyncActionCompletedHandler<T>>(handler);
}

}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

template <typename T> struct impl_PrintTaskSourceRequestedHandler : ImplementsDefault<IPrintTaskSourceRequestedHandler>
{
	impl_PrintTaskSourceRequestedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs> args) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>(args)); });
	}
};

template <typename T> IPrintTaskSourceRequestedHandler PrintTaskSourceRequestedHandler(T handler)
{
	return make<impl_PrintTaskSourceRequestedHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

template <typename T> struct impl_MediaCaptureFailedEventHandler : ImplementsDefault<IMediaCaptureFailedEventHandler>
{
	impl_MediaCaptureFailedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Capture::IMediaCapture> sender, AbiArgIn<Windows::Media::Capture::IMediaCaptureFailedEventArgs> errorEventArgs) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Capture::MediaCapture>(sender), forward<Windows::Media::Capture::MediaCaptureFailedEventArgs>(errorEventArgs)); });
	}
};

template <typename T> IMediaCaptureFailedEventHandler MediaCaptureFailedEventHandler(T handler)
{
	return make<impl_MediaCaptureFailedEventHandler<T>>(handler);
}

template <typename T> struct impl_RecordLimitationExceededEventHandler : ImplementsDefault<IRecordLimitationExceededEventHandler>
{
	impl_RecordLimitationExceededEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Capture::IMediaCapture> sender) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Capture::MediaCapture>(sender)); });
	}
};

template <typename T> IRecordLimitationExceededEventHandler RecordLimitationExceededEventHandler(T handler)
{
	return make<impl_RecordLimitationExceededEventHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

template <typename T> struct impl_CallControlEventHandler : ImplementsDefault<ICallControlEventHandler>
{
	impl_CallControlEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Devices::ICallControl> sender) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Devices::CallControl>(sender)); });
	}
};

template <typename T> ICallControlEventHandler CallControlEventHandler(T handler)
{
	return make<impl_CallControlEventHandler<T>>(handler);
}

template <typename T> struct impl_DialRequestedEventHandler : ImplementsDefault<IDialRequestedEventHandler>
{
	impl_DialRequestedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Devices::ICallControl> sender, AbiArgIn<Windows::Media::Devices::IDialRequestedEventArgs> e) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Devices::CallControl>(sender), forward<Windows::Media::Devices::DialRequestedEventArgs>(e)); });
	}
};

template <typename T> IDialRequestedEventHandler DialRequestedEventHandler(T handler)
{
	return make<impl_DialRequestedEventHandler<T>>(handler);
}

template <typename T> struct impl_RedialRequestedEventHandler : ImplementsDefault<IRedialRequestedEventHandler>
{
	impl_RedialRequestedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Devices::ICallControl> sender, AbiArgIn<Windows::Media::Devices::IRedialRequestedEventArgs> e) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Devices::CallControl>(sender), forward<Windows::Media::Devices::RedialRequestedEventArgs>(e)); });
	}
};

template <typename T> IRedialRequestedEventHandler RedialRequestedEventHandler(T handler)
{
	return make<impl_RedialRequestedEventHandler<T>>(handler);
}

template <typename T> struct impl_KeypadPressedEventHandler : ImplementsDefault<IKeypadPressedEventHandler>
{
	impl_KeypadPressedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Devices::ICallControl> sender, AbiArgIn<Windows::Media::Devices::IKeypadPressedEventArgs> e) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Devices::CallControl>(sender), forward<Windows::Media::Devices::KeypadPressedEventArgs>(e)); });
	}
};

template <typename T> IKeypadPressedEventHandler KeypadPressedEventHandler(T handler)
{
	return make<impl_KeypadPressedEventHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

template <typename T> struct impl_ServiceRequestedEventHandler : ImplementsDefault<IServiceRequestedEventHandler>
{
	impl_ServiceRequestedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Protection::IMediaProtectionManager> sender, AbiArgIn<Windows::Media::Protection::IServiceRequestedEventArgs> e) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Protection::MediaProtectionManager>(sender), forward<Windows::Media::Protection::ServiceRequestedEventArgs>(e)); });
	}
};

template <typename T> IServiceRequestedEventHandler ServiceRequestedEventHandler(T handler)
{
	return make<impl_ServiceRequestedEventHandler<T>>(handler);
}

template <typename T> struct impl_RebootNeededEventHandler : ImplementsDefault<IRebootNeededEventHandler>
{
	impl_RebootNeededEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Protection::IMediaProtectionManager> sender) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Protection::MediaProtectionManager>(sender)); });
	}
};

template <typename T> IRebootNeededEventHandler RebootNeededEventHandler(T handler)
{
	return make<impl_RebootNeededEventHandler<T>>(handler);
}

template <typename T> struct impl_ComponentLoadFailedEventHandler : ImplementsDefault<IComponentLoadFailedEventHandler>
{
	impl_ComponentLoadFailedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Protection::IMediaProtectionManager> sender, AbiArgIn<Windows::Media::Protection::IComponentLoadFailedEventArgs> e) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Protection::MediaProtectionManager>(sender), forward<Windows::Media::Protection::ComponentLoadFailedEventArgs>(e)); });
	}
};

template <typename T> IComponentLoadFailedEventHandler ComponentLoadFailedEventHandler(T handler)
{
	return make<impl_ComponentLoadFailedEventHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

template <typename T> struct impl_DeviceControllerFinderHandler : ImplementsDefault<IDeviceControllerFinderHandler>
{
	impl_DeviceControllerFinderHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Streaming::IDeviceController> sender, HSTRING uniqueDeviceName, AbiArgIn<Windows::Media::Streaming::IBasicDevice> device) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Streaming::IDeviceController>(sender), forward<String>(uniqueDeviceName), forward<Windows::Media::Streaming::IBasicDevice>(device)); });
	}
};

template <typename T> IDeviceControllerFinderHandler DeviceControllerFinderHandler(T handler)
{
	return make<impl_DeviceControllerFinderHandler<T>>(handler);
}

template <typename T> struct impl_ConnectionStatusHandler : ImplementsDefault<IConnectionStatusHandler>
{
	impl_ConnectionStatusHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Streaming::IBasicDevice> sender, Windows::Media::Streaming::ConnectionStatus arg) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Streaming::IBasicDevice>(sender), arg); });
	}
};

template <typename T> IConnectionStatusHandler ConnectionStatusHandler(T handler)
{
	return make<impl_ConnectionStatusHandler<T>>(handler);
}

template <typename T> struct impl_TransportParametersUpdateHandler : ImplementsDefault<ITransportParametersUpdateHandler>
{
	impl_TransportParametersUpdateHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Streaming::IMediaRenderer> sender, AbiArgIn<Windows::Media::Streaming::ITransportParameters> arg) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Streaming::IMediaRenderer>(sender), forward<Windows::Media::Streaming::ITransportParameters>(arg)); });
	}
};

template <typename T> ITransportParametersUpdateHandler TransportParametersUpdateHandler(T handler)
{
	return make<impl_TransportParametersUpdateHandler<T>>(handler);
}

template <typename T> struct impl_RenderingParametersUpdateHandler : ImplementsDefault<IRenderingParametersUpdateHandler>
{
	impl_RenderingParametersUpdateHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Media::Streaming::IMediaRenderer> sender, Windows::Media::Streaming::RenderingParameters arg) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Media::Streaming::IMediaRenderer>(sender), arg); });
	}
};

template <typename T> IRenderingParametersUpdateHandler RenderingParametersUpdateHandler(T handler)
{
	return make<impl_RenderingParametersUpdateHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

template <typename T> struct impl_NetworkStatusChangedEventHandler : ImplementsDefault<INetworkStatusChangedEventHandler>
{
	impl_NetworkStatusChangedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<IInspectable> sender) noexcept override
	{
		return call([&]{ m_handler(forward<IInspectable>(sender)); });
	}
};

template <typename T> INetworkStatusChangedEventHandler NetworkStatusChangedEventHandler(T handler)
{
	return make<impl_NetworkStatusChangedEventHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

template <typename T> struct impl_MessageReceivedHandler : ImplementsDefault<IMessageReceivedHandler>
{
	impl_MessageReceivedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Networking::Proximity::IProximityDevice> sender, AbiArgIn<Windows::Networking::Proximity::IProximityMessage> message) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Networking::Proximity::ProximityDevice>(sender), forward<Windows::Networking::Proximity::ProximityMessage>(message)); });
	}
};

template <typename T> IMessageReceivedHandler MessageReceivedHandler(T handler)
{
	return make<impl_MessageReceivedHandler<T>>(handler);
}

template <typename T> struct impl_MessageTransmittedHandler : ImplementsDefault<IMessageTransmittedHandler>
{
	impl_MessageTransmittedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Networking::Proximity::IProximityDevice> sender, long long messageId) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Networking::Proximity::ProximityDevice>(sender), messageId); });
	}
};

template <typename T> IMessageTransmittedHandler MessageTransmittedHandler(T handler)
{
	return make<impl_MessageTransmittedHandler<T>>(handler);
}

template <typename T> struct impl_DeviceArrivedEventHandler : ImplementsDefault<IDeviceArrivedEventHandler>
{
	impl_DeviceArrivedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Networking::Proximity::IProximityDevice> sender) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Networking::Proximity::ProximityDevice>(sender)); });
	}
};

template <typename T> IDeviceArrivedEventHandler DeviceArrivedEventHandler(T handler)
{
	return make<impl_DeviceArrivedEventHandler<T>>(handler);
}

template <typename T> struct impl_DeviceDepartedEventHandler : ImplementsDefault<IDeviceDepartedEventHandler>
{
	impl_DeviceDepartedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Networking::Proximity::IProximityDevice> sender) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Networking::Proximity::ProximityDevice>(sender)); });
	}
};

template <typename T> IDeviceDepartedEventHandler DeviceDepartedEventHandler(T handler)
{
	return make<impl_DeviceDepartedEventHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace Storage {

template <typename T> struct impl_StreamedFileDataRequestedHandler : ImplementsDefault<IStreamedFileDataRequestedHandler>
{
	impl_StreamedFileDataRequestedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Storage::Streams::IOutputStream> stream) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Storage::StreamedFileDataRequest>(stream)); });
	}
};

template <typename T> IStreamedFileDataRequestedHandler StreamedFileDataRequestedHandler(T handler)
{
	return make<impl_StreamedFileDataRequestedHandler<T>>(handler);
}

template <typename T> struct impl_ApplicationDataSetVersionHandler : ImplementsDefault<IApplicationDataSetVersionHandler>
{
	impl_ApplicationDataSetVersionHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Storage::ISetVersionRequest> setVersionRequest) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Storage::SetVersionRequest>(setVersionRequest)); });
	}
};

template <typename T> IApplicationDataSetVersionHandler ApplicationDataSetVersionHandler(T handler)
{
	return make<impl_ApplicationDataSetVersionHandler<T>>(handler);
}

}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

template <typename T> struct impl_TimerElapsedHandler : ImplementsDefault<ITimerElapsedHandler>
{
	impl_TimerElapsedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::System::Threading::IThreadPoolTimer> timer) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::System::Threading::ThreadPoolTimer>(timer)); });
	}
};

template <typename T> ITimerElapsedHandler TimerElapsedHandler(T handler)
{
	return make<impl_TimerElapsedHandler<T>>(handler);
}

template <typename T> struct impl_TimerDestroyedHandler : ImplementsDefault<ITimerDestroyedHandler>
{
	impl_TimerDestroyedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::System::Threading::IThreadPoolTimer> timer) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::System::Threading::ThreadPoolTimer>(timer)); });
	}
};

template <typename T> ITimerDestroyedHandler TimerDestroyedHandler(T handler)
{
	return make<impl_TimerDestroyedHandler<T>>(handler);
}

template <typename T> struct impl_WorkItemHandler : ImplementsDefault<IWorkItemHandler>
{
	impl_WorkItemHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::Foundation::IAsyncAction> operation) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::Foundation::IAsyncAction>(operation)); });
	}
};

template <typename T> IWorkItemHandler WorkItemHandler(T handler)
{
	return make<impl_WorkItemHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

template <typename T> struct impl_SignalHandler : ImplementsDefault<ISignalHandler>
{
	impl_SignalHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::System::Threading::Core::ISignalNotifier> signalNotifier, boolean timedOut) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::System::Threading::Core::SignalNotifier>(signalNotifier), timedOut); });
	}
};

template <typename T> ISignalHandler SignalHandler(T handler)
{
	return make<impl_SignalHandler<T>>(handler);
}

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

template <typename T> struct impl_WebAccountProviderCommandInvokedHandler : ImplementsDefault<IWebAccountProviderCommandInvokedHandler>
{
	impl_WebAccountProviderCommandInvokedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::UI::ApplicationSettings::IWebAccountProviderCommand> command) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::UI::ApplicationSettings::WebAccountProviderCommand>(command)); });
	}
};

template <typename T> IWebAccountProviderCommandInvokedHandler WebAccountProviderCommandInvokedHandler(T handler)
{
	return make<impl_WebAccountProviderCommandInvokedHandler<T>>(handler);
}

template <typename T> struct impl_WebAccountCommandInvokedHandler : ImplementsDefault<IWebAccountCommandInvokedHandler>
{
	impl_WebAccountCommandInvokedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::UI::ApplicationSettings::IWebAccountCommand> command, AbiArgIn<Windows::UI::ApplicationSettings::IWebAccountInvokedArgs> args) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::UI::ApplicationSettings::WebAccountCommand>(command), forward<Windows::UI::ApplicationSettings::WebAccountInvokedArgs>(args)); });
	}
};

template <typename T> IWebAccountCommandInvokedHandler WebAccountCommandInvokedHandler(T handler)
{
	return make<impl_WebAccountCommandInvokedHandler<T>>(handler);
}

template <typename T> struct impl_CredentialCommandCredentialDeletedHandler : ImplementsDefault<ICredentialCommandCredentialDeletedHandler>
{
	impl_CredentialCommandCredentialDeletedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::UI::ApplicationSettings::ICredentialCommand> command) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::UI::ApplicationSettings::CredentialCommand>(command)); });
	}
};

template <typename T> ICredentialCommandCredentialDeletedHandler CredentialCommandCredentialDeletedHandler(T handler)
{
	return make<impl_CredentialCommandCredentialDeletedHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

template <typename T> struct impl_DispatchedHandler : ImplementsDefault<IDispatchedHandler>
{
	impl_DispatchedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke() noexcept override
	{
		return call([&]{ m_handler(); });
	}
};

template <typename T> IDispatchedHandler DispatchedHandler(T handler)
{
	return make<impl_DispatchedHandler<T>>(handler);
}

template <typename T> struct impl_IdleDispatchedHandler : ImplementsDefault<IIdleDispatchedHandler>
{
	impl_IdleDispatchedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::UI::Core::IIdleDispatchedHandlerArgs> e) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::UI::Core::IdleDispatchedHandlerArgs>(e)); });
	}
};

template <typename T> IIdleDispatchedHandler IdleDispatchedHandler(T handler)
{
	return make<impl_IdleDispatchedHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

template <typename T> struct impl_UICommandInvokedHandler : ImplementsDefault<IUICommandInvokedHandler>
{
	impl_UICommandInvokedHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<Windows::UI::Popups::IUICommand> command) noexcept override
	{
		return call([&]{ m_handler(forward<Windows::UI::Popups::IUICommand>(command)); });
	}
};

template <typename T> IUICommandInvokedHandler UICommandInvokedHandler(T handler)
{
	return make<impl_UICommandInvokedHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

template <typename T> struct impl_ActivatedEventHandler : ImplementsDefault<IActivatedEventHandler>
{
	impl_ActivatedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<IInspectable> sender, AbiArgIn<Windows::ApplicationModel::Activation::IActivatedEventArgs> eventArgs) noexcept override
	{
		return call([&]{ m_handler(forward<IInspectable>(sender), forward<Windows::ApplicationModel::Activation::IActivatedEventArgs>(eventArgs)); });
	}
};

template <typename T> IActivatedEventHandler ActivatedEventHandler(T handler)
{
	return make<impl_ActivatedEventHandler<T>>(handler);
}

template <typename T> struct impl_ResumingEventHandler : ImplementsDefault<IResumingEventHandler>
{
	impl_ResumingEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<IInspectable> sender) noexcept override
	{
		return call([&]{ m_handler(forward<IInspectable>(sender)); });
	}
};

template <typename T> IResumingEventHandler ResumingEventHandler(T handler)
{
	return make<impl_ResumingEventHandler<T>>(handler);
}

template <typename T> struct impl_SuspendingEventHandler : ImplementsDefault<ISuspendingEventHandler>
{
	impl_SuspendingEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<IInspectable> sender, AbiArgIn<Windows::ApplicationModel::ISuspendingEventArgs> e) noexcept override
	{
		return call([&]{ m_handler(forward<IInspectable>(sender), forward<Windows::ApplicationModel::ISuspendingEventArgs>(e)); });
	}
};

template <typename T> ISuspendingEventHandler SuspendingEventHandler(T handler)
{
	return make<impl_SuspendingEventHandler<T>>(handler);
}

template <typename T> struct impl_NavigatedEventHandler : ImplementsDefault<INavigatedEventHandler>
{
	impl_NavigatedEventHandler(T handler) : m_handler(handler) {}
	T m_handler;

	virtual HRESULT __stdcall abi_Invoke(AbiArgIn<IInspectable> sender, AbiArgIn<Windows::UI::WebUI::IWebUINavigatedEventArgs> e) noexcept override
	{
		return call([&]{ m_handler(forward<IInspectable>(sender), forward<Windows::UI::WebUI::IWebUINavigatedEventArgs>(e)); });
	}
};

template <typename T> INavigatedEventHandler NavigatedEventHandler(T handler)
{
	return make<impl_NavigatedEventHandler<T>>(handler);
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel {

template <typename T> void impl_ISuspendingDeferral<T>::Complete() const
{
	check(static_cast<ISuspendingDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::ApplicationModel::SuspendingDeferral impl_ISuspendingOperation<T>::GetDeferral() const
{
	Windows::ApplicationModel::SuspendingDeferral deferral(nullptr);
	check(static_cast<ISuspendingOperation const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> Windows::Foundation::DateTime impl_ISuspendingOperation<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ISuspendingOperation const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::SuspendingOperation impl_ISuspendingEventArgs<T>::SuspendingOperation() const
{
	Windows::ApplicationModel::SuspendingOperation value(nullptr);
	check(static_cast<ISuspendingEventArgs const &>(static_cast<T const &>(*this))->get_SuspendingOperation(set(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::Name() const
{
	String value = {};
	check(static_cast<IPackageId const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::PackageVersion impl_IPackageId<T>::Version() const
{
	Windows::ApplicationModel::PackageVersion value = {};
	check(static_cast<IPackageId const &>(static_cast<T const &>(*this))->get_Version(&value));
	return value;
}

template <typename T> Windows::System::ProcessorArchitecture impl_IPackageId<T>::Architecture() const
{
	Windows::System::ProcessorArchitecture value = {};
	check(static_cast<IPackageId const &>(static_cast<T const &>(*this))->get_Architecture(&value));
	return value;
}

template <typename T> String impl_IPackageId<T>::ResourceId() const
{
	String value = {};
	check(static_cast<IPackageId const &>(static_cast<T const &>(*this))->get_ResourceId(set(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::Publisher() const
{
	String value = {};
	check(static_cast<IPackageId const &>(static_cast<T const &>(*this))->get_Publisher(set(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::PublisherId() const
{
	String value = {};
	check(static_cast<IPackageId const &>(static_cast<T const &>(*this))->get_PublisherId(set(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::FullName() const
{
	String value = {};
	check(static_cast<IPackageId const &>(static_cast<T const &>(*this))->get_FullName(set(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::FamilyName() const
{
	String value = {};
	check(static_cast<IPackageId const &>(static_cast<T const &>(*this))->get_FamilyName(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::PackageId impl_IPackage<T>::Id() const
{
	Windows::ApplicationModel::PackageId value(nullptr);
	check(static_cast<IPackage const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IPackage<T>::InstalledLocation() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IPackage const &>(static_cast<T const &>(*this))->get_InstalledLocation(set(value)));
	return value;
}

template <typename T> bool impl_IPackage<T>::IsFramework() const
{
	bool value = {};
	check(static_cast<IPackage const &>(static_cast<T const &>(*this))->get_IsFramework(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Package> impl_IPackage<T>::Dependencies() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Package> value = {};
	check(static_cast<IPackage const &>(static_cast<T const &>(*this))->get_Dependencies(set(value)));
	return value;
}

template <typename T> String impl_IPackage2<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IPackage2 const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> String impl_IPackage2<T>::PublisherDisplayName() const
{
	String value = {};
	check(static_cast<IPackage2 const &>(static_cast<T const &>(*this))->get_PublisherDisplayName(set(value)));
	return value;
}

template <typename T> String impl_IPackage2<T>::Description() const
{
	String value = {};
	check(static_cast<IPackage2 const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IPackage2<T>::Logo() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IPackage2 const &>(static_cast<T const &>(*this))->get_Logo(set(value)));
	return value;
}

template <typename T> bool impl_IPackage2<T>::IsResourcePackage() const
{
	bool value = {};
	check(static_cast<IPackage2 const &>(static_cast<T const &>(*this))->get_IsResourcePackage(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPackage2<T>::IsBundle() const
{
	bool value = {};
	check(static_cast<IPackage2 const &>(static_cast<T const &>(*this))->get_IsBundle(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPackage2<T>::IsDevelopmentMode() const
{
	bool value = {};
	check(static_cast<IPackage2 const &>(static_cast<T const &>(*this))->get_IsDevelopmentMode(BoolProxy(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Package impl_IPackageStatics<T>::Current() const
{
	Windows::ApplicationModel::Package value(nullptr);
	check(static_cast<IPackageStatics const &>(static_cast<T const &>(*this))->get_Current(set(value)));
	return value;
}

template <typename T> bool impl_IDesignModeStatics<T>::DesignModeEnabled() const
{
	bool value = {};
	check(static_cast<IDesignModeStatics const &>(static_cast<T const &>(*this))->get_DesignModeEnabled(BoolProxy(value)));
	return value;
}

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

template <typename T> Windows::Foundation::Rect impl_ISplashScreen<T>::ImageLocation() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<ISplashScreen const &>(static_cast<T const &>(*this))->get_ImageLocation(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_ISplashScreen<T>::Dismissed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen, IInspectable> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ISplashScreen const &>(static_cast<T const &>(*this))->add_Dismissed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISplashScreen<T>::Dismissed(F handler) const
{
	return Dismissed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen, IInspectable>(handler));
}

template <typename T> void impl_ISplashScreen<T>::Dismissed(EventRegistrationToken const cookie) const
{
	check(static_cast<ISplashScreen const &>(static_cast<T const &>(*this))->remove_Dismissed(cookie));
}

template <typename T> Windows::ApplicationModel::Activation::ActivationKind impl_IActivatedEventArgs<T>::Kind() const
{
	Windows::ApplicationModel::Activation::ActivationKind value = {};
	check(static_cast<IActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Kind(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Activation::ApplicationExecutionState impl_IActivatedEventArgs<T>::PreviousExecutionState() const
{
	Windows::ApplicationModel::Activation::ApplicationExecutionState value = {};
	check(static_cast<IActivatedEventArgs const &>(static_cast<T const &>(*this))->get_PreviousExecutionState(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Activation::SplashScreen impl_IActivatedEventArgs<T>::SplashScreen() const
{
	Windows::ApplicationModel::Activation::SplashScreen value(nullptr);
	check(static_cast<IActivatedEventArgs const &>(static_cast<T const &>(*this))->get_SplashScreen(set(value)));
	return value;
}

template <typename T> int impl_IApplicationViewActivatedEventArgs<T>::CurrentlyShownApplicationViewId() const
{
	int value = {};
	check(static_cast<IApplicationViewActivatedEventArgs const &>(static_cast<T const &>(*this))->get_CurrentlyShownApplicationViewId(&value));
	return value;
}

template <typename T> bool impl_IPrelaunchActivatedEventArgs<T>::PrelaunchActivated() const
{
	bool value = {};
	check(static_cast<IPrelaunchActivatedEventArgs const &>(static_cast<T const &>(*this))->get_PrelaunchActivated(BoolProxy(value)));
	return value;
}

template <typename T> String impl_ILaunchActivatedEventArgs<T>::Arguments() const
{
	String value = {};
	check(static_cast<ILaunchActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Arguments(set(value)));
	return value;
}

template <typename T> String impl_ILaunchActivatedEventArgs<T>::TileId() const
{
	String value = {};
	check(static_cast<ILaunchActivatedEventArgs const &>(static_cast<T const &>(*this))->get_TileId(set(value)));
	return value;
}

template <typename T> String impl_ISearchActivatedEventArgs<T>::QueryText() const
{
	String value = {};
	check(static_cast<ISearchActivatedEventArgs const &>(static_cast<T const &>(*this))->get_QueryText(set(value)));
	return value;
}

template <typename T> String impl_ISearchActivatedEventArgs<T>::Language() const
{
	String value = {};
	check(static_cast<ISearchActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Language(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails impl_ISearchActivatedEventArgsWithLinguisticDetails<T>::LinguisticDetails() const
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails value(nullptr);
	check(static_cast<ISearchActivatedEventArgsWithLinguisticDetails const &>(static_cast<T const &>(*this))->get_LinguisticDetails(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation impl_IShareTargetActivatedEventArgs<T>::ShareOperation() const
{
	Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation value(nullptr);
	check(static_cast<IShareTargetActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ShareOperation(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem> impl_IFileActivatedEventArgs<T>::Files() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem> value = {};
	check(static_cast<IFileActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Files(set(value)));
	return value;
}

template <typename T> String impl_IFileActivatedEventArgs<T>::Verb() const
{
	String value = {};
	check(static_cast<IFileActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Verb(set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IFileActivatedEventArgsWithNeighboringFiles<T>::NeighboringFilesQuery() const
{
	Windows::Storage::Search::StorageFileQueryResult value(nullptr);
	check(static_cast<IFileActivatedEventArgsWithNeighboringFiles const &>(static_cast<T const &>(*this))->get_NeighboringFilesQuery(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IProtocolActivatedEventArgs<T>::Uri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IProtocolActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Uri(set(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::FileOpenPickerUI impl_IFileOpenPickerActivatedEventArgs<T>::FileOpenPickerUI() const
{
	Windows::Storage::Pickers::Provider::FileOpenPickerUI value(nullptr);
	check(static_cast<IFileOpenPickerActivatedEventArgs const &>(static_cast<T const &>(*this))->get_FileOpenPickerUI(set(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::FileSavePickerUI impl_IFileSavePickerActivatedEventArgs<T>::FileSavePickerUI() const
{
	Windows::Storage::Pickers::Provider::FileSavePickerUI value(nullptr);
	check(static_cast<IFileSavePickerActivatedEventArgs const &>(static_cast<T const &>(*this))->get_FileSavePickerUI(set(value)));
	return value;
}

template <typename T> Windows::Storage::Provider::CachedFileUpdaterUI impl_ICachedFileUpdaterActivatedEventArgs<T>::CachedFileUpdaterUI() const
{
	Windows::Storage::Provider::CachedFileUpdaterUI value(nullptr);
	check(static_cast<ICachedFileUpdaterActivatedEventArgs const &>(static_cast<T const &>(*this))->get_CachedFileUpdaterUI(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Provider::ContactPickerUI impl_IContactPickerActivatedEventArgs<T>::ContactPickerUI() const
{
	Windows::ApplicationModel::Contacts::Provider::ContactPickerUI value(nullptr);
	check(static_cast<IContactPickerActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ContactPickerUI(set(value)));
	return value;
}

template <typename T> String impl_IDeviceActivatedEventArgs<T>::DeviceInformationId() const
{
	String value = {};
	check(static_cast<IDeviceActivatedEventArgs const &>(static_cast<T const &>(*this))->get_DeviceInformationId(set(value)));
	return value;
}

template <typename T> String impl_IDeviceActivatedEventArgs<T>::Verb() const
{
	String value = {};
	check(static_cast<IDeviceActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Verb(set(value)));
	return value;
}

template <typename T> Windows::Devices::Printers::Extensions::PrintTaskConfiguration impl_IPrintTaskSettingsActivatedEventArgs<T>::Configuration() const
{
	Windows::Devices::Printers::Extensions::PrintTaskConfiguration value(nullptr);
	check(static_cast<IPrintTaskSettingsActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Configuration(set(value)));
	return value;
}

template <typename T> IInspectable impl_ICameraSettingsActivatedEventArgs<T>::VideoDeviceController() const
{
	IInspectable value = {};
	check(static_cast<ICameraSettingsActivatedEventArgs const &>(static_cast<T const &>(*this))->get_VideoDeviceController(set(value)));
	return value;
}

template <typename T> IInspectable impl_ICameraSettingsActivatedEventArgs<T>::VideoDeviceExtension() const
{
	IInspectable value = {};
	check(static_cast<ICameraSettingsActivatedEventArgs const &>(static_cast<T const &>(*this))->get_VideoDeviceExtension(set(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderActivatedEventArgs<T>::Verb() const
{
	String value = {};
	check(static_cast<IAppointmentsProviderActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Verb(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation impl_IAppointmentsProviderAddAppointmentActivatedEventArgs<T>::AddAppointmentOperation() const
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation value(nullptr);
	check(static_cast<IAppointmentsProviderAddAppointmentActivatedEventArgs const &>(static_cast<T const &>(*this))->get_AddAppointmentOperation(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs<T>::ReplaceAppointmentOperation() const
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation value(nullptr);
	check(static_cast<IAppointmentsProviderReplaceAppointmentActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ReplaceAppointmentOperation(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs<T>::RemoveAppointmentOperation() const
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation value(nullptr);
	check(static_cast<IAppointmentsProviderRemoveAppointmentActivatedEventArgs const &>(static_cast<T const &>(*this))->get_RemoveAppointmentOperation(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<T>::TimeToShow() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IAppointmentsProviderShowTimeFrameActivatedEventArgs const &>(static_cast<T const &>(*this))->get_TimeToShow(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IAppointmentsProviderShowTimeFrameActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Duration(&value));
	return value;
}

template <typename T> String impl_IContactActivatedEventArgs<T>::Verb() const
{
	String value = {};
	check(static_cast<IContactActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Verb(set(value)));
	return value;
}

template <typename T> String impl_IContactCallActivatedEventArgs<T>::ServiceId() const
{
	String value = {};
	check(static_cast<IContactCallActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ServiceId(set(value)));
	return value;
}

template <typename T> String impl_IContactCallActivatedEventArgs<T>::ServiceUserId() const
{
	String value = {};
	check(static_cast<IContactCallActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ServiceUserId(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactCallActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value(nullptr);
	check(static_cast<IContactCallActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Contact(set(value)));
	return value;
}

template <typename T> String impl_IContactMessageActivatedEventArgs<T>::ServiceId() const
{
	String value = {};
	check(static_cast<IContactMessageActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ServiceId(set(value)));
	return value;
}

template <typename T> String impl_IContactMessageActivatedEventArgs<T>::ServiceUserId() const
{
	String value = {};
	check(static_cast<IContactMessageActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ServiceUserId(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactMessageActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value(nullptr);
	check(static_cast<IContactMessageActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Contact(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAddress impl_IContactMapActivatedEventArgs<T>::Address() const
{
	Windows::ApplicationModel::Contacts::ContactAddress value(nullptr);
	check(static_cast<IContactMapActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Address(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactMapActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value(nullptr);
	check(static_cast<IContactMapActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Contact(set(value)));
	return value;
}

template <typename T> String impl_IContactPostActivatedEventArgs<T>::ServiceId() const
{
	String value = {};
	check(static_cast<IContactPostActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ServiceId(set(value)));
	return value;
}

template <typename T> String impl_IContactPostActivatedEventArgs<T>::ServiceUserId() const
{
	String value = {};
	check(static_cast<IContactPostActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ServiceUserId(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactPostActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value(nullptr);
	check(static_cast<IContactPostActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Contact(set(value)));
	return value;
}

template <typename T> String impl_IContactVideoCallActivatedEventArgs<T>::ServiceId() const
{
	String value = {};
	check(static_cast<IContactVideoCallActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ServiceId(set(value)));
	return value;
}

template <typename T> String impl_IContactVideoCallActivatedEventArgs<T>::ServiceUserId() const
{
	String value = {};
	check(static_cast<IContactVideoCallActivatedEventArgs const &>(static_cast<T const &>(*this))->get_ServiceUserId(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactVideoCallActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value(nullptr);
	check(static_cast<IContactVideoCallActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Contact(set(value)));
	return value;
}

template <typename T> String impl_IContactsProviderActivatedEventArgs<T>::Verb() const
{
	String value = {};
	check(static_cast<IContactsProviderActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Verb(set(value)));
	return value;
}

template <typename T> IInspectable impl_IRestrictedLaunchActivatedEventArgs<T>::SharedContext() const
{
	IInspectable value = {};
	check(static_cast<IRestrictedLaunchActivatedEventArgs const &>(static_cast<T const &>(*this))->get_SharedContext(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::LockScreenCallUI impl_ILockScreenCallActivatedEventArgs<T>::CallUI() const
{
	Windows::ApplicationModel::Calls::LockScreenCallUI value(nullptr);
	check(static_cast<ILockScreenCallActivatedEventArgs const &>(static_cast<T const &>(*this))->get_CallUI(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowAddAppointmentAsync(get(appointment), selection, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowAddAppointmentWithPlacementAsync(get(appointment), selection, preferredPlacement, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowReplaceAppointmentAsync(get(appointmentId), get(appointment), selection, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowReplaceAppointmentAsync(StringReference(appointmentId), get(appointment), selection, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowReplaceAppointmentWithPlacementAsync(get(appointmentId), get(appointment), selection, preferredPlacement, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowReplaceAppointmentWithPlacementAsync(StringReference(appointmentId), get(appointment), selection, preferredPlacement, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowReplaceAppointmentWithPlacementAndDateAsync(get(appointmentId), get(appointment), selection, preferredPlacement, instanceStartDate, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowReplaceAppointmentWithPlacementAndDateAsync(StringReference(appointmentId), get(appointment), selection, preferredPlacement, instanceStartDate, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowRemoveAppointmentAsync(get(appointmentId), selection, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowRemoveAppointmentAsync(StringReference(appointmentId), selection, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowRemoveAppointmentWithPlacementAsync(get(appointmentId), selection, preferredPlacement, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowRemoveAppointmentWithPlacementAsync(StringReference(appointmentId), selection, preferredPlacement, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowRemoveAppointmentWithPlacementAndDateAsync(get(appointmentId), selection, preferredPlacement, instanceStartDate, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowRemoveAppointmentWithPlacementAndDateAsync(StringReference(appointmentId), selection, preferredPlacement, instanceStartDate, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentManagerStatics<T>::ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Foundation::IAsyncAction asyncAction = {};
	check(static_cast<IAppointmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowTimeFrameAsync(timeToShow, duration, set(asyncAction)));
	return asyncAction;
}

template <typename T> String impl_IAppointmentParticipant<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IAppointmentParticipant const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> void impl_IAppointmentParticipant<T>::DisplayName(String const & value) const
{
	check(static_cast<IAppointmentParticipant const &>(static_cast<T const &>(*this))->put_DisplayName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IAppointmentParticipant<T>::DisplayName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IAppointmentParticipant const &>(static_cast<T const &>(*this))->put_DisplayName(StringReference(value)));
}

template <typename T> String impl_IAppointmentParticipant<T>::Address() const
{
	String value = {};
	check(static_cast<IAppointmentParticipant const &>(static_cast<T const &>(*this))->get_Address(set(value)));
	return value;
}

template <typename T> void impl_IAppointmentParticipant<T>::Address(String const & value) const
{
	check(static_cast<IAppointmentParticipant const &>(static_cast<T const &>(*this))->put_Address(get(value)));
}

template <typename T> template <unsigned S0> void impl_IAppointmentParticipant<T>::Address(wchar_t const (&value)[S0]) const
{
	check(static_cast<IAppointmentParticipant const &>(static_cast<T const &>(*this))->put_Address(StringReference(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentParticipantRole impl_IAppointmentInvitee<T>::Role() const
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantRole value = {};
	check(static_cast<IAppointmentInvitee const &>(static_cast<T const &>(*this))->get_Role(&value));
	return value;
}

template <typename T> void impl_IAppointmentInvitee<T>::Role(Windows::ApplicationModel::Appointments::AppointmentParticipantRole const value) const
{
	check(static_cast<IAppointmentInvitee const &>(static_cast<T const &>(*this))->put_Role(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentParticipantResponse impl_IAppointmentInvitee<T>::Response() const
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantResponse value = {};
	check(static_cast<IAppointmentInvitee const &>(static_cast<T const &>(*this))->get_Response(&value));
	return value;
}

template <typename T> void impl_IAppointmentInvitee<T>::Response(Windows::ApplicationModel::Appointments::AppointmentParticipantResponse const value) const
{
	check(static_cast<IAppointmentInvitee const &>(static_cast<T const &>(*this))->put_Response(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit impl_IAppointmentRecurrence<T>::Unit() const
{
	Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit value = {};
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->get_Unit(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Unit(Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit const value) const
{
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->put_Unit(value));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IAppointmentRecurrence<T>::Occurrences() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->get_Occurrences(set(value)));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Occurrences(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->put_Occurrences(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IAppointmentRecurrence<T>::Until() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->get_Until(set(value)));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Until(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->put_Until(get(value)));
}

template <typename T> unsigned impl_IAppointmentRecurrence<T>::Interval() const
{
	unsigned value = {};
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->get_Interval(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Interval(unsigned const value) const
{
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->put_Interval(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek impl_IAppointmentRecurrence<T>::DaysOfWeek() const
{
	Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek value = {};
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->get_DaysOfWeek(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::DaysOfWeek(Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek const value) const
{
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->put_DaysOfWeek(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth impl_IAppointmentRecurrence<T>::WeekOfMonth() const
{
	Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth value = {};
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->get_WeekOfMonth(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::WeekOfMonth(Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth const value) const
{
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->put_WeekOfMonth(value));
}

template <typename T> unsigned impl_IAppointmentRecurrence<T>::Month() const
{
	unsigned value = {};
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->get_Month(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Month(unsigned const value) const
{
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->put_Month(value));
}

template <typename T> unsigned impl_IAppointmentRecurrence<T>::Day() const
{
	unsigned value = {};
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->get_Day(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Day(unsigned const value) const
{
	check(static_cast<IAppointmentRecurrence const &>(static_cast<T const &>(*this))->put_Day(value));
}

template <typename T> Windows::Foundation::DateTime impl_IAppointment<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_StartTime(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::StartTime(Windows::Foundation::DateTime const & value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_StartTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IAppointment<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Duration(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Duration(value));
}

template <typename T> String impl_IAppointment<T>::Location() const
{
	String value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Location(set(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Location(String const & value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Location(get(value)));
}

template <typename T> template <unsigned S0> void impl_IAppointment<T>::Location(wchar_t const (&value)[S0]) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Location(StringReference(value)));
}

template <typename T> String impl_IAppointment<T>::Subject() const
{
	String value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Subject(set(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Subject(String const & value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Subject(get(value)));
}

template <typename T> template <unsigned S0> void impl_IAppointment<T>::Subject(wchar_t const (&value)[S0]) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Subject(StringReference(value)));
}

template <typename T> String impl_IAppointment<T>::Details() const
{
	String value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Details(set(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Details(String const & value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Details(get(value)));
}

template <typename T> template <unsigned S0> void impl_IAppointment<T>::Details(wchar_t const (&value)[S0]) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Details(StringReference(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> impl_IAppointment<T>::Reminder() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Reminder(set(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Reminder(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Reminder(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentOrganizer impl_IAppointment<T>::Organizer() const
{
	Windows::ApplicationModel::Appointments::AppointmentOrganizer value(nullptr);
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Organizer(set(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Organizer(Windows::ApplicationModel::Appointments::AppointmentOrganizer const & value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Organizer(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee> impl_IAppointment<T>::Invitees() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee> value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Invitees(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentRecurrence impl_IAppointment<T>::Recurrence() const
{
	Windows::ApplicationModel::Appointments::AppointmentRecurrence value(nullptr);
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Recurrence(set(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Recurrence(Windows::ApplicationModel::Appointments::AppointmentRecurrence const & value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Recurrence(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentBusyStatus impl_IAppointment<T>::BusyStatus() const
{
	Windows::ApplicationModel::Appointments::AppointmentBusyStatus value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_BusyStatus(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::BusyStatus(Windows::ApplicationModel::Appointments::AppointmentBusyStatus const value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_BusyStatus(value));
}

template <typename T> bool impl_IAppointment<T>::AllDay() const
{
	bool value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_AllDay(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::AllDay(bool const value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_AllDay(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentSensitivity impl_IAppointment<T>::Sensitivity() const
{
	Windows::ApplicationModel::Appointments::AppointmentSensitivity value = {};
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Sensitivity(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::Sensitivity(Windows::ApplicationModel::Appointments::AppointmentSensitivity const value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Sensitivity(value));
}

template <typename T> Windows::Foundation::Uri impl_IAppointment<T>::Uri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->get_Uri(set(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IAppointment const &>(static_cast<T const &>(*this))->put_Uri(get(value)));
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::AddAppointment() const
{
	String value = {};
	check(static_cast<IAppointmentsProviderLaunchActionVerbsStatics const &>(static_cast<T const &>(*this))->get_AddAppointment(set(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::ReplaceAppointment() const
{
	String value = {};
	check(static_cast<IAppointmentsProviderLaunchActionVerbsStatics const &>(static_cast<T const &>(*this))->get_ReplaceAppointment(set(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::RemoveAppointment() const
{
	String value = {};
	check(static_cast<IAppointmentsProviderLaunchActionVerbsStatics const &>(static_cast<T const &>(*this))->get_RemoveAppointment(set(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::ShowTimeFrame() const
{
	String value = {};
	check(static_cast<IAppointmentsProviderLaunchActionVerbsStatics const &>(static_cast<T const &>(*this))->get_ShowTimeFrame(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IAddAppointmentOperation<T>::AppointmentInformation() const
{
	Windows::ApplicationModel::Appointments::Appointment value(nullptr);
	check(static_cast<IAddAppointmentOperation const &>(static_cast<T const &>(*this))->get_AppointmentInformation(set(value)));
	return value;
}

template <typename T> String impl_IAddAppointmentOperation<T>::SourcePackageFamilyName() const
{
	String value = {};
	check(static_cast<IAddAppointmentOperation const &>(static_cast<T const &>(*this))->get_SourcePackageFamilyName(set(value)));
	return value;
}

template <typename T> void impl_IAddAppointmentOperation<T>::ReportCompleted(String const & itemId) const
{
	check(static_cast<IAddAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportCompleted(get(itemId)));
}

template <typename T> template <unsigned S0> void impl_IAddAppointmentOperation<T>::ReportCompleted(wchar_t const (&itemId)[S0]) const
{
	check(static_cast<IAddAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportCompleted(StringReference(itemId)));
}

template <typename T> void impl_IAddAppointmentOperation<T>::ReportCanceled() const
{
	check(static_cast<IAddAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportCanceled());
}

template <typename T> void impl_IAddAppointmentOperation<T>::ReportError(String const & value) const
{
	check(static_cast<IAddAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportError(get(value)));
}

template <typename T> template <unsigned S0> void impl_IAddAppointmentOperation<T>::ReportError(wchar_t const (&value)[S0]) const
{
	check(static_cast<IAddAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportError(StringReference(value)));
}

template <typename T> void impl_IAddAppointmentOperation<T>::DismissUI() const
{
	check(static_cast<IAddAppointmentOperation const &>(static_cast<T const &>(*this))->abi_DismissUI());
}

template <typename T> String impl_IReplaceAppointmentOperation<T>::AppointmentId() const
{
	String value = {};
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->get_AppointmentId(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IReplaceAppointmentOperation<T>::AppointmentInformation() const
{
	Windows::ApplicationModel::Appointments::Appointment value(nullptr);
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->get_AppointmentInformation(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IReplaceAppointmentOperation<T>::InstanceStartDate() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->get_InstanceStartDate(set(value)));
	return value;
}

template <typename T> String impl_IReplaceAppointmentOperation<T>::SourcePackageFamilyName() const
{
	String value = {};
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->get_SourcePackageFamilyName(set(value)));
	return value;
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::ReportCompleted(String const & itemId) const
{
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportCompleted(get(itemId)));
}

template <typename T> template <unsigned S0> void impl_IReplaceAppointmentOperation<T>::ReportCompleted(wchar_t const (&itemId)[S0]) const
{
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportCompleted(StringReference(itemId)));
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::ReportCanceled() const
{
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportCanceled());
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::ReportError(String const & value) const
{
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportError(get(value)));
}

template <typename T> template <unsigned S0> void impl_IReplaceAppointmentOperation<T>::ReportError(wchar_t const (&value)[S0]) const
{
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportError(StringReference(value)));
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::DismissUI() const
{
	check(static_cast<IReplaceAppointmentOperation const &>(static_cast<T const &>(*this))->abi_DismissUI());
}

template <typename T> String impl_IRemoveAppointmentOperation<T>::AppointmentId() const
{
	String value = {};
	check(static_cast<IRemoveAppointmentOperation const &>(static_cast<T const &>(*this))->get_AppointmentId(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IRemoveAppointmentOperation<T>::InstanceStartDate() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IRemoveAppointmentOperation const &>(static_cast<T const &>(*this))->get_InstanceStartDate(set(value)));
	return value;
}

template <typename T> String impl_IRemoveAppointmentOperation<T>::SourcePackageFamilyName() const
{
	String value = {};
	check(static_cast<IRemoveAppointmentOperation const &>(static_cast<T const &>(*this))->get_SourcePackageFamilyName(set(value)));
	return value;
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::ReportCompleted() const
{
	check(static_cast<IRemoveAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportCompleted());
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::ReportCanceled() const
{
	check(static_cast<IRemoveAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportCanceled());
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::ReportError(String const & value) const
{
	check(static_cast<IRemoveAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportError(get(value)));
}

template <typename T> template <unsigned S0> void impl_IRemoveAppointmentOperation<T>::ReportError(wchar_t const (&value)[S0]) const
{
	check(static_cast<IRemoveAppointmentOperation const &>(static_cast<T const &>(*this))->abi_ReportError(StringReference(value)));
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::DismissUI() const
{
	check(static_cast<IRemoveAppointmentOperation const &>(static_cast<T const &>(*this))->abi_DismissUI());
}

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

template <typename T> void impl_IBackgroundTaskCanceledEventHandler<T>::Invoke(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & sender, Windows::ApplicationModel::Background::BackgroundTaskCancellationReason const reason) const
{
	check(static_cast<IBackgroundTaskCanceledEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), reason));
}

template <typename T> void impl_IBackgroundTaskProgressEventHandler<T>::Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs const & args) const
{
	check(static_cast<IBackgroundTaskProgressEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(args)));
}

template <typename T> void impl_IBackgroundTaskCompletedEventHandler<T>::Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs const & args) const
{
	check(static_cast<IBackgroundTaskCompletedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(args)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::AlarmAccessStatus> impl_IAlarmApplicationManagerStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::AlarmAccessStatus> operation = {};
	check(static_cast<IAlarmApplicationManagerStatics const &>(static_cast<T const &>(*this))->abi_RequestAccessAsync(set(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Background::AlarmAccessStatus impl_IAlarmApplicationManagerStatics<T>::GetAccessStatus() const
{
	Windows::ApplicationModel::Background::AlarmAccessStatus status = {};
	check(static_cast<IAlarmApplicationManagerStatics const &>(static_cast<T const &>(*this))->abi_GetAccessStatus(&status));
	return status;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> impl_IBackgroundExecutionManagerStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> operation = {};
	check(static_cast<IBackgroundExecutionManagerStatics const &>(static_cast<T const &>(*this))->abi_RequestAccessAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> impl_IBackgroundExecutionManagerStatics<T>::RequestAccessAsync(String const & applicationId) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> operation = {};
	check(static_cast<IBackgroundExecutionManagerStatics const &>(static_cast<T const &>(*this))->abi_RequestAccessForApplicationAsync(get(applicationId), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> impl_IBackgroundExecutionManagerStatics<T>::RequestAccessAsync(wchar_t const (&applicationId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> operation = {};
	check(static_cast<IBackgroundExecutionManagerStatics const &>(static_cast<T const &>(*this))->abi_RequestAccessForApplicationAsync(StringReference(applicationId), set(operation)));
	return operation;
}

template <typename T> void impl_IBackgroundExecutionManagerStatics<T>::RemoveAccess() const
{
	check(static_cast<IBackgroundExecutionManagerStatics const &>(static_cast<T const &>(*this))->abi_RemoveAccess());
}

template <typename T> void impl_IBackgroundExecutionManagerStatics<T>::RemoveAccess(String const & applicationId) const
{
	check(static_cast<IBackgroundExecutionManagerStatics const &>(static_cast<T const &>(*this))->abi_RemoveAccessForApplication(get(applicationId)));
}

template <typename T> template <unsigned S0> void impl_IBackgroundExecutionManagerStatics<T>::RemoveAccess(wchar_t const (&applicationId)[S0]) const
{
	check(static_cast<IBackgroundExecutionManagerStatics const &>(static_cast<T const &>(*this))->abi_RemoveAccessForApplication(StringReference(applicationId)));
}

template <typename T> Windows::ApplicationModel::Background::BackgroundAccessStatus impl_IBackgroundExecutionManagerStatics<T>::GetAccessStatus() const
{
	Windows::ApplicationModel::Background::BackgroundAccessStatus status = {};
	check(static_cast<IBackgroundExecutionManagerStatics const &>(static_cast<T const &>(*this))->abi_GetAccessStatus(&status));
	return status;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundAccessStatus impl_IBackgroundExecutionManagerStatics<T>::GetAccessStatus(String const & applicationId) const
{
	Windows::ApplicationModel::Background::BackgroundAccessStatus status = {};
	check(static_cast<IBackgroundExecutionManagerStatics const &>(static_cast<T const &>(*this))->abi_GetAccessStatusForApplication(get(applicationId), &status));
	return status;
}

template <typename T> template <unsigned S0> Windows::ApplicationModel::Background::BackgroundAccessStatus impl_IBackgroundExecutionManagerStatics<T>::GetAccessStatus(wchar_t const (&applicationId)[S0]) const
{
	Windows::ApplicationModel::Background::BackgroundAccessStatus status = {};
	check(static_cast<IBackgroundExecutionManagerStatics const &>(static_cast<T const &>(*this))->abi_GetAccessStatusForApplication(StringReference(applicationId), &status));
	return status;
}

template <typename T> GUID impl_IBackgroundTaskInstance<T>::InstanceId() const
{
	GUID value = {};
	check(static_cast<IBackgroundTaskInstance const &>(static_cast<T const &>(*this))->get_InstanceId(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundTaskRegistration impl_IBackgroundTaskInstance<T>::Task() const
{
	Windows::ApplicationModel::Background::BackgroundTaskRegistration task(nullptr);
	check(static_cast<IBackgroundTaskInstance const &>(static_cast<T const &>(*this))->get_Task(set(task)));
	return task;
}

template <typename T> unsigned impl_IBackgroundTaskInstance<T>::Progress() const
{
	unsigned value = {};
	check(static_cast<IBackgroundTaskInstance const &>(static_cast<T const &>(*this))->get_Progress(&value));
	return value;
}

template <typename T> void impl_IBackgroundTaskInstance<T>::Progress(unsigned const value) const
{
	check(static_cast<IBackgroundTaskInstance const &>(static_cast<T const &>(*this))->put_Progress(value));
}

template <typename T> IInspectable impl_IBackgroundTaskInstance<T>::TriggerDetails() const
{
	IInspectable triggerDetails = {};
	check(static_cast<IBackgroundTaskInstance const &>(static_cast<T const &>(*this))->get_TriggerDetails(set(triggerDetails)));
	return triggerDetails;
}

template <typename T> EventRegistrationToken impl_IBackgroundTaskInstance<T>::Canceled(Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler const & cancelHandler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IBackgroundTaskInstance const &>(static_cast<T const &>(*this))->add_Canceled(get(cancelHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IBackgroundTaskInstance<T>::Canceled(F cancelHandler) const
{
	return Canceled(Windows::ApplicationModel::Background::BackgroundTaskCanceledEventHandler(cancelHandler));
}

template <typename T> void impl_IBackgroundTaskInstance<T>::Canceled(EventRegistrationToken const cookie) const
{
	check(static_cast<IBackgroundTaskInstance const &>(static_cast<T const &>(*this))->remove_Canceled(cookie));
}

template <typename T> unsigned impl_IBackgroundTaskInstance<T>::SuspendedCount() const
{
	unsigned value = {};
	check(static_cast<IBackgroundTaskInstance const &>(static_cast<T const &>(*this))->get_SuspendedCount(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundTaskDeferral impl_IBackgroundTaskInstance<T>::GetDeferral() const
{
	Windows::ApplicationModel::Background::BackgroundTaskDeferral deferral(nullptr);
	check(static_cast<IBackgroundTaskInstance const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundWorkCostValue impl_IBackgroundWorkCostStatics<T>::CurrentBackgroundWorkCost() const
{
	Windows::ApplicationModel::Background::BackgroundWorkCostValue value = {};
	check(static_cast<IBackgroundWorkCostStatics const &>(static_cast<T const &>(*this))->get_CurrentBackgroundWorkCost(&value));
	return value;
}

template <typename T> void impl_IBackgroundTaskDeferral<T>::Complete() const
{
	check(static_cast<IBackgroundTaskDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> unsigned impl_IBackgroundTaskInstance2<T>::GetThrottleCount(Windows::ApplicationModel::Background::BackgroundTaskThrottleCounter const counter) const
{
	unsigned value = {};
	check(static_cast<IBackgroundTaskInstance2 const &>(static_cast<T const &>(*this))->abi_GetThrottleCount(counter, &value));
	return value;
}

template <typename T> void impl_IBackgroundTask<T>::Run(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & taskInstance) const
{
	check(static_cast<IBackgroundTask const &>(static_cast<T const &>(*this))->abi_Run(get(taskInstance)));
}

template <typename T> GUID impl_IBackgroundTaskRegistration<T>::TaskId() const
{
	GUID value = {};
	check(static_cast<IBackgroundTaskRegistration const &>(static_cast<T const &>(*this))->get_TaskId(&value));
	return value;
}

template <typename T> String impl_IBackgroundTaskRegistration<T>::Name() const
{
	String value = {};
	check(static_cast<IBackgroundTaskRegistration const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IBackgroundTaskRegistration<T>::Progress(Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IBackgroundTaskRegistration const &>(static_cast<T const &>(*this))->add_Progress(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IBackgroundTaskRegistration<T>::Progress(F handler) const
{
	return Progress(Windows::ApplicationModel::Background::BackgroundTaskProgressEventHandler(handler));
}

template <typename T> void impl_IBackgroundTaskRegistration<T>::Progress(EventRegistrationToken const cookie) const
{
	check(static_cast<IBackgroundTaskRegistration const &>(static_cast<T const &>(*this))->remove_Progress(cookie));
}

template <typename T> EventRegistrationToken impl_IBackgroundTaskRegistration<T>::Completed(Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IBackgroundTaskRegistration const &>(static_cast<T const &>(*this))->add_Completed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IBackgroundTaskRegistration<T>::Completed(F handler) const
{
	return Completed(Windows::ApplicationModel::Background::BackgroundTaskCompletedEventHandler(handler));
}

template <typename T> void impl_IBackgroundTaskRegistration<T>::Completed(EventRegistrationToken const cookie) const
{
	check(static_cast<IBackgroundTaskRegistration const &>(static_cast<T const &>(*this))->remove_Completed(cookie));
}

template <typename T> void impl_IBackgroundTaskRegistration<T>::Unregister(bool const cancelTask) const
{
	check(static_cast<IBackgroundTaskRegistration const &>(static_cast<T const &>(*this))->abi_Unregister(cancelTask));
}

template <typename T> Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> impl_IBackgroundTaskRegistrationStatics<T>::AllTasks() const
{
	Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> tasks = {};
	check(static_cast<IBackgroundTaskRegistrationStatics const &>(static_cast<T const &>(*this))->get_AllTasks(set(tasks)));
	return tasks;
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::TaskEntryPoint(String const & value) const
{
	check(static_cast<IBackgroundTaskBuilder const &>(static_cast<T const &>(*this))->put_TaskEntryPoint(get(value)));
}

template <typename T> template <unsigned S0> void impl_IBackgroundTaskBuilder<T>::TaskEntryPoint(wchar_t const (&value)[S0]) const
{
	check(static_cast<IBackgroundTaskBuilder const &>(static_cast<T const &>(*this))->put_TaskEntryPoint(StringReference(value)));
}

template <typename T> String impl_IBackgroundTaskBuilder<T>::TaskEntryPoint() const
{
	String value = {};
	check(static_cast<IBackgroundTaskBuilder const &>(static_cast<T const &>(*this))->get_TaskEntryPoint(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::SetTrigger(Windows::ApplicationModel::Background::IBackgroundTrigger const & trigger) const
{
	check(static_cast<IBackgroundTaskBuilder const &>(static_cast<T const &>(*this))->abi_SetTrigger(get(trigger)));
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::AddCondition(Windows::ApplicationModel::Background::IBackgroundCondition const & condition) const
{
	check(static_cast<IBackgroundTaskBuilder const &>(static_cast<T const &>(*this))->abi_AddCondition(get(condition)));
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::Name(String const & value) const
{
	check(static_cast<IBackgroundTaskBuilder const &>(static_cast<T const &>(*this))->put_Name(get(value)));
}

template <typename T> template <unsigned S0> void impl_IBackgroundTaskBuilder<T>::Name(wchar_t const (&value)[S0]) const
{
	check(static_cast<IBackgroundTaskBuilder const &>(static_cast<T const &>(*this))->put_Name(StringReference(value)));
}

template <typename T> String impl_IBackgroundTaskBuilder<T>::Name() const
{
	String value = {};
	check(static_cast<IBackgroundTaskBuilder const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundTaskRegistration impl_IBackgroundTaskBuilder<T>::Register() const
{
	Windows::ApplicationModel::Background::BackgroundTaskRegistration task(nullptr);
	check(static_cast<IBackgroundTaskBuilder const &>(static_cast<T const &>(*this))->abi_Register(set(task)));
	return task;
}

template <typename T> void impl_IBackgroundTaskBuilder2<T>::CancelOnConditionLoss(bool const value) const
{
	check(static_cast<IBackgroundTaskBuilder2 const &>(static_cast<T const &>(*this))->put_CancelOnConditionLoss(value));
}

template <typename T> bool impl_IBackgroundTaskBuilder2<T>::CancelOnConditionLoss() const
{
	bool value = {};
	check(static_cast<IBackgroundTaskBuilder2 const &>(static_cast<T const &>(*this))->get_CancelOnConditionLoss(BoolProxy(value)));
	return value;
}

template <typename T> GUID impl_IBackgroundTaskCompletedEventArgs<T>::InstanceId() const
{
	GUID value = {};
	check(static_cast<IBackgroundTaskCompletedEventArgs const &>(static_cast<T const &>(*this))->get_InstanceId(&value));
	return value;
}

template <typename T> void impl_IBackgroundTaskCompletedEventArgs<T>::CheckResult() const
{
	check(static_cast<IBackgroundTaskCompletedEventArgs const &>(static_cast<T const &>(*this))->abi_CheckResult());
}

template <typename T> GUID impl_IBackgroundTaskProgressEventArgs<T>::InstanceId() const
{
	GUID value = {};
	check(static_cast<IBackgroundTaskProgressEventArgs const &>(static_cast<T const &>(*this))->get_InstanceId(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundTaskProgressEventArgs<T>::Progress() const
{
	unsigned value = {};
	check(static_cast<IBackgroundTaskProgressEventArgs const &>(static_cast<T const &>(*this))->get_Progress(&value));
	return value;
}

template <typename T> bool impl_ISystemTrigger<T>::OneShot() const
{
	bool oneShot = {};
	check(static_cast<ISystemTrigger const &>(static_cast<T const &>(*this))->get_OneShot(BoolProxy(oneShot)));
	return oneShot;
}

template <typename T> Windows::ApplicationModel::Background::SystemTriggerType impl_ISystemTrigger<T>::TriggerType() const
{
	Windows::ApplicationModel::Background::SystemTriggerType triggerType = {};
	check(static_cast<ISystemTrigger const &>(static_cast<T const &>(*this))->get_TriggerType(&triggerType));
	return triggerType;
}

template <typename T> Windows::ApplicationModel::Background::SystemTrigger impl_ISystemTriggerFactory<T>::Create(Windows::ApplicationModel::Background::SystemTriggerType const triggerType, bool const oneShot) const
{
	Windows::ApplicationModel::Background::SystemTrigger trigger(nullptr);
	check(static_cast<ISystemTriggerFactory const &>(static_cast<T const &>(*this))->abi_Create(triggerType, oneShot, set(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::SystemConditionType impl_ISystemCondition<T>::ConditionType() const
{
	Windows::ApplicationModel::Background::SystemConditionType conditionType = {};
	check(static_cast<ISystemCondition const &>(static_cast<T const &>(*this))->get_ConditionType(&conditionType));
	return conditionType;
}

template <typename T> Windows::ApplicationModel::Background::SystemCondition impl_ISystemConditionFactory<T>::Create(Windows::ApplicationModel::Background::SystemConditionType const conditionType) const
{
	Windows::ApplicationModel::Background::SystemCondition condition(nullptr);
	check(static_cast<ISystemConditionFactory const &>(static_cast<T const &>(*this))->abi_Create(conditionType, set(condition)));
	return condition;
}

template <typename T> String impl_INetworkOperatorNotificationTrigger<T>::NetworkAccountId() const
{
	String value = {};
	check(static_cast<INetworkOperatorNotificationTrigger const &>(static_cast<T const &>(*this))->get_NetworkAccountId(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger impl_INetworkOperatorNotificationTriggerFactory<T>::Create(String const & networkAccountId) const
{
	Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger trigger(nullptr);
	check(static_cast<INetworkOperatorNotificationTriggerFactory const &>(static_cast<T const &>(*this))->abi_Create(get(networkAccountId), set(trigger)));
	return trigger;
}

template <typename T> template <unsigned S0> Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger impl_INetworkOperatorNotificationTriggerFactory<T>::Create(wchar_t const (&networkAccountId)[S0]) const
{
	Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger trigger(nullptr);
	check(static_cast<INetworkOperatorNotificationTriggerFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(networkAccountId), set(trigger)));
	return trigger;
}

template <typename T> unsigned impl_ITimeTrigger<T>::FreshnessTime() const
{
	unsigned freshnessTime = {};
	check(static_cast<ITimeTrigger const &>(static_cast<T const &>(*this))->get_FreshnessTime(&freshnessTime));
	return freshnessTime;
}

template <typename T> bool impl_ITimeTrigger<T>::OneShot() const
{
	bool oneShot = {};
	check(static_cast<ITimeTrigger const &>(static_cast<T const &>(*this))->get_OneShot(BoolProxy(oneShot)));
	return oneShot;
}

template <typename T> Windows::ApplicationModel::Background::TimeTrigger impl_ITimeTriggerFactory<T>::Create(unsigned const freshnessTime, bool const oneShot) const
{
	Windows::ApplicationModel::Background::TimeTrigger trigger(nullptr);
	check(static_cast<ITimeTriggerFactory const &>(static_cast<T const &>(*this))->abi_Create(freshnessTime, oneShot, set(trigger)));
	return trigger;
}

template <typename T> unsigned impl_IMaintenanceTrigger<T>::FreshnessTime() const
{
	unsigned freshnessTime = {};
	check(static_cast<IMaintenanceTrigger const &>(static_cast<T const &>(*this))->get_FreshnessTime(&freshnessTime));
	return freshnessTime;
}

template <typename T> bool impl_IMaintenanceTrigger<T>::OneShot() const
{
	bool oneShot = {};
	check(static_cast<IMaintenanceTrigger const &>(static_cast<T const &>(*this))->get_OneShot(BoolProxy(oneShot)));
	return oneShot;
}

template <typename T> Windows::ApplicationModel::Background::MaintenanceTrigger impl_IMaintenanceTriggerFactory<T>::Create(unsigned const freshnessTime, bool const oneShot) const
{
	Windows::ApplicationModel::Background::MaintenanceTrigger trigger(nullptr);
	check(static_cast<IMaintenanceTriggerFactory const &>(static_cast<T const &>(*this))->abi_Create(freshnessTime, oneShot, set(trigger)));
	return trigger;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceUseTrigger<T>::RequestAsync(String const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> result = {};
	check(static_cast<IDeviceUseTrigger const &>(static_cast<T const &>(*this))->abi_RequestAsyncSimple(get(deviceId), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceUseTrigger<T>::RequestAsync(wchar_t const (&deviceId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> result = {};
	check(static_cast<IDeviceUseTrigger const &>(static_cast<T const &>(*this))->abi_RequestAsyncSimple(StringReference(deviceId), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceUseTrigger<T>::RequestAsync(String const & deviceId, String const & arguments) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> result = {};
	check(static_cast<IDeviceUseTrigger const &>(static_cast<T const &>(*this))->abi_RequestAsyncWithArguments(get(deviceId), get(arguments), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceUseTrigger<T>::RequestAsync(wchar_t const (&deviceId)[S0], wchar_t const (&arguments)[S1]) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> result = {};
	check(static_cast<IDeviceUseTrigger const &>(static_cast<T const &>(*this))->abi_RequestAsyncWithArguments(StringReference(deviceId), StringReference(arguments), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceServicingTrigger<T>::RequestAsync(String const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> result = {};
	check(static_cast<IDeviceServicingTrigger const &>(static_cast<T const &>(*this))->abi_RequestAsyncSimple(get(deviceId), expectedDuration, set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceServicingTrigger<T>::RequestAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::TimeSpan const & expectedDuration) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> result = {};
	check(static_cast<IDeviceServicingTrigger const &>(static_cast<T const &>(*this))->abi_RequestAsyncSimple(StringReference(deviceId), expectedDuration, set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceServicingTrigger<T>::RequestAsync(String const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration, String const & arguments) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> result = {};
	check(static_cast<IDeviceServicingTrigger const &>(static_cast<T const &>(*this))->abi_RequestAsyncWithArguments(get(deviceId), expectedDuration, get(arguments), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceServicingTrigger<T>::RequestAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::TimeSpan const & expectedDuration, wchar_t const (&arguments)[S1]) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::DeviceTriggerResult> result = {};
	check(static_cast<IDeviceServicingTrigger const &>(static_cast<T const &>(*this))->abi_RequestAsyncWithArguments(StringReference(deviceId), expectedDuration, StringReference(arguments), set(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Background::LocationTriggerType impl_ILocationTrigger<T>::TriggerType() const
{
	Windows::ApplicationModel::Background::LocationTriggerType triggerType = {};
	check(static_cast<ILocationTrigger const &>(static_cast<T const &>(*this))->get_TriggerType(&triggerType));
	return triggerType;
}

template <typename T> Windows::ApplicationModel::Background::LocationTrigger impl_ILocationTriggerFactory<T>::Create(Windows::ApplicationModel::Background::LocationTriggerType const triggerType) const
{
	Windows::ApplicationModel::Background::LocationTrigger locationTrigger(nullptr);
	check(static_cast<ILocationTriggerFactory const &>(static_cast<T const &>(*this))->abi_Create(triggerType, set(locationTrigger)));
	return locationTrigger;
}

template <typename T> Windows::ApplicationModel::Background::PushNotificationTrigger impl_IPushNotificationTriggerFactory<T>::Create(String const & applicationId) const
{
	Windows::ApplicationModel::Background::PushNotificationTrigger trigger(nullptr);
	check(static_cast<IPushNotificationTriggerFactory const &>(static_cast<T const &>(*this))->abi_Create(get(applicationId), set(trigger)));
	return trigger;
}

template <typename T> template <unsigned S0> Windows::ApplicationModel::Background::PushNotificationTrigger impl_IPushNotificationTriggerFactory<T>::Create(wchar_t const (&applicationId)[S0]) const
{
	Windows::ApplicationModel::Background::PushNotificationTrigger trigger(nullptr);
	check(static_cast<IPushNotificationTriggerFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(applicationId), set(trigger)));
	return trigger;
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

template <typename T> void impl_ILockScreenCallEndCallDeferral<T>::Complete() const
{
	check(static_cast<ILockScreenCallEndCallDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral impl_ILockScreenCallEndRequestedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral value(nullptr);
	check(static_cast<ILockScreenCallEndRequestedEventArgs const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ILockScreenCallEndRequestedEventArgs<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ILockScreenCallEndRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> void impl_ILockScreenCallUI<T>::Dismiss() const
{
	check(static_cast<ILockScreenCallUI const &>(static_cast<T const &>(*this))->abi_Dismiss());
}

template <typename T> EventRegistrationToken impl_ILockScreenCallUI<T>::EndRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ILockScreenCallUI const &>(static_cast<T const &>(*this))->add_EndRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ILockScreenCallUI<T>::EndRequested(F handler) const
{
	return EndRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs>(handler));
}

template <typename T> void impl_ILockScreenCallUI<T>::EndRequested(EventRegistrationToken const token) const
{
	check(static_cast<ILockScreenCallUI const &>(static_cast<T const &>(*this))->remove_EndRequested(token));
}

template <typename T> EventRegistrationToken impl_ILockScreenCallUI<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ILockScreenCallUI const &>(static_cast<T const &>(*this))->add_Closed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ILockScreenCallUI<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, IInspectable>(handler));
}

template <typename T> void impl_ILockScreenCallUI<T>::Closed(EventRegistrationToken const token) const
{
	check(static_cast<ILockScreenCallUI const &>(static_cast<T const &>(*this))->remove_Closed(token));
}

template <typename T> String impl_ILockScreenCallUI<T>::CallTitle() const
{
	String value = {};
	check(static_cast<ILockScreenCallUI const &>(static_cast<T const &>(*this))->get_CallTitle(set(value)));
	return value;
}

template <typename T> void impl_ILockScreenCallUI<T>::CallTitle(String const & value) const
{
	check(static_cast<ILockScreenCallUI const &>(static_cast<T const &>(*this))->put_CallTitle(get(value)));
}

template <typename T> template <unsigned S0> void impl_ILockScreenCallUI<T>::CallTitle(wchar_t const (&value)[S0]) const
{
	check(static_cast<ILockScreenCallUI const &>(static_cast<T const &>(*this))->put_CallTitle(StringReference(value)));
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

template <typename T> void impl_IContactManagerStatics<T>::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection) const
{
	check(static_cast<IContactManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowContactCard(get(contact), selection));
}

template <typename T> void impl_IContactManagerStatics<T>::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	check(static_cast<IContactManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowContactCardWithPlacement(get(contact), selection, preferredPlacement));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader impl_IContactManagerStatics<T>::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader dataLoader(nullptr);
	check(static_cast<IContactManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowDelayLoadedContactCard(get(contact), selection, preferredPlacement, set(dataLoader)));
	return dataLoader;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Call() const
{
	String value = {};
	check(static_cast<IContactLaunchActionVerbsStatics const &>(static_cast<T const &>(*this))->get_Call(set(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Message() const
{
	String value = {};
	check(static_cast<IContactLaunchActionVerbsStatics const &>(static_cast<T const &>(*this))->get_Message(set(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Map() const
{
	String value = {};
	check(static_cast<IContactLaunchActionVerbsStatics const &>(static_cast<T const &>(*this))->get_Map(set(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Post() const
{
	String value = {};
	check(static_cast<IContactLaunchActionVerbsStatics const &>(static_cast<T const &>(*this))->get_Post(set(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::VideoCall() const
{
	String value = {};
	check(static_cast<IContactLaunchActionVerbsStatics const &>(static_cast<T const &>(*this))->get_VideoCall(set(value)));
	return value;
}

template <typename T> String impl_IContactPicker<T>::CommitButtonText() const
{
	String value = {};
	check(static_cast<IContactPicker const &>(static_cast<T const &>(*this))->get_CommitButtonText(set(value)));
	return value;
}

template <typename T> void impl_IContactPicker<T>::CommitButtonText(String const & value) const
{
	check(static_cast<IContactPicker const &>(static_cast<T const &>(*this))->put_CommitButtonText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactPicker<T>::CommitButtonText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactPicker const &>(static_cast<T const &>(*this))->put_CommitButtonText(StringReference(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactSelectionMode impl_IContactPicker<T>::SelectionMode() const
{
	Windows::ApplicationModel::Contacts::ContactSelectionMode value = {};
	check(static_cast<IContactPicker const &>(static_cast<T const &>(*this))->get_SelectionMode(&value));
	return value;
}

template <typename T> void impl_IContactPicker<T>::SelectionMode(Windows::ApplicationModel::Contacts::ContactSelectionMode const value) const
{
	check(static_cast<IContactPicker const &>(static_cast<T const &>(*this))->put_SelectionMode(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Modern::Windows::ApplicationModel::Contacts::ContactFieldType> impl_IContactPicker2<T>::DesiredFieldsWithContactFieldType() const
{
	Windows::Foundation::Collections::IVector<Modern::Windows::ApplicationModel::Contacts::ContactFieldType> value = {};
	check(static_cast<IContactPicker2 const &>(static_cast<T const &>(*this))->get_DesiredFieldsWithContactFieldType(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactPicker2<T>::PickContactAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> result = {};
	check(static_cast<IContactPicker2 const &>(static_cast<T const &>(*this))->abi_PickContactAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Contact>> impl_IContactPicker2<T>::PickContactsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Contact>> result = {};
	check(static_cast<IContactPicker2 const &>(static_cast<T const &>(*this))->abi_PickContactsAsync(set(result)));
	return result;
}

template <typename T> String impl_IContactSignificantOther<T>::Name() const
{
	String value = {};
	check(static_cast<IContactSignificantOther const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> void impl_IContactSignificantOther<T>::Name(String const & value) const
{
	check(static_cast<IContactSignificantOther const &>(static_cast<T const &>(*this))->put_Name(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactSignificantOther<T>::Name(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactSignificantOther const &>(static_cast<T const &>(*this))->put_Name(StringReference(value)));
}

template <typename T> String impl_IContactSignificantOther<T>::Description() const
{
	String value = {};
	check(static_cast<IContactSignificantOther const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> void impl_IContactSignificantOther<T>::Description(String const & value) const
{
	check(static_cast<IContactSignificantOther const &>(static_cast<T const &>(*this))->put_Description(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactSignificantOther<T>::Description(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactSignificantOther const &>(static_cast<T const &>(*this))->put_Description(StringReference(value)));
}

template <typename T> Windows::Foundation::Uri impl_IContactWebsite<T>::Uri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IContactWebsite const &>(static_cast<T const &>(*this))->get_Uri(set(value)));
	return value;
}

template <typename T> void impl_IContactWebsite<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IContactWebsite const &>(static_cast<T const &>(*this))->put_Uri(get(value)));
}

template <typename T> String impl_IContactWebsite<T>::Description() const
{
	String value = {};
	check(static_cast<IContactWebsite const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> void impl_IContactWebsite<T>::Description(String const & value) const
{
	check(static_cast<IContactWebsite const &>(static_cast<T const &>(*this))->put_Description(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactWebsite<T>::Description(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactWebsite const &>(static_cast<T const &>(*this))->put_Description(StringReference(value)));
}

template <typename T> String impl_IContactEmail<T>::Address() const
{
	String value = {};
	check(static_cast<IContactEmail const &>(static_cast<T const &>(*this))->get_Address(set(value)));
	return value;
}

template <typename T> void impl_IContactEmail<T>::Address(String const & value) const
{
	check(static_cast<IContactEmail const &>(static_cast<T const &>(*this))->put_Address(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactEmail<T>::Address(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactEmail const &>(static_cast<T const &>(*this))->put_Address(StringReference(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactEmailKind impl_IContactEmail<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactEmailKind value = {};
	check(static_cast<IContactEmail const &>(static_cast<T const &>(*this))->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactEmail<T>::Kind(Windows::ApplicationModel::Contacts::ContactEmailKind const value) const
{
	check(static_cast<IContactEmail const &>(static_cast<T const &>(*this))->put_Kind(value));
}

template <typename T> String impl_IContactEmail<T>::Description() const
{
	String value = {};
	check(static_cast<IContactEmail const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> void impl_IContactEmail<T>::Description(String const & value) const
{
	check(static_cast<IContactEmail const &>(static_cast<T const &>(*this))->put_Description(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactEmail<T>::Description(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactEmail const &>(static_cast<T const &>(*this))->put_Description(StringReference(value)));
}

template <typename T> String impl_IContactPhone<T>::Number() const
{
	String value = {};
	check(static_cast<IContactPhone const &>(static_cast<T const &>(*this))->get_Number(set(value)));
	return value;
}

template <typename T> void impl_IContactPhone<T>::Number(String const & value) const
{
	check(static_cast<IContactPhone const &>(static_cast<T const &>(*this))->put_Number(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactPhone<T>::Number(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactPhone const &>(static_cast<T const &>(*this))->put_Number(StringReference(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactPhoneKind impl_IContactPhone<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactPhoneKind value = {};
	check(static_cast<IContactPhone const &>(static_cast<T const &>(*this))->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactPhone<T>::Kind(Windows::ApplicationModel::Contacts::ContactPhoneKind const value) const
{
	check(static_cast<IContactPhone const &>(static_cast<T const &>(*this))->put_Kind(value));
}

template <typename T> String impl_IContactPhone<T>::Description() const
{
	String value = {};
	check(static_cast<IContactPhone const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> void impl_IContactPhone<T>::Description(String const & value) const
{
	check(static_cast<IContactPhone const &>(static_cast<T const &>(*this))->put_Description(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactPhone<T>::Description(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactPhone const &>(static_cast<T const &>(*this))->put_Description(StringReference(value)));
}

template <typename T> String impl_IContactAddress<T>::StreetAddress() const
{
	String value = {};
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->get_StreetAddress(set(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::StreetAddress(String const & value) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_StreetAddress(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactAddress<T>::StreetAddress(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_StreetAddress(StringReference(value)));
}

template <typename T> String impl_IContactAddress<T>::Locality() const
{
	String value = {};
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->get_Locality(set(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Locality(String const & value) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_Locality(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactAddress<T>::Locality(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_Locality(StringReference(value)));
}

template <typename T> String impl_IContactAddress<T>::Region() const
{
	String value = {};
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->get_Region(set(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Region(String const & value) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_Region(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactAddress<T>::Region(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_Region(StringReference(value)));
}

template <typename T> String impl_IContactAddress<T>::Country() const
{
	String value = {};
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->get_Country(set(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Country(String const & value) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_Country(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactAddress<T>::Country(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_Country(StringReference(value)));
}

template <typename T> String impl_IContactAddress<T>::PostalCode() const
{
	String value = {};
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->get_PostalCode(set(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::PostalCode(String const & value) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_PostalCode(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactAddress<T>::PostalCode(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_PostalCode(StringReference(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAddressKind impl_IContactAddress<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactAddressKind value = {};
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Kind(Windows::ApplicationModel::Contacts::ContactAddressKind const value) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_Kind(value));
}

template <typename T> String impl_IContactAddress<T>::Description() const
{
	String value = {};
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Description(String const & value) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_Description(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactAddress<T>::Description(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactAddress const &>(static_cast<T const &>(*this))->put_Description(StringReference(value)));
}

template <typename T> String impl_IContactConnectedServiceAccount<T>::Id() const
{
	String value = {};
	check(static_cast<IContactConnectedServiceAccount const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> void impl_IContactConnectedServiceAccount<T>::Id(String const & value) const
{
	check(static_cast<IContactConnectedServiceAccount const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactConnectedServiceAccount<T>::Id(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactConnectedServiceAccount const &>(static_cast<T const &>(*this))->put_Id(StringReference(value)));
}

template <typename T> String impl_IContactConnectedServiceAccount<T>::ServiceName() const
{
	String value = {};
	check(static_cast<IContactConnectedServiceAccount const &>(static_cast<T const &>(*this))->get_ServiceName(set(value)));
	return value;
}

template <typename T> void impl_IContactConnectedServiceAccount<T>::ServiceName(String const & value) const
{
	check(static_cast<IContactConnectedServiceAccount const &>(static_cast<T const &>(*this))->put_ServiceName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactConnectedServiceAccount<T>::ServiceName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactConnectedServiceAccount const &>(static_cast<T const &>(*this))->put_ServiceName(StringReference(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContactDate<T>::Day() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->get_Day(set(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Day(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->put_Day(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContactDate<T>::Month() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->get_Month(set(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Month(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->put_Month(get(value)));
}

template <typename T> Windows::Foundation::IReference<int> impl_IContactDate<T>::Year() const
{
	Windows::Foundation::IReference<int> value = {};
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->get_Year(set(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Year(Windows::Foundation::IReference<int> const & value) const
{
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->put_Year(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactDateKind impl_IContactDate<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactDateKind value = {};
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactDate<T>::Kind(Windows::ApplicationModel::Contacts::ContactDateKind const value) const
{
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->put_Kind(value));
}

template <typename T> String impl_IContactDate<T>::Description() const
{
	String value = {};
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Description(String const & value) const
{
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->put_Description(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactDate<T>::Description(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactDate const &>(static_cast<T const &>(*this))->put_Description(StringReference(value)));
}

template <typename T> String impl_IContactName<T>::FirstName() const
{
	String value = {};
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->get_FirstName(set(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::FirstName(String const & value) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_FirstName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactName<T>::FirstName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_FirstName(StringReference(value)));
}

template <typename T> String impl_IContactName<T>::LastName() const
{
	String value = {};
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->get_LastName(set(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::LastName(String const & value) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_LastName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactName<T>::LastName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_LastName(StringReference(value)));
}

template <typename T> String impl_IContactName<T>::MiddleName() const
{
	String value = {};
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->get_MiddleName(set(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::MiddleName(String const & value) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_MiddleName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactName<T>::MiddleName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_MiddleName(StringReference(value)));
}

template <typename T> String impl_IContactName<T>::YomiGivenName() const
{
	String value = {};
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->get_YomiGivenName(set(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::YomiGivenName(String const & value) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_YomiGivenName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactName<T>::YomiGivenName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_YomiGivenName(StringReference(value)));
}

template <typename T> String impl_IContactName<T>::YomiFamilyName() const
{
	String value = {};
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->get_YomiFamilyName(set(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::YomiFamilyName(String const & value) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_YomiFamilyName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactName<T>::YomiFamilyName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_YomiFamilyName(StringReference(value)));
}

template <typename T> String impl_IContactName<T>::HonorificNameSuffix() const
{
	String value = {};
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->get_HonorificNameSuffix(set(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::HonorificNameSuffix(String const & value) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_HonorificNameSuffix(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactName<T>::HonorificNameSuffix(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_HonorificNameSuffix(StringReference(value)));
}

template <typename T> String impl_IContactName<T>::HonorificNamePrefix() const
{
	String value = {};
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->get_HonorificNamePrefix(set(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::HonorificNamePrefix(String const & value) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_HonorificNamePrefix(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactName<T>::HonorificNamePrefix(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->put_HonorificNamePrefix(StringReference(value)));
}

template <typename T> String impl_IContactName<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> String impl_IContactName<T>::YomiDisplayName() const
{
	String value = {};
	check(static_cast<IContactName const &>(static_cast<T const &>(*this))->get_YomiDisplayName(set(value)));
	return value;
}

template <typename T> String impl_IContactJobInfo<T>::CompanyName() const
{
	String value = {};
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->get_CompanyName(set(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::CompanyName(String const & value) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_CompanyName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactJobInfo<T>::CompanyName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_CompanyName(StringReference(value)));
}

template <typename T> String impl_IContactJobInfo<T>::CompanyYomiName() const
{
	String value = {};
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->get_CompanyYomiName(set(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::CompanyYomiName(String const & value) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_CompanyYomiName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactJobInfo<T>::CompanyYomiName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_CompanyYomiName(StringReference(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Department() const
{
	String value = {};
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->get_Department(set(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Department(String const & value) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Department(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactJobInfo<T>::Department(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Department(StringReference(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Title() const
{
	String value = {};
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Title(String const & value) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactJobInfo<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Manager() const
{
	String value = {};
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->get_Manager(set(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Manager(String const & value) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Manager(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactJobInfo<T>::Manager(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Manager(StringReference(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Office() const
{
	String value = {};
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->get_Office(set(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Office(String const & value) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Office(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactJobInfo<T>::Office(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Office(StringReference(value)));
}

template <typename T> String impl_IContactJobInfo<T>::CompanyAddress() const
{
	String value = {};
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->get_CompanyAddress(set(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::CompanyAddress(String const & value) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_CompanyAddress(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactJobInfo<T>::CompanyAddress(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_CompanyAddress(StringReference(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Description() const
{
	String value = {};
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Description(String const & value) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Description(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContactJobInfo<T>::Description(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContactJobInfo const &>(static_cast<T const &>(*this))->put_Description(StringReference(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IContact<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value = {};
	check(static_cast<IContact const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> void impl_IContact<T>::Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(static_cast<IContact const &>(static_cast<T const &>(*this))->put_Thumbnail(get(value)));
}

template <typename T> String impl_IContact2<T>::Id() const
{
	String value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> void impl_IContact2<T>::Id(String const & value) const
{
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContact2<T>::Id(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->put_Id(StringReference(value)));
}

template <typename T> String impl_IContact2<T>::Notes() const
{
	String value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_Notes(set(value)));
	return value;
}

template <typename T> void impl_IContact2<T>::Notes(String const & value) const
{
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->put_Notes(get(value)));
}

template <typename T> template <unsigned S0> void impl_IContact2<T>::Notes(wchar_t const (&value)[S0]) const
{
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->put_Notes(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone> impl_IContact2<T>::Phones() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone> value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_Phones(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail> impl_IContact2<T>::Emails() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail> value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_Emails(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress> impl_IContact2<T>::Addresses() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress> value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_Addresses(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> impl_IContact2<T>::ConnectedServiceAccounts() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_ConnectedServiceAccounts(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactDate> impl_IContact2<T>::ImportantDates() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactDate> value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_ImportantDates(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContact2<T>::DataSuppliers() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_DataSuppliers(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo> impl_IContact2<T>::JobInfo() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo> value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_JobInfo(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactSignificantOther> impl_IContact2<T>::SignificantOthers() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactSignificantOther> value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_SignificantOthers(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactWebsite> impl_IContact2<T>::Websites() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactWebsite> value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_Websites(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IContact2<T>::ProviderProperties() const
{
	Windows::Foundation::Collections::IPropertySet value = {};
	check(static_cast<IContact2 const &>(static_cast<T const &>(*this))->get_ProviderProperties(set(value)));
	return value;
}

template <typename T> void impl_IContactCardDelayedDataLoader<T>::SetData(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	check(static_cast<IContactCardDelayedDataLoader const &>(static_cast<T const &>(*this))->abi_SetData(get(contact)));
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

template <typename T> String impl_IContactRemovedEventArgs<T>::Id() const
{
	String value = {};
	check(static_cast<IContactRemovedEventArgs const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> void impl_IContactPickerUI<T>::RemoveContact(String const & id) const
{
	check(static_cast<IContactPickerUI const &>(static_cast<T const &>(*this))->abi_RemoveContact(get(id)));
}

template <typename T> template <unsigned S0> void impl_IContactPickerUI<T>::RemoveContact(wchar_t const (&id)[S0]) const
{
	check(static_cast<IContactPickerUI const &>(static_cast<T const &>(*this))->abi_RemoveContact(StringReference(id)));
}

template <typename T> bool impl_IContactPickerUI<T>::ContainsContact(String const & id) const
{
	bool isContained = {};
	check(static_cast<IContactPickerUI const &>(static_cast<T const &>(*this))->abi_ContainsContact(get(id), BoolProxy(isContained)));
	return isContained;
}

template <typename T> template <unsigned S0> bool impl_IContactPickerUI<T>::ContainsContact(wchar_t const (&id)[S0]) const
{
	bool isContained = {};
	check(static_cast<IContactPickerUI const &>(static_cast<T const &>(*this))->abi_ContainsContact(StringReference(id), BoolProxy(isContained)));
	return isContained;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactSelectionMode impl_IContactPickerUI<T>::SelectionMode() const
{
	Windows::ApplicationModel::Contacts::ContactSelectionMode value = {};
	check(static_cast<IContactPickerUI const &>(static_cast<T const &>(*this))->get_SelectionMode(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IContactPickerUI<T>::ContactRemoved(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IContactPickerUI const &>(static_cast<T const &>(*this))->add_ContactRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IContactPickerUI<T>::ContactRemoved(F handler) const
{
	return ContactRemoved(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>(handler));
}

template <typename T> void impl_IContactPickerUI<T>::ContactRemoved(EventRegistrationToken const token) const
{
	check(static_cast<IContactPickerUI const &>(static_cast<T const &>(*this))->remove_ContactRemoved(token));
}

template <typename T> Windows::ApplicationModel::Contacts::Provider::AddContactResult impl_IContactPickerUI2<T>::AddContact(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::ApplicationModel::Contacts::Provider::AddContactResult result = {};
	check(static_cast<IContactPickerUI2 const &>(static_cast<T const &>(*this))->abi_AddContact(get(contact), &result));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Modern::Windows::ApplicationModel::Contacts::ContactFieldType> impl_IContactPickerUI2<T>::DesiredFieldsWithContactFieldType() const
{
	Windows::Foundation::Collections::IVector<Modern::Windows::ApplicationModel::Contacts::ContactFieldType> value = {};
	check(static_cast<IContactPickerUI2 const &>(static_cast<T const &>(*this))->get_DesiredFieldsWithContactFieldType(set(value)));
	return value;
}

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

template <typename T> void impl_IFrameworkView<T>::Initialize(Windows::ApplicationModel::Core::CoreApplicationView const & applicationView) const
{
	check(static_cast<IFrameworkView const &>(static_cast<T const &>(*this))->abi_Initialize(get(applicationView)));
}

template <typename T> void impl_IFrameworkView<T>::SetWindow(Windows::UI::Core::CoreWindow const & window) const
{
	check(static_cast<IFrameworkView const &>(static_cast<T const &>(*this))->abi_SetWindow(get(window)));
}

template <typename T> void impl_IFrameworkView<T>::Load(String const & entryPoint) const
{
	check(static_cast<IFrameworkView const &>(static_cast<T const &>(*this))->abi_Load(get(entryPoint)));
}

template <typename T> template <unsigned S0> void impl_IFrameworkView<T>::Load(wchar_t const (&entryPoint)[S0]) const
{
	check(static_cast<IFrameworkView const &>(static_cast<T const &>(*this))->abi_Load(StringReference(entryPoint)));
}

template <typename T> void impl_IFrameworkView<T>::Run() const
{
	check(static_cast<IFrameworkView const &>(static_cast<T const &>(*this))->abi_Run());
}

template <typename T> void impl_IFrameworkView<T>::Uninitialize() const
{
	check(static_cast<IFrameworkView const &>(static_cast<T const &>(*this))->abi_Uninitialize());
}

template <typename T> Windows::ApplicationModel::Core::IFrameworkView impl_IFrameworkViewSource<T>::CreateView() const
{
	Windows::ApplicationModel::Core::IFrameworkView viewProvider = {};
	check(static_cast<IFrameworkViewSource const &>(static_cast<T const &>(*this))->abi_CreateView(set(viewProvider)));
	return viewProvider;
}

template <typename T> String impl_ICoreApplication<T>::Id() const
{
	String value = {};
	check(static_cast<ICoreApplication const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_ICoreApplication<T>::Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICoreApplication const &>(static_cast<T const &>(*this))->add_Suspending(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreApplication<T>::Suspending(F handler) const
{
	return Suspending(Windows::Foundation::EventHandler<Windows::ApplicationModel::SuspendingEventArgs>(handler));
}

template <typename T> void impl_ICoreApplication<T>::Suspending(EventRegistrationToken const token) const
{
	check(static_cast<ICoreApplication const &>(static_cast<T const &>(*this))->remove_Suspending(token));
}

template <typename T> EventRegistrationToken impl_ICoreApplication<T>::Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICoreApplication const &>(static_cast<T const &>(*this))->add_Resuming(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreApplication<T>::Resuming(F handler) const
{
	return Resuming(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_ICoreApplication<T>::Resuming(EventRegistrationToken const token) const
{
	check(static_cast<ICoreApplication const &>(static_cast<T const &>(*this))->remove_Resuming(token));
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_ICoreApplication<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value = {};
	check(static_cast<ICoreApplication const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreApplication<T>::GetCurrentView() const
{
	Windows::ApplicationModel::Core::CoreApplicationView value(nullptr);
	check(static_cast<ICoreApplication const &>(static_cast<T const &>(*this))->abi_GetCurrentView(set(value)));
	return value;
}

template <typename T> void impl_ICoreApplication<T>::Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource) const
{
	check(static_cast<ICoreApplication const &>(static_cast<T const &>(*this))->abi_Run(get(viewSource)));
}

template <typename T> void impl_ICoreApplication<T>::RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback) const
{
	check(static_cast<ICoreApplication const &>(static_cast<T const &>(*this))->abi_RunWithActivationFactories(get(activationFactoryCallback)));
}

template <typename T> void impl_ICoreApplicationUseCount<T>::IncrementApplicationUseCount() const
{
	check(static_cast<ICoreApplicationUseCount const &>(static_cast<T const &>(*this))->abi_IncrementApplicationUseCount());
}

template <typename T> void impl_ICoreApplicationUseCount<T>::DecrementApplicationUseCount() const
{
	check(static_cast<ICoreApplicationUseCount const &>(static_cast<T const &>(*this))->abi_DecrementApplicationUseCount());
}

template <typename T> void impl_ICoreApplicationExit<T>::Exit() const
{
	check(static_cast<ICoreApplicationExit const &>(static_cast<T const &>(*this))->abi_Exit());
}

template <typename T> EventRegistrationToken impl_ICoreApplicationExit<T>::Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICoreApplicationExit const &>(static_cast<T const &>(*this))->add_Exiting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreApplicationExit<T>::Exiting(F handler) const
{
	return Exiting(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_ICoreApplicationExit<T>::Exiting(EventRegistrationToken const token) const
{
	check(static_cast<ICoreApplicationExit const &>(static_cast<T const &>(*this))->remove_Exiting(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> impl_ICoreImmersiveApplication<T>::Views() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> value = {};
	check(static_cast<ICoreImmersiveApplication const &>(static_cast<T const &>(*this))->get_Views(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication<T>::CreateNewView(String const & runtimeType, String const & entryPoint) const
{
	Windows::ApplicationModel::Core::CoreApplicationView view(nullptr);
	check(static_cast<ICoreImmersiveApplication const &>(static_cast<T const &>(*this))->abi_CreateNewView(get(runtimeType), get(entryPoint), set(view)));
	return view;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication<T>::CreateNewView(wchar_t const (&runtimeType)[S0], wchar_t const (&entryPoint)[S1]) const
{
	Windows::ApplicationModel::Core::CoreApplicationView view(nullptr);
	check(static_cast<ICoreImmersiveApplication const &>(static_cast<T const &>(*this))->abi_CreateNewView(StringReference(runtimeType), StringReference(entryPoint), set(view)));
	return view;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication<T>::MainView() const
{
	Windows::ApplicationModel::Core::CoreApplicationView value(nullptr);
	check(static_cast<ICoreImmersiveApplication const &>(static_cast<T const &>(*this))->get_MainView(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication2<T>::CreateNewView() const
{
	Windows::ApplicationModel::Core::CoreApplicationView view(nullptr);
	check(static_cast<ICoreImmersiveApplication2 const &>(static_cast<T const &>(*this))->abi_CreateNewViewFromMainView(set(view)));
	return view;
}

template <typename T> EventRegistrationToken impl_ICoreApplicationUnhandledError<T>::UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICoreApplicationUnhandledError const &>(static_cast<T const &>(*this))->add_UnhandledErrorDetected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreApplicationUnhandledError<T>::UnhandledErrorDetected(F handler) const
{
	return UnhandledErrorDetected(Windows::Foundation::EventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>(handler));
}

template <typename T> void impl_ICoreApplicationUnhandledError<T>::UnhandledErrorDetected(EventRegistrationToken const token) const
{
	check(static_cast<ICoreApplicationUnhandledError const &>(static_cast<T const &>(*this))->remove_UnhandledErrorDetected(token));
}

template <typename T> Windows::UI::Core::CoreWindow impl_ICoreApplicationView<T>::CoreWindow() const
{
	Windows::UI::Core::CoreWindow value(nullptr);
	check(static_cast<ICoreApplicationView const &>(static_cast<T const &>(*this))->get_CoreWindow(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_ICoreApplicationView<T>::Activated(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Activation::IActivatedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICoreApplicationView const &>(static_cast<T const &>(*this))->add_Activated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreApplicationView<T>::Activated(F handler) const
{
	return Activated(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Activation::IActivatedEventArgs>(handler));
}

template <typename T> void impl_ICoreApplicationView<T>::Activated(EventRegistrationToken const token) const
{
	check(static_cast<ICoreApplicationView const &>(static_cast<T const &>(*this))->remove_Activated(token));
}

template <typename T> bool impl_ICoreApplicationView<T>::IsMain() const
{
	bool value = {};
	check(static_cast<ICoreApplicationView const &>(static_cast<T const &>(*this))->get_IsMain(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ICoreApplicationView<T>::IsHosted() const
{
	bool value = {};
	check(static_cast<ICoreApplicationView const &>(static_cast<T const &>(*this))->get_IsHosted(BoolProxy(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICoreApplicationView2<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value(nullptr);
	check(static_cast<ICoreApplicationView2 const &>(static_cast<T const &>(*this))->get_Dispatcher(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::UnhandledError impl_IUnhandledErrorDetectedEventArgs<T>::UnhandledError() const
{
	Windows::ApplicationModel::Core::UnhandledError value(nullptr);
	check(static_cast<IUnhandledErrorDetectedEventArgs const &>(static_cast<T const &>(*this))->get_UnhandledError(set(value)));
	return value;
}

template <typename T> bool impl_IUnhandledError<T>::Handled() const
{
	bool value = {};
	check(static_cast<IUnhandledError const &>(static_cast<T const &>(*this))->get_Handled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IUnhandledError<T>::Propagate() const
{
	check(static_cast<IUnhandledError const &>(static_cast<T const &>(*this))->abi_Propagate());
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

template <typename T> void impl_IDataProviderHandler<T>::Invoke(Windows::ApplicationModel::DataTransfer::DataProviderRequest const & request) const
{
	check(static_cast<IDataProviderHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(request)));
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Text() const
{
	String value = {};
	check(static_cast<IStandardDataFormatsStatics const &>(static_cast<T const &>(*this))->get_Text(set(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Html() const
{
	String value = {};
	check(static_cast<IStandardDataFormatsStatics const &>(static_cast<T const &>(*this))->get_Html(set(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Rtf() const
{
	String value = {};
	check(static_cast<IStandardDataFormatsStatics const &>(static_cast<T const &>(*this))->get_Rtf(set(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Bitmap() const
{
	String value = {};
	check(static_cast<IStandardDataFormatsStatics const &>(static_cast<T const &>(*this))->get_Bitmap(set(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::StorageItems() const
{
	String value = {};
	check(static_cast<IStandardDataFormatsStatics const &>(static_cast<T const &>(*this))->get_StorageItems(set(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics2<T>::WebLink() const
{
	String value = {};
	check(static_cast<IStandardDataFormatsStatics2 const &>(static_cast<T const &>(*this))->get_WebLink(set(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics2<T>::ApplicationLink() const
{
	String value = {};
	check(static_cast<IStandardDataFormatsStatics2 const &>(static_cast<T const &>(*this))->get_ApplicationLink(set(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView<T>::Title() const
{
	String value = {};
	check(static_cast<IDataPackagePropertySetView const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView<T>::Description() const
{
	String value = {};
	check(static_cast<IDataPackagePropertySetView const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IDataPackagePropertySetView<T>::Thumbnail() const
{
	Windows::Storage::Streams::RandomAccessStreamReference value(nullptr);
	check(static_cast<IDataPackagePropertySetView const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDataPackagePropertySetView<T>::FileTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IDataPackagePropertySetView const &>(static_cast<T const &>(*this))->get_FileTypes(set(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView<T>::ApplicationName() const
{
	String value = {};
	check(static_cast<IDataPackagePropertySetView const &>(static_cast<T const &>(*this))->get_ApplicationName(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySetView<T>::ApplicationListingUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IDataPackagePropertySetView const &>(static_cast<T const &>(*this))->get_ApplicationListingUri(set(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView2<T>::PackageFamilyName() const
{
	String value = {};
	check(static_cast<IDataPackagePropertySetView2 const &>(static_cast<T const &>(*this))->get_PackageFamilyName(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySetView2<T>::ContentSourceWebLink() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IDataPackagePropertySetView2 const &>(static_cast<T const &>(*this))->get_ContentSourceWebLink(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySetView2<T>::ContentSourceApplicationLink() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IDataPackagePropertySetView2 const &>(static_cast<T const &>(*this))->get_ContentSourceApplicationLink(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDataPackagePropertySetView2<T>::Square30x30Logo() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value = {};
	check(static_cast<IDataPackagePropertySetView2 const &>(static_cast<T const &>(*this))->get_Square30x30Logo(set(value)));
	return value;
}

template <typename T> Windows::UI::Color impl_IDataPackagePropertySetView2<T>::LogoBackgroundColor() const
{
	Windows::UI::Color value = {};
	check(static_cast<IDataPackagePropertySetView2 const &>(static_cast<T const &>(*this))->get_LogoBackgroundColor(&value));
	return value;
}

template <typename T> String impl_IDataPackagePropertySet<T>::Title() const
{
	String value = {};
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::Title(String const & value) const
{
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDataPackagePropertySet<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> String impl_IDataPackagePropertySet<T>::Description() const
{
	String value = {};
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::Description(String const & value) const
{
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->put_Description(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDataPackagePropertySet<T>::Description(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->put_Description(StringReference(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDataPackagePropertySet<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value = {};
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->put_Thumbnail(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDataPackagePropertySet<T>::FileTypes() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->get_FileTypes(set(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySet<T>::ApplicationName() const
{
	String value = {};
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->get_ApplicationName(set(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::ApplicationName(String const & value) const
{
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->put_ApplicationName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDataPackagePropertySet<T>::ApplicationName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->put_ApplicationName(StringReference(value)));
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySet<T>::ApplicationListingUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->get_ApplicationListingUri(set(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::ApplicationListingUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IDataPackagePropertySet const &>(static_cast<T const &>(*this))->put_ApplicationListingUri(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySet2<T>::ContentSourceWebLink() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->get_ContentSourceWebLink(set(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::ContentSourceWebLink(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->put_ContentSourceWebLink(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySet2<T>::ContentSourceApplicationLink() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->get_ContentSourceApplicationLink(set(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::ContentSourceApplicationLink(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->put_ContentSourceApplicationLink(get(value)));
}

template <typename T> String impl_IDataPackagePropertySet2<T>::PackageFamilyName() const
{
	String value = {};
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->get_PackageFamilyName(set(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::PackageFamilyName(String const & value) const
{
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->put_PackageFamilyName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDataPackagePropertySet2<T>::PackageFamilyName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->put_PackageFamilyName(StringReference(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDataPackagePropertySet2<T>::Square30x30Logo() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value = {};
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->get_Square30x30Logo(set(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::Square30x30Logo(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->put_Square30x30Logo(get(value)));
}

template <typename T> Windows::UI::Color impl_IDataPackagePropertySet2<T>::LogoBackgroundColor() const
{
	Windows::UI::Color value = {};
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->get_LogoBackgroundColor(&value));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::LogoBackgroundColor(Windows::UI::Color const & value) const
{
	check(static_cast<IDataPackagePropertySet2 const &>(static_cast<T const &>(*this))->put_LogoBackgroundColor(value));
}

template <typename T> void impl_IDataProviderDeferral<T>::Complete() const
{
	check(static_cast<IDataProviderDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> String impl_IDataProviderRequest<T>::FormatId() const
{
	String value = {};
	check(static_cast<IDataProviderRequest const &>(static_cast<T const &>(*this))->get_FormatId(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IDataProviderRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IDataProviderRequest const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataProviderDeferral impl_IDataProviderRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::DataTransfer::DataProviderDeferral value(nullptr);
	check(static_cast<IDataProviderRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(value)));
	return value;
}

template <typename T> void impl_IDataProviderRequest<T>::SetData(IInspectable const & value) const
{
	check(static_cast<IDataProviderRequest const &>(static_cast<T const &>(*this))->abi_SetData(get(value)));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IOperationCompletedEventArgs<T>::Operation() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check(static_cast<IOperationCompletedEventArgs const &>(static_cast<T const &>(*this))->get_Operation(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView impl_IDataPackageView<T>::Properties() const
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView value(nullptr);
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IDataPackageView<T>::RequestedOperation() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->get_RequestedOperation(&value));
	return value;
}

template <typename T> void impl_IDataPackageView<T>::ReportOperationCompleted(Windows::ApplicationModel::DataTransfer::DataPackageOperation const value) const
{
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_ReportOperationCompleted(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDataPackageView<T>::AvailableFormats() const
{
	Windows::Foundation::Collections::IVectorView<String> formatIds = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->get_AvailableFormats(set(formatIds)));
	return formatIds;
}

template <typename T> bool impl_IDataPackageView<T>::Contains(String const & formatId) const
{
	bool value = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_Contains(get(formatId), BoolProxy(value)));
	return value;
}

template <typename T> template <unsigned S0> bool impl_IDataPackageView<T>::Contains(wchar_t const (&formatId)[S0]) const
{
	bool value = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_Contains(StringReference(formatId), BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<IInspectable> impl_IDataPackageView<T>::GetDataAsync(String const & formatId) const
{
	Windows::Foundation::IAsyncOperation<IInspectable> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetDataAsync(get(formatId), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<IInspectable> impl_IDataPackageView<T>::GetDataAsync(wchar_t const (&formatId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<IInspectable> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetDataAsync(StringReference(formatId), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetTextAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetTextAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetTextAsync(String const & formatId) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetCustomTextAsync(get(formatId), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetTextAsync(wchar_t const (&formatId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetCustomTextAsync(StringReference(formatId), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetHtmlFormatAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetHtmlFormatAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Storage::Streams::RandomAccessStreamReference>> impl_IDataPackageView<T>::GetResourceMapAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Storage::Streams::RandomAccessStreamReference>> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetResourceMapAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetRtfAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetRtfAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> impl_IDataPackageView<T>::GetBitmapAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetBitmapAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IDataPackageView<T>::GetStorageItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation = {};
	check(static_cast<IDataPackageView const &>(static_cast<T const &>(*this))->abi_GetStorageItemsAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IDataPackageView2<T>::GetApplicationLinkAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation = {};
	check(static_cast<IDataPackageView2 const &>(static_cast<T const &>(*this))->abi_GetApplicationLinkAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IDataPackageView2<T>::GetWebLinkAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation = {};
	check(static_cast<IDataPackageView2 const &>(static_cast<T const &>(*this))->abi_GetWebLinkAsync(set(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_IDataPackage<T>::GetView() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView value(nullptr);
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_GetView(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackagePropertySet impl_IDataPackage<T>::Properties() const
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet value(nullptr);
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IDataPackage<T>::RequestedOperation() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->get_RequestedOperation(&value));
	return value;
}

template <typename T> void impl_IDataPackage<T>::RequestedOperation(Windows::ApplicationModel::DataTransfer::DataPackageOperation const value) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->put_RequestedOperation(value));
}

template <typename T> EventRegistrationToken impl_IDataPackage<T>::OperationCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs> const & handler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->add_OperationCompleted(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDataPackage<T>::OperationCompleted(F handler) const
{
	return OperationCompleted(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs>(handler));
}

template <typename T> void impl_IDataPackage<T>::OperationCompleted(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->remove_OperationCompleted(eventCookie));
}

template <typename T> EventRegistrationToken impl_IDataPackage<T>::Destroyed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, IInspectable> const & handler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->add_Destroyed(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDataPackage<T>::Destroyed(F handler) const
{
	return Destroyed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, IInspectable>(handler));
}

template <typename T> void impl_IDataPackage<T>::Destroyed(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->remove_Destroyed(eventCookie));
}

template <typename T> void impl_IDataPackage<T>::SetData(String const & formatId, IInspectable const & value) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetData(get(formatId), get(value)));
}

template <typename T> template <unsigned S0> void impl_IDataPackage<T>::SetData(wchar_t const (&formatId)[S0], IInspectable const & value) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetData(StringReference(formatId), get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetDataProvider(String const & formatId, Windows::ApplicationModel::DataTransfer::IDataProviderHandler const & delayRenderer) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetDataProvider(get(formatId), get(delayRenderer)));
}

template <typename T> template <unsigned S0> void impl_IDataPackage<T>::SetDataProvider(wchar_t const (&formatId)[S0], Windows::ApplicationModel::DataTransfer::IDataProviderHandler const & delayRenderer) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetDataProvider(StringReference(formatId), get(delayRenderer)));
}

template <typename T> template <typename F> void impl_IDataPackage<T>::SetDataProvider(String const & formatId, F delayRenderer) const
{
	SetDataProvider(formatId, Windows::ApplicationModel::DataTransfer::DataProviderHandler(delayRenderer));
}

template <typename T> template <unsigned S0, typename F> void impl_IDataPackage<T>::SetDataProvider(wchar_t const (&formatId)[S0], F delayRenderer) const
{
	SetDataProvider(formatId, Windows::ApplicationModel::DataTransfer::DataProviderHandler(delayRenderer));
}

template <typename T> void impl_IDataPackage<T>::SetText(String const & value) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDataPackage<T>::SetText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetText(StringReference(value)));
}

template <typename T> void impl_IDataPackage<T>::SetHtmlFormat(String const & value) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetHtmlFormat(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDataPackage<T>::SetHtmlFormat(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetHtmlFormat(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::Storage::Streams::RandomAccessStreamReference> impl_IDataPackage<T>::ResourceMap() const
{
	Windows::Foundation::Collections::IMap<String, Windows::Storage::Streams::RandomAccessStreamReference> value = {};
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->get_ResourceMap(set(value)));
	return value;
}

template <typename T> void impl_IDataPackage<T>::SetRtf(String const & value) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetRtf(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDataPackage<T>::SetRtf(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetRtf(StringReference(value)));
}

template <typename T> void impl_IDataPackage<T>::SetBitmap(Windows::Storage::Streams::RandomAccessStreamReference const & value) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetBitmap(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetStorageItemsReadOnly(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value, bool const readOnly) const
{
	check(static_cast<IDataPackage const &>(static_cast<T const &>(*this))->abi_SetStorageItems(get(value), readOnly));
}

template <typename T> void impl_IDataPackage2<T>::SetApplicationLink(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IDataPackage2 const &>(static_cast<T const &>(*this))->abi_SetApplicationLink(get(value)));
}

template <typename T> void impl_IDataPackage2<T>::SetWebLink(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IDataPackage2 const &>(static_cast<T const &>(*this))->abi_SetWebLink(get(value)));
}

template <typename T> String impl_IHtmlFormatHelperStatics<T>::GetStaticFragment(String const & htmlFormat) const
{
	String htmlFragment = {};
	check(static_cast<IHtmlFormatHelperStatics const &>(static_cast<T const &>(*this))->abi_GetStaticFragment(get(htmlFormat), set(htmlFragment)));
	return htmlFragment;
}

template <typename T> template <unsigned S0> String impl_IHtmlFormatHelperStatics<T>::GetStaticFragment(wchar_t const (&htmlFormat)[S0]) const
{
	String htmlFragment = {};
	check(static_cast<IHtmlFormatHelperStatics const &>(static_cast<T const &>(*this))->abi_GetStaticFragment(StringReference(htmlFormat), set(htmlFragment)));
	return htmlFragment;
}

template <typename T> String impl_IHtmlFormatHelperStatics<T>::CreateHtmlFormat(String const & htmlFragment) const
{
	String htmlFormat = {};
	check(static_cast<IHtmlFormatHelperStatics const &>(static_cast<T const &>(*this))->abi_CreateHtmlFormat(get(htmlFragment), set(htmlFormat)));
	return htmlFormat;
}

template <typename T> template <unsigned S0> String impl_IHtmlFormatHelperStatics<T>::CreateHtmlFormat(wchar_t const (&htmlFragment)[S0]) const
{
	String htmlFormat = {};
	check(static_cast<IHtmlFormatHelperStatics const &>(static_cast<T const &>(*this))->abi_CreateHtmlFormat(StringReference(htmlFragment), set(htmlFormat)));
	return htmlFormat;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_IClipboardStatics<T>::GetContent() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView content(nullptr);
	check(static_cast<IClipboardStatics const &>(static_cast<T const &>(*this))->abi_GetContent(set(content)));
	return content;
}

template <typename T> void impl_IClipboardStatics<T>::SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content) const
{
	check(static_cast<IClipboardStatics const &>(static_cast<T const &>(*this))->abi_SetContent(get(content)));
}

template <typename T> void impl_IClipboardStatics<T>::Flush() const
{
	check(static_cast<IClipboardStatics const &>(static_cast<T const &>(*this))->abi_Flush());
}

template <typename T> void impl_IClipboardStatics<T>::Clear() const
{
	check(static_cast<IClipboardStatics const &>(static_cast<T const &>(*this))->abi_Clear());
}

template <typename T> EventRegistrationToken impl_IClipboardStatics<T>::ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClipboardStatics const &>(static_cast<T const &>(*this))->add_ContentChanged(get(changeHandler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClipboardStatics<T>::ContentChanged(F changeHandler) const
{
	return ContentChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

template <typename T> void impl_IClipboardStatics<T>::ContentChanged(EventRegistrationToken const token) const
{
	check(static_cast<IClipboardStatics const &>(static_cast<T const &>(*this))->remove_ContentChanged(token));
}

template <typename T> void impl_IDataRequestDeferral<T>::Complete() const
{
	check(static_cast<IDataRequestDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackage impl_IDataRequest<T>::Data() const
{
	Windows::ApplicationModel::DataTransfer::DataPackage value(nullptr);
	check(static_cast<IDataRequest const &>(static_cast<T const &>(*this))->get_Data(set(value)));
	return value;
}

template <typename T> void impl_IDataRequest<T>::Data(Windows::ApplicationModel::DataTransfer::DataPackage const & value) const
{
	check(static_cast<IDataRequest const &>(static_cast<T const &>(*this))->put_Data(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_IDataRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IDataRequest const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IDataRequest<T>::FailWithDisplayText(String const & value) const
{
	check(static_cast<IDataRequest const &>(static_cast<T const &>(*this))->abi_FailWithDisplayText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDataRequest<T>::FailWithDisplayText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDataRequest const &>(static_cast<T const &>(*this))->abi_FailWithDisplayText(StringReference(value)));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataRequestDeferral impl_IDataRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::DataTransfer::DataRequestDeferral value(nullptr);
	check(static_cast<IDataRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataRequest impl_IDataRequestedEventArgs<T>::Request() const
{
	Windows::ApplicationModel::DataTransfer::DataRequest value(nullptr);
	check(static_cast<IDataRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> String impl_ITargetApplicationChosenEventArgs<T>::ApplicationName() const
{
	String value = {};
	check(static_cast<ITargetApplicationChosenEventArgs const &>(static_cast<T const &>(*this))->get_ApplicationName(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IDataTransferManager<T>::DataRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IDataTransferManager const &>(static_cast<T const &>(*this))->add_DataRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDataTransferManager<T>::DataRequested(F eventHandler) const
{
	return DataRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IDataTransferManager<T>::DataRequested(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IDataTransferManager const &>(static_cast<T const &>(*this))->remove_DataRequested(eventCookie));
}

template <typename T> EventRegistrationToken impl_IDataTransferManager<T>::TargetApplicationChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IDataTransferManager const &>(static_cast<T const &>(*this))->add_TargetApplicationChosen(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDataTransferManager<T>::TargetApplicationChosen(F eventHandler) const
{
	return TargetApplicationChosen(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs>(eventHandler));
}

template <typename T> void impl_IDataTransferManager<T>::TargetApplicationChosen(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IDataTransferManager const &>(static_cast<T const &>(*this))->remove_TargetApplicationChosen(eventCookie));
}

template <typename T> void impl_IDataTransferManagerStatics<T>::ShowShareUI() const
{
	check(static_cast<IDataTransferManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowShareUI());
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataTransferManager impl_IDataTransferManagerStatics<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::DataTransfer::DataTransferManager value(nullptr);
	check(static_cast<IDataTransferManagerStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

template <typename T> String impl_IQuickLink<T>::Title() const
{
	String value = {};
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IQuickLink<T>::Title(String const & value) const
{
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IQuickLink<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IQuickLink<T>::Thumbnail() const
{
	Windows::Storage::Streams::RandomAccessStreamReference value(nullptr);
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> void impl_IQuickLink<T>::Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const
{
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->put_Thumbnail(get(value)));
}

template <typename T> String impl_IQuickLink<T>::Id() const
{
	String value = {};
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> void impl_IQuickLink<T>::Id(String const & value) const
{
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> template <unsigned S0> void impl_IQuickLink<T>::Id(wchar_t const (&value)[S0]) const
{
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->put_Id(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQuickLink<T>::SupportedDataFormats() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->get_SupportedDataFormats(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQuickLink<T>::SupportedFileTypes() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IQuickLink const &>(static_cast<T const &>(*this))->get_SupportedFileTypes(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_IShareOperation<T>::Data() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView value(nullptr);
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->get_Data(set(value)));
	return value;
}

template <typename T> String impl_IShareOperation<T>::QuickLinkId() const
{
	String value = {};
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->get_QuickLinkId(set(value)));
	return value;
}

template <typename T> void impl_IShareOperation<T>::RemoveThisQuickLink() const
{
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->abi_RemoveThisQuickLink());
}

template <typename T> void impl_IShareOperation<T>::ReportStarted() const
{
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->abi_ReportStarted());
}

template <typename T> void impl_IShareOperation<T>::ReportDataRetrieved() const
{
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->abi_ReportDataRetrieved());
}

template <typename T> void impl_IShareOperation<T>::ReportSubmittedBackgroundTask() const
{
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->abi_ReportSubmittedBackgroundTask());
}

template <typename T> void impl_IShareOperation<T>::ReportCompleted(Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink const & quicklink) const
{
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->abi_ReportCompletedWithQuickLink(get(quicklink)));
}

template <typename T> void impl_IShareOperation<T>::ReportCompleted() const
{
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->abi_ReportCompleted());
}

template <typename T> void impl_IShareOperation<T>::ReportError(String const & value) const
{
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->abi_ReportError(get(value)));
}

template <typename T> template <unsigned S0> void impl_IShareOperation<T>::ReportError(wchar_t const (&value)[S0]) const
{
	check(static_cast<IShareOperation const &>(static_cast<T const &>(*this))->abi_ReportError(StringReference(value)));
}

template <typename T> void impl_IShareOperation2<T>::DismissUI() const
{
	check(static_cast<IShareOperation2 const &>(static_cast<T const &>(*this))->abi_DismissUI());
}

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Infrastructure {

template <typename T> Windows::UI::Core::CoreWindow impl_ISetWindowWithWindowFactory<T>::SetWindow(Windows::UI::Core::ICoreWindowFactory const & windowFactory) const
{
	Windows::UI::Core::CoreWindow window(nullptr);
	check(static_cast<ISetWindowWithWindowFactory const &>(static_cast<T const &>(*this))->abi_SetWindow(get(windowFactory), set(window)));
	return window;
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

template <typename T> String impl_IResourceLoader<T>::GetString(String const & resource) const
{
	String value = {};
	check(static_cast<IResourceLoader const &>(static_cast<T const &>(*this))->abi_GetString(get(resource), set(value)));
	return value;
}

template <typename T> template <unsigned S0> String impl_IResourceLoader<T>::GetString(wchar_t const (&resource)[S0]) const
{
	String value = {};
	check(static_cast<IResourceLoader const &>(static_cast<T const &>(*this))->abi_GetString(StringReference(resource), set(value)));
	return value;
}

template <typename T> String impl_IResourceLoader2<T>::GetStringForUri(Windows::Foundation::Uri const & uri) const
{
	String value = {};
	check(static_cast<IResourceLoader2 const &>(static_cast<T const &>(*this))->abi_GetStringForUri(get(uri), set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader(nullptr);
	check(static_cast<IResourceLoaderStatics2 const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(loader)));
	return loader;
}

template <typename T> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForCurrentView(String const & name) const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader(nullptr);
	check(static_cast<IResourceLoaderStatics2 const &>(static_cast<T const &>(*this))->abi_GetForCurrentViewWithName(get(name), set(loader)));
	return loader;
}

template <typename T> template <unsigned S0> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForCurrentView(wchar_t const (&name)[S0]) const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader(nullptr);
	check(static_cast<IResourceLoaderStatics2 const &>(static_cast<T const &>(*this))->abi_GetForCurrentViewWithName(StringReference(name), set(loader)));
	return loader;
}

template <typename T> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForViewIndependentUse() const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader(nullptr);
	check(static_cast<IResourceLoaderStatics2 const &>(static_cast<T const &>(*this))->abi_GetForViewIndependentUse(set(loader)));
	return loader;
}

template <typename T> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForViewIndependentUse(String const & name) const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader(nullptr);
	check(static_cast<IResourceLoaderStatics2 const &>(static_cast<T const &>(*this))->abi_GetForViewIndependentUseWithName(get(name), set(loader)));
	return loader;
}

template <typename T> template <unsigned S0> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForViewIndependentUse(wchar_t const (&name)[S0]) const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader(nullptr);
	check(static_cast<IResourceLoaderStatics2 const &>(static_cast<T const &>(*this))->abi_GetForViewIndependentUseWithName(StringReference(name), set(loader)));
	return loader;
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceMap impl_IResourceManager<T>::MainResourceMap() const
{
	Windows::ApplicationModel::Resources::Core::ResourceMap value(nullptr);
	check(static_cast<IResourceManager const &>(static_cast<T const &>(*this))->get_MainResourceMap(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap> impl_IResourceManager<T>::AllResourceMaps() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap> maps = {};
	check(static_cast<IResourceManager const &>(static_cast<T const &>(*this))->get_AllResourceMaps(set(maps)));
	return maps;
}

template <typename T> void impl_IResourceManager<T>::LoadPriFiles(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFile> const & files) const
{
	check(static_cast<IResourceManager const &>(static_cast<T const &>(*this))->abi_LoadPriFiles(get(files)));
}

template <typename T> void impl_IResourceManager<T>::UnloadPriFiles(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFile> const & files) const
{
	check(static_cast<IResourceManager const &>(static_cast<T const &>(*this))->abi_UnloadPriFiles(get(files)));
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceManager impl_IResourceManagerStatics<T>::Current() const
{
	Windows::ApplicationModel::Resources::Core::ResourceManager value(nullptr);
	check(static_cast<IResourceManagerStatics const &>(static_cast<T const &>(*this))->get_Current(set(value)));
	return value;
}

template <typename T> bool impl_IResourceManagerStatics<T>::IsResourceReference(String const & resourceReference) const
{
	bool isReference = {};
	check(static_cast<IResourceManagerStatics const &>(static_cast<T const &>(*this))->abi_IsResourceReference(get(resourceReference), BoolProxy(isReference)));
	return isReference;
}

template <typename T> template <unsigned S0> bool impl_IResourceManagerStatics<T>::IsResourceReference(wchar_t const (&resourceReference)[S0]) const
{
	bool isReference = {};
	check(static_cast<IResourceManagerStatics const &>(static_cast<T const &>(*this))->abi_IsResourceReference(StringReference(resourceReference), BoolProxy(isReference)));
	return isReference;
}

template <typename T> String impl_IResourceQualifier<T>::QualifierName() const
{
	String value = {};
	check(static_cast<IResourceQualifier const &>(static_cast<T const &>(*this))->get_QualifierName(set(value)));
	return value;
}

template <typename T> String impl_IResourceQualifier<T>::QualifierValue() const
{
	String value = {};
	check(static_cast<IResourceQualifier const &>(static_cast<T const &>(*this))->get_QualifierValue(set(value)));
	return value;
}

template <typename T> bool impl_IResourceQualifier<T>::IsDefault() const
{
	bool value = {};
	check(static_cast<IResourceQualifier const &>(static_cast<T const &>(*this))->get_IsDefault(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IResourceQualifier<T>::IsMatch() const
{
	bool value = {};
	check(static_cast<IResourceQualifier const &>(static_cast<T const &>(*this))->get_IsMatch(BoolProxy(value)));
	return value;
}

template <typename T> double impl_IResourceQualifier<T>::Score() const
{
	double value = {};
	check(static_cast<IResourceQualifier const &>(static_cast<T const &>(*this))->get_Score(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IObservableMap<String, String> impl_IResourceContext<T>::QualifierValues() const
{
	Windows::Foundation::Collections::IObservableMap<String, String> value = {};
	check(static_cast<IResourceContext const &>(static_cast<T const &>(*this))->get_QualifierValues(set(value)));
	return value;
}

template <typename T> void impl_IResourceContext<T>::Reset() const
{
	check(static_cast<IResourceContext const &>(static_cast<T const &>(*this))->abi_Reset());
}

template <typename T> void impl_IResourceContext<T>::Reset(Windows::Foundation::Collections::IIterable<String> const & qualifierNames) const
{
	check(static_cast<IResourceContext const &>(static_cast<T const &>(*this))->abi_ResetQualifierValues(get(qualifierNames)));
}

template <typename T> void impl_IResourceContext<T>::OverrideToMatch(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Resources::Core::ResourceQualifier> const & result) const
{
	check(static_cast<IResourceContext const &>(static_cast<T const &>(*this))->abi_OverrideToMatch(get(result)));
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceContext impl_IResourceContext<T>::Clone() const
{
	Windows::ApplicationModel::Resources::Core::ResourceContext clone(nullptr);
	check(static_cast<IResourceContext const &>(static_cast<T const &>(*this))->abi_Clone(set(clone)));
	return clone;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IResourceContext<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IResourceContext const &>(static_cast<T const &>(*this))->get_Languages(set(value)));
	return value;
}

template <typename T> void impl_IResourceContext<T>::Languages(Windows::Foundation::Collections::IVectorView<String> const & languages) const
{
	check(static_cast<IResourceContext const &>(static_cast<T const &>(*this))->put_Languages(get(languages)));
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceContext impl_IResourceContextStatics2<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::Resources::Core::ResourceContext value(nullptr);
	check(static_cast<IResourceContextStatics2 const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(value)));
	return value;
}

template <typename T> void impl_IResourceContextStatics2<T>::SetGlobalQualifierValue(String const & key, String const & value) const
{
	check(static_cast<IResourceContextStatics2 const &>(static_cast<T const &>(*this))->abi_SetGlobalQualifierValue(get(key), get(value)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IResourceContextStatics2<T>::SetGlobalQualifierValue(wchar_t const (&key)[S0], wchar_t const (&value)[S1]) const
{
	check(static_cast<IResourceContextStatics2 const &>(static_cast<T const &>(*this))->abi_SetGlobalQualifierValue(StringReference(key), StringReference(value)));
}

template <typename T> void impl_IResourceContextStatics2<T>::ResetGlobalQualifierValues() const
{
	check(static_cast<IResourceContextStatics2 const &>(static_cast<T const &>(*this))->abi_ResetGlobalQualifierValues());
}

template <typename T> void impl_IResourceContextStatics2<T>::ResetGlobalQualifierValues(Windows::Foundation::Collections::IIterable<String> const & qualifierNames) const
{
	check(static_cast<IResourceContextStatics2 const &>(static_cast<T const &>(*this))->abi_ResetGlobalQualifierValuesForSpecifiedQualifiers(get(qualifierNames)));
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceContext impl_IResourceContextStatics2<T>::GetForViewIndependentUse() const
{
	Windows::ApplicationModel::Resources::Core::ResourceContext loader(nullptr);
	check(static_cast<IResourceContextStatics2 const &>(static_cast<T const &>(*this))->abi_GetForViewIndependentUse(set(loader)));
	return loader;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier> impl_IResourceCandidate<T>::Qualifiers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier> value = {};
	check(static_cast<IResourceCandidate const &>(static_cast<T const &>(*this))->get_Qualifiers(set(value)));
	return value;
}

template <typename T> bool impl_IResourceCandidate<T>::IsMatch() const
{
	bool value = {};
	check(static_cast<IResourceCandidate const &>(static_cast<T const &>(*this))->get_IsMatch(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IResourceCandidate<T>::IsMatchAsDefault() const
{
	bool value = {};
	check(static_cast<IResourceCandidate const &>(static_cast<T const &>(*this))->get_IsMatchAsDefault(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IResourceCandidate<T>::IsDefault() const
{
	bool value = {};
	check(static_cast<IResourceCandidate const &>(static_cast<T const &>(*this))->get_IsDefault(BoolProxy(value)));
	return value;
}

template <typename T> String impl_IResourceCandidate<T>::ValueAsString() const
{
	String result = {};
	check(static_cast<IResourceCandidate const &>(static_cast<T const &>(*this))->get_ValueAsString(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IResourceCandidate<T>::GetValueAsFileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IResourceCandidate const &>(static_cast<T const &>(*this))->abi_GetValueAsFileAsync(set(operation)));
	return operation;
}

template <typename T> String impl_IResourceCandidate<T>::GetQualifierValue(String const & qualifierName) const
{
	String value = {};
	check(static_cast<IResourceCandidate const &>(static_cast<T const &>(*this))->abi_GetQualifierValue(get(qualifierName), set(value)));
	return value;
}

template <typename T> template <unsigned S0> String impl_IResourceCandidate<T>::GetQualifierValue(wchar_t const (&qualifierName)[S0]) const
{
	String value = {};
	check(static_cast<IResourceCandidate const &>(static_cast<T const &>(*this))->abi_GetQualifierValue(StringReference(qualifierName), set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_INamedResource<T>::Uri() const
{
	Windows::Foundation::Uri uri(nullptr);
	check(static_cast<INamedResource const &>(static_cast<T const &>(*this))->get_Uri(set(uri)));
	return uri;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> impl_INamedResource<T>::Candidates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> value = {};
	check(static_cast<INamedResource const &>(static_cast<T const &>(*this))->get_Candidates(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceCandidate impl_INamedResource<T>::Resolve(Windows::ApplicationModel::Resources::Core::ResourceContext const & resourceContext) const
{
	Windows::ApplicationModel::Resources::Core::ResourceCandidate result(nullptr);
	check(static_cast<INamedResource const &>(static_cast<T const &>(*this))->abi_ResolveForContext(get(resourceContext), set(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> impl_INamedResource<T>::ResolveAll(Windows::ApplicationModel::Resources::Core::ResourceContext const & resourceContext) const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> instances = {};
	check(static_cast<INamedResource const &>(static_cast<T const &>(*this))->abi_ResolveAllForContext(get(resourceContext), set(instances)));
	return instances;
}

template <typename T> Windows::Foundation::Uri impl_IResourceMap<T>::Uri() const
{
	Windows::Foundation::Uri uri(nullptr);
	check(static_cast<IResourceMap const &>(static_cast<T const &>(*this))->get_Uri(set(uri)));
	return uri;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceCandidate impl_IResourceMap<T>::GetValue(String const & resource, Windows::ApplicationModel::Resources::Core::ResourceContext const & context) const
{
	Windows::ApplicationModel::Resources::Core::ResourceCandidate value(nullptr);
	check(static_cast<IResourceMap const &>(static_cast<T const &>(*this))->abi_GetValueForContext(get(resource), get(context), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::ApplicationModel::Resources::Core::ResourceCandidate impl_IResourceMap<T>::GetValue(wchar_t const (&resource)[S0], Windows::ApplicationModel::Resources::Core::ResourceContext const & context) const
{
	Windows::ApplicationModel::Resources::Core::ResourceCandidate value(nullptr);
	check(static_cast<IResourceMap const &>(static_cast<T const &>(*this))->abi_GetValueForContext(StringReference(resource), get(context), set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceMap impl_IResourceMap<T>::GetSubtree(String const & reference) const
{
	Windows::ApplicationModel::Resources::Core::ResourceMap map(nullptr);
	check(static_cast<IResourceMap const &>(static_cast<T const &>(*this))->abi_GetSubtree(get(reference), set(map)));
	return map;
}

template <typename T> template <unsigned S0> Windows::ApplicationModel::Resources::Core::ResourceMap impl_IResourceMap<T>::GetSubtree(wchar_t const (&reference)[S0]) const
{
	Windows::ApplicationModel::Resources::Core::ResourceMap map(nullptr);
	check(static_cast<IResourceMap const &>(static_cast<T const &>(*this))->abi_GetSubtree(StringReference(reference), set(map)));
	return map;
}

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

template <typename T> Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate impl_IResourceIndexer<T>::IndexFilePath(Windows::Foundation::Uri const & filePath) const
{
	Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate candidate(nullptr);
	check(static_cast<IResourceIndexer const &>(static_cast<T const &>(*this))->abi_IndexFilePath(get(filePath), set(candidate)));
	return candidate;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate>> impl_IResourceIndexer<T>::IndexFileContentsAsync(Windows::Foundation::Uri const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate>> operation = {};
	check(static_cast<IResourceIndexer const &>(static_cast<T const &>(*this))->abi_IndexFileContentsAsync(get(file), set(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Resources::Management::ResourceIndexer impl_IResourceIndexerFactory<T>::CreateResourceIndexer(Windows::Foundation::Uri const & projectRoot) const
{
	Windows::ApplicationModel::Resources::Management::ResourceIndexer indexer(nullptr);
	check(static_cast<IResourceIndexerFactory const &>(static_cast<T const &>(*this))->abi_CreateResourceIndexer(get(projectRoot), set(indexer)));
	return indexer;
}

template <typename T> Windows::ApplicationModel::Resources::Management::ResourceIndexer impl_IResourceIndexerFactory2<T>::CreateResourceIndexerWithExtension(Windows::Foundation::Uri const & projectRoot, Windows::Foundation::Uri const & extensionDllPath) const
{
	Windows::ApplicationModel::Resources::Management::ResourceIndexer indexer(nullptr);
	check(static_cast<IResourceIndexerFactory2 const &>(static_cast<T const &>(*this))->abi_CreateResourceIndexerWithExtension(get(projectRoot), get(extensionDllPath), set(indexer)));
	return indexer;
}

template <typename T> String impl_IIndexedResourceQualifier<T>::QualifierName() const
{
	String value = {};
	check(static_cast<IIndexedResourceQualifier const &>(static_cast<T const &>(*this))->get_QualifierName(set(value)));
	return value;
}

template <typename T> String impl_IIndexedResourceQualifier<T>::QualifierValue() const
{
	String value = {};
	check(static_cast<IIndexedResourceQualifier const &>(static_cast<T const &>(*this))->get_QualifierValue(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::Management::IndexedResourceType impl_IIndexedResourceCandidate<T>::Type() const
{
	Windows::ApplicationModel::Resources::Management::IndexedResourceType value = {};
	check(static_cast<IIndexedResourceCandidate const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IIndexedResourceCandidate<T>::Uri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IIndexedResourceCandidate const &>(static_cast<T const &>(*this))->get_Uri(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, String> impl_IIndexedResourceCandidate<T>::Metadata() const
{
	Windows::Foundation::Collections::IMapView<String, String> value = {};
	check(static_cast<IIndexedResourceCandidate const &>(static_cast<T const &>(*this))->get_Metadata(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier> impl_IIndexedResourceCandidate<T>::Qualifiers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier> value = {};
	check(static_cast<IIndexedResourceCandidate const &>(static_cast<T const &>(*this))->get_Qualifiers(set(value)));
	return value;
}

template <typename T> String impl_IIndexedResourceCandidate<T>::ValueAsString() const
{
	String value = {};
	check(static_cast<IIndexedResourceCandidate const &>(static_cast<T const &>(*this))->get_ValueAsString(set(value)));
	return value;
}

template <typename T> String impl_IIndexedResourceCandidate<T>::GetQualifierValue(String const & qualifierName) const
{
	String qualifierValue = {};
	check(static_cast<IIndexedResourceCandidate const &>(static_cast<T const &>(*this))->abi_GetQualifierValue(get(qualifierName), set(qualifierValue)));
	return qualifierValue;
}

template <typename T> template <unsigned S0> String impl_IIndexedResourceCandidate<T>::GetQualifierValue(wchar_t const (&qualifierName)[S0]) const
{
	String qualifierValue = {};
	check(static_cast<IIndexedResourceCandidate const &>(static_cast<T const &>(*this))->abi_GetQualifierValue(StringReference(qualifierName), set(qualifierValue)));
	return qualifierValue;
}

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISearchPaneQueryLinguisticDetails<T>::QueryTextAlternatives() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<ISearchPaneQueryLinguisticDetails const &>(static_cast<T const &>(*this))->get_QueryTextAlternatives(set(value)));
	return value;
}

template <typename T> unsigned impl_ISearchPaneQueryLinguisticDetails<T>::QueryTextCompositionStart() const
{
	unsigned value = {};
	check(static_cast<ISearchPaneQueryLinguisticDetails const &>(static_cast<T const &>(*this))->get_QueryTextCompositionStart(&value));
	return value;
}

template <typename T> unsigned impl_ISearchPaneQueryLinguisticDetails<T>::QueryTextCompositionLength() const
{
	unsigned value = {};
	check(static_cast<ISearchPaneQueryLinguisticDetails const &>(static_cast<T const &>(*this))->get_QueryTextCompositionLength(&value));
	return value;
}

template <typename T> bool impl_ISearchPaneVisibilityChangedEventArgs<T>::Visible() const
{
	bool value = {};
	check(static_cast<ISearchPaneVisibilityChangedEventArgs const &>(static_cast<T const &>(*this))->get_Visible(BoolProxy(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQueryChangedEventArgs<T>::QueryText() const
{
	String value = {};
	check(static_cast<ISearchPaneQueryChangedEventArgs const &>(static_cast<T const &>(*this))->get_QueryText(set(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQueryChangedEventArgs<T>::Language() const
{
	String value = {};
	check(static_cast<ISearchPaneQueryChangedEventArgs const &>(static_cast<T const &>(*this))->get_Language(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails impl_ISearchPaneQueryChangedEventArgs<T>::LinguisticDetails() const
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails value(nullptr);
	check(static_cast<ISearchPaneQueryChangedEventArgs const &>(static_cast<T const &>(*this))->get_LinguisticDetails(set(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQuerySubmittedEventArgs<T>::QueryText() const
{
	String value = {};
	check(static_cast<ISearchPaneQuerySubmittedEventArgs const &>(static_cast<T const &>(*this))->get_QueryText(set(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQuerySubmittedEventArgs<T>::Language() const
{
	String value = {};
	check(static_cast<ISearchPaneQuerySubmittedEventArgs const &>(static_cast<T const &>(*this))->get_Language(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails<T>::LinguisticDetails() const
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails value(nullptr);
	check(static_cast<ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails const &>(static_cast<T const &>(*this))->get_LinguisticDetails(set(value)));
	return value;
}

template <typename T> String impl_ISearchPaneResultSuggestionChosenEventArgs<T>::Tag() const
{
	String value = {};
	check(static_cast<ISearchPaneResultSuggestionChosenEventArgs const &>(static_cast<T const &>(*this))->get_Tag(set(value)));
	return value;
}

template <typename T> unsigned impl_ISearchSuggestionCollection<T>::Size() const
{
	unsigned value = {};
	check(static_cast<ISearchSuggestionCollection const &>(static_cast<T const &>(*this))->get_Size(&value));
	return value;
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendQuerySuggestion(String const & text) const
{
	check(static_cast<ISearchSuggestionCollection const &>(static_cast<T const &>(*this))->abi_AppendQuerySuggestion(get(text)));
}

template <typename T> template <unsigned S0> void impl_ISearchSuggestionCollection<T>::AppendQuerySuggestion(wchar_t const (&text)[S0]) const
{
	check(static_cast<ISearchSuggestionCollection const &>(static_cast<T const &>(*this))->abi_AppendQuerySuggestion(StringReference(text)));
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendQuerySuggestions(Windows::Foundation::Collections::IIterable<String> const & suggestions) const
{
	check(static_cast<ISearchSuggestionCollection const &>(static_cast<T const &>(*this))->abi_AppendQuerySuggestions(get(suggestions)));
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendResultSuggestion(String const & text, String const & detailText, String const & tag, Windows::Storage::Streams::IRandomAccessStreamReference const & image, String const & imageAlternateText) const
{
	check(static_cast<ISearchSuggestionCollection const &>(static_cast<T const &>(*this))->abi_AppendResultSuggestion(get(text), get(detailText), get(tag), get(image), get(imageAlternateText)));
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> void impl_ISearchSuggestionCollection<T>::AppendResultSuggestion(wchar_t const (&text)[S0], wchar_t const (&detailText)[S1], wchar_t const (&tag)[S2], Windows::Storage::Streams::IRandomAccessStreamReference const & image, wchar_t const (&imageAlternateText)[S3]) const
{
	check(static_cast<ISearchSuggestionCollection const &>(static_cast<T const &>(*this))->abi_AppendResultSuggestion(StringReference(text), StringReference(detailText), StringReference(tag), get(image), StringReference(imageAlternateText)));
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendSearchSeparator(String const & label) const
{
	check(static_cast<ISearchSuggestionCollection const &>(static_cast<T const &>(*this))->abi_AppendSearchSeparator(get(label)));
}

template <typename T> template <unsigned S0> void impl_ISearchSuggestionCollection<T>::AppendSearchSeparator(wchar_t const (&label)[S0]) const
{
	check(static_cast<ISearchSuggestionCollection const &>(static_cast<T const &>(*this))->abi_AppendSearchSeparator(StringReference(label)));
}

template <typename T> void impl_ISearchPaneSuggestionsRequestDeferral<T>::Complete() const
{
	check(static_cast<ISearchPaneSuggestionsRequestDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> bool impl_ISearchPaneSuggestionsRequest<T>::IsCanceled() const
{
	bool value = {};
	check(static_cast<ISearchPaneSuggestionsRequest const &>(static_cast<T const &>(*this))->get_IsCanceled(BoolProxy(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchSuggestionCollection impl_ISearchPaneSuggestionsRequest<T>::SearchSuggestionCollection() const
{
	Windows::ApplicationModel::Search::SearchSuggestionCollection collection(nullptr);
	check(static_cast<ISearchPaneSuggestionsRequest const &>(static_cast<T const &>(*this))->get_SearchSuggestionCollection(set(collection)));
	return collection;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral impl_ISearchPaneSuggestionsRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral deferral(nullptr);
	check(static_cast<ISearchPaneSuggestionsRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest impl_ISearchPaneSuggestionsRequestedEventArgs<T>::Request() const
{
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest value(nullptr);
	check(static_cast<ISearchPaneSuggestionsRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> void impl_ILocalContentSuggestionSettings<T>::Enabled(bool const value) const
{
	check(static_cast<ILocalContentSuggestionSettings const &>(static_cast<T const &>(*this))->put_Enabled(value));
}

template <typename T> bool impl_ILocalContentSuggestionSettings<T>::Enabled() const
{
	bool value = {};
	check(static_cast<ILocalContentSuggestionSettings const &>(static_cast<T const &>(*this))->get_Enabled(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Storage::StorageFolder> impl_ILocalContentSuggestionSettings<T>::Locations() const
{
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFolder> value = {};
	check(static_cast<ILocalContentSuggestionSettings const &>(static_cast<T const &>(*this))->get_Locations(set(value)));
	return value;
}

template <typename T> void impl_ILocalContentSuggestionSettings<T>::AqsFilter(String const & value) const
{
	check(static_cast<ILocalContentSuggestionSettings const &>(static_cast<T const &>(*this))->put_AqsFilter(get(value)));
}

template <typename T> template <unsigned S0> void impl_ILocalContentSuggestionSettings<T>::AqsFilter(wchar_t const (&value)[S0]) const
{
	check(static_cast<ILocalContentSuggestionSettings const &>(static_cast<T const &>(*this))->put_AqsFilter(StringReference(value)));
}

template <typename T> String impl_ILocalContentSuggestionSettings<T>::AqsFilter() const
{
	String value = {};
	check(static_cast<ILocalContentSuggestionSettings const &>(static_cast<T const &>(*this))->get_AqsFilter(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ILocalContentSuggestionSettings<T>::PropertiesToMatch() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<ILocalContentSuggestionSettings const &>(static_cast<T const &>(*this))->get_PropertiesToMatch(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPane impl_ISearchPaneStatics<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::Search::SearchPane searchPane(nullptr);
	check(static_cast<ISearchPaneStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(searchPane)));
	return searchPane;
}

template <typename T> void impl_ISearchPaneStaticsWithHideThisApplication<T>::HideThisApplication() const
{
	check(static_cast<ISearchPaneStaticsWithHideThisApplication const &>(static_cast<T const &>(*this))->abi_HideThisApplication());
}

template <typename T> void impl_ISearchPane<T>::SearchHistoryEnabled(bool const value) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->put_SearchHistoryEnabled(value));
}

template <typename T> bool impl_ISearchPane<T>::SearchHistoryEnabled() const
{
	bool value = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->get_SearchHistoryEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISearchPane<T>::SearchHistoryContext(String const & value) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->put_SearchHistoryContext(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISearchPane<T>::SearchHistoryContext(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->put_SearchHistoryContext(StringReference(value)));
}

template <typename T> String impl_ISearchPane<T>::SearchHistoryContext() const
{
	String value = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->get_SearchHistoryContext(set(value)));
	return value;
}

template <typename T> void impl_ISearchPane<T>::PlaceholderText(String const & value) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->put_PlaceholderText(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISearchPane<T>::PlaceholderText(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->put_PlaceholderText(StringReference(value)));
}

template <typename T> String impl_ISearchPane<T>::PlaceholderText() const
{
	String value = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->get_PlaceholderText(set(value)));
	return value;
}

template <typename T> String impl_ISearchPane<T>::QueryText() const
{
	String value = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->get_QueryText(set(value)));
	return value;
}

template <typename T> String impl_ISearchPane<T>::Language() const
{
	String value = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->get_Language(set(value)));
	return value;
}

template <typename T> bool impl_ISearchPane<T>::Visible() const
{
	bool value = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->get_Visible(BoolProxy(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_ISearchPane<T>::VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->add_VisibilityChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISearchPane<T>::VisibilityChanged(F handler) const
{
	return VisibilityChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::VisibilityChanged(EventRegistrationToken const token) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->remove_VisibilityChanged(token));
}

template <typename T> EventRegistrationToken impl_ISearchPane<T>::QueryChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->add_QueryChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISearchPane<T>::QueryChanged(F handler) const
{
	return QueryChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::QueryChanged(EventRegistrationToken const token) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->remove_QueryChanged(token));
}

template <typename T> EventRegistrationToken impl_ISearchPane<T>::SuggestionsRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->add_SuggestionsRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISearchPane<T>::SuggestionsRequested(F handler) const
{
	return SuggestionsRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::SuggestionsRequested(EventRegistrationToken const token) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->remove_SuggestionsRequested(token));
}

template <typename T> EventRegistrationToken impl_ISearchPane<T>::QuerySubmitted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->add_QuerySubmitted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISearchPane<T>::QuerySubmitted(F handler) const
{
	return QuerySubmitted(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::QuerySubmitted(EventRegistrationToken const token) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->remove_QuerySubmitted(token));
}

template <typename T> EventRegistrationToken impl_ISearchPane<T>::ResultSuggestionChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->add_ResultSuggestionChosen(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISearchPane<T>::ResultSuggestionChosen(F handler) const
{
	return ResultSuggestionChosen(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::ResultSuggestionChosen(EventRegistrationToken const token) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->remove_ResultSuggestionChosen(token));
}

template <typename T> void impl_ISearchPane<T>::SetLocalContentSuggestionSettings(Windows::ApplicationModel::Search::LocalContentSuggestionSettings const & settings) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->abi_SetLocalContentSuggestionSettings(get(settings)));
}

template <typename T> void impl_ISearchPane<T>::Show() const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->abi_ShowOverloadDefault());
}

template <typename T> void impl_ISearchPane<T>::Show(String const & query) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->abi_ShowOverloadWithQuery(get(query)));
}

template <typename T> template <unsigned S0> void impl_ISearchPane<T>::Show(wchar_t const (&query)[S0]) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->abi_ShowOverloadWithQuery(StringReference(query)));
}

template <typename T> void impl_ISearchPane<T>::ShowOnKeyboardInput(bool const value) const
{
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->put_ShowOnKeyboardInput(value));
}

template <typename T> bool impl_ISearchPane<T>::ShowOnKeyboardInput() const
{
	bool value = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->get_ShowOnKeyboardInput(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ISearchPane<T>::TrySetQueryText(String const & query) const
{
	bool succeeded = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->abi_TrySetQueryText(get(query), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_ISearchPane<T>::TrySetQueryText(wchar_t const (&query)[S0]) const
{
	bool succeeded = {};
	check(static_cast<ISearchPane const &>(static_cast<T const &>(*this))->abi_TrySetQueryText(StringReference(query), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::ApplicationModel::Search::SearchQueryLinguisticDetails impl_ISearchQueryLinguisticDetailsFactory<T>::CreateInstance(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned const queryTextCompositionStart, unsigned const queryTextCompositionLength) const
{
	Windows::ApplicationModel::Search::SearchQueryLinguisticDetails value(nullptr);
	check(static_cast<ISearchQueryLinguisticDetailsFactory const &>(static_cast<T const &>(*this))->abi_CreateInstance(get(queryTextAlternatives), queryTextCompositionStart, queryTextCompositionLength, set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISearchQueryLinguisticDetails<T>::QueryTextAlternatives() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<ISearchQueryLinguisticDetails const &>(static_cast<T const &>(*this))->get_QueryTextAlternatives(set(value)));
	return value;
}

template <typename T> unsigned impl_ISearchQueryLinguisticDetails<T>::QueryTextCompositionStart() const
{
	unsigned value = {};
	check(static_cast<ISearchQueryLinguisticDetails const &>(static_cast<T const &>(*this))->get_QueryTextCompositionStart(&value));
	return value;
}

template <typename T> unsigned impl_ISearchQueryLinguisticDetails<T>::QueryTextCompositionLength() const
{
	unsigned value = {};
	check(static_cast<ISearchQueryLinguisticDetails const &>(static_cast<T const &>(*this))->get_QueryTextCompositionLength(&value));
	return value;
}

template <typename T> void impl_ISearchSuggestionsRequestDeferral<T>::Complete() const
{
	check(static_cast<ISearchSuggestionsRequestDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> bool impl_ISearchSuggestionsRequest<T>::IsCanceled() const
{
	bool value = {};
	check(static_cast<ISearchSuggestionsRequest const &>(static_cast<T const &>(*this))->get_IsCanceled(BoolProxy(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchSuggestionCollection impl_ISearchSuggestionsRequest<T>::SearchSuggestionCollection() const
{
	Windows::ApplicationModel::Search::SearchSuggestionCollection collection(nullptr);
	check(static_cast<ISearchSuggestionsRequest const &>(static_cast<T const &>(*this))->get_SearchSuggestionCollection(set(collection)));
	return collection;
}

template <typename T> Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral impl_ISearchSuggestionsRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral deferral(nullptr);
	check(static_cast<ISearchSuggestionsRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

template <typename T> void impl_ILicenseChangedEventHandler<T>::Invoke() const
{
	check(static_cast<ILicenseChangedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke());
}

template <typename T> Windows::ApplicationModel::Store::LicenseInformation impl_ICurrentApp<T>::LicenseInformation() const
{
	Windows::ApplicationModel::Store::LicenseInformation value(nullptr);
	check(static_cast<ICurrentApp const &>(static_cast<T const &>(*this))->get_LicenseInformation(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ICurrentApp<T>::LinkUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ICurrentApp const &>(static_cast<T const &>(*this))->get_LinkUri(set(value)));
	return value;
}

template <typename T> GUID impl_ICurrentApp<T>::AppId() const
{
	GUID value = {};
	check(static_cast<ICurrentApp const &>(static_cast<T const &>(*this))->get_AppId(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp<T>::RequestAppPurchaseAsync(bool const includeReceipt) const
{
	Windows::Foundation::IAsyncOperation<String> requestAppPurchaseOperation = {};
	check(static_cast<ICurrentApp const &>(static_cast<T const &>(*this))->abi_RequestAppPurchaseAsync(includeReceipt, set(requestAppPurchaseOperation)));
	return requestAppPurchaseOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> impl_ICurrentApp<T>::LoadListingInformationAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> loadListingOperation = {};
	check(static_cast<ICurrentApp const &>(static_cast<T const &>(*this))->abi_LoadListingInformationAsync(set(loadListingOperation)));
	return loadListingOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp<T>::GetAppReceiptAsync() const
{
	Windows::Foundation::IAsyncOperation<String> appReceiptOperation = {};
	check(static_cast<ICurrentApp const &>(static_cast<T const &>(*this))->abi_GetAppReceiptAsync(set(appReceiptOperation)));
	return appReceiptOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp<T>::GetProductReceiptAsync(String const & productId) const
{
	Windows::Foundation::IAsyncOperation<String> getProductReceiptOperation = {};
	check(static_cast<ICurrentApp const &>(static_cast<T const &>(*this))->abi_GetProductReceiptAsync(get(productId), set(getProductReceiptOperation)));
	return getProductReceiptOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp<T>::GetProductReceiptAsync(wchar_t const (&productId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<String> getProductReceiptOperation = {};
	check(static_cast<ICurrentApp const &>(static_cast<T const &>(*this))->abi_GetProductReceiptAsync(StringReference(productId), set(getProductReceiptOperation)));
	return getProductReceiptOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> impl_ICurrentAppWithConsumables<T>::ReportConsumableFulfillmentAsync(String const & productId, GUID const transactionId) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> reportConsumableFulfillmentOperation = {};
	check(static_cast<ICurrentAppWithConsumables const &>(static_cast<T const &>(*this))->abi_ReportConsumableFulfillmentAsync(get(productId), transactionId, set(reportConsumableFulfillmentOperation)));
	return reportConsumableFulfillmentOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> impl_ICurrentAppWithConsumables<T>::ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID const transactionId) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> reportConsumableFulfillmentOperation = {};
	check(static_cast<ICurrentAppWithConsumables const &>(static_cast<T const &>(*this))->abi_ReportConsumableFulfillmentAsync(StringReference(productId), transactionId, set(reportConsumableFulfillmentOperation)));
	return reportConsumableFulfillmentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppWithConsumables<T>::RequestProductPurchaseAsync(String const & productId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithResultsOperation = {};
	check(static_cast<ICurrentAppWithConsumables const &>(static_cast<T const &>(*this))->abi_RequestProductPurchaseWithResultsAsync(get(productId), set(requestProductPurchaseWithResultsOperation)));
	return requestProductPurchaseWithResultsOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppWithConsumables<T>::RequestProductPurchaseAsync(wchar_t const (&productId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithResultsOperation = {};
	check(static_cast<ICurrentAppWithConsumables const &>(static_cast<T const &>(*this))->abi_RequestProductPurchaseWithResultsAsync(StringReference(productId), set(requestProductPurchaseWithResultsOperation)));
	return requestProductPurchaseWithResultsOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppWithConsumables<T>::RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithDisplayPropertiesOperation = {};
	check(static_cast<ICurrentAppWithConsumables const &>(static_cast<T const &>(*this))->abi_RequestProductPurchaseWithDisplayPropertiesAsync(get(productId), get(offerId), get(displayProperties), set(requestProductPurchaseWithDisplayPropertiesOperation)));
	return requestProductPurchaseWithDisplayPropertiesOperation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppWithConsumables<T>::RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithDisplayPropertiesOperation = {};
	check(static_cast<ICurrentAppWithConsumables const &>(static_cast<T const &>(*this))->abi_RequestProductPurchaseWithDisplayPropertiesAsync(StringReference(productId), StringReference(offerId), get(displayProperties), set(requestProductPurchaseWithDisplayPropertiesOperation)));
	return requestProductPurchaseWithDisplayPropertiesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> impl_ICurrentAppWithConsumables<T>::GetUnfulfilledConsumablesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> getUnfulfilledConsumablesOperation = {};
	check(static_cast<ICurrentAppWithConsumables const &>(static_cast<T const &>(*this))->abi_GetUnfulfilledConsumablesAsync(set(getUnfulfilledConsumablesOperation)));
	return getUnfulfilledConsumablesOperation;
}

template <typename T> Windows::ApplicationModel::Store::LicenseInformation impl_ICurrentAppSimulator<T>::LicenseInformation() const
{
	Windows::ApplicationModel::Store::LicenseInformation value(nullptr);
	check(static_cast<ICurrentAppSimulator const &>(static_cast<T const &>(*this))->get_LicenseInformation(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ICurrentAppSimulator<T>::LinkUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ICurrentAppSimulator const &>(static_cast<T const &>(*this))->get_LinkUri(set(value)));
	return value;
}

template <typename T> GUID impl_ICurrentAppSimulator<T>::AppId() const
{
	GUID value = {};
	check(static_cast<ICurrentAppSimulator const &>(static_cast<T const &>(*this))->get_AppId(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppSimulator<T>::RequestAppPurchaseAsync(bool const includeReceipt) const
{
	Windows::Foundation::IAsyncOperation<String> requestAppPurchaseOperation = {};
	check(static_cast<ICurrentAppSimulator const &>(static_cast<T const &>(*this))->abi_RequestAppPurchaseAsync(includeReceipt, set(requestAppPurchaseOperation)));
	return requestAppPurchaseOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> impl_ICurrentAppSimulator<T>::LoadListingInformationAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> loadListingOperation = {};
	check(static_cast<ICurrentAppSimulator const &>(static_cast<T const &>(*this))->abi_LoadListingInformationAsync(set(loadListingOperation)));
	return loadListingOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppSimulator<T>::GetAppReceiptAsync() const
{
	Windows::Foundation::IAsyncOperation<String> appReceiptOperation = {};
	check(static_cast<ICurrentAppSimulator const &>(static_cast<T const &>(*this))->abi_GetAppReceiptAsync(set(appReceiptOperation)));
	return appReceiptOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppSimulator<T>::GetProductReceiptAsync(String const & productId) const
{
	Windows::Foundation::IAsyncOperation<String> getProductReceiptOperation = {};
	check(static_cast<ICurrentAppSimulator const &>(static_cast<T const &>(*this))->abi_GetProductReceiptAsync(get(productId), set(getProductReceiptOperation)));
	return getProductReceiptOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppSimulator<T>::GetProductReceiptAsync(wchar_t const (&productId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<String> getProductReceiptOperation = {};
	check(static_cast<ICurrentAppSimulator const &>(static_cast<T const &>(*this))->abi_GetProductReceiptAsync(StringReference(productId), set(getProductReceiptOperation)));
	return getProductReceiptOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICurrentAppSimulator<T>::ReloadSimulatorAsync(Windows::Storage::StorageFile const & simulatorSettingsFile) const
{
	Windows::Foundation::IAsyncAction reloadSimulatorOperation = {};
	check(static_cast<ICurrentAppSimulator const &>(static_cast<T const &>(*this))->abi_ReloadSimulatorAsync(get(simulatorSettingsFile), set(reloadSimulatorOperation)));
	return reloadSimulatorOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> impl_ICurrentAppSimulatorWithConsumables<T>::ReportConsumableFulfillmentAsync(String const & productId, GUID const transactionId) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> reportConsumableFulfillmentOperation = {};
	check(static_cast<ICurrentAppSimulatorWithConsumables const &>(static_cast<T const &>(*this))->abi_ReportConsumableFulfillmentAsync(get(productId), transactionId, set(reportConsumableFulfillmentOperation)));
	return reportConsumableFulfillmentOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> impl_ICurrentAppSimulatorWithConsumables<T>::ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID const transactionId) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> reportConsumableFulfillmentOperation = {};
	check(static_cast<ICurrentAppSimulatorWithConsumables const &>(static_cast<T const &>(*this))->abi_ReportConsumableFulfillmentAsync(StringReference(productId), transactionId, set(reportConsumableFulfillmentOperation)));
	return reportConsumableFulfillmentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppSimulatorWithConsumables<T>::RequestProductPurchaseAsync(String const & productId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithResultsOperation = {};
	check(static_cast<ICurrentAppSimulatorWithConsumables const &>(static_cast<T const &>(*this))->abi_RequestProductPurchaseWithResultsAsync(get(productId), set(requestProductPurchaseWithResultsOperation)));
	return requestProductPurchaseWithResultsOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppSimulatorWithConsumables<T>::RequestProductPurchaseAsync(wchar_t const (&productId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithResultsOperation = {};
	check(static_cast<ICurrentAppSimulatorWithConsumables const &>(static_cast<T const &>(*this))->abi_RequestProductPurchaseWithResultsAsync(StringReference(productId), set(requestProductPurchaseWithResultsOperation)));
	return requestProductPurchaseWithResultsOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppSimulatorWithConsumables<T>::RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithDisplayPropertiesOperation = {};
	check(static_cast<ICurrentAppSimulatorWithConsumables const &>(static_cast<T const &>(*this))->abi_RequestProductPurchaseWithDisplayPropertiesAsync(get(productId), get(offerId), get(displayProperties), set(requestProductPurchaseWithDisplayPropertiesOperation)));
	return requestProductPurchaseWithDisplayPropertiesOperation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppSimulatorWithConsumables<T>::RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithDisplayPropertiesOperation = {};
	check(static_cast<ICurrentAppSimulatorWithConsumables const &>(static_cast<T const &>(*this))->abi_RequestProductPurchaseWithDisplayPropertiesAsync(StringReference(productId), StringReference(offerId), get(displayProperties), set(requestProductPurchaseWithDisplayPropertiesOperation)));
	return requestProductPurchaseWithDisplayPropertiesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> impl_ICurrentAppSimulatorWithConsumables<T>::GetUnfulfilledConsumablesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> getUnfulfilledConsumablesOperation = {};
	check(static_cast<ICurrentAppSimulatorWithConsumables const &>(static_cast<T const &>(*this))->abi_GetUnfulfilledConsumablesAsync(set(getUnfulfilledConsumablesOperation)));
	return getUnfulfilledConsumablesOperation;
}

template <typename T> Windows::ApplicationModel::Store::ProductPurchaseStatus impl_IPurchaseResults<T>::Status() const
{
	Windows::ApplicationModel::Store::ProductPurchaseStatus value = {};
	check(static_cast<IPurchaseResults const &>(static_cast<T const &>(*this))->get_Status(&value));
	return value;
}

template <typename T> GUID impl_IPurchaseResults<T>::TransactionId() const
{
	GUID value = {};
	check(static_cast<IPurchaseResults const &>(static_cast<T const &>(*this))->get_TransactionId(&value));
	return value;
}

template <typename T> String impl_IPurchaseResults<T>::ReceiptXml() const
{
	String value = {};
	check(static_cast<IPurchaseResults const &>(static_cast<T const &>(*this))->get_ReceiptXml(set(value)));
	return value;
}

template <typename T> String impl_IPurchaseResults<T>::OfferId() const
{
	String value = {};
	check(static_cast<IPurchaseResults const &>(static_cast<T const &>(*this))->get_OfferId(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductLicense> impl_ILicenseInformation<T>::ProductLicenses() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductLicense> value = {};
	check(static_cast<ILicenseInformation const &>(static_cast<T const &>(*this))->get_ProductLicenses(set(value)));
	return value;
}

template <typename T> bool impl_ILicenseInformation<T>::IsActive() const
{
	bool value = {};
	check(static_cast<ILicenseInformation const &>(static_cast<T const &>(*this))->get_IsActive(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ILicenseInformation<T>::IsTrial() const
{
	bool value = {};
	check(static_cast<ILicenseInformation const &>(static_cast<T const &>(*this))->get_IsTrial(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ILicenseInformation<T>::ExpirationDate() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ILicenseInformation const &>(static_cast<T const &>(*this))->get_ExpirationDate(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_ILicenseInformation<T>::LicenseChanged(Windows::ApplicationModel::Store::ILicenseChangedEventHandler const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ILicenseInformation const &>(static_cast<T const &>(*this))->add_LicenseChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ILicenseInformation<T>::LicenseChanged(F handler) const
{
	return LicenseChanged(Windows::ApplicationModel::Store::LicenseChangedEventHandler(handler));
}

template <typename T> void impl_ILicenseInformation<T>::LicenseChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<ILicenseInformation const &>(static_cast<T const &>(*this))->remove_LicenseChanged(cookie));
}

template <typename T> String impl_IProductLicense<T>::ProductId() const
{
	String value = {};
	check(static_cast<IProductLicense const &>(static_cast<T const &>(*this))->get_ProductId(set(value)));
	return value;
}

template <typename T> bool impl_IProductLicense<T>::IsActive() const
{
	bool value = {};
	check(static_cast<IProductLicense const &>(static_cast<T const &>(*this))->get_IsActive(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IProductLicense<T>::ExpirationDate() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IProductLicense const &>(static_cast<T const &>(*this))->get_ExpirationDate(&value));
	return value;
}

template <typename T> String impl_IListingInformation<T>::CurrentMarket() const
{
	String value = {};
	check(static_cast<IListingInformation const &>(static_cast<T const &>(*this))->get_CurrentMarket(set(value)));
	return value;
}

template <typename T> String impl_IListingInformation<T>::Description() const
{
	String value = {};
	check(static_cast<IListingInformation const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductListing> impl_IListingInformation<T>::ProductListings() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductListing> value = {};
	check(static_cast<IListingInformation const &>(static_cast<T const &>(*this))->get_ProductListings(set(value)));
	return value;
}

template <typename T> String impl_IListingInformation<T>::FormattedPrice() const
{
	String value = {};
	check(static_cast<IListingInformation const &>(static_cast<T const &>(*this))->get_FormattedPrice(set(value)));
	return value;
}

template <typename T> String impl_IListingInformation<T>::Name() const
{
	String value = {};
	check(static_cast<IListingInformation const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> unsigned impl_IListingInformation<T>::AgeRating() const
{
	unsigned value = {};
	check(static_cast<IListingInformation const &>(static_cast<T const &>(*this))->get_AgeRating(&value));
	return value;
}

template <typename T> String impl_IProductListing<T>::ProductId() const
{
	String value = {};
	check(static_cast<IProductListing const &>(static_cast<T const &>(*this))->get_ProductId(set(value)));
	return value;
}

template <typename T> String impl_IProductListing<T>::FormattedPrice() const
{
	String value = {};
	check(static_cast<IProductListing const &>(static_cast<T const &>(*this))->get_FormattedPrice(set(value)));
	return value;
}

template <typename T> String impl_IProductListing<T>::Name() const
{
	String value = {};
	check(static_cast<IProductListing const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Store::ProductType impl_IProductListingWithConsumables<T>::ProductType() const
{
	Windows::ApplicationModel::Store::ProductType value = {};
	check(static_cast<IProductListingWithConsumables const &>(static_cast<T const &>(*this))->get_ProductType(&value));
	return value;
}

template <typename T> String impl_IUnfulfilledConsumable<T>::ProductId() const
{
	String value = {};
	check(static_cast<IUnfulfilledConsumable const &>(static_cast<T const &>(*this))->get_ProductId(set(value)));
	return value;
}

template <typename T> GUID impl_IUnfulfilledConsumable<T>::TransactionId() const
{
	GUID value = {};
	check(static_cast<IUnfulfilledConsumable const &>(static_cast<T const &>(*this))->get_TransactionId(&value));
	return value;
}

template <typename T> String impl_IUnfulfilledConsumable<T>::OfferId() const
{
	String value = {};
	check(static_cast<IUnfulfilledConsumable const &>(static_cast<T const &>(*this))->get_OfferId(set(value)));
	return value;
}

template <typename T> String impl_IProductPurchaseDisplayProperties<T>::Name() const
{
	String value = {};
	check(static_cast<IProductPurchaseDisplayProperties const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> void impl_IProductPurchaseDisplayProperties<T>::Name(String const & value) const
{
	check(static_cast<IProductPurchaseDisplayProperties const &>(static_cast<T const &>(*this))->put_Name(get(value)));
}

template <typename T> template <unsigned S0> void impl_IProductPurchaseDisplayProperties<T>::Name(wchar_t const (&value)[S0]) const
{
	check(static_cast<IProductPurchaseDisplayProperties const &>(static_cast<T const &>(*this))->put_Name(StringReference(value)));
}

template <typename T> String impl_IProductPurchaseDisplayProperties<T>::Description() const
{
	String value = {};
	check(static_cast<IProductPurchaseDisplayProperties const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> void impl_IProductPurchaseDisplayProperties<T>::Description(String const & value) const
{
	check(static_cast<IProductPurchaseDisplayProperties const &>(static_cast<T const &>(*this))->put_Description(get(value)));
}

template <typename T> template <unsigned S0> void impl_IProductPurchaseDisplayProperties<T>::Description(wchar_t const (&value)[S0]) const
{
	check(static_cast<IProductPurchaseDisplayProperties const &>(static_cast<T const &>(*this))->put_Description(StringReference(value)));
}

template <typename T> Windows::Foundation::Uri impl_IProductPurchaseDisplayProperties<T>::Image() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IProductPurchaseDisplayProperties const &>(static_cast<T const &>(*this))->get_Image(set(value)));
	return value;
}

template <typename T> void impl_IProductPurchaseDisplayProperties<T>::Image(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IProductPurchaseDisplayProperties const &>(static_cast<T const &>(*this))->put_Image(get(value)));
}

template <typename T> Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties impl_IProductPurchaseDisplayPropertiesFactory<T>::CreateProductPurchaseDisplayProperties(String const & name) const
{
	Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties displayProperties(nullptr);
	check(static_cast<IProductPurchaseDisplayPropertiesFactory const &>(static_cast<T const &>(*this))->abi_CreateProductPurchaseDisplayProperties(get(name), set(displayProperties)));
	return displayProperties;
}

template <typename T> template <unsigned S0> Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties impl_IProductPurchaseDisplayPropertiesFactory<T>::CreateProductPurchaseDisplayProperties(wchar_t const (&name)[S0]) const
{
	Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties displayProperties(nullptr);
	check(static_cast<IProductPurchaseDisplayPropertiesFactory const &>(static_cast<T const &>(*this))->abi_CreateProductPurchaseDisplayProperties(StringReference(name), set(displayProperties)));
	return displayProperties;
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

template <typename T> String impl_IHtmlUtilities<T>::ConvertToText(String const & html) const
{
	String text = {};
	check(static_cast<IHtmlUtilities const &>(static_cast<T const &>(*this))->abi_ConvertToText(get(html), set(text)));
	return text;
}

template <typename T> template <unsigned S0> String impl_IHtmlUtilities<T>::ConvertToText(wchar_t const (&html)[S0]) const
{
	String text = {};
	check(static_cast<IHtmlUtilities const &>(static_cast<T const &>(*this))->abi_ConvertToText(StringReference(html), set(text)));
	return text;
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

template <typename T> Windows::Data::Json::JsonValueType impl_IJsonValue<T>::ValueType() const
{
	Windows::Data::Json::JsonValueType value = {};
	check(static_cast<IJsonValue const &>(static_cast<T const &>(*this))->get_ValueType(&value));
	return value;
}

template <typename T> String impl_IJsonValue<T>::Stringify() const
{
	String returnValue = {};
	check(static_cast<IJsonValue const &>(static_cast<T const &>(*this))->abi_Stringify(set(returnValue)));
	return returnValue;
}

template <typename T> String impl_IJsonValue<T>::GetString() const
{
	String returnValue = {};
	check(static_cast<IJsonValue const &>(static_cast<T const &>(*this))->abi_GetString(set(returnValue)));
	return returnValue;
}

template <typename T> double impl_IJsonValue<T>::GetNumber() const
{
	double returnValue = {};
	check(static_cast<IJsonValue const &>(static_cast<T const &>(*this))->abi_GetNumber(&returnValue));
	return returnValue;
}

template <typename T> bool impl_IJsonValue<T>::GetBoolean() const
{
	bool returnValue = {};
	check(static_cast<IJsonValue const &>(static_cast<T const &>(*this))->abi_GetBoolean(BoolProxy(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonValue<T>::GetArray() const
{
	Windows::Data::Json::JsonArray returnValue(nullptr);
	check(static_cast<IJsonValue const &>(static_cast<T const &>(*this))->abi_GetArray(set(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonValue<T>::GetObject() const
{
	Windows::Data::Json::JsonObject returnValue(nullptr);
	check(static_cast<IJsonValue const &>(static_cast<T const &>(*this))->abi_GetObject(set(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::Parse(String const & input) const
{
	Windows::Data::Json::JsonValue jsonValue(nullptr);
	check(static_cast<IJsonValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(jsonValue)));
	return jsonValue;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Data::Json::JsonValue jsonValue(nullptr);
	check(static_cast<IJsonValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(jsonValue)));
	return jsonValue;
}

template <typename T> bool impl_IJsonValueStatics<T>::TryParse(String const & input, Windows::Data::Json::JsonValue & result) const
{
	bool succeeded = {};
	check(static_cast<IJsonValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(result), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IJsonValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonValue & result) const
{
	bool succeeded = {};
	check(static_cast<IJsonValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(result), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::CreateBooleanValue(bool const input) const
{
	Windows::Data::Json::JsonValue jsonValue(nullptr);
	check(static_cast<IJsonValueStatics const &>(static_cast<T const &>(*this))->abi_CreateBooleanValue(input, set(jsonValue)));
	return jsonValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::CreateNumberValue(double const input) const
{
	Windows::Data::Json::JsonValue jsonValue(nullptr);
	check(static_cast<IJsonValueStatics const &>(static_cast<T const &>(*this))->abi_CreateNumberValue(input, set(jsonValue)));
	return jsonValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::CreateStringValue(String const & input) const
{
	Windows::Data::Json::JsonValue jsonValue(nullptr);
	check(static_cast<IJsonValueStatics const &>(static_cast<T const &>(*this))->abi_CreateStringValue(get(input), set(jsonValue)));
	return jsonValue;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::CreateStringValue(wchar_t const (&input)[S0]) const
{
	Windows::Data::Json::JsonValue jsonValue(nullptr);
	check(static_cast<IJsonValueStatics const &>(static_cast<T const &>(*this))->abi_CreateStringValue(StringReference(input), set(jsonValue)));
	return jsonValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonObject<T>::GetNamedValue(String const & name) const
{
	Windows::Data::Json::JsonValue returnValue(nullptr);
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedValue(get(name), set(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonValue impl_IJsonObject<T>::GetNamedValue(wchar_t const (&name)[S0]) const
{
	Windows::Data::Json::JsonValue returnValue(nullptr);
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedValue(StringReference(name), set(returnValue)));
	return returnValue;
}

template <typename T> void impl_IJsonObject<T>::SetNamedValue(String const & name, Windows::Data::Json::IJsonValue const & value) const
{
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_SetNamedValue(get(name), get(value)));
}

template <typename T> template <unsigned S0> void impl_IJsonObject<T>::SetNamedValue(wchar_t const (&name)[S0], Windows::Data::Json::IJsonValue const & value) const
{
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_SetNamedValue(StringReference(name), get(value)));
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonObject<T>::GetNamedObject(String const & name) const
{
	Windows::Data::Json::JsonObject returnValue(nullptr);
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedObject(get(name), set(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonObject impl_IJsonObject<T>::GetNamedObject(wchar_t const (&name)[S0]) const
{
	Windows::Data::Json::JsonObject returnValue(nullptr);
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedObject(StringReference(name), set(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonObject<T>::GetNamedArray(String const & name) const
{
	Windows::Data::Json::JsonArray returnValue(nullptr);
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedArray(get(name), set(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonArray impl_IJsonObject<T>::GetNamedArray(wchar_t const (&name)[S0]) const
{
	Windows::Data::Json::JsonArray returnValue(nullptr);
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedArray(StringReference(name), set(returnValue)));
	return returnValue;
}

template <typename T> String impl_IJsonObject<T>::GetNamedString(String const & name) const
{
	String returnValue = {};
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedString(get(name), set(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0> String impl_IJsonObject<T>::GetNamedString(wchar_t const (&name)[S0]) const
{
	String returnValue = {};
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedString(StringReference(name), set(returnValue)));
	return returnValue;
}

template <typename T> double impl_IJsonObject<T>::GetNamedNumber(String const & name) const
{
	double returnValue = {};
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedNumber(get(name), &returnValue));
	return returnValue;
}

template <typename T> template <unsigned S0> double impl_IJsonObject<T>::GetNamedNumber(wchar_t const (&name)[S0]) const
{
	double returnValue = {};
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedNumber(StringReference(name), &returnValue));
	return returnValue;
}

template <typename T> bool impl_IJsonObject<T>::GetNamedBoolean(String const & name) const
{
	bool returnValue = {};
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedBoolean(get(name), BoolProxy(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0> bool impl_IJsonObject<T>::GetNamedBoolean(wchar_t const (&name)[S0]) const
{
	bool returnValue = {};
	check(static_cast<IJsonObject const &>(static_cast<T const &>(*this))->abi_GetNamedBoolean(StringReference(name), BoolProxy(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonObjectWithDefaultValues<T>::GetNamedValue(String const & name, Windows::Data::Json::JsonValue const & defaultValue) const
{
	Windows::Data::Json::JsonValue returnValue(nullptr);
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedValueOrDefault(get(name), get(defaultValue), set(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonValue impl_IJsonObjectWithDefaultValues<T>::GetNamedValue(wchar_t const (&name)[S0], Windows::Data::Json::JsonValue const & defaultValue) const
{
	Windows::Data::Json::JsonValue returnValue(nullptr);
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedValueOrDefault(StringReference(name), get(defaultValue), set(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonObjectWithDefaultValues<T>::GetNamedObject(String const & name, Windows::Data::Json::JsonObject const & defaultValue) const
{
	Windows::Data::Json::JsonObject returnValue(nullptr);
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedObjectOrDefault(get(name), get(defaultValue), set(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonObject impl_IJsonObjectWithDefaultValues<T>::GetNamedObject(wchar_t const (&name)[S0], Windows::Data::Json::JsonObject const & defaultValue) const
{
	Windows::Data::Json::JsonObject returnValue(nullptr);
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedObjectOrDefault(StringReference(name), get(defaultValue), set(returnValue)));
	return returnValue;
}

template <typename T> String impl_IJsonObjectWithDefaultValues<T>::GetNamedString(String const & name, String const & defaultValue) const
{
	String returnValue = {};
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedStringOrDefault(get(name), get(defaultValue), set(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0, unsigned S1> String impl_IJsonObjectWithDefaultValues<T>::GetNamedString(wchar_t const (&name)[S0], wchar_t const (&defaultValue)[S1]) const
{
	String returnValue = {};
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedStringOrDefault(StringReference(name), StringReference(defaultValue), set(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonObjectWithDefaultValues<T>::GetNamedArray(String const & name, Windows::Data::Json::JsonArray const & defaultValue) const
{
	Windows::Data::Json::JsonArray returnValue(nullptr);
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedArrayOrDefault(get(name), get(defaultValue), set(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonArray impl_IJsonObjectWithDefaultValues<T>::GetNamedArray(wchar_t const (&name)[S0], Windows::Data::Json::JsonArray const & defaultValue) const
{
	Windows::Data::Json::JsonArray returnValue(nullptr);
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedArrayOrDefault(StringReference(name), get(defaultValue), set(returnValue)));
	return returnValue;
}

template <typename T> double impl_IJsonObjectWithDefaultValues<T>::GetNamedNumber(String const & name, double const defaultValue) const
{
	double returnValue = {};
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedNumberOrDefault(get(name), defaultValue, &returnValue));
	return returnValue;
}

template <typename T> template <unsigned S0> double impl_IJsonObjectWithDefaultValues<T>::GetNamedNumber(wchar_t const (&name)[S0], double const defaultValue) const
{
	double returnValue = {};
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedNumberOrDefault(StringReference(name), defaultValue, &returnValue));
	return returnValue;
}

template <typename T> bool impl_IJsonObjectWithDefaultValues<T>::GetNamedBoolean(String const & name, bool const defaultValue) const
{
	bool returnValue = {};
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedBooleanOrDefault(get(name), defaultValue, BoolProxy(returnValue)));
	return returnValue;
}

template <typename T> template <unsigned S0> bool impl_IJsonObjectWithDefaultValues<T>::GetNamedBoolean(wchar_t const (&name)[S0], bool const defaultValue) const
{
	bool returnValue = {};
	check(static_cast<IJsonObjectWithDefaultValues const &>(static_cast<T const &>(*this))->abi_GetNamedBooleanOrDefault(StringReference(name), defaultValue, BoolProxy(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonObjectStatics<T>::Parse(String const & input) const
{
	Windows::Data::Json::JsonObject jsonObject(nullptr);
	check(static_cast<IJsonObjectStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(jsonObject)));
	return jsonObject;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonObject impl_IJsonObjectStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Data::Json::JsonObject jsonObject(nullptr);
	check(static_cast<IJsonObjectStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(jsonObject)));
	return jsonObject;
}

template <typename T> bool impl_IJsonObjectStatics<T>::TryParse(String const & input, Windows::Data::Json::JsonObject & result) const
{
	bool succeeded = {};
	check(static_cast<IJsonObjectStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(result), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IJsonObjectStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonObject & result) const
{
	bool succeeded = {};
	check(static_cast<IJsonObjectStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(result), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonArray<T>::GetObjectAt(unsigned const index) const
{
	Windows::Data::Json::JsonObject returnValue(nullptr);
	check(static_cast<IJsonArray const &>(static_cast<T const &>(*this))->abi_GetObjectAt(index, set(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonArray<T>::GetArrayAt(unsigned const index) const
{
	Windows::Data::Json::JsonArray returnValue(nullptr);
	check(static_cast<IJsonArray const &>(static_cast<T const &>(*this))->abi_GetArrayAt(index, set(returnValue)));
	return returnValue;
}

template <typename T> String impl_IJsonArray<T>::GetStringAt(unsigned const index) const
{
	String returnValue = {};
	check(static_cast<IJsonArray const &>(static_cast<T const &>(*this))->abi_GetStringAt(index, set(returnValue)));
	return returnValue;
}

template <typename T> double impl_IJsonArray<T>::GetNumberAt(unsigned const index) const
{
	double returnValue = {};
	check(static_cast<IJsonArray const &>(static_cast<T const &>(*this))->abi_GetNumberAt(index, &returnValue));
	return returnValue;
}

template <typename T> bool impl_IJsonArray<T>::GetBooleanAt(unsigned const index) const
{
	bool returnValue = {};
	check(static_cast<IJsonArray const &>(static_cast<T const &>(*this))->abi_GetBooleanAt(index, BoolProxy(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonArrayStatics<T>::Parse(String const & input) const
{
	Windows::Data::Json::JsonArray jsonArray(nullptr);
	check(static_cast<IJsonArrayStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(jsonArray)));
	return jsonArray;
}

template <typename T> template <unsigned S0> Windows::Data::Json::JsonArray impl_IJsonArrayStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Data::Json::JsonArray jsonArray(nullptr);
	check(static_cast<IJsonArrayStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(jsonArray)));
	return jsonArray;
}

template <typename T> bool impl_IJsonArrayStatics<T>::TryParse(String const & input, Windows::Data::Json::JsonArray & result) const
{
	bool succeeded = {};
	check(static_cast<IJsonArrayStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(result), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IJsonArrayStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonArray & result) const
{
	bool succeeded = {};
	check(static_cast<IJsonArrayStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(result), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Data::Json::JsonErrorStatus impl_IJsonErrorStatics2<T>::GetJsonStatus(int const hresult) const
{
	Windows::Data::Json::JsonErrorStatus status = {};
	check(static_cast<IJsonErrorStatics2 const &>(static_cast<T const &>(*this))->abi_GetJsonStatus(hresult, &status));
	return status;
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::MediaBox() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPdfPageDimensions const &>(static_cast<T const &>(*this))->get_MediaBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::CropBox() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPdfPageDimensions const &>(static_cast<T const &>(*this))->get_CropBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::BleedBox() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPdfPageDimensions const &>(static_cast<T const &>(*this))->get_BleedBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::TrimBox() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPdfPageDimensions const &>(static_cast<T const &>(*this))->get_TrimBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::ArtBox() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPdfPageDimensions const &>(static_cast<T const &>(*this))->get_ArtBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageRenderOptions<T>::SourceRect() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->get_SourceRect(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::SourceRect(Windows::Foundation::Rect const & value) const
{
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->put_SourceRect(value));
}

template <typename T> unsigned impl_IPdfPageRenderOptions<T>::DestinationWidth() const
{
	unsigned value = {};
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->get_DestinationWidth(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::DestinationWidth(unsigned const value) const
{
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->put_DestinationWidth(value));
}

template <typename T> unsigned impl_IPdfPageRenderOptions<T>::DestinationHeight() const
{
	unsigned value = {};
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->get_DestinationHeight(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::DestinationHeight(unsigned const value) const
{
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->put_DestinationHeight(value));
}

template <typename T> Windows::UI::Color impl_IPdfPageRenderOptions<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->get_BackgroundColor(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::BackgroundColor(Windows::UI::Color const & value) const
{
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->put_BackgroundColor(value));
}

template <typename T> bool impl_IPdfPageRenderOptions<T>::IsIgnoringHighContrast() const
{
	bool value = {};
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->get_IsIgnoringHighContrast(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::IsIgnoringHighContrast(bool const value) const
{
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->put_IsIgnoringHighContrast(value));
}

template <typename T> GUID impl_IPdfPageRenderOptions<T>::BitmapEncoderId() const
{
	GUID value = {};
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->get_BitmapEncoderId(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::BitmapEncoderId(GUID const value) const
{
	check(static_cast<IPdfPageRenderOptions const &>(static_cast<T const &>(*this))->put_BitmapEncoderId(value));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPdfPage<T>::RenderToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & outputStream) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IPdfPage const &>(static_cast<T const &>(*this))->abi_RenderToStreamAsync(get(outputStream), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPdfPage<T>::RenderToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & outputStream, Windows::Data::Pdf::PdfPageRenderOptions const & options) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IPdfPage const &>(static_cast<T const &>(*this))->abi_RenderWithOptionsToStreamAsync(get(outputStream), get(options), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPdfPage<T>::PreparePageAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IPdfPage const &>(static_cast<T const &>(*this))->abi_PreparePageAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_IPdfPage<T>::Index() const
{
	unsigned value = {};
	check(static_cast<IPdfPage const &>(static_cast<T const &>(*this))->get_Index(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IPdfPage<T>::Size() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<IPdfPage const &>(static_cast<T const &>(*this))->get_Size(&value));
	return value;
}

template <typename T> Windows::Data::Pdf::PdfPageDimensions impl_IPdfPage<T>::Dimensions() const
{
	Windows::Data::Pdf::PdfPageDimensions value(nullptr);
	check(static_cast<IPdfPage const &>(static_cast<T const &>(*this))->get_Dimensions(set(value)));
	return value;
}

template <typename T> Windows::Data::Pdf::PdfPageRotation impl_IPdfPage<T>::Rotation() const
{
	Windows::Data::Pdf::PdfPageRotation value = {};
	check(static_cast<IPdfPage const &>(static_cast<T const &>(*this))->get_Rotation(&value));
	return value;
}

template <typename T> float impl_IPdfPage<T>::PreferredZoom() const
{
	float value = {};
	check(static_cast<IPdfPage const &>(static_cast<T const &>(*this))->get_PreferredZoom(&value));
	return value;
}

template <typename T> Windows::Data::Pdf::PdfPage impl_IPdfDocument<T>::GetPage(unsigned const pageIndex) const
{
	Windows::Data::Pdf::PdfPage pdfPage(nullptr);
	check(static_cast<IPdfDocument const &>(static_cast<T const &>(*this))->abi_GetPage(pageIndex, set(pdfPage)));
	return pdfPage;
}

template <typename T> unsigned impl_IPdfDocument<T>::PageCount() const
{
	unsigned value = {};
	check(static_cast<IPdfDocument const &>(static_cast<T const &>(*this))->get_PageCount(&value));
	return value;
}

template <typename T> bool impl_IPdfDocument<T>::IsPasswordProtected() const
{
	bool value = {};
	check(static_cast<IPdfDocument const &>(static_cast<T const &>(*this))->get_IsPasswordProtected(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo = {};
	check(static_cast<IPdfDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromFileAsync(get(file), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, String const & password) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo = {};
	check(static_cast<IPdfDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromFileWithPasswordAsync(get(file), get(password), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&password)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo = {};
	check(static_cast<IPdfDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromFileWithPasswordAsync(get(file), StringReference(password), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo = {};
	check(static_cast<IPdfDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromStreamAsync(get(inputStream), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, String const & password) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo = {};
	check(static_cast<IPdfDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromStreamWithPasswordAsync(get(inputStream), get(password), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, wchar_t const (&password)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo = {};
	check(static_cast<IPdfDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromStreamWithPasswordAsync(get(inputStream), StringReference(password), set(asyncInfo)));
	return asyncInfo;
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

template <typename T> void impl_IWordSegmentsTokenizingHandler<T>::Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & words) const
{
	check(static_cast<IWordSegmentsTokenizingHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(precedingWords), get(words)));
}

template <typename T> void impl_ISelectableWordSegmentsTokenizingHandler<T>::Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & words) const
{
	check(static_cast<ISelectableWordSegmentsTokenizingHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(precedingWords), get(words)));
}

template <typename T> Windows::Data::Text::SemanticTextQuery impl_ISemanticTextQueryFactory<T>::Create(String const & aqsFilter) const
{
	Windows::Data::Text::SemanticTextQuery result(nullptr);
	check(static_cast<ISemanticTextQueryFactory const &>(static_cast<T const &>(*this))->abi_Create(get(aqsFilter), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Data::Text::SemanticTextQuery impl_ISemanticTextQueryFactory<T>::Create(wchar_t const (&aqsFilter)[S0]) const
{
	Windows::Data::Text::SemanticTextQuery result(nullptr);
	check(static_cast<ISemanticTextQueryFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(aqsFilter), set(result)));
	return result;
}

template <typename T> Windows::Data::Text::SemanticTextQuery impl_ISemanticTextQueryFactory<T>::CreateWithLanguage(String const & aqsFilter, String const & filterLanguage) const
{
	Windows::Data::Text::SemanticTextQuery result(nullptr);
	check(static_cast<ISemanticTextQueryFactory const &>(static_cast<T const &>(*this))->abi_CreateWithLanguage(get(aqsFilter), get(filterLanguage), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Data::Text::SemanticTextQuery impl_ISemanticTextQueryFactory<T>::CreateWithLanguage(wchar_t const (&aqsFilter)[S0], wchar_t const (&filterLanguage)[S1]) const
{
	Windows::Data::Text::SemanticTextQuery result(nullptr);
	check(static_cast<ISemanticTextQueryFactory const &>(static_cast<T const &>(*this))->abi_CreateWithLanguage(StringReference(aqsFilter), StringReference(filterLanguage), set(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> impl_ISemanticTextQuery<T>::Find(String const & content) const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> result = {};
	check(static_cast<ISemanticTextQuery const &>(static_cast<T const &>(*this))->abi_Find(get(content), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> impl_ISemanticTextQuery<T>::Find(wchar_t const (&content)[S0]) const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> result = {};
	check(static_cast<ISemanticTextQuery const &>(static_cast<T const &>(*this))->abi_Find(StringReference(content), set(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> impl_ISemanticTextQuery<T>::FindInProperty(String const & propertyContent, String const & propertyName) const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> result = {};
	check(static_cast<ISemanticTextQuery const &>(static_cast<T const &>(*this))->abi_FindInProperty(get(propertyContent), get(propertyName), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> impl_ISemanticTextQuery<T>::FindInProperty(wchar_t const (&propertyContent)[S0], wchar_t const (&propertyName)[S1]) const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment> result = {};
	check(static_cast<ISemanticTextQuery const &>(static_cast<T const &>(*this))->abi_FindInProperty(StringReference(propertyContent), StringReference(propertyName), set(result)));
	return result;
}

template <typename T> unsigned impl_IUnicodeCharactersStatics<T>::GetCodepointFromSurrogatePair(unsigned const highSurrogate, unsigned const lowSurrogate) const
{
	unsigned codepoint = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_GetCodepointFromSurrogatePair(highSurrogate, lowSurrogate, &codepoint));
	return codepoint;
}

template <typename T> void impl_IUnicodeCharactersStatics<T>::GetSurrogatePairFromCodepoint(unsigned const codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate) const
{
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_GetSurrogatePairFromCodepoint(codepoint, &highSurrogate, &lowSurrogate));
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsHighSurrogate(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsHighSurrogate(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsLowSurrogate(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsLowSurrogate(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsSupplementary(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsSupplementary(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsNoncharacter(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsNoncharacter(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsWhitespace(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsWhitespace(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsAlphabetic(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsAlphabetic(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsCased(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsCased(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsUppercase(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsUppercase(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsLowercase(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsLowercase(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsIdStart(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsIdStart(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsIdContinue(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsIdContinue(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsGraphemeBase(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsGraphemeBase(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsGraphemeExtend(unsigned const codepoint) const
{
	bool value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_IsGraphemeExtend(codepoint, BoolProxy(value)));
	return value;
}

template <typename T> Windows::Data::Text::UnicodeNumericType impl_IUnicodeCharactersStatics<T>::GetNumericType(unsigned const codepoint) const
{
	Windows::Data::Text::UnicodeNumericType value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_GetNumericType(codepoint, &value));
	return value;
}

template <typename T> Windows::Data::Text::UnicodeGeneralCategory impl_IUnicodeCharactersStatics<T>::GetGeneralCategory(unsigned const codepoint) const
{
	Windows::Data::Text::UnicodeGeneralCategory value = {};
	check(static_cast<IUnicodeCharactersStatics const &>(static_cast<T const &>(*this))->abi_GetGeneralCategory(codepoint, &value));
	return value;
}

template <typename T> Windows::Data::Text::TextSegment impl_IAlternateWordForm<T>::SourceTextSegment() const
{
	Windows::Data::Text::TextSegment value = {};
	check(static_cast<IAlternateWordForm const &>(static_cast<T const &>(*this))->get_SourceTextSegment(&value));
	return value;
}

template <typename T> String impl_IAlternateWordForm<T>::AlternateText() const
{
	String value = {};
	check(static_cast<IAlternateWordForm const &>(static_cast<T const &>(*this))->get_AlternateText(set(value)));
	return value;
}

template <typename T> Windows::Data::Text::AlternateNormalizationFormat impl_IAlternateWordForm<T>::NormalizationFormat() const
{
	Windows::Data::Text::AlternateNormalizationFormat value = {};
	check(static_cast<IAlternateWordForm const &>(static_cast<T const &>(*this))->get_NormalizationFormat(&value));
	return value;
}

template <typename T> String impl_ISelectableWordSegment<T>::Text() const
{
	String value = {};
	check(static_cast<ISelectableWordSegment const &>(static_cast<T const &>(*this))->get_Text(set(value)));
	return value;
}

template <typename T> Windows::Data::Text::TextSegment impl_ISelectableWordSegment<T>::SourceTextSegment() const
{
	Windows::Data::Text::TextSegment value = {};
	check(static_cast<ISelectableWordSegment const &>(static_cast<T const &>(*this))->get_SourceTextSegment(&value));
	return value;
}

template <typename T> String impl_IWordSegment<T>::Text() const
{
	String value = {};
	check(static_cast<IWordSegment const &>(static_cast<T const &>(*this))->get_Text(set(value)));
	return value;
}

template <typename T> Windows::Data::Text::TextSegment impl_IWordSegment<T>::SourceTextSegment() const
{
	Windows::Data::Text::TextSegment value = {};
	check(static_cast<IWordSegment const &>(static_cast<T const &>(*this))->get_SourceTextSegment(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::AlternateWordForm> impl_IWordSegment<T>::AlternateForms() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::AlternateWordForm> value = {};
	check(static_cast<IWordSegment const &>(static_cast<T const &>(*this))->get_AlternateForms(set(value)));
	return value;
}

template <typename T> String impl_IWordsSegmenter<T>::ResolvedLanguage() const
{
	String value = {};
	check(static_cast<IWordsSegmenter const &>(static_cast<T const &>(*this))->get_ResolvedLanguage(set(value)));
	return value;
}

template <typename T> Windows::Data::Text::WordSegment impl_IWordsSegmenter<T>::GetTokenAt(String const & text, unsigned const startIndex) const
{
	Windows::Data::Text::WordSegment result(nullptr);
	check(static_cast<IWordsSegmenter const &>(static_cast<T const &>(*this))->abi_GetTokenAt(get(text), startIndex, set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Data::Text::WordSegment impl_IWordsSegmenter<T>::GetTokenAt(wchar_t const (&text)[S0], unsigned const startIndex) const
{
	Windows::Data::Text::WordSegment result(nullptr);
	check(static_cast<IWordsSegmenter const &>(static_cast<T const &>(*this))->abi_GetTokenAt(StringReference(text), startIndex, set(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> impl_IWordsSegmenter<T>::GetTokens(String const & text) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> result = {};
	check(static_cast<IWordsSegmenter const &>(static_cast<T const &>(*this))->abi_GetTokens(get(text), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> impl_IWordsSegmenter<T>::GetTokens(wchar_t const (&text)[S0]) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> result = {};
	check(static_cast<IWordsSegmenter const &>(static_cast<T const &>(*this))->abi_GetTokens(StringReference(text), set(result)));
	return result;
}

template <typename T> void impl_IWordsSegmenter<T>::Tokenize(String const & text, unsigned const startIndex, Windows::Data::Text::IWordSegmentsTokenizingHandler const & handler) const
{
	check(static_cast<IWordsSegmenter const &>(static_cast<T const &>(*this))->abi_Tokenize(get(text), startIndex, get(handler)));
}

template <typename T> template <unsigned S0> void impl_IWordsSegmenter<T>::Tokenize(wchar_t const (&text)[S0], unsigned const startIndex, Windows::Data::Text::IWordSegmentsTokenizingHandler const & handler) const
{
	check(static_cast<IWordsSegmenter const &>(static_cast<T const &>(*this))->abi_Tokenize(StringReference(text), startIndex, get(handler)));
}

template <typename T> template <typename F> void impl_IWordsSegmenter<T>::Tokenize(String const & text, unsigned const startIndex, F handler) const
{
	Tokenize(text, startIndex, Windows::Data::Text::WordSegmentsTokenizingHandler(handler));
}

template <typename T> template <unsigned S0, typename F> void impl_IWordsSegmenter<T>::Tokenize(wchar_t const (&text)[S0], unsigned const startIndex, F handler) const
{
	Tokenize(text, startIndex, Windows::Data::Text::WordSegmentsTokenizingHandler(handler));
}

template <typename T> Windows::Data::Text::WordsSegmenter impl_IWordsSegmenterFactory<T>::CreateWithLanguage(String const & language) const
{
	Windows::Data::Text::WordsSegmenter result(nullptr);
	check(static_cast<IWordsSegmenterFactory const &>(static_cast<T const &>(*this))->abi_CreateWithLanguage(get(language), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Data::Text::WordsSegmenter impl_IWordsSegmenterFactory<T>::CreateWithLanguage(wchar_t const (&language)[S0]) const
{
	Windows::Data::Text::WordsSegmenter result(nullptr);
	check(static_cast<IWordsSegmenterFactory const &>(static_cast<T const &>(*this))->abi_CreateWithLanguage(StringReference(language), set(result)));
	return result;
}

template <typename T> String impl_ISelectableWordsSegmenter<T>::ResolvedLanguage() const
{
	String value = {};
	check(static_cast<ISelectableWordsSegmenter const &>(static_cast<T const &>(*this))->get_ResolvedLanguage(set(value)));
	return value;
}

template <typename T> Windows::Data::Text::SelectableWordSegment impl_ISelectableWordsSegmenter<T>::GetTokenAt(String const & text, unsigned const startIndex) const
{
	Windows::Data::Text::SelectableWordSegment result(nullptr);
	check(static_cast<ISelectableWordsSegmenter const &>(static_cast<T const &>(*this))->abi_GetTokenAt(get(text), startIndex, set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Data::Text::SelectableWordSegment impl_ISelectableWordsSegmenter<T>::GetTokenAt(wchar_t const (&text)[S0], unsigned const startIndex) const
{
	Windows::Data::Text::SelectableWordSegment result(nullptr);
	check(static_cast<ISelectableWordsSegmenter const &>(static_cast<T const &>(*this))->abi_GetTokenAt(StringReference(text), startIndex, set(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> impl_ISelectableWordsSegmenter<T>::GetTokens(String const & text) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> result = {};
	check(static_cast<ISelectableWordsSegmenter const &>(static_cast<T const &>(*this))->abi_GetTokens(get(text), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> impl_ISelectableWordsSegmenter<T>::GetTokens(wchar_t const (&text)[S0]) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> result = {};
	check(static_cast<ISelectableWordsSegmenter const &>(static_cast<T const &>(*this))->abi_GetTokens(StringReference(text), set(result)));
	return result;
}

template <typename T> void impl_ISelectableWordsSegmenter<T>::Tokenize(String const & text, unsigned const startIndex, Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler const & handler) const
{
	check(static_cast<ISelectableWordsSegmenter const &>(static_cast<T const &>(*this))->abi_Tokenize(get(text), startIndex, get(handler)));
}

template <typename T> template <unsigned S0> void impl_ISelectableWordsSegmenter<T>::Tokenize(wchar_t const (&text)[S0], unsigned const startIndex, Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler const & handler) const
{
	check(static_cast<ISelectableWordsSegmenter const &>(static_cast<T const &>(*this))->abi_Tokenize(StringReference(text), startIndex, get(handler)));
}

template <typename T> template <typename F> void impl_ISelectableWordsSegmenter<T>::Tokenize(String const & text, unsigned const startIndex, F handler) const
{
	Tokenize(text, startIndex, Windows::Data::Text::SelectableWordSegmentsTokenizingHandler(handler));
}

template <typename T> template <unsigned S0, typename F> void impl_ISelectableWordsSegmenter<T>::Tokenize(wchar_t const (&text)[S0], unsigned const startIndex, F handler) const
{
	Tokenize(text, startIndex, Windows::Data::Text::SelectableWordSegmentsTokenizingHandler(handler));
}

template <typename T> Windows::Data::Text::SelectableWordsSegmenter impl_ISelectableWordsSegmenterFactory<T>::CreateWithLanguage(String const & language) const
{
	Windows::Data::Text::SelectableWordsSegmenter result(nullptr);
	check(static_cast<ISelectableWordsSegmenterFactory const &>(static_cast<T const &>(*this))->abi_CreateWithLanguage(get(language), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Data::Text::SelectableWordsSegmenter impl_ISelectableWordsSegmenterFactory<T>::CreateWithLanguage(wchar_t const (&language)[S0]) const
{
	Windows::Data::Text::SelectableWordsSegmenter result(nullptr);
	check(static_cast<ISelectableWordsSegmenterFactory const &>(static_cast<T const &>(*this))->abi_CreateWithLanguage(StringReference(language), set(result)));
	return result;
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNodeSelector<T>::SelectSingleNode(String const & xpath) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNodeSelector const &>(static_cast<T const &>(*this))->abi_SelectSingleNode(get(xpath), set(node)));
	return node;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNodeSelector<T>::SelectSingleNode(wchar_t const (&xpath)[S0]) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNodeSelector const &>(static_cast<T const &>(*this))->abi_SelectSingleNode(StringReference(xpath), set(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlNodeSelector<T>::SelectNodes(String const & xpath) const
{
	Windows::Data::Xml::Dom::XmlNodeList nodelist(nullptr);
	check(static_cast<IXmlNodeSelector const &>(static_cast<T const &>(*this))->abi_SelectNodes(get(xpath), set(nodelist)));
	return nodelist;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlNodeSelector<T>::SelectNodes(wchar_t const (&xpath)[S0]) const
{
	Windows::Data::Xml::Dom::XmlNodeList nodelist(nullptr);
	check(static_cast<IXmlNodeSelector const &>(static_cast<T const &>(*this))->abi_SelectNodes(StringReference(xpath), set(nodelist)));
	return nodelist;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNodeSelector<T>::SelectSingleNodeNS(String const & xpath, IInspectable const & namespaces) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNodeSelector const &>(static_cast<T const &>(*this))->abi_SelectSingleNodeNS(get(xpath), get(namespaces), set(node)));
	return node;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNodeSelector<T>::SelectSingleNodeNS(wchar_t const (&xpath)[S0], IInspectable const & namespaces) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNodeSelector const &>(static_cast<T const &>(*this))->abi_SelectSingleNodeNS(StringReference(xpath), get(namespaces), set(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlNodeSelector<T>::SelectNodesNS(String const & xpath, IInspectable const & namespaces) const
{
	Windows::Data::Xml::Dom::XmlNodeList nodelist(nullptr);
	check(static_cast<IXmlNodeSelector const &>(static_cast<T const &>(*this))->abi_SelectNodesNS(get(xpath), get(namespaces), set(nodelist)));
	return nodelist;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlNodeSelector<T>::SelectNodesNS(wchar_t const (&xpath)[S0], IInspectable const & namespaces) const
{
	Windows::Data::Xml::Dom::XmlNodeList nodelist(nullptr);
	check(static_cast<IXmlNodeSelector const &>(static_cast<T const &>(*this))->abi_SelectNodesNS(StringReference(xpath), get(namespaces), set(nodelist)));
	return nodelist;
}

template <typename T> String impl_IXmlNodeSerializer<T>::GetXml() const
{
	String outerXml = {};
	check(static_cast<IXmlNodeSerializer const &>(static_cast<T const &>(*this))->abi_GetXml(set(outerXml)));
	return outerXml;
}

template <typename T> String impl_IXmlNodeSerializer<T>::InnerText() const
{
	String value = {};
	check(static_cast<IXmlNodeSerializer const &>(static_cast<T const &>(*this))->get_InnerText(set(value)));
	return value;
}

template <typename T> void impl_IXmlNodeSerializer<T>::InnerText(String const & value) const
{
	check(static_cast<IXmlNodeSerializer const &>(static_cast<T const &>(*this))->put_InnerText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IXmlNodeSerializer<T>::InnerText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IXmlNodeSerializer const &>(static_cast<T const &>(*this))->put_InnerText(StringReference(value)));
}

template <typename T> IInspectable impl_IXmlNode<T>::NodeValue() const
{
	IInspectable value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_NodeValue(set(value)));
	return value;
}

template <typename T> void impl_IXmlNode<T>::NodeValue(IInspectable const & value) const
{
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->put_NodeValue(get(value)));
}

template <typename T> Windows::Data::Xml::Dom::NodeType impl_IXmlNode<T>::NodeType() const
{
	Windows::Data::Xml::Dom::NodeType value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_NodeType(&value));
	return value;
}

template <typename T> String impl_IXmlNode<T>::NodeName() const
{
	String value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_NodeName(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::ParentNode() const
{
	Windows::Data::Xml::Dom::IXmlNode value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_ParentNode(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlNode<T>::ChildNodes() const
{
	Windows::Data::Xml::Dom::XmlNodeList value(nullptr);
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_ChildNodes(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::FirstChild() const
{
	Windows::Data::Xml::Dom::IXmlNode value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_FirstChild(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::LastChild() const
{
	Windows::Data::Xml::Dom::IXmlNode value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_LastChild(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::PreviousSibling() const
{
	Windows::Data::Xml::Dom::IXmlNode value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_PreviousSibling(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::NextSibling() const
{
	Windows::Data::Xml::Dom::IXmlNode value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_NextSibling(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlNamedNodeMap impl_IXmlNode<T>::Attributes() const
{
	Windows::Data::Xml::Dom::XmlNamedNodeMap value(nullptr);
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_Attributes(set(value)));
	return value;
}

template <typename T> bool impl_IXmlNode<T>::HasChildNodes() const
{
	bool value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->abi_HasChildNodes(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IXmlNode<T>::OwnerDocument() const
{
	Windows::Data::Xml::Dom::XmlDocument value(nullptr);
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_OwnerDocument(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::InsertBefore(Windows::Data::Xml::Dom::IXmlNode const & newChild, Windows::Data::Xml::Dom::IXmlNode const & referenceChild) const
{
	Windows::Data::Xml::Dom::IXmlNode insertedChild = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->abi_InsertBefore(get(newChild), get(referenceChild), set(insertedChild)));
	return insertedChild;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::ReplaceChild(Windows::Data::Xml::Dom::IXmlNode const & newChild, Windows::Data::Xml::Dom::IXmlNode const & referenceChild) const
{
	Windows::Data::Xml::Dom::IXmlNode previousChild = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->abi_ReplaceChild(get(newChild), get(referenceChild), set(previousChild)));
	return previousChild;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::RemoveChild(Windows::Data::Xml::Dom::IXmlNode const & childNode) const
{
	Windows::Data::Xml::Dom::IXmlNode removedChild = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->abi_RemoveChild(get(childNode), set(removedChild)));
	return removedChild;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::AppendChild(Windows::Data::Xml::Dom::IXmlNode const & newChild) const
{
	Windows::Data::Xml::Dom::IXmlNode appendedChild = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->abi_AppendChild(get(newChild), set(appendedChild)));
	return appendedChild;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::CloneNode(bool const deep) const
{
	Windows::Data::Xml::Dom::IXmlNode newNode = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->abi_CloneNode(deep, set(newNode)));
	return newNode;
}

template <typename T> IInspectable impl_IXmlNode<T>::NamespaceUri() const
{
	IInspectable value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_NamespaceUri(set(value)));
	return value;
}

template <typename T> IInspectable impl_IXmlNode<T>::LocalName() const
{
	IInspectable value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_LocalName(set(value)));
	return value;
}

template <typename T> IInspectable impl_IXmlNode<T>::Prefix() const
{
	IInspectable value = {};
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->get_Prefix(set(value)));
	return value;
}

template <typename T> void impl_IXmlNode<T>::Normalize() const
{
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->abi_Normalize());
}

template <typename T> void impl_IXmlNode<T>::Prefix(IInspectable const & value) const
{
	check(static_cast<IXmlNode const &>(static_cast<T const &>(*this))->put_Prefix(get(value)));
}

template <typename T> bool impl_IXmlDomImplementation<T>::HasFeature(String const & feature, IInspectable const & version) const
{
	bool featureSupported = {};
	check(static_cast<IXmlDomImplementation const &>(static_cast<T const &>(*this))->abi_HasFeature(get(feature), get(version), BoolProxy(featureSupported)));
	return featureSupported;
}

template <typename T> template <unsigned S0> bool impl_IXmlDomImplementation<T>::HasFeature(wchar_t const (&feature)[S0], IInspectable const & version) const
{
	bool featureSupported = {};
	check(static_cast<IXmlDomImplementation const &>(static_cast<T const &>(*this))->abi_HasFeature(StringReference(feature), get(version), BoolProxy(featureSupported)));
	return featureSupported;
}

template <typename T> String impl_IXmlDocumentType<T>::Name() const
{
	String value = {};
	check(static_cast<IXmlDocumentType const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlNamedNodeMap impl_IXmlDocumentType<T>::Entities() const
{
	Windows::Data::Xml::Dom::XmlNamedNodeMap value(nullptr);
	check(static_cast<IXmlDocumentType const &>(static_cast<T const &>(*this))->get_Entities(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlNamedNodeMap impl_IXmlDocumentType<T>::Notations() const
{
	Windows::Data::Xml::Dom::XmlNamedNodeMap value(nullptr);
	check(static_cast<IXmlDocumentType const &>(static_cast<T const &>(*this))->get_Notations(set(value)));
	return value;
}

template <typename T> String impl_IXmlAttribute<T>::Name() const
{
	String value = {};
	check(static_cast<IXmlAttribute const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> bool impl_IXmlAttribute<T>::Specified() const
{
	bool value = {};
	check(static_cast<IXmlAttribute const &>(static_cast<T const &>(*this))->get_Specified(BoolProxy(value)));
	return value;
}

template <typename T> String impl_IXmlAttribute<T>::Value() const
{
	String value = {};
	check(static_cast<IXmlAttribute const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> void impl_IXmlAttribute<T>::Value(String const & value) const
{
	check(static_cast<IXmlAttribute const &>(static_cast<T const &>(*this))->put_Value(get(value)));
}

template <typename T> template <unsigned S0> void impl_IXmlAttribute<T>::Value(wchar_t const (&value)[S0]) const
{
	check(static_cast<IXmlAttribute const &>(static_cast<T const &>(*this))->put_Value(StringReference(value)));
}

template <typename T> String impl_IXmlElement<T>::TagName() const
{
	String value = {};
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->get_TagName(set(value)));
	return value;
}

template <typename T> String impl_IXmlElement<T>::GetAttribute(String const & attributeName) const
{
	String attributeValue = {};
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetAttribute(get(attributeName), set(attributeValue)));
	return attributeValue;
}

template <typename T> template <unsigned S0> String impl_IXmlElement<T>::GetAttribute(wchar_t const (&attributeName)[S0]) const
{
	String attributeValue = {};
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetAttribute(StringReference(attributeName), set(attributeValue)));
	return attributeValue;
}

template <typename T> void impl_IXmlElement<T>::SetAttribute(String const & attributeName, String const & attributeValue) const
{
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_SetAttribute(get(attributeName), get(attributeValue)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IXmlElement<T>::SetAttribute(wchar_t const (&attributeName)[S0], wchar_t const (&attributeValue)[S1]) const
{
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_SetAttribute(StringReference(attributeName), StringReference(attributeValue)));
}

template <typename T> void impl_IXmlElement<T>::RemoveAttribute(String const & attributeName) const
{
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_RemoveAttribute(get(attributeName)));
}

template <typename T> template <unsigned S0> void impl_IXmlElement<T>::RemoveAttribute(wchar_t const (&attributeName)[S0]) const
{
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_RemoveAttribute(StringReference(attributeName)));
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::GetAttributeNode(String const & attributeName) const
{
	Windows::Data::Xml::Dom::XmlAttribute attributeNode(nullptr);
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetAttributeNode(get(attributeName), set(attributeNode)));
	return attributeNode;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::GetAttributeNode(wchar_t const (&attributeName)[S0]) const
{
	Windows::Data::Xml::Dom::XmlAttribute attributeNode(nullptr);
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetAttributeNode(StringReference(attributeName), set(attributeNode)));
	return attributeNode;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::SetAttributeNode(Windows::Data::Xml::Dom::XmlAttribute const & newAttribute) const
{
	Windows::Data::Xml::Dom::XmlAttribute previousAttribute(nullptr);
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_SetAttributeNode(get(newAttribute), set(previousAttribute)));
	return previousAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::RemoveAttributeNode(Windows::Data::Xml::Dom::XmlAttribute const & attributeNode) const
{
	Windows::Data::Xml::Dom::XmlAttribute removedAttribute(nullptr);
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_RemoveAttributeNode(get(attributeNode), set(removedAttribute)));
	return removedAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlElement<T>::GetElementsByTagName(String const & tagName) const
{
	Windows::Data::Xml::Dom::XmlNodeList elements(nullptr);
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetElementsByTagName(get(tagName), set(elements)));
	return elements;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlElement<T>::GetElementsByTagName(wchar_t const (&tagName)[S0]) const
{
	Windows::Data::Xml::Dom::XmlNodeList elements(nullptr);
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetElementsByTagName(StringReference(tagName), set(elements)));
	return elements;
}

template <typename T> void impl_IXmlElement<T>::SetAttributeNS(IInspectable const & namespaceUri, String const & qualifiedName, String const & value) const
{
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_SetAttributeNS(get(namespaceUri), get(qualifiedName), get(value)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IXmlElement<T>::SetAttributeNS(IInspectable const & namespaceUri, wchar_t const (&qualifiedName)[S0], wchar_t const (&value)[S1]) const
{
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_SetAttributeNS(get(namespaceUri), StringReference(qualifiedName), StringReference(value)));
}

template <typename T> String impl_IXmlElement<T>::GetAttributeNS(IInspectable const & namespaceUri, String const & localName) const
{
	String value = {};
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetAttributeNS(get(namespaceUri), get(localName), set(value)));
	return value;
}

template <typename T> template <unsigned S0> String impl_IXmlElement<T>::GetAttributeNS(IInspectable const & namespaceUri, wchar_t const (&localName)[S0]) const
{
	String value = {};
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetAttributeNS(get(namespaceUri), StringReference(localName), set(value)));
	return value;
}

template <typename T> void impl_IXmlElement<T>::RemoveAttributeNS(IInspectable const & namespaceUri, String const & localName) const
{
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_RemoveAttributeNS(get(namespaceUri), get(localName)));
}

template <typename T> template <unsigned S0> void impl_IXmlElement<T>::RemoveAttributeNS(IInspectable const & namespaceUri, wchar_t const (&localName)[S0]) const
{
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_RemoveAttributeNS(get(namespaceUri), StringReference(localName)));
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::SetAttributeNodeNS(Windows::Data::Xml::Dom::XmlAttribute const & newAttribute) const
{
	Windows::Data::Xml::Dom::XmlAttribute previousAttribute(nullptr);
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_SetAttributeNodeNS(get(newAttribute), set(previousAttribute)));
	return previousAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::GetAttributeNodeNS(IInspectable const & namespaceUri, String const & localName) const
{
	Windows::Data::Xml::Dom::XmlAttribute previousAttribute(nullptr);
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetAttributeNodeNS(get(namespaceUri), get(localName), set(previousAttribute)));
	return previousAttribute;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::GetAttributeNodeNS(IInspectable const & namespaceUri, wchar_t const (&localName)[S0]) const
{
	Windows::Data::Xml::Dom::XmlAttribute previousAttribute(nullptr);
	check(static_cast<IXmlElement const &>(static_cast<T const &>(*this))->abi_GetAttributeNodeNS(get(namespaceUri), StringReference(localName), set(previousAttribute)));
	return previousAttribute;
}

template <typename T> IInspectable impl_IDtdNotation<T>::PublicId() const
{
	IInspectable value = {};
	check(static_cast<IDtdNotation const &>(static_cast<T const &>(*this))->get_PublicId(set(value)));
	return value;
}

template <typename T> IInspectable impl_IDtdNotation<T>::SystemId() const
{
	IInspectable value = {};
	check(static_cast<IDtdNotation const &>(static_cast<T const &>(*this))->get_SystemId(set(value)));
	return value;
}

template <typename T> IInspectable impl_IDtdEntity<T>::PublicId() const
{
	IInspectable value = {};
	check(static_cast<IDtdEntity const &>(static_cast<T const &>(*this))->get_PublicId(set(value)));
	return value;
}

template <typename T> IInspectable impl_IDtdEntity<T>::SystemId() const
{
	IInspectable value = {};
	check(static_cast<IDtdEntity const &>(static_cast<T const &>(*this))->get_SystemId(set(value)));
	return value;
}

template <typename T> IInspectable impl_IDtdEntity<T>::NotationName() const
{
	IInspectable value = {};
	check(static_cast<IDtdEntity const &>(static_cast<T const &>(*this))->get_NotationName(set(value)));
	return value;
}

template <typename T> String impl_IXmlProcessingInstruction<T>::Target() const
{
	String value = {};
	check(static_cast<IXmlProcessingInstruction const &>(static_cast<T const &>(*this))->get_Target(set(value)));
	return value;
}

template <typename T> String impl_IXmlProcessingInstruction<T>::Data() const
{
	String value = {};
	check(static_cast<IXmlProcessingInstruction const &>(static_cast<T const &>(*this))->get_Data(set(value)));
	return value;
}

template <typename T> void impl_IXmlProcessingInstruction<T>::Data(String const & value) const
{
	check(static_cast<IXmlProcessingInstruction const &>(static_cast<T const &>(*this))->put_Data(get(value)));
}

template <typename T> template <unsigned S0> void impl_IXmlProcessingInstruction<T>::Data(wchar_t const (&value)[S0]) const
{
	check(static_cast<IXmlProcessingInstruction const &>(static_cast<T const &>(*this))->put_Data(StringReference(value)));
}

template <typename T> String impl_IXmlCharacterData<T>::Data() const
{
	String value = {};
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->get_Data(set(value)));
	return value;
}

template <typename T> void impl_IXmlCharacterData<T>::Data(String const & value) const
{
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->put_Data(get(value)));
}

template <typename T> template <unsigned S0> void impl_IXmlCharacterData<T>::Data(wchar_t const (&value)[S0]) const
{
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->put_Data(StringReference(value)));
}

template <typename T> unsigned impl_IXmlCharacterData<T>::Length() const
{
	unsigned value = {};
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->get_Length(&value));
	return value;
}

template <typename T> String impl_IXmlCharacterData<T>::SubstringData(unsigned const offset, unsigned const count) const
{
	String data = {};
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->abi_SubstringData(offset, count, set(data)));
	return data;
}

template <typename T> void impl_IXmlCharacterData<T>::AppendData(String const & data) const
{
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->abi_AppendData(get(data)));
}

template <typename T> template <unsigned S0> void impl_IXmlCharacterData<T>::AppendData(wchar_t const (&data)[S0]) const
{
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->abi_AppendData(StringReference(data)));
}

template <typename T> void impl_IXmlCharacterData<T>::InsertData(unsigned const offset, String const & data) const
{
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->abi_InsertData(offset, get(data)));
}

template <typename T> template <unsigned S0> void impl_IXmlCharacterData<T>::InsertData(unsigned const offset, wchar_t const (&data)[S0]) const
{
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->abi_InsertData(offset, StringReference(data)));
}

template <typename T> void impl_IXmlCharacterData<T>::DeleteData(unsigned const offset, unsigned const count) const
{
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->abi_DeleteData(offset, count));
}

template <typename T> void impl_IXmlCharacterData<T>::ReplaceData(unsigned const offset, unsigned const count, String const & data) const
{
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->abi_ReplaceData(offset, count, get(data)));
}

template <typename T> template <unsigned S0> void impl_IXmlCharacterData<T>::ReplaceData(unsigned const offset, unsigned const count, wchar_t const (&data)[S0]) const
{
	check(static_cast<IXmlCharacterData const &>(static_cast<T const &>(*this))->abi_ReplaceData(offset, count, StringReference(data)));
}

template <typename T> Windows::Data::Xml::Dom::IXmlText impl_IXmlText<T>::SplitText(unsigned const offset) const
{
	Windows::Data::Xml::Dom::IXmlText secondPart = {};
	check(static_cast<IXmlText const &>(static_cast<T const &>(*this))->abi_SplitText(offset, set(secondPart)));
	return secondPart;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocumentType impl_IXmlDocument<T>::Doctype() const
{
	Windows::Data::Xml::Dom::XmlDocumentType value(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->get_Doctype(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDomImplementation impl_IXmlDocument<T>::Implementation() const
{
	Windows::Data::Xml::Dom::XmlDomImplementation value(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->get_Implementation(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::DocumentElement() const
{
	Windows::Data::Xml::Dom::XmlElement value(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->get_DocumentElement(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::CreateElement(String const & tagName) const
{
	Windows::Data::Xml::Dom::XmlElement newElement(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateElement(get(tagName), set(newElement)));
	return newElement;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::CreateElement(wchar_t const (&tagName)[S0]) const
{
	Windows::Data::Xml::Dom::XmlElement newElement(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateElement(StringReference(tagName), set(newElement)));
	return newElement;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocumentFragment impl_IXmlDocument<T>::CreateDocumentFragment() const
{
	Windows::Data::Xml::Dom::XmlDocumentFragment newDocumentFragment(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateDocumentFragment(set(newDocumentFragment)));
	return newDocumentFragment;
}

template <typename T> Windows::Data::Xml::Dom::XmlText impl_IXmlDocument<T>::CreateTextNode(String const & data) const
{
	Windows::Data::Xml::Dom::XmlText newTextNode(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateTextNode(get(data), set(newTextNode)));
	return newTextNode;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlText impl_IXmlDocument<T>::CreateTextNode(wchar_t const (&data)[S0]) const
{
	Windows::Data::Xml::Dom::XmlText newTextNode(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateTextNode(StringReference(data), set(newTextNode)));
	return newTextNode;
}

template <typename T> Windows::Data::Xml::Dom::XmlComment impl_IXmlDocument<T>::CreateComment(String const & data) const
{
	Windows::Data::Xml::Dom::XmlComment newComment(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateComment(get(data), set(newComment)));
	return newComment;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlComment impl_IXmlDocument<T>::CreateComment(wchar_t const (&data)[S0]) const
{
	Windows::Data::Xml::Dom::XmlComment newComment(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateComment(StringReference(data), set(newComment)));
	return newComment;
}

template <typename T> Windows::Data::Xml::Dom::XmlProcessingInstruction impl_IXmlDocument<T>::CreateProcessingInstruction(String const & target, String const & data) const
{
	Windows::Data::Xml::Dom::XmlProcessingInstruction newProcessingInstruction(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateProcessingInstruction(get(target), get(data), set(newProcessingInstruction)));
	return newProcessingInstruction;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Data::Xml::Dom::XmlProcessingInstruction impl_IXmlDocument<T>::CreateProcessingInstruction(wchar_t const (&target)[S0], wchar_t const (&data)[S1]) const
{
	Windows::Data::Xml::Dom::XmlProcessingInstruction newProcessingInstruction(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateProcessingInstruction(StringReference(target), StringReference(data), set(newProcessingInstruction)));
	return newProcessingInstruction;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlDocument<T>::CreateAttribute(String const & name) const
{
	Windows::Data::Xml::Dom::XmlAttribute newAttribute(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateAttribute(get(name), set(newAttribute)));
	return newAttribute;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlDocument<T>::CreateAttribute(wchar_t const (&name)[S0]) const
{
	Windows::Data::Xml::Dom::XmlAttribute newAttribute(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateAttribute(StringReference(name), set(newAttribute)));
	return newAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlEntityReference impl_IXmlDocument<T>::CreateEntityReference(String const & name) const
{
	Windows::Data::Xml::Dom::XmlEntityReference newEntityReference(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateEntityReference(get(name), set(newEntityReference)));
	return newEntityReference;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlEntityReference impl_IXmlDocument<T>::CreateEntityReference(wchar_t const (&name)[S0]) const
{
	Windows::Data::Xml::Dom::XmlEntityReference newEntityReference(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateEntityReference(StringReference(name), set(newEntityReference)));
	return newEntityReference;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlDocument<T>::GetElementsByTagName(String const & tagName) const
{
	Windows::Data::Xml::Dom::XmlNodeList elements(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_GetElementsByTagName(get(tagName), set(elements)));
	return elements;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlDocument<T>::GetElementsByTagName(wchar_t const (&tagName)[S0]) const
{
	Windows::Data::Xml::Dom::XmlNodeList elements(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_GetElementsByTagName(StringReference(tagName), set(elements)));
	return elements;
}

template <typename T> Windows::Data::Xml::Dom::XmlCDataSection impl_IXmlDocument<T>::CreateCDataSection(String const & data) const
{
	Windows::Data::Xml::Dom::XmlCDataSection newCDataSection(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateCDataSection(get(data), set(newCDataSection)));
	return newCDataSection;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlCDataSection impl_IXmlDocument<T>::CreateCDataSection(wchar_t const (&data)[S0]) const
{
	Windows::Data::Xml::Dom::XmlCDataSection newCDataSection(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateCDataSection(StringReference(data), set(newCDataSection)));
	return newCDataSection;
}

template <typename T> String impl_IXmlDocument<T>::DocumentUri() const
{
	String value = {};
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->get_DocumentUri(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlDocument<T>::CreateAttributeNS(IInspectable const & namespaceUri, String const & qualifiedName) const
{
	Windows::Data::Xml::Dom::XmlAttribute newAttribute(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateAttributeNS(get(namespaceUri), get(qualifiedName), set(newAttribute)));
	return newAttribute;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlDocument<T>::CreateAttributeNS(IInspectable const & namespaceUri, wchar_t const (&qualifiedName)[S0]) const
{
	Windows::Data::Xml::Dom::XmlAttribute newAttribute(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateAttributeNS(get(namespaceUri), StringReference(qualifiedName), set(newAttribute)));
	return newAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::CreateElementNS(IInspectable const & namespaceUri, String const & qualifiedName) const
{
	Windows::Data::Xml::Dom::XmlElement newElement(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateElementNS(get(namespaceUri), get(qualifiedName), set(newElement)));
	return newElement;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::CreateElementNS(IInspectable const & namespaceUri, wchar_t const (&qualifiedName)[S0]) const
{
	Windows::Data::Xml::Dom::XmlElement newElement(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_CreateElementNS(get(namespaceUri), StringReference(qualifiedName), set(newElement)));
	return newElement;
}

template <typename T> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::GetElementById(String const & elementId) const
{
	Windows::Data::Xml::Dom::XmlElement element(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_GetElementById(get(elementId), set(element)));
	return element;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::GetElementById(wchar_t const (&elementId)[S0]) const
{
	Windows::Data::Xml::Dom::XmlElement element(nullptr);
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_GetElementById(StringReference(elementId), set(element)));
	return element;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlDocument<T>::ImportNode(Windows::Data::Xml::Dom::IXmlNode const & node, bool const deep) const
{
	Windows::Data::Xml::Dom::IXmlNode newNode = {};
	check(static_cast<IXmlDocument const &>(static_cast<T const &>(*this))->abi_ImportNode(get(node), deep, set(newNode)));
	return newNode;
}

template <typename T> unsigned impl_IXmlNamedNodeMap<T>::Length() const
{
	unsigned value = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->get_Length(&value));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::Item(unsigned const index) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_Item(index, set(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::GetNamedItem(String const & name) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_GetNamedItem(get(name), set(node)));
	return node;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::GetNamedItem(wchar_t const (&name)[S0]) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_GetNamedItem(StringReference(name), set(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::SetNamedItem(Windows::Data::Xml::Dom::IXmlNode const & node) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_SetNamedItem(get(node), set(previousNode)));
	return previousNode;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::RemoveNamedItem(String const & name) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_RemoveNamedItem(get(name), set(previousNode)));
	return previousNode;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::RemoveNamedItem(wchar_t const (&name)[S0]) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_RemoveNamedItem(StringReference(name), set(previousNode)));
	return previousNode;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::GetNamedItemNS(IInspectable const & namespaceUri, String const & name) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_GetNamedItemNS(get(namespaceUri), get(name), set(node)));
	return node;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::GetNamedItemNS(IInspectable const & namespaceUri, wchar_t const (&name)[S0]) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_GetNamedItemNS(get(namespaceUri), StringReference(name), set(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::RemoveNamedItemNS(IInspectable const & namespaceUri, String const & name) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_RemoveNamedItemNS(get(namespaceUri), get(name), set(previousNode)));
	return previousNode;
}

template <typename T> template <unsigned S0> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::RemoveNamedItemNS(IInspectable const & namespaceUri, wchar_t const (&name)[S0]) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_RemoveNamedItemNS(get(namespaceUri), StringReference(name), set(previousNode)));
	return previousNode;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::SetNamedItemNS(Windows::Data::Xml::Dom::IXmlNode const & node) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode = {};
	check(static_cast<IXmlNamedNodeMap const &>(static_cast<T const &>(*this))->abi_SetNamedItemNS(get(node), set(previousNode)));
	return previousNode;
}

template <typename T> unsigned impl_IXmlNodeList<T>::Length() const
{
	unsigned value = {};
	check(static_cast<IXmlNodeList const &>(static_cast<T const &>(*this))->get_Length(&value));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNodeList<T>::Item(unsigned const index) const
{
	Windows::Data::Xml::Dom::IXmlNode node = {};
	check(static_cast<IXmlNodeList const &>(static_cast<T const &>(*this))->abi_Item(index, set(node)));
	return node;
}

template <typename T> unsigned impl_IXmlLoadSettings<T>::MaxElementDepth() const
{
	unsigned value = {};
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->get_MaxElementDepth(&value));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::MaxElementDepth(unsigned const value) const
{
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->put_MaxElementDepth(value));
}

template <typename T> bool impl_IXmlLoadSettings<T>::ProhibitDtd() const
{
	bool value = {};
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->get_ProhibitDtd(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::ProhibitDtd(bool const value) const
{
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->put_ProhibitDtd(value));
}

template <typename T> bool impl_IXmlLoadSettings<T>::ResolveExternals() const
{
	bool value = {};
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->get_ResolveExternals(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::ResolveExternals(bool const value) const
{
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->put_ResolveExternals(value));
}

template <typename T> bool impl_IXmlLoadSettings<T>::ValidateOnParse() const
{
	bool value = {};
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->get_ValidateOnParse(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::ValidateOnParse(bool const value) const
{
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->put_ValidateOnParse(value));
}

template <typename T> bool impl_IXmlLoadSettings<T>::ElementContentWhiteSpace() const
{
	bool value = {};
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->get_ElementContentWhiteSpace(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::ElementContentWhiteSpace(bool const value) const
{
	check(static_cast<IXmlLoadSettings const &>(static_cast<T const &>(*this))->put_ElementContentWhiteSpace(value));
}

template <typename T> void impl_IXmlDocumentIO<T>::LoadXml(String const & xml) const
{
	check(static_cast<IXmlDocumentIO const &>(static_cast<T const &>(*this))->abi_LoadXml(get(xml)));
}

template <typename T> template <unsigned S0> void impl_IXmlDocumentIO<T>::LoadXml(wchar_t const (&xml)[S0]) const
{
	check(static_cast<IXmlDocumentIO const &>(static_cast<T const &>(*this))->abi_LoadXml(StringReference(xml)));
}

template <typename T> void impl_IXmlDocumentIO<T>::LoadXml(String const & xml, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const
{
	check(static_cast<IXmlDocumentIO const &>(static_cast<T const &>(*this))->abi_LoadXmlWithSettings(get(xml), get(loadSettings)));
}

template <typename T> template <unsigned S0> void impl_IXmlDocumentIO<T>::LoadXml(wchar_t const (&xml)[S0], Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const
{
	check(static_cast<IXmlDocumentIO const &>(static_cast<T const &>(*this))->abi_LoadXmlWithSettings(StringReference(xml), get(loadSettings)));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IXmlDocumentIO<T>::SaveToFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IXmlDocumentIO const &>(static_cast<T const &>(*this))->abi_SaveToFileAsync(get(file), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> impl_IXmlDocumentStatics<T>::LoadFromUriAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> asyncInfo = {};
	check(static_cast<IXmlDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromUriAsync(get(uri), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> impl_IXmlDocumentStatics<T>::LoadFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> asyncInfo = {};
	check(static_cast<IXmlDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromUriWithSettingsAsync(get(uri), get(loadSettings), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> impl_IXmlDocumentStatics<T>::LoadFromFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> asyncInfo = {};
	check(static_cast<IXmlDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromFileAsync(get(file), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> impl_IXmlDocumentStatics<T>::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> asyncInfo = {};
	check(static_cast<IXmlDocumentStatics const &>(static_cast<T const &>(*this))->abi_LoadFromFileWithSettingsAsync(get(file), get(loadSettings), set(asyncInfo)));
	return asyncInfo;
}

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

template <typename T> String impl_IXsltProcessor<T>::TransformToString(Windows::Data::Xml::Dom::IXmlNode const & inputNode) const
{
	String output = {};
	check(static_cast<IXsltProcessor const &>(static_cast<T const &>(*this))->abi_TransformToString(get(inputNode), set(output)));
	return output;
}

template <typename T> Windows::Data::Xml::Xsl::XsltProcessor impl_IXsltProcessorFactory<T>::CreateInstance(Windows::Data::Xml::Dom::XmlDocument const & document) const
{
	Windows::Data::Xml::Xsl::XsltProcessor xsltProcessor(nullptr);
	check(static_cast<IXsltProcessorFactory const &>(static_cast<T const &>(*this))->abi_CreateInstance(get(document), set(xsltProcessor)));
	return xsltProcessor;
}

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

template <typename T> String impl_IDeviceUseDetails<T>::DeviceId() const
{
	String value = {};
	check(static_cast<IDeviceUseDetails const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> String impl_IDeviceUseDetails<T>::Arguments() const
{
	String value = {};
	check(static_cast<IDeviceUseDetails const &>(static_cast<T const &>(*this))->get_Arguments(set(value)));
	return value;
}

template <typename T> String impl_IDeviceServicingDetails<T>::DeviceId() const
{
	String value = {};
	check(static_cast<IDeviceServicingDetails const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> String impl_IDeviceServicingDetails<T>::Arguments() const
{
	String value = {};
	check(static_cast<IDeviceServicingDetails const &>(static_cast<T const &>(*this))->get_Arguments(set(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IDeviceServicingDetails<T>::ExpectedDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IDeviceServicingDetails const &>(static_cast<T const &>(*this))->get_ExpectedDuration(&value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

template <typename T> unsigned short impl_IKnownDeviceTypesStatics<T>::Unknown() const
{
	unsigned short value = {};
	check(static_cast<IKnownDeviceTypesStatics const &>(static_cast<T const &>(*this))->get_Unknown(&value));
	return value;
}

template <typename T> Windows::Devices::Custom::IOControlAccessMode impl_IIOControlCode<T>::AccessMode() const
{
	Windows::Devices::Custom::IOControlAccessMode value = {};
	check(static_cast<IIOControlCode const &>(static_cast<T const &>(*this))->get_AccessMode(&value));
	return value;
}

template <typename T> Windows::Devices::Custom::IOControlBufferingMethod impl_IIOControlCode<T>::BufferingMethod() const
{
	Windows::Devices::Custom::IOControlBufferingMethod value = {};
	check(static_cast<IIOControlCode const &>(static_cast<T const &>(*this))->get_BufferingMethod(&value));
	return value;
}

template <typename T> unsigned short impl_IIOControlCode<T>::Function() const
{
	unsigned short value = {};
	check(static_cast<IIOControlCode const &>(static_cast<T const &>(*this))->get_Function(&value));
	return value;
}

template <typename T> unsigned short impl_IIOControlCode<T>::DeviceType() const
{
	unsigned short value = {};
	check(static_cast<IIOControlCode const &>(static_cast<T const &>(*this))->get_DeviceType(&value));
	return value;
}

template <typename T> unsigned impl_IIOControlCode<T>::ControlCode() const
{
	unsigned value = {};
	check(static_cast<IIOControlCode const &>(static_cast<T const &>(*this))->get_ControlCode(&value));
	return value;
}

template <typename T> Windows::Devices::Custom::IOControlCode impl_IIOControlCodeFactory<T>::CreateIOControlCode(unsigned short const deviceType, unsigned short const function, Windows::Devices::Custom::IOControlAccessMode const accessMode, Windows::Devices::Custom::IOControlBufferingMethod const bufferingMethod) const
{
	Windows::Devices::Custom::IOControlCode instance(nullptr);
	check(static_cast<IIOControlCodeFactory const &>(static_cast<T const &>(*this))->abi_CreateIOControlCode(deviceType, function, accessMode, bufferingMethod, set(instance)));
	return instance;
}

template <typename T> String impl_ICustomDeviceStatics<T>::GetDeviceSelector(GUID const classGuid) const
{
	String value = {};
	check(static_cast<ICustomDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(classGuid, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> impl_ICustomDeviceStatics<T>::FromIdAsync(String const & deviceId, Windows::Devices::Custom::DeviceAccessMode const desiredAccess, Windows::Devices::Custom::DeviceSharingMode const sharingMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> operation = {};
	check(static_cast<ICustomDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(get(deviceId), desiredAccess, sharingMode, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> impl_ICustomDeviceStatics<T>::FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Devices::Custom::DeviceAccessMode const desiredAccess, Windows::Devices::Custom::DeviceSharingMode const sharingMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> operation = {};
	check(static_cast<ICustomDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(StringReference(deviceId), desiredAccess, sharingMode, set(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_ICustomDevice<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value = {};
	check(static_cast<ICustomDevice const &>(static_cast<T const &>(*this))->get_InputStream(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_ICustomDevice<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value = {};
	check(static_cast<ICustomDevice const &>(static_cast<T const &>(*this))->get_OutputStream(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_ICustomDevice<T>::SendIOControlAsync(Windows::Devices::Custom::IIOControlCode const & ioControlCode, Windows::Storage::Streams::IBuffer const & inputBuffer, Windows::Storage::Streams::IBuffer const & outputBuffer) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation = {};
	check(static_cast<ICustomDevice const &>(static_cast<T const &>(*this))->abi_SendIOControlAsync(get(ioControlCode), get(inputBuffer), get(outputBuffer), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICustomDevice<T>::TrySendIOControlAsync(Windows::Devices::Custom::IIOControlCode const & ioControlCode, Windows::Storage::Streams::IBuffer const & inputBuffer, Windows::Storage::Streams::IBuffer const & outputBuffer) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ICustomDevice const &>(static_cast<T const &>(*this))->abi_TrySendIOControlAsync(get(ioControlCode), get(inputBuffer), get(outputBuffer), set(operation)));
	return operation;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

template <typename T> bool impl_IEnclosureLocation<T>::InDock() const
{
	bool value = {};
	check(static_cast<IEnclosureLocation const &>(static_cast<T const &>(*this))->get_InDock(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IEnclosureLocation<T>::InLid() const
{
	bool value = {};
	check(static_cast<IEnclosureLocation const &>(static_cast<T const &>(*this))->get_InLid(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::Panel impl_IEnclosureLocation<T>::Panel() const
{
	Windows::Devices::Enumeration::Panel value = {};
	check(static_cast<IEnclosureLocation const &>(static_cast<T const &>(*this))->get_Panel(&value));
	return value;
}

template <typename T> String impl_IDeviceInformationUpdate<T>::Id() const
{
	String value = {};
	check(static_cast<IDeviceInformationUpdate const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IDeviceInformationUpdate<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value = {};
	check(static_cast<IDeviceInformationUpdate const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IDeviceWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformation> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDeviceWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformation>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Added(EventRegistrationToken const token) const
{
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->remove_Added(token));
}

template <typename T> EventRegistrationToken impl_IDeviceWatcher<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDeviceWatcher<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Updated(EventRegistrationToken const token) const
{
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->remove_Updated(token));
}

template <typename T> EventRegistrationToken impl_IDeviceWatcher<T>::Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->add_Removed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDeviceWatcher<T>::Removed(F handler) const
{
	return Removed(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Removed(EventRegistrationToken const token) const
{
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->remove_Removed(token));
}

template <typename T> EventRegistrationToken impl_IDeviceWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDeviceWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::EnumerationCompleted(EventRegistrationToken const token) const
{
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->remove_EnumerationCompleted(token));
}

template <typename T> EventRegistrationToken impl_IDeviceWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDeviceWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Stopped(EventRegistrationToken const token) const
{
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->remove_Stopped(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherStatus impl_IDeviceWatcher<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceWatcherStatus status = {};
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->get_Status(&status));
	return status;
}

template <typename T> void impl_IDeviceWatcher<T>::Start() const
{
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->abi_Start());
}

template <typename T> void impl_IDeviceWatcher<T>::Stop() const
{
	check(static_cast<IDeviceWatcher const &>(static_cast<T const &>(*this))->abi_Stop());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics<T>::CreateFromIdAsync(String const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateFromIdAsync(get(deviceId), set(asyncOp)));
	return asyncOp;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics<T>::CreateFromIdAsync(wchar_t const (&deviceId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateFromIdAsync(StringReference(deviceId), set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics<T>::CreateFromIdAsync(String const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateFromIdAsyncAdditionalProperties(get(deviceId), get(additionalProperties), set(asyncOp)));
	return asyncOp;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics<T>::CreateFromIdAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateFromIdAsyncAdditionalProperties(StringReference(deviceId), get(additionalProperties), set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsync(set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsyncDeviceClass(deviceClass, set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(String const & aqsFilter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsyncAqsFilter(get(aqsFilter), set(asyncOp)));
	return asyncOp;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(wchar_t const (&aqsFilter)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsyncAqsFilter(StringReference(aqsFilter), set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsyncAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), set(asyncOp)));
	return asyncOp;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp = {};
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsyncAqsFilterAndAdditionalProperties(StringReference(aqsFilter), get(additionalProperties), set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher() const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher(nullptr);
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateWatcher(set(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher(nullptr);
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateWatcherDeviceClass(deviceClass, set(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(String const & aqsFilter) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher(nullptr);
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateWatcherAqsFilter(get(aqsFilter), set(watcher)));
	return watcher;
}

template <typename T> template <unsigned S0> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(wchar_t const (&aqsFilter)[S0]) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher(nullptr);
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateWatcherAqsFilter(StringReference(aqsFilter), set(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher(nullptr);
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateWatcherAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), set(watcher)));
	return watcher;
}

template <typename T> template <unsigned S0> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher(nullptr);
	check(static_cast<IDeviceInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateWatcherAqsFilterAndAdditionalProperties(StringReference(aqsFilter), get(additionalProperties), set(watcher)));
	return watcher;
}

template <typename T> String impl_IDeviceInformation<T>::Id() const
{
	String value = {};
	check(static_cast<IDeviceInformation const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> String impl_IDeviceInformation<T>::Name() const
{
	String value = {};
	check(static_cast<IDeviceInformation const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> bool impl_IDeviceInformation<T>::IsEnabled() const
{
	bool value = {};
	check(static_cast<IDeviceInformation const &>(static_cast<T const &>(*this))->get_IsEnabled(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IDeviceInformation<T>::IsDefault() const
{
	bool value = {};
	check(static_cast<IDeviceInformation const &>(static_cast<T const &>(*this))->get_IsDefault(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::EnclosureLocation impl_IDeviceInformation<T>::EnclosureLocation() const
{
	Windows::Devices::Enumeration::EnclosureLocation value(nullptr);
	check(static_cast<IDeviceInformation const &>(static_cast<T const &>(*this))->get_EnclosureLocation(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IDeviceInformation<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value = {};
	check(static_cast<IDeviceInformation const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> void impl_IDeviceInformation<T>::Update(Windows::Devices::Enumeration::DeviceInformationUpdate const & updateInfo) const
{
	check(static_cast<IDeviceInformation const &>(static_cast<T const &>(*this))->abi_Update(get(updateInfo)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> impl_IDeviceInformation<T>::GetThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> asyncOp = {};
	check(static_cast<IDeviceInformation const &>(static_cast<T const &>(*this))->abi_GetThumbnailAsync(set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> impl_IDeviceInformation<T>::GetGlyphThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> asyncOp = {};
	check(static_cast<IDeviceInformation const &>(static_cast<T const &>(*this))->abi_GetGlyphThumbnailAsync(set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessStatus impl_IDeviceAccessChangedEventArgs<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceAccessStatus value = {};
	check(static_cast<IDeviceAccessChangedEventArgs const &>(static_cast<T const &>(*this))->get_Status(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IDeviceAccessInformation<T>::AccessChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceAccessInformation, Windows::Devices::Enumeration::DeviceAccessChangedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IDeviceAccessInformation const &>(static_cast<T const &>(*this))->add_AccessChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDeviceAccessInformation<T>::AccessChanged(F handler) const
{
	return AccessChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceAccessInformation, Windows::Devices::Enumeration::DeviceAccessChangedEventArgs>(handler));
}

template <typename T> void impl_IDeviceAccessInformation<T>::AccessChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<IDeviceAccessInformation const &>(static_cast<T const &>(*this))->remove_AccessChanged(cookie));
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessStatus impl_IDeviceAccessInformation<T>::CurrentStatus() const
{
	Windows::Devices::Enumeration::DeviceAccessStatus status = {};
	check(static_cast<IDeviceAccessInformation const &>(static_cast<T const &>(*this))->get_CurrentStatus(&status));
	return status;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromId(String const & deviceId) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value(nullptr);
	check(static_cast<IDeviceAccessInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateFromId(get(deviceId), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromId(wchar_t const (&deviceId)[S0]) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value(nullptr);
	check(static_cast<IDeviceAccessInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateFromId(StringReference(deviceId), set(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromDeviceClassId(GUID const deviceClassId) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value(nullptr);
	check(static_cast<IDeviceAccessInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateFromDeviceClassId(deviceClassId, set(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value(nullptr);
	check(static_cast<IDeviceAccessInformationStatics const &>(static_cast<T const &>(*this))->abi_CreateFromDeviceClass(deviceClass, set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

template <typename T> Windows::Devices::Enumeration::Pnp::PnpObjectType impl_IPnpObjectUpdate<T>::Type() const
{
	Windows::Devices::Enumeration::Pnp::PnpObjectType value = {};
	check(static_cast<IPnpObjectUpdate const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> String impl_IPnpObjectUpdate<T>::Id() const
{
	String value = {};
	check(static_cast<IPnpObjectUpdate const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IPnpObjectUpdate<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value = {};
	check(static_cast<IPnpObjectUpdate const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IPnpObjectWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObject> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPnpObjectWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObject>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::Added(EventRegistrationToken const token) const
{
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->remove_Added(token));
}

template <typename T> EventRegistrationToken impl_IPnpObjectWatcher<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPnpObjectWatcher<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::Updated(EventRegistrationToken const token) const
{
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->remove_Updated(token));
}

template <typename T> EventRegistrationToken impl_IPnpObjectWatcher<T>::Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->add_Removed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPnpObjectWatcher<T>::Removed(F handler) const
{
	return Removed(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::Removed(EventRegistrationToken const token) const
{
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->remove_Removed(token));
}

template <typename T> EventRegistrationToken impl_IPnpObjectWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPnpObjectWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::EnumerationCompleted(EventRegistrationToken const token) const
{
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->remove_EnumerationCompleted(token));
}

template <typename T> EventRegistrationToken impl_IPnpObjectWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPnpObjectWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::Stopped(EventRegistrationToken const token) const
{
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->remove_Stopped(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherStatus impl_IPnpObjectWatcher<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceWatcherStatus status = {};
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->get_Status(&status));
	return status;
}

template <typename T> void impl_IPnpObjectWatcher<T>::Start() const
{
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->abi_Start());
}

template <typename T> void impl_IPnpObjectWatcher<T>::Stop() const
{
	check(static_cast<IPnpObjectWatcher const &>(static_cast<T const &>(*this))->abi_Stop());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> impl_IPnpObjectStatics<T>::CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, String const & id, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> asyncOp = {};
	check(static_cast<IPnpObjectStatics const &>(static_cast<T const &>(*this))->abi_CreateFromIdAsync(type, get(id), get(requestedProperties), set(asyncOp)));
	return asyncOp;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> impl_IPnpObjectStatics<T>::CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, wchar_t const (&id)[S0], Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> asyncOp = {};
	check(static_cast<IPnpObjectStatics const &>(static_cast<T const &>(*this))->abi_CreateFromIdAsync(type, StringReference(id), get(requestedProperties), set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> impl_IPnpObjectStatics<T>::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> asyncOp = {};
	check(static_cast<IPnpObjectStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsync(type, get(requestedProperties), set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> impl_IPnpObjectStatics<T>::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> asyncOp = {};
	check(static_cast<IPnpObjectStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsyncAqsFilter(type, get(requestedProperties), get(aqsFilter), set(asyncOp)));
	return asyncOp;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> impl_IPnpObjectStatics<T>::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> asyncOp = {};
	check(static_cast<IPnpObjectStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsyncAqsFilter(type, get(requestedProperties), StringReference(aqsFilter), set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::Pnp::PnpObjectWatcher impl_IPnpObjectStatics<T>::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const
{
	Windows::Devices::Enumeration::Pnp::PnpObjectWatcher watcher(nullptr);
	check(static_cast<IPnpObjectStatics const &>(static_cast<T const &>(*this))->abi_CreateWatcher(type, get(requestedProperties), set(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::Pnp::PnpObjectWatcher impl_IPnpObjectStatics<T>::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter) const
{
	Windows::Devices::Enumeration::Pnp::PnpObjectWatcher watcher(nullptr);
	check(static_cast<IPnpObjectStatics const &>(static_cast<T const &>(*this))->abi_CreateWatcherAqsFilter(type, get(requestedProperties), get(aqsFilter), set(watcher)));
	return watcher;
}

template <typename T> template <unsigned S0> Windows::Devices::Enumeration::Pnp::PnpObjectWatcher impl_IPnpObjectStatics<T>::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0]) const
{
	Windows::Devices::Enumeration::Pnp::PnpObjectWatcher watcher(nullptr);
	check(static_cast<IPnpObjectStatics const &>(static_cast<T const &>(*this))->abi_CreateWatcherAqsFilter(type, get(requestedProperties), StringReference(aqsFilter), set(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::Pnp::PnpObjectType impl_IPnpObject<T>::Type() const
{
	Windows::Devices::Enumeration::Pnp::PnpObjectType value = {};
	check(static_cast<IPnpObject const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> String impl_IPnpObject<T>::Id() const
{
	String value = {};
	check(static_cast<IPnpObject const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IPnpObject<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value = {};
	check(static_cast<IPnpObject const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> void impl_IPnpObject<T>::Update(Windows::Devices::Enumeration::Pnp::PnpObjectUpdate const & updateInfo) const
{
	check(static_cast<IPnpObject const &>(static_cast<T const &>(*this))->abi_Update(get(updateInfo)));
}

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

template <typename T> Windows::Devices::Geolocation::GeoshapeType impl_IGeoshape<T>::GeoshapeType() const
{
	Windows::Devices::Geolocation::GeoshapeType value = {};
	check(static_cast<IGeoshape const &>(static_cast<T const &>(*this))->get_GeoshapeType(&value));
	return value;
}

template <typename T> unsigned impl_IGeoshape<T>::SpatialReferenceId() const
{
	unsigned value = {};
	check(static_cast<IGeoshape const &>(static_cast<T const &>(*this))->get_SpatialReferenceId(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::AltitudeReferenceSystem impl_IGeoshape<T>::AltitudeReferenceSystem() const
{
	Windows::Devices::Geolocation::AltitudeReferenceSystem value = {};
	check(static_cast<IGeoshape const &>(static_cast<T const &>(*this))->get_AltitudeReferenceSystem(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeopoint<T>::Position() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check(static_cast<IGeopoint const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeopointFactory<T>::Create(Windows::Devices::Geolocation::BasicGeoposition const & position) const
{
	Windows::Devices::Geolocation::Geopoint value(nullptr);
	check(static_cast<IGeopointFactory const &>(static_cast<T const &>(*this))->abi_Create(position, set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeopointFactory<T>::CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::Geopoint value(nullptr);
	check(static_cast<IGeopointFactory const &>(static_cast<T const &>(*this))->abi_CreateWithAltitudeReferenceSystem(position, altitudeReferenceSystem, set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeopointFactory<T>::CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::Geopoint value(nullptr);
	check(static_cast<IGeopointFactory const &>(static_cast<T const &>(*this))->abi_CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, altitudeReferenceSystem, spatialReferenceId, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinateSatelliteData<T>::PositionDilutionOfPrecision() const
{
	Windows::Foundation::IReference<double> ppValue = {};
	check(static_cast<IGeocoordinateSatelliteData const &>(static_cast<T const &>(*this))->get_PositionDilutionOfPrecision(set(ppValue)));
	return ppValue;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinateSatelliteData<T>::HorizontalDilutionOfPrecision() const
{
	Windows::Foundation::IReference<double> ppValue = {};
	check(static_cast<IGeocoordinateSatelliteData const &>(static_cast<T const &>(*this))->get_HorizontalDilutionOfPrecision(set(ppValue)));
	return ppValue;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinateSatelliteData<T>::VerticalDilutionOfPrecision() const
{
	Windows::Foundation::IReference<double> ppValue = {};
	check(static_cast<IGeocoordinateSatelliteData const &>(static_cast<T const &>(*this))->get_VerticalDilutionOfPrecision(set(ppValue)));
	return ppValue;
}

template <typename T> double impl_IGeocoordinate<T>::Accuracy() const
{
	double value = {};
	check(static_cast<IGeocoordinate const &>(static_cast<T const &>(*this))->get_Accuracy(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::AltitudeAccuracy() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IGeocoordinate const &>(static_cast<T const &>(*this))->get_AltitudeAccuracy(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::Heading() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IGeocoordinate const &>(static_cast<T const &>(*this))->get_Heading(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::Speed() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IGeocoordinate const &>(static_cast<T const &>(*this))->get_Speed(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IGeocoordinate<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IGeocoordinate const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::PositionSource impl_IGeocoordinateWithPositionData<T>::PositionSource() const
{
	Windows::Devices::Geolocation::PositionSource pValue = {};
	check(static_cast<IGeocoordinateWithPositionData const &>(static_cast<T const &>(*this))->get_PositionSource(&pValue));
	return pValue;
}

template <typename T> Windows::Devices::Geolocation::GeocoordinateSatelliteData impl_IGeocoordinateWithPositionData<T>::SatelliteData() const
{
	Windows::Devices::Geolocation::GeocoordinateSatelliteData ppValue(nullptr);
	check(static_cast<IGeocoordinateWithPositionData const &>(static_cast<T const &>(*this))->get_SatelliteData(set(ppValue)));
	return ppValue;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeocoordinateWithPoint<T>::Point() const
{
	Windows::Devices::Geolocation::Geopoint value(nullptr);
	check(static_cast<IGeocoordinateWithPoint const &>(static_cast<T const &>(*this))->get_Point(set(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::Country() const
{
	String value = {};
	check(static_cast<ICivicAddress const &>(static_cast<T const &>(*this))->get_Country(set(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::State() const
{
	String value = {};
	check(static_cast<ICivicAddress const &>(static_cast<T const &>(*this))->get_State(set(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::City() const
{
	String value = {};
	check(static_cast<ICivicAddress const &>(static_cast<T const &>(*this))->get_City(set(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::PostalCode() const
{
	String value = {};
	check(static_cast<ICivicAddress const &>(static_cast<T const &>(*this))->get_PostalCode(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICivicAddress<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ICivicAddress const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocoordinate impl_IGeoposition<T>::Coordinate() const
{
	Windows::Devices::Geolocation::Geocoordinate value(nullptr);
	check(static_cast<IGeoposition const &>(static_cast<T const &>(*this))->get_Coordinate(set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::CivicAddress impl_IGeoposition<T>::CivicAddress() const
{
	Windows::Devices::Geolocation::CivicAddress value(nullptr);
	check(static_cast<IGeoposition const &>(static_cast<T const &>(*this))->get_CivicAddress(set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geoposition impl_IPositionChangedEventArgs<T>::Position() const
{
	Windows::Devices::Geolocation::Geoposition value(nullptr);
	check(static_cast<IPositionChangedEventArgs const &>(static_cast<T const &>(*this))->get_Position(set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::PositionStatus impl_IStatusChangedEventArgs<T>::Status() const
{
	Windows::Devices::Geolocation::PositionStatus value = {};
	check(static_cast<IStatusChangedEventArgs const &>(static_cast<T const &>(*this))->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::PositionAccuracy impl_IGeolocator<T>::DesiredAccuracy() const
{
	Windows::Devices::Geolocation::PositionAccuracy value = {};
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->get_DesiredAccuracy(&value));
	return value;
}

template <typename T> void impl_IGeolocator<T>::DesiredAccuracy(Windows::Devices::Geolocation::PositionAccuracy const value) const
{
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->put_DesiredAccuracy(value));
}

template <typename T> double impl_IGeolocator<T>::MovementThreshold() const
{
	double value = {};
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->get_MovementThreshold(&value));
	return value;
}

template <typename T> void impl_IGeolocator<T>::MovementThreshold(double const value) const
{
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->put_MovementThreshold(value));
}

template <typename T> unsigned impl_IGeolocator<T>::ReportInterval() const
{
	unsigned value = {};
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->get_ReportInterval(&value));
	return value;
}

template <typename T> void impl_IGeolocator<T>::ReportInterval(unsigned const value) const
{
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->put_ReportInterval(value));
}

template <typename T> Windows::Devices::Geolocation::PositionStatus impl_IGeolocator<T>::LocationStatus() const
{
	Windows::Devices::Geolocation::PositionStatus value = {};
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->get_LocationStatus(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> impl_IGeolocator<T>::GetGeopositionAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> value = {};
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->abi_GetGeopositionAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> impl_IGeolocator<T>::GetGeopositionAsync(Windows::Foundation::TimeSpan const & maximumAge, Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> value = {};
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->abi_GetGeopositionAsyncWithAgeAndTimeout(maximumAge, timeout, set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IGeolocator<T>::PositionChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::PositionChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->add_PositionChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGeolocator<T>::PositionChanged(F handler) const
{
	return PositionChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::PositionChangedEventArgs>(handler));
}

template <typename T> void impl_IGeolocator<T>::PositionChanged(EventRegistrationToken const token) const
{
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->remove_PositionChanged(token));
}

template <typename T> EventRegistrationToken impl_IGeolocator<T>::StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::StatusChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->add_StatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGeolocator<T>::StatusChanged(F handler) const
{
	return StatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::StatusChangedEventArgs>(handler));
}

template <typename T> void impl_IGeolocator<T>::StatusChanged(EventRegistrationToken const token) const
{
	check(static_cast<IGeolocator const &>(static_cast<T const &>(*this))->remove_StatusChanged(token));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IGeolocatorWithScalarAccuracy<T>::DesiredAccuracyInMeters() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IGeolocatorWithScalarAccuracy const &>(static_cast<T const &>(*this))->get_DesiredAccuracyInMeters(set(value)));
	return value;
}

template <typename T> void impl_IGeolocatorWithScalarAccuracy<T>::DesiredAccuracyInMeters(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(static_cast<IGeolocatorWithScalarAccuracy const &>(static_cast<T const &>(*this))->put_DesiredAccuracyInMeters(get(value)));
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeocircle<T>::Center() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check(static_cast<IGeocircle const &>(static_cast<T const &>(*this))->get_Center(&value));
	return value;
}

template <typename T> double impl_IGeocircle<T>::Radius() const
{
	double value = {};
	check(static_cast<IGeocircle const &>(static_cast<T const &>(*this))->get_Radius(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocircle impl_IGeocircleFactory<T>::Create(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius) const
{
	Windows::Devices::Geolocation::Geocircle value(nullptr);
	check(static_cast<IGeocircleFactory const &>(static_cast<T const &>(*this))->abi_Create(position, radius, set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocircle impl_IGeocircleFactory<T>::CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::Geocircle value(nullptr);
	check(static_cast<IGeocircleFactory const &>(static_cast<T const &>(*this))->abi_CreateWithAltitudeReferenceSystem(position, radius, altitudeReferenceSystem, set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocircle impl_IGeocircleFactory<T>::CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::Geocircle value(nullptr);
	check(static_cast<IGeocircleFactory const &>(static_cast<T const &>(*this))->abi_CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, radius, altitudeReferenceSystem, spatialReferenceId, set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::Create(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence(nullptr);
	check(static_cast<IGeofenceFactory const &>(static_cast<T const &>(*this))->abi_Create(get(id), get(geoshape), set(geofence)));
	return geofence;
}

template <typename T> template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::Create(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence(nullptr);
	check(static_cast<IGeofenceFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(id), get(geoshape), set(geofence)));
	return geofence;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::CreateWithMonitorStates(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence(nullptr);
	check(static_cast<IGeofenceFactory const &>(static_cast<T const &>(*this))->abi_CreateWithMonitorStates(get(id), get(geoshape), monitoredStates, singleUse, set(geofence)));
	return geofence;
}

template <typename T> template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::CreateWithMonitorStates(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence(nullptr);
	check(static_cast<IGeofenceFactory const &>(static_cast<T const &>(*this))->abi_CreateWithMonitorStates(StringReference(id), get(geoshape), monitoredStates, singleUse, set(geofence)));
	return geofence;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::CreateWithMonitorStatesAndDwellTime(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence(nullptr);
	check(static_cast<IGeofenceFactory const &>(static_cast<T const &>(*this))->abi_CreateWithMonitorStatesAndDwellTime(get(id), get(geoshape), monitoredStates, singleUse, dwellTime, set(geofence)));
	return geofence;
}

template <typename T> template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::CreateWithMonitorStatesAndDwellTime(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence(nullptr);
	check(static_cast<IGeofenceFactory const &>(static_cast<T const &>(*this))->abi_CreateWithMonitorStatesAndDwellTime(StringReference(id), get(geoshape), monitoredStates, singleUse, dwellTime, set(geofence)));
	return geofence;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::CreateWithMonitorStatesDwellTimeStartTimeAndDuration(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence(nullptr);
	check(static_cast<IGeofenceFactory const &>(static_cast<T const &>(*this))->abi_CreateWithMonitorStatesDwellTimeStartTimeAndDuration(get(id), get(geoshape), monitoredStates, singleUse, dwellTime, startTime, duration, set(geofence)));
	return geofence;
}

template <typename T> template <unsigned S0> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::CreateWithMonitorStatesDwellTimeStartTimeAndDuration(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence(nullptr);
	check(static_cast<IGeofenceFactory const &>(static_cast<T const &>(*this))->abi_CreateWithMonitorStatesDwellTimeStartTimeAndDuration(StringReference(id), get(geoshape), monitoredStates, singleUse, dwellTime, startTime, duration, set(geofence)));
	return geofence;
}

template <typename T> Windows::Foundation::DateTime impl_IGeofence<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IGeofence const &>(static_cast<T const &>(*this))->get_StartTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IGeofence<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IGeofence const &>(static_cast<T const &>(*this))->get_Duration(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IGeofence<T>::DwellTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IGeofence const &>(static_cast<T const &>(*this))->get_DwellTime(&value));
	return value;
}

template <typename T> String impl_IGeofence<T>::Id() const
{
	String value = {};
	check(static_cast<IGeofence const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates impl_IGeofence<T>::MonitoredStates() const
{
	Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates value = {};
	check(static_cast<IGeofence const &>(static_cast<T const &>(*this))->get_MonitoredStates(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::IGeoshape impl_IGeofence<T>::Geoshape() const
{
	Windows::Devices::Geolocation::IGeoshape value = {};
	check(static_cast<IGeofence const &>(static_cast<T const &>(*this))->get_Geoshape(set(value)));
	return value;
}

template <typename T> bool impl_IGeofence<T>::SingleUse() const
{
	bool value = {};
	check(static_cast<IGeofence const &>(static_cast<T const &>(*this))->get_SingleUse(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::GeofenceState impl_IGeofenceStateChangeReport<T>::NewState() const
{
	Windows::Devices::Geolocation::Geofencing::GeofenceState value = {};
	check(static_cast<IGeofenceStateChangeReport const &>(static_cast<T const &>(*this))->get_NewState(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceStateChangeReport<T>::Geofence() const
{
	Windows::Devices::Geolocation::Geofencing::Geofence value(nullptr);
	check(static_cast<IGeofenceStateChangeReport const &>(static_cast<T const &>(*this))->get_Geofence(set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geoposition impl_IGeofenceStateChangeReport<T>::Geoposition() const
{
	Windows::Devices::Geolocation::Geoposition value(nullptr);
	check(static_cast<IGeofenceStateChangeReport const &>(static_cast<T const &>(*this))->get_Geoposition(set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::GeofenceRemovalReason impl_IGeofenceStateChangeReport<T>::RemovalReason() const
{
	Windows::Devices::Geolocation::Geofencing::GeofenceRemovalReason value = {};
	check(static_cast<IGeofenceStateChangeReport const &>(static_cast<T const &>(*this))->get_RemovalReason(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::GeofenceMonitor impl_IGeofenceMonitorStatics<T>::Current() const
{
	Windows::Devices::Geolocation::Geofencing::GeofenceMonitor value(nullptr);
	check(static_cast<IGeofenceMonitorStatics const &>(static_cast<T const &>(*this))->get_Current(set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::GeofenceMonitorStatus impl_IGeofenceMonitor<T>::Status() const
{
	Windows::Devices::Geolocation::Geofencing::GeofenceMonitorStatus value = {};
	check(static_cast<IGeofenceMonitor const &>(static_cast<T const &>(*this))->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Geolocation::Geofencing::Geofence> impl_IGeofenceMonitor<T>::Geofences() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Geolocation::Geofencing::Geofence> value = {};
	check(static_cast<IGeofenceMonitor const &>(static_cast<T const &>(*this))->get_Geofences(set(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geoposition impl_IGeofenceMonitor<T>::LastKnownGeoposition() const
{
	Windows::Devices::Geolocation::Geoposition value(nullptr);
	check(static_cast<IGeofenceMonitor const &>(static_cast<T const &>(*this))->get_LastKnownGeoposition(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IGeofenceMonitor<T>::GeofenceStateChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable> const & eventHandler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IGeofenceMonitor const &>(static_cast<T const &>(*this))->add_GeofenceStateChanged(get(eventHandler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGeofenceMonitor<T>::GeofenceStateChanged(F eventHandler) const
{
	return GeofenceStateChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable>(eventHandler));
}

template <typename T> void impl_IGeofenceMonitor<T>::GeofenceStateChanged(EventRegistrationToken const token) const
{
	check(static_cast<IGeofenceMonitor const &>(static_cast<T const &>(*this))->remove_GeofenceStateChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport> impl_IGeofenceMonitor<T>::ReadReports() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport> value = {};
	check(static_cast<IGeofenceMonitor const &>(static_cast<T const &>(*this))->abi_ReadReports(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IGeofenceMonitor<T>::StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable> const & eventHandler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IGeofenceMonitor const &>(static_cast<T const &>(*this))->add_StatusChanged(get(eventHandler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGeofenceMonitor<T>::StatusChanged(F eventHandler) const
{
	return StatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable>(eventHandler));
}

template <typename T> void impl_IGeofenceMonitor<T>::StatusChanged(EventRegistrationToken const token) const
{
	check(static_cast<IGeofenceMonitor const &>(static_cast<T const &>(*this))->remove_StatusChanged(token));
}

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

template <typename T> String impl_IHidDeviceStatics<T>::GetDeviceSelector(unsigned short const usagePage, unsigned short const usageId) const
{
	String selector = {};
	check(static_cast<IHidDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(usagePage, usageId, set(selector)));
	return selector;
}

template <typename T> String impl_IHidDeviceStatics<T>::GetDeviceSelector(unsigned short const usagePage, unsigned short const usageId, unsigned short const vendorId, unsigned short const productId) const
{
	String selector = {};
	check(static_cast<IHidDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelectorVidPid(usagePage, usageId, vendorId, productId, set(selector)));
	return selector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> impl_IHidDeviceStatics<T>::FromIdAsync(String const & deviceId, Windows::Storage::FileAccessMode const accessMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> hidDevice = {};
	check(static_cast<IHidDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(get(deviceId), accessMode, set(hidDevice)));
	return hidDevice;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> impl_IHidDeviceStatics<T>::FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Storage::FileAccessMode const accessMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> hidDevice = {};
	check(static_cast<IHidDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(StringReference(deviceId), accessMode, set(hidDevice)));
	return hidDevice;
}

template <typename T> unsigned impl_IHidBooleanControlDescription<T>::Id() const
{
	unsigned value = {};
	check(static_cast<IHidBooleanControlDescription const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControlDescription<T>::ReportId() const
{
	unsigned short value = {};
	check(static_cast<IHidBooleanControlDescription const &>(static_cast<T const &>(*this))->get_ReportId(&value));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidReportType impl_IHidBooleanControlDescription<T>::ReportType() const
{
	Windows::Devices::HumanInterfaceDevice::HidReportType value = {};
	check(static_cast<IHidBooleanControlDescription const &>(static_cast<T const &>(*this))->get_ReportType(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControlDescription<T>::UsagePage() const
{
	unsigned short value = {};
	check(static_cast<IHidBooleanControlDescription const &>(static_cast<T const &>(*this))->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControlDescription<T>::UsageId() const
{
	unsigned short value = {};
	check(static_cast<IHidBooleanControlDescription const &>(static_cast<T const &>(*this))->get_UsageId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> impl_IHidBooleanControlDescription<T>::ParentCollections() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> value = {};
	check(static_cast<IHidBooleanControlDescription const &>(static_cast<T const &>(*this))->get_ParentCollections(set(value)));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::Id() const
{
	unsigned value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControlDescription<T>::ReportId() const
{
	unsigned short value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_ReportId(&value));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidReportType impl_IHidNumericControlDescription<T>::ReportType() const
{
	Windows::Devices::HumanInterfaceDevice::HidReportType value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_ReportType(&value));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::ReportSize() const
{
	unsigned value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_ReportSize(&value));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::ReportCount() const
{
	unsigned value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_ReportCount(&value));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControlDescription<T>::UsagePage() const
{
	unsigned short value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControlDescription<T>::UsageId() const
{
	unsigned short value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_UsageId(&value));
	return value;
}

template <typename T> int impl_IHidNumericControlDescription<T>::LogicalMinimum() const
{
	int value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_LogicalMinimum(&value));
	return value;
}

template <typename T> int impl_IHidNumericControlDescription<T>::LogicalMaximum() const
{
	int value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_LogicalMaximum(&value));
	return value;
}

template <typename T> int impl_IHidNumericControlDescription<T>::PhysicalMinimum() const
{
	int value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_PhysicalMinimum(&value));
	return value;
}

template <typename T> int impl_IHidNumericControlDescription<T>::PhysicalMaximum() const
{
	int value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_PhysicalMaximum(&value));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::UnitExponent() const
{
	unsigned value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_UnitExponent(&value));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::Unit() const
{
	unsigned value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_Unit(&value));
	return value;
}

template <typename T> bool impl_IHidNumericControlDescription<T>::IsAbsolute() const
{
	bool value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_IsAbsolute(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IHidNumericControlDescription<T>::HasNull() const
{
	bool value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_HasNull(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> impl_IHidNumericControlDescription<T>::ParentCollections() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> value = {};
	check(static_cast<IHidNumericControlDescription const &>(static_cast<T const &>(*this))->get_ParentCollections(set(value)));
	return value;
}

template <typename T> unsigned impl_IHidCollection<T>::Id() const
{
	unsigned value = {};
	check(static_cast<IHidCollection const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidCollectionType impl_IHidCollection<T>::Type() const
{
	Windows::Devices::HumanInterfaceDevice::HidCollectionType value = {};
	check(static_cast<IHidCollection const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> unsigned impl_IHidCollection<T>::UsagePage() const
{
	unsigned value = {};
	check(static_cast<IHidCollection const &>(static_cast<T const &>(*this))->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned impl_IHidCollection<T>::UsageId() const
{
	unsigned value = {};
	check(static_cast<IHidCollection const &>(static_cast<T const &>(*this))->get_UsageId(&value));
	return value;
}

template <typename T> unsigned short impl_IHidInputReport<T>::Id() const
{
	unsigned short value = {};
	check(static_cast<IHidInputReport const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHidInputReport<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IHidInputReport const &>(static_cast<T const &>(*this))->get_Data(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> impl_IHidInputReport<T>::ActivatedBooleanControls() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> value = {};
	check(static_cast<IHidInputReport const &>(static_cast<T const &>(*this))->get_ActivatedBooleanControls(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> impl_IHidInputReport<T>::TransitionedBooleanControls() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> value = {};
	check(static_cast<IHidInputReport const &>(static_cast<T const &>(*this))->get_TransitionedBooleanControls(set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidInputReport<T>::GetBooleanControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value(nullptr);
	check(static_cast<IHidInputReport const &>(static_cast<T const &>(*this))->abi_GetBooleanControl(usagePage, usageId, set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidInputReport<T>::GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value(nullptr);
	check(static_cast<IHidInputReport const &>(static_cast<T const &>(*this))->abi_GetBooleanControlByDescription(get(controlDescription), set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidInputReport<T>::GetNumericControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value(nullptr);
	check(static_cast<IHidInputReport const &>(static_cast<T const &>(*this))->abi_GetNumericControl(usagePage, usageId, set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidInputReport<T>::GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value(nullptr);
	check(static_cast<IHidInputReport const &>(static_cast<T const &>(*this))->abi_GetNumericControlByDescription(get(controlDescription), set(value)));
	return value;
}

template <typename T> unsigned short impl_IHidOutputReport<T>::Id() const
{
	unsigned short value = {};
	check(static_cast<IHidOutputReport const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHidOutputReport<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IHidOutputReport const &>(static_cast<T const &>(*this))->get_Data(set(value)));
	return value;
}

template <typename T> void impl_IHidOutputReport<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check(static_cast<IHidOutputReport const &>(static_cast<T const &>(*this))->put_Data(get(value)));
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidOutputReport<T>::GetBooleanControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value(nullptr);
	check(static_cast<IHidOutputReport const &>(static_cast<T const &>(*this))->abi_GetBooleanControl(usagePage, usageId, set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidOutputReport<T>::GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value(nullptr);
	check(static_cast<IHidOutputReport const &>(static_cast<T const &>(*this))->abi_GetBooleanControlByDescription(get(controlDescription), set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidOutputReport<T>::GetNumericControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value(nullptr);
	check(static_cast<IHidOutputReport const &>(static_cast<T const &>(*this))->abi_GetNumericControl(usagePage, usageId, set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidOutputReport<T>::GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value(nullptr);
	check(static_cast<IHidOutputReport const &>(static_cast<T const &>(*this))->abi_GetNumericControlByDescription(get(controlDescription), set(value)));
	return value;
}

template <typename T> unsigned short impl_IHidFeatureReport<T>::Id() const
{
	unsigned short value = {};
	check(static_cast<IHidFeatureReport const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHidFeatureReport<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IHidFeatureReport const &>(static_cast<T const &>(*this))->get_Data(set(value)));
	return value;
}

template <typename T> void impl_IHidFeatureReport<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check(static_cast<IHidFeatureReport const &>(static_cast<T const &>(*this))->put_Data(get(value)));
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidFeatureReport<T>::GetBooleanControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value(nullptr);
	check(static_cast<IHidFeatureReport const &>(static_cast<T const &>(*this))->abi_GetBooleanControl(usagePage, usageId, set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidFeatureReport<T>::GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value(nullptr);
	check(static_cast<IHidFeatureReport const &>(static_cast<T const &>(*this))->abi_GetBooleanControlByDescription(get(controlDescription), set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidFeatureReport<T>::GetNumericControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value(nullptr);
	check(static_cast<IHidFeatureReport const &>(static_cast<T const &>(*this))->abi_GetNumericControl(usagePage, usageId, set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidFeatureReport<T>::GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value(nullptr);
	check(static_cast<IHidFeatureReport const &>(static_cast<T const &>(*this))->abi_GetNumericControlByDescription(get(controlDescription), set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidInputReport impl_IHidInputReportReceivedEventArgs<T>::Report() const
{
	Windows::Devices::HumanInterfaceDevice::HidInputReport value(nullptr);
	check(static_cast<IHidInputReportReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Report(set(value)));
	return value;
}

template <typename T> unsigned impl_IHidBooleanControl<T>::Id() const
{
	unsigned value = {};
	check(static_cast<IHidBooleanControl const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControl<T>::UsagePage() const
{
	unsigned short value = {};
	check(static_cast<IHidBooleanControl const &>(static_cast<T const &>(*this))->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControl<T>::UsageId() const
{
	unsigned short value = {};
	check(static_cast<IHidBooleanControl const &>(static_cast<T const &>(*this))->get_UsageId(&value));
	return value;
}

template <typename T> bool impl_IHidBooleanControl<T>::IsActive() const
{
	bool value = {};
	check(static_cast<IHidBooleanControl const &>(static_cast<T const &>(*this))->get_IsActive(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IHidBooleanControl<T>::IsActive(bool const value) const
{
	check(static_cast<IHidBooleanControl const &>(static_cast<T const &>(*this))->put_IsActive(value));
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription impl_IHidBooleanControl<T>::ControlDescription() const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription value(nullptr);
	check(static_cast<IHidBooleanControl const &>(static_cast<T const &>(*this))->get_ControlDescription(set(value)));
	return value;
}

template <typename T> unsigned impl_IHidNumericControl<T>::Id() const
{
	unsigned value = {};
	check(static_cast<IHidNumericControl const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> bool impl_IHidNumericControl<T>::IsGrouped() const
{
	bool value = {};
	check(static_cast<IHidNumericControl const &>(static_cast<T const &>(*this))->get_IsGrouped(BoolProxy(value)));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControl<T>::UsagePage() const
{
	unsigned short value = {};
	check(static_cast<IHidNumericControl const &>(static_cast<T const &>(*this))->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControl<T>::UsageId() const
{
	unsigned short value = {};
	check(static_cast<IHidNumericControl const &>(static_cast<T const &>(*this))->get_UsageId(&value));
	return value;
}

template <typename T> long long impl_IHidNumericControl<T>::Value() const
{
	long long value = {};
	check(static_cast<IHidNumericControl const &>(static_cast<T const &>(*this))->get_Value(&value));
	return value;
}

template <typename T> void impl_IHidNumericControl<T>::Value(long long const value) const
{
	check(static_cast<IHidNumericControl const &>(static_cast<T const &>(*this))->put_Value(value));
}

template <typename T> long long impl_IHidNumericControl<T>::ScaledValue() const
{
	long long value = {};
	check(static_cast<IHidNumericControl const &>(static_cast<T const &>(*this))->get_ScaledValue(&value));
	return value;
}

template <typename T> void impl_IHidNumericControl<T>::ScaledValue(long long const value) const
{
	check(static_cast<IHidNumericControl const &>(static_cast<T const &>(*this))->put_ScaledValue(value));
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription impl_IHidNumericControl<T>::ControlDescription() const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription value(nullptr);
	check(static_cast<IHidNumericControl const &>(static_cast<T const &>(*this))->get_ControlDescription(set(value)));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::VendorId() const
{
	unsigned short value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->get_VendorId(&value));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::ProductId() const
{
	unsigned short value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->get_ProductId(&value));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::Version() const
{
	unsigned short value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->get_Version(&value));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::UsagePage() const
{
	unsigned short value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::UsageId() const
{
	unsigned short value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->get_UsageId(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> impl_IHidDevice<T>::GetInputReportAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_GetInputReportAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> impl_IHidDevice<T>::GetInputReportAsync(unsigned short const reportId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_GetInputReportByIdAsync(reportId, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> impl_IHidDevice<T>::GetFeatureReportAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_GetFeatureReportAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> impl_IHidDevice<T>::GetFeatureReportAsync(unsigned short const reportId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_GetFeatureReportByIdAsync(reportId, set(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidOutputReport impl_IHidDevice<T>::CreateOutputReport() const
{
	Windows::Devices::HumanInterfaceDevice::HidOutputReport outputReport(nullptr);
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_CreateOutputReport(set(outputReport)));
	return outputReport;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidOutputReport impl_IHidDevice<T>::CreateOutputReport(unsigned short const reportId) const
{
	Windows::Devices::HumanInterfaceDevice::HidOutputReport outputReport(nullptr);
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_CreateOutputReportById(reportId, set(outputReport)));
	return outputReport;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidFeatureReport impl_IHidDevice<T>::CreateFeatureReport() const
{
	Windows::Devices::HumanInterfaceDevice::HidFeatureReport featureReport(nullptr);
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_CreateFeatureReport(set(featureReport)));
	return featureReport;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidFeatureReport impl_IHidDevice<T>::CreateFeatureReport(unsigned short const reportId) const
{
	Windows::Devices::HumanInterfaceDevice::HidFeatureReport featureReport(nullptr);
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_CreateFeatureReportById(reportId, set(featureReport)));
	return featureReport;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IHidDevice<T>::SendOutputReportAsync(Windows::Devices::HumanInterfaceDevice::HidOutputReport const & outputReport) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_SendOutputReportAsync(get(outputReport), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IHidDevice<T>::SendFeatureReportAsync(Windows::Devices::HumanInterfaceDevice::HidFeatureReport const & featureReport) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_SendFeatureReportAsync(get(featureReport), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription> impl_IHidDevice<T>::GetBooleanControlDescriptions(Windows::Devices::HumanInterfaceDevice::HidReportType const reportType, unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription> value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_GetBooleanControlDescriptions(reportType, usagePage, usageId, set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription> impl_IHidDevice<T>::GetNumericControlDescriptions(Windows::Devices::HumanInterfaceDevice::HidReportType const reportType, unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription> value = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->abi_GetNumericControlDescriptions(reportType, usagePage, usageId, set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IHidDevice<T>::InputReportReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::HumanInterfaceDevice::HidDevice, Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs> const & reportHandler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->add_InputReportReceived(get(reportHandler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IHidDevice<T>::InputReportReceived(F reportHandler) const
{
	return InputReportReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::HumanInterfaceDevice::HidDevice, Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs>(reportHandler));
}

template <typename T> void impl_IHidDevice<T>::InputReportReceived(EventRegistrationToken const token) const
{
	check(static_cast<IHidDevice const &>(static_cast<T const &>(*this))->remove_InputReportReceived(token));
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

template <typename T> int impl_IMouseCapabilities<T>::MousePresent() const
{
	int value = {};
	check(static_cast<IMouseCapabilities const &>(static_cast<T const &>(*this))->get_MousePresent(&value));
	return value;
}

template <typename T> int impl_IMouseCapabilities<T>::VerticalWheelPresent() const
{
	int value = {};
	check(static_cast<IMouseCapabilities const &>(static_cast<T const &>(*this))->get_VerticalWheelPresent(&value));
	return value;
}

template <typename T> int impl_IMouseCapabilities<T>::HorizontalWheelPresent() const
{
	int value = {};
	check(static_cast<IMouseCapabilities const &>(static_cast<T const &>(*this))->get_HorizontalWheelPresent(&value));
	return value;
}

template <typename T> int impl_IMouseCapabilities<T>::SwapButtons() const
{
	int value = {};
	check(static_cast<IMouseCapabilities const &>(static_cast<T const &>(*this))->get_SwapButtons(&value));
	return value;
}

template <typename T> unsigned impl_IMouseCapabilities<T>::NumberOfButtons() const
{
	unsigned value = {};
	check(static_cast<IMouseCapabilities const &>(static_cast<T const &>(*this))->get_NumberOfButtons(&value));
	return value;
}

template <typename T> int impl_IKeyboardCapabilities<T>::KeyboardPresent() const
{
	int value = {};
	check(static_cast<IKeyboardCapabilities const &>(static_cast<T const &>(*this))->get_KeyboardPresent(&value));
	return value;
}

template <typename T> int impl_ITouchCapabilities<T>::TouchPresent() const
{
	int value = {};
	check(static_cast<ITouchCapabilities const &>(static_cast<T const &>(*this))->get_TouchPresent(&value));
	return value;
}

template <typename T> unsigned impl_ITouchCapabilities<T>::Contacts() const
{
	unsigned value = {};
	check(static_cast<ITouchCapabilities const &>(static_cast<T const &>(*this))->get_Contacts(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDevice impl_IPointerDeviceStatics<T>::GetPointerDevice(unsigned const pointerId) const
{
	Windows::Devices::Input::PointerDevice pointerDevice(nullptr);
	check(static_cast<IPointerDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetPointerDevice(pointerId, set(pointerDevice)));
	return pointerDevice;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> impl_IPointerDeviceStatics<T>::GetPointerDevices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> pointerDevices = {};
	check(static_cast<IPointerDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetPointerDevices(set(pointerDevices)));
	return pointerDevices;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IPointerDevice<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<IPointerDevice const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> bool impl_IPointerDevice<T>::IsIntegrated() const
{
	bool value = {};
	check(static_cast<IPointerDevice const &>(static_cast<T const &>(*this))->get_IsIntegrated(BoolProxy(value)));
	return value;
}

template <typename T> unsigned impl_IPointerDevice<T>::MaxContacts() const
{
	unsigned value = {};
	check(static_cast<IPointerDevice const &>(static_cast<T const &>(*this))->get_MaxContacts(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerDevice<T>::PhysicalDeviceRect() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPointerDevice const &>(static_cast<T const &>(*this))->get_PhysicalDeviceRect(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerDevice<T>::ScreenRect() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPointerDevice const &>(static_cast<T const &>(*this))->get_ScreenRect(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Modern::Windows::Devices::Input::PointerDeviceUsage> impl_IPointerDevice<T>::SupportedUsages() const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Devices::Input::PointerDeviceUsage> value = {};
	check(static_cast<IPointerDevice const &>(static_cast<T const &>(*this))->get_SupportedUsages(set(value)));
	return value;
}

template <typename T> Windows::Devices::Input::MouseDelta impl_IMouseEventArgs<T>::MouseDelta() const
{
	Windows::Devices::Input::MouseDelta value = {};
	check(static_cast<IMouseEventArgs const &>(static_cast<T const &>(*this))->get_MouseDelta(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IMouseDevice<T>::MouseMoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::Input::MouseDevice, Windows::Devices::Input::MouseEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMouseDevice const &>(static_cast<T const &>(*this))->add_MouseMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMouseDevice<T>::MouseMoved(F handler) const
{
	return MouseMoved(Windows::Foundation::TypedEventHandler<Windows::Devices::Input::MouseDevice, Windows::Devices::Input::MouseEventArgs>(handler));
}

template <typename T> void impl_IMouseDevice<T>::MouseMoved(EventRegistrationToken const cookie) const
{
	check(static_cast<IMouseDevice const &>(static_cast<T const &>(*this))->remove_MouseMoved(cookie));
}

template <typename T> Windows::Devices::Input::MouseDevice impl_IMouseDeviceStatics<T>::GetForCurrentView() const
{
	Windows::Devices::Input::MouseDevice mouseDevice(nullptr);
	check(static_cast<IMouseDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(mouseDevice)));
	return mouseDevice;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

template <typename T> String impl_IUnifiedPosErrorData<T>::Message() const
{
	String value = {};
	check(static_cast<IUnifiedPosErrorData const &>(static_cast<T const &>(*this))->get_Message(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosErrorSeverity impl_IUnifiedPosErrorData<T>::Severity() const
{
	Windows::Devices::PointOfService::UnifiedPosErrorSeverity value = {};
	check(static_cast<IUnifiedPosErrorData const &>(static_cast<T const &>(*this))->get_Severity(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosErrorReason impl_IUnifiedPosErrorData<T>::Reason() const
{
	Windows::Devices::PointOfService::UnifiedPosErrorReason value = {};
	check(static_cast<IUnifiedPosErrorData const &>(static_cast<T const &>(*this))->get_Reason(&value));
	return value;
}

template <typename T> unsigned impl_IUnifiedPosErrorData<T>::ExtendedReason() const
{
	unsigned value = {};
	check(static_cast<IUnifiedPosErrorData const &>(static_cast<T const &>(*this))->get_ExtendedReason(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::BarcodeScannerStatus impl_IBarcodeScannerStatusUpdatedEventArgs<T>::Status() const
{
	Windows::Devices::PointOfService::BarcodeScannerStatus value = {};
	check(static_cast<IBarcodeScannerStatusUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_Status(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeScannerStatusUpdatedEventArgs<T>::ExtendedStatus() const
{
	unsigned value = {};
	check(static_cast<IBarcodeScannerStatusUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_ExtendedStatus(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Unknown() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Unknown(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean8() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ean8(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean8Add2() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ean8Add2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean8Add5() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ean8Add5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Eanv() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Eanv(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::EanvAdd2() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_EanvAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::EanvAdd5() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_EanvAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean13() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ean13(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean13Add2() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ean13Add2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean13Add5() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ean13Add5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Isbn() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Isbn(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IsbnAdd5() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_IsbnAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ismn() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ismn(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IsmnAdd2() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_IsmnAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IsmnAdd5() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_IsmnAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Issn() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Issn(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IssnAdd2() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_IssnAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IssnAdd5() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_IssnAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean99() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ean99(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean99Add2() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ean99Add2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean99Add5() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ean99Add5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Upca() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Upca(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpcaAdd2() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UpcaAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpcaAdd5() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UpcaAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Upce() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Upce(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpceAdd2() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UpceAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpceAdd5() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UpceAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpcCoupon() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UpcCoupon(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfStd() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_TfStd(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfDis() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_TfDis(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfInt() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_TfInt(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfInd() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_TfInd(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfMat() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_TfMat(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfIata() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_TfIata(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1DatabarType1() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Gs1DatabarType1(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1DatabarType2() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Gs1DatabarType2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1DatabarType3() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Gs1DatabarType3(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code39() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Code39(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code39Ex() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Code39Ex(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Trioptic39() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Trioptic39(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code32() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Code32(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Pzn() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Pzn(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code93() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Code93(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code93Ex() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Code93Ex(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code128() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Code128(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1128() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Gs1128(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1128Coupon() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Gs1128Coupon(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UccEan128() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UccEan128(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Sisac() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Sisac(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Isbt() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Isbt(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Codabar() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Codabar(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code11() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Code11(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Msi() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Msi(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Plessey() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Plessey(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Telepen() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Telepen(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code16k() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Code16k(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::CodablockA() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_CodablockA(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::CodablockF() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_CodablockF(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Codablock128() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Codablock128(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code49() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Code49(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Aztec() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Aztec(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::DataCode() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_DataCode(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::DataMatrix() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_DataMatrix(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::HanXin() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_HanXin(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Maxicode() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Maxicode(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::MicroPdf417() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_MicroPdf417(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::MicroQr() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_MicroQr(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Pdf417() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Pdf417(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Qr() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Qr(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::MsTag() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_MsTag(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ccab() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ccab(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ccc() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Ccc(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Tlc39() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Tlc39(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::AusPost() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_AusPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::CanPost() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_CanPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::ChinaPost() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_ChinaPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::DutchKix() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_DutchKix(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::InfoMail() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_InfoMail(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::ItalianPost25() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_ItalianPost25(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::ItalianPost39() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_ItalianPost39(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::JapanPost() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_JapanPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::KoreanPost() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_KoreanPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::SwedenPost() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_SwedenPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UkPost() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UkPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UsIntelligent() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UsIntelligent(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UsIntelligentPkg() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UsIntelligentPkg(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UsPlanet() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UsPlanet(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UsPostNet() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_UsPostNet(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Us4StateFics() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Us4StateFics(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::OcrA() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_OcrA(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::OcrB() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_OcrB(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Micr() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_Micr(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::ExtendedBase() const
{
	unsigned value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->get_ExtendedBase(&value));
	return value;
}

template <typename T> String impl_IBarcodeSymbologiesStatics<T>::GetName(unsigned const scanDataType) const
{
	String value = {};
	check(static_cast<IBarcodeSymbologiesStatics const &>(static_cast<T const &>(*this))->abi_GetName(scanDataType, set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::BarcodeScannerReport impl_IBarcodeScannerDataReceivedEventArgs<T>::Report() const
{
	Windows::Devices::PointOfService::BarcodeScannerReport value(nullptr);
	check(static_cast<IBarcodeScannerDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Report(set(value)));
	return value;
}

template <typename T> unsigned impl_IBarcodeScannerReport<T>::ScanDataType() const
{
	unsigned value = {};
	check(static_cast<IBarcodeScannerReport const &>(static_cast<T const &>(*this))->get_ScanDataType(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBarcodeScannerReport<T>::ScanData() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IBarcodeScannerReport const &>(static_cast<T const &>(*this))->get_ScanData(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBarcodeScannerReport<T>::ScanDataLabel() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IBarcodeScannerReport const &>(static_cast<T const &>(*this))->get_ScanDataLabel(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::BarcodeScannerReport impl_IBarcodeScannerErrorOccurredEventArgs<T>::PartialInputData() const
{
	Windows::Devices::PointOfService::BarcodeScannerReport value(nullptr);
	check(static_cast<IBarcodeScannerErrorOccurredEventArgs const &>(static_cast<T const &>(*this))->get_PartialInputData(set(value)));
	return value;
}

template <typename T> bool impl_IBarcodeScannerErrorOccurredEventArgs<T>::IsRetriable() const
{
	bool value = {};
	check(static_cast<IBarcodeScannerErrorOccurredEventArgs const &>(static_cast<T const &>(*this))->get_IsRetriable(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosErrorData impl_IBarcodeScannerErrorOccurredEventArgs<T>::ErrorData() const
{
	Windows::Devices::PointOfService::UnifiedPosErrorData value(nullptr);
	check(static_cast<IBarcodeScannerErrorOccurredEventArgs const &>(static_cast<T const &>(*this))->get_ErrorData(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_IBarcodeScannerImagePreviewReceivedEventArgs<T>::Preview() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType preview = {};
	check(static_cast<IBarcodeScannerImagePreviewReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Preview(set(preview)));
	return preview;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosPowerReportingType impl_IBarcodeScannerCapabilities<T>::PowerReportingType() const
{
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType value = {};
	check(static_cast<IBarcodeScannerCapabilities const &>(static_cast<T const &>(*this))->get_PowerReportingType(&value));
	return value;
}

template <typename T> bool impl_IBarcodeScannerCapabilities<T>::IsStatisticsReportingSupported() const
{
	bool value = {};
	check(static_cast<IBarcodeScannerCapabilities const &>(static_cast<T const &>(*this))->get_IsStatisticsReportingSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IBarcodeScannerCapabilities<T>::IsStatisticsUpdatingSupported() const
{
	bool value = {};
	check(static_cast<IBarcodeScannerCapabilities const &>(static_cast<T const &>(*this))->get_IsStatisticsUpdatingSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IBarcodeScannerCapabilities<T>::IsImagePreviewSupported() const
{
	bool value = {};
	check(static_cast<IBarcodeScannerCapabilities const &>(static_cast<T const &>(*this))->get_IsImagePreviewSupported(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> impl_IBarcodeScannerStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> result = {};
	check(static_cast<IBarcodeScannerStatics const &>(static_cast<T const &>(*this))->abi_GetDefaultAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> impl_IBarcodeScannerStatics<T>::FromIdAsync(String const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> result = {};
	check(static_cast<IBarcodeScannerStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(get(deviceId), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> impl_IBarcodeScannerStatics<T>::FromIdAsync(wchar_t const (&deviceId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> result = {};
	check(static_cast<IBarcodeScannerStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(StringReference(deviceId), set(result)));
	return result;
}

template <typename T> String impl_IBarcodeScannerStatics<T>::GetDeviceSelector() const
{
	String value = {};
	check(static_cast<IBarcodeScannerStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(set(value)));
	return value;
}

template <typename T> String impl_IBarcodeScanner<T>::DeviceId() const
{
	String value = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::BarcodeScannerCapabilities impl_IBarcodeScanner<T>::Capabilities() const
{
	Windows::Devices::PointOfService::BarcodeScannerCapabilities value(nullptr);
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->get_Capabilities(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedBarcodeScanner> impl_IBarcodeScanner<T>::ClaimScannerAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedBarcodeScanner> operation = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->abi_ClaimScannerAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IBarcodeScanner<T>::CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel const level) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->abi_CheckHealthAsync(level, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<unsigned>> impl_IBarcodeScanner<T>::GetSupportedSymbologiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<unsigned>> operation = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->abi_GetSupportedSymbologiesAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IBarcodeScanner<T>::IsSymbologySupportedAsync(unsigned const barcodeSymbology) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->abi_IsSymbologySupportedAsync(barcodeSymbology, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IBarcodeScanner<T>::RetrieveStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->abi_RetrieveStatisticsAsync(get(statisticsCategories), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IBarcodeScanner<T>::GetSupportedProfiles() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->abi_GetSupportedProfiles(set(value)));
	return value;
}

template <typename T> bool impl_IBarcodeScanner<T>::IsProfileSupported(String const & profile) const
{
	bool isSupported = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->abi_IsProfileSupported(get(profile), BoolProxy(isSupported)));
	return isSupported;
}

template <typename T> template <unsigned S0> bool impl_IBarcodeScanner<T>::IsProfileSupported(wchar_t const (&profile)[S0]) const
{
	bool isSupported = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->abi_IsProfileSupported(StringReference(profile), BoolProxy(isSupported)));
	return isSupported;
}

template <typename T> EventRegistrationToken impl_IBarcodeScanner<T>::StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::BarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->add_StatusUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IBarcodeScanner<T>::StatusUpdated(F handler) const
{
	return StatusUpdated(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::BarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs>(handler));
}

template <typename T> void impl_IBarcodeScanner<T>::StatusUpdated(EventRegistrationToken const token) const
{
	check(static_cast<IBarcodeScanner const &>(static_cast<T const &>(*this))->remove_StatusUpdated(token));
}

template <typename T> unsigned impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<T>::None() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderEncryptionAlgorithmsStatics const &>(static_cast<T const &>(*this))->get_None(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<T>::TripleDesDukpt() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderEncryptionAlgorithmsStatics const &>(static_cast<T const &>(*this))->get_TripleDesDukpt(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<T>::ExtendedBase() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderEncryptionAlgorithmsStatics const &>(static_cast<T const &>(*this))->get_ExtendedBase(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCardTypesStatics<T>::Unknown() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderCardTypesStatics const &>(static_cast<T const &>(*this))->get_Unknown(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCardTypesStatics<T>::Bank() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderCardTypesStatics const &>(static_cast<T const &>(*this))->get_Bank(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCardTypesStatics<T>::Aamva() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderCardTypesStatics const &>(static_cast<T const &>(*this))->get_Aamva(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCardTypesStatics<T>::ExtendedBase() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderCardTypesStatics const &>(static_cast<T const &>(*this))->get_ExtendedBase(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderTrackData<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IMagneticStripeReaderTrackData const &>(static_cast<T const &>(*this))->get_Data(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderTrackData<T>::DiscretionaryData() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IMagneticStripeReaderTrackData const &>(static_cast<T const &>(*this))->get_DiscretionaryData(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderTrackData<T>::EncryptedData() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IMagneticStripeReaderTrackData const &>(static_cast<T const &>(*this))->get_EncryptedData(set(value)));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderReport<T>::CardType() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderReport const &>(static_cast<T const &>(*this))->get_CardType(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackData impl_IMagneticStripeReaderReport<T>::Track1() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData value(nullptr);
	check(static_cast<IMagneticStripeReaderReport const &>(static_cast<T const &>(*this))->get_Track1(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackData impl_IMagneticStripeReaderReport<T>::Track2() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData value(nullptr);
	check(static_cast<IMagneticStripeReaderReport const &>(static_cast<T const &>(*this))->get_Track2(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackData impl_IMagneticStripeReaderReport<T>::Track3() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData value(nullptr);
	check(static_cast<IMagneticStripeReaderReport const &>(static_cast<T const &>(*this))->get_Track3(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackData impl_IMagneticStripeReaderReport<T>::Track4() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData value(nullptr);
	check(static_cast<IMagneticStripeReaderReport const &>(static_cast<T const &>(*this))->get_Track4(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, String> impl_IMagneticStripeReaderReport<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, String> value = {};
	check(static_cast<IMagneticStripeReaderReport const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderReport<T>::CardAuthenticationData() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IMagneticStripeReaderReport const &>(static_cast<T const &>(*this))->get_CardAuthenticationData(set(value)));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderReport<T>::CardAuthenticationDataLength() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderReport const &>(static_cast<T const &>(*this))->get_CardAuthenticationDataLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderReport<T>::AdditionalSecurityInformation() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IMagneticStripeReaderReport const &>(static_cast<T const &>(*this))->get_AdditionalSecurityInformation(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderReport impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::Report() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport value(nullptr);
	check(static_cast<IMagneticStripeReaderBankCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Report(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::AccountNumber() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderBankCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_AccountNumber(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::ExpirationDate() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderBankCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_ExpirationDate(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::ServiceCode() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderBankCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_ServiceCode(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::Title() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderBankCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::FirstName() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderBankCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_FirstName(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::MiddleInitial() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderBankCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_MiddleInitial(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::Surname() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderBankCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Surname(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::Suffix() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderBankCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Suffix(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderReport impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Report() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport value(nullptr);
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Report(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::LicenseNumber() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_LicenseNumber(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::ExpirationDate() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_ExpirationDate(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Restrictions() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Restrictions(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Class() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Class(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Endorsements() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Endorsements(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::BirthDate() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_BirthDate(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::FirstName() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_FirstName(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Surname() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Surname(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Suffix() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Suffix(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Gender() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Gender(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::HairColor() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_HairColor(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::EyeColor() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_EyeColor(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Height() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Height(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Weight() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Weight(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Address() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Address(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::City() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_City(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::State() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_State(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::PostalCode() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderAamvaCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_PostalCode(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderReport impl_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs<T>::Report() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport value(nullptr);
	check(static_cast<IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Report(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::Track1Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType value = {};
	check(static_cast<IMagneticStripeReaderErrorOccurredEventArgs const &>(static_cast<T const &>(*this))->get_Track1Status(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::Track2Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType value = {};
	check(static_cast<IMagneticStripeReaderErrorOccurredEventArgs const &>(static_cast<T const &>(*this))->get_Track2Status(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::Track3Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType value = {};
	check(static_cast<IMagneticStripeReaderErrorOccurredEventArgs const &>(static_cast<T const &>(*this))->get_Track3Status(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::Track4Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType value = {};
	check(static_cast<IMagneticStripeReaderErrorOccurredEventArgs const &>(static_cast<T const &>(*this))->get_Track4Status(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosErrorData impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::ErrorData() const
{
	Windows::Devices::PointOfService::UnifiedPosErrorData value(nullptr);
	check(static_cast<IMagneticStripeReaderErrorOccurredEventArgs const &>(static_cast<T const &>(*this))->get_ErrorData(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderReport impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::PartialInputData() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport value(nullptr);
	check(static_cast<IMagneticStripeReaderErrorOccurredEventArgs const &>(static_cast<T const &>(*this))->get_PartialInputData(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderStatus impl_IMagneticStripeReaderStatusUpdatedEventArgs<T>::Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderStatus value = {};
	check(static_cast<IMagneticStripeReaderStatusUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_Status(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderStatusUpdatedEventArgs<T>::ExtendedStatus() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderStatusUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_ExtendedStatus(&value));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderCapabilities<T>::CardAuthentication() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_CardAuthentication(set(value)));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCapabilities<T>::SupportedEncryptionAlgorithms() const
{
	unsigned value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_SupportedEncryptionAlgorithms(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationLevel impl_IMagneticStripeReaderCapabilities<T>::AuthenticationLevel() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationLevel value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_AuthenticationLevel(&value));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsIsoSupported() const
{
	bool value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_IsIsoSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsJisOneSupported() const
{
	bool value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_IsJisOneSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsJisTwoSupported() const
{
	bool value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_IsJisTwoSupported(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosPowerReportingType impl_IMagneticStripeReaderCapabilities<T>::PowerReportingType() const
{
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_PowerReportingType(&value));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsStatisticsReportingSupported() const
{
	bool value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_IsStatisticsReportingSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsStatisticsUpdatingSupported() const
{
	bool value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_IsStatisticsUpdatingSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsTrackDataMaskingSupported() const
{
	bool value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_IsTrackDataMaskingSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsTransmitSentinelsSupported() const
{
	bool value = {};
	check(static_cast<IMagneticStripeReaderCapabilities const &>(static_cast<T const &>(*this))->get_IsTransmitSentinelsSupported(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> impl_IMagneticStripeReaderStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> result = {};
	check(static_cast<IMagneticStripeReaderStatics const &>(static_cast<T const &>(*this))->abi_GetDefaultAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> impl_IMagneticStripeReaderStatics<T>::FromIdAsync(String const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> result = {};
	check(static_cast<IMagneticStripeReaderStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(get(deviceId), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> impl_IMagneticStripeReaderStatics<T>::FromIdAsync(wchar_t const (&deviceId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> result = {};
	check(static_cast<IMagneticStripeReaderStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(StringReference(deviceId), set(result)));
	return result;
}

template <typename T> String impl_IMagneticStripeReaderStatics<T>::GetDeviceSelector() const
{
	String value = {};
	check(static_cast<IMagneticStripeReaderStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(set(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReader<T>::DeviceId() const
{
	String value = {};
	check(static_cast<IMagneticStripeReader const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderCapabilities impl_IMagneticStripeReader<T>::Capabilities() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderCapabilities value(nullptr);
	check(static_cast<IMagneticStripeReader const &>(static_cast<T const &>(*this))->get_Capabilities(set(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationProtocol impl_IMagneticStripeReader<T>::DeviceAuthenticationProtocol() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationProtocol value = {};
	check(static_cast<IMagneticStripeReader const &>(static_cast<T const &>(*this))->get_DeviceAuthenticationProtocol(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IMagneticStripeReader<T>::CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel const level) const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_CheckHealthAsync(level, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> impl_IMagneticStripeReader<T>::ClaimReaderAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> operation = {};
	check(static_cast<IMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_ClaimReaderAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IMagneticStripeReader<T>::RetrieveStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation = {};
	check(static_cast<IMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_RetrieveStatisticsAsync(get(statisticsCategories), set(operation)));
	return operation;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType impl_IMagneticStripeReader<T>::GetErrorReportingType() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType value = {};
	check(static_cast<IMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_GetErrorReportingType(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IMagneticStripeReader<T>::StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::MagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IMagneticStripeReader const &>(static_cast<T const &>(*this))->add_StatusUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMagneticStripeReader<T>::StatusUpdated(F handler) const
{
	return StatusUpdated(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::MagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs>(handler));
}

template <typename T> void impl_IMagneticStripeReader<T>::StatusUpdated(EventRegistrationToken const token) const
{
	check(static_cast<IMagneticStripeReader const &>(static_cast<T const &>(*this))->remove_StatusUpdated(token));
}

template <typename T> String impl_IClaimedBarcodeScanner<T>::DeviceId() const
{
	String value = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> bool impl_IClaimedBarcodeScanner<T>::IsEnabled() const
{
	bool value = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->get_IsEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::IsDisabledOnDataReceived(bool const value) const
{
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->put_IsDisabledOnDataReceived(value));
}

template <typename T> bool impl_IClaimedBarcodeScanner<T>::IsDisabledOnDataReceived() const
{
	bool value = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->get_IsDisabledOnDataReceived(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::IsDecodeDataEnabled(bool const value) const
{
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->put_IsDecodeDataEnabled(value));
}

template <typename T> bool impl_IClaimedBarcodeScanner<T>::IsDecodeDataEnabled() const
{
	bool value = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->get_IsDecodeDataEnabled(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::EnableAsync() const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->abi_EnableAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::DisableAsync() const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->abi_DisableAsync(set(result)));
	return result;
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::RetainDevice() const
{
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->abi_RetainDevice());
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::SetActiveSymbologiesAsync(Windows::Foundation::Collections::IIterable<unsigned> const & symbologies) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->abi_SetActiveSymbologiesAsync(get(symbologies), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->abi_ResetStatisticsAsync(get(statisticsCategories), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->abi_UpdateStatisticsAsync(get(statistics), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::SetActiveProfileAsync(String const & profile) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->abi_SetActiveProfileAsync(get(profile), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::SetActiveProfileAsync(wchar_t const (&profile)[S0]) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->abi_SetActiveProfileAsync(StringReference(profile), set(result)));
	return result;
}

template <typename T> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::DataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->add_DataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::DataReceived(F handler) const
{
	return DataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::DataReceived(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->remove_DataReceived(token));
}

template <typename T> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::TriggerPressed(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->add_TriggerPressed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::TriggerPressed(F handler) const
{
	return TriggerPressed(Windows::Foundation::EventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::TriggerPressed(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->remove_TriggerPressed(token));
}

template <typename T> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::TriggerReleased(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->add_TriggerReleased(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::TriggerReleased(F handler) const
{
	return TriggerReleased(Windows::Foundation::EventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::TriggerReleased(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->remove_TriggerReleased(token));
}

template <typename T> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::ReleaseDeviceRequested(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->add_ReleaseDeviceRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::ReleaseDeviceRequested(F handler) const
{
	return ReleaseDeviceRequested(Windows::Foundation::EventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::ReleaseDeviceRequested(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->remove_ReleaseDeviceRequested(token));
}

template <typename T> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::ImagePreviewReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->add_ImagePreviewReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::ImagePreviewReceived(F handler) const
{
	return ImagePreviewReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::ImagePreviewReceived(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->remove_ImagePreviewReceived(token));
}

template <typename T> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->add_ErrorOccurred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedBarcodeScanner<T>::ErrorOccurred(F handler) const
{
	return ErrorOccurred(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::ErrorOccurred(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedBarcodeScanner const &>(static_cast<T const &>(*this))->remove_ErrorOccurred(token));
}

template <typename T> String impl_IClaimedMagneticStripeReader<T>::DeviceId() const
{
	String value = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsEnabled() const
{
	bool value = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->get_IsEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::IsDisabledOnDataReceived(bool const value) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->put_IsDisabledOnDataReceived(value));
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsDisabledOnDataReceived() const
{
	bool value = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->get_IsDisabledOnDataReceived(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::IsDecodeDataEnabled(bool const value) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->put_IsDecodeDataEnabled(value));
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsDecodeDataEnabled() const
{
	bool value = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->get_IsDecodeDataEnabled(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsDeviceAuthenticated() const
{
	bool value = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->get_IsDeviceAuthenticated(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::DataEncryptionAlgorithm(unsigned const value) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->put_DataEncryptionAlgorithm(value));
}

template <typename T> unsigned impl_IClaimedMagneticStripeReader<T>::DataEncryptionAlgorithm() const
{
	unsigned value = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->get_DataEncryptionAlgorithm(&value));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::TracksToRead(Windows::Devices::PointOfService::MagneticStripeReaderTrackIds const value) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->put_TracksToRead(value));
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackIds impl_IClaimedMagneticStripeReader<T>::TracksToRead() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackIds value = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->get_TracksToRead(&value));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::IsTransmitSentinelsEnabled(bool const value) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->put_IsTransmitSentinelsEnabled(value));
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsTransmitSentinelsEnabled() const
{
	bool value = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->get_IsTransmitSentinelsEnabled(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::EnableAsync() const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_EnableAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::DisableAsync() const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_DisableAsync(set(result)));
	return result;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::RetainDevice() const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_RetainDevice());
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::SetErrorReportingType(Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType const value) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_SetErrorReportingType(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IClaimedMagneticStripeReader<T>::RetrieveDeviceAuthenticationDataAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_RetrieveDeviceAuthenticationDataAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::UpdateKeyAsync(String const & key, String const & keyName) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_UpdateKeyAsync(get(key), get(keyName), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::UpdateKeyAsync(wchar_t const (&key)[S0], wchar_t const (&keyName)[S1]) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_UpdateKeyAsync(StringReference(key), StringReference(keyName), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_ResetStatisticsAsync(get(statisticsCategories), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->abi_UpdateStatisticsAsync(get(statistics), set(result)));
	return result;
}

template <typename T> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::BankCardDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->add_BankCardDataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::BankCardDataReceived(F handler) const
{
	return BankCardDataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::BankCardDataReceived(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->remove_BankCardDataReceived(token));
}

template <typename T> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::AamvaCardDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->add_AamvaCardDataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::AamvaCardDataReceived(F handler) const
{
	return AamvaCardDataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::AamvaCardDataReceived(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->remove_AamvaCardDataReceived(token));
}

template <typename T> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::VendorSpecificDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->add_VendorSpecificDataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::VendorSpecificDataReceived(F handler) const
{
	return VendorSpecificDataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::VendorSpecificDataReceived(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->remove_VendorSpecificDataReceived(token));
}

template <typename T> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::ReleaseDeviceRequested(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->add_ReleaseDeviceRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::ReleaseDeviceRequested(F handler) const
{
	return ReleaseDeviceRequested(Windows::Foundation::EventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::ReleaseDeviceRequested(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->remove_ReleaseDeviceRequested(token));
}

template <typename T> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->add_ErrorOccurred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IClaimedMagneticStripeReader<T>::ErrorOccurred(F handler) const
{
	return ErrorOccurred(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::ErrorOccurred(EventRegistrationToken const token) const
{
	check(static_cast<IClaimedMagneticStripeReader const &>(static_cast<T const &>(*this))->remove_ErrorOccurred(token));
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

template <typename T> Windows::Storage::StorageFolder impl_IStorageDeviceStatics<T>::FromId(String const & deviceId) const
{
	Windows::Storage::StorageFolder deviceRoot(nullptr);
	check(static_cast<IStorageDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromId(get(deviceId), set(deviceRoot)));
	return deviceRoot;
}

template <typename T> template <unsigned S0> Windows::Storage::StorageFolder impl_IStorageDeviceStatics<T>::FromId(wchar_t const (&deviceId)[S0]) const
{
	Windows::Storage::StorageFolder deviceRoot(nullptr);
	check(static_cast<IStorageDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromId(StringReference(deviceId), set(deviceRoot)));
	return deviceRoot;
}

template <typename T> String impl_IStorageDeviceStatics<T>::GetDeviceSelector() const
{
	String selector = {};
	check(static_cast<IStorageDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(set(selector)));
	return selector;
}

template <typename T> String impl_IServiceDeviceStatics<T>::GetDeviceSelector(Windows::Devices::Portable::ServiceDeviceType const serviceType) const
{
	String selector = {};
	check(static_cast<IServiceDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(serviceType, set(selector)));
	return selector;
}

template <typename T> String impl_IServiceDeviceStatics<T>::GetDeviceSelectorFromServiceId(GUID const serviceId) const
{
	String selector = {};
	check(static_cast<IServiceDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelectorFromServiceId(serviceId, set(selector)));
	return selector;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

template <typename T> void impl_IPrintTaskConfigurationSaveRequestedDeferral<T>::Complete() const
{
	check(static_cast<IPrintTaskConfigurationSaveRequestedDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> void impl_IPrintTaskConfigurationSaveRequest<T>::Cancel() const
{
	check(static_cast<IPrintTaskConfigurationSaveRequest const &>(static_cast<T const &>(*this))->abi_Cancel());
}

template <typename T> void impl_IPrintTaskConfigurationSaveRequest<T>::Save(IInspectable const & printerExtensionContext) const
{
	check(static_cast<IPrintTaskConfigurationSaveRequest const &>(static_cast<T const &>(*this))->abi_Save(get(printerExtensionContext)));
}

template <typename T> Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral impl_IPrintTaskConfigurationSaveRequest<T>::GetDeferral() const
{
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral deferral(nullptr);
	check(static_cast<IPrintTaskConfigurationSaveRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> Windows::Foundation::DateTime impl_IPrintTaskConfigurationSaveRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IPrintTaskConfigurationSaveRequest const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest impl_IPrintTaskConfigurationSaveRequestedEventArgs<T>::Request() const
{
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest context(nullptr);
	check(static_cast<IPrintTaskConfigurationSaveRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(context)));
	return context;
}

template <typename T> IInspectable impl_IPrintTaskConfiguration<T>::PrinterExtensionContext() const
{
	IInspectable context = {};
	check(static_cast<IPrintTaskConfiguration const &>(static_cast<T const &>(*this))->get_PrinterExtensionContext(set(context)));
	return context;
}

template <typename T> EventRegistrationToken impl_IPrintTaskConfiguration<T>::SaveRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Printers::Extensions::PrintTaskConfiguration, Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IPrintTaskConfiguration const &>(static_cast<T const &>(*this))->add_SaveRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPrintTaskConfiguration<T>::SaveRequested(F eventHandler) const
{
	return SaveRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::Printers::Extensions::PrintTaskConfiguration, Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintTaskConfiguration<T>::SaveRequested(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IPrintTaskConfiguration const &>(static_cast<T const &>(*this))->remove_SaveRequested(eventCookie));
}

template <typename T> String impl_IPrintNotificationEventDetails<T>::PrinterName() const
{
	String value = {};
	check(static_cast<IPrintNotificationEventDetails const &>(static_cast<T const &>(*this))->get_PrinterName(set(value)));
	return value;
}

template <typename T> String impl_IPrintNotificationEventDetails<T>::EventData() const
{
	String value = {};
	check(static_cast<IPrintNotificationEventDetails const &>(static_cast<T const &>(*this))->get_EventData(set(value)));
	return value;
}

template <typename T> void impl_IPrintNotificationEventDetails<T>::EventData(String const & value) const
{
	check(static_cast<IPrintNotificationEventDetails const &>(static_cast<T const &>(*this))->put_EventData(get(value)));
}

template <typename T> template <unsigned S0> void impl_IPrintNotificationEventDetails<T>::EventData(wchar_t const (&value)[S0]) const
{
	check(static_cast<IPrintNotificationEventDetails const &>(static_cast<T const &>(*this))->put_EventData(StringReference(value)));
}

template <typename T> IInspectable impl_IPrintExtensionContextStatic<T>::FromDeviceId(String const & deviceId) const
{
	IInspectable context = {};
	check(static_cast<IPrintExtensionContextStatic const &>(static_cast<T const &>(*this))->abi_FromDeviceId(get(deviceId), set(context)));
	return context;
}

template <typename T> template <unsigned S0> IInspectable impl_IPrintExtensionContextStatic<T>::FromDeviceId(wchar_t const (&deviceId)[S0]) const
{
	IInspectable context = {};
	check(static_cast<IPrintExtensionContextStatic const &>(static_cast<T const &>(*this))->abi_FromDeviceId(StringReference(deviceId), set(context)));
	return context;
}

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

template <typename T> Windows::Devices::Sensors::Accelerometer impl_IAccelerometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Accelerometer result(nullptr);
	check(static_cast<IAccelerometerStatics const &>(static_cast<T const &>(*this))->abi_GetDefault(set(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::AccelerometerReading impl_IAccelerometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::AccelerometerReading value(nullptr);
	check(static_cast<IAccelerometer const &>(static_cast<T const &>(*this))->abi_GetCurrentReading(set(value)));
	return value;
}

template <typename T> unsigned impl_IAccelerometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(static_cast<IAccelerometer const &>(static_cast<T const &>(*this))->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IAccelerometer<T>::ReportInterval(unsigned const value) const
{
	check(static_cast<IAccelerometer const &>(static_cast<T const &>(*this))->put_ReportInterval(value));
}

template <typename T> unsigned impl_IAccelerometer<T>::ReportInterval() const
{
	unsigned value = {};
	check(static_cast<IAccelerometer const &>(static_cast<T const &>(*this))->get_ReportInterval(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IAccelerometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IAccelerometer const &>(static_cast<T const &>(*this))->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IAccelerometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IAccelerometer<T>::ReadingChanged(EventRegistrationToken const token) const
{
	check(static_cast<IAccelerometer const &>(static_cast<T const &>(*this))->remove_ReadingChanged(token));
}

template <typename T> EventRegistrationToken impl_IAccelerometer<T>::Shaken(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerShakenEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IAccelerometer const &>(static_cast<T const &>(*this))->add_Shaken(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IAccelerometer<T>::Shaken(F handler) const
{
	return Shaken(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerShakenEventArgs>(handler));
}

template <typename T> void impl_IAccelerometer<T>::Shaken(EventRegistrationToken const token) const
{
	check(static_cast<IAccelerometer const &>(static_cast<T const &>(*this))->remove_Shaken(token));
}

template <typename T> Windows::Foundation::DateTime impl_IAccelerometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IAccelerometerReading const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IAccelerometerReading<T>::AccelerationX() const
{
	double value = {};
	check(static_cast<IAccelerometerReading const &>(static_cast<T const &>(*this))->get_AccelerationX(&value));
	return value;
}

template <typename T> double impl_IAccelerometerReading<T>::AccelerationY() const
{
	double value = {};
	check(static_cast<IAccelerometerReading const &>(static_cast<T const &>(*this))->get_AccelerationY(&value));
	return value;
}

template <typename T> double impl_IAccelerometerReading<T>::AccelerationZ() const
{
	double value = {};
	check(static_cast<IAccelerometerReading const &>(static_cast<T const &>(*this))->get_AccelerationZ(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::AccelerometerReading impl_IAccelerometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::AccelerometerReading value(nullptr);
	check(static_cast<IAccelerometerReadingChangedEventArgs const &>(static_cast<T const &>(*this))->get_Reading(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAccelerometerShakenEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IAccelerometerShakenEventArgs const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::Inclinometer impl_IInclinometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Inclinometer result(nullptr);
	check(static_cast<IInclinometerStatics const &>(static_cast<T const &>(*this))->abi_GetDefault(set(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::InclinometerReading impl_IInclinometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::InclinometerReading value(nullptr);
	check(static_cast<IInclinometer const &>(static_cast<T const &>(*this))->abi_GetCurrentReading(set(value)));
	return value;
}

template <typename T> unsigned impl_IInclinometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(static_cast<IInclinometer const &>(static_cast<T const &>(*this))->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IInclinometer<T>::ReportInterval(unsigned const value) const
{
	check(static_cast<IInclinometer const &>(static_cast<T const &>(*this))->put_ReportInterval(value));
}

template <typename T> unsigned impl_IInclinometer<T>::ReportInterval() const
{
	unsigned value = {};
	check(static_cast<IInclinometer const &>(static_cast<T const &>(*this))->get_ReportInterval(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IInclinometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Inclinometer, Windows::Devices::Sensors::InclinometerReadingChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IInclinometer const &>(static_cast<T const &>(*this))->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IInclinometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Inclinometer, Windows::Devices::Sensors::InclinometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IInclinometer<T>::ReadingChanged(EventRegistrationToken const token) const
{
	check(static_cast<IInclinometer const &>(static_cast<T const &>(*this))->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_IInclinometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IInclinometerReading const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> float impl_IInclinometerReading<T>::PitchDegrees() const
{
	float value = {};
	check(static_cast<IInclinometerReading const &>(static_cast<T const &>(*this))->get_PitchDegrees(&value));
	return value;
}

template <typename T> float impl_IInclinometerReading<T>::RollDegrees() const
{
	float value = {};
	check(static_cast<IInclinometerReading const &>(static_cast<T const &>(*this))->get_RollDegrees(&value));
	return value;
}

template <typename T> float impl_IInclinometerReading<T>::YawDegrees() const
{
	float value = {};
	check(static_cast<IInclinometerReading const &>(static_cast<T const &>(*this))->get_YawDegrees(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_IInclinometerReadingYawAccuracy<T>::YawAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check(static_cast<IInclinometerReadingYawAccuracy const &>(static_cast<T const &>(*this))->get_YawAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::InclinometerReading impl_IInclinometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::InclinometerReading value(nullptr);
	check(static_cast<IInclinometerReadingChangedEventArgs const &>(static_cast<T const &>(*this))->get_Reading(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Gyrometer impl_IGyrometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Gyrometer result(nullptr);
	check(static_cast<IGyrometerStatics const &>(static_cast<T const &>(*this))->abi_GetDefault(set(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::GyrometerReading impl_IGyrometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::GyrometerReading value(nullptr);
	check(static_cast<IGyrometer const &>(static_cast<T const &>(*this))->abi_GetCurrentReading(set(value)));
	return value;
}

template <typename T> unsigned impl_IGyrometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(static_cast<IGyrometer const &>(static_cast<T const &>(*this))->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IGyrometer<T>::ReportInterval(unsigned const value) const
{
	check(static_cast<IGyrometer const &>(static_cast<T const &>(*this))->put_ReportInterval(value));
}

template <typename T> unsigned impl_IGyrometer<T>::ReportInterval() const
{
	unsigned value = {};
	check(static_cast<IGyrometer const &>(static_cast<T const &>(*this))->get_ReportInterval(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IGyrometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Gyrometer, Windows::Devices::Sensors::GyrometerReadingChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IGyrometer const &>(static_cast<T const &>(*this))->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGyrometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Gyrometer, Windows::Devices::Sensors::GyrometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IGyrometer<T>::ReadingChanged(EventRegistrationToken const token) const
{
	check(static_cast<IGyrometer const &>(static_cast<T const &>(*this))->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_IGyrometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IGyrometerReading const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IGyrometerReading<T>::AngularVelocityX() const
{
	double value = {};
	check(static_cast<IGyrometerReading const &>(static_cast<T const &>(*this))->get_AngularVelocityX(&value));
	return value;
}

template <typename T> double impl_IGyrometerReading<T>::AngularVelocityY() const
{
	double value = {};
	check(static_cast<IGyrometerReading const &>(static_cast<T const &>(*this))->get_AngularVelocityY(&value));
	return value;
}

template <typename T> double impl_IGyrometerReading<T>::AngularVelocityZ() const
{
	double value = {};
	check(static_cast<IGyrometerReading const &>(static_cast<T const &>(*this))->get_AngularVelocityZ(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::GyrometerReading impl_IGyrometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::GyrometerReading value(nullptr);
	check(static_cast<IGyrometerReadingChangedEventArgs const &>(static_cast<T const &>(*this))->get_Reading(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Compass impl_ICompassStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Compass result(nullptr);
	check(static_cast<ICompassStatics const &>(static_cast<T const &>(*this))->abi_GetDefault(set(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::CompassReading impl_ICompass<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::CompassReading value(nullptr);
	check(static_cast<ICompass const &>(static_cast<T const &>(*this))->abi_GetCurrentReading(set(value)));
	return value;
}

template <typename T> unsigned impl_ICompass<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(static_cast<ICompass const &>(static_cast<T const &>(*this))->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_ICompass<T>::ReportInterval(unsigned const value) const
{
	check(static_cast<ICompass const &>(static_cast<T const &>(*this))->put_ReportInterval(value));
}

template <typename T> unsigned impl_ICompass<T>::ReportInterval() const
{
	unsigned value = {};
	check(static_cast<ICompass const &>(static_cast<T const &>(*this))->get_ReportInterval(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_ICompass<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Compass, Windows::Devices::Sensors::CompassReadingChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICompass const &>(static_cast<T const &>(*this))->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICompass<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Compass, Windows::Devices::Sensors::CompassReadingChangedEventArgs>(handler));
}

template <typename T> void impl_ICompass<T>::ReadingChanged(EventRegistrationToken const token) const
{
	check(static_cast<ICompass const &>(static_cast<T const &>(*this))->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_ICompassReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ICompassReading const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_ICompassReading<T>::HeadingMagneticNorth() const
{
	double value = {};
	check(static_cast<ICompassReading const &>(static_cast<T const &>(*this))->get_HeadingMagneticNorth(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_ICompassReading<T>::HeadingTrueNorth() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<ICompassReading const &>(static_cast<T const &>(*this))->get_HeadingTrueNorth(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_ICompassReadingHeadingAccuracy<T>::HeadingAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check(static_cast<ICompassReadingHeadingAccuracy const &>(static_cast<T const &>(*this))->get_HeadingAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::CompassReading impl_ICompassReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::CompassReading value(nullptr);
	check(static_cast<ICompassReadingChangedEventArgs const &>(static_cast<T const &>(*this))->get_Reading(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::LightSensor impl_ILightSensorStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::LightSensor result(nullptr);
	check(static_cast<ILightSensorStatics const &>(static_cast<T const &>(*this))->abi_GetDefault(set(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::LightSensorReading impl_ILightSensor<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::LightSensorReading value(nullptr);
	check(static_cast<ILightSensor const &>(static_cast<T const &>(*this))->abi_GetCurrentReading(set(value)));
	return value;
}

template <typename T> unsigned impl_ILightSensor<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(static_cast<ILightSensor const &>(static_cast<T const &>(*this))->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_ILightSensor<T>::ReportInterval(unsigned const value) const
{
	check(static_cast<ILightSensor const &>(static_cast<T const &>(*this))->put_ReportInterval(value));
}

template <typename T> unsigned impl_ILightSensor<T>::ReportInterval() const
{
	unsigned value = {};
	check(static_cast<ILightSensor const &>(static_cast<T const &>(*this))->get_ReportInterval(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_ILightSensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::LightSensor, Windows::Devices::Sensors::LightSensorReadingChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ILightSensor const &>(static_cast<T const &>(*this))->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ILightSensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::LightSensor, Windows::Devices::Sensors::LightSensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_ILightSensor<T>::ReadingChanged(EventRegistrationToken const token) const
{
	check(static_cast<ILightSensor const &>(static_cast<T const &>(*this))->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_ILightSensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ILightSensorReading const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> float impl_ILightSensorReading<T>::IlluminanceInLux() const
{
	float value = {};
	check(static_cast<ILightSensorReading const &>(static_cast<T const &>(*this))->get_IlluminanceInLux(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::LightSensorReading impl_ILightSensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::LightSensorReading value(nullptr);
	check(static_cast<ILightSensorReadingChangedEventArgs const &>(static_cast<T const &>(*this))->get_Reading(set(value)));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M11() const
{
	float value = {};
	check(static_cast<ISensorRotationMatrix const &>(static_cast<T const &>(*this))->get_M11(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M12() const
{
	float value = {};
	check(static_cast<ISensorRotationMatrix const &>(static_cast<T const &>(*this))->get_M12(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M13() const
{
	float value = {};
	check(static_cast<ISensorRotationMatrix const &>(static_cast<T const &>(*this))->get_M13(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M21() const
{
	float value = {};
	check(static_cast<ISensorRotationMatrix const &>(static_cast<T const &>(*this))->get_M21(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M22() const
{
	float value = {};
	check(static_cast<ISensorRotationMatrix const &>(static_cast<T const &>(*this))->get_M22(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M23() const
{
	float value = {};
	check(static_cast<ISensorRotationMatrix const &>(static_cast<T const &>(*this))->get_M23(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M31() const
{
	float value = {};
	check(static_cast<ISensorRotationMatrix const &>(static_cast<T const &>(*this))->get_M31(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M32() const
{
	float value = {};
	check(static_cast<ISensorRotationMatrix const &>(static_cast<T const &>(*this))->get_M32(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M33() const
{
	float value = {};
	check(static_cast<ISensorRotationMatrix const &>(static_cast<T const &>(*this))->get_M33(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::W() const
{
	float value = {};
	check(static_cast<ISensorQuaternion const &>(static_cast<T const &>(*this))->get_W(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::X() const
{
	float value = {};
	check(static_cast<ISensorQuaternion const &>(static_cast<T const &>(*this))->get_X(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::Y() const
{
	float value = {};
	check(static_cast<ISensorQuaternion const &>(static_cast<T const &>(*this))->get_Y(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::Z() const
{
	float value = {};
	check(static_cast<ISensorQuaternion const &>(static_cast<T const &>(*this))->get_Z(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::OrientationSensor impl_IOrientationSensorStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::OrientationSensor result(nullptr);
	check(static_cast<IOrientationSensorStatics const &>(static_cast<T const &>(*this))->abi_GetDefault(set(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::OrientationSensorReading impl_IOrientationSensor<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::OrientationSensorReading value(nullptr);
	check(static_cast<IOrientationSensor const &>(static_cast<T const &>(*this))->abi_GetCurrentReading(set(value)));
	return value;
}

template <typename T> unsigned impl_IOrientationSensor<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(static_cast<IOrientationSensor const &>(static_cast<T const &>(*this))->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IOrientationSensor<T>::ReportInterval(unsigned const value) const
{
	check(static_cast<IOrientationSensor const &>(static_cast<T const &>(*this))->put_ReportInterval(value));
}

template <typename T> unsigned impl_IOrientationSensor<T>::ReportInterval() const
{
	unsigned value = {};
	check(static_cast<IOrientationSensor const &>(static_cast<T const &>(*this))->get_ReportInterval(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IOrientationSensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::OrientationSensor, Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IOrientationSensor const &>(static_cast<T const &>(*this))->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IOrientationSensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::OrientationSensor, Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IOrientationSensor<T>::ReadingChanged(EventRegistrationToken const token) const
{
	check(static_cast<IOrientationSensor const &>(static_cast<T const &>(*this))->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_IOrientationSensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IOrientationSensorReading const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorRotationMatrix impl_IOrientationSensorReading<T>::RotationMatrix() const
{
	Windows::Devices::Sensors::SensorRotationMatrix value(nullptr);
	check(static_cast<IOrientationSensorReading const &>(static_cast<T const &>(*this))->get_RotationMatrix(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorQuaternion impl_IOrientationSensorReading<T>::Quaternion() const
{
	Windows::Devices::Sensors::SensorQuaternion value(nullptr);
	check(static_cast<IOrientationSensorReading const &>(static_cast<T const &>(*this))->get_Quaternion(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_IOrientationSensorReadingYawAccuracy<T>::YawAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check(static_cast<IOrientationSensorReadingYawAccuracy const &>(static_cast<T const &>(*this))->get_YawAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::OrientationSensorReading impl_IOrientationSensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::OrientationSensorReading value(nullptr);
	check(static_cast<IOrientationSensorReadingChangedEventArgs const &>(static_cast<T const &>(*this))->get_Reading(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::SimpleOrientationSensor impl_ISimpleOrientationSensorStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::SimpleOrientationSensor result(nullptr);
	check(static_cast<ISimpleOrientationSensorStatics const &>(static_cast<T const &>(*this))->abi_GetDefault(set(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::SimpleOrientation impl_ISimpleOrientationSensor<T>::GetCurrentOrientation() const
{
	Windows::Devices::Sensors::SimpleOrientation value = {};
	check(static_cast<ISimpleOrientationSensor const &>(static_cast<T const &>(*this))->abi_GetCurrentOrientation(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_ISimpleOrientationSensor<T>::OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::SimpleOrientationSensor, Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISimpleOrientationSensor const &>(static_cast<T const &>(*this))->add_OrientationChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISimpleOrientationSensor<T>::OrientationChanged(F handler) const
{
	return OrientationChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::SimpleOrientationSensor, Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs>(handler));
}

template <typename T> void impl_ISimpleOrientationSensor<T>::OrientationChanged(EventRegistrationToken const token) const
{
	check(static_cast<ISimpleOrientationSensor const &>(static_cast<T const &>(*this))->remove_OrientationChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_ISimpleOrientationSensorOrientationChangedEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ISimpleOrientationSensorOrientationChangedEventArgs const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SimpleOrientation impl_ISimpleOrientationSensorOrientationChangedEventArgs<T>::Orientation() const
{
	Windows::Devices::Sensors::SimpleOrientation value = {};
	check(static_cast<ISimpleOrientationSensorOrientationChangedEventArgs const &>(static_cast<T const &>(*this))->get_Orientation(&value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

template <typename T> void impl_ISmartCardPinResetHandler<T>::Invoke(Windows::Devices::SmartCards::SmartCardProvisioning const & sender, Windows::Devices::SmartCards::SmartCardPinResetRequest const & request) const
{
	check(static_cast<ISmartCardPinResetHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(request)));
}

template <typename T> String impl_ISmartCardReaderStatics<T>::GetDeviceSelector() const
{
	String selector = {};
	check(static_cast<ISmartCardReaderStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(set(selector)));
	return selector;
}

template <typename T> String impl_ISmartCardReaderStatics<T>::GetDeviceSelector(Windows::Devices::SmartCards::SmartCardReaderKind const kind) const
{
	String selector = {};
	check(static_cast<ISmartCardReaderStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelectorWithKind(kind, set(selector)));
	return selector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> impl_ISmartCardReaderStatics<T>::FromIdAsync(String const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> result = {};
	check(static_cast<ISmartCardReaderStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(get(deviceId), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> impl_ISmartCardReaderStatics<T>::FromIdAsync(wchar_t const (&deviceId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> result = {};
	check(static_cast<ISmartCardReaderStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(StringReference(deviceId), set(result)));
	return result;
}

template <typename T> String impl_ISmartCardReader<T>::DeviceId() const
{
	String value = {};
	check(static_cast<ISmartCardReader const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> String impl_ISmartCardReader<T>::Name() const
{
	String value = {};
	check(static_cast<ISmartCardReader const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> Windows::Devices::SmartCards::SmartCardReaderKind impl_ISmartCardReader<T>::Kind() const
{
	Windows::Devices::SmartCards::SmartCardReaderKind value = {};
	check(static_cast<ISmartCardReader const &>(static_cast<T const &>(*this))->get_Kind(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Devices::SmartCards::SmartCardReaderStatus> impl_ISmartCardReader<T>::GetStatusAsync() const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Devices::SmartCards::SmartCardReaderStatus> result = {};
	check(static_cast<ISmartCardReader const &>(static_cast<T const &>(*this))->abi_GetStatusAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::SmartCards::SmartCard>> impl_ISmartCardReader<T>::FindAllCardsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::SmartCards::SmartCard>> result = {};
	check(static_cast<ISmartCardReader const &>(static_cast<T const &>(*this))->abi_FindAllCardsAsync(set(result)));
	return result;
}

template <typename T> EventRegistrationToken impl_ISmartCardReader<T>::CardAdded(Windows::Foundation::ITypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardAddedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISmartCardReader const &>(static_cast<T const &>(*this))->add_CardAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISmartCardReader<T>::CardAdded(F handler) const
{
	return CardAdded(Windows::Foundation::TypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardAddedEventArgs>(handler));
}

template <typename T> void impl_ISmartCardReader<T>::CardAdded(EventRegistrationToken const token) const
{
	check(static_cast<ISmartCardReader const &>(static_cast<T const &>(*this))->remove_CardAdded(token));
}

template <typename T> EventRegistrationToken impl_ISmartCardReader<T>::CardRemoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardRemovedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISmartCardReader const &>(static_cast<T const &>(*this))->add_CardRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISmartCardReader<T>::CardRemoved(F handler) const
{
	return CardRemoved(Windows::Foundation::TypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardRemovedEventArgs>(handler));
}

template <typename T> void impl_ISmartCardReader<T>::CardRemoved(EventRegistrationToken const token) const
{
	check(static_cast<ISmartCardReader const &>(static_cast<T const &>(*this))->remove_CardRemoved(token));
}

template <typename T> Windows::Devices::SmartCards::SmartCard impl_ICardAddedEventArgs<T>::SmartCard() const
{
	Windows::Devices::SmartCards::SmartCard value(nullptr);
	check(static_cast<ICardAddedEventArgs const &>(static_cast<T const &>(*this))->get_SmartCard(set(value)));
	return value;
}

template <typename T> Windows::Devices::SmartCards::SmartCard impl_ICardRemovedEventArgs<T>::SmartCard() const
{
	Windows::Devices::SmartCards::SmartCard value(nullptr);
	check(static_cast<ICardRemovedEventArgs const &>(static_cast<T const &>(*this))->get_SmartCard(set(value)));
	return value;
}

template <typename T> Windows::Devices::SmartCards::SmartCardReader impl_ISmartCard<T>::Reader() const
{
	Windows::Devices::SmartCards::SmartCardReader value(nullptr);
	check(static_cast<ISmartCard const &>(static_cast<T const &>(*this))->get_Reader(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Devices::SmartCards::SmartCardStatus> impl_ISmartCard<T>::GetStatusAsync() const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Devices::SmartCards::SmartCardStatus> result = {};
	check(static_cast<ISmartCard const &>(static_cast<T const &>(*this))->abi_GetStatusAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ISmartCard<T>::GetAnswerToResetAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> result = {};
	check(static_cast<ISmartCard const &>(static_cast<T const &>(*this))->abi_GetAnswerToResetAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics<T>::FromSmartCardAsync(Windows::Devices::SmartCards::SmartCard const & card) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result = {};
	check(static_cast<ISmartCardProvisioningStatics const &>(static_cast<T const &>(*this))->abi_FromSmartCardAsync(get(card), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics<T>::RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result = {};
	check(static_cast<ISmartCardProvisioningStatics const &>(static_cast<T const &>(*this))->abi_RequestVirtualSmartCardCreationAsync(get(friendlyName), get(administrativeKey), get(pinPolicy), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics<T>::RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result = {};
	check(static_cast<ISmartCardProvisioningStatics const &>(static_cast<T const &>(*this))->abi_RequestVirtualSmartCardCreationAsync(StringReference(friendlyName), get(administrativeKey), get(pinPolicy), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics<T>::RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID const cardId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result = {};
	check(static_cast<ISmartCardProvisioningStatics const &>(static_cast<T const &>(*this))->abi_RequestVirtualSmartCardCreationAsyncWithCardId(get(friendlyName), get(administrativeKey), get(pinPolicy), cardId, set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics<T>::RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID const cardId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result = {};
	check(static_cast<ISmartCardProvisioningStatics const &>(static_cast<T const &>(*this))->abi_RequestVirtualSmartCardCreationAsyncWithCardId(StringReference(friendlyName), get(administrativeKey), get(pinPolicy), cardId, set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardProvisioningStatics<T>::RequestVirtualSmartCardDeletionAsync(Windows::Devices::SmartCards::SmartCard const & card) const
{
	Windows::Foundation::IAsyncOperation<bool> result = {};
	check(static_cast<ISmartCardProvisioningStatics const &>(static_cast<T const &>(*this))->abi_RequestVirtualSmartCardDeletionAsync(get(card), set(result)));
	return result;
}

template <typename T> Windows::Devices::SmartCards::SmartCard impl_ISmartCardProvisioning<T>::SmartCard() const
{
	Windows::Devices::SmartCards::SmartCard value(nullptr);
	check(static_cast<ISmartCardProvisioning const &>(static_cast<T const &>(*this))->get_SmartCard(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<GUID> impl_ISmartCardProvisioning<T>::GetIdAsync() const
{
	Windows::Foundation::IAsyncOperation<GUID> result = {};
	check(static_cast<ISmartCardProvisioning const &>(static_cast<T const &>(*this))->abi_GetIdAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ISmartCardProvisioning<T>::GetNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> result = {};
	check(static_cast<ISmartCardProvisioning const &>(static_cast<T const &>(*this))->abi_GetNameAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardChallengeContext> impl_ISmartCardProvisioning<T>::GetChallengeContextAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardChallengeContext> result = {};
	check(static_cast<ISmartCardProvisioning const &>(static_cast<T const &>(*this))->abi_GetChallengeContextAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardProvisioning<T>::RequestPinChangeAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result = {};
	check(static_cast<ISmartCardProvisioning const &>(static_cast<T const &>(*this))->abi_RequestPinChangeAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardProvisioning<T>::RequestPinResetAsync(Windows::Devices::SmartCards::ISmartCardPinResetHandler const & handler) const
{
	Windows::Foundation::IAsyncOperation<bool> result = {};
	check(static_cast<ISmartCardProvisioning const &>(static_cast<T const &>(*this))->abi_RequestPinResetAsync(get(handler), set(result)));
	return result;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardProvisioning<T>::RequestPinResetAsync(F handler) const
{
	return RequestPinResetAsync(Windows::Devices::SmartCards::SmartCardPinResetHandler(handler));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISmartCardPinResetRequest<T>::Challenge() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ISmartCardPinResetRequest const &>(static_cast<T const &>(*this))->get_Challenge(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmartCardPinResetRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ISmartCardPinResetRequest const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinResetDeferral impl_ISmartCardPinResetRequest<T>::GetDeferral() const
{
	Windows::Devices::SmartCards::SmartCardPinResetDeferral result(nullptr);
	check(static_cast<ISmartCardPinResetRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(result)));
	return result;
}

template <typename T> void impl_ISmartCardPinResetRequest<T>::SetResponse(Windows::Storage::Streams::IBuffer const & response) const
{
	check(static_cast<ISmartCardPinResetRequest const &>(static_cast<T const &>(*this))->abi_SetResponse(get(response)));
}

template <typename T> void impl_ISmartCardPinResetDeferral<T>::Complete() const
{
	check(static_cast<ISmartCardPinResetDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> unsigned impl_ISmartCardPinPolicy<T>::MinLength() const
{
	unsigned value = {};
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->get_MinLength(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::MinLength(unsigned const value) const
{
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->put_MinLength(value));
}

template <typename T> unsigned impl_ISmartCardPinPolicy<T>::MaxLength() const
{
	unsigned value = {};
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->get_MaxLength(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::MaxLength(unsigned const value) const
{
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->put_MaxLength(value));
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption impl_ISmartCardPinPolicy<T>::UppercaseLetters() const
{
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value = {};
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->get_UppercaseLetters(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::UppercaseLetters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption const value) const
{
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->put_UppercaseLetters(value));
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption impl_ISmartCardPinPolicy<T>::LowercaseLetters() const
{
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value = {};
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->get_LowercaseLetters(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::LowercaseLetters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption const value) const
{
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->put_LowercaseLetters(value));
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption impl_ISmartCardPinPolicy<T>::Digits() const
{
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value = {};
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->get_Digits(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::Digits(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption const value) const
{
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->put_Digits(value));
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption impl_ISmartCardPinPolicy<T>::SpecialCharacters() const
{
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value = {};
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->get_SpecialCharacters(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::SpecialCharacters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption const value) const
{
	check(static_cast<ISmartCardPinPolicy const &>(static_cast<T const &>(*this))->put_SpecialCharacters(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISmartCardChallengeContext<T>::Challenge() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ISmartCardChallengeContext const &>(static_cast<T const &>(*this))->get_Challenge(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardChallengeContext<T>::VerifyResponseAsync(Windows::Storage::Streams::IBuffer const & response) const
{
	Windows::Foundation::IAsyncOperation<bool> result = {};
	check(static_cast<ISmartCardChallengeContext const &>(static_cast<T const &>(*this))->abi_VerifyResponseAsync(get(response), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmartCardChallengeContext<T>::ProvisionAsync(Windows::Storage::Streams::IBuffer const & response, bool const formatCard) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<ISmartCardChallengeContext const &>(static_cast<T const &>(*this))->abi_ProvisionAsync(get(response), formatCard, set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmartCardChallengeContext<T>::ProvisionAsync(Windows::Storage::Streams::IBuffer const & response, bool const formatCard, GUID const newCardId) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<ISmartCardChallengeContext const &>(static_cast<T const &>(*this))->abi_ProvisionAsyncWithNewCardId(get(response), formatCard, newCardId, set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmartCardChallengeContext<T>::ChangeAdministrativeKeyAsync(Windows::Storage::Streams::IBuffer const & response, Windows::Storage::Streams::IBuffer const & newAdministrativeKey) const
{
	Windows::Foundation::IAsyncAction result = {};
	check(static_cast<ISmartCardChallengeContext const &>(static_cast<T const &>(*this))->abi_ChangeAdministrativeKeyAsync(get(response), get(newAdministrativeKey), set(result)));
	return result;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

template <typename T> void impl_ISmsMessageReceivedEventHandler<T>::Invoke(Windows::Devices::Sms::SmsDevice const & sender, Windows::Devices::Sms::SmsMessageReceivedEventArgs const & e) const
{
	check(static_cast<ISmsMessageReceivedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_ISmsDeviceStatusChangedEventHandler<T>::Invoke(Windows::Devices::Sms::SmsDevice const & sender) const
{
	check(static_cast<ISmsDeviceStatusChangedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender)));
}

template <typename T> unsigned impl_ISmsMessage<T>::Id() const
{
	unsigned value = {};
	check(static_cast<ISmsMessage const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageClass impl_ISmsMessage<T>::MessageClass() const
{
	Windows::Devices::Sms::SmsMessageClass value = {};
	check(static_cast<ISmsMessage const &>(static_cast<T const &>(*this))->get_MessageClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDataFormat impl_ISmsBinaryMessage<T>::Format() const
{
	Windows::Devices::Sms::SmsDataFormat value = {};
	check(static_cast<ISmsBinaryMessage const &>(static_cast<T const &>(*this))->get_Format(&value));
	return value;
}

template <typename T> void impl_ISmsBinaryMessage<T>::Format(Windows::Devices::Sms::SmsDataFormat const value) const
{
	check(static_cast<ISmsBinaryMessage const &>(static_cast<T const &>(*this))->put_Format(value));
}

template <typename T> Windows::Foundation::DateTime impl_ISmsTextMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> unsigned impl_ISmsTextMessage<T>::PartReferenceId() const
{
	unsigned value = {};
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->get_PartReferenceId(&value));
	return value;
}

template <typename T> unsigned impl_ISmsTextMessage<T>::PartNumber() const
{
	unsigned value = {};
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->get_PartNumber(&value));
	return value;
}

template <typename T> unsigned impl_ISmsTextMessage<T>::PartCount() const
{
	unsigned value = {};
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->get_PartCount(&value));
	return value;
}

template <typename T> String impl_ISmsTextMessage<T>::To() const
{
	String value = {};
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->get_To(set(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::To(String const & value) const
{
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->put_To(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISmsTextMessage<T>::To(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->put_To(StringReference(value)));
}

template <typename T> String impl_ISmsTextMessage<T>::From() const
{
	String value = {};
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->get_From(set(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::From(String const & value) const
{
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->put_From(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISmsTextMessage<T>::From(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->put_From(StringReference(value)));
}

template <typename T> String impl_ISmsTextMessage<T>::Body() const
{
	String value = {};
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->get_Body(set(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::Body(String const & value) const
{
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->put_Body(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISmsTextMessage<T>::Body(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->put_Body(StringReference(value)));
}

template <typename T> Windows::Devices::Sms::SmsEncoding impl_ISmsTextMessage<T>::Encoding() const
{
	Windows::Devices::Sms::SmsEncoding value = {};
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->get_Encoding(&value));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::Encoding(Windows::Devices::Sms::SmsEncoding const value) const
{
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->put_Encoding(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsBinaryMessage> impl_ISmsTextMessage<T>::ToBinaryMessages(Windows::Devices::Sms::SmsDataFormat const format) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsBinaryMessage> messages = {};
	check(static_cast<ISmsTextMessage const &>(static_cast<T const &>(*this))->abi_ToBinaryMessages(format, set(messages)));
	return messages;
}

template <typename T> Windows::Devices::Sms::SmsTextMessage impl_ISmsTextMessageStatics<T>::FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage) const
{
	Windows::Devices::Sms::SmsTextMessage textMessage(nullptr);
	check(static_cast<ISmsTextMessageStatics const &>(static_cast<T const &>(*this))->abi_FromBinaryMessage(get(binaryMessage), set(textMessage)));
	return textMessage;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmsDeviceMessageStore<T>::DeleteMessageAsync(unsigned const messageId) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<ISmsDeviceMessageStore const &>(static_cast<T const &>(*this))->abi_DeleteMessageAsync(messageId, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmsDeviceMessageStore<T>::DeleteMessagesAsync(Windows::Devices::Sms::SmsMessageFilter const messageFilter) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<ISmsDeviceMessageStore const &>(static_cast<T const &>(*this))->abi_DeleteMessagesAsync(messageFilter, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage> impl_ISmsDeviceMessageStore<T>::GetMessageAsync(unsigned const messageId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage> asyncInfo = {};
	check(static_cast<ISmsDeviceMessageStore const &>(static_cast<T const &>(*this))->abi_GetMessageAsync(messageId, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int> impl_ISmsDeviceMessageStore<T>::GetMessagesAsync(Windows::Devices::Sms::SmsMessageFilter const messageFilter) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int> asyncInfo = {};
	check(static_cast<ISmsDeviceMessageStore const &>(static_cast<T const &>(*this))->abi_GetMessagesAsync(messageFilter, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_ISmsDeviceMessageStore<T>::MaxMessages() const
{
	unsigned value = {};
	check(static_cast<ISmsDeviceMessageStore const &>(static_cast<T const &>(*this))->get_MaxMessages(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsTextMessage impl_ISmsMessageReceivedEventArgs<T>::TextMessage() const
{
	Windows::Devices::Sms::SmsTextMessage value(nullptr);
	check(static_cast<ISmsMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->get_TextMessage(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBinaryMessage impl_ISmsMessageReceivedEventArgs<T>::BinaryMessage() const
{
	Windows::Devices::Sms::SmsBinaryMessage value(nullptr);
	check(static_cast<ISmsMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->get_BinaryMessage(set(value)));
	return value;
}

template <typename T> String impl_ISmsDeviceStatics<T>::GetDeviceSelector() const
{
	String phstrDeviceClassSelector = {};
	check(static_cast<ISmsDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(set(phstrDeviceClassSelector)));
	return phstrDeviceClassSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics<T>::FromIdAsync(String const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo = {};
	check(static_cast<ISmsDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(get(deviceId), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics<T>::FromIdAsync(wchar_t const (&deviceId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo = {};
	check(static_cast<ISmsDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(StringReference(deviceId), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo = {};
	check(static_cast<ISmsDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDefaultAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics2<T>::FromNetworkAccountIdAsync(String const & networkAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo = {};
	check(static_cast<ISmsDeviceStatics2 const &>(static_cast<T const &>(*this))->abi_FromNetworkAccountIdAsync(get(networkAccountId), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics2<T>::FromNetworkAccountIdAsync(wchar_t const (&networkAccountId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo = {};
	check(static_cast<ISmsDeviceStatics2 const &>(static_cast<T const &>(*this))->abi_FromNetworkAccountIdAsync(StringReference(networkAccountId), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Devices::Sms::SendSmsMessageOperation impl_ISmsDevice<T>::SendMessageAsync(Windows::Devices::Sms::ISmsMessage const & message) const
{
	Windows::Devices::Sms::SendSmsMessageOperation asyncInfo(nullptr);
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->abi_SendMessageAsync(get(message), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Devices::Sms::SmsEncodedLength impl_ISmsDevice<T>::CalculateLength(Windows::Devices::Sms::SmsTextMessage const & message) const
{
	Windows::Devices::Sms::SmsEncodedLength encodedLength = {};
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->abi_CalculateLength(get(message), &encodedLength));
	return encodedLength;
}

template <typename T> String impl_ISmsDevice<T>::AccountPhoneNumber() const
{
	String value = {};
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->get_AccountPhoneNumber(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsDevice<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDeviceMessageStore impl_ISmsDevice<T>::MessageStore() const
{
	Windows::Devices::Sms::SmsDeviceMessageStore value(nullptr);
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->get_MessageStore(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDeviceStatus impl_ISmsDevice<T>::DeviceStatus() const
{
	Windows::Devices::Sms::SmsDeviceStatus value = {};
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->get_DeviceStatus(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_ISmsDevice<T>::SmsMessageReceived(Windows::Devices::Sms::ISmsMessageReceivedEventHandler const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->add_SmsMessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISmsDevice<T>::SmsMessageReceived(F eventHandler) const
{
	return SmsMessageReceived(Windows::Devices::Sms::SmsMessageReceivedEventHandler(eventHandler));
}

template <typename T> void impl_ISmsDevice<T>::SmsMessageReceived(EventRegistrationToken const eventCookie) const
{
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->remove_SmsMessageReceived(eventCookie));
}

template <typename T> EventRegistrationToken impl_ISmsDevice<T>::SmsDeviceStatusChanged(Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->add_SmsDeviceStatusChanged(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISmsDevice<T>::SmsDeviceStatusChanged(F eventHandler) const
{
	return SmsDeviceStatusChanged(Windows::Devices::Sms::SmsDeviceStatusChangedEventHandler(eventHandler));
}

template <typename T> void impl_ISmsDevice<T>::SmsDeviceStatusChanged(EventRegistrationToken const eventCookie) const
{
	check(static_cast<ISmsDevice const &>(static_cast<T const &>(*this))->remove_SmsDeviceStatusChanged(eventCookie));
}

template <typename T> String impl_ISmsReceivedEventDetails<T>::DeviceId() const
{
	String value = {};
	check(static_cast<ISmsReceivedEventDetails const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> unsigned impl_ISmsReceivedEventDetails<T>::MessageIndex() const
{
	unsigned value = {};
	check(static_cast<ISmsReceivedEventDetails const &>(static_cast<T const &>(*this))->get_MessageIndex(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageClass impl_ISmsReceivedEventDetails2<T>::MessageClass() const
{
	Windows::Devices::Sms::SmsMessageClass value = {};
	check(static_cast<ISmsReceivedEventDetails2 const &>(static_cast<T const &>(*this))->get_MessageClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBinaryMessage impl_ISmsReceivedEventDetails2<T>::BinaryMessage() const
{
	Windows::Devices::Sms::SmsBinaryMessage value(nullptr);
	check(static_cast<ISmsReceivedEventDetails2 const &>(static_cast<T const &>(*this))->get_BinaryMessage(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

template <typename T> Windows::Devices::Usb::UsbTransferDirection impl_IUsbControlRequestType<T>::Direction() const
{
	Windows::Devices::Usb::UsbTransferDirection value = {};
	check(static_cast<IUsbControlRequestType const &>(static_cast<T const &>(*this))->get_Direction(&value));
	return value;
}

template <typename T> void impl_IUsbControlRequestType<T>::Direction(Windows::Devices::Usb::UsbTransferDirection const value) const
{
	check(static_cast<IUsbControlRequestType const &>(static_cast<T const &>(*this))->put_Direction(value));
}

template <typename T> Windows::Devices::Usb::UsbControlTransferType impl_IUsbControlRequestType<T>::ControlTransferType() const
{
	Windows::Devices::Usb::UsbControlTransferType value = {};
	check(static_cast<IUsbControlRequestType const &>(static_cast<T const &>(*this))->get_ControlTransferType(&value));
	return value;
}

template <typename T> void impl_IUsbControlRequestType<T>::ControlTransferType(Windows::Devices::Usb::UsbControlTransferType const value) const
{
	check(static_cast<IUsbControlRequestType const &>(static_cast<T const &>(*this))->put_ControlTransferType(value));
}

template <typename T> Windows::Devices::Usb::UsbControlRecipient impl_IUsbControlRequestType<T>::Recipient() const
{
	Windows::Devices::Usb::UsbControlRecipient value = {};
	check(static_cast<IUsbControlRequestType const &>(static_cast<T const &>(*this))->get_Recipient(&value));
	return value;
}

template <typename T> void impl_IUsbControlRequestType<T>::Recipient(Windows::Devices::Usb::UsbControlRecipient const value) const
{
	check(static_cast<IUsbControlRequestType const &>(static_cast<T const &>(*this))->put_Recipient(value));
}

template <typename T> byte impl_IUsbControlRequestType<T>::AsByte() const
{
	byte value = {};
	check(static_cast<IUsbControlRequestType const &>(static_cast<T const &>(*this))->get_AsByte(&value));
	return value;
}

template <typename T> void impl_IUsbControlRequestType<T>::AsByte(byte const value) const
{
	check(static_cast<IUsbControlRequestType const &>(static_cast<T const &>(*this))->put_AsByte(value));
}

template <typename T> Windows::Devices::Usb::UsbSetupPacket impl_IUsbSetupPacketFactory<T>::CreateWithEightByteBuffer(Windows::Storage::Streams::IBuffer const & eightByteBuffer) const
{
	Windows::Devices::Usb::UsbSetupPacket value(nullptr);
	check(static_cast<IUsbSetupPacketFactory const &>(static_cast<T const &>(*this))->abi_CreateWithEightByteBuffer(get(eightByteBuffer), set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbControlRequestType impl_IUsbSetupPacket<T>::RequestType() const
{
	Windows::Devices::Usb::UsbControlRequestType value(nullptr);
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->get_RequestType(set(value)));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::RequestType(Windows::Devices::Usb::UsbControlRequestType const & value) const
{
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->put_RequestType(get(value)));
}

template <typename T> byte impl_IUsbSetupPacket<T>::Request() const
{
	byte value = {};
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->get_Request(&value));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::Request(byte const value) const
{
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->put_Request(value));
}

template <typename T> unsigned impl_IUsbSetupPacket<T>::Value() const
{
	unsigned value = {};
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->get_Value(&value));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::Value(unsigned const value) const
{
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->put_Value(value));
}

template <typename T> unsigned impl_IUsbSetupPacket<T>::Index() const
{
	unsigned value = {};
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->get_Index(&value));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::Index(unsigned const value) const
{
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->put_Index(value));
}

template <typename T> unsigned impl_IUsbSetupPacket<T>::Length() const
{
	unsigned value = {};
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->get_Length(&value));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::Length(unsigned const value) const
{
	check(static_cast<IUsbSetupPacket const &>(static_cast<T const &>(*this))->put_Length(value));
}

template <typename T> byte impl_IUsbDeviceClass<T>::ClassCode() const
{
	byte value = {};
	check(static_cast<IUsbDeviceClass const &>(static_cast<T const &>(*this))->get_ClassCode(&value));
	return value;
}

template <typename T> void impl_IUsbDeviceClass<T>::ClassCode(byte const value) const
{
	check(static_cast<IUsbDeviceClass const &>(static_cast<T const &>(*this))->put_ClassCode(value));
}

template <typename T> Windows::Foundation::IReference<byte> impl_IUsbDeviceClass<T>::SubclassCode() const
{
	Windows::Foundation::IReference<byte> value = {};
	check(static_cast<IUsbDeviceClass const &>(static_cast<T const &>(*this))->get_SubclassCode(set(value)));
	return value;
}

template <typename T> void impl_IUsbDeviceClass<T>::SubclassCode(Windows::Foundation::IReference<byte> const & value) const
{
	check(static_cast<IUsbDeviceClass const &>(static_cast<T const &>(*this))->put_SubclassCode(get(value)));
}

template <typename T> Windows::Foundation::IReference<byte> impl_IUsbDeviceClass<T>::ProtocolCode() const
{
	Windows::Foundation::IReference<byte> value = {};
	check(static_cast<IUsbDeviceClass const &>(static_cast<T const &>(*this))->get_ProtocolCode(set(value)));
	return value;
}

template <typename T> void impl_IUsbDeviceClass<T>::ProtocolCode(Windows::Foundation::IReference<byte> const & value) const
{
	check(static_cast<IUsbDeviceClass const &>(static_cast<T const &>(*this))->put_ProtocolCode(get(value)));
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::CdcControl() const
{
	Windows::Devices::Usb::UsbDeviceClass value(nullptr);
	check(static_cast<IUsbDeviceClassesStatics const &>(static_cast<T const &>(*this))->get_CdcControl(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::Physical() const
{
	Windows::Devices::Usb::UsbDeviceClass value(nullptr);
	check(static_cast<IUsbDeviceClassesStatics const &>(static_cast<T const &>(*this))->get_Physical(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::PersonalHealthcare() const
{
	Windows::Devices::Usb::UsbDeviceClass value(nullptr);
	check(static_cast<IUsbDeviceClassesStatics const &>(static_cast<T const &>(*this))->get_PersonalHealthcare(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::ActiveSync() const
{
	Windows::Devices::Usb::UsbDeviceClass value(nullptr);
	check(static_cast<IUsbDeviceClassesStatics const &>(static_cast<T const &>(*this))->get_ActiveSync(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::PalmSync() const
{
	Windows::Devices::Usb::UsbDeviceClass value(nullptr);
	check(static_cast<IUsbDeviceClassesStatics const &>(static_cast<T const &>(*this))->get_PalmSync(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::DeviceFirmwareUpdate() const
{
	Windows::Devices::Usb::UsbDeviceClass value(nullptr);
	check(static_cast<IUsbDeviceClassesStatics const &>(static_cast<T const &>(*this))->get_DeviceFirmwareUpdate(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::Irda() const
{
	Windows::Devices::Usb::UsbDeviceClass value(nullptr);
	check(static_cast<IUsbDeviceClassesStatics const &>(static_cast<T const &>(*this))->get_Irda(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::Measurement() const
{
	Windows::Devices::Usb::UsbDeviceClass value(nullptr);
	check(static_cast<IUsbDeviceClassesStatics const &>(static_cast<T const &>(*this))->get_Measurement(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::VendorSpecific() const
{
	Windows::Devices::Usb::UsbDeviceClass value(nullptr);
	check(static_cast<IUsbDeviceClassesStatics const &>(static_cast<T const &>(*this))->get_VendorSpecific(set(value)));
	return value;
}

template <typename T> String impl_IUsbDeviceStatics<T>::GetDeviceSelector(unsigned const vendorId, unsigned const productId, GUID const winUsbInterfaceClass) const
{
	String value = {};
	check(static_cast<IUsbDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(vendorId, productId, winUsbInterfaceClass, set(value)));
	return value;
}

template <typename T> String impl_IUsbDeviceStatics<T>::GetDeviceSelector(GUID const winUsbInterfaceClass) const
{
	String value = {};
	check(static_cast<IUsbDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelectorGuidOnly(winUsbInterfaceClass, set(value)));
	return value;
}

template <typename T> String impl_IUsbDeviceStatics<T>::GetDeviceSelector(unsigned const vendorId, unsigned const productId) const
{
	String value = {};
	check(static_cast<IUsbDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelectorVidPidOnly(vendorId, productId, set(value)));
	return value;
}

template <typename T> String impl_IUsbDeviceStatics<T>::GetDeviceClassSelector(Windows::Devices::Usb::UsbDeviceClass const & usbClass) const
{
	String value = {};
	check(static_cast<IUsbDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceClassSelector(get(usbClass), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> impl_IUsbDeviceStatics<T>::FromIdAsync(String const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> operation = {};
	check(static_cast<IUsbDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(get(deviceId), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> impl_IUsbDeviceStatics<T>::FromIdAsync(wchar_t const (&deviceId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> operation = {};
	check(static_cast<IUsbDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(StringReference(deviceId), set(operation)));
	return operation;
}

template <typename T> unsigned impl_IUsbDeviceDescriptor<T>::BcdUsb() const
{
	unsigned value = {};
	check(static_cast<IUsbDeviceDescriptor const &>(static_cast<T const &>(*this))->get_BcdUsb(&value));
	return value;
}

template <typename T> byte impl_IUsbDeviceDescriptor<T>::MaxPacketSize0() const
{
	byte value = {};
	check(static_cast<IUsbDeviceDescriptor const &>(static_cast<T const &>(*this))->get_MaxPacketSize0(&value));
	return value;
}

template <typename T> unsigned impl_IUsbDeviceDescriptor<T>::VendorId() const
{
	unsigned value = {};
	check(static_cast<IUsbDeviceDescriptor const &>(static_cast<T const &>(*this))->get_VendorId(&value));
	return value;
}

template <typename T> unsigned impl_IUsbDeviceDescriptor<T>::ProductId() const
{
	unsigned value = {};
	check(static_cast<IUsbDeviceDescriptor const &>(static_cast<T const &>(*this))->get_ProductId(&value));
	return value;
}

template <typename T> unsigned impl_IUsbDeviceDescriptor<T>::BcdDeviceRevision() const
{
	unsigned value = {};
	check(static_cast<IUsbDeviceDescriptor const &>(static_cast<T const &>(*this))->get_BcdDeviceRevision(&value));
	return value;
}

template <typename T> byte impl_IUsbDeviceDescriptor<T>::NumberOfConfigurations() const
{
	byte value = {};
	check(static_cast<IUsbDeviceDescriptor const &>(static_cast<T const &>(*this))->get_NumberOfConfigurations(&value));
	return value;
}

template <typename T> byte impl_IUsbConfigurationDescriptor<T>::ConfigurationValue() const
{
	byte value = {};
	check(static_cast<IUsbConfigurationDescriptor const &>(static_cast<T const &>(*this))->get_ConfigurationValue(&value));
	return value;
}

template <typename T> unsigned impl_IUsbConfigurationDescriptor<T>::MaxPowerMilliamps() const
{
	unsigned value = {};
	check(static_cast<IUsbConfigurationDescriptor const &>(static_cast<T const &>(*this))->get_MaxPowerMilliamps(&value));
	return value;
}

template <typename T> bool impl_IUsbConfigurationDescriptor<T>::SelfPowered() const
{
	bool value = {};
	check(static_cast<IUsbConfigurationDescriptor const &>(static_cast<T const &>(*this))->get_SelfPowered(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUsbConfigurationDescriptor<T>::RemoteWakeup() const
{
	bool value = {};
	check(static_cast<IUsbConfigurationDescriptor const &>(static_cast<T const &>(*this))->get_RemoteWakeup(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUsbConfigurationDescriptorStatics<T>::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbConfigurationDescriptor & parsed) const
{
	bool success = {};
	check(static_cast<IUsbConfigurationDescriptorStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(descriptor), set(parsed), BoolProxy(success)));
	return success;
}

template <typename T> Windows::Devices::Usb::UsbConfigurationDescriptor impl_IUsbConfigurationDescriptorStatics<T>::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const
{
	Windows::Devices::Usb::UsbConfigurationDescriptor parsed(nullptr);
	check(static_cast<IUsbConfigurationDescriptorStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(descriptor), set(parsed)));
	return parsed;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::ClassCode() const
{
	byte value = {};
	check(static_cast<IUsbInterfaceDescriptor const &>(static_cast<T const &>(*this))->get_ClassCode(&value));
	return value;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::SubclassCode() const
{
	byte value = {};
	check(static_cast<IUsbInterfaceDescriptor const &>(static_cast<T const &>(*this))->get_SubclassCode(&value));
	return value;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::ProtocolCode() const
{
	byte value = {};
	check(static_cast<IUsbInterfaceDescriptor const &>(static_cast<T const &>(*this))->get_ProtocolCode(&value));
	return value;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::AlternateSettingNumber() const
{
	byte value = {};
	check(static_cast<IUsbInterfaceDescriptor const &>(static_cast<T const &>(*this))->get_AlternateSettingNumber(&value));
	return value;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::InterfaceNumber() const
{
	byte value = {};
	check(static_cast<IUsbInterfaceDescriptor const &>(static_cast<T const &>(*this))->get_InterfaceNumber(&value));
	return value;
}

template <typename T> bool impl_IUsbInterfaceDescriptorStatics<T>::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbInterfaceDescriptor & parsed) const
{
	bool success = {};
	check(static_cast<IUsbInterfaceDescriptorStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(descriptor), set(parsed), BoolProxy(success)));
	return success;
}

template <typename T> Windows::Devices::Usb::UsbInterfaceDescriptor impl_IUsbInterfaceDescriptorStatics<T>::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const
{
	Windows::Devices::Usb::UsbInterfaceDescriptor parsed(nullptr);
	check(static_cast<IUsbInterfaceDescriptorStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(descriptor), set(parsed)));
	return parsed;
}

template <typename T> byte impl_IUsbEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(static_cast<IUsbEndpointDescriptor const &>(static_cast<T const &>(*this))->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbTransferDirection impl_IUsbEndpointDescriptor<T>::Direction() const
{
	Windows::Devices::Usb::UsbTransferDirection value = {};
	check(static_cast<IUsbEndpointDescriptor const &>(static_cast<T const &>(*this))->get_Direction(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbEndpointType impl_IUsbEndpointDescriptor<T>::EndpointType() const
{
	Windows::Devices::Usb::UsbEndpointType value = {};
	check(static_cast<IUsbEndpointDescriptor const &>(static_cast<T const &>(*this))->get_EndpointType(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkInEndpointDescriptor impl_IUsbEndpointDescriptor<T>::AsBulkInEndpointDescriptor() const
{
	Windows::Devices::Usb::UsbBulkInEndpointDescriptor value(nullptr);
	check(static_cast<IUsbEndpointDescriptor const &>(static_cast<T const &>(*this))->get_AsBulkInEndpointDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptInEndpointDescriptor impl_IUsbEndpointDescriptor<T>::AsInterruptInEndpointDescriptor() const
{
	Windows::Devices::Usb::UsbInterruptInEndpointDescriptor value(nullptr);
	check(static_cast<IUsbEndpointDescriptor const &>(static_cast<T const &>(*this))->get_AsInterruptInEndpointDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkOutEndpointDescriptor impl_IUsbEndpointDescriptor<T>::AsBulkOutEndpointDescriptor() const
{
	Windows::Devices::Usb::UsbBulkOutEndpointDescriptor value(nullptr);
	check(static_cast<IUsbEndpointDescriptor const &>(static_cast<T const &>(*this))->get_AsBulkOutEndpointDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor impl_IUsbEndpointDescriptor<T>::AsInterruptOutEndpointDescriptor() const
{
	Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor value(nullptr);
	check(static_cast<IUsbEndpointDescriptor const &>(static_cast<T const &>(*this))->get_AsInterruptOutEndpointDescriptor(set(value)));
	return value;
}

template <typename T> bool impl_IUsbEndpointDescriptorStatics<T>::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbEndpointDescriptor & parsed) const
{
	bool success = {};
	check(static_cast<IUsbEndpointDescriptorStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(descriptor), set(parsed), BoolProxy(success)));
	return success;
}

template <typename T> Windows::Devices::Usb::UsbEndpointDescriptor impl_IUsbEndpointDescriptorStatics<T>::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const
{
	Windows::Devices::Usb::UsbEndpointDescriptor parsed(nullptr);
	check(static_cast<IUsbEndpointDescriptorStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(descriptor), set(parsed)));
	return parsed;
}

template <typename T> byte impl_IUsbDescriptor<T>::Length() const
{
	byte value = {};
	check(static_cast<IUsbDescriptor const &>(static_cast<T const &>(*this))->get_Length(&value));
	return value;
}

template <typename T> byte impl_IUsbDescriptor<T>::DescriptorType() const
{
	byte value = {};
	check(static_cast<IUsbDescriptor const &>(static_cast<T const &>(*this))->get_DescriptorType(&value));
	return value;
}

template <typename T> void impl_IUsbDescriptor<T>::ReadDescriptorBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	check(static_cast<IUsbDescriptor const &>(static_cast<T const &>(*this))->abi_ReadDescriptorBuffer(get(buffer)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IUsbInterruptInEventArgs<T>::InterruptData() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IUsbInterruptInEventArgs const &>(static_cast<T const &>(*this))->get_InterruptData(set(value)));
	return value;
}

template <typename T> unsigned impl_IUsbBulkInPipe<T>::MaxTransferSizeBytes() const
{
	unsigned value = {};
	check(static_cast<IUsbBulkInPipe const &>(static_cast<T const &>(*this))->get_MaxTransferSizeBytes(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkInEndpointDescriptor impl_IUsbBulkInPipe<T>::EndpointDescriptor() const
{
	Windows::Devices::Usb::UsbBulkInEndpointDescriptor value(nullptr);
	check(static_cast<IUsbBulkInPipe const &>(static_cast<T const &>(*this))->get_EndpointDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbBulkInPipe<T>::ClearStallAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IUsbBulkInPipe const &>(static_cast<T const &>(*this))->abi_ClearStallAsync(set(operation)));
	return operation;
}

template <typename T> void impl_IUsbBulkInPipe<T>::ReadOptions(Windows::Devices::Usb::UsbReadOptions const value) const
{
	check(static_cast<IUsbBulkInPipe const &>(static_cast<T const &>(*this))->put_ReadOptions(value));
}

template <typename T> Windows::Devices::Usb::UsbReadOptions impl_IUsbBulkInPipe<T>::ReadOptions() const
{
	Windows::Devices::Usb::UsbReadOptions value = {};
	check(static_cast<IUsbBulkInPipe const &>(static_cast<T const &>(*this))->get_ReadOptions(&value));
	return value;
}

template <typename T> void impl_IUsbBulkInPipe<T>::FlushBuffer() const
{
	check(static_cast<IUsbBulkInPipe const &>(static_cast<T const &>(*this))->abi_FlushBuffer());
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IUsbBulkInPipe<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value = {};
	check(static_cast<IUsbBulkInPipe const &>(static_cast<T const &>(*this))->get_InputStream(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptInEndpointDescriptor impl_IUsbInterruptInPipe<T>::EndpointDescriptor() const
{
	Windows::Devices::Usb::UsbInterruptInEndpointDescriptor value(nullptr);
	check(static_cast<IUsbInterruptInPipe const &>(static_cast<T const &>(*this))->get_EndpointDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbInterruptInPipe<T>::ClearStallAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IUsbInterruptInPipe const &>(static_cast<T const &>(*this))->abi_ClearStallAsync(set(operation)));
	return operation;
}

template <typename T> EventRegistrationToken impl_IUsbInterruptInPipe<T>::DataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Usb::UsbInterruptInPipe, Windows::Devices::Usb::UsbInterruptInEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IUsbInterruptInPipe const &>(static_cast<T const &>(*this))->add_DataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IUsbInterruptInPipe<T>::DataReceived(F handler) const
{
	return DataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::Usb::UsbInterruptInPipe, Windows::Devices::Usb::UsbInterruptInEventArgs>(handler));
}

template <typename T> void impl_IUsbInterruptInPipe<T>::DataReceived(EventRegistrationToken const token) const
{
	check(static_cast<IUsbInterruptInPipe const &>(static_cast<T const &>(*this))->remove_DataReceived(token));
}

template <typename T> Windows::Devices::Usb::UsbBulkOutEndpointDescriptor impl_IUsbBulkOutPipe<T>::EndpointDescriptor() const
{
	Windows::Devices::Usb::UsbBulkOutEndpointDescriptor value(nullptr);
	check(static_cast<IUsbBulkOutPipe const &>(static_cast<T const &>(*this))->get_EndpointDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbBulkOutPipe<T>::ClearStallAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IUsbBulkOutPipe const &>(static_cast<T const &>(*this))->abi_ClearStallAsync(set(operation)));
	return operation;
}

template <typename T> void impl_IUsbBulkOutPipe<T>::WriteOptions(Windows::Devices::Usb::UsbWriteOptions const value) const
{
	check(static_cast<IUsbBulkOutPipe const &>(static_cast<T const &>(*this))->put_WriteOptions(value));
}

template <typename T> Windows::Devices::Usb::UsbWriteOptions impl_IUsbBulkOutPipe<T>::WriteOptions() const
{
	Windows::Devices::Usb::UsbWriteOptions value = {};
	check(static_cast<IUsbBulkOutPipe const &>(static_cast<T const &>(*this))->get_WriteOptions(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IUsbBulkOutPipe<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value = {};
	check(static_cast<IUsbBulkOutPipe const &>(static_cast<T const &>(*this))->get_OutputStream(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor impl_IUsbInterruptOutPipe<T>::EndpointDescriptor() const
{
	Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor value(nullptr);
	check(static_cast<IUsbInterruptOutPipe const &>(static_cast<T const &>(*this))->get_EndpointDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbInterruptOutPipe<T>::ClearStallAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IUsbInterruptOutPipe const &>(static_cast<T const &>(*this))->abi_ClearStallAsync(set(operation)));
	return operation;
}

template <typename T> void impl_IUsbInterruptOutPipe<T>::WriteOptions(Windows::Devices::Usb::UsbWriteOptions const value) const
{
	check(static_cast<IUsbInterruptOutPipe const &>(static_cast<T const &>(*this))->put_WriteOptions(value));
}

template <typename T> Windows::Devices::Usb::UsbWriteOptions impl_IUsbInterruptOutPipe<T>::WriteOptions() const
{
	Windows::Devices::Usb::UsbWriteOptions value = {};
	check(static_cast<IUsbInterruptOutPipe const &>(static_cast<T const &>(*this))->get_WriteOptions(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IUsbInterruptOutPipe<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value = {};
	check(static_cast<IUsbInterruptOutPipe const &>(static_cast<T const &>(*this))->get_OutputStream(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterface> impl_IUsbConfiguration<T>::UsbInterfaces() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterface> value = {};
	check(static_cast<IUsbConfiguration const &>(static_cast<T const &>(*this))->get_UsbInterfaces(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbConfigurationDescriptor impl_IUsbConfiguration<T>::ConfigurationDescriptor() const
{
	Windows::Devices::Usb::UsbConfigurationDescriptor value(nullptr);
	check(static_cast<IUsbConfiguration const &>(static_cast<T const &>(*this))->get_ConfigurationDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> impl_IUsbConfiguration<T>::Descriptors() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> value = {};
	check(static_cast<IUsbConfiguration const &>(static_cast<T const &>(*this))->get_Descriptors(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInPipe> impl_IUsbInterface<T>::BulkInPipes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInPipe> value = {};
	check(static_cast<IUsbInterface const &>(static_cast<T const &>(*this))->get_BulkInPipes(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInPipe> impl_IUsbInterface<T>::InterruptInPipes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInPipe> value = {};
	check(static_cast<IUsbInterface const &>(static_cast<T const &>(*this))->get_InterruptInPipes(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutPipe> impl_IUsbInterface<T>::BulkOutPipes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutPipe> value = {};
	check(static_cast<IUsbInterface const &>(static_cast<T const &>(*this))->get_BulkOutPipes(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutPipe> impl_IUsbInterface<T>::InterruptOutPipes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutPipe> value = {};
	check(static_cast<IUsbInterface const &>(static_cast<T const &>(*this))->get_InterruptOutPipes(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterfaceSetting> impl_IUsbInterface<T>::InterfaceSettings() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterfaceSetting> value = {};
	check(static_cast<IUsbInterface const &>(static_cast<T const &>(*this))->get_InterfaceSettings(set(value)));
	return value;
}

template <typename T> byte impl_IUsbInterface<T>::InterfaceNumber() const
{
	byte value = {};
	check(static_cast<IUsbInterface const &>(static_cast<T const &>(*this))->get_InterfaceNumber(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> impl_IUsbInterface<T>::Descriptors() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> value = {};
	check(static_cast<IUsbInterface const &>(static_cast<T const &>(*this))->get_Descriptors(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInEndpointDescriptor> impl_IUsbInterfaceSetting<T>::BulkInEndpoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInEndpointDescriptor> value = {};
	check(static_cast<IUsbInterfaceSetting const &>(static_cast<T const &>(*this))->get_BulkInEndpoints(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInEndpointDescriptor> impl_IUsbInterfaceSetting<T>::InterruptInEndpoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInEndpointDescriptor> value = {};
	check(static_cast<IUsbInterfaceSetting const &>(static_cast<T const &>(*this))->get_InterruptInEndpoints(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutEndpointDescriptor> impl_IUsbInterfaceSetting<T>::BulkOutEndpoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutEndpointDescriptor> value = {};
	check(static_cast<IUsbInterfaceSetting const &>(static_cast<T const &>(*this))->get_BulkOutEndpoints(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor> impl_IUsbInterfaceSetting<T>::InterruptOutEndpoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor> value = {};
	check(static_cast<IUsbInterfaceSetting const &>(static_cast<T const &>(*this))->get_InterruptOutEndpoints(set(value)));
	return value;
}

template <typename T> bool impl_IUsbInterfaceSetting<T>::Selected() const
{
	bool value = {};
	check(static_cast<IUsbInterfaceSetting const &>(static_cast<T const &>(*this))->get_Selected(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbInterfaceSetting<T>::SelectSettingAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IUsbInterfaceSetting const &>(static_cast<T const &>(*this))->abi_SelectSettingAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Devices::Usb::UsbInterfaceDescriptor impl_IUsbInterfaceSetting<T>::InterfaceDescriptor() const
{
	Windows::Devices::Usb::UsbInterfaceDescriptor value(nullptr);
	check(static_cast<IUsbInterfaceSetting const &>(static_cast<T const &>(*this))->get_InterfaceDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> impl_IUsbInterfaceSetting<T>::Descriptors() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> value = {};
	check(static_cast<IUsbInterfaceSetting const &>(static_cast<T const &>(*this))->get_Descriptors(set(value)));
	return value;
}

template <typename T> unsigned impl_IUsbBulkInEndpointDescriptor<T>::MaxPacketSize() const
{
	unsigned value = {};
	check(static_cast<IUsbBulkInEndpointDescriptor const &>(static_cast<T const &>(*this))->get_MaxPacketSize(&value));
	return value;
}

template <typename T> byte impl_IUsbBulkInEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(static_cast<IUsbBulkInEndpointDescriptor const &>(static_cast<T const &>(*this))->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkInPipe impl_IUsbBulkInEndpointDescriptor<T>::Pipe() const
{
	Windows::Devices::Usb::UsbBulkInPipe value(nullptr);
	check(static_cast<IUsbBulkInEndpointDescriptor const &>(static_cast<T const &>(*this))->get_Pipe(set(value)));
	return value;
}

template <typename T> unsigned impl_IUsbInterruptInEndpointDescriptor<T>::MaxPacketSize() const
{
	unsigned value = {};
	check(static_cast<IUsbInterruptInEndpointDescriptor const &>(static_cast<T const &>(*this))->get_MaxPacketSize(&value));
	return value;
}

template <typename T> byte impl_IUsbInterruptInEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(static_cast<IUsbInterruptInEndpointDescriptor const &>(static_cast<T const &>(*this))->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IUsbInterruptInEndpointDescriptor<T>::Interval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IUsbInterruptInEndpointDescriptor const &>(static_cast<T const &>(*this))->get_Interval(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptInPipe impl_IUsbInterruptInEndpointDescriptor<T>::Pipe() const
{
	Windows::Devices::Usb::UsbInterruptInPipe value(nullptr);
	check(static_cast<IUsbInterruptInEndpointDescriptor const &>(static_cast<T const &>(*this))->get_Pipe(set(value)));
	return value;
}

template <typename T> unsigned impl_IUsbBulkOutEndpointDescriptor<T>::MaxPacketSize() const
{
	unsigned value = {};
	check(static_cast<IUsbBulkOutEndpointDescriptor const &>(static_cast<T const &>(*this))->get_MaxPacketSize(&value));
	return value;
}

template <typename T> byte impl_IUsbBulkOutEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(static_cast<IUsbBulkOutEndpointDescriptor const &>(static_cast<T const &>(*this))->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkOutPipe impl_IUsbBulkOutEndpointDescriptor<T>::Pipe() const
{
	Windows::Devices::Usb::UsbBulkOutPipe value(nullptr);
	check(static_cast<IUsbBulkOutEndpointDescriptor const &>(static_cast<T const &>(*this))->get_Pipe(set(value)));
	return value;
}

template <typename T> unsigned impl_IUsbInterruptOutEndpointDescriptor<T>::MaxPacketSize() const
{
	unsigned value = {};
	check(static_cast<IUsbInterruptOutEndpointDescriptor const &>(static_cast<T const &>(*this))->get_MaxPacketSize(&value));
	return value;
}

template <typename T> byte impl_IUsbInterruptOutEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(static_cast<IUsbInterruptOutEndpointDescriptor const &>(static_cast<T const &>(*this))->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IUsbInterruptOutEndpointDescriptor<T>::Interval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IUsbInterruptOutEndpointDescriptor const &>(static_cast<T const &>(*this))->get_Interval(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptOutPipe impl_IUsbInterruptOutEndpointDescriptor<T>::Pipe() const
{
	Windows::Devices::Usb::UsbInterruptOutPipe value(nullptr);
	check(static_cast<IUsbInterruptOutEndpointDescriptor const &>(static_cast<T const &>(*this))->get_Pipe(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IUsbDevice<T>::SendControlOutTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation = {};
	check(static_cast<IUsbDevice const &>(static_cast<T const &>(*this))->abi_SendControlOutTransferAsync(get(setupPacket), get(buffer), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IUsbDevice<T>::SendControlOutTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation = {};
	check(static_cast<IUsbDevice const &>(static_cast<T const &>(*this))->abi_SendControlOutTransferAsyncNoBuffer(get(setupPacket), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IUsbDevice<T>::SendControlInTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation = {};
	check(static_cast<IUsbDevice const &>(static_cast<T const &>(*this))->abi_SendControlInTransferAsync(get(setupPacket), get(buffer), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IUsbDevice<T>::SendControlInTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation = {};
	check(static_cast<IUsbDevice const &>(static_cast<T const &>(*this))->abi_SendControlInTransferAsyncNoBuffer(get(setupPacket), set(operation)));
	return operation;
}

template <typename T> Windows::Devices::Usb::UsbInterface impl_IUsbDevice<T>::DefaultInterface() const
{
	Windows::Devices::Usb::UsbInterface value(nullptr);
	check(static_cast<IUsbDevice const &>(static_cast<T const &>(*this))->get_DefaultInterface(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceDescriptor impl_IUsbDevice<T>::DeviceDescriptor() const
{
	Windows::Devices::Usb::UsbDeviceDescriptor value(nullptr);
	check(static_cast<IUsbDevice const &>(static_cast<T const &>(*this))->get_DeviceDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbConfiguration impl_IUsbDevice<T>::Configuration() const
{
	Windows::Devices::Usb::UsbConfiguration value(nullptr);
	check(static_cast<IUsbDevice const &>(static_cast<T const &>(*this))->get_Configuration(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

template <typename T> String impl_IWiFiDirectDeviceStatics<T>::GetDeviceSelector() const
{
	String deviceSelector = {};
	check(static_cast<IWiFiDirectDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(set(deviceSelector)));
	return deviceSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> impl_IWiFiDirectDeviceStatics<T>::FromIdAsync(String const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> asyncOp = {};
	check(static_cast<IWiFiDirectDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(get(deviceId), set(asyncOp)));
	return asyncOp;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> impl_IWiFiDirectDeviceStatics<T>::FromIdAsync(wchar_t const (&deviceId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> asyncOp = {};
	check(static_cast<IWiFiDirectDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromIdAsync(StringReference(deviceId), set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectConnectionStatus impl_IWiFiDirectDevice<T>::ConnectionStatus() const
{
	Windows::Devices::WiFiDirect::WiFiDirectConnectionStatus value = {};
	check(static_cast<IWiFiDirectDevice const &>(static_cast<T const &>(*this))->get_ConnectionStatus(&value));
	return value;
}

template <typename T> String impl_IWiFiDirectDevice<T>::DeviceId() const
{
	String value = {};
	check(static_cast<IWiFiDirectDevice const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IWiFiDirectDevice<T>::ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectDevice, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IWiFiDirectDevice const &>(static_cast<T const &>(*this))->add_ConnectionStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IWiFiDirectDevice<T>::ConnectionStatusChanged(F handler) const
{
	return ConnectionStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectDevice, IInspectable>(handler));
}

template <typename T> void impl_IWiFiDirectDevice<T>::ConnectionStatusChanged(EventRegistrationToken const token) const
{
	check(static_cast<IWiFiDirectDevice const &>(static_cast<T const &>(*this))->remove_ConnectionStatusChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> impl_IWiFiDirectDevice<T>::GetConnectionEndpointPairs() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> value = {};
	check(static_cast<IWiFiDirectDevice const &>(static_cast<T const &>(*this))->abi_GetConnectionEndpointPairs(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Foundation {

template <typename T> void impl_IAsyncActionCompletedHandler<T>::Invoke(Windows::Foundation::IAsyncAction const & asyncInfo, AsyncStatus const asyncStatus) const
{
	check(static_cast<IAsyncActionCompletedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(asyncInfo), asyncStatus));
}

template <typename T> String impl_IUriRuntimeClass<T>::AbsoluteUri() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_AbsoluteUri(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::DisplayUri() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_DisplayUri(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Domain() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_Domain(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Extension() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_Extension(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Fragment() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_Fragment(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Host() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_Host(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Password() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_Password(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Path() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_Path(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Query() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_Query(set(value)));
	return value;
}

template <typename T> Windows::Foundation::WwwFormUrlDecoder impl_IUriRuntimeClass<T>::QueryParsed() const
{
	Windows::Foundation::WwwFormUrlDecoder ppWwwFormUrlDecoder(nullptr);
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_QueryParsed(set(ppWwwFormUrlDecoder)));
	return ppWwwFormUrlDecoder;
}

template <typename T> String impl_IUriRuntimeClass<T>::RawUri() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_RawUri(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::SchemeName() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_SchemeName(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::UserName() const
{
	String value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_UserName(set(value)));
	return value;
}

template <typename T> int impl_IUriRuntimeClass<T>::Port() const
{
	int value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_Port(&value));
	return value;
}

template <typename T> bool impl_IUriRuntimeClass<T>::Suspicious() const
{
	bool value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->get_Suspicious(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUriRuntimeClass<T>::Equals(Windows::Foundation::Uri const & pUri) const
{
	bool value = {};
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->abi_Equals(get(pUri), BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IUriRuntimeClass<T>::CombineUri(String const & relativeUri) const
{
	Windows::Foundation::Uri instance(nullptr);
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->abi_CombineUri(get(relativeUri), set(instance)));
	return instance;
}

template <typename T> template <unsigned S0> Windows::Foundation::Uri impl_IUriRuntimeClass<T>::CombineUri(wchar_t const (&relativeUri)[S0]) const
{
	Windows::Foundation::Uri instance(nullptr);
	check(static_cast<IUriRuntimeClass const &>(static_cast<T const &>(*this))->abi_CombineUri(StringReference(relativeUri), set(instance)));
	return instance;
}

template <typename T> String impl_IUriRuntimeClassWithAbsoluteCanonicalUri<T>::AbsoluteCanonicalUri() const
{
	String value = {};
	check(static_cast<IUriRuntimeClassWithAbsoluteCanonicalUri const &>(static_cast<T const &>(*this))->get_AbsoluteCanonicalUri(set(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClassWithAbsoluteCanonicalUri<T>::DisplayIri() const
{
	String value = {};
	check(static_cast<IUriRuntimeClassWithAbsoluteCanonicalUri const &>(static_cast<T const &>(*this))->get_DisplayIri(set(value)));
	return value;
}

template <typename T> String impl_IUriEscapeStatics<T>::UnescapeComponent(String const & toUnescape) const
{
	String value = {};
	check(static_cast<IUriEscapeStatics const &>(static_cast<T const &>(*this))->abi_UnescapeComponent(get(toUnescape), set(value)));
	return value;
}

template <typename T> template <unsigned S0> String impl_IUriEscapeStatics<T>::UnescapeComponent(wchar_t const (&toUnescape)[S0]) const
{
	String value = {};
	check(static_cast<IUriEscapeStatics const &>(static_cast<T const &>(*this))->abi_UnescapeComponent(StringReference(toUnescape), set(value)));
	return value;
}

template <typename T> String impl_IUriEscapeStatics<T>::EscapeComponent(String const & toEscape) const
{
	String value = {};
	check(static_cast<IUriEscapeStatics const &>(static_cast<T const &>(*this))->abi_EscapeComponent(get(toEscape), set(value)));
	return value;
}

template <typename T> template <unsigned S0> String impl_IUriEscapeStatics<T>::EscapeComponent(wchar_t const (&toEscape)[S0]) const
{
	String value = {};
	check(static_cast<IUriEscapeStatics const &>(static_cast<T const &>(*this))->abi_EscapeComponent(StringReference(toEscape), set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IUriRuntimeClassFactory<T>::CreateUri(String const & uri) const
{
	Windows::Foundation::Uri instance(nullptr);
	check(static_cast<IUriRuntimeClassFactory const &>(static_cast<T const &>(*this))->abi_CreateUri(get(uri), set(instance)));
	return instance;
}

template <typename T> template <unsigned S0> Windows::Foundation::Uri impl_IUriRuntimeClassFactory<T>::CreateUri(wchar_t const (&uri)[S0]) const
{
	Windows::Foundation::Uri instance(nullptr);
	check(static_cast<IUriRuntimeClassFactory const &>(static_cast<T const &>(*this))->abi_CreateUri(StringReference(uri), set(instance)));
	return instance;
}

template <typename T> Windows::Foundation::Uri impl_IUriRuntimeClassFactory<T>::CreateUri(String const & baseUri, String const & relativeUri) const
{
	Windows::Foundation::Uri instance(nullptr);
	check(static_cast<IUriRuntimeClassFactory const &>(static_cast<T const &>(*this))->abi_CreateWithRelativeUri(get(baseUri), get(relativeUri), set(instance)));
	return instance;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::Uri impl_IUriRuntimeClassFactory<T>::CreateUri(wchar_t const (&baseUri)[S0], wchar_t const (&relativeUri)[S1]) const
{
	Windows::Foundation::Uri instance(nullptr);
	check(static_cast<IUriRuntimeClassFactory const &>(static_cast<T const &>(*this))->abi_CreateWithRelativeUri(StringReference(baseUri), StringReference(relativeUri), set(instance)));
	return instance;
}

template <typename T> String impl_IWwwFormUrlDecoderEntry<T>::Name() const
{
	String value = {};
	check(static_cast<IWwwFormUrlDecoderEntry const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> String impl_IWwwFormUrlDecoderEntry<T>::Value() const
{
	String value = {};
	check(static_cast<IWwwFormUrlDecoderEntry const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> String impl_IWwwFormUrlDecoderRuntimeClass<T>::GetFirstValueByName(String const & name) const
{
	String phstrValue = {};
	check(static_cast<IWwwFormUrlDecoderRuntimeClass const &>(static_cast<T const &>(*this))->abi_GetFirstValueByName(get(name), set(phstrValue)));
	return phstrValue;
}

template <typename T> template <unsigned S0> String impl_IWwwFormUrlDecoderRuntimeClass<T>::GetFirstValueByName(wchar_t const (&name)[S0]) const
{
	String phstrValue = {};
	check(static_cast<IWwwFormUrlDecoderRuntimeClass const &>(static_cast<T const &>(*this))->abi_GetFirstValueByName(StringReference(name), set(phstrValue)));
	return phstrValue;
}

template <typename T> Windows::Foundation::WwwFormUrlDecoder impl_IWwwFormUrlDecoderRuntimeClassFactory<T>::CreateWwwFormUrlDecoder(String const & query) const
{
	Windows::Foundation::WwwFormUrlDecoder instance(nullptr);
	check(static_cast<IWwwFormUrlDecoderRuntimeClassFactory const &>(static_cast<T const &>(*this))->abi_CreateWwwFormUrlDecoder(get(query), set(instance)));
	return instance;
}

template <typename T> template <unsigned S0> Windows::Foundation::WwwFormUrlDecoder impl_IWwwFormUrlDecoderRuntimeClassFactory<T>::CreateWwwFormUrlDecoder(wchar_t const (&query)[S0]) const
{
	Windows::Foundation::WwwFormUrlDecoder instance(nullptr);
	check(static_cast<IWwwFormUrlDecoderRuntimeClassFactory const &>(static_cast<T const &>(*this))->abi_CreateWwwFormUrlDecoder(StringReference(query), set(instance)));
	return instance;
}

template <typename T> IInspectable impl_IGetActivationFactory<T>::GetActivationFactory(String const & activatableClassId) const
{
	IInspectable factory = {};
	check(static_cast<IGetActivationFactory const &>(static_cast<T const &>(*this))->abi_GetActivationFactory(get(activatableClassId), set(factory)));
	return factory;
}

template <typename T> template <unsigned S0> IInspectable impl_IGetActivationFactory<T>::GetActivationFactory(wchar_t const (&activatableClassId)[S0]) const
{
	IInspectable factory = {};
	check(static_cast<IGetActivationFactory const &>(static_cast<T const &>(*this))->abi_GetActivationFactory(StringReference(activatableClassId), set(factory)));
	return factory;
}

template <typename T> void impl_IClosable<T>::Close() const
{
	check(static_cast<IClosable const &>(static_cast<T const &>(*this))->abi_Close());
}

template <typename T> Windows::Foundation::PropertyType impl_IPropertyValue<T>::Type() const
{
	Windows::Foundation::PropertyType value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> bool impl_IPropertyValue<T>::IsNumericScalar() const
{
	bool value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->get_IsNumericScalar(BoolProxy(value)));
	return value;
}

template <typename T> byte impl_IPropertyValue<T>::GetUInt8() const
{
	byte value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetUInt8(&value));
	return value;
}

template <typename T> short impl_IPropertyValue<T>::GetInt16() const
{
	short value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetInt16(&value));
	return value;
}

template <typename T> unsigned short impl_IPropertyValue<T>::GetUInt16() const
{
	unsigned short value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetUInt16(&value));
	return value;
}

template <typename T> int impl_IPropertyValue<T>::GetInt32() const
{
	int value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetInt32(&value));
	return value;
}

template <typename T> unsigned impl_IPropertyValue<T>::GetUInt32() const
{
	unsigned value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetUInt32(&value));
	return value;
}

template <typename T> long long impl_IPropertyValue<T>::GetInt64() const
{
	long long value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetInt64(&value));
	return value;
}

template <typename T> unsigned long long impl_IPropertyValue<T>::GetUInt64() const
{
	unsigned long long value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetUInt64(&value));
	return value;
}

template <typename T> float impl_IPropertyValue<T>::GetSingle() const
{
	float value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetSingle(&value));
	return value;
}

template <typename T> double impl_IPropertyValue<T>::GetDouble() const
{
	double value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetDouble(&value));
	return value;
}

template <typename T> wchar_t impl_IPropertyValue<T>::GetChar16() const
{
	wchar_t value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetChar16(&value));
	return value;
}

template <typename T> bool impl_IPropertyValue<T>::GetBoolean() const
{
	bool value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetBoolean(BoolProxy(value)));
	return value;
}

template <typename T> String impl_IPropertyValue<T>::GetString() const
{
	String value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetString(set(value)));
	return value;
}

template <typename T> GUID impl_IPropertyValue<T>::GetGuid() const
{
	GUID value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetGuid(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPropertyValue<T>::GetDateTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetDateTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPropertyValue<T>::GetTimeSpan() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetTimeSpan(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPropertyValue<T>::GetPoint() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetPoint(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IPropertyValue<T>::GetSize() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPropertyValue<T>::GetRect() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPropertyValue const &>(static_cast<T const &>(*this))->abi_GetRect(&value));
	return value;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateEmpty() const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateEmpty(set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt8(byte const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateUInt8(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInt16(short const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateInt16(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt16(unsigned short const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateUInt16(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInt32(int const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateInt32(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt32(unsigned const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateUInt32(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInt64(long long const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateInt64(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt64(unsigned long long const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateUInt64(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateSingle(float const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateSingle(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateDouble(double const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateDouble(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateChar16(wchar_t const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateChar16(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateBoolean(bool const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateBoolean(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateString(String const & value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateString(get(value), set(propertyValue)));
	return propertyValue;
}

template <typename T> template <unsigned S0> IInspectable impl_IPropertyValueStatics<T>::CreateString(wchar_t const (&value)[S0]) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateString(StringReference(value), set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInspectable(IInspectable const & value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateInspectable(get(value), set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateGuid(GUID const value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateGuid(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateDateTime(Windows::Foundation::DateTime const & value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateDateTime(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateTimeSpan(Windows::Foundation::TimeSpan const & value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateTimeSpan(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreatePoint(Windows::Foundation::Point const & value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreatePoint(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateSize(Windows::Foundation::Size const & value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateSize(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateRect(Windows::Foundation::Rect const & value) const
{
	IInspectable propertyValue = {};
	check(static_cast<IPropertyValueStatics const &>(static_cast<T const &>(*this))->abi_CreateRect(value, set(propertyValue)));
	return propertyValue;
}

template <typename T> String impl_IStringable<T>::ToString() const
{
	String value = {};
	check(static_cast<IStringable const &>(static_cast<T const &>(*this))->abi_ToString(set(value)));
	return value;
}

template <typename T> void impl_IAsyncAction<T>::Completed(Windows::Foundation::IAsyncActionCompletedHandler const & handler) const
{
	check(static_cast<IAsyncAction const &>(static_cast<T const &>(*this))->put_Completed(get(handler)));
}

template <typename T> template <typename F> void impl_IAsyncAction<T>::Completed(F handler) const
{
	Completed(Windows::Foundation::AsyncActionCompletedHandler(handler));
}

template <typename T> Windows::Foundation::IAsyncActionCompletedHandler impl_IAsyncAction<T>::Completed() const
{
	Windows::Foundation::IAsyncActionCompletedHandler handler = {};
	check(static_cast<IAsyncAction const &>(static_cast<T const &>(*this))->get_Completed(set(handler)));
	return handler;
}

template <typename T> void impl_IAsyncAction<T>::GetResults() const
{
	check(static_cast<IAsyncAction const &>(static_cast<T const &>(*this))->abi_GetResults());
}

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

template <typename T> bool impl_ITracingStatusChangedEventArgs<T>::Enabled() const
{
	bool enabled = {};
	check(static_cast<ITracingStatusChangedEventArgs const &>(static_cast<T const &>(*this))->get_Enabled(BoolProxy(enabled)));
	return enabled;
}

template <typename T> Windows::Foundation::Diagnostics::CausalityTraceLevel impl_ITracingStatusChangedEventArgs<T>::TraceLevel() const
{
	Windows::Foundation::Diagnostics::CausalityTraceLevel value = {};
	check(static_cast<ITracingStatusChangedEventArgs const &>(static_cast<T const &>(*this))->get_TraceLevel(&value));
	return value;
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, String const & operationName, unsigned long long const relatedContext) const
{
	check(static_cast<IAsyncCausalityTracerStatics const &>(static_cast<T const &>(*this))->abi_TraceOperationCreation(traceLevel, source, platformId, operationId, get(operationName), relatedContext));
}

template <typename T> template <unsigned S0> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, wchar_t const (&operationName)[S0], unsigned long long const relatedContext) const
{
	check(static_cast<IAsyncCausalityTracerStatics const &>(static_cast<T const &>(*this))->abi_TraceOperationCreation(traceLevel, source, platformId, operationId, StringReference(operationName), relatedContext));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, AsyncStatus const status) const
{
	check(static_cast<IAsyncCausalityTracerStatics const &>(static_cast<T const &>(*this))->abi_TraceOperationCompletion(traceLevel, source, platformId, operationId, status));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalityRelation const relation) const
{
	check(static_cast<IAsyncCausalityTracerStatics const &>(static_cast<T const &>(*this))->abi_TraceOperationRelation(traceLevel, source, platformId, operationId, relation));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work) const
{
	check(static_cast<IAsyncCausalityTracerStatics const &>(static_cast<T const &>(*this))->abi_TraceSynchronousWorkStart(traceLevel, source, platformId, operationId, work));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work) const
{
	check(static_cast<IAsyncCausalityTracerStatics const &>(static_cast<T const &>(*this))->abi_TraceSynchronousWorkCompletion(traceLevel, source, work));
}

template <typename T> EventRegistrationToken impl_IAsyncCausalityTracerStatics<T>::TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IAsyncCausalityTracerStatics const &>(static_cast<T const &>(*this))->add_TracingStatusChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IAsyncCausalityTracerStatics<T>::TracingStatusChanged(F handler) const
{
	return TracingStatusChanged(Windows::Foundation::EventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs>(handler));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TracingStatusChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<IAsyncCausalityTracerStatics const &>(static_cast<T const &>(*this))->remove_TracingStatusChanged(cookie));
}

template <typename T> void impl_IErrorReportingSettings<T>::SetErrorOptions(Windows::Foundation::Diagnostics::ErrorOptions const value) const
{
	check(static_cast<IErrorReportingSettings const &>(static_cast<T const &>(*this))->abi_SetErrorOptions(value));
}

template <typename T> Windows::Foundation::Diagnostics::ErrorOptions impl_IErrorReportingSettings<T>::GetErrorOptions() const
{
	Windows::Foundation::Diagnostics::ErrorOptions value = {};
	check(static_cast<IErrorReportingSettings const &>(static_cast<T const &>(*this))->abi_GetErrorOptions(&value));
	return value;
}

template <typename T> String impl_ILoggingChannel<T>::Name() const
{
	String value = {};
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> bool impl_ILoggingChannel<T>::Enabled() const
{
	bool value = {};
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->get_Enabled(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingLevel impl_ILoggingChannel<T>::Level() const
{
	Windows::Foundation::Diagnostics::LoggingLevel value = {};
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->get_Level(&value));
	return value;
}

template <typename T> void impl_ILoggingChannel<T>::LogMessage(String const & eventString) const
{
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->abi_LogMessage(get(eventString)));
}

template <typename T> template <unsigned S0> void impl_ILoggingChannel<T>::LogMessage(wchar_t const (&eventString)[S0]) const
{
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->abi_LogMessage(StringReference(eventString)));
}

template <typename T> void impl_ILoggingChannel<T>::LogMessage(String const & eventString, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->abi_LogMessageWithLevel(get(eventString), level));
}

template <typename T> template <unsigned S0> void impl_ILoggingChannel<T>::LogMessage(wchar_t const (&eventString)[S0], Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->abi_LogMessageWithLevel(StringReference(eventString), level));
}

template <typename T> void impl_ILoggingChannel<T>::LogValuePair(String const & value1, int const value2) const
{
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->abi_LogValuePair(get(value1), value2));
}

template <typename T> template <unsigned S0> void impl_ILoggingChannel<T>::LogValuePair(wchar_t const (&value1)[S0], int const value2) const
{
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->abi_LogValuePair(StringReference(value1), value2));
}

template <typename T> void impl_ILoggingChannel<T>::LogValuePair(String const & value1, int const value2, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->abi_LogValuePairWithLevel(get(value1), value2, level));
}

template <typename T> template <unsigned S0> void impl_ILoggingChannel<T>::LogValuePair(wchar_t const (&value1)[S0], int const value2, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->abi_LogValuePairWithLevel(StringReference(value1), value2, level));
}

template <typename T> EventRegistrationToken impl_ILoggingChannel<T>::LoggingEnabled(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::ILoggingChannel, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->add_LoggingEnabled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ILoggingChannel<T>::LoggingEnabled(F handler) const
{
	return LoggingEnabled(Windows::Foundation::TypedEventHandler<Windows::Foundation::Diagnostics::ILoggingChannel, IInspectable>(handler));
}

template <typename T> void impl_ILoggingChannel<T>::LoggingEnabled(EventRegistrationToken const token) const
{
	check(static_cast<ILoggingChannel const &>(static_cast<T const &>(*this))->remove_LoggingEnabled(token));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingChannelFactory<T>::Create(String const & name) const
{
	Windows::Foundation::Diagnostics::LoggingChannel result(nullptr);
	check(static_cast<ILoggingChannelFactory const &>(static_cast<T const &>(*this))->abi_Create(get(name), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingChannelFactory<T>::Create(wchar_t const (&name)[S0]) const
{
	Windows::Foundation::Diagnostics::LoggingChannel result(nullptr);
	check(static_cast<ILoggingChannelFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(name), set(result)));
	return result;
}

template <typename T> String impl_ILoggingActivity<T>::Name() const
{
	String value = {};
	check(static_cast<ILoggingActivity const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> GUID impl_ILoggingActivity<T>::Id() const
{
	GUID value = {};
	check(static_cast<ILoggingActivity const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingActivityFactory<T>::CreateLoggingActivity(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	Windows::Foundation::Diagnostics::LoggingActivity loggingActivity(nullptr);
	check(static_cast<ILoggingActivityFactory const &>(static_cast<T const &>(*this))->abi_CreateLoggingActivity(get(activityName), get(loggingChannel), set(loggingActivity)));
	return loggingActivity;
}

template <typename T> template <unsigned S0> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingActivityFactory<T>::CreateLoggingActivity(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	Windows::Foundation::Diagnostics::LoggingActivity loggingActivity(nullptr);
	check(static_cast<ILoggingActivityFactory const &>(static_cast<T const &>(*this))->abi_CreateLoggingActivity(StringReference(activityName), get(loggingChannel), set(loggingActivity)));
	return loggingActivity;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingActivityFactory<T>::CreateLoggingActivityWithLevel(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	Windows::Foundation::Diagnostics::LoggingActivity loggingActivity(nullptr);
	check(static_cast<ILoggingActivityFactory const &>(static_cast<T const &>(*this))->abi_CreateLoggingActivityWithLevel(get(activityName), get(loggingChannel), level, set(loggingActivity)));
	return loggingActivity;
}

template <typename T> template <unsigned S0> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingActivityFactory<T>::CreateLoggingActivityWithLevel(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	Windows::Foundation::Diagnostics::LoggingActivity loggingActivity(nullptr);
	check(static_cast<ILoggingActivityFactory const &>(static_cast<T const &>(*this))->abi_CreateLoggingActivityWithLevel(StringReference(activityName), get(loggingChannel), level, set(loggingActivity)));
	return loggingActivity;
}

template <typename T> String impl_ILoggingSession<T>::Name() const
{
	String value = {};
	check(static_cast<ILoggingSession const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_ILoggingSession<T>::SaveToFileAsync(Windows::Storage::IStorageFolder const & folder, String const & fileName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<ILoggingSession const &>(static_cast<T const &>(*this))->abi_SaveToFileAsync(get(folder), get(fileName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_ILoggingSession<T>::SaveToFileAsync(Windows::Storage::IStorageFolder const & folder, wchar_t const (&fileName)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<ILoggingSession const &>(static_cast<T const &>(*this))->abi_SaveToFileAsync(get(folder), StringReference(fileName), set(operation)));
	return operation;
}

template <typename T> void impl_ILoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check(static_cast<ILoggingSession const &>(static_cast<T const &>(*this))->abi_AddLoggingChannel(get(loggingChannel)));
}

template <typename T> void impl_ILoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const maxLevel) const
{
	check(static_cast<ILoggingSession const &>(static_cast<T const &>(*this))->abi_AddLoggingChannelWithLevel(get(loggingChannel), maxLevel));
}

template <typename T> void impl_ILoggingSession<T>::RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check(static_cast<ILoggingSession const &>(static_cast<T const &>(*this))->abi_RemoveLoggingChannel(get(loggingChannel)));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingSession impl_ILoggingSessionFactory<T>::Create(String const & name) const
{
	Windows::Foundation::Diagnostics::LoggingSession result(nullptr);
	check(static_cast<ILoggingSessionFactory const &>(static_cast<T const &>(*this))->abi_Create(get(name), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::Diagnostics::LoggingSession impl_ILoggingSessionFactory<T>::Create(wchar_t const (&name)[S0]) const
{
	Windows::Foundation::Diagnostics::LoggingSession result(nullptr);
	check(static_cast<ILoggingSessionFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(name), set(result)));
	return result;
}

template <typename T> Windows::Storage::StorageFile impl_ILogFileGeneratedEventArgs<T>::File() const
{
	Windows::Storage::StorageFile value(nullptr);
	check(static_cast<ILogFileGeneratedEventArgs const &>(static_cast<T const &>(*this))->get_File(set(value)));
	return value;
}

template <typename T> String impl_IFileLoggingSession<T>::Name() const
{
	String value = {};
	check(static_cast<IFileLoggingSession const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> void impl_IFileLoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check(static_cast<IFileLoggingSession const &>(static_cast<T const &>(*this))->abi_AddLoggingChannel(get(loggingChannel)));
}

template <typename T> void impl_IFileLoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const maxLevel) const
{
	check(static_cast<IFileLoggingSession const &>(static_cast<T const &>(*this))->abi_AddLoggingChannelWithLevel(get(loggingChannel), maxLevel));
}

template <typename T> void impl_IFileLoggingSession<T>::RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check(static_cast<IFileLoggingSession const &>(static_cast<T const &>(*this))->abi_RemoveLoggingChannel(get(loggingChannel)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IFileLoggingSession<T>::CloseAndSaveToFileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IFileLoggingSession const &>(static_cast<T const &>(*this))->abi_CloseAndSaveToFileAsync(set(operation)));
	return operation;
}

template <typename T> EventRegistrationToken impl_IFileLoggingSession<T>::LogFileGenerated(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::IFileLoggingSession, Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IFileLoggingSession const &>(static_cast<T const &>(*this))->add_LogFileGenerated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IFileLoggingSession<T>::LogFileGenerated(F handler) const
{
	return LogFileGenerated(Windows::Foundation::TypedEventHandler<Windows::Foundation::Diagnostics::IFileLoggingSession, Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs>(handler));
}

template <typename T> void impl_IFileLoggingSession<T>::LogFileGenerated(EventRegistrationToken const token) const
{
	check(static_cast<IFileLoggingSession const &>(static_cast<T const &>(*this))->remove_LogFileGenerated(token));
}

template <typename T> Windows::Foundation::Diagnostics::FileLoggingSession impl_IFileLoggingSessionFactory<T>::Create(String const & name) const
{
	Windows::Foundation::Diagnostics::FileLoggingSession result(nullptr);
	check(static_cast<IFileLoggingSessionFactory const &>(static_cast<T const &>(*this))->abi_Create(get(name), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::Diagnostics::FileLoggingSession impl_IFileLoggingSessionFactory<T>::Create(wchar_t const (&name)[S0]) const
{
	Windows::Foundation::Diagnostics::FileLoggingSession result(nullptr);
	check(static_cast<IFileLoggingSessionFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(name), set(result)));
	return result;
}

}}}}

namespace Modern { namespace Windows { namespace Globalization {

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> impl_IJapanesePhoneticAnalyzerStatics<T>::GetWords(String const & input) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> result = {};
	check(static_cast<IJapanesePhoneticAnalyzerStatics const &>(static_cast<T const &>(*this))->abi_GetWords(get(input), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> impl_IJapanesePhoneticAnalyzerStatics<T>::GetWords(wchar_t const (&input)[S0]) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> result = {};
	check(static_cast<IJapanesePhoneticAnalyzerStatics const &>(static_cast<T const &>(*this))->abi_GetWords(StringReference(input), set(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> impl_IJapanesePhoneticAnalyzerStatics<T>::GetWords(String const & input, bool const monoRuby) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> result = {};
	check(static_cast<IJapanesePhoneticAnalyzerStatics const &>(static_cast<T const &>(*this))->abi_GetWordsWithMonoRubyOption(get(input), monoRuby, set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> impl_IJapanesePhoneticAnalyzerStatics<T>::GetWords(wchar_t const (&input)[S0], bool const monoRuby) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> result = {};
	check(static_cast<IJapanesePhoneticAnalyzerStatics const &>(static_cast<T const &>(*this))->abi_GetWordsWithMonoRubyOption(StringReference(input), monoRuby, set(result)));
	return result;
}

template <typename T> String impl_IJapanesePhoneme<T>::DisplayText() const
{
	String value = {};
	check(static_cast<IJapanesePhoneme const &>(static_cast<T const &>(*this))->get_DisplayText(set(value)));
	return value;
}

template <typename T> String impl_IJapanesePhoneme<T>::YomiText() const
{
	String value = {};
	check(static_cast<IJapanesePhoneme const &>(static_cast<T const &>(*this))->get_YomiText(set(value)));
	return value;
}

template <typename T> bool impl_IJapanesePhoneme<T>::IsPhraseStart() const
{
	bool value = {};
	check(static_cast<IJapanesePhoneme const &>(static_cast<T const &>(*this))->get_IsPhraseStart(BoolProxy(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Gregorian() const
{
	String value = {};
	check(static_cast<ICalendarIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Gregorian(set(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Hebrew() const
{
	String value = {};
	check(static_cast<ICalendarIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Hebrew(set(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Hijri() const
{
	String value = {};
	check(static_cast<ICalendarIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Hijri(set(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Japanese() const
{
	String value = {};
	check(static_cast<ICalendarIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Japanese(set(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Julian() const
{
	String value = {};
	check(static_cast<ICalendarIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Julian(set(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Korean() const
{
	String value = {};
	check(static_cast<ICalendarIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Korean(set(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Taiwan() const
{
	String value = {};
	check(static_cast<ICalendarIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Taiwan(set(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Thai() const
{
	String value = {};
	check(static_cast<ICalendarIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Thai(set(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::UmAlQura() const
{
	String value = {};
	check(static_cast<ICalendarIdentifiersStatics const &>(static_cast<T const &>(*this))->get_UmAlQura(set(value)));
	return value;
}

template <typename T> String impl_IClockIdentifiersStatics<T>::TwelveHour() const
{
	String value = {};
	check(static_cast<IClockIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TwelveHour(set(value)));
	return value;
}

template <typename T> String impl_IClockIdentifiersStatics<T>::TwentyFourHour() const
{
	String value = {};
	check(static_cast<IClockIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TwentyFourHour(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Arab() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Arab(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::ArabExt() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ArabExt(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Bali() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Bali(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Beng() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Beng(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Cham() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Cham(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Deva() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Deva(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::FullWide() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_FullWide(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Gujr() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Gujr(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Guru() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Guru(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::HaniDec() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_HaniDec(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Java() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Java(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Kali() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Kali(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Khmr() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Khmr(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Knda() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Knda(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Lana() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Lana(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::LanaTham() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_LanaTham(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Laoo() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Laoo(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Latn() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Latn(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Lepc() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Lepc(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Limb() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Limb(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mlym() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Mlym(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mong() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Mong(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mtei() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Mtei(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mymr() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Mymr(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::MymrShan() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MymrShan(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Nkoo() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Nkoo(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Olck() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Olck(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Orya() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Orya(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Saur() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Saur(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Sund() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Sund(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Talu() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Talu(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::TamlDec() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TamlDec(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Telu() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Telu(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Thai() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Thai(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Tibt() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Tibt(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Vaii() const
{
	String value = {};
	check(static_cast<INumeralSystemIdentifiersStatics const &>(static_cast<T const &>(*this))->get_Vaii(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AED() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_AED(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AFN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_AFN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ALL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ALL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AMD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_AMD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ANG() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ANG(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AOA() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_AOA(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ARS() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ARS(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AUD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_AUD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AWG() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_AWG(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AZN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_AZN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BAM() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BAM(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BBD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BBD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BDT() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BDT(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BGN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BGN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BHD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BHD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BIF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BIF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BMD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BMD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BND() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BND(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BOB() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BOB(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BRL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BRL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BSD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BSD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BTN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BTN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BWP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BWP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BYR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BYR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BZD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_BZD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CAD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_CAD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CDF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_CDF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CHF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_CHF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CLP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_CLP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CNY() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_CNY(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::COP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_COP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CRC() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_CRC(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CUP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_CUP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CVE() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_CVE(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CZK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_CZK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DJF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_DJF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DKK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_DKK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DOP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_DOP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DZD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_DZD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::EGP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_EGP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ERN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ERN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ETB() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ETB(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::EUR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_EUR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::FJD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_FJD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::FKP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_FKP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GBP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_GBP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GEL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_GEL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GHS() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_GHS(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GIP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_GIP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GMD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_GMD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GNF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_GNF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GTQ() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_GTQ(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GYD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_GYD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HKD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_HKD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HNL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_HNL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HRK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_HRK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HTG() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_HTG(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HUF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_HUF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::IDR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_IDR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ILS() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ILS(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::INR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_INR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::IQD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_IQD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::IRR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_IRR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ISK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ISK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::JMD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_JMD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::JOD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_JOD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::JPY() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_JPY(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KES() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_KES(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KGS() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_KGS(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KHR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_KHR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KMF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_KMF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KPW() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_KPW(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KRW() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_KRW(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KWD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_KWD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KYD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_KYD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KZT() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_KZT(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LAK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_LAK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LBP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_LBP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LKR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_LKR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LRD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_LRD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LSL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_LSL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LTL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_LTL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LVL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_LVL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LYD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_LYD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MAD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MAD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MDL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MDL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MGA() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MGA(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MKD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MKD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MMK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MMK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MNT() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MNT(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MOP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MOP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MRO() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MRO(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MUR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MUR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MVR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MVR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MWK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MWK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MXN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MXN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MYR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MYR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MZN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_MZN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NAD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_NAD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NGN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_NGN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NIO() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_NIO(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NOK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_NOK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NPR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_NPR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NZD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_NZD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::OMR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_OMR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PAB() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_PAB(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PEN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_PEN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PGK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_PGK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PHP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_PHP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PKR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_PKR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PLN() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_PLN(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PYG() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_PYG(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::QAR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_QAR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RON() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_RON(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RSD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_RSD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RUB() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_RUB(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RWF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_RWF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SAR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SAR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SBD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SBD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SCR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SCR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SDG() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SDG(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SEK() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SEK(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SGD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SGD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SHP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SHP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SLL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SLL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SOS() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SOS(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SRD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SRD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::STD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_STD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SYP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SYP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SZL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_SZL(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::THB() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_THB(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TJS() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TJS(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TMT() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TMT(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TND() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TND(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TOP() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TOP(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TRY() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TRY(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TTD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TTD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TWD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TWD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TZS() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_TZS(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UAH() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_UAH(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UGX() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_UGX(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::USD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_USD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UYU() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_UYU(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UZS() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_UZS(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::VEF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_VEF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::VND() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_VND(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::VUV() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_VUV(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::WST() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_WST(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XAF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_XAF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XCD() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_XCD(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XOF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_XOF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XPF() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_XPF(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XXX() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_XXX(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::YER() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_YER(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ZAR() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ZAR(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ZMW() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ZMW(set(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ZWL() const
{
	String value = {};
	check(static_cast<ICurrencyIdentifiersStatics const &>(static_cast<T const &>(*this))->get_ZWL(set(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::Code() const
{
	String value = {};
	check(static_cast<IGeographicRegion const &>(static_cast<T const &>(*this))->get_Code(set(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::CodeTwoLetter() const
{
	String value = {};
	check(static_cast<IGeographicRegion const &>(static_cast<T const &>(*this))->get_CodeTwoLetter(set(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::CodeThreeLetter() const
{
	String value = {};
	check(static_cast<IGeographicRegion const &>(static_cast<T const &>(*this))->get_CodeThreeLetter(set(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::CodeThreeDigit() const
{
	String value = {};
	check(static_cast<IGeographicRegion const &>(static_cast<T const &>(*this))->get_CodeThreeDigit(set(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IGeographicRegion const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::NativeName() const
{
	String value = {};
	check(static_cast<IGeographicRegion const &>(static_cast<T const &>(*this))->get_NativeName(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGeographicRegion<T>::CurrenciesInUse() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IGeographicRegion const &>(static_cast<T const &>(*this))->get_CurrenciesInUse(set(value)));
	return value;
}

template <typename T> Windows::Globalization::GeographicRegion impl_IGeographicRegionFactory<T>::CreateGeographicRegion(String const & geographicRegionCode) const
{
	Windows::Globalization::GeographicRegion result(nullptr);
	check(static_cast<IGeographicRegionFactory const &>(static_cast<T const &>(*this))->abi_CreateGeographicRegion(get(geographicRegionCode), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Globalization::GeographicRegion impl_IGeographicRegionFactory<T>::CreateGeographicRegion(wchar_t const (&geographicRegionCode)[S0]) const
{
	Windows::Globalization::GeographicRegion result(nullptr);
	check(static_cast<IGeographicRegionFactory const &>(static_cast<T const &>(*this))->abi_CreateGeographicRegion(StringReference(geographicRegionCode), set(result)));
	return result;
}

template <typename T> bool impl_IGeographicRegionStatics<T>::IsSupported(String const & geographicRegionCode) const
{
	bool result = {};
	check(static_cast<IGeographicRegionStatics const &>(static_cast<T const &>(*this))->abi_IsSupported(get(geographicRegionCode), BoolProxy(result)));
	return result;
}

template <typename T> template <unsigned S0> bool impl_IGeographicRegionStatics<T>::IsSupported(wchar_t const (&geographicRegionCode)[S0]) const
{
	bool result = {};
	check(static_cast<IGeographicRegionStatics const &>(static_cast<T const &>(*this))->abi_IsSupported(StringReference(geographicRegionCode), BoolProxy(result)));
	return result;
}

template <typename T> String impl_ILanguage<T>::LanguageTag() const
{
	String value = {};
	check(static_cast<ILanguage const &>(static_cast<T const &>(*this))->get_LanguageTag(set(value)));
	return value;
}

template <typename T> String impl_ILanguage<T>::DisplayName() const
{
	String value = {};
	check(static_cast<ILanguage const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> String impl_ILanguage<T>::NativeName() const
{
	String value = {};
	check(static_cast<ILanguage const &>(static_cast<T const &>(*this))->get_NativeName(set(value)));
	return value;
}

template <typename T> String impl_ILanguage<T>::Script() const
{
	String value = {};
	check(static_cast<ILanguage const &>(static_cast<T const &>(*this))->get_Script(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ILanguageExtensionSubtags<T>::GetExtensionSubtags(String const & singleton) const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<ILanguageExtensionSubtags const &>(static_cast<T const &>(*this))->abi_GetExtensionSubtags(get(singleton), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IVectorView<String> impl_ILanguageExtensionSubtags<T>::GetExtensionSubtags(wchar_t const (&singleton)[S0]) const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<ILanguageExtensionSubtags const &>(static_cast<T const &>(*this))->abi_GetExtensionSubtags(StringReference(singleton), set(value)));
	return value;
}

template <typename T> Windows::Globalization::Language impl_ILanguageFactory<T>::CreateLanguage(String const & languageTag) const
{
	Windows::Globalization::Language result(nullptr);
	check(static_cast<ILanguageFactory const &>(static_cast<T const &>(*this))->abi_CreateLanguage(get(languageTag), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Globalization::Language impl_ILanguageFactory<T>::CreateLanguage(wchar_t const (&languageTag)[S0]) const
{
	Windows::Globalization::Language result(nullptr);
	check(static_cast<ILanguageFactory const &>(static_cast<T const &>(*this))->abi_CreateLanguage(StringReference(languageTag), set(result)));
	return result;
}

template <typename T> bool impl_ILanguageStatics<T>::IsWellFormed(String const & languageTag) const
{
	bool result = {};
	check(static_cast<ILanguageStatics const &>(static_cast<T const &>(*this))->abi_IsWellFormed(get(languageTag), BoolProxy(result)));
	return result;
}

template <typename T> template <unsigned S0> bool impl_ILanguageStatics<T>::IsWellFormed(wchar_t const (&languageTag)[S0]) const
{
	bool result = {};
	check(static_cast<ILanguageStatics const &>(static_cast<T const &>(*this))->abi_IsWellFormed(StringReference(languageTag), BoolProxy(result)));
	return result;
}

template <typename T> String impl_ILanguageStatics<T>::CurrentInputMethodLanguageTag() const
{
	String value = {};
	check(static_cast<ILanguageStatics const &>(static_cast<T const &>(*this))->get_CurrentInputMethodLanguageTag(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendar<T>::Clone() const
{
	Windows::Globalization::Calendar value(nullptr);
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_Clone(set(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::SetToMin() const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_SetToMin());
}

template <typename T> void impl_ICalendar<T>::SetToMax() const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_SetToMax());
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ICalendar<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Languages(set(value)));
	return value;
}

template <typename T> String impl_ICalendar<T>::NumeralSystem() const
{
	String value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_NumeralSystem(set(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::NumeralSystem(String const & value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_NumeralSystem(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICalendar<T>::NumeralSystem(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_NumeralSystem(StringReference(value)));
}

template <typename T> String impl_ICalendar<T>::GetCalendarSystem() const
{
	String value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_GetCalendarSystem(set(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::ChangeCalendarSystem(String const & value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_ChangeCalendarSystem(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICalendar<T>::ChangeCalendarSystem(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_ChangeCalendarSystem(StringReference(value)));
}

template <typename T> String impl_ICalendar<T>::GetClock() const
{
	String value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_GetClock(set(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::ChangeClock(String const & value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_ChangeClock(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICalendar<T>::ChangeClock(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_ChangeClock(StringReference(value)));
}

template <typename T> Windows::Foundation::DateTime impl_ICalendar<T>::GetDateTime() const
{
	Windows::Foundation::DateTime result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_GetDateTime(&result));
	return result;
}

template <typename T> void impl_ICalendar<T>::SetDateTime(Windows::Foundation::DateTime const & value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_SetDateTime(value));
}

template <typename T> void impl_ICalendar<T>::SetToNow() const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_SetToNow());
}

template <typename T> int impl_ICalendar<T>::FirstEra() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_FirstEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastEra() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_LastEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfEras() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_NumberOfEras(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Era() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Era(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Era(int const value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_Era(value));
}

template <typename T> void impl_ICalendar<T>::AddEras(int const eras) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddEras(eras));
}

template <typename T> String impl_ICalendar<T>::EraAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_EraAsFullString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::EraAsString(int const idealLength) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_EraAsString(idealLength, set(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstYearInThisEra() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_FirstYearInThisEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastYearInThisEra() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_LastYearInThisEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfYearsInThisEra() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_NumberOfYearsInThisEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Year() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Year(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Year(int const value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_Year(value));
}

template <typename T> void impl_ICalendar<T>::AddYears(int const years) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddYears(years));
}

template <typename T> String impl_ICalendar<T>::YearAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_YearAsString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::YearAsTruncatedString(int const remainingDigits) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_YearAsTruncatedString(remainingDigits, set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::YearAsPaddedString(int const minDigits) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_YearAsPaddedString(minDigits, set(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstMonthInThisYear() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_FirstMonthInThisYear(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastMonthInThisYear() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_LastMonthInThisYear(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfMonthsInThisYear() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_NumberOfMonthsInThisYear(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Month() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Month(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Month(int const value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_Month(value));
}

template <typename T> void impl_ICalendar<T>::AddMonths(int const months) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddMonths(months));
}

template <typename T> String impl_ICalendar<T>::MonthAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_MonthAsFullString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsString(int const idealLength) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_MonthAsString(idealLength, set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsSoloString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_MonthAsFullSoloString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsSoloString(int const idealLength) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_MonthAsSoloString(idealLength, set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsNumericString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_MonthAsNumericString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsPaddedNumericString(int const minDigits) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_MonthAsPaddedNumericString(minDigits, set(result)));
	return result;
}

template <typename T> void impl_ICalendar<T>::AddWeeks(int const weeks) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddWeeks(weeks));
}

template <typename T> int impl_ICalendar<T>::FirstDayInThisMonth() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_FirstDayInThisMonth(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastDayInThisMonth() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_LastDayInThisMonth(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfDaysInThisMonth() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_NumberOfDaysInThisMonth(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Day() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Day(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Day(int const value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_Day(value));
}

template <typename T> void impl_ICalendar<T>::AddDays(int const days) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddDays(days));
}

template <typename T> String impl_ICalendar<T>::DayAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_DayAsString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayAsPaddedString(int const minDigits) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_DayAsPaddedString(minDigits, set(result)));
	return result;
}

template <typename T> Windows::Globalization::DayOfWeek impl_ICalendar<T>::DayOfWeek() const
{
	Windows::Globalization::DayOfWeek value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_DayOfWeek(&value));
	return value;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_DayOfWeekAsFullString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsString(int const idealLength) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_DayOfWeekAsString(idealLength, set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsSoloString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_DayOfWeekAsFullSoloString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsSoloString(int const idealLength) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_DayOfWeekAsSoloString(idealLength, set(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstPeriodInThisDay() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_FirstPeriodInThisDay(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastPeriodInThisDay() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_LastPeriodInThisDay(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfPeriodsInThisDay() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_NumberOfPeriodsInThisDay(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Period() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Period(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Period(int const value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_Period(value));
}

template <typename T> void impl_ICalendar<T>::AddPeriods(int const periods) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddPeriods(periods));
}

template <typename T> String impl_ICalendar<T>::PeriodAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_PeriodAsFullString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::PeriodAsString(int const idealLength) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_PeriodAsString(idealLength, set(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstHourInThisPeriod() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_FirstHourInThisPeriod(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastHourInThisPeriod() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_LastHourInThisPeriod(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfHoursInThisPeriod() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_NumberOfHoursInThisPeriod(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Hour() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Hour(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Hour(int const value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_Hour(value));
}

template <typename T> void impl_ICalendar<T>::AddHours(int const hours) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddHours(hours));
}

template <typename T> String impl_ICalendar<T>::HourAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_HourAsString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::HourAsPaddedString(int const minDigits) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_HourAsPaddedString(minDigits, set(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Minute() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Minute(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Minute(int const value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_Minute(value));
}

template <typename T> void impl_ICalendar<T>::AddMinutes(int const minutes) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddMinutes(minutes));
}

template <typename T> String impl_ICalendar<T>::MinuteAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_MinuteAsString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MinuteAsPaddedString(int const minDigits) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_MinuteAsPaddedString(minDigits, set(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Second() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Second(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Second(int const value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_Second(value));
}

template <typename T> void impl_ICalendar<T>::AddSeconds(int const seconds) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddSeconds(seconds));
}

template <typename T> String impl_ICalendar<T>::SecondAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_SecondAsString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::SecondAsPaddedString(int const minDigits) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_SecondAsPaddedString(minDigits, set(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Nanosecond() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_Nanosecond(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Nanosecond(int const value) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->put_Nanosecond(value));
}

template <typename T> void impl_ICalendar<T>::AddNanoseconds(int const nanoseconds) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_AddNanoseconds(nanoseconds));
}

template <typename T> String impl_ICalendar<T>::NanosecondAsString() const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_NanosecondAsString(set(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::NanosecondAsPaddedString(int const minDigits) const
{
	String result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_NanosecondAsPaddedString(minDigits, set(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Compare(Windows::Globalization::Calendar const & other) const
{
	int result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_Compare(get(other), &result));
	return result;
}

template <typename T> int impl_ICalendar<T>::CompareDateTime(Windows::Foundation::DateTime const & other) const
{
	int result = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_CompareDateTime(other, &result));
	return result;
}

template <typename T> void impl_ICalendar<T>::CopyTo(Windows::Globalization::Calendar const & other) const
{
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->abi_CopyTo(get(other)));
}

template <typename T> int impl_ICalendar<T>::FirstMinuteInThisHour() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_FirstMinuteInThisHour(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastMinuteInThisHour() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_LastMinuteInThisHour(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfMinutesInThisHour() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_NumberOfMinutesInThisHour(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::FirstSecondInThisMinute() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_FirstSecondInThisMinute(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastSecondInThisMinute() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_LastSecondInThisMinute(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfSecondsInThisMinute() const
{
	int value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_NumberOfSecondsInThisMinute(&value));
	return value;
}

template <typename T> String impl_ICalendar<T>::ResolvedLanguage() const
{
	String value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_ResolvedLanguage(set(value)));
	return value;
}

template <typename T> bool impl_ICalendar<T>::IsDaylightSavingTime() const
{
	bool value = {};
	check(static_cast<ICalendar const &>(static_cast<T const &>(*this))->get_IsDaylightSavingTime(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendarFactory2<T>::CreateCalendarWithTimeZone(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock, String const & timeZoneId) const
{
	Windows::Globalization::Calendar result(nullptr);
	check(static_cast<ICalendarFactory2 const &>(static_cast<T const &>(*this))->abi_CreateCalendarWithTimeZone(get(languages), get(calendar), get(clock), get(timeZoneId), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Globalization::Calendar impl_ICalendarFactory2<T>::CreateCalendarWithTimeZone(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1], wchar_t const (&timeZoneId)[S2]) const
{
	Windows::Globalization::Calendar result(nullptr);
	check(static_cast<ICalendarFactory2 const &>(static_cast<T const &>(*this))->abi_CreateCalendarWithTimeZone(get(languages), StringReference(calendar), StringReference(clock), StringReference(timeZoneId), set(result)));
	return result;
}

template <typename T> String impl_ITimeZoneOnCalendar<T>::GetTimeZone() const
{
	String value = {};
	check(static_cast<ITimeZoneOnCalendar const &>(static_cast<T const &>(*this))->abi_GetTimeZone(set(value)));
	return value;
}

template <typename T> void impl_ITimeZoneOnCalendar<T>::ChangeTimeZone(String const & timeZoneId) const
{
	check(static_cast<ITimeZoneOnCalendar const &>(static_cast<T const &>(*this))->abi_ChangeTimeZone(get(timeZoneId)));
}

template <typename T> template <unsigned S0> void impl_ITimeZoneOnCalendar<T>::ChangeTimeZone(wchar_t const (&timeZoneId)[S0]) const
{
	check(static_cast<ITimeZoneOnCalendar const &>(static_cast<T const &>(*this))->abi_ChangeTimeZone(StringReference(timeZoneId)));
}

template <typename T> String impl_ITimeZoneOnCalendar<T>::TimeZoneAsString() const
{
	String result = {};
	check(static_cast<ITimeZoneOnCalendar const &>(static_cast<T const &>(*this))->abi_TimeZoneAsFullString(set(result)));
	return result;
}

template <typename T> String impl_ITimeZoneOnCalendar<T>::TimeZoneAsString(int const idealLength) const
{
	String result = {};
	check(static_cast<ITimeZoneOnCalendar const &>(static_cast<T const &>(*this))->abi_TimeZoneAsString(idealLength, set(result)));
	return result;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendarFactory<T>::CreateCalendarDefaultCalendarAndClock(Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::Calendar result(nullptr);
	check(static_cast<ICalendarFactory const &>(static_cast<T const &>(*this))->abi_CreateCalendarDefaultCalendarAndClock(get(languages), set(result)));
	return result;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendarFactory<T>::CreateCalendar(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock) const
{
	Windows::Globalization::Calendar result(nullptr);
	check(static_cast<ICalendarFactory const &>(static_cast<T const &>(*this))->abi_CreateCalendar(get(languages), get(calendar), get(clock), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Globalization::Calendar impl_ICalendarFactory<T>::CreateCalendar(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1]) const
{
	Windows::Globalization::Calendar result(nullptr);
	check(static_cast<ICalendarFactory const &>(static_cast<T const &>(*this))->abi_CreateCalendar(get(languages), StringReference(calendar), StringReference(clock), set(result)));
	return result;
}

template <typename T> String impl_IApplicationLanguagesStatics<T>::PrimaryLanguageOverride() const
{
	String value = {};
	check(static_cast<IApplicationLanguagesStatics const &>(static_cast<T const &>(*this))->get_PrimaryLanguageOverride(set(value)));
	return value;
}

template <typename T> void impl_IApplicationLanguagesStatics<T>::PrimaryLanguageOverride(String const & value) const
{
	check(static_cast<IApplicationLanguagesStatics const &>(static_cast<T const &>(*this))->put_PrimaryLanguageOverride(get(value)));
}

template <typename T> template <unsigned S0> void impl_IApplicationLanguagesStatics<T>::PrimaryLanguageOverride(wchar_t const (&value)[S0]) const
{
	check(static_cast<IApplicationLanguagesStatics const &>(static_cast<T const &>(*this))->put_PrimaryLanguageOverride(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IApplicationLanguagesStatics<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IApplicationLanguagesStatics const &>(static_cast<T const &>(*this))->get_Languages(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IApplicationLanguagesStatics<T>::ManifestLanguages() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IApplicationLanguagesStatics const &>(static_cast<T const &>(*this))->get_ManifestLanguages(set(value)));
	return value;
}

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

template <typename T> String impl_ICharacterGrouping<T>::First() const
{
	String value = {};
	check(static_cast<ICharacterGrouping const &>(static_cast<T const &>(*this))->get_First(set(value)));
	return value;
}

template <typename T> String impl_ICharacterGrouping<T>::Label() const
{
	String value = {};
	check(static_cast<ICharacterGrouping const &>(static_cast<T const &>(*this))->get_Label(set(value)));
	return value;
}

template <typename T> String impl_ICharacterGroupings<T>::Lookup(String const & text) const
{
	String result = {};
	check(static_cast<ICharacterGroupings const &>(static_cast<T const &>(*this))->abi_Lookup(get(text), set(result)));
	return result;
}

template <typename T> template <unsigned S0> String impl_ICharacterGroupings<T>::Lookup(wchar_t const (&text)[S0]) const
{
	String result = {};
	check(static_cast<ICharacterGroupings const &>(static_cast<T const &>(*this))->abi_Lookup(StringReference(text), set(result)));
	return result;
}

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDateTimeFormatter<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_Languages(set(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::GeographicRegion() const
{
	String value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_GeographicRegion(set(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::Calendar() const
{
	String value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_Calendar(set(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::Clock() const
{
	String value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_Clock(set(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::NumeralSystem() const
{
	String value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_NumeralSystem(set(value)));
	return value;
}

template <typename T> void impl_IDateTimeFormatter<T>::NumeralSystem(String const & value) const
{
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->put_NumeralSystem(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDateTimeFormatter<T>::NumeralSystem(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->put_NumeralSystem(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDateTimeFormatter<T>::Patterns() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_Patterns(set(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::Template() const
{
	String value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_Template(set(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::Format(Windows::Foundation::DateTime const & value) const
{
	String result = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->abi_Format(value, set(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::YearFormat impl_IDateTimeFormatter<T>::IncludeYear() const
{
	Windows::Globalization::DateTimeFormatting::YearFormat value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_IncludeYear(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::MonthFormat impl_IDateTimeFormatter<T>::IncludeMonth() const
{
	Windows::Globalization::DateTimeFormatting::MonthFormat value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_IncludeMonth(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DayOfWeekFormat impl_IDateTimeFormatter<T>::IncludeDayOfWeek() const
{
	Windows::Globalization::DateTimeFormatting::DayOfWeekFormat value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_IncludeDayOfWeek(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DayFormat impl_IDateTimeFormatter<T>::IncludeDay() const
{
	Windows::Globalization::DateTimeFormatting::DayFormat value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_IncludeDay(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::HourFormat impl_IDateTimeFormatter<T>::IncludeHour() const
{
	Windows::Globalization::DateTimeFormatting::HourFormat value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_IncludeHour(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::MinuteFormat impl_IDateTimeFormatter<T>::IncludeMinute() const
{
	Windows::Globalization::DateTimeFormatting::MinuteFormat value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_IncludeMinute(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::SecondFormat impl_IDateTimeFormatter<T>::IncludeSecond() const
{
	Windows::Globalization::DateTimeFormatting::SecondFormat value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_IncludeSecond(&value));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::ResolvedLanguage() const
{
	String value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_ResolvedLanguage(set(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::ResolvedGeographicRegion() const
{
	String value = {};
	check(static_cast<IDateTimeFormatter const &>(static_cast<T const &>(*this))->get_ResolvedGeographicRegion(set(value)));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatter(String const & formatTemplate) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatter(get(formatTemplate), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatter(wchar_t const (&formatTemplate)[S0]) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatter(StringReference(formatTemplate), set(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterLanguages(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatterLanguages(get(formatTemplate), get(languages), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterLanguages(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatterLanguages(StringReference(formatTemplate), get(languages), set(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterContext(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatterContext(get(formatTemplate), get(languages), get(geographicRegion), get(calendar), get(clock), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterContext(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1], wchar_t const (&calendar)[S2], wchar_t const (&clock)[S3]) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatterContext(StringReference(formatTemplate), get(languages), StringReference(geographicRegion), StringReference(calendar), StringReference(clock), set(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterDate(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatterDate(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, set(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterTime(Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatterTime(hourFormat, minuteFormat, secondFormat, set(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterDateTimeLanguages(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatterDateTimeLanguages(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, get(languages), set(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterDateTimeContext(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatterDateTimeContext(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, get(languages), get(geographicRegion), get(calendar), get(clock), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterDateTimeContext(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0], wchar_t const (&calendar)[S1], wchar_t const (&clock)[S2]) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result(nullptr);
	check(static_cast<IDateTimeFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDateTimeFormatterDateTimeContext(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, get(languages), StringReference(geographicRegion), StringReference(calendar), StringReference(clock), set(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterStatics<T>::LongDate() const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter value(nullptr);
	check(static_cast<IDateTimeFormatterStatics const &>(static_cast<T const &>(*this))->get_LongDate(set(value)));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterStatics<T>::LongTime() const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter value(nullptr);
	check(static_cast<IDateTimeFormatterStatics const &>(static_cast<T const &>(*this))->get_LongTime(set(value)));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterStatics<T>::ShortDate() const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter value(nullptr);
	check(static_cast<IDateTimeFormatterStatics const &>(static_cast<T const &>(*this))->get_ShortDate(set(value)));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterStatics<T>::ShortTime() const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter value(nullptr);
	check(static_cast<IDateTimeFormatterStatics const &>(static_cast<T const &>(*this))->get_ShortTime(set(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter2<T>::Format(Windows::Foundation::DateTime const & datetime, String const & timeZoneId) const
{
	String result = {};
	check(static_cast<IDateTimeFormatter2 const &>(static_cast<T const &>(*this))->abi_FormatUsingTimeZone(datetime, get(timeZoneId), set(result)));
	return result;
}

template <typename T> template <unsigned S0> String impl_IDateTimeFormatter2<T>::Format(Windows::Foundation::DateTime const & datetime, wchar_t const (&timeZoneId)[S0]) const
{
	String result = {};
	check(static_cast<IDateTimeFormatter2 const &>(static_cast<T const &>(*this))->abi_FormatUsingTimeZone(datetime, StringReference(timeZoneId), set(result)));
	return result;
}

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UITextFont() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_UITextFont(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UIHeadingFont() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_UIHeadingFont(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UITitleFont() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_UITitleFont(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UICaptionFont() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_UICaptionFont(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UINotificationHeadingFont() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_UINotificationHeadingFont(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::TraditionalDocumentFont() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_TraditionalDocumentFont(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::ModernDocumentFont() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_ModernDocumentFont(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::DocumentHeadingFont() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_DocumentHeadingFont(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::FixedWidthTextFont() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_FixedWidthTextFont(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::DocumentAlternate1Font() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_DocumentAlternate1Font(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::DocumentAlternate2Font() const
{
	Windows::Globalization::Fonts::LanguageFont value(nullptr);
	check(static_cast<ILanguageFontGroup const &>(static_cast<T const &>(*this))->get_DocumentAlternate2Font(set(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFontGroup impl_ILanguageFontGroupFactory<T>::CreateLanguageFontGroup(String const & languageTag) const
{
	Windows::Globalization::Fonts::LanguageFontGroup recommendedFonts(nullptr);
	check(static_cast<ILanguageFontGroupFactory const &>(static_cast<T const &>(*this))->abi_CreateLanguageFontGroup(get(languageTag), set(recommendedFonts)));
	return recommendedFonts;
}

template <typename T> template <unsigned S0> Windows::Globalization::Fonts::LanguageFontGroup impl_ILanguageFontGroupFactory<T>::CreateLanguageFontGroup(wchar_t const (&languageTag)[S0]) const
{
	Windows::Globalization::Fonts::LanguageFontGroup recommendedFonts(nullptr);
	check(static_cast<ILanguageFontGroupFactory const &>(static_cast<T const &>(*this))->abi_CreateLanguageFontGroup(StringReference(languageTag), set(recommendedFonts)));
	return recommendedFonts;
}

template <typename T> String impl_ILanguageFont<T>::FontFamily() const
{
	String value = {};
	check(static_cast<ILanguageFont const &>(static_cast<T const &>(*this))->get_FontFamily(set(value)));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_ILanguageFont<T>::FontWeight() const
{
	Windows::UI::Text::FontWeight weight = {};
	check(static_cast<ILanguageFont const &>(static_cast<T const &>(*this))->get_FontWeight(&weight));
	return weight;
}

template <typename T> Windows::UI::Text::FontStretch impl_ILanguageFont<T>::FontStretch() const
{
	Windows::UI::Text::FontStretch stretch = {};
	check(static_cast<ILanguageFont const &>(static_cast<T const &>(*this))->get_FontStretch(&stretch));
	return stretch;
}

template <typename T> Windows::UI::Text::FontStyle impl_ILanguageFont<T>::FontStyle() const
{
	Windows::UI::Text::FontStyle style = {};
	check(static_cast<ILanguageFont const &>(static_cast<T const &>(*this))->get_FontStyle(&style));
	return style;
}

template <typename T> double impl_ILanguageFont<T>::ScaleFactor() const
{
	double scale = {};
	check(static_cast<ILanguageFont const &>(static_cast<T const &>(*this))->get_ScaleFactor(&scale));
	return scale;
}

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

template <typename T> int impl_INumberRounder<T>::RoundInt32(int const value) const
{
	int result = {};
	check(static_cast<INumberRounder const &>(static_cast<T const &>(*this))->abi_RoundInt32(value, &result));
	return result;
}

template <typename T> unsigned impl_INumberRounder<T>::RoundUInt32(unsigned const value) const
{
	unsigned result = {};
	check(static_cast<INumberRounder const &>(static_cast<T const &>(*this))->abi_RoundUInt32(value, &result));
	return result;
}

template <typename T> long long impl_INumberRounder<T>::RoundInt64(long long const value) const
{
	long long result = {};
	check(static_cast<INumberRounder const &>(static_cast<T const &>(*this))->abi_RoundInt64(value, &result));
	return result;
}

template <typename T> unsigned long long impl_INumberRounder<T>::RoundUInt64(unsigned long long const value) const
{
	unsigned long long result = {};
	check(static_cast<INumberRounder const &>(static_cast<T const &>(*this))->abi_RoundUInt64(value, &result));
	return result;
}

template <typename T> float impl_INumberRounder<T>::RoundSingle(float const value) const
{
	float result = {};
	check(static_cast<INumberRounder const &>(static_cast<T const &>(*this))->abi_RoundSingle(value, &result));
	return result;
}

template <typename T> double impl_INumberRounder<T>::RoundDouble(double const value) const
{
	double result = {};
	check(static_cast<INumberRounder const &>(static_cast<T const &>(*this))->abi_RoundDouble(value, &result));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::RoundingAlgorithm impl_ISignificantDigitsNumberRounder<T>::RoundingAlgorithm() const
{
	Windows::Globalization::NumberFormatting::RoundingAlgorithm value = {};
	check(static_cast<ISignificantDigitsNumberRounder const &>(static_cast<T const &>(*this))->get_RoundingAlgorithm(&value));
	return value;
}

template <typename T> void impl_ISignificantDigitsNumberRounder<T>::RoundingAlgorithm(Windows::Globalization::NumberFormatting::RoundingAlgorithm const value) const
{
	check(static_cast<ISignificantDigitsNumberRounder const &>(static_cast<T const &>(*this))->put_RoundingAlgorithm(value));
}

template <typename T> unsigned impl_ISignificantDigitsNumberRounder<T>::SignificantDigits() const
{
	unsigned value = {};
	check(static_cast<ISignificantDigitsNumberRounder const &>(static_cast<T const &>(*this))->get_SignificantDigits(&value));
	return value;
}

template <typename T> void impl_ISignificantDigitsNumberRounder<T>::SignificantDigits(unsigned const value) const
{
	check(static_cast<ISignificantDigitsNumberRounder const &>(static_cast<T const &>(*this))->put_SignificantDigits(value));
}

template <typename T> Windows::Globalization::NumberFormatting::RoundingAlgorithm impl_IIncrementNumberRounder<T>::RoundingAlgorithm() const
{
	Windows::Globalization::NumberFormatting::RoundingAlgorithm value = {};
	check(static_cast<IIncrementNumberRounder const &>(static_cast<T const &>(*this))->get_RoundingAlgorithm(&value));
	return value;
}

template <typename T> void impl_IIncrementNumberRounder<T>::RoundingAlgorithm(Windows::Globalization::NumberFormatting::RoundingAlgorithm const value) const
{
	check(static_cast<IIncrementNumberRounder const &>(static_cast<T const &>(*this))->put_RoundingAlgorithm(value));
}

template <typename T> double impl_IIncrementNumberRounder<T>::Increment() const
{
	double value = {};
	check(static_cast<IIncrementNumberRounder const &>(static_cast<T const &>(*this))->get_Increment(&value));
	return value;
}

template <typename T> void impl_IIncrementNumberRounder<T>::Increment(double const value) const
{
	check(static_cast<IIncrementNumberRounder const &>(static_cast<T const &>(*this))->put_Increment(value));
}

template <typename T> String impl_INumberFormatter<T>::Format(long long const value) const
{
	String result = {};
	check(static_cast<INumberFormatter const &>(static_cast<T const &>(*this))->abi_FormatInt(value, set(result)));
	return result;
}

template <typename T> String impl_INumberFormatter<T>::Format(unsigned long long const value) const
{
	String result = {};
	check(static_cast<INumberFormatter const &>(static_cast<T const &>(*this))->abi_FormatUInt(value, set(result)));
	return result;
}

template <typename T> String impl_INumberFormatter<T>::Format(double const value) const
{
	String result = {};
	check(static_cast<INumberFormatter const &>(static_cast<T const &>(*this))->abi_FormatDouble(value, set(result)));
	return result;
}

template <typename T> String impl_INumberFormatter2<T>::FormatInt(long long const value) const
{
	String result = {};
	check(static_cast<INumberFormatter2 const &>(static_cast<T const &>(*this))->abi_FormatInt(value, set(result)));
	return result;
}

template <typename T> String impl_INumberFormatter2<T>::FormatUInt(unsigned long long const value) const
{
	String result = {};
	check(static_cast<INumberFormatter2 const &>(static_cast<T const &>(*this))->abi_FormatUInt(value, set(result)));
	return result;
}

template <typename T> String impl_INumberFormatter2<T>::FormatDouble(double const value) const
{
	String result = {};
	check(static_cast<INumberFormatter2 const &>(static_cast<T const &>(*this))->abi_FormatDouble(value, set(result)));
	return result;
}

template <typename T> Windows::Foundation::IReference<long long> impl_INumberParser<T>::ParseInt(String const & text) const
{
	Windows::Foundation::IReference<long long> result = {};
	check(static_cast<INumberParser const &>(static_cast<T const &>(*this))->abi_ParseInt(get(text), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IReference<long long> impl_INumberParser<T>::ParseInt(wchar_t const (&text)[S0]) const
{
	Windows::Foundation::IReference<long long> result = {};
	check(static_cast<INumberParser const &>(static_cast<T const &>(*this))->abi_ParseInt(StringReference(text), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_INumberParser<T>::ParseUInt(String const & text) const
{
	Windows::Foundation::IReference<unsigned long long> result = {};
	check(static_cast<INumberParser const &>(static_cast<T const &>(*this))->abi_ParseUInt(get(text), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IReference<unsigned long long> impl_INumberParser<T>::ParseUInt(wchar_t const (&text)[S0]) const
{
	Windows::Foundation::IReference<unsigned long long> result = {};
	check(static_cast<INumberParser const &>(static_cast<T const &>(*this))->abi_ParseUInt(StringReference(text), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IReference<double> impl_INumberParser<T>::ParseDouble(String const & text) const
{
	Windows::Foundation::IReference<double> result = {};
	check(static_cast<INumberParser const &>(static_cast<T const &>(*this))->abi_ParseDouble(get(text), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IReference<double> impl_INumberParser<T>::ParseDouble(wchar_t const (&text)[S0]) const
{
	Windows::Foundation::IReference<double> result = {};
	check(static_cast<INumberParser const &>(static_cast<T const &>(*this))->abi_ParseDouble(StringReference(text), set(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_INumberFormatterOptions<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->get_Languages(set(value)));
	return value;
}

template <typename T> String impl_INumberFormatterOptions<T>::GeographicRegion() const
{
	String value = {};
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->get_GeographicRegion(set(value)));
	return value;
}

template <typename T> int impl_INumberFormatterOptions<T>::IntegerDigits() const
{
	int value = {};
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->get_IntegerDigits(&value));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::IntegerDigits(int const value) const
{
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->put_IntegerDigits(value));
}

template <typename T> int impl_INumberFormatterOptions<T>::FractionDigits() const
{
	int value = {};
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->get_FractionDigits(&value));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::FractionDigits(int const value) const
{
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->put_FractionDigits(value));
}

template <typename T> bool impl_INumberFormatterOptions<T>::IsGrouped() const
{
	bool value = {};
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->get_IsGrouped(BoolProxy(value)));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::IsGrouped(bool const value) const
{
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->put_IsGrouped(value));
}

template <typename T> bool impl_INumberFormatterOptions<T>::IsDecimalPointAlwaysDisplayed() const
{
	bool value = {};
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->get_IsDecimalPointAlwaysDisplayed(BoolProxy(value)));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::IsDecimalPointAlwaysDisplayed(bool const value) const
{
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->put_IsDecimalPointAlwaysDisplayed(value));
}

template <typename T> String impl_INumberFormatterOptions<T>::NumeralSystem() const
{
	String value = {};
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->get_NumeralSystem(set(value)));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::NumeralSystem(String const & value) const
{
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->put_NumeralSystem(get(value)));
}

template <typename T> template <unsigned S0> void impl_INumberFormatterOptions<T>::NumeralSystem(wchar_t const (&value)[S0]) const
{
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->put_NumeralSystem(StringReference(value)));
}

template <typename T> String impl_INumberFormatterOptions<T>::ResolvedLanguage() const
{
	String value = {};
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->get_ResolvedLanguage(set(value)));
	return value;
}

template <typename T> String impl_INumberFormatterOptions<T>::ResolvedGeographicRegion() const
{
	String value = {};
	check(static_cast<INumberFormatterOptions const &>(static_cast<T const &>(*this))->get_ResolvedGeographicRegion(set(value)));
	return value;
}

template <typename T> int impl_ISignificantDigitsOption<T>::SignificantDigits() const
{
	int value = {};
	check(static_cast<ISignificantDigitsOption const &>(static_cast<T const &>(*this))->get_SignificantDigits(&value));
	return value;
}

template <typename T> void impl_ISignificantDigitsOption<T>::SignificantDigits(int const value) const
{
	check(static_cast<ISignificantDigitsOption const &>(static_cast<T const &>(*this))->put_SignificantDigits(value));
}

template <typename T> Windows::Globalization::NumberFormatting::INumberRounder impl_INumberRounderOption<T>::NumberRounder() const
{
	Windows::Globalization::NumberFormatting::INumberRounder value = {};
	check(static_cast<INumberRounderOption const &>(static_cast<T const &>(*this))->get_NumberRounder(set(value)));
	return value;
}

template <typename T> void impl_INumberRounderOption<T>::NumberRounder(Windows::Globalization::NumberFormatting::INumberRounder const & value) const
{
	check(static_cast<INumberRounderOption const &>(static_cast<T const &>(*this))->put_NumberRounder(get(value)));
}

template <typename T> bool impl_ISignedZeroOption<T>::IsZeroSigned() const
{
	bool value = {};
	check(static_cast<ISignedZeroOption const &>(static_cast<T const &>(*this))->get_IsZeroSigned(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISignedZeroOption<T>::IsZeroSigned(bool const value) const
{
	check(static_cast<ISignedZeroOption const &>(static_cast<T const &>(*this))->put_IsZeroSigned(value));
}

template <typename T> Windows::Globalization::NumberFormatting::DecimalFormatter impl_IDecimalFormatterFactory<T>::CreateDecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const
{
	Windows::Globalization::NumberFormatting::DecimalFormatter result(nullptr);
	check(static_cast<IDecimalFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDecimalFormatter(get(languages), get(geographicRegion), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Globalization::NumberFormatting::DecimalFormatter impl_IDecimalFormatterFactory<T>::CreateDecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) const
{
	Windows::Globalization::NumberFormatting::DecimalFormatter result(nullptr);
	check(static_cast<IDecimalFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateDecimalFormatter(get(languages), StringReference(geographicRegion), set(result)));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::PercentFormatter impl_IPercentFormatterFactory<T>::CreatePercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const
{
	Windows::Globalization::NumberFormatting::PercentFormatter result(nullptr);
	check(static_cast<IPercentFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreatePercentFormatter(get(languages), get(geographicRegion), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Globalization::NumberFormatting::PercentFormatter impl_IPercentFormatterFactory<T>::CreatePercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) const
{
	Windows::Globalization::NumberFormatting::PercentFormatter result(nullptr);
	check(static_cast<IPercentFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreatePercentFormatter(get(languages), StringReference(geographicRegion), set(result)));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::PermilleFormatter impl_IPermilleFormatterFactory<T>::CreatePermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const
{
	Windows::Globalization::NumberFormatting::PermilleFormatter result(nullptr);
	check(static_cast<IPermilleFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreatePermilleFormatter(get(languages), get(geographicRegion), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Globalization::NumberFormatting::PermilleFormatter impl_IPermilleFormatterFactory<T>::CreatePermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) const
{
	Windows::Globalization::NumberFormatting::PermilleFormatter result(nullptr);
	check(static_cast<IPermilleFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreatePermilleFormatter(get(languages), StringReference(geographicRegion), set(result)));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::CurrencyFormatter impl_ICurrencyFormatterFactory<T>::CreateCurrencyFormatterCode(String const & currencyCode) const
{
	Windows::Globalization::NumberFormatting::CurrencyFormatter result(nullptr);
	check(static_cast<ICurrencyFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateCurrencyFormatterCode(get(currencyCode), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Globalization::NumberFormatting::CurrencyFormatter impl_ICurrencyFormatterFactory<T>::CreateCurrencyFormatterCode(wchar_t const (&currencyCode)[S0]) const
{
	Windows::Globalization::NumberFormatting::CurrencyFormatter result(nullptr);
	check(static_cast<ICurrencyFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateCurrencyFormatterCode(StringReference(currencyCode), set(result)));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::CurrencyFormatter impl_ICurrencyFormatterFactory<T>::CreateCurrencyFormatterCodeContext(String const & currencyCode, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) const
{
	Windows::Globalization::NumberFormatting::CurrencyFormatter result(nullptr);
	check(static_cast<ICurrencyFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateCurrencyFormatterCodeContext(get(currencyCode), get(languages), get(geographicRegion), set(result)));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Globalization::NumberFormatting::CurrencyFormatter impl_ICurrencyFormatterFactory<T>::CreateCurrencyFormatterCodeContext(wchar_t const (&currencyCode)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1]) const
{
	Windows::Globalization::NumberFormatting::CurrencyFormatter result(nullptr);
	check(static_cast<ICurrencyFormatterFactory const &>(static_cast<T const &>(*this))->abi_CreateCurrencyFormatterCodeContext(StringReference(currencyCode), get(languages), StringReference(geographicRegion), set(result)));
	return result;
}

template <typename T> String impl_ICurrencyFormatter<T>::Currency() const
{
	String value = {};
	check(static_cast<ICurrencyFormatter const &>(static_cast<T const &>(*this))->get_Currency(set(value)));
	return value;
}

template <typename T> Windows::Globalization::NumberFormatting::CurrencyFormatterMode impl_ICurrencyFormatter2<T>::Mode() const
{
	Windows::Globalization::NumberFormatting::CurrencyFormatterMode value = {};
	check(static_cast<ICurrencyFormatter2 const &>(static_cast<T const &>(*this))->get_Mode(&value));
	return value;
}

template <typename T> void impl_ICurrencyFormatter2<T>::Mode(Windows::Globalization::NumberFormatting::CurrencyFormatterMode const value) const
{
	check(static_cast<ICurrencyFormatter2 const &>(static_cast<T const &>(*this))->put_Mode(value));
}

template <typename T> void impl_ICurrencyFormatter2<T>::ApplyRoundingForCurrency(Windows::Globalization::NumberFormatting::RoundingAlgorithm const roundingAlgorithm) const
{
	check(static_cast<ICurrencyFormatter2 const &>(static_cast<T const &>(*this))->abi_ApplyRoundingForCurrency(roundingAlgorithm));
}

template <typename T> Windows::Globalization::NumberFormatting::NumeralSystemTranslator impl_INumeralSystemTranslatorFactory<T>::Create(Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::NumberFormatting::NumeralSystemTranslator result(nullptr);
	check(static_cast<INumeralSystemTranslatorFactory const &>(static_cast<T const &>(*this))->abi_Create(get(languages), set(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_INumeralSystemTranslator<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<INumeralSystemTranslator const &>(static_cast<T const &>(*this))->get_Languages(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemTranslator<T>::ResolvedLanguage() const
{
	String value = {};
	check(static_cast<INumeralSystemTranslator const &>(static_cast<T const &>(*this))->get_ResolvedLanguage(set(value)));
	return value;
}

template <typename T> String impl_INumeralSystemTranslator<T>::NumeralSystem() const
{
	String value = {};
	check(static_cast<INumeralSystemTranslator const &>(static_cast<T const &>(*this))->get_NumeralSystem(set(value)));
	return value;
}

template <typename T> void impl_INumeralSystemTranslator<T>::NumeralSystem(String const & value) const
{
	check(static_cast<INumeralSystemTranslator const &>(static_cast<T const &>(*this))->put_NumeralSystem(get(value)));
}

template <typename T> template <unsigned S0> void impl_INumeralSystemTranslator<T>::NumeralSystem(wchar_t const (&value)[S0]) const
{
	check(static_cast<INumeralSystemTranslator const &>(static_cast<T const &>(*this))->put_NumeralSystem(StringReference(value)));
}

template <typename T> String impl_INumeralSystemTranslator<T>::TranslateNumerals(String const & value) const
{
	String result = {};
	check(static_cast<INumeralSystemTranslator const &>(static_cast<T const &>(*this))->abi_TranslateNumerals(get(value), set(result)));
	return result;
}

template <typename T> template <unsigned S0> String impl_INumeralSystemTranslator<T>::TranslateNumerals(wchar_t const (&value)[S0]) const
{
	String result = {};
	check(static_cast<INumeralSystemTranslator const &>(static_cast<T const &>(*this))->abi_TranslateNumerals(StringReference(value), set(result)));
	return result;
}

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

template <typename T> Windows::Graphics::Display::DisplayInformation impl_IDisplayInformationStatics<T>::GetForCurrentView() const
{
	Windows::Graphics::Display::DisplayInformation current(nullptr);
	check(static_cast<IDisplayInformationStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(current)));
	return current;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayInformationStatics<T>::AutoRotationPreferences() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(static_cast<IDisplayInformationStatics const &>(static_cast<T const &>(*this))->get_AutoRotationPreferences(&value));
	return value;
}

template <typename T> void impl_IDisplayInformationStatics<T>::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(static_cast<IDisplayInformationStatics const &>(static_cast<T const &>(*this))->put_AutoRotationPreferences(value));
}

template <typename T> EventRegistrationToken impl_IDisplayInformationStatics<T>::DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDisplayInformationStatics const &>(static_cast<T const &>(*this))->add_DisplayContentsInvalidated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDisplayInformationStatics<T>::DisplayContentsInvalidated(F handler) const
{
	return DisplayContentsInvalidated(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformationStatics<T>::DisplayContentsInvalidated(EventRegistrationToken const token) const
{
	check(static_cast<IDisplayInformationStatics const &>(static_cast<T const &>(*this))->remove_DisplayContentsInvalidated(token));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayInformation<T>::CurrentOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->get_CurrentOrientation(&value));
	return value;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayInformation<T>::NativeOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->get_NativeOrientation(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IDisplayInformation<T>::OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->add_OrientationChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDisplayInformation<T>::OrientationChanged(F handler) const
{
	return OrientationChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::OrientationChanged(EventRegistrationToken const token) const
{
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->remove_OrientationChanged(token));
}

template <typename T> Windows::Graphics::Display::ResolutionScale impl_IDisplayInformation<T>::ResolutionScale() const
{
	Windows::Graphics::Display::ResolutionScale value = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->get_ResolutionScale(&value));
	return value;
}

template <typename T> float impl_IDisplayInformation<T>::LogicalDpi() const
{
	float value = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->get_LogicalDpi(&value));
	return value;
}

template <typename T> float impl_IDisplayInformation<T>::RawDpiX() const
{
	float value = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->get_RawDpiX(&value));
	return value;
}

template <typename T> float impl_IDisplayInformation<T>::RawDpiY() const
{
	float value = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->get_RawDpiY(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IDisplayInformation<T>::DpiChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->add_DpiChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDisplayInformation<T>::DpiChanged(F handler) const
{
	return DpiChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::DpiChanged(EventRegistrationToken const token) const
{
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->remove_DpiChanged(token));
}

template <typename T> bool impl_IDisplayInformation<T>::StereoEnabled() const
{
	bool value = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->get_StereoEnabled(BoolProxy(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IDisplayInformation<T>::StereoEnabledChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->add_StereoEnabledChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDisplayInformation<T>::StereoEnabledChanged(F handler) const
{
	return StereoEnabledChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::StereoEnabledChanged(EventRegistrationToken const token) const
{
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->remove_StereoEnabledChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IDisplayInformation<T>::GetColorProfileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> asyncInfo = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->abi_GetColorProfileAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> EventRegistrationToken impl_IDisplayInformation<T>::ColorProfileChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->add_ColorProfileChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDisplayInformation<T>::ColorProfileChanged(F handler) const
{
	return ColorProfileChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::ColorProfileChanged(EventRegistrationToken const token) const
{
	check(static_cast<IDisplayInformation const &>(static_cast<T const &>(*this))->remove_ColorProfileChanged(token));
}

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

template <typename T> unsigned impl_IBitmapTransform<T>::ScaledWidth() const
{
	unsigned value = {};
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->get_ScaledWidth(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::ScaledWidth(unsigned const value) const
{
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->put_ScaledWidth(value));
}

template <typename T> unsigned impl_IBitmapTransform<T>::ScaledHeight() const
{
	unsigned value = {};
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->get_ScaledHeight(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::ScaledHeight(unsigned const value) const
{
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->put_ScaledHeight(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapInterpolationMode impl_IBitmapTransform<T>::InterpolationMode() const
{
	Windows::Graphics::Imaging::BitmapInterpolationMode value = {};
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->get_InterpolationMode(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::InterpolationMode(Windows::Graphics::Imaging::BitmapInterpolationMode const value) const
{
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->put_InterpolationMode(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapFlip impl_IBitmapTransform<T>::Flip() const
{
	Windows::Graphics::Imaging::BitmapFlip value = {};
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->get_Flip(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::Flip(Windows::Graphics::Imaging::BitmapFlip const value) const
{
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->put_Flip(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapRotation impl_IBitmapTransform<T>::Rotation() const
{
	Windows::Graphics::Imaging::BitmapRotation value = {};
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->get_Rotation(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::Rotation(Windows::Graphics::Imaging::BitmapRotation const value) const
{
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->put_Rotation(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapBounds impl_IBitmapTransform<T>::Bounds() const
{
	Windows::Graphics::Imaging::BitmapBounds value = {};
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->get_Bounds(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::Bounds(Windows::Graphics::Imaging::BitmapBounds const & value) const
{
	check(static_cast<IBitmapTransform const &>(static_cast<T const &>(*this))->put_Bounds(value));
}

template <typename T> IInspectable impl_IBitmapTypedValue<T>::Value() const
{
	IInspectable value = {};
	check(static_cast<IBitmapTypedValue const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> Windows::Foundation::PropertyType impl_IBitmapTypedValue<T>::Type() const
{
	Windows::Foundation::PropertyType value = {};
	check(static_cast<IBitmapTypedValue const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapTypedValue impl_IBitmapTypedValueFactory<T>::Create(IInspectable const & value, Windows::Foundation::PropertyType const type) const
{
	Windows::Graphics::Imaging::BitmapTypedValue bitmapTypedValue(nullptr);
	check(static_cast<IBitmapTypedValueFactory const &>(static_cast<T const &>(*this))->abi_Create(get(value), type, set(bitmapTypedValue)));
	return bitmapTypedValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapPropertySet> impl_IBitmapPropertiesView<T>::GetPropertiesAsync(Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapPropertySet> asyncInfo = {};
	check(static_cast<IBitmapPropertiesView const &>(static_cast<T const &>(*this))->abi_GetPropertiesAsync(get(propertiesToRetrieve), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IBitmapProperties<T>::SetPropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & propertiesToSet) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IBitmapProperties const &>(static_cast<T const &>(*this))->abi_SetPropertiesAsync(get(propertiesToSet), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> impl_IBitmapFrame<T>::GetThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> asyncInfo = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->abi_GetThumbnailAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Graphics::Imaging::BitmapPropertiesView impl_IBitmapFrame<T>::BitmapProperties() const
{
	Windows::Graphics::Imaging::BitmapPropertiesView value(nullptr);
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->get_BitmapProperties(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapPixelFormat impl_IBitmapFrame<T>::BitmapPixelFormat() const
{
	Windows::Graphics::Imaging::BitmapPixelFormat value = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->get_BitmapPixelFormat(&value));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapAlphaMode impl_IBitmapFrame<T>::BitmapAlphaMode() const
{
	Windows::Graphics::Imaging::BitmapAlphaMode value = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->get_BitmapAlphaMode(&value));
	return value;
}

template <typename T> double impl_IBitmapFrame<T>::DpiX() const
{
	double value = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->get_DpiX(&value));
	return value;
}

template <typename T> double impl_IBitmapFrame<T>::DpiY() const
{
	double value = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->get_DpiY(&value));
	return value;
}

template <typename T> unsigned impl_IBitmapFrame<T>::PixelWidth() const
{
	unsigned value = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->get_PixelWidth(&value));
	return value;
}

template <typename T> unsigned impl_IBitmapFrame<T>::PixelHeight() const
{
	unsigned value = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->get_PixelHeight(&value));
	return value;
}

template <typename T> unsigned impl_IBitmapFrame<T>::OrientedPixelWidth() const
{
	unsigned value = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->get_OrientedPixelWidth(&value));
	return value;
}

template <typename T> unsigned impl_IBitmapFrame<T>::OrientedPixelHeight() const
{
	unsigned value = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->get_OrientedPixelHeight(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> impl_IBitmapFrame<T>::GetPixelDataAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> asyncInfo = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->abi_GetPixelDataAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> impl_IBitmapFrame<T>::GetPixelDataAsync(Windows::Graphics::Imaging::BitmapPixelFormat const pixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode const alphaMode, Windows::Graphics::Imaging::BitmapTransform const & transform, Windows::Graphics::Imaging::ExifOrientationMode const exifOrientationMode, Windows::Graphics::Imaging::ColorManagementMode const colorManagementMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> asyncInfo = {};
	check(static_cast<IBitmapFrame const &>(static_cast<T const &>(*this))->abi_GetPixelDataTransformedAsync(pixelFormat, alphaMode, get(transform), exifOrientationMode, colorManagementMode, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> GUID impl_IBitmapCodecInformation<T>::CodecId() const
{
	GUID value = {};
	check(static_cast<IBitmapCodecInformation const &>(static_cast<T const &>(*this))->get_CodecId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IBitmapCodecInformation<T>::FileExtensions() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IBitmapCodecInformation const &>(static_cast<T const &>(*this))->get_FileExtensions(set(value)));
	return value;
}

template <typename T> String impl_IBitmapCodecInformation<T>::FriendlyName() const
{
	String value = {};
	check(static_cast<IBitmapCodecInformation const &>(static_cast<T const &>(*this))->get_FriendlyName(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IBitmapCodecInformation<T>::MimeTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IBitmapCodecInformation const &>(static_cast<T const &>(*this))->get_MimeTypes(set(value)));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::BmpDecoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->get_BmpDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::JpegDecoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->get_JpegDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::PngDecoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->get_PngDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::TiffDecoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->get_TiffDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::GifDecoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->get_GifDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::JpegXRDecoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->get_JpegXRDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::IcoDecoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->get_IcoDecoderId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> impl_IBitmapDecoderStatics<T>::GetDecoderInformationEnumerator() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> decoderInformationEnumerator = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->abi_GetDecoderInformationEnumerator(set(decoderInformationEnumerator)));
	return decoderInformationEnumerator;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> impl_IBitmapDecoderStatics<T>::CreateAsync(Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> asyncInfo = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->abi_CreateAsync(get(stream), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> impl_IBitmapDecoderStatics<T>::CreateAsync(GUID const decoderId, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> asyncInfo = {};
	check(static_cast<IBitmapDecoderStatics const &>(static_cast<T const &>(*this))->abi_CreateWithIdAsync(decoderId, get(stream), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Graphics::Imaging::BitmapPropertiesView impl_IBitmapDecoder<T>::BitmapContainerProperties() const
{
	Windows::Graphics::Imaging::BitmapPropertiesView value(nullptr);
	check(static_cast<IBitmapDecoder const &>(static_cast<T const &>(*this))->get_BitmapContainerProperties(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapCodecInformation impl_IBitmapDecoder<T>::DecoderInformation() const
{
	Windows::Graphics::Imaging::BitmapCodecInformation value(nullptr);
	check(static_cast<IBitmapDecoder const &>(static_cast<T const &>(*this))->get_DecoderInformation(set(value)));
	return value;
}

template <typename T> unsigned impl_IBitmapDecoder<T>::FrameCount() const
{
	unsigned value = {};
	check(static_cast<IBitmapDecoder const &>(static_cast<T const &>(*this))->get_FrameCount(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> impl_IBitmapDecoder<T>::GetPreviewAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> asyncInfo = {};
	check(static_cast<IBitmapDecoder const &>(static_cast<T const &>(*this))->abi_GetPreviewAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapFrame> impl_IBitmapDecoder<T>::GetFrameAsync(unsigned const frameIndex) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapFrame> asyncInfo = {};
	check(static_cast<IBitmapDecoder const &>(static_cast<T const &>(*this))->abi_GetFrameAsync(frameIndex, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::BmpEncoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->get_BmpEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::JpegEncoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->get_JpegEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::PngEncoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->get_PngEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::TiffEncoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->get_TiffEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::GifEncoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->get_GifEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::JpegXREncoderId() const
{
	GUID value = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->get_JpegXREncoderId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> impl_IBitmapEncoderStatics<T>::GetEncoderInformationEnumerator() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> encoderInformationEnumerator = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->abi_GetEncoderInformationEnumerator(set(encoderInformationEnumerator)));
	return encoderInformationEnumerator;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> impl_IBitmapEncoderStatics<T>::CreateAsync(GUID const encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> asyncInfo = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->abi_CreateAsync(encoderId, get(stream), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> impl_IBitmapEncoderStatics<T>::CreateAsync(GUID const encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> asyncInfo = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->abi_CreateWithEncodingOptionsAsync(encoderId, get(stream), get(encodingOptions), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> impl_IBitmapEncoderStatics<T>::CreateForTranscodingAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> asyncInfo = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->abi_CreateForTranscodingAsync(get(stream), get(bitmapDecoder), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> impl_IBitmapEncoderStatics<T>::CreateForInPlacePropertyEncodingAsync(Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> asyncInfo = {};
	check(static_cast<IBitmapEncoderStatics const &>(static_cast<T const &>(*this))->abi_CreateForInPlacePropertyEncodingAsync(get(bitmapDecoder), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Graphics::Imaging::BitmapCodecInformation impl_IBitmapEncoder<T>::EncoderInformation() const
{
	Windows::Graphics::Imaging::BitmapCodecInformation value(nullptr);
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->get_EncoderInformation(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapProperties impl_IBitmapEncoder<T>::BitmapProperties() const
{
	Windows::Graphics::Imaging::BitmapProperties value(nullptr);
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->get_BitmapProperties(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapProperties impl_IBitmapEncoder<T>::BitmapContainerProperties() const
{
	Windows::Graphics::Imaging::BitmapProperties value(nullptr);
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->get_BitmapContainerProperties(set(value)));
	return value;
}

template <typename T> bool impl_IBitmapEncoder<T>::IsThumbnailGenerated() const
{
	bool value = {};
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->get_IsThumbnailGenerated(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IBitmapEncoder<T>::IsThumbnailGenerated(bool const value) const
{
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->put_IsThumbnailGenerated(value));
}

template <typename T> unsigned impl_IBitmapEncoder<T>::GeneratedThumbnailWidth() const
{
	unsigned value = {};
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->get_GeneratedThumbnailWidth(&value));
	return value;
}

template <typename T> void impl_IBitmapEncoder<T>::GeneratedThumbnailWidth(unsigned const value) const
{
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->put_GeneratedThumbnailWidth(value));
}

template <typename T> unsigned impl_IBitmapEncoder<T>::GeneratedThumbnailHeight() const
{
	unsigned value = {};
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->get_GeneratedThumbnailHeight(&value));
	return value;
}

template <typename T> void impl_IBitmapEncoder<T>::GeneratedThumbnailHeight(unsigned const value) const
{
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->put_GeneratedThumbnailHeight(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapTransform impl_IBitmapEncoder<T>::BitmapTransform() const
{
	Windows::Graphics::Imaging::BitmapTransform value(nullptr);
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->get_BitmapTransform(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IBitmapEncoder<T>::GoToNextFrameAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->abi_GoToNextFrameAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IBitmapEncoder<T>::GoToNextFrameAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->abi_GoToNextFrameWithEncodingOptionsAsync(get(encodingOptions), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IBitmapEncoder<T>::FlushAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IBitmapEncoder const &>(static_cast<T const &>(*this))->abi_FlushAsync(set(asyncInfo)));
	return asyncInfo;
}

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

template <typename T> void impl_IPrintTaskSourceRequestedHandler<T>::Invoke(Windows::Graphics::Printing::PrintTaskSourceRequestedArgs const & args) const
{
	check(static_cast<IPrintTaskSourceRequestedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(args)));
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::MediaSize(Windows::Graphics::Printing::PrintMediaSize const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_MediaSize(value));
}

template <typename T> Windows::Graphics::Printing::PrintMediaSize impl_IPrintTaskOptionsCoreProperties<T>::MediaSize() const
{
	Windows::Graphics::Printing::PrintMediaSize value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_MediaSize(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::MediaType(Windows::Graphics::Printing::PrintMediaType const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_MediaType(value));
}

template <typename T> Windows::Graphics::Printing::PrintMediaType impl_IPrintTaskOptionsCoreProperties<T>::MediaType() const
{
	Windows::Graphics::Printing::PrintMediaType value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_MediaType(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Orientation(Windows::Graphics::Printing::PrintOrientation const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_Orientation(value));
}

template <typename T> Windows::Graphics::Printing::PrintOrientation impl_IPrintTaskOptionsCoreProperties<T>::Orientation() const
{
	Windows::Graphics::Printing::PrintOrientation value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_Orientation(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::PrintQuality(Windows::Graphics::Printing::PrintQuality const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_PrintQuality(value));
}

template <typename T> Windows::Graphics::Printing::PrintQuality impl_IPrintTaskOptionsCoreProperties<T>::PrintQuality() const
{
	Windows::Graphics::Printing::PrintQuality value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_PrintQuality(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::ColorMode(Windows::Graphics::Printing::PrintColorMode const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_ColorMode(value));
}

template <typename T> Windows::Graphics::Printing::PrintColorMode impl_IPrintTaskOptionsCoreProperties<T>::ColorMode() const
{
	Windows::Graphics::Printing::PrintColorMode value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_ColorMode(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Duplex(Windows::Graphics::Printing::PrintDuplex const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_Duplex(value));
}

template <typename T> Windows::Graphics::Printing::PrintDuplex impl_IPrintTaskOptionsCoreProperties<T>::Duplex() const
{
	Windows::Graphics::Printing::PrintDuplex value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_Duplex(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Collation(Windows::Graphics::Printing::PrintCollation const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_Collation(value));
}

template <typename T> Windows::Graphics::Printing::PrintCollation impl_IPrintTaskOptionsCoreProperties<T>::Collation() const
{
	Windows::Graphics::Printing::PrintCollation value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_Collation(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Staple(Windows::Graphics::Printing::PrintStaple const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_Staple(value));
}

template <typename T> Windows::Graphics::Printing::PrintStaple impl_IPrintTaskOptionsCoreProperties<T>::Staple() const
{
	Windows::Graphics::Printing::PrintStaple value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_Staple(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::HolePunch(Windows::Graphics::Printing::PrintHolePunch const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_HolePunch(value));
}

template <typename T> Windows::Graphics::Printing::PrintHolePunch impl_IPrintTaskOptionsCoreProperties<T>::HolePunch() const
{
	Windows::Graphics::Printing::PrintHolePunch value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_HolePunch(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Binding(Windows::Graphics::Printing::PrintBinding const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_Binding(value));
}

template <typename T> Windows::Graphics::Printing::PrintBinding impl_IPrintTaskOptionsCoreProperties<T>::Binding() const
{
	Windows::Graphics::Printing::PrintBinding value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_Binding(&value));
	return value;
}

template <typename T> unsigned impl_IPrintTaskOptionsCoreProperties<T>::MinCopies() const
{
	unsigned value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_MinCopies(&value));
	return value;
}

template <typename T> unsigned impl_IPrintTaskOptionsCoreProperties<T>::MaxCopies() const
{
	unsigned value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_MaxCopies(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::NumberOfCopies(unsigned const value) const
{
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->put_NumberOfCopies(value));
}

template <typename T> unsigned impl_IPrintTaskOptionsCoreProperties<T>::NumberOfCopies() const
{
	unsigned value = {};
	check(static_cast<IPrintTaskOptionsCoreProperties const &>(static_cast<T const &>(*this))->get_NumberOfCopies(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IPrintTaskOptionsCoreUIConfiguration<T>::DisplayedOptions() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IPrintTaskOptionsCoreUIConfiguration const &>(static_cast<T const &>(*this))->get_DisplayedOptions(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintPageDescription impl_IPrintTaskOptionsCore<T>::GetPageDescription(unsigned const jobPageNumber) const
{
	Windows::Graphics::Printing::PrintPageDescription description = {};
	check(static_cast<IPrintTaskOptionsCore const &>(static_cast<T const &>(*this))->abi_GetPageDescription(jobPageNumber, &description));
	return description;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::MediaSize() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_MediaSize(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::MediaType() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_MediaType(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Orientation() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_Orientation(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::PrintQuality() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_PrintQuality(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::ColorMode() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_ColorMode(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Duplex() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_Duplex(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Collation() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_Collation(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Staple() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_Staple(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::HolePunch() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_HolePunch(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Binding() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_Binding(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Copies() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_Copies(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::NUp() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_NUp(set(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::InputBin() const
{
	String value = {};
	check(static_cast<IStandardPrintTaskOptionsStatic const &>(static_cast<T const &>(*this))->get_InputBin(set(value)));
	return value;
}

template <typename T> unsigned impl_IPrintTaskProgressingEventArgs<T>::DocumentPageCount() const
{
	unsigned value = {};
	check(static_cast<IPrintTaskProgressingEventArgs const &>(static_cast<T const &>(*this))->get_DocumentPageCount(&value));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintTaskCompletion impl_IPrintTaskCompletedEventArgs<T>::Completion() const
{
	Windows::Graphics::Printing::PrintTaskCompletion value = {};
	check(static_cast<IPrintTaskCompletedEventArgs const &>(static_cast<T const &>(*this))->get_Completion(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackagePropertySet impl_IPrintTask<T>::Properties() const
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet value(nullptr);
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::IPrintDocumentSource impl_IPrintTask<T>::Source() const
{
	Windows::Graphics::Printing::IPrintDocumentSource value = {};
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->get_Source(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintTaskOptions impl_IPrintTask<T>::Options() const
{
	Windows::Graphics::Printing::PrintTaskOptions value(nullptr);
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->get_Options(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IPrintTask<T>::Previewing(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->add_Previewing(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPrintTask<T>::Previewing(F eventHandler) const
{
	return Previewing(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable>(eventHandler));
}

template <typename T> void impl_IPrintTask<T>::Previewing(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->remove_Previewing(eventCookie));
}

template <typename T> EventRegistrationToken impl_IPrintTask<T>::Submitting(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->add_Submitting(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPrintTask<T>::Submitting(F eventHandler) const
{
	return Submitting(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable>(eventHandler));
}

template <typename T> void impl_IPrintTask<T>::Submitting(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->remove_Submitting(eventCookie));
}

template <typename T> EventRegistrationToken impl_IPrintTask<T>::Progressing(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskProgressingEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->add_Progressing(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPrintTask<T>::Progressing(F eventHandler) const
{
	return Progressing(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskProgressingEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintTask<T>::Progressing(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->remove_Progressing(eventCookie));
}

template <typename T> EventRegistrationToken impl_IPrintTask<T>::Completed(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskCompletedEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->add_Completed(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPrintTask<T>::Completed(F eventHandler) const
{
	return Completed(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskCompletedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintTask<T>::Completed(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IPrintTask const &>(static_cast<T const &>(*this))->remove_Completed(eventCookie));
}

template <typename T> void impl_IPrintTaskTargetDeviceSupport<T>::IsPrinterTargetEnabled(bool const value) const
{
	check(static_cast<IPrintTaskTargetDeviceSupport const &>(static_cast<T const &>(*this))->put_IsPrinterTargetEnabled(value));
}

template <typename T> bool impl_IPrintTaskTargetDeviceSupport<T>::IsPrinterTargetEnabled() const
{
	bool value = {};
	check(static_cast<IPrintTaskTargetDeviceSupport const &>(static_cast<T const &>(*this))->get_IsPrinterTargetEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPrintTaskTargetDeviceSupport<T>::Is3DManufacturingTargetEnabled(bool const value) const
{
	check(static_cast<IPrintTaskTargetDeviceSupport const &>(static_cast<T const &>(*this))->put_Is3DManufacturingTargetEnabled(value));
}

template <typename T> bool impl_IPrintTaskTargetDeviceSupport<T>::Is3DManufacturingTargetEnabled() const
{
	bool value = {};
	check(static_cast<IPrintTaskTargetDeviceSupport const &>(static_cast<T const &>(*this))->get_Is3DManufacturingTargetEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPrintTaskSourceRequestedDeferral<T>::Complete() const
{
	check(static_cast<IPrintTaskSourceRequestedDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::Foundation::DateTime impl_IPrintTaskSourceRequestedArgs<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IPrintTaskSourceRequestedArgs const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IPrintTaskSourceRequestedArgs<T>::SetSource(Windows::Graphics::Printing::IPrintDocumentSource const & source) const
{
	check(static_cast<IPrintTaskSourceRequestedArgs const &>(static_cast<T const &>(*this))->abi_SetSource(get(source)));
}

template <typename T> Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral impl_IPrintTaskSourceRequestedArgs<T>::GetDeferral() const
{
	Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral deferral(nullptr);
	check(static_cast<IPrintTaskSourceRequestedArgs const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> void impl_IPrintTaskRequestedDeferral<T>::Complete() const
{
	check(static_cast<IPrintTaskRequestedDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::Foundation::DateTime impl_IPrintTaskRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IPrintTaskRequest const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintTask impl_IPrintTaskRequest<T>::CreatePrintTask(String const & title, Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler const & handler) const
{
	Windows::Graphics::Printing::PrintTask task(nullptr);
	check(static_cast<IPrintTaskRequest const &>(static_cast<T const &>(*this))->abi_CreatePrintTask(get(title), get(handler), set(task)));
	return task;
}

template <typename T> template <unsigned S0> Windows::Graphics::Printing::PrintTask impl_IPrintTaskRequest<T>::CreatePrintTask(wchar_t const (&title)[S0], Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler const & handler) const
{
	Windows::Graphics::Printing::PrintTask task(nullptr);
	check(static_cast<IPrintTaskRequest const &>(static_cast<T const &>(*this))->abi_CreatePrintTask(StringReference(title), get(handler), set(task)));
	return task;
}

template <typename T> template <typename F> Windows::Graphics::Printing::PrintTask impl_IPrintTaskRequest<T>::CreatePrintTask(String const & title, F handler) const
{
	return CreatePrintTask(title, Windows::Graphics::Printing::PrintTaskSourceRequestedHandler(handler));
}

template <typename T> template <unsigned S0, typename F> Windows::Graphics::Printing::PrintTask impl_IPrintTaskRequest<T>::CreatePrintTask(wchar_t const (&title)[S0], F handler) const
{
	return CreatePrintTask(title, Windows::Graphics::Printing::PrintTaskSourceRequestedHandler(handler));
}

template <typename T> Windows::Graphics::Printing::PrintTaskRequestedDeferral impl_IPrintTaskRequest<T>::GetDeferral() const
{
	Windows::Graphics::Printing::PrintTaskRequestedDeferral deferral(nullptr);
	check(static_cast<IPrintTaskRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> Windows::Graphics::Printing::PrintTaskRequest impl_IPrintTaskRequestedEventArgs<T>::Request() const
{
	Windows::Graphics::Printing::PrintTaskRequest value(nullptr);
	check(static_cast<IPrintTaskRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintManager impl_IPrintManagerStatic<T>::GetForCurrentView() const
{
	Windows::Graphics::Printing::PrintManager printingManager(nullptr);
	check(static_cast<IPrintManagerStatic const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(printingManager)));
	return printingManager;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPrintManagerStatic<T>::ShowPrintUIAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IPrintManagerStatic const &>(static_cast<T const &>(*this))->abi_ShowPrintUIAsync(set(operation)));
	return operation;
}

template <typename T> EventRegistrationToken impl_IPrintManager<T>::PrintTaskRequested(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintManager, Windows::Graphics::Printing::PrintTaskRequestedEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IPrintManager const &>(static_cast<T const &>(*this))->add_PrintTaskRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPrintManager<T>::PrintTaskRequested(F eventHandler) const
{
	return PrintTaskRequested(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintManager, Windows::Graphics::Printing::PrintTaskRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintManager<T>::PrintTaskRequested(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IPrintManager const &>(static_cast<T const &>(*this))->remove_PrintTaskRequested(eventCookie));
}

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

template <typename T> String impl_IPrintOptionDetails<T>::OptionId() const
{
	String value = {};
	check(static_cast<IPrintOptionDetails const &>(static_cast<T const &>(*this))->get_OptionId(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintOptionType impl_IPrintOptionDetails<T>::OptionType() const
{
	Windows::Graphics::Printing::OptionDetails::PrintOptionType value = {};
	check(static_cast<IPrintOptionDetails const &>(static_cast<T const &>(*this))->get_OptionType(&value));
	return value;
}

template <typename T> void impl_IPrintOptionDetails<T>::ErrorText(String const & value) const
{
	check(static_cast<IPrintOptionDetails const &>(static_cast<T const &>(*this))->put_ErrorText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IPrintOptionDetails<T>::ErrorText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IPrintOptionDetails const &>(static_cast<T const &>(*this))->put_ErrorText(StringReference(value)));
}

template <typename T> String impl_IPrintOptionDetails<T>::ErrorText() const
{
	String value = {};
	check(static_cast<IPrintOptionDetails const &>(static_cast<T const &>(*this))->get_ErrorText(set(value)));
	return value;
}

template <typename T> void impl_IPrintOptionDetails<T>::State(Windows::Graphics::Printing::OptionDetails::PrintOptionStates const value) const
{
	check(static_cast<IPrintOptionDetails const &>(static_cast<T const &>(*this))->put_State(value));
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintOptionStates impl_IPrintOptionDetails<T>::State() const
{
	Windows::Graphics::Printing::OptionDetails::PrintOptionStates value = {};
	check(static_cast<IPrintOptionDetails const &>(static_cast<T const &>(*this))->get_State(&value));
	return value;
}

template <typename T> IInspectable impl_IPrintOptionDetails<T>::Value() const
{
	IInspectable value = {};
	check(static_cast<IPrintOptionDetails const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> bool impl_IPrintOptionDetails<T>::TrySetValue(IInspectable const & value) const
{
	bool succeeded = {};
	check(static_cast<IPrintOptionDetails const &>(static_cast<T const &>(*this))->abi_TrySetValue(get(value), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> unsigned impl_IPrintNumberOptionDetails<T>::MinValue() const
{
	unsigned value = {};
	check(static_cast<IPrintNumberOptionDetails const &>(static_cast<T const &>(*this))->get_MinValue(&value));
	return value;
}

template <typename T> unsigned impl_IPrintNumberOptionDetails<T>::MaxValue() const
{
	unsigned value = {};
	check(static_cast<IPrintNumberOptionDetails const &>(static_cast<T const &>(*this))->get_MaxValue(&value));
	return value;
}

template <typename T> unsigned impl_IPrintTextOptionDetails<T>::MaxCharacters() const
{
	unsigned value = {};
	check(static_cast<IPrintTextOptionDetails const &>(static_cast<T const &>(*this))->get_MaxCharacters(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<IInspectable> impl_IPrintItemListOptionDetails<T>::Items() const
{
	Windows::Foundation::Collections::IVectorView<IInspectable> value = {};
	check(static_cast<IPrintItemListOptionDetails const &>(static_cast<T const &>(*this))->get_Items(set(value)));
	return value;
}

template <typename T> void impl_IPrintCustomOptionDetails<T>::DisplayName(String const & value) const
{
	check(static_cast<IPrintCustomOptionDetails const &>(static_cast<T const &>(*this))->put_DisplayName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IPrintCustomOptionDetails<T>::DisplayName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IPrintCustomOptionDetails const &>(static_cast<T const &>(*this))->put_DisplayName(StringReference(value)));
}

template <typename T> String impl_IPrintCustomOptionDetails<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IPrintCustomOptionDetails const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> void impl_IPrintCustomTextOptionDetails<T>::MaxCharacters(unsigned const value) const
{
	check(static_cast<IPrintCustomTextOptionDetails const &>(static_cast<T const &>(*this))->put_MaxCharacters(value));
}

template <typename T> unsigned impl_IPrintCustomTextOptionDetails<T>::MaxCharacters() const
{
	unsigned value = {};
	check(static_cast<IPrintCustomTextOptionDetails const &>(static_cast<T const &>(*this))->get_MaxCharacters(&value));
	return value;
}

template <typename T> String impl_IPrintCustomItemDetails<T>::ItemId() const
{
	String value = {};
	check(static_cast<IPrintCustomItemDetails const &>(static_cast<T const &>(*this))->get_ItemId(set(value)));
	return value;
}

template <typename T> void impl_IPrintCustomItemDetails<T>::ItemDisplayName(String const & value) const
{
	check(static_cast<IPrintCustomItemDetails const &>(static_cast<T const &>(*this))->put_ItemDisplayName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IPrintCustomItemDetails<T>::ItemDisplayName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IPrintCustomItemDetails const &>(static_cast<T const &>(*this))->put_ItemDisplayName(StringReference(value)));
}

template <typename T> String impl_IPrintCustomItemDetails<T>::ItemDisplayName() const
{
	String value = {};
	check(static_cast<IPrintCustomItemDetails const &>(static_cast<T const &>(*this))->get_ItemDisplayName(set(value)));
	return value;
}

template <typename T> void impl_IPrintCustomItemListOptionDetails<T>::AddItem(String const & itemId, String const & displayName) const
{
	check(static_cast<IPrintCustomItemListOptionDetails const &>(static_cast<T const &>(*this))->abi_AddItem(get(itemId), get(displayName)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IPrintCustomItemListOptionDetails<T>::AddItem(wchar_t const (&itemId)[S0], wchar_t const (&displayName)[S1]) const
{
	check(static_cast<IPrintCustomItemListOptionDetails const &>(static_cast<T const &>(*this))->abi_AddItem(StringReference(itemId), StringReference(displayName)));
}

template <typename T> IInspectable impl_IPrintTaskOptionChangedEventArgs<T>::OptionId() const
{
	IInspectable value = {};
	check(static_cast<IPrintTaskOptionChangedEventArgs const &>(static_cast<T const &>(*this))->get_OptionId(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails> impl_IPrintTaskOptionDetails<T>::Options() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails> value = {};
	check(static_cast<IPrintTaskOptionDetails const &>(static_cast<T const &>(*this))->get_Options(set(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails impl_IPrintTaskOptionDetails<T>::CreateItemListOption(String const & optionId, String const & displayName) const
{
	Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails itemListOption(nullptr);
	check(static_cast<IPrintTaskOptionDetails const &>(static_cast<T const &>(*this))->abi_CreateItemListOption(get(optionId), get(displayName), set(itemListOption)));
	return itemListOption;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails impl_IPrintTaskOptionDetails<T>::CreateItemListOption(wchar_t const (&optionId)[S0], wchar_t const (&displayName)[S1]) const
{
	Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails itemListOption(nullptr);
	check(static_cast<IPrintTaskOptionDetails const &>(static_cast<T const &>(*this))->abi_CreateItemListOption(StringReference(optionId), StringReference(displayName), set(itemListOption)));
	return itemListOption;
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails impl_IPrintTaskOptionDetails<T>::CreateTextOption(String const & optionId, String const & displayName) const
{
	Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails textOption(nullptr);
	check(static_cast<IPrintTaskOptionDetails const &>(static_cast<T const &>(*this))->abi_CreateTextOption(get(optionId), get(displayName), set(textOption)));
	return textOption;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails impl_IPrintTaskOptionDetails<T>::CreateTextOption(wchar_t const (&optionId)[S0], wchar_t const (&displayName)[S1]) const
{
	Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails textOption(nullptr);
	check(static_cast<IPrintTaskOptionDetails const &>(static_cast<T const &>(*this))->abi_CreateTextOption(StringReference(optionId), StringReference(displayName), set(textOption)));
	return textOption;
}

template <typename T> EventRegistrationToken impl_IPrintTaskOptionDetails<T>::OptionChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IPrintTaskOptionDetails const &>(static_cast<T const &>(*this))->add_OptionChanged(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPrintTaskOptionDetails<T>::OptionChanged(F eventHandler) const
{
	return OptionChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintTaskOptionDetails<T>::OptionChanged(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IPrintTaskOptionDetails const &>(static_cast<T const &>(*this))->remove_OptionChanged(eventCookie));
}

template <typename T> EventRegistrationToken impl_IPrintTaskOptionDetails<T>::BeginValidation(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, IInspectable> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IPrintTaskOptionDetails const &>(static_cast<T const &>(*this))->add_BeginValidation(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPrintTaskOptionDetails<T>::BeginValidation(F eventHandler) const
{
	return BeginValidation(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, IInspectable>(eventHandler));
}

template <typename T> void impl_IPrintTaskOptionDetails<T>::BeginValidation(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IPrintTaskOptionDetails const &>(static_cast<T const &>(*this))->remove_BeginValidation(eventCookie));
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails impl_IPrintTaskOptionDetailsStatic<T>::GetFromPrintTaskOptions(Windows::Graphics::Printing::PrintTaskOptions const & printTaskOptions) const
{
	Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails printTaskOptionDetails(nullptr);
	check(static_cast<IPrintTaskOptionDetailsStatic const &>(static_cast<T const &>(*this))->abi_GetFromPrintTaskOptions(get(printTaskOptions), set(printTaskOptionDetails)));
	return printTaskOptionDetails;
}

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

template <typename T> Windows::Storage::ApplicationData impl_IApplicationDataManagerStatics<T>::CreateForPackageFamily(String const & packageFamilyName) const
{
	Windows::Storage::ApplicationData applicationData(nullptr);
	check(static_cast<IApplicationDataManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateForPackageFamily(get(packageFamilyName), set(applicationData)));
	return applicationData;
}

template <typename T> template <unsigned S0> Windows::Storage::ApplicationData impl_IApplicationDataManagerStatics<T>::CreateForPackageFamily(wchar_t const (&packageFamilyName)[S0]) const
{
	Windows::Storage::ApplicationData applicationData(nullptr);
	check(static_cast<IApplicationDataManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateForPackageFamily(StringReference(packageFamilyName), set(applicationData)));
	return applicationData;
}

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

template <typename T> String impl_IDeploymentResult<T>::ErrorText() const
{
	String value = {};
	check(static_cast<IDeploymentResult const &>(static_cast<T const &>(*this))->get_ErrorText(set(value)));
	return value;
}

template <typename T> GUID impl_IDeploymentResult<T>::ActivityId() const
{
	GUID value = {};
	check(static_cast<IDeploymentResult const &>(static_cast<T const &>(*this))->get_ActivityId(&value));
	return value;
}

template <typename T> HRESULT impl_IDeploymentResult<T>::ExtendedErrorCode() const
{
	HRESULT value = {};
	check(static_cast<IDeploymentResult const &>(static_cast<T const &>(*this))->get_ExtendedErrorCode(&value));
	return value;
}

template <typename T> String impl_IPackageUserInformation<T>::UserSecurityId() const
{
	String value = {};
	check(static_cast<IPackageUserInformation const &>(static_cast<T const &>(*this))->get_UserSecurityId(set(value)));
	return value;
}

template <typename T> Windows::Management::Deployment::PackageInstallState impl_IPackageUserInformation<T>::InstallState() const
{
	Windows::Management::Deployment::PackageInstallState value = {};
	check(static_cast<IPackageUserInformation const &>(static_cast<T const &>(*this))->get_InstallState(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::AddPackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_AddPackageAsync(get(packageUri), get(dependencyPackageUris), deploymentOptions, set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::UpdatePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_UpdatePackageAsync(get(packageUri), get(dependencyPackageUris), deploymentOptions, set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::RemovePackageAsync(String const & packageFullName) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_RemovePackageAsync(get(packageFullName), set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::RemovePackageAsync(wchar_t const (&packageFullName)[S0]) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_RemovePackageAsync(StringReference(packageFullName), set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::StagePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_StagePackageAsync(get(packageUri), get(dependencyPackageUris), set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::RegisterPackageAsync(Windows::Foundation::Uri const & manifestUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_RegisterPackageAsync(get(manifestUri), get(dependencyPackageUris), deploymentOptions, set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackages() const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackages(set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackagesForUser(String const & userSecurityId) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityId(get(userSecurityId), set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackagesForUser(wchar_t const (&userSecurityId)[S0]) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityId(StringReference(userSecurityId), set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackages(String const & packageName, String const & packagePublisher) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByNamePublisher(get(packageName), get(packagePublisher), set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackages(wchar_t const (&packageName)[S0], wchar_t const (&packagePublisher)[S1]) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByNamePublisher(StringReference(packageName), StringReference(packagePublisher), set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackagesForUser(String const & userSecurityId, String const & packageName, String const & packagePublisher) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdNamePublisher(get(userSecurityId), get(packageName), get(packagePublisher), set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackagesForUser(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageName)[S1], wchar_t const (&packagePublisher)[S2]) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdNamePublisher(StringReference(userSecurityId), StringReference(packageName), StringReference(packagePublisher), set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> impl_IPackageManager<T>::FindUsers(String const & packageFullName) const
{
	Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> users = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindUsers(get(packageFullName), set(users)));
	return users;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> impl_IPackageManager<T>::FindUsers(wchar_t const (&packageFullName)[S0]) const
{
	Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> users = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindUsers(StringReference(packageFullName), set(users)));
	return users;
}

template <typename T> void impl_IPackageManager<T>::SetPackageState(String const & packageFullName, Windows::Management::Deployment::PackageState const packageState) const
{
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_SetPackageState(get(packageFullName), packageState));
}

template <typename T> template <unsigned S0> void impl_IPackageManager<T>::SetPackageState(wchar_t const (&packageFullName)[S0], Windows::Management::Deployment::PackageState const packageState) const
{
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_SetPackageState(StringReference(packageFullName), packageState));
}

template <typename T> Windows::ApplicationModel::Package impl_IPackageManager<T>::FindPackage(String const & packageFullName) const
{
	Windows::ApplicationModel::Package packageInformation(nullptr);
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackageByPackageFullName(get(packageFullName), set(packageInformation)));
	return packageInformation;
}

template <typename T> template <unsigned S0> Windows::ApplicationModel::Package impl_IPackageManager<T>::FindPackage(wchar_t const (&packageFullName)[S0]) const
{
	Windows::ApplicationModel::Package packageInformation(nullptr);
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackageByPackageFullName(StringReference(packageFullName), set(packageInformation)));
	return packageInformation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::CleanupPackageForUserAsync(String const & packageName, String const & userSecurityId) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_CleanupPackageForUserAsync(get(packageName), get(userSecurityId), set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::CleanupPackageForUserAsync(wchar_t const (&packageName)[S0], wchar_t const (&userSecurityId)[S1]) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_CleanupPackageForUserAsync(StringReference(packageName), StringReference(userSecurityId), set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackages(String const & packageFamilyName) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByPackageFamilyName(get(packageFamilyName), set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackages(wchar_t const (&packageFamilyName)[S0]) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByPackageFamilyName(StringReference(packageFamilyName), set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackagesForUser(String const & userSecurityId, String const & packageFamilyName) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdPackageFamilyName(get(userSecurityId), get(packageFamilyName), set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackagesForUser(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageFamilyName)[S1]) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdPackageFamilyName(StringReference(userSecurityId), StringReference(packageFamilyName), set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::ApplicationModel::Package impl_IPackageManager<T>::FindPackageForUser(String const & userSecurityId, String const & packageFullName) const
{
	Windows::ApplicationModel::Package packageInformation(nullptr);
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackageByUserSecurityIdPackageFullName(get(userSecurityId), get(packageFullName), set(packageInformation)));
	return packageInformation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::ApplicationModel::Package impl_IPackageManager<T>::FindPackageForUser(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageFullName)[S1]) const
{
	Windows::ApplicationModel::Package packageInformation(nullptr);
	check(static_cast<IPackageManager const &>(static_cast<T const &>(*this))->abi_FindPackageByUserSecurityIdPackageFullName(StringReference(userSecurityId), StringReference(packageFullName), set(packageInformation)));
	return packageInformation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::RemovePackageAsync(String const & packageFullName, Windows::Management::Deployment::RemovalOptions const removalOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_RemovePackageWithOptionsAsync(get(packageFullName), removalOptions, set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::RemovePackageAsync(wchar_t const (&packageFullName)[S0], Windows::Management::Deployment::RemovalOptions const removalOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_RemovePackageWithOptionsAsync(StringReference(packageFullName), removalOptions, set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::StagePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_StagePackageWithOptionsAsync(get(packageUri), get(dependencyPackageUris), deploymentOptions, set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::RegisterPackageByFullNameAsync(String const & mainPackageFullName, Windows::Foundation::Collections::IIterable<String> const & dependencyPackageFullNames, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_RegisterPackageByFullNameAsync(get(mainPackageFullName), get(dependencyPackageFullNames), deploymentOptions, set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::RegisterPackageByFullNameAsync(wchar_t const (&mainPackageFullName)[S0], Windows::Foundation::Collections::IIterable<String> const & dependencyPackageFullNames, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_RegisterPackageByFullNameAsync(StringReference(mainPackageFullName), get(dependencyPackageFullNames), deploymentOptions, set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesWithPackageTypes(Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesWithPackageTypes(packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesForUserWithPackageTypes(String const & userSecurityId, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdWithPackageTypes(get(userSecurityId), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesForUserWithPackageTypes(wchar_t const (&userSecurityId)[S0], Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdWithPackageTypes(StringReference(userSecurityId), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesWithPackageTypes(String const & packageName, String const & packagePublisher, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByNamePublisherWithPackageTypes(get(packageName), get(packagePublisher), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesWithPackageTypes(wchar_t const (&packageName)[S0], wchar_t const (&packagePublisher)[S1], Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByNamePublisherWithPackageTypes(StringReference(packageName), StringReference(packagePublisher), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesForUserWithPackageTypes(String const & userSecurityId, String const & packageName, String const & packagePublisher, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(get(userSecurityId), get(packageName), get(packagePublisher), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesForUserWithPackageTypes(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageName)[S1], wchar_t const (&packagePublisher)[S2], Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(StringReference(userSecurityId), StringReference(packageName), StringReference(packagePublisher), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesWithPackageTypes(String const & packageFamilyName, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByPackageFamilyNameWithPackageTypes(get(packageFamilyName), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesWithPackageTypes(wchar_t const (&packageFamilyName)[S0], Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByPackageFamilyNameWithPackageTypes(StringReference(packageFamilyName), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesForUserWithPackageTypes(String const & userSecurityId, String const & packageFamilyName, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes(get(userSecurityId), get(packageFamilyName), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesForUserWithPackageTypes(wchar_t const (&userSecurityId)[S0], wchar_t const (&packageFamilyName)[S1], Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes(StringReference(userSecurityId), StringReference(packageFamilyName), packageTypes, set(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::StageUserDataAsync(String const & packageFullName) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_StageUserDataAsync(get(packageFullName), set(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::StageUserDataAsync(wchar_t const (&packageFullName)[S0]) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, Modern::Windows::Management::Deployment::DeploymentProgress> deploymentOperation = {};
	check(static_cast<IPackageManager2 const &>(static_cast<T const &>(*this))->abi_StageUserDataAsync(StringReference(packageFullName), set(deploymentOperation)));
	return deploymentOperation;
}

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

template <typename T> bool impl_IWorkplaceSettingsStatics<T>::IsMicrosoftAccountOptional() const
{
	bool value = {};
	check(static_cast<IWorkplaceSettingsStatics const &>(static_cast<T const &>(*this))->get_IsMicrosoftAccountOptional(BoolProxy(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Media {

template <typename T> Windows::Foundation::TimeSpan impl_IMediaMarker<T>::Time() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IMediaMarker const &>(static_cast<T const &>(*this))->get_Time(&value));
	return value;
}

template <typename T> String impl_IMediaMarker<T>::MediaMarkerType() const
{
	String value = {};
	check(static_cast<IMediaMarker const &>(static_cast<T const &>(*this))->get_MediaMarkerType(set(value)));
	return value;
}

template <typename T> String impl_IMediaMarker<T>::Text() const
{
	String value = {};
	check(static_cast<IMediaMarker const &>(static_cast<T const &>(*this))->get_Text(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> impl_IMediaMarkers<T>::Markers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> value = {};
	check(static_cast<IMediaMarkers const &>(static_cast<T const &>(*this))->get_Markers(set(value)));
	return value;
}

template <typename T> String impl_IMediaMarkerTypesStatics<T>::Bookmark() const
{
	String value = {};
	check(static_cast<IMediaMarkerTypesStatics const &>(static_cast<T const &>(*this))->get_Bookmark(set(value)));
	return value;
}

template <typename T> String impl_IMusicDisplayProperties<T>::Title() const
{
	String value = {};
	check(static_cast<IMusicDisplayProperties const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IMusicDisplayProperties<T>::Title(String const & value) const
{
	check(static_cast<IMusicDisplayProperties const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMusicDisplayProperties<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMusicDisplayProperties const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> String impl_IMusicDisplayProperties<T>::AlbumArtist() const
{
	String value = {};
	check(static_cast<IMusicDisplayProperties const &>(static_cast<T const &>(*this))->get_AlbumArtist(set(value)));
	return value;
}

template <typename T> void impl_IMusicDisplayProperties<T>::AlbumArtist(String const & value) const
{
	check(static_cast<IMusicDisplayProperties const &>(static_cast<T const &>(*this))->put_AlbumArtist(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMusicDisplayProperties<T>::AlbumArtist(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMusicDisplayProperties const &>(static_cast<T const &>(*this))->put_AlbumArtist(StringReference(value)));
}

template <typename T> String impl_IMusicDisplayProperties<T>::Artist() const
{
	String value = {};
	check(static_cast<IMusicDisplayProperties const &>(static_cast<T const &>(*this))->get_Artist(set(value)));
	return value;
}

template <typename T> void impl_IMusicDisplayProperties<T>::Artist(String const & value) const
{
	check(static_cast<IMusicDisplayProperties const &>(static_cast<T const &>(*this))->put_Artist(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMusicDisplayProperties<T>::Artist(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMusicDisplayProperties const &>(static_cast<T const &>(*this))->put_Artist(StringReference(value)));
}

template <typename T> String impl_IVideoDisplayProperties<T>::Title() const
{
	String value = {};
	check(static_cast<IVideoDisplayProperties const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IVideoDisplayProperties<T>::Title(String const & value) const
{
	check(static_cast<IVideoDisplayProperties const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IVideoDisplayProperties<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IVideoDisplayProperties const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> String impl_IVideoDisplayProperties<T>::Subtitle() const
{
	String value = {};
	check(static_cast<IVideoDisplayProperties const &>(static_cast<T const &>(*this))->get_Subtitle(set(value)));
	return value;
}

template <typename T> void impl_IVideoDisplayProperties<T>::Subtitle(String const & value) const
{
	check(static_cast<IVideoDisplayProperties const &>(static_cast<T const &>(*this))->put_Subtitle(get(value)));
}

template <typename T> template <unsigned S0> void impl_IVideoDisplayProperties<T>::Subtitle(wchar_t const (&value)[S0]) const
{
	check(static_cast<IVideoDisplayProperties const &>(static_cast<T const &>(*this))->put_Subtitle(StringReference(value)));
}

template <typename T> String impl_IImageDisplayProperties<T>::Title() const
{
	String value = {};
	check(static_cast<IImageDisplayProperties const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IImageDisplayProperties<T>::Title(String const & value) const
{
	check(static_cast<IImageDisplayProperties const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IImageDisplayProperties<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IImageDisplayProperties const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> String impl_IImageDisplayProperties<T>::Subtitle() const
{
	String value = {};
	check(static_cast<IImageDisplayProperties const &>(static_cast<T const &>(*this))->get_Subtitle(set(value)));
	return value;
}

template <typename T> void impl_IImageDisplayProperties<T>::Subtitle(String const & value) const
{
	check(static_cast<IImageDisplayProperties const &>(static_cast<T const &>(*this))->put_Subtitle(get(value)));
}

template <typename T> template <unsigned S0> void impl_IImageDisplayProperties<T>::Subtitle(wchar_t const (&value)[S0]) const
{
	check(static_cast<IImageDisplayProperties const &>(static_cast<T const &>(*this))->put_Subtitle(StringReference(value)));
}

template <typename T> Windows::Media::MediaPlaybackType impl_ISystemMediaTransportControlsDisplayUpdater<T>::Type() const
{
	Windows::Media::MediaPlaybackType value = {};
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::Type(Windows::Media::MediaPlaybackType const value) const
{
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->put_Type(value));
}

template <typename T> String impl_ISystemMediaTransportControlsDisplayUpdater<T>::AppMediaId() const
{
	String value = {};
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->get_AppMediaId(set(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::AppMediaId(String const & value) const
{
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->put_AppMediaId(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::AppMediaId(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->put_AppMediaId(StringReference(value)));
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_ISystemMediaTransportControlsDisplayUpdater<T>::Thumbnail() const
{
	Windows::Storage::Streams::RandomAccessStreamReference value(nullptr);
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const
{
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->put_Thumbnail(get(value)));
}

template <typename T> Windows::Media::MusicDisplayProperties impl_ISystemMediaTransportControlsDisplayUpdater<T>::MusicProperties() const
{
	Windows::Media::MusicDisplayProperties value(nullptr);
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->get_MusicProperties(set(value)));
	return value;
}

template <typename T> Windows::Media::VideoDisplayProperties impl_ISystemMediaTransportControlsDisplayUpdater<T>::VideoProperties() const
{
	Windows::Media::VideoDisplayProperties value(nullptr);
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->get_VideoProperties(set(value)));
	return value;
}

template <typename T> Windows::Media::ImageDisplayProperties impl_ISystemMediaTransportControlsDisplayUpdater<T>::ImageProperties() const
{
	Windows::Media::ImageDisplayProperties value(nullptr);
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->get_ImageProperties(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISystemMediaTransportControlsDisplayUpdater<T>::CopyFromFileAsync(Windows::Media::MediaPlaybackType const type, Windows::Storage::StorageFile const & source) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->abi_CopyFromFileAsync(type, get(source), set(operation)));
	return operation;
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::ClearAll() const
{
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->abi_ClearAll());
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::Update() const
{
	check(static_cast<ISystemMediaTransportControlsDisplayUpdater const &>(static_cast<T const &>(*this))->abi_Update());
}

template <typename T> Windows::Media::SystemMediaTransportControlsButton impl_ISystemMediaTransportControlsButtonPressedEventArgs<T>::Button() const
{
	Windows::Media::SystemMediaTransportControlsButton value = {};
	check(static_cast<ISystemMediaTransportControlsButtonPressedEventArgs const &>(static_cast<T const &>(*this))->get_Button(&value));
	return value;
}

template <typename T> Windows::Media::SystemMediaTransportControlsProperty impl_ISystemMediaTransportControlsPropertyChangedEventArgs<T>::Property() const
{
	Windows::Media::SystemMediaTransportControlsProperty value = {};
	check(static_cast<ISystemMediaTransportControlsPropertyChangedEventArgs const &>(static_cast<T const &>(*this))->get_Property(&value));
	return value;
}

template <typename T> Windows::Media::MediaPlaybackStatus impl_ISystemMediaTransportControls<T>::PlaybackStatus() const
{
	Windows::Media::MediaPlaybackStatus value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_PlaybackStatus(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::PlaybackStatus(Windows::Media::MediaPlaybackStatus const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_PlaybackStatus(value));
}

template <typename T> Windows::Media::SystemMediaTransportControlsDisplayUpdater impl_ISystemMediaTransportControls<T>::DisplayUpdater() const
{
	Windows::Media::SystemMediaTransportControlsDisplayUpdater value(nullptr);
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_DisplayUpdater(set(value)));
	return value;
}

template <typename T> Windows::Media::SoundLevel impl_ISystemMediaTransportControls<T>::SoundLevel() const
{
	Windows::Media::SoundLevel value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_SoundLevel(&value));
	return value;
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsPlayEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsPlayEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsPlayEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsPlayEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsStopEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsStopEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsStopEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsStopEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsPauseEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsPauseEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsPauseEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsPauseEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsRecordEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsRecordEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsRecordEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsRecordEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsFastForwardEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsFastForwardEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsFastForwardEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsFastForwardEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsRewindEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsRewindEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsRewindEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsRewindEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsPreviousEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsPreviousEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsPreviousEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsPreviousEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsNextEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsNextEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsNextEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsNextEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsChannelUpEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsChannelUpEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsChannelUpEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsChannelUpEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsChannelDownEnabled() const
{
	bool value = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->get_IsChannelDownEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsChannelDownEnabled(bool const value) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->put_IsChannelDownEnabled(value));
}

template <typename T> EventRegistrationToken impl_ISystemMediaTransportControls<T>::ButtonPressed(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->add_ButtonPressed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISystemMediaTransportControls<T>::ButtonPressed(F handler) const
{
	return ButtonPressed(Windows::Foundation::TypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>(handler));
}

template <typename T> void impl_ISystemMediaTransportControls<T>::ButtonPressed(EventRegistrationToken const token) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->remove_ButtonPressed(token));
}

template <typename T> EventRegistrationToken impl_ISystemMediaTransportControls<T>::PropertyChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->add_PropertyChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISystemMediaTransportControls<T>::PropertyChanged(F handler) const
{
	return PropertyChanged(Windows::Foundation::TypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>(handler));
}

template <typename T> void impl_ISystemMediaTransportControls<T>::PropertyChanged(EventRegistrationToken const token) const
{
	check(static_cast<ISystemMediaTransportControls const &>(static_cast<T const &>(*this))->remove_PropertyChanged(token));
}

template <typename T> Windows::Media::SystemMediaTransportControls impl_ISystemMediaTransportControlsStatics<T>::GetForCurrentView() const
{
	Windows::Media::SystemMediaTransportControls mediaControl(nullptr);
	check(static_cast<ISystemMediaTransportControlsStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(mediaControl)));
	return mediaControl;
}

template <typename T> void impl_IMediaExtension<T>::SetProperties(Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtension const &>(static_cast<T const &>(*this))->abi_SetProperties(get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterSchemeHandler(String const & activatableClassId, String const & scheme) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterSchemeHandler(get(activatableClassId), get(scheme)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IMediaExtensionManager<T>::RegisterSchemeHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&scheme)[S1]) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterSchemeHandler(StringReference(activatableClassId), StringReference(scheme)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterSchemeHandler(String const & activatableClassId, String const & scheme, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterSchemeHandlerWithSettings(get(activatableClassId), get(scheme), get(configuration)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IMediaExtensionManager<T>::RegisterSchemeHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&scheme)[S1], Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterSchemeHandlerWithSettings(StringReference(activatableClassId), StringReference(scheme), get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterByteStreamHandler(String const & activatableClassId, String const & fileExtension, String const & mimeType) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterByteStreamHandler(get(activatableClassId), get(fileExtension), get(mimeType)));
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> void impl_IMediaExtensionManager<T>::RegisterByteStreamHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&fileExtension)[S1], wchar_t const (&mimeType)[S2]) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterByteStreamHandler(StringReference(activatableClassId), StringReference(fileExtension), StringReference(mimeType)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterByteStreamHandler(String const & activatableClassId, String const & fileExtension, String const & mimeType, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterByteStreamHandlerWithSettings(get(activatableClassId), get(fileExtension), get(mimeType), get(configuration)));
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> void impl_IMediaExtensionManager<T>::RegisterByteStreamHandler(wchar_t const (&activatableClassId)[S0], wchar_t const (&fileExtension)[S1], wchar_t const (&mimeType)[S2], Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterByteStreamHandlerWithSettings(StringReference(activatableClassId), StringReference(fileExtension), StringReference(mimeType), get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterAudioDecoder(String const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterAudioDecoder(get(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> template <unsigned S0> void impl_IMediaExtensionManager<T>::RegisterAudioDecoder(wchar_t const (&activatableClassId)[S0], GUID const inputSubtype, GUID const outputSubtype) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterAudioDecoder(StringReference(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterAudioDecoder(String const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterAudioDecoderWithSettings(get(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> template <unsigned S0> void impl_IMediaExtensionManager<T>::RegisterAudioDecoder(wchar_t const (&activatableClassId)[S0], GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterAudioDecoderWithSettings(StringReference(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterAudioEncoder(String const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterAudioEncoder(get(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> template <unsigned S0> void impl_IMediaExtensionManager<T>::RegisterAudioEncoder(wchar_t const (&activatableClassId)[S0], GUID const inputSubtype, GUID const outputSubtype) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterAudioEncoder(StringReference(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterAudioEncoder(String const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterAudioEncoderWithSettings(get(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> template <unsigned S0> void impl_IMediaExtensionManager<T>::RegisterAudioEncoder(wchar_t const (&activatableClassId)[S0], GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterAudioEncoderWithSettings(StringReference(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterVideoDecoder(String const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterVideoDecoder(get(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> template <unsigned S0> void impl_IMediaExtensionManager<T>::RegisterVideoDecoder(wchar_t const (&activatableClassId)[S0], GUID const inputSubtype, GUID const outputSubtype) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterVideoDecoder(StringReference(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterVideoDecoder(String const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterVideoDecoderWithSettings(get(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> template <unsigned S0> void impl_IMediaExtensionManager<T>::RegisterVideoDecoder(wchar_t const (&activatableClassId)[S0], GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterVideoDecoderWithSettings(StringReference(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterVideoEncoder(String const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterVideoEncoder(get(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> template <unsigned S0> void impl_IMediaExtensionManager<T>::RegisterVideoEncoder(wchar_t const (&activatableClassId)[S0], GUID const inputSubtype, GUID const outputSubtype) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterVideoEncoder(StringReference(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterVideoEncoder(String const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterVideoEncoderWithSettings(get(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> template <unsigned S0> void impl_IMediaExtensionManager<T>::RegisterVideoEncoder(wchar_t const (&activatableClassId)[S0], GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaExtensionManager const &>(static_cast<T const &>(*this))->abi_RegisterVideoEncoderWithSettings(StringReference(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> String impl_IVideoEffectsStatics<T>::VideoStabilization() const
{
	String value = {};
	check(static_cast<IVideoEffectsStatics const &>(static_cast<T const &>(*this))->get_VideoStabilization(set(value)));
	return value;
}

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

template <typename T> void impl_IMediaCaptureFailedEventHandler<T>::Invoke(Windows::Media::Capture::MediaCapture const & sender, Windows::Media::Capture::MediaCaptureFailedEventArgs const & errorEventArgs) const
{
	check(static_cast<IMediaCaptureFailedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(errorEventArgs)));
}

template <typename T> void impl_IRecordLimitationExceededEventHandler<T>::Invoke(Windows::Media::Capture::MediaCapture const & sender) const
{
	check(static_cast<IRecordLimitationExceededEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender)));
}

template <typename T> Windows::Media::Capture::CameraCaptureUIPhotoFormat impl_ICameraCaptureUIPhotoCaptureSettings<T>::Format() const
{
	Windows::Media::Capture::CameraCaptureUIPhotoFormat value = {};
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->get_Format(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::Format(Windows::Media::Capture::CameraCaptureUIPhotoFormat const value) const
{
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->put_Format(value));
}

template <typename T> Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution impl_ICameraCaptureUIPhotoCaptureSettings<T>::MaxResolution() const
{
	Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution value = {};
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->get_MaxResolution(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::MaxResolution(Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution const value) const
{
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->put_MaxResolution(value));
}

template <typename T> Windows::Foundation::Size impl_ICameraCaptureUIPhotoCaptureSettings<T>::CroppedSizeInPixels() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->get_CroppedSizeInPixels(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::CroppedSizeInPixels(Windows::Foundation::Size const & value) const
{
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->put_CroppedSizeInPixels(value));
}

template <typename T> Windows::Foundation::Size impl_ICameraCaptureUIPhotoCaptureSettings<T>::CroppedAspectRatio() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->get_CroppedAspectRatio(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::CroppedAspectRatio(Windows::Foundation::Size const & value) const
{
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->put_CroppedAspectRatio(value));
}

template <typename T> bool impl_ICameraCaptureUIPhotoCaptureSettings<T>::AllowCropping() const
{
	bool value = {};
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->get_AllowCropping(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::AllowCropping(bool const value) const
{
	check(static_cast<ICameraCaptureUIPhotoCaptureSettings const &>(static_cast<T const &>(*this))->put_AllowCropping(value));
}

template <typename T> Windows::Media::Capture::CameraCaptureUIVideoFormat impl_ICameraCaptureUIVideoCaptureSettings<T>::Format() const
{
	Windows::Media::Capture::CameraCaptureUIVideoFormat value = {};
	check(static_cast<ICameraCaptureUIVideoCaptureSettings const &>(static_cast<T const &>(*this))->get_Format(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIVideoCaptureSettings<T>::Format(Windows::Media::Capture::CameraCaptureUIVideoFormat const value) const
{
	check(static_cast<ICameraCaptureUIVideoCaptureSettings const &>(static_cast<T const &>(*this))->put_Format(value));
}

template <typename T> Windows::Media::Capture::CameraCaptureUIMaxVideoResolution impl_ICameraCaptureUIVideoCaptureSettings<T>::MaxResolution() const
{
	Windows::Media::Capture::CameraCaptureUIMaxVideoResolution value = {};
	check(static_cast<ICameraCaptureUIVideoCaptureSettings const &>(static_cast<T const &>(*this))->get_MaxResolution(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIVideoCaptureSettings<T>::MaxResolution(Windows::Media::Capture::CameraCaptureUIMaxVideoResolution const value) const
{
	check(static_cast<ICameraCaptureUIVideoCaptureSettings const &>(static_cast<T const &>(*this))->put_MaxResolution(value));
}

template <typename T> float impl_ICameraCaptureUIVideoCaptureSettings<T>::MaxDurationInSeconds() const
{
	float value = {};
	check(static_cast<ICameraCaptureUIVideoCaptureSettings const &>(static_cast<T const &>(*this))->get_MaxDurationInSeconds(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIVideoCaptureSettings<T>::MaxDurationInSeconds(float const value) const
{
	check(static_cast<ICameraCaptureUIVideoCaptureSettings const &>(static_cast<T const &>(*this))->put_MaxDurationInSeconds(value));
}

template <typename T> bool impl_ICameraCaptureUIVideoCaptureSettings<T>::AllowTrimming() const
{
	bool value = {};
	check(static_cast<ICameraCaptureUIVideoCaptureSettings const &>(static_cast<T const &>(*this))->get_AllowTrimming(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICameraCaptureUIVideoCaptureSettings<T>::AllowTrimming(bool const value) const
{
	check(static_cast<ICameraCaptureUIVideoCaptureSettings const &>(static_cast<T const &>(*this))->put_AllowTrimming(value));
}

template <typename T> Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings impl_ICameraCaptureUI<T>::PhotoSettings() const
{
	Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings value(nullptr);
	check(static_cast<ICameraCaptureUI const &>(static_cast<T const &>(*this))->get_PhotoSettings(set(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings impl_ICameraCaptureUI<T>::VideoSettings() const
{
	Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings value(nullptr);
	check(static_cast<ICameraCaptureUI const &>(static_cast<T const &>(*this))->get_VideoSettings(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_ICameraCaptureUI<T>::CaptureFileAsync(Windows::Media::Capture::CameraCaptureUIMode const mode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> asyncInfo = {};
	check(static_cast<ICameraCaptureUI const &>(static_cast<T const &>(*this))->abi_CaptureFileAsync(mode, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_ICameraOptionsUIStatics<T>::Show(Windows::Media::Capture::MediaCapture const & mediaCapture) const
{
	check(static_cast<ICameraOptionsUIStatics const &>(static_cast<T const &>(*this))->abi_Show(get(mediaCapture)));
}

template <typename T> String impl_IMediaCaptureFailedEventArgs<T>::Message() const
{
	String value = {};
	check(static_cast<IMediaCaptureFailedEventArgs const &>(static_cast<T const &>(*this))->get_Message(set(value)));
	return value;
}

template <typename T> unsigned impl_IMediaCaptureFailedEventArgs<T>::Code() const
{
	unsigned value = {};
	check(static_cast<IMediaCaptureFailedEventArgs const &>(static_cast<T const &>(*this))->get_Code(&value));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings<T>::AudioDeviceId(String const & value) const
{
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->put_AudioDeviceId(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMediaCaptureInitializationSettings<T>::AudioDeviceId(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->put_AudioDeviceId(StringReference(value)));
}

template <typename T> String impl_IMediaCaptureInitializationSettings<T>::AudioDeviceId() const
{
	String value = {};
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->get_AudioDeviceId(set(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings<T>::VideoDeviceId(String const & value) const
{
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->put_VideoDeviceId(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMediaCaptureInitializationSettings<T>::VideoDeviceId(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->put_VideoDeviceId(StringReference(value)));
}

template <typename T> String impl_IMediaCaptureInitializationSettings<T>::VideoDeviceId() const
{
	String value = {};
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->get_VideoDeviceId(set(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings<T>::StreamingCaptureMode(Windows::Media::Capture::StreamingCaptureMode const value) const
{
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->put_StreamingCaptureMode(value));
}

template <typename T> Windows::Media::Capture::StreamingCaptureMode impl_IMediaCaptureInitializationSettings<T>::StreamingCaptureMode() const
{
	Windows::Media::Capture::StreamingCaptureMode value = {};
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->get_StreamingCaptureMode(&value));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings<T>::PhotoCaptureSource(Windows::Media::Capture::PhotoCaptureSource const value) const
{
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->put_PhotoCaptureSource(value));
}

template <typename T> Windows::Media::Capture::PhotoCaptureSource impl_IMediaCaptureInitializationSettings<T>::PhotoCaptureSource() const
{
	Windows::Media::Capture::PhotoCaptureSource value = {};
	check(static_cast<IMediaCaptureInitializationSettings const &>(static_cast<T const &>(*this))->get_PhotoCaptureSource(&value));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings2<T>::MediaCategory(Windows::Media::Capture::MediaCategory const value) const
{
	check(static_cast<IMediaCaptureInitializationSettings2 const &>(static_cast<T const &>(*this))->put_MediaCategory(value));
}

template <typename T> Windows::Media::Capture::MediaCategory impl_IMediaCaptureInitializationSettings2<T>::MediaCategory() const
{
	Windows::Media::Capture::MediaCategory value = {};
	check(static_cast<IMediaCaptureInitializationSettings2 const &>(static_cast<T const &>(*this))->get_MediaCategory(&value));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings2<T>::AudioProcessing(Windows::Media::AudioProcessing const value) const
{
	check(static_cast<IMediaCaptureInitializationSettings2 const &>(static_cast<T const &>(*this))->put_AudioProcessing(value));
}

template <typename T> Windows::Media::AudioProcessing impl_IMediaCaptureInitializationSettings2<T>::AudioProcessing() const
{
	Windows::Media::AudioProcessing value = {};
	check(static_cast<IMediaCaptureInitializationSettings2 const &>(static_cast<T const &>(*this))->get_AudioProcessing(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::InitializeAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_InitializeAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::InitializeAsync(Windows::Media::Capture::MediaCaptureInitializationSettings const & mediaCaptureInitializationSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_InitializeWithSettingsAsync(get(mediaCaptureInitializationSettings), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StartRecordToStorageFileAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_StartRecordToStorageFileAsync(get(encodingProfile), get(file), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StartRecordToStreamAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_StartRecordToStreamAsync(get(encodingProfile), get(stream), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_StartRecordToCustomSinkAsync(get(encodingProfile), get(customMediaSink), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, String const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_StartRecordToCustomSinkIdAsync(get(encodingProfile), get(customSinkActivationId), get(customSinkSettings), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, wchar_t const (&customSinkActivationId)[S0], Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_StartRecordToCustomSinkIdAsync(get(encodingProfile), StringReference(customSinkActivationId), get(customSinkSettings), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StopRecordAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_StopRecordAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::CapturePhotoToStorageFileAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type, Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_CapturePhotoToStorageFileAsync(get(type), get(file), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::CapturePhotoToStreamAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_CapturePhotoToStreamAsync(get(type), get(stream), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::AddEffectAsync(Windows::Media::Capture::MediaStreamType const mediaStreamType, String const & effectActivationID, Windows::Foundation::Collections::IPropertySet const & effectSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_AddEffectAsync(mediaStreamType, get(effectActivationID), get(effectSettings), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::AddEffectAsync(Windows::Media::Capture::MediaStreamType const mediaStreamType, wchar_t const (&effectActivationID)[S0], Windows::Foundation::Collections::IPropertySet const & effectSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_AddEffectAsync(mediaStreamType, StringReference(effectActivationID), get(effectSettings), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::ClearEffectsAsync(Windows::Media::Capture::MediaStreamType const mediaStreamType) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_ClearEffectsAsync(mediaStreamType, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IMediaCapture<T>::SetEncoderProperty(Windows::Media::Capture::MediaStreamType const mediaStreamType, GUID const propertyId, IInspectable const & propertyValue) const
{
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_SetEncoderProperty(mediaStreamType, propertyId, get(propertyValue)));
}

template <typename T> IInspectable impl_IMediaCapture<T>::GetEncoderProperty(Windows::Media::Capture::MediaStreamType const mediaStreamType, GUID const propertyId) const
{
	IInspectable propertyValue = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_GetEncoderProperty(mediaStreamType, propertyId, set(propertyValue)));
	return propertyValue;
}

template <typename T> EventRegistrationToken impl_IMediaCapture<T>::Failed(Windows::Media::Capture::IMediaCaptureFailedEventHandler const & errorEventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->add_Failed(get(errorEventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaCapture<T>::Failed(F errorEventHandler) const
{
	return Failed(Windows::Media::Capture::MediaCaptureFailedEventHandler(errorEventHandler));
}

template <typename T> void impl_IMediaCapture<T>::Failed(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->remove_Failed(eventCookie));
}

template <typename T> EventRegistrationToken impl_IMediaCapture<T>::RecordLimitationExceeded(Windows::Media::Capture::IRecordLimitationExceededEventHandler const & recordLimitationExceededEventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->add_RecordLimitationExceeded(get(recordLimitationExceededEventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaCapture<T>::RecordLimitationExceeded(F recordLimitationExceededEventHandler) const
{
	return RecordLimitationExceeded(Windows::Media::Capture::RecordLimitationExceededEventHandler(recordLimitationExceededEventHandler));
}

template <typename T> void impl_IMediaCapture<T>::RecordLimitationExceeded(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->remove_RecordLimitationExceeded(eventCookie));
}

template <typename T> Windows::Media::Capture::MediaCaptureSettings impl_IMediaCapture<T>::MediaCaptureSettings() const
{
	Windows::Media::Capture::MediaCaptureSettings value(nullptr);
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->get_MediaCaptureSettings(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::AudioDeviceController impl_IMediaCapture<T>::AudioDeviceController() const
{
	Windows::Media::Devices::AudioDeviceController value(nullptr);
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->get_AudioDeviceController(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::VideoDeviceController impl_IMediaCapture<T>::VideoDeviceController() const
{
	Windows::Media::Devices::VideoDeviceController value(nullptr);
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->get_VideoDeviceController(set(value)));
	return value;
}

template <typename T> void impl_IMediaCapture<T>::SetPreviewMirroring(bool const value) const
{
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_SetPreviewMirroring(value));
}

template <typename T> bool impl_IMediaCapture<T>::GetPreviewMirroring() const
{
	bool value = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_GetPreviewMirroring(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IMediaCapture<T>::SetPreviewRotation(Windows::Media::Capture::VideoRotation const value) const
{
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_SetPreviewRotation(value));
}

template <typename T> Windows::Media::Capture::VideoRotation impl_IMediaCapture<T>::GetPreviewRotation() const
{
	Windows::Media::Capture::VideoRotation value = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_GetPreviewRotation(&value));
	return value;
}

template <typename T> void impl_IMediaCapture<T>::SetRecordRotation(Windows::Media::Capture::VideoRotation const value) const
{
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_SetRecordRotation(value));
}

template <typename T> Windows::Media::Capture::VideoRotation impl_IMediaCapture<T>::GetRecordRotation() const
{
	Windows::Media::Capture::VideoRotation value = {};
	check(static_cast<IMediaCapture const &>(static_cast<T const &>(*this))->abi_GetRecordRotation(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> impl_IMediaCapture2<T>::PrepareLowLagRecordToStorageFileAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> operation = {};
	check(static_cast<IMediaCapture2 const &>(static_cast<T const &>(*this))->abi_PrepareLowLagRecordToStorageFileAsync(get(encodingProfile), get(file), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> impl_IMediaCapture2<T>::PrepareLowLagRecordToStreamAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> operation = {};
	check(static_cast<IMediaCapture2 const &>(static_cast<T const &>(*this))->abi_PrepareLowLagRecordToStreamAsync(get(encodingProfile), get(stream), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> impl_IMediaCapture2<T>::PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> operation = {};
	check(static_cast<IMediaCapture2 const &>(static_cast<T const &>(*this))->abi_PrepareLowLagRecordToCustomSinkAsync(get(encodingProfile), get(customMediaSink), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> impl_IMediaCapture2<T>::PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, String const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> operation = {};
	check(static_cast<IMediaCapture2 const &>(static_cast<T const &>(*this))->abi_PrepareLowLagRecordToCustomSinkIdAsync(get(encodingProfile), get(customSinkActivationId), get(customSinkSettings), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> impl_IMediaCapture2<T>::PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, wchar_t const (&customSinkActivationId)[S0], Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> operation = {};
	check(static_cast<IMediaCapture2 const &>(static_cast<T const &>(*this))->abi_PrepareLowLagRecordToCustomSinkIdAsync(get(encodingProfile), StringReference(customSinkActivationId), get(customSinkSettings), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoCapture> impl_IMediaCapture2<T>::PrepareLowLagPhotoCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoCapture> operation = {};
	check(static_cast<IMediaCapture2 const &>(static_cast<T const &>(*this))->abi_PrepareLowLagPhotoCaptureAsync(get(type), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoSequenceCapture> impl_IMediaCapture2<T>::PrepareLowLagPhotoSequenceCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoSequenceCapture> operation = {};
	check(static_cast<IMediaCapture2 const &>(static_cast<T const &>(*this))->abi_PrepareLowLagPhotoSequenceCaptureAsync(get(type), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture2<T>::SetEncodingPropertiesAsync(Windows::Media::Capture::MediaStreamType const mediaStreamType, Windows::Media::MediaProperties::IMediaEncodingProperties const & mediaEncodingProperties, Windows::Media::MediaProperties::MediaPropertySet const & encoderProperties) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IMediaCapture2 const &>(static_cast<T const &>(*this))->abi_SetEncodingPropertiesAsync(mediaStreamType, get(mediaEncodingProperties), get(encoderProperties), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::CapturedPhoto> impl_ILowLagPhotoCapture<T>::CaptureAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::CapturedPhoto> operation = {};
	check(static_cast<ILowLagPhotoCapture const &>(static_cast<T const &>(*this))->abi_CaptureAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagPhotoCapture<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<ILowLagPhotoCapture const &>(static_cast<T const &>(*this))->abi_FinishAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagMediaRecording<T>::StartAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<ILowLagMediaRecording const &>(static_cast<T const &>(*this))->abi_StartAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagMediaRecording<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<ILowLagMediaRecording const &>(static_cast<T const &>(*this))->abi_StopAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagMediaRecording<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<ILowLagMediaRecording const &>(static_cast<T const &>(*this))->abi_FinishAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagPhotoSequenceCapture<T>::StartAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<ILowLagPhotoSequenceCapture const &>(static_cast<T const &>(*this))->abi_StartAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagPhotoSequenceCapture<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<ILowLagPhotoSequenceCapture const &>(static_cast<T const &>(*this))->abi_StopAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagPhotoSequenceCapture<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<ILowLagPhotoSequenceCapture const &>(static_cast<T const &>(*this))->abi_FinishAsync(set(operation)));
	return operation;
}

template <typename T> EventRegistrationToken impl_ILowLagPhotoSequenceCapture<T>::PhotoCaptured(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::LowLagPhotoSequenceCapture, Windows::Media::Capture::PhotoCapturedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ILowLagPhotoSequenceCapture const &>(static_cast<T const &>(*this))->add_PhotoCaptured(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ILowLagPhotoSequenceCapture<T>::PhotoCaptured(F handler) const
{
	return PhotoCaptured(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::LowLagPhotoSequenceCapture, Windows::Media::Capture::PhotoCapturedEventArgs>(handler));
}

template <typename T> void impl_ILowLagPhotoSequenceCapture<T>::PhotoCaptured(EventRegistrationToken const token) const
{
	check(static_cast<ILowLagPhotoSequenceCapture const &>(static_cast<T const &>(*this))->remove_PhotoCaptured(token));
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_IPhotoCapturedEventArgs<T>::Frame() const
{
	Windows::Media::Capture::CapturedFrame value(nullptr);
	check(static_cast<IPhotoCapturedEventArgs const &>(static_cast<T const &>(*this))->get_Frame(set(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_IPhotoCapturedEventArgs<T>::Thumbnail() const
{
	Windows::Media::Capture::CapturedFrame value(nullptr);
	check(static_cast<IPhotoCapturedEventArgs const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPhotoCapturedEventArgs<T>::CaptureTimeOffset() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IPhotoCapturedEventArgs const &>(static_cast<T const &>(*this))->get_CaptureTimeOffset(&value));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_ICapturedPhoto<T>::Frame() const
{
	Windows::Media::Capture::CapturedFrame value(nullptr);
	check(static_cast<ICapturedPhoto const &>(static_cast<T const &>(*this))->get_Frame(set(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_ICapturedPhoto<T>::Thumbnail() const
{
	Windows::Media::Capture::CapturedFrame value(nullptr);
	check(static_cast<ICapturedPhoto const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> unsigned impl_ICapturedFrame<T>::Width() const
{
	unsigned value = {};
	check(static_cast<ICapturedFrame const &>(static_cast<T const &>(*this))->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_ICapturedFrame<T>::Height() const
{
	unsigned value = {};
	check(static_cast<ICapturedFrame const &>(static_cast<T const &>(*this))->get_Height(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCaptureVideoPreview<T>::StartPreviewAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCaptureVideoPreview const &>(static_cast<T const &>(*this))->abi_StartPreviewAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCaptureVideoPreview<T>::StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCaptureVideoPreview const &>(static_cast<T const &>(*this))->abi_StartPreviewToCustomSinkAsync(get(encodingProfile), get(customMediaSink), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCaptureVideoPreview<T>::StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, String const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCaptureVideoPreview const &>(static_cast<T const &>(*this))->abi_StartPreviewToCustomSinkIdAsync(get(encodingProfile), get(customSinkActivationId), get(customSinkSettings), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IMediaCaptureVideoPreview<T>::StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, wchar_t const (&customSinkActivationId)[S0], Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCaptureVideoPreview const &>(static_cast<T const &>(*this))->abi_StartPreviewToCustomSinkIdAsync(get(encodingProfile), StringReference(customSinkActivationId), get(customSinkSettings), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCaptureVideoPreview<T>::StopPreviewAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaCaptureVideoPreview const &>(static_cast<T const &>(*this))->abi_StopPreviewAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> String impl_IMediaCaptureSettings<T>::AudioDeviceId() const
{
	String value = {};
	check(static_cast<IMediaCaptureSettings const &>(static_cast<T const &>(*this))->get_AudioDeviceId(set(value)));
	return value;
}

template <typename T> String impl_IMediaCaptureSettings<T>::VideoDeviceId() const
{
	String value = {};
	check(static_cast<IMediaCaptureSettings const &>(static_cast<T const &>(*this))->get_VideoDeviceId(set(value)));
	return value;
}

template <typename T> Windows::Media::Capture::StreamingCaptureMode impl_IMediaCaptureSettings<T>::StreamingCaptureMode() const
{
	Windows::Media::Capture::StreamingCaptureMode value = {};
	check(static_cast<IMediaCaptureSettings const &>(static_cast<T const &>(*this))->get_StreamingCaptureMode(&value));
	return value;
}

template <typename T> Windows::Media::Capture::PhotoCaptureSource impl_IMediaCaptureSettings<T>::PhotoCaptureSource() const
{
	Windows::Media::Capture::PhotoCaptureSource value = {};
	check(static_cast<IMediaCaptureSettings const &>(static_cast<T const &>(*this))->get_PhotoCaptureSource(&value));
	return value;
}

template <typename T> Windows::Media::Capture::VideoDeviceCharacteristic impl_IMediaCaptureSettings<T>::VideoDeviceCharacteristic() const
{
	Windows::Media::Capture::VideoDeviceCharacteristic value = {};
	check(static_cast<IMediaCaptureSettings const &>(static_cast<T const &>(*this))->get_VideoDeviceCharacteristic(&value));
	return value;
}

template <typename T> bool impl_IMediaCaptureSettings2<T>::ConcurrentRecordAndPhotoSupported() const
{
	bool value = {};
	check(static_cast<IMediaCaptureSettings2 const &>(static_cast<T const &>(*this))->get_ConcurrentRecordAndPhotoSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaCaptureSettings2<T>::ConcurrentRecordAndPhotoSequenceSupported() const
{
	bool value = {};
	check(static_cast<IMediaCaptureSettings2 const &>(static_cast<T const &>(*this))->get_ConcurrentRecordAndPhotoSequenceSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaCaptureSettings2<T>::CameraSoundRequiredForRegion() const
{
	bool value = {};
	check(static_cast<IMediaCaptureSettings2 const &>(static_cast<T const &>(*this))->get_CameraSoundRequiredForRegion(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IMediaCaptureSettings2<T>::Horizontal35mmEquivalentFocalLength() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IMediaCaptureSettings2 const &>(static_cast<T const &>(*this))->get_Horizontal35mmEquivalentFocalLength(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<int> impl_IMediaCaptureSettings2<T>::PitchOffsetDegrees() const
{
	Windows::Foundation::IReference<int> value = {};
	check(static_cast<IMediaCaptureSettings2 const &>(static_cast<T const &>(*this))->get_PitchOffsetDegrees(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IMediaCaptureSettings2<T>::Vertical35mmEquivalentFocalLength() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IMediaCaptureSettings2 const &>(static_cast<T const &>(*this))->get_Vertical35mmEquivalentFocalLength(set(value)));
	return value;
}

template <typename T> Windows::Media::Capture::MediaCategory impl_IMediaCaptureSettings2<T>::MediaCategory() const
{
	Windows::Media::Capture::MediaCategory value = {};
	check(static_cast<IMediaCaptureSettings2 const &>(static_cast<T const &>(*this))->get_MediaCategory(&value));
	return value;
}

template <typename T> Windows::Media::AudioProcessing impl_IMediaCaptureSettings2<T>::AudioProcessing() const
{
	Windows::Media::AudioProcessing value = {};
	check(static_cast<IMediaCaptureSettings2 const &>(static_cast<T const &>(*this))->get_AudioProcessing(&value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

template <typename T> String impl_IRatedContentDescription<T>::Id() const
{
	String value = {};
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Id(String const & value) const
{
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> template <unsigned S0> void impl_IRatedContentDescription<T>::Id(wchar_t const (&value)[S0]) const
{
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->put_Id(StringReference(value)));
}

template <typename T> String impl_IRatedContentDescription<T>::Title() const
{
	String value = {};
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Title(String const & value) const
{
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IRatedContentDescription<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IRatedContentDescription<T>::Image() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value = {};
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->get_Image(set(value)));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Image(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->put_Image(get(value)));
}

template <typename T> Windows::Media::ContentRestrictions::RatedContentCategory impl_IRatedContentDescription<T>::Category() const
{
	Windows::Media::ContentRestrictions::RatedContentCategory value = {};
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->get_Category(&value));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Category(Windows::Media::ContentRestrictions::RatedContentCategory const value) const
{
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->put_Category(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IRatedContentDescription<T>::Ratings() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->get_Ratings(set(value)));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Ratings(Windows::Foundation::Collections::IVector<String> const & value) const
{
	check(static_cast<IRatedContentDescription const &>(static_cast<T const &>(*this))->put_Ratings(get(value)));
}

template <typename T> Windows::Media::ContentRestrictions::RatedContentDescription impl_IRatedContentDescriptionFactory<T>::Create(String const & id, String const & title, Windows::Media::ContentRestrictions::RatedContentCategory const category) const
{
	Windows::Media::ContentRestrictions::RatedContentDescription RatedContentDescription(nullptr);
	check(static_cast<IRatedContentDescriptionFactory const &>(static_cast<T const &>(*this))->abi_Create(get(id), get(title), category, set(RatedContentDescription)));
	return RatedContentDescription;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Media::ContentRestrictions::RatedContentDescription impl_IRatedContentDescriptionFactory<T>::Create(wchar_t const (&id)[S0], wchar_t const (&title)[S1], Windows::Media::ContentRestrictions::RatedContentCategory const category) const
{
	Windows::Media::ContentRestrictions::RatedContentDescription RatedContentDescription(nullptr);
	check(static_cast<IRatedContentDescriptionFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(id), StringReference(title), category, set(RatedContentDescription)));
	return RatedContentDescription;
}

template <typename T> String impl_IContentRestrictionsBrowsePolicy<T>::GeographicRegion() const
{
	String value = {};
	check(static_cast<IContentRestrictionsBrowsePolicy const &>(static_cast<T const &>(*this))->get_GeographicRegion(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContentRestrictionsBrowsePolicy<T>::MaxBrowsableAgeRating() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IContentRestrictionsBrowsePolicy const &>(static_cast<T const &>(*this))->get_MaxBrowsableAgeRating(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContentRestrictionsBrowsePolicy<T>::PreferredAgeRating() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IContentRestrictionsBrowsePolicy const &>(static_cast<T const &>(*this))->get_PreferredAgeRating(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy> impl_IRatedContentRestrictions<T>::GetBrowsePolicyAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy> operation = {};
	check(static_cast<IRatedContentRestrictions const &>(static_cast<T const &>(*this))->abi_GetBrowsePolicyAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Media::ContentRestrictions::ContentAccessRestrictionLevel> impl_IRatedContentRestrictions<T>::GetRestrictionLevelAsync(Windows::Media::ContentRestrictions::RatedContentDescription const & RatedContentDescription) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Media::ContentRestrictions::ContentAccessRestrictionLevel> operation = {};
	check(static_cast<IRatedContentRestrictions const &>(static_cast<T const &>(*this))->abi_GetRestrictionLevelAsync(get(RatedContentDescription), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IRatedContentRestrictions<T>::RequestContentAccessAsync(Windows::Media::ContentRestrictions::RatedContentDescription const & RatedContentDescription) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IRatedContentRestrictions const &>(static_cast<T const &>(*this))->abi_RequestContentAccessAsync(get(RatedContentDescription), set(operation)));
	return operation;
}

template <typename T> EventRegistrationToken impl_IRatedContentRestrictions<T>::RestrictionsChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IRatedContentRestrictions const &>(static_cast<T const &>(*this))->add_RestrictionsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IRatedContentRestrictions<T>::RestrictionsChanged(F handler) const
{
	return RestrictionsChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IRatedContentRestrictions<T>::RestrictionsChanged(EventRegistrationToken const token) const
{
	check(static_cast<IRatedContentRestrictions const &>(static_cast<T const &>(*this))->remove_RestrictionsChanged(token));
}

template <typename T> Windows::Media::ContentRestrictions::RatedContentRestrictions impl_IRatedContentRestrictionsFactory<T>::CreateWithMaxAgeRating(unsigned const maxAgeRating) const
{
	Windows::Media::ContentRestrictions::RatedContentRestrictions ratedContentRestrictions(nullptr);
	check(static_cast<IRatedContentRestrictionsFactory const &>(static_cast<T const &>(*this))->abi_CreateWithMaxAgeRating(maxAgeRating, set(ratedContentRestrictions)));
	return ratedContentRestrictions;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

template <typename T> bool impl_IMediaStreamDescriptor<T>::IsSelected() const
{
	bool selected = {};
	check(static_cast<IMediaStreamDescriptor const &>(static_cast<T const &>(*this))->get_IsSelected(BoolProxy(selected)));
	return selected;
}

template <typename T> void impl_IMediaStreamDescriptor<T>::Name(String const & value) const
{
	check(static_cast<IMediaStreamDescriptor const &>(static_cast<T const &>(*this))->put_Name(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMediaStreamDescriptor<T>::Name(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMediaStreamDescriptor const &>(static_cast<T const &>(*this))->put_Name(StringReference(value)));
}

template <typename T> String impl_IMediaStreamDescriptor<T>::Name() const
{
	String value = {};
	check(static_cast<IMediaStreamDescriptor const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> void impl_IMediaStreamDescriptor<T>::Language(String const & value) const
{
	check(static_cast<IMediaStreamDescriptor const &>(static_cast<T const &>(*this))->put_Language(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMediaStreamDescriptor<T>::Language(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMediaStreamDescriptor const &>(static_cast<T const &>(*this))->put_Language(StringReference(value)));
}

template <typename T> String impl_IMediaStreamDescriptor<T>::Language() const
{
	String value = {};
	check(static_cast<IMediaStreamDescriptor const &>(static_cast<T const &>(*this))->get_Language(set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioStreamDescriptor<T>::EncodingProperties() const
{
	Windows::Media::MediaProperties::AudioEncodingProperties encodingProperties(nullptr);
	check(static_cast<IAudioStreamDescriptor const &>(static_cast<T const &>(*this))->get_EncodingProperties(set(encodingProperties)));
	return encodingProperties;
}

template <typename T> Windows::Media::Core::AudioStreamDescriptor impl_IAudioStreamDescriptorFactory<T>::Create(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) const
{
	Windows::Media::Core::AudioStreamDescriptor result(nullptr);
	check(static_cast<IAudioStreamDescriptorFactory const &>(static_cast<T const &>(*this))->abi_Create(get(encodingProperties), set(result)));
	return result;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoStreamDescriptor<T>::EncodingProperties() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties encodingProperties(nullptr);
	check(static_cast<IVideoStreamDescriptor const &>(static_cast<T const &>(*this))->get_EncodingProperties(set(encodingProperties)));
	return encodingProperties;
}

template <typename T> Windows::Media::Core::VideoStreamDescriptor impl_IVideoStreamDescriptorFactory<T>::Create(Windows::Media::MediaProperties::VideoEncodingProperties const & encodingProperties) const
{
	Windows::Media::Core::VideoStreamDescriptor result(nullptr);
	check(static_cast<IVideoStreamDescriptorFactory const &>(static_cast<T const &>(*this))->abi_Create(get(encodingProperties), set(result)));
	return result;
}

template <typename T> EventRegistrationToken impl_IMediaStreamSource<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceClosedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->add_Closed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaStreamSource<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceClosedEventArgs>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::Closed(EventRegistrationToken const token) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->remove_Closed(token));
}

template <typename T> EventRegistrationToken impl_IMediaStreamSource<T>::Starting(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceStartingEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->add_Starting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaStreamSource<T>::Starting(F handler) const
{
	return Starting(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceStartingEventArgs>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::Starting(EventRegistrationToken const token) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->remove_Starting(token));
}

template <typename T> EventRegistrationToken impl_IMediaStreamSource<T>::Paused(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->add_Paused(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaStreamSource<T>::Paused(F handler) const
{
	return Paused(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, IInspectable>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::Paused(EventRegistrationToken const token) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->remove_Paused(token));
}

template <typename T> EventRegistrationToken impl_IMediaStreamSource<T>::SampleRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->add_SampleRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaStreamSource<T>::SampleRequested(F handler) const
{
	return SampleRequested(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::SampleRequested(EventRegistrationToken const token) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->remove_SampleRequested(token));
}

template <typename T> EventRegistrationToken impl_IMediaStreamSource<T>::SwitchStreamsRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->add_SwitchStreamsRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaStreamSource<T>::SwitchStreamsRequested(F handler) const
{
	return SwitchStreamsRequested(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::SwitchStreamsRequested(EventRegistrationToken const token) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->remove_SwitchStreamsRequested(token));
}

template <typename T> void impl_IMediaStreamSource<T>::NotifyError(Windows::Media::Core::MediaStreamSourceErrorStatus const errorStatus) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->abi_NotifyError(errorStatus));
}

template <typename T> void impl_IMediaStreamSource<T>::AddStreamDescriptor(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->abi_AddStreamDescriptor(get(descriptor)));
}

template <typename T> void impl_IMediaStreamSource<T>::MediaProtectionManager(Windows::Media::Protection::MediaProtectionManager const & value) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->put_MediaProtectionManager(get(value)));
}

template <typename T> Windows::Media::Protection::MediaProtectionManager impl_IMediaStreamSource<T>::MediaProtectionManager() const
{
	Windows::Media::Protection::MediaProtectionManager value(nullptr);
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->get_MediaProtectionManager(set(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->put_Duration(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSource<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->get_Duration(&value));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::CanSeek(bool const value) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->put_CanSeek(value));
}

template <typename T> bool impl_IMediaStreamSource<T>::CanSeek() const
{
	bool value = {};
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->get_CanSeek(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::BufferTime(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->put_BufferTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSource<T>::BufferTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->get_BufferTime(&value));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::SetBufferedRange(Windows::Foundation::TimeSpan const & startOffset, Windows::Foundation::TimeSpan const & endOffset) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->abi_SetBufferedRange(startOffset, endOffset));
}

template <typename T> Windows::Storage::FileProperties::MusicProperties impl_IMediaStreamSource<T>::MusicProperties() const
{
	Windows::Storage::FileProperties::MusicProperties value(nullptr);
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->get_MusicProperties(set(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::VideoProperties impl_IMediaStreamSource<T>::VideoProperties() const
{
	Windows::Storage::FileProperties::VideoProperties value(nullptr);
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->get_VideoProperties(set(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->put_Thumbnail(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IMediaStreamSource<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value = {};
	check(static_cast<IMediaStreamSource const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSource impl_IMediaStreamSourceFactory<T>::CreateFromDescriptor(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) const
{
	Windows::Media::Core::MediaStreamSource result(nullptr);
	check(static_cast<IMediaStreamSourceFactory const &>(static_cast<T const &>(*this))->abi_CreateFromDescriptor(get(descriptor), set(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaStreamSource impl_IMediaStreamSourceFactory<T>::CreateFromDescriptors(Windows::Media::Core::IMediaStreamDescriptor const & descriptor, Windows::Media::Core::IMediaStreamDescriptor const & descriptor2) const
{
	Windows::Media::Core::MediaStreamSource result(nullptr);
	check(static_cast<IMediaStreamSourceFactory const &>(static_cast<T const &>(*this))->abi_CreateFromDescriptors(get(descriptor), get(descriptor2), set(result)));
	return result;
}

template <typename T> EventRegistrationToken impl_IMediaStreamSample<T>::Processed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSample, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->add_Processed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaStreamSample<T>::Processed(F handler) const
{
	return Processed(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSample, IInspectable>(handler));
}

template <typename T> void impl_IMediaStreamSample<T>::Processed(EventRegistrationToken const token) const
{
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->remove_Processed(token));
}

template <typename T> Windows::Storage::Streams::Buffer impl_IMediaStreamSample<T>::Buffer() const
{
	Windows::Storage::Streams::Buffer value(nullptr);
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->get_Buffer(set(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSample<T>::Timestamp() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSamplePropertySet impl_IMediaStreamSample<T>::ExtendedProperties() const
{
	Windows::Media::Core::MediaStreamSamplePropertySet value(nullptr);
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->get_ExtendedProperties(set(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSampleProtectionProperties impl_IMediaStreamSample<T>::Protection() const
{
	Windows::Media::Core::MediaStreamSampleProtectionProperties value(nullptr);
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->get_Protection(set(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSample<T>::DecodeTimestamp(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->put_DecodeTimestamp(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSample<T>::DecodeTimestamp() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->get_DecodeTimestamp(&value));
	return value;
}

template <typename T> void impl_IMediaStreamSample<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->put_Duration(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSample<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->get_Duration(&value));
	return value;
}

template <typename T> void impl_IMediaStreamSample<T>::KeyFrame(bool const value) const
{
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->put_KeyFrame(value));
}

template <typename T> bool impl_IMediaStreamSample<T>::KeyFrame() const
{
	bool value = {};
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->get_KeyFrame(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSample<T>::Discontinuous(bool const value) const
{
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->put_Discontinuous(value));
}

template <typename T> bool impl_IMediaStreamSample<T>::Discontinuous() const
{
	bool value = {};
	check(static_cast<IMediaStreamSample const &>(static_cast<T const &>(*this))->get_Discontinuous(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSample impl_IMediaStreamSampleStatics<T>::CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer, Windows::Foundation::TimeSpan const & timestamp) const
{
	Windows::Media::Core::MediaStreamSample value(nullptr);
	check(static_cast<IMediaStreamSampleStatics const &>(static_cast<T const &>(*this))->abi_CreateFromBuffer(get(buffer), timestamp, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> impl_IMediaStreamSampleStatics<T>::CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, unsigned const count, Windows::Foundation::TimeSpan const & timestamp) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> value = {};
	check(static_cast<IMediaStreamSampleStatics const &>(static_cast<T const &>(*this))->abi_CreateFromStreamAsync(get(stream), count, timestamp, set(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceClosedReason impl_IMediaStreamSourceClosedRequest<T>::Reason() const
{
	Windows::Media::Core::MediaStreamSourceClosedReason value = {};
	check(static_cast<IMediaStreamSourceClosedRequest const &>(static_cast<T const &>(*this))->get_Reason(&value));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceClosedRequest impl_IMediaStreamSourceClosedEventArgs<T>::Request() const
{
	Windows::Media::Core::MediaStreamSourceClosedRequest value(nullptr);
	check(static_cast<IMediaStreamSourceClosedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSourceStartingRequestDeferral<T>::Complete() const
{
	check(static_cast<IMediaStreamSourceStartingRequestDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> impl_IMediaStreamSourceStartingRequest<T>::StartPosition() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> value = {};
	check(static_cast<IMediaStreamSourceStartingRequest const &>(static_cast<T const &>(*this))->get_StartPosition(set(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceStartingRequestDeferral impl_IMediaStreamSourceStartingRequest<T>::GetDeferral() const
{
	Windows::Media::Core::MediaStreamSourceStartingRequestDeferral deferral(nullptr);
	check(static_cast<IMediaStreamSourceStartingRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> void impl_IMediaStreamSourceStartingRequest<T>::SetActualStartPosition(Windows::Foundation::TimeSpan const & position) const
{
	check(static_cast<IMediaStreamSourceStartingRequest const &>(static_cast<T const &>(*this))->abi_SetActualStartPosition(position));
}

template <typename T> Windows::Media::Core::MediaStreamSourceStartingRequest impl_IMediaStreamSourceStartingEventArgs<T>::Request() const
{
	Windows::Media::Core::MediaStreamSourceStartingRequest value(nullptr);
	check(static_cast<IMediaStreamSourceStartingEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSourceSampleRequestDeferral<T>::Complete() const
{
	check(static_cast<IMediaStreamSourceSampleRequestDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::Media::Core::IMediaStreamDescriptor impl_IMediaStreamSourceSampleRequest<T>::StreamDescriptor() const
{
	Windows::Media::Core::IMediaStreamDescriptor value = {};
	check(static_cast<IMediaStreamSourceSampleRequest const &>(static_cast<T const &>(*this))->get_StreamDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceSampleRequestDeferral impl_IMediaStreamSourceSampleRequest<T>::GetDeferral() const
{
	Windows::Media::Core::MediaStreamSourceSampleRequestDeferral deferral(nullptr);
	check(static_cast<IMediaStreamSourceSampleRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> void impl_IMediaStreamSourceSampleRequest<T>::Sample(Windows::Media::Core::MediaStreamSample const & value) const
{
	check(static_cast<IMediaStreamSourceSampleRequest const &>(static_cast<T const &>(*this))->put_Sample(get(value)));
}

template <typename T> Windows::Media::Core::MediaStreamSample impl_IMediaStreamSourceSampleRequest<T>::Sample() const
{
	Windows::Media::Core::MediaStreamSample value(nullptr);
	check(static_cast<IMediaStreamSourceSampleRequest const &>(static_cast<T const &>(*this))->get_Sample(set(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSourceSampleRequest<T>::ReportSampleProgress(unsigned const progress) const
{
	check(static_cast<IMediaStreamSourceSampleRequest const &>(static_cast<T const &>(*this))->abi_ReportSampleProgress(progress));
}

template <typename T> Windows::Media::Core::MediaStreamSourceSampleRequest impl_IMediaStreamSourceSampleRequestedEventArgs<T>::Request() const
{
	Windows::Media::Core::MediaStreamSourceSampleRequest value(nullptr);
	check(static_cast<IMediaStreamSourceSampleRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSourceSwitchStreamsRequestDeferral<T>::Complete() const
{
	check(static_cast<IMediaStreamSourceSwitchStreamsRequestDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::Media::Core::IMediaStreamDescriptor impl_IMediaStreamSourceSwitchStreamsRequest<T>::OldStreamDescriptor() const
{
	Windows::Media::Core::IMediaStreamDescriptor value = {};
	check(static_cast<IMediaStreamSourceSwitchStreamsRequest const &>(static_cast<T const &>(*this))->get_OldStreamDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Media::Core::IMediaStreamDescriptor impl_IMediaStreamSourceSwitchStreamsRequest<T>::NewStreamDescriptor() const
{
	Windows::Media::Core::IMediaStreamDescriptor value = {};
	check(static_cast<IMediaStreamSourceSwitchStreamsRequest const &>(static_cast<T const &>(*this))->get_NewStreamDescriptor(set(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral impl_IMediaStreamSourceSwitchStreamsRequest<T>::GetDeferral() const
{
	Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral deferral(nullptr);
	check(static_cast<IMediaStreamSourceSwitchStreamsRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest impl_IMediaStreamSourceSwitchStreamsRequestedEventArgs<T>::Request() const
{
	Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest value(nullptr);
	check(static_cast<IMediaStreamSourceSwitchStreamsRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

template <typename T> void impl_ICallControlEventHandler<T>::Invoke(Windows::Media::Devices::CallControl const & sender) const
{
	check(static_cast<ICallControlEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender)));
}

template <typename T> void impl_IDialRequestedEventHandler<T>::Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::DialRequestedEventArgs const & e) const
{
	check(static_cast<IDialRequestedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IRedialRequestedEventHandler<T>::Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::RedialRequestedEventArgs const & e) const
{
	check(static_cast<IRedialRequestedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IKeypadPressedEventHandler<T>::Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::KeypadPressedEventArgs const & e) const
{
	check(static_cast<IKeypadPressedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IDialRequestedEventArgs<T>::Handled() const
{
	check(static_cast<IDialRequestedEventArgs const &>(static_cast<T const &>(*this))->abi_Handled());
}

template <typename T> IInspectable impl_IDialRequestedEventArgs<T>::Contact() const
{
	IInspectable value = {};
	check(static_cast<IDialRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Contact(set(value)));
	return value;
}

template <typename T> void impl_IRedialRequestedEventArgs<T>::Handled() const
{
	check(static_cast<IRedialRequestedEventArgs const &>(static_cast<T const &>(*this))->abi_Handled());
}

template <typename T> Windows::Media::Devices::TelephonyKey impl_IKeypadPressedEventArgs<T>::TelephonyKey() const
{
	Windows::Media::Devices::TelephonyKey telephonyKey = {};
	check(static_cast<IKeypadPressedEventArgs const &>(static_cast<T const &>(*this))->get_TelephonyKey(&telephonyKey));
	return telephonyKey;
}

template <typename T> unsigned long long impl_ICallControl<T>::IndicateNewIncomingCall(bool const enableRinger, String const & callerId) const
{
	unsigned long long callToken = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->abi_IndicateNewIncomingCall(enableRinger, get(callerId), &callToken));
	return callToken;
}

template <typename T> template <unsigned S0> unsigned long long impl_ICallControl<T>::IndicateNewIncomingCall(bool const enableRinger, wchar_t const (&callerId)[S0]) const
{
	unsigned long long callToken = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->abi_IndicateNewIncomingCall(enableRinger, StringReference(callerId), &callToken));
	return callToken;
}

template <typename T> unsigned long long impl_ICallControl<T>::IndicateNewOutgoingCall() const
{
	unsigned long long callToken = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->abi_IndicateNewOutgoingCall(&callToken));
	return callToken;
}

template <typename T> void impl_ICallControl<T>::IndicateActiveCall(unsigned long long const callToken) const
{
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->abi_IndicateActiveCall(callToken));
}

template <typename T> void impl_ICallControl<T>::EndCall(unsigned long long const callToken) const
{
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->abi_EndCall(callToken));
}

template <typename T> bool impl_ICallControl<T>::HasRinger() const
{
	bool value = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->get_HasRinger(BoolProxy(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_ICallControl<T>::AnswerRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->add_AnswerRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICallControl<T>::AnswerRequested(F handler) const
{
	return AnswerRequested(Windows::Media::Devices::CallControlEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::AnswerRequested(EventRegistrationToken const token) const
{
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->remove_AnswerRequested(token));
}

template <typename T> EventRegistrationToken impl_ICallControl<T>::HangUpRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->add_HangUpRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICallControl<T>::HangUpRequested(F handler) const
{
	return HangUpRequested(Windows::Media::Devices::CallControlEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::HangUpRequested(EventRegistrationToken const token) const
{
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->remove_HangUpRequested(token));
}

template <typename T> EventRegistrationToken impl_ICallControl<T>::DialRequested(Windows::Media::Devices::IDialRequestedEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->add_DialRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICallControl<T>::DialRequested(F handler) const
{
	return DialRequested(Windows::Media::Devices::DialRequestedEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::DialRequested(EventRegistrationToken const token) const
{
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->remove_DialRequested(token));
}

template <typename T> EventRegistrationToken impl_ICallControl<T>::RedialRequested(Windows::Media::Devices::IRedialRequestedEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->add_RedialRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICallControl<T>::RedialRequested(F handler) const
{
	return RedialRequested(Windows::Media::Devices::RedialRequestedEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::RedialRequested(EventRegistrationToken const token) const
{
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->remove_RedialRequested(token));
}

template <typename T> EventRegistrationToken impl_ICallControl<T>::KeypadPressed(Windows::Media::Devices::IKeypadPressedEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->add_KeypadPressed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICallControl<T>::KeypadPressed(F handler) const
{
	return KeypadPressed(Windows::Media::Devices::KeypadPressedEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::KeypadPressed(EventRegistrationToken const token) const
{
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->remove_KeypadPressed(token));
}

template <typename T> EventRegistrationToken impl_ICallControl<T>::AudioTransferRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->add_AudioTransferRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICallControl<T>::AudioTransferRequested(F handler) const
{
	return AudioTransferRequested(Windows::Media::Devices::CallControlEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::AudioTransferRequested(EventRegistrationToken const token) const
{
	check(static_cast<ICallControl const &>(static_cast<T const &>(*this))->remove_AudioTransferRequested(token));
}

template <typename T> Windows::Media::Devices::CallControl impl_ICallControlStatics<T>::GetDefault() const
{
	Windows::Media::Devices::CallControl callControl(nullptr);
	check(static_cast<ICallControlStatics const &>(static_cast<T const &>(*this))->abi_GetDefault(set(callControl)));
	return callControl;
}

template <typename T> Windows::Media::Devices::CallControl impl_ICallControlStatics<T>::FromId(String const & deviceId) const
{
	Windows::Media::Devices::CallControl callControl(nullptr);
	check(static_cast<ICallControlStatics const &>(static_cast<T const &>(*this))->abi_FromId(get(deviceId), set(callControl)));
	return callControl;
}

template <typename T> template <unsigned S0> Windows::Media::Devices::CallControl impl_ICallControlStatics<T>::FromId(wchar_t const (&deviceId)[S0]) const
{
	Windows::Media::Devices::CallControl callControl(nullptr);
	check(static_cast<ICallControlStatics const &>(static_cast<T const &>(*this))->abi_FromId(StringReference(deviceId), set(callControl)));
	return callControl;
}

template <typename T> String impl_IDefaultAudioDeviceChangedEventArgs<T>::Id() const
{
	String value = {};
	check(static_cast<IDefaultAudioDeviceChangedEventArgs const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::AudioDeviceRole impl_IDefaultAudioDeviceChangedEventArgs<T>::Role() const
{
	Windows::Media::Devices::AudioDeviceRole value = {};
	check(static_cast<IDefaultAudioDeviceChangedEventArgs const &>(static_cast<T const &>(*this))->get_Role(&value));
	return value;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetAudioCaptureSelector() const
{
	String selector = {};
	check(static_cast<IMediaDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetAudioCaptureSelector(set(selector)));
	return selector;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetAudioRenderSelector() const
{
	String selector = {};
	check(static_cast<IMediaDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetAudioRenderSelector(set(selector)));
	return selector;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetVideoCaptureSelector() const
{
	String selector = {};
	check(static_cast<IMediaDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetVideoCaptureSelector(set(selector)));
	return selector;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetDefaultAudioCaptureId(Windows::Media::Devices::AudioDeviceRole const role) const
{
	String deviceId = {};
	check(static_cast<IMediaDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDefaultAudioCaptureId(role, set(deviceId)));
	return deviceId;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetDefaultAudioRenderId(Windows::Media::Devices::AudioDeviceRole const role) const
{
	String deviceId = {};
	check(static_cast<IMediaDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDefaultAudioRenderId(role, set(deviceId)));
	return deviceId;
}

template <typename T> EventRegistrationToken impl_IMediaDeviceStatics<T>::DefaultAudioCaptureDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMediaDeviceStatics const &>(static_cast<T const &>(*this))->add_DefaultAudioCaptureDeviceChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaDeviceStatics<T>::DefaultAudioCaptureDeviceChanged(F handler) const
{
	return DefaultAudioCaptureDeviceChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaDeviceStatics<T>::DefaultAudioCaptureDeviceChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<IMediaDeviceStatics const &>(static_cast<T const &>(*this))->remove_DefaultAudioCaptureDeviceChanged(cookie));
}

template <typename T> EventRegistrationToken impl_IMediaDeviceStatics<T>::DefaultAudioRenderDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMediaDeviceStatics const &>(static_cast<T const &>(*this))->add_DefaultAudioRenderDeviceChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaDeviceStatics<T>::DefaultAudioRenderDeviceChanged(F handler) const
{
	return DefaultAudioRenderDeviceChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaDeviceStatics<T>::DefaultAudioRenderDeviceChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<IMediaDeviceStatics const &>(static_cast<T const &>(*this))->remove_DefaultAudioRenderDeviceChanged(cookie));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::CaptureSceneMode> impl_ISceneModeControl<T>::SupportedModes() const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::CaptureSceneMode> value = {};
	check(static_cast<ISceneModeControl const &>(static_cast<T const &>(*this))->get_SupportedModes(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::CaptureSceneMode impl_ISceneModeControl<T>::Value() const
{
	Windows::Media::Devices::CaptureSceneMode value = {};
	check(static_cast<ISceneModeControl const &>(static_cast<T const &>(*this))->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISceneModeControl<T>::SetValueAsync(Windows::Media::Devices::CaptureSceneMode const sceneMode) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<ISceneModeControl const &>(static_cast<T const &>(*this))->abi_SetValueAsync(sceneMode, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_ITorchControl<T>::Supported() const
{
	bool value = {};
	check(static_cast<ITorchControl const &>(static_cast<T const &>(*this))->get_Supported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ITorchControl<T>::PowerSupported() const
{
	bool value = {};
	check(static_cast<ITorchControl const &>(static_cast<T const &>(*this))->get_PowerSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ITorchControl<T>::Enabled() const
{
	bool value = {};
	check(static_cast<ITorchControl const &>(static_cast<T const &>(*this))->get_Enabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ITorchControl<T>::Enabled(bool const value) const
{
	check(static_cast<ITorchControl const &>(static_cast<T const &>(*this))->put_Enabled(value));
}

template <typename T> float impl_ITorchControl<T>::PowerPercent() const
{
	float value = {};
	check(static_cast<ITorchControl const &>(static_cast<T const &>(*this))->get_PowerPercent(&value));
	return value;
}

template <typename T> void impl_ITorchControl<T>::PowerPercent(float const value) const
{
	check(static_cast<ITorchControl const &>(static_cast<T const &>(*this))->put_PowerPercent(value));
}

template <typename T> bool impl_IFlashControl<T>::Supported() const
{
	bool value = {};
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->get_Supported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IFlashControl<T>::PowerSupported() const
{
	bool value = {};
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->get_PowerSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IFlashControl<T>::RedEyeReductionSupported() const
{
	bool value = {};
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->get_RedEyeReductionSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IFlashControl<T>::Enabled() const
{
	bool value = {};
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->get_Enabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IFlashControl<T>::Enabled(bool const value) const
{
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->put_Enabled(value));
}

template <typename T> bool impl_IFlashControl<T>::Auto() const
{
	bool value = {};
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->get_Auto(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IFlashControl<T>::Auto(bool const value) const
{
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->put_Auto(value));
}

template <typename T> bool impl_IFlashControl<T>::RedEyeReduction() const
{
	bool value = {};
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->get_RedEyeReduction(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IFlashControl<T>::RedEyeReduction(bool const value) const
{
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->put_RedEyeReduction(value));
}

template <typename T> float impl_IFlashControl<T>::PowerPercent() const
{
	float value = {};
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->get_PowerPercent(&value));
	return value;
}

template <typename T> void impl_IFlashControl<T>::PowerPercent(float const value) const
{
	check(static_cast<IFlashControl const &>(static_cast<T const &>(*this))->put_PowerPercent(value));
}

template <typename T> bool impl_IExposureCompensationControl<T>::Supported() const
{
	bool value = {};
	check(static_cast<IExposureCompensationControl const &>(static_cast<T const &>(*this))->get_Supported(BoolProxy(value)));
	return value;
}

template <typename T> float impl_IExposureCompensationControl<T>::Min() const
{
	float value = {};
	check(static_cast<IExposureCompensationControl const &>(static_cast<T const &>(*this))->get_Min(&value));
	return value;
}

template <typename T> float impl_IExposureCompensationControl<T>::Max() const
{
	float value = {};
	check(static_cast<IExposureCompensationControl const &>(static_cast<T const &>(*this))->get_Max(&value));
	return value;
}

template <typename T> float impl_IExposureCompensationControl<T>::Step() const
{
	float value = {};
	check(static_cast<IExposureCompensationControl const &>(static_cast<T const &>(*this))->get_Step(&value));
	return value;
}

template <typename T> float impl_IExposureCompensationControl<T>::Value() const
{
	float value = {};
	check(static_cast<IExposureCompensationControl const &>(static_cast<T const &>(*this))->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IExposureCompensationControl<T>::SetValueAsync(float const value) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IExposureCompensationControl const &>(static_cast<T const &>(*this))->abi_SetValueAsync(value, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IIsoSpeedControl<T>::Supported() const
{
	bool value = {};
	check(static_cast<IIsoSpeedControl const &>(static_cast<T const &>(*this))->get_Supported(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::IsoSpeedPreset> impl_IIsoSpeedControl<T>::SupportedPresets() const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::IsoSpeedPreset> value = {};
	check(static_cast<IIsoSpeedControl const &>(static_cast<T const &>(*this))->get_SupportedPresets(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::IsoSpeedPreset impl_IIsoSpeedControl<T>::Preset() const
{
	Windows::Media::Devices::IsoSpeedPreset value = {};
	check(static_cast<IIsoSpeedControl const &>(static_cast<T const &>(*this))->get_Preset(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IIsoSpeedControl<T>::SetPresetAsync(Windows::Media::Devices::IsoSpeedPreset const preset) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IIsoSpeedControl const &>(static_cast<T const &>(*this))->abi_SetPresetAsync(preset, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IWhiteBalanceControl<T>::Supported() const
{
	bool value = {};
	check(static_cast<IWhiteBalanceControl const &>(static_cast<T const &>(*this))->get_Supported(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Media::Devices::ColorTemperaturePreset impl_IWhiteBalanceControl<T>::Preset() const
{
	Windows::Media::Devices::ColorTemperaturePreset value = {};
	check(static_cast<IWhiteBalanceControl const &>(static_cast<T const &>(*this))->get_Preset(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWhiteBalanceControl<T>::SetPresetAsync(Windows::Media::Devices::ColorTemperaturePreset const preset) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IWhiteBalanceControl const &>(static_cast<T const &>(*this))->abi_SetPresetAsync(preset, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_IWhiteBalanceControl<T>::Min() const
{
	unsigned value = {};
	check(static_cast<IWhiteBalanceControl const &>(static_cast<T const &>(*this))->get_Min(&value));
	return value;
}

template <typename T> unsigned impl_IWhiteBalanceControl<T>::Max() const
{
	unsigned value = {};
	check(static_cast<IWhiteBalanceControl const &>(static_cast<T const &>(*this))->get_Max(&value));
	return value;
}

template <typename T> unsigned impl_IWhiteBalanceControl<T>::Step() const
{
	unsigned value = {};
	check(static_cast<IWhiteBalanceControl const &>(static_cast<T const &>(*this))->get_Step(&value));
	return value;
}

template <typename T> unsigned impl_IWhiteBalanceControl<T>::Value() const
{
	unsigned value = {};
	check(static_cast<IWhiteBalanceControl const &>(static_cast<T const &>(*this))->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWhiteBalanceControl<T>::SetValueAsync(unsigned const temperature) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IWhiteBalanceControl const &>(static_cast<T const &>(*this))->abi_SetValueAsync(temperature, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IExposureControl<T>::Supported() const
{
	bool value = {};
	check(static_cast<IExposureControl const &>(static_cast<T const &>(*this))->get_Supported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IExposureControl<T>::Auto() const
{
	bool value = {};
	check(static_cast<IExposureControl const &>(static_cast<T const &>(*this))->get_Auto(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IExposureControl<T>::SetAutoAsync(bool const value) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IExposureControl const &>(static_cast<T const &>(*this))->abi_SetAutoAsync(value, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::TimeSpan impl_IExposureControl<T>::Min() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IExposureControl const &>(static_cast<T const &>(*this))->get_Min(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IExposureControl<T>::Max() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IExposureControl const &>(static_cast<T const &>(*this))->get_Max(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IExposureControl<T>::Step() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IExposureControl const &>(static_cast<T const &>(*this))->get_Step(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IExposureControl<T>::Value() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IExposureControl const &>(static_cast<T const &>(*this))->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IExposureControl<T>::SetValueAsync(Windows::Foundation::TimeSpan const & shutterDuration) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IExposureControl const &>(static_cast<T const &>(*this))->abi_SetValueAsync(shutterDuration, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IFocusControl<T>::Supported() const
{
	bool value = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->get_Supported(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::FocusPreset> impl_IFocusControl<T>::SupportedPresets() const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Media::Devices::FocusPreset> value = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->get_SupportedPresets(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::FocusPreset impl_IFocusControl<T>::Preset() const
{
	Windows::Media::Devices::FocusPreset value = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->get_Preset(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl<T>::SetPresetAsync(Windows::Media::Devices::FocusPreset const preset) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->abi_SetPresetAsync(preset, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl<T>::SetPresetAsync(Windows::Media::Devices::FocusPreset const preset, bool const completeBeforeFocus) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->abi_SetPresetWithCompletionOptionAsync(preset, completeBeforeFocus, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_IFocusControl<T>::Min() const
{
	unsigned value = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->get_Min(&value));
	return value;
}

template <typename T> unsigned impl_IFocusControl<T>::Max() const
{
	unsigned value = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->get_Max(&value));
	return value;
}

template <typename T> unsigned impl_IFocusControl<T>::Step() const
{
	unsigned value = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->get_Step(&value));
	return value;
}

template <typename T> unsigned impl_IFocusControl<T>::Value() const
{
	unsigned value = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl<T>::SetValueAsync(unsigned const focus) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->abi_SetValueAsync(focus, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl<T>::FocusAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IFocusControl const &>(static_cast<T const &>(*this))->abi_FocusAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IRegionOfInterest<T>::AutoFocusEnabled() const
{
	bool value = {};
	check(static_cast<IRegionOfInterest const &>(static_cast<T const &>(*this))->get_AutoFocusEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IRegionOfInterest<T>::AutoFocusEnabled(bool const value) const
{
	check(static_cast<IRegionOfInterest const &>(static_cast<T const &>(*this))->put_AutoFocusEnabled(value));
}

template <typename T> bool impl_IRegionOfInterest<T>::AutoWhiteBalanceEnabled() const
{
	bool value = {};
	check(static_cast<IRegionOfInterest const &>(static_cast<T const &>(*this))->get_AutoWhiteBalanceEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IRegionOfInterest<T>::AutoWhiteBalanceEnabled(bool const value) const
{
	check(static_cast<IRegionOfInterest const &>(static_cast<T const &>(*this))->put_AutoWhiteBalanceEnabled(value));
}

template <typename T> bool impl_IRegionOfInterest<T>::AutoExposureEnabled() const
{
	bool value = {};
	check(static_cast<IRegionOfInterest const &>(static_cast<T const &>(*this))->get_AutoExposureEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IRegionOfInterest<T>::AutoExposureEnabled(bool const value) const
{
	check(static_cast<IRegionOfInterest const &>(static_cast<T const &>(*this))->put_AutoExposureEnabled(value));
}

template <typename T> Windows::Foundation::Rect impl_IRegionOfInterest<T>::Bounds() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IRegionOfInterest const &>(static_cast<T const &>(*this))->get_Bounds(&value));
	return value;
}

template <typename T> void impl_IRegionOfInterest<T>::Bounds(Windows::Foundation::Rect const & value) const
{
	check(static_cast<IRegionOfInterest const &>(static_cast<T const &>(*this))->put_Bounds(value));
}

template <typename T> unsigned impl_IRegionsOfInterestControl<T>::MaxRegions() const
{
	unsigned value = {};
	check(static_cast<IRegionsOfInterestControl const &>(static_cast<T const &>(*this))->get_MaxRegions(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IRegionsOfInterestControl<T>::SetRegionsAsync(Windows::Foundation::Collections::IIterable<Windows::Media::Devices::RegionOfInterest> const & regions) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IRegionsOfInterestControl const &>(static_cast<T const &>(*this))->abi_SetRegionsAsync(get(regions), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IRegionsOfInterestControl<T>::SetRegionsAsync(Windows::Foundation::Collections::IIterable<Windows::Media::Devices::RegionOfInterest> const & regions, bool const lockValues) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IRegionsOfInterestControl const &>(static_cast<T const &>(*this))->abi_SetRegionsWithLockAsync(get(regions), lockValues, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IRegionsOfInterestControl<T>::ClearRegionsAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IRegionsOfInterestControl const &>(static_cast<T const &>(*this))->abi_ClearRegionsAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IRegionsOfInterestControl<T>::AutoFocusSupported() const
{
	bool value = {};
	check(static_cast<IRegionsOfInterestControl const &>(static_cast<T const &>(*this))->get_AutoFocusSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IRegionsOfInterestControl<T>::AutoWhiteBalanceSupported() const
{
	bool value = {};
	check(static_cast<IRegionsOfInterestControl const &>(static_cast<T const &>(*this))->get_AutoWhiteBalanceSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IRegionsOfInterestControl<T>::AutoExposureSupported() const
{
	bool value = {};
	check(static_cast<IRegionsOfInterestControl const &>(static_cast<T const &>(*this))->get_AutoExposureSupported(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::IMediaEncodingProperties> impl_IMediaDeviceController<T>::GetAvailableMediaStreamProperties(Windows::Media::Capture::MediaStreamType const mediaStreamType) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::IMediaEncodingProperties> value = {};
	check(static_cast<IMediaDeviceController const &>(static_cast<T const &>(*this))->abi_GetAvailableMediaStreamProperties(mediaStreamType, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::IMediaEncodingProperties impl_IMediaDeviceController<T>::GetMediaStreamProperties(Windows::Media::Capture::MediaStreamType const mediaStreamType) const
{
	Windows::Media::MediaProperties::IMediaEncodingProperties value = {};
	check(static_cast<IMediaDeviceController const &>(static_cast<T const &>(*this))->abi_GetMediaStreamProperties(mediaStreamType, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaDeviceController<T>::SetMediaStreamPropertiesAsync(Windows::Media::Capture::MediaStreamType const mediaStreamType, Windows::Media::MediaProperties::IMediaEncodingProperties const & mediaEncodingProperties) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<IMediaDeviceController const &>(static_cast<T const &>(*this))->abi_SetMediaStreamPropertiesAsync(mediaStreamType, get(mediaEncodingProperties), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IAudioDeviceController<T>::Muted(bool const value) const
{
	check(static_cast<IAudioDeviceController const &>(static_cast<T const &>(*this))->put_Muted(value));
}

template <typename T> bool impl_IAudioDeviceController<T>::Muted() const
{
	bool value = {};
	check(static_cast<IAudioDeviceController const &>(static_cast<T const &>(*this))->get_Muted(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IAudioDeviceController<T>::VolumePercent(float const value) const
{
	check(static_cast<IAudioDeviceController const &>(static_cast<T const &>(*this))->put_VolumePercent(value));
}

template <typename T> float impl_IAudioDeviceController<T>::VolumePercent() const
{
	float value = {};
	check(static_cast<IAudioDeviceController const &>(static_cast<T const &>(*this))->get_VolumePercent(&value));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Brightness() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_Brightness(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Contrast() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_Contrast(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Hue() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_Hue(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::WhiteBalance() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_WhiteBalance(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::BacklightCompensation() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_BacklightCompensation(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Pan() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_Pan(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Tilt() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_Tilt(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Zoom() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_Zoom(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Roll() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_Roll(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Exposure() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_Exposure(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Focus() const
{
	Windows::Media::Devices::MediaDeviceControl value(nullptr);
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->get_Focus(set(value)));
	return value;
}

template <typename T> bool impl_IVideoDeviceController<T>::TrySetPowerlineFrequency(Windows::Media::Capture::PowerlineFrequency const value) const
{
	bool succeeded = {};
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->abi_TrySetPowerlineFrequency(value, BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IVideoDeviceController<T>::TryGetPowerlineFrequency(Windows::Media::Capture::PowerlineFrequency & value) const
{
	bool succeeded = {};
	check(static_cast<IVideoDeviceController const &>(static_cast<T const &>(*this))->abi_TryGetPowerlineFrequency(&value, BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Media::Devices::LowLagPhotoSequenceControl impl_IAdvancedVideoCaptureDeviceController2<T>::LowLagPhotoSequence() const
{
	Windows::Media::Devices::LowLagPhotoSequenceControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_LowLagPhotoSequence(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::LowLagPhotoControl impl_IAdvancedVideoCaptureDeviceController2<T>::LowLagPhoto() const
{
	Windows::Media::Devices::LowLagPhotoControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_LowLagPhoto(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::SceneModeControl impl_IAdvancedVideoCaptureDeviceController2<T>::SceneModeControl() const
{
	Windows::Media::Devices::SceneModeControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_SceneModeControl(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::TorchControl impl_IAdvancedVideoCaptureDeviceController2<T>::TorchControl() const
{
	Windows::Media::Devices::TorchControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_TorchControl(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::FlashControl impl_IAdvancedVideoCaptureDeviceController2<T>::FlashControl() const
{
	Windows::Media::Devices::FlashControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_FlashControl(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::WhiteBalanceControl impl_IAdvancedVideoCaptureDeviceController2<T>::WhiteBalanceControl() const
{
	Windows::Media::Devices::WhiteBalanceControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_WhiteBalanceControl(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::ExposureControl impl_IAdvancedVideoCaptureDeviceController2<T>::ExposureControl() const
{
	Windows::Media::Devices::ExposureControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_ExposureControl(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::FocusControl impl_IAdvancedVideoCaptureDeviceController2<T>::FocusControl() const
{
	Windows::Media::Devices::FocusControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_FocusControl(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::ExposureCompensationControl impl_IAdvancedVideoCaptureDeviceController2<T>::ExposureCompensationControl() const
{
	Windows::Media::Devices::ExposureCompensationControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_ExposureCompensationControl(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::IsoSpeedControl impl_IAdvancedVideoCaptureDeviceController2<T>::IsoSpeedControl() const
{
	Windows::Media::Devices::IsoSpeedControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_IsoSpeedControl(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::RegionsOfInterestControl impl_IAdvancedVideoCaptureDeviceController2<T>::RegionsOfInterestControl() const
{
	Windows::Media::Devices::RegionsOfInterestControl value(nullptr);
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_RegionsOfInterestControl(set(value)));
	return value;
}

template <typename T> Windows::Media::Devices::CaptureUse impl_IAdvancedVideoCaptureDeviceController2<T>::PrimaryUse() const
{
	Windows::Media::Devices::CaptureUse value = {};
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->get_PrimaryUse(&value));
	return value;
}

template <typename T> void impl_IAdvancedVideoCaptureDeviceController2<T>::PrimaryUse(Windows::Media::Devices::CaptureUse const value) const
{
	check(static_cast<IAdvancedVideoCaptureDeviceController2 const &>(static_cast<T const &>(*this))->put_PrimaryUse(value));
}

template <typename T> Windows::Media::Devices::MediaDeviceControlCapabilities impl_IMediaDeviceControl<T>::Capabilities() const
{
	Windows::Media::Devices::MediaDeviceControlCapabilities value(nullptr);
	check(static_cast<IMediaDeviceControl const &>(static_cast<T const &>(*this))->get_Capabilities(set(value)));
	return value;
}

template <typename T> bool impl_IMediaDeviceControl<T>::TryGetValue(double & value) const
{
	bool succeeded = {};
	check(static_cast<IMediaDeviceControl const &>(static_cast<T const &>(*this))->abi_TryGetValue(&value, BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IMediaDeviceControl<T>::TrySetValue(double const value) const
{
	bool succeeded = {};
	check(static_cast<IMediaDeviceControl const &>(static_cast<T const &>(*this))->abi_TrySetValue(value, BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IMediaDeviceControl<T>::TryGetAuto(bool & value) const
{
	bool succeeded = {};
	check(static_cast<IMediaDeviceControl const &>(static_cast<T const &>(*this))->abi_TryGetAuto(BoolProxy(value), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IMediaDeviceControl<T>::TrySetAuto(bool const value) const
{
	bool succeeded = {};
	check(static_cast<IMediaDeviceControl const &>(static_cast<T const &>(*this))->abi_TrySetAuto(value, BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IMediaDeviceControlCapabilities<T>::Supported() const
{
	bool value = {};
	check(static_cast<IMediaDeviceControlCapabilities const &>(static_cast<T const &>(*this))->get_Supported(BoolProxy(value)));
	return value;
}

template <typename T> double impl_IMediaDeviceControlCapabilities<T>::Min() const
{
	double value = {};
	check(static_cast<IMediaDeviceControlCapabilities const &>(static_cast<T const &>(*this))->get_Min(&value));
	return value;
}

template <typename T> double impl_IMediaDeviceControlCapabilities<T>::Max() const
{
	double value = {};
	check(static_cast<IMediaDeviceControlCapabilities const &>(static_cast<T const &>(*this))->get_Max(&value));
	return value;
}

template <typename T> double impl_IMediaDeviceControlCapabilities<T>::Step() const
{
	double value = {};
	check(static_cast<IMediaDeviceControlCapabilities const &>(static_cast<T const &>(*this))->get_Step(&value));
	return value;
}

template <typename T> double impl_IMediaDeviceControlCapabilities<T>::Default() const
{
	double value = {};
	check(static_cast<IMediaDeviceControlCapabilities const &>(static_cast<T const &>(*this))->get_Default(&value));
	return value;
}

template <typename T> bool impl_IMediaDeviceControlCapabilities<T>::AutoModeSupported() const
{
	bool value = {};
	check(static_cast<IMediaDeviceControlCapabilities const &>(static_cast<T const &>(*this))->get_AutoModeSupported(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IAdvancedVideoCaptureDeviceController<T>::SetDeviceProperty(String const & propertyId, IInspectable const & propertyValue) const
{
	check(static_cast<IAdvancedVideoCaptureDeviceController const &>(static_cast<T const &>(*this))->abi_SetDeviceProperty(get(propertyId), get(propertyValue)));
}

template <typename T> template <unsigned S0> void impl_IAdvancedVideoCaptureDeviceController<T>::SetDeviceProperty(wchar_t const (&propertyId)[S0], IInspectable const & propertyValue) const
{
	check(static_cast<IAdvancedVideoCaptureDeviceController const &>(static_cast<T const &>(*this))->abi_SetDeviceProperty(StringReference(propertyId), get(propertyValue)));
}

template <typename T> IInspectable impl_IAdvancedVideoCaptureDeviceController<T>::GetDeviceProperty(String const & propertyId) const
{
	IInspectable propertyValue = {};
	check(static_cast<IAdvancedVideoCaptureDeviceController const &>(static_cast<T const &>(*this))->abi_GetDeviceProperty(get(propertyId), set(propertyValue)));
	return propertyValue;
}

template <typename T> template <unsigned S0> IInspectable impl_IAdvancedVideoCaptureDeviceController<T>::GetDeviceProperty(wchar_t const (&propertyId)[S0]) const
{
	IInspectable propertyValue = {};
	check(static_cast<IAdvancedVideoCaptureDeviceController const &>(static_cast<T const &>(*this))->abi_GetDeviceProperty(StringReference(propertyId), set(propertyValue)));
	return propertyValue;
}

template <typename T> bool impl_ILowLagPhotoSequenceControl<T>::Supported() const
{
	bool value = {};
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->get_Supported(BoolProxy(value)));
	return value;
}

template <typename T> unsigned impl_ILowLagPhotoSequenceControl<T>::MaxPastPhotos() const
{
	unsigned value = {};
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->get_MaxPastPhotos(&value));
	return value;
}

template <typename T> float impl_ILowLagPhotoSequenceControl<T>::MaxPhotosPerSecond() const
{
	float value = {};
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->get_MaxPhotosPerSecond(&value));
	return value;
}

template <typename T> unsigned impl_ILowLagPhotoSequenceControl<T>::PastPhotoLimit() const
{
	unsigned value = {};
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->get_PastPhotoLimit(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::PastPhotoLimit(unsigned const value) const
{
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->put_PastPhotoLimit(value));
}

template <typename T> float impl_ILowLagPhotoSequenceControl<T>::PhotosPerSecondLimit() const
{
	float value = {};
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->get_PhotosPerSecondLimit(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::PhotosPerSecondLimit(float const value) const
{
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->put_PhotosPerSecondLimit(value));
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_ILowLagPhotoSequenceControl<T>::GetHighestConcurrentFrameRate(Windows::Media::MediaProperties::IMediaEncodingProperties const & captureProperties) const
{
	Windows::Media::MediaProperties::MediaRatio value(nullptr);
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->abi_GetHighestConcurrentFrameRate(get(captureProperties), set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_ILowLagPhotoSequenceControl<T>::GetCurrentFrameRate() const
{
	Windows::Media::MediaProperties::MediaRatio value(nullptr);
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->abi_GetCurrentFrameRate(set(value)));
	return value;
}

template <typename T> bool impl_ILowLagPhotoSequenceControl<T>::ThumbnailEnabled() const
{
	bool value = {};
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->get_ThumbnailEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::ThumbnailEnabled(bool const value) const
{
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->put_ThumbnailEnabled(value));
}

template <typename T> Windows::Media::MediaProperties::MediaThumbnailFormat impl_ILowLagPhotoSequenceControl<T>::ThumbnailFormat() const
{
	Windows::Media::MediaProperties::MediaThumbnailFormat value = {};
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->get_ThumbnailFormat(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::ThumbnailFormat(Windows::Media::MediaProperties::MediaThumbnailFormat const value) const
{
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->put_ThumbnailFormat(value));
}

template <typename T> unsigned impl_ILowLagPhotoSequenceControl<T>::DesiredThumbnailSize() const
{
	unsigned value = {};
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->get_DesiredThumbnailSize(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::DesiredThumbnailSize(unsigned const value) const
{
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->put_DesiredThumbnailSize(value));
}

template <typename T> unsigned impl_ILowLagPhotoSequenceControl<T>::HardwareAcceleratedThumbnailSupported() const
{
	unsigned value = {};
	check(static_cast<ILowLagPhotoSequenceControl const &>(static_cast<T const &>(*this))->get_HardwareAcceleratedThumbnailSupported(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_ILowLagPhotoControl<T>::GetHighestConcurrentFrameRate(Windows::Media::MediaProperties::IMediaEncodingProperties const & captureProperties) const
{
	Windows::Media::MediaProperties::MediaRatio value(nullptr);
	check(static_cast<ILowLagPhotoControl const &>(static_cast<T const &>(*this))->abi_GetHighestConcurrentFrameRate(get(captureProperties), set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_ILowLagPhotoControl<T>::GetCurrentFrameRate() const
{
	Windows::Media::MediaProperties::MediaRatio value(nullptr);
	check(static_cast<ILowLagPhotoControl const &>(static_cast<T const &>(*this))->abi_GetCurrentFrameRate(set(value)));
	return value;
}

template <typename T> bool impl_ILowLagPhotoControl<T>::ThumbnailEnabled() const
{
	bool value = {};
	check(static_cast<ILowLagPhotoControl const &>(static_cast<T const &>(*this))->get_ThumbnailEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ILowLagPhotoControl<T>::ThumbnailEnabled(bool const value) const
{
	check(static_cast<ILowLagPhotoControl const &>(static_cast<T const &>(*this))->put_ThumbnailEnabled(value));
}

template <typename T> Windows::Media::MediaProperties::MediaThumbnailFormat impl_ILowLagPhotoControl<T>::ThumbnailFormat() const
{
	Windows::Media::MediaProperties::MediaThumbnailFormat value = {};
	check(static_cast<ILowLagPhotoControl const &>(static_cast<T const &>(*this))->get_ThumbnailFormat(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoControl<T>::ThumbnailFormat(Windows::Media::MediaProperties::MediaThumbnailFormat const value) const
{
	check(static_cast<ILowLagPhotoControl const &>(static_cast<T const &>(*this))->put_ThumbnailFormat(value));
}

template <typename T> unsigned impl_ILowLagPhotoControl<T>::DesiredThumbnailSize() const
{
	unsigned value = {};
	check(static_cast<ILowLagPhotoControl const &>(static_cast<T const &>(*this))->get_DesiredThumbnailSize(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoControl<T>::DesiredThumbnailSize(unsigned const value) const
{
	check(static_cast<ILowLagPhotoControl const &>(static_cast<T const &>(*this))->put_DesiredThumbnailSize(value));
}

template <typename T> unsigned impl_ILowLagPhotoControl<T>::HardwareAcceleratedThumbnailSupported() const
{
	unsigned value = {};
	check(static_cast<ILowLagPhotoControl const &>(static_cast<T const &>(*this))->get_HardwareAcceleratedThumbnailSupported(&value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

template <typename T> Windows::Media::Effects::AudioEffectType impl_IAudioEffect<T>::AudioEffectType() const
{
	Windows::Media::Effects::AudioEffectType value = {};
	check(static_cast<IAudioEffect const &>(static_cast<T const &>(*this))->get_AudioEffectType(&value));
	return value;
}

template <typename T> Windows::Media::Effects::AudioRenderEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory const category) const
{
	Windows::Media::Effects::AudioRenderEffectsManager value(nullptr);
	check(static_cast<IAudioEffectsManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateAudioRenderEffectsManager(get(deviceId), category, set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Media::Effects::AudioRenderEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory const category) const
{
	Windows::Media::Effects::AudioRenderEffectsManager value(nullptr);
	check(static_cast<IAudioEffectsManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateAudioRenderEffectsManager(StringReference(deviceId), category, set(value)));
	return value;
}

template <typename T> Windows::Media::Effects::AudioRenderEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory const category, Windows::Media::AudioProcessing const mode) const
{
	Windows::Media::Effects::AudioRenderEffectsManager value(nullptr);
	check(static_cast<IAudioEffectsManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateAudioRenderEffectsManagerWithMode(get(deviceId), category, mode, set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Media::Effects::AudioRenderEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory const category, Windows::Media::AudioProcessing const mode) const
{
	Windows::Media::Effects::AudioRenderEffectsManager value(nullptr);
	check(static_cast<IAudioEffectsManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateAudioRenderEffectsManagerWithMode(StringReference(deviceId), category, mode, set(value)));
	return value;
}

template <typename T> Windows::Media::Effects::AudioCaptureEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory const category) const
{
	Windows::Media::Effects::AudioCaptureEffectsManager value(nullptr);
	check(static_cast<IAudioEffectsManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateAudioCaptureEffectsManager(get(deviceId), category, set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Media::Effects::AudioCaptureEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory const category) const
{
	Windows::Media::Effects::AudioCaptureEffectsManager value(nullptr);
	check(static_cast<IAudioEffectsManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateAudioCaptureEffectsManager(StringReference(deviceId), category, set(value)));
	return value;
}

template <typename T> Windows::Media::Effects::AudioCaptureEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory const category, Windows::Media::AudioProcessing const mode) const
{
	Windows::Media::Effects::AudioCaptureEffectsManager value(nullptr);
	check(static_cast<IAudioEffectsManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateAudioCaptureEffectsManagerWithMode(get(deviceId), category, mode, set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Media::Effects::AudioCaptureEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory const category, Windows::Media::AudioProcessing const mode) const
{
	Windows::Media::Effects::AudioCaptureEffectsManager value(nullptr);
	check(static_cast<IAudioEffectsManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateAudioCaptureEffectsManagerWithMode(StringReference(deviceId), category, mode, set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IAudioRenderEffectsManager<T>::AudioRenderEffectsChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Effects::AudioRenderEffectsManager, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IAudioRenderEffectsManager const &>(static_cast<T const &>(*this))->add_AudioRenderEffectsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IAudioRenderEffectsManager<T>::AudioRenderEffectsChanged(F handler) const
{
	return AudioRenderEffectsChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Effects::AudioRenderEffectsManager, IInspectable>(handler));
}

template <typename T> void impl_IAudioRenderEffectsManager<T>::AudioRenderEffectsChanged(EventRegistrationToken const token) const
{
	check(static_cast<IAudioRenderEffectsManager const &>(static_cast<T const &>(*this))->remove_AudioRenderEffectsChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> impl_IAudioRenderEffectsManager<T>::GetAudioRenderEffects() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> effects = {};
	check(static_cast<IAudioRenderEffectsManager const &>(static_cast<T const &>(*this))->abi_GetAudioRenderEffects(set(effects)));
	return effects;
}

template <typename T> EventRegistrationToken impl_IAudioCaptureEffectsManager<T>::AudioCaptureEffectsChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Effects::AudioCaptureEffectsManager, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IAudioCaptureEffectsManager const &>(static_cast<T const &>(*this))->add_AudioCaptureEffectsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IAudioCaptureEffectsManager<T>::AudioCaptureEffectsChanged(F handler) const
{
	return AudioCaptureEffectsChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Effects::AudioCaptureEffectsManager, IInspectable>(handler));
}

template <typename T> void impl_IAudioCaptureEffectsManager<T>::AudioCaptureEffectsChanged(EventRegistrationToken const token) const
{
	check(static_cast<IAudioCaptureEffectsManager const &>(static_cast<T const &>(*this))->remove_AudioCaptureEffectsChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> impl_IAudioCaptureEffectsManager<T>::GetAudioCaptureEffects() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> effects = {};
	check(static_cast<IAudioCaptureEffectsManager const &>(static_cast<T const &>(*this))->abi_GetAudioCaptureEffects(set(effects)));
	return effects;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

template <typename T> void impl_IMediaRatio<T>::Numerator(unsigned const value) const
{
	check(static_cast<IMediaRatio const &>(static_cast<T const &>(*this))->put_Numerator(value));
}

template <typename T> unsigned impl_IMediaRatio<T>::Numerator() const
{
	unsigned value = {};
	check(static_cast<IMediaRatio const &>(static_cast<T const &>(*this))->get_Numerator(&value));
	return value;
}

template <typename T> void impl_IMediaRatio<T>::Denominator(unsigned const value) const
{
	check(static_cast<IMediaRatio const &>(static_cast<T const &>(*this))->put_Denominator(value));
}

template <typename T> unsigned impl_IMediaRatio<T>::Denominator() const
{
	unsigned value = {};
	check(static_cast<IMediaRatio const &>(static_cast<T const &>(*this))->get_Denominator(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaPropertySet impl_IMediaEncodingProperties<T>::Properties() const
{
	Windows::Media::MediaProperties::MediaPropertySet value(nullptr);
	check(static_cast<IMediaEncodingProperties const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingProperties<T>::Type() const
{
	String value = {};
	check(static_cast<IMediaEncodingProperties const &>(static_cast<T const &>(*this))->get_Type(set(value)));
	return value;
}

template <typename T> void impl_IMediaEncodingProperties<T>::Subtype(String const & value) const
{
	check(static_cast<IMediaEncodingProperties const &>(static_cast<T const &>(*this))->put_Subtype(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMediaEncodingProperties<T>::Subtype(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMediaEncodingProperties const &>(static_cast<T const &>(*this))->put_Subtype(StringReference(value)));
}

template <typename T> String impl_IMediaEncodingProperties<T>::Subtype() const
{
	String value = {};
	check(static_cast<IMediaEncodingProperties const &>(static_cast<T const &>(*this))->get_Subtype(set(value)));
	return value;
}

template <typename T> void impl_IAudioEncodingProperties<T>::Bitrate(unsigned const value) const
{
	check(static_cast<IAudioEncodingProperties const &>(static_cast<T const &>(*this))->put_Bitrate(value));
}

template <typename T> unsigned impl_IAudioEncodingProperties<T>::Bitrate() const
{
	unsigned value = {};
	check(static_cast<IAudioEncodingProperties const &>(static_cast<T const &>(*this))->get_Bitrate(&value));
	return value;
}

template <typename T> void impl_IAudioEncodingProperties<T>::ChannelCount(unsigned const value) const
{
	check(static_cast<IAudioEncodingProperties const &>(static_cast<T const &>(*this))->put_ChannelCount(value));
}

template <typename T> unsigned impl_IAudioEncodingProperties<T>::ChannelCount() const
{
	unsigned value = {};
	check(static_cast<IAudioEncodingProperties const &>(static_cast<T const &>(*this))->get_ChannelCount(&value));
	return value;
}

template <typename T> void impl_IAudioEncodingProperties<T>::SampleRate(unsigned const value) const
{
	check(static_cast<IAudioEncodingProperties const &>(static_cast<T const &>(*this))->put_SampleRate(value));
}

template <typename T> unsigned impl_IAudioEncodingProperties<T>::SampleRate() const
{
	unsigned value = {};
	check(static_cast<IAudioEncodingProperties const &>(static_cast<T const &>(*this))->get_SampleRate(&value));
	return value;
}

template <typename T> void impl_IAudioEncodingProperties<T>::BitsPerSample(unsigned const value) const
{
	check(static_cast<IAudioEncodingProperties const &>(static_cast<T const &>(*this))->put_BitsPerSample(value));
}

template <typename T> unsigned impl_IAudioEncodingProperties<T>::BitsPerSample() const
{
	unsigned value = {};
	check(static_cast<IAudioEncodingProperties const &>(static_cast<T const &>(*this))->get_BitsPerSample(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreateAac(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value(nullptr);
	check(static_cast<IAudioEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateAac(sampleRate, channelCount, bitrate, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreateAacAdts(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value(nullptr);
	check(static_cast<IAudioEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateAacAdts(sampleRate, channelCount, bitrate, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreateMp3(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value(nullptr);
	check(static_cast<IAudioEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateMp3(sampleRate, channelCount, bitrate, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreatePcm(unsigned const sampleRate, unsigned const channelCount, unsigned const bitsPerSample) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value(nullptr);
	check(static_cast<IAudioEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreatePcm(sampleRate, channelCount, bitsPerSample, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreateWma(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value(nullptr);
	check(static_cast<IAudioEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateWma(sampleRate, channelCount, bitrate, set(value)));
	return value;
}

template <typename T> void impl_IVideoEncodingProperties<T>::Bitrate(unsigned const value) const
{
	check(static_cast<IVideoEncodingProperties const &>(static_cast<T const &>(*this))->put_Bitrate(value));
}

template <typename T> unsigned impl_IVideoEncodingProperties<T>::Bitrate() const
{
	unsigned value = {};
	check(static_cast<IVideoEncodingProperties const &>(static_cast<T const &>(*this))->get_Bitrate(&value));
	return value;
}

template <typename T> void impl_IVideoEncodingProperties<T>::Width(unsigned const value) const
{
	check(static_cast<IVideoEncodingProperties const &>(static_cast<T const &>(*this))->put_Width(value));
}

template <typename T> unsigned impl_IVideoEncodingProperties<T>::Width() const
{
	unsigned value = {};
	check(static_cast<IVideoEncodingProperties const &>(static_cast<T const &>(*this))->get_Width(&value));
	return value;
}

template <typename T> void impl_IVideoEncodingProperties<T>::Height(unsigned const value) const
{
	check(static_cast<IVideoEncodingProperties const &>(static_cast<T const &>(*this))->put_Height(value));
}

template <typename T> unsigned impl_IVideoEncodingProperties<T>::Height() const
{
	unsigned value = {};
	check(static_cast<IVideoEncodingProperties const &>(static_cast<T const &>(*this))->get_Height(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_IVideoEncodingProperties<T>::FrameRate() const
{
	Windows::Media::MediaProperties::MediaRatio value(nullptr);
	check(static_cast<IVideoEncodingProperties const &>(static_cast<T const &>(*this))->get_FrameRate(set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_IVideoEncodingProperties<T>::PixelAspectRatio() const
{
	Windows::Media::MediaProperties::MediaRatio value(nullptr);
	check(static_cast<IVideoEncodingProperties const &>(static_cast<T const &>(*this))->get_PixelAspectRatio(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Aac() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Aac(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::AacAdts() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_AacAdts(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Ac3() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Ac3(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::AmrNb() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_AmrNb(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::AmrWb() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_AmrWb(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Argb32() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Argb32(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Asf() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Asf(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Avi() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Avi(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Bgra8() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Bgra8(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Bmp() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Bmp(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Eac3() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Eac3(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Float() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Float(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Gif() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Gif(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::H263() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_H263(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::H264() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_H264(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::H264Es() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_H264Es(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Hevc() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Hevc(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::HevcEs() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_HevcEs(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Iyuv() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Iyuv(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Jpeg() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Jpeg(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::JpegXr() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_JpegXr(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mjpg() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Mjpg(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mpeg() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Mpeg(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mpeg1() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Mpeg1(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mpeg2() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Mpeg2(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mp3() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Mp3(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mpeg4() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Mpeg4(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Nv12() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Nv12(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Pcm() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Pcm(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Png() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Png(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Rgb24() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Rgb24(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Rgb32() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Rgb32(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Tiff() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Tiff(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wave() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Wave(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wma8() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Wma8(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wma9() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Wma9(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wmv3() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Wmv3(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wvc1() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Wvc1(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Yuy2() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Yuy2(set(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Yv12() const
{
	String value = {};
	check(static_cast<IMediaEncodingSubtypesStatics const &>(static_cast<T const &>(*this))->get_Yv12(set(value)));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::ConstrainedBaseline() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_ConstrainedBaseline(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::Baseline() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_Baseline(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::Extended() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_Extended(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::Main() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_Main(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::High() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_High(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::High10() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_High10(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::High422() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_High422(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::High444() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_High444(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::StereoHigh() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_StereoHigh(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::MultiviewHigh() const
{
	int value = {};
	check(static_cast<IH264ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_MultiviewHigh(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::Simple() const
{
	int value = {};
	check(static_cast<IMpeg2ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_Simple(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::Main() const
{
	int value = {};
	check(static_cast<IMpeg2ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_Main(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::SignalNoiseRatioScalable() const
{
	int value = {};
	check(static_cast<IMpeg2ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_SignalNoiseRatioScalable(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::SpatiallyScalable() const
{
	int value = {};
	check(static_cast<IMpeg2ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_SpatiallyScalable(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::High() const
{
	int value = {};
	check(static_cast<IMpeg2ProfileIdsStatics const &>(static_cast<T const &>(*this))->get_High(&value));
	return value;
}

template <typename T> void impl_IVideoEncodingProperties2<T>::ProfileId(int const value) const
{
	check(static_cast<IVideoEncodingProperties2 const &>(static_cast<T const &>(*this))->put_ProfileId(value));
}

template <typename T> int impl_IVideoEncodingProperties2<T>::ProfileId() const
{
	int value = {};
	check(static_cast<IVideoEncodingProperties2 const &>(static_cast<T const &>(*this))->get_ProfileId(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoEncodingPropertiesStatics<T>::CreateH264() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value(nullptr);
	check(static_cast<IVideoEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateH264(set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoEncodingPropertiesStatics<T>::CreateMpeg2() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value(nullptr);
	check(static_cast<IVideoEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateMpeg2(set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoEncodingPropertiesStatics<T>::CreateUncompressed(String const & subtype, unsigned const width, unsigned const height) const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value(nullptr);
	check(static_cast<IVideoEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateUncompressed(get(subtype), width, height, set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoEncodingPropertiesStatics<T>::CreateUncompressed(wchar_t const (&subtype)[S0], unsigned const width, unsigned const height) const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value(nullptr);
	check(static_cast<IVideoEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateUncompressed(StringReference(subtype), width, height, set(value)));
	return value;
}

template <typename T> void impl_IImageEncodingProperties<T>::Width(unsigned const value) const
{
	check(static_cast<IImageEncodingProperties const &>(static_cast<T const &>(*this))->put_Width(value));
}

template <typename T> unsigned impl_IImageEncodingProperties<T>::Width() const
{
	unsigned value = {};
	check(static_cast<IImageEncodingProperties const &>(static_cast<T const &>(*this))->get_Width(&value));
	return value;
}

template <typename T> void impl_IImageEncodingProperties<T>::Height(unsigned const value) const
{
	check(static_cast<IImageEncodingProperties const &>(static_cast<T const &>(*this))->put_Height(value));
}

template <typename T> unsigned impl_IImageEncodingProperties<T>::Height() const
{
	unsigned value = {};
	check(static_cast<IImageEncodingProperties const &>(static_cast<T const &>(*this))->get_Height(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics<T>::CreateJpeg() const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value(nullptr);
	check(static_cast<IImageEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateJpeg(set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics<T>::CreatePng() const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value(nullptr);
	check(static_cast<IImageEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreatePng(set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics<T>::CreateJpegXR() const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value(nullptr);
	check(static_cast<IImageEncodingPropertiesStatics const &>(static_cast<T const &>(*this))->abi_CreateJpegXR(set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics2<T>::CreateUncompressed(Windows::Media::MediaProperties::MediaPixelFormat const format) const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value(nullptr);
	check(static_cast<IImageEncodingPropertiesStatics2 const &>(static_cast<T const &>(*this))->abi_CreateUncompressed(format, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics2<T>::CreateBmp() const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value(nullptr);
	check(static_cast<IImageEncodingPropertiesStatics2 const &>(static_cast<T const &>(*this))->abi_CreateBmp(set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateM4a(Windows::Media::MediaProperties::AudioEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value(nullptr);
	check(static_cast<IMediaEncodingProfileStatics const &>(static_cast<T const &>(*this))->abi_CreateM4a(quality, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateMp3(Windows::Media::MediaProperties::AudioEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value(nullptr);
	check(static_cast<IMediaEncodingProfileStatics const &>(static_cast<T const &>(*this))->abi_CreateMp3(quality, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateWma(Windows::Media::MediaProperties::AudioEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value(nullptr);
	check(static_cast<IMediaEncodingProfileStatics const &>(static_cast<T const &>(*this))->abi_CreateWma(quality, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateMp4(Windows::Media::MediaProperties::VideoEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value(nullptr);
	check(static_cast<IMediaEncodingProfileStatics const &>(static_cast<T const &>(*this))->abi_CreateMp4(quality, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateWmv(Windows::Media::MediaProperties::VideoEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value(nullptr);
	check(static_cast<IMediaEncodingProfileStatics const &>(static_cast<T const &>(*this))->abi_CreateWmv(quality, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> impl_IMediaEncodingProfileStatics<T>::CreateFromFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> operation = {};
	check(static_cast<IMediaEncodingProfileStatics const &>(static_cast<T const &>(*this))->abi_CreateFromFileAsync(get(file), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> impl_IMediaEncodingProfileStatics<T>::CreateFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> operation = {};
	check(static_cast<IMediaEncodingProfileStatics const &>(static_cast<T const &>(*this))->abi_CreateFromStreamAsync(get(stream), set(operation)));
	return operation;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics2<T>::CreateWav(Windows::Media::MediaProperties::AudioEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value(nullptr);
	check(static_cast<IMediaEncodingProfileStatics2 const &>(static_cast<T const &>(*this))->abi_CreateWav(quality, set(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics2<T>::CreateAvi(Windows::Media::MediaProperties::VideoEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value(nullptr);
	check(static_cast<IMediaEncodingProfileStatics2 const &>(static_cast<T const &>(*this))->abi_CreateAvi(quality, set(value)));
	return value;
}

template <typename T> void impl_IMediaEncodingProfile<T>::Audio(Windows::Media::MediaProperties::AudioEncodingProperties const & value) const
{
	check(static_cast<IMediaEncodingProfile const &>(static_cast<T const &>(*this))->put_Audio(get(value)));
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IMediaEncodingProfile<T>::Audio() const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value(nullptr);
	check(static_cast<IMediaEncodingProfile const &>(static_cast<T const &>(*this))->get_Audio(set(value)));
	return value;
}

template <typename T> void impl_IMediaEncodingProfile<T>::Video(Windows::Media::MediaProperties::VideoEncodingProperties const & value) const
{
	check(static_cast<IMediaEncodingProfile const &>(static_cast<T const &>(*this))->put_Video(get(value)));
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IMediaEncodingProfile<T>::Video() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value(nullptr);
	check(static_cast<IMediaEncodingProfile const &>(static_cast<T const &>(*this))->get_Video(set(value)));
	return value;
}

template <typename T> void impl_IMediaEncodingProfile<T>::Container(Windows::Media::MediaProperties::ContainerEncodingProperties const & value) const
{
	check(static_cast<IMediaEncodingProfile const &>(static_cast<T const &>(*this))->put_Container(get(value)));
}

template <typename T> Windows::Media::MediaProperties::ContainerEncodingProperties impl_IMediaEncodingProfile<T>::Container() const
{
	Windows::Media::MediaProperties::ContainerEncodingProperties value(nullptr);
	check(static_cast<IMediaEncodingProfile const &>(static_cast<T const &>(*this))->get_Container(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_ISourceChangeRequestedEventArgs<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Stream(set(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Title() const
{
	String value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Author() const
{
	String value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Author(set(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Album() const
{
	String value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Album(set(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Genre() const
{
	String value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Genre(set(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Description() const
{
	String value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_ISourceChangeRequestedEventArgs<T>::Date() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Date(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_ISourceChangeRequestedEventArgs<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_ISourceChangeRequestedEventArgs<T>::Rating() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Rating(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_ISourceChangeRequestedEventArgs<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value = {};
	check(static_cast<ISourceChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> double impl_IPlaybackRateChangeRequestedEventArgs<T>::Rate() const
{
	double value = {};
	check(static_cast<IPlaybackRateChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Rate(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ICurrentTimeChangeRequestedEventArgs<T>::Time() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<ICurrentTimeChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Time(&value));
	return value;
}

template <typename T> bool impl_IMuteChangeRequestedEventArgs<T>::Mute() const
{
	bool value = {};
	check(static_cast<IMuteChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Mute(BoolProxy(value)));
	return value;
}

template <typename T> double impl_IVolumeChangeRequestedEventArgs<T>::Volume() const
{
	double value = {};
	check(static_cast<IVolumeChangeRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Volume(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IPlayToReceiver<T>::PlayRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->add_PlayRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToReceiver<T>::PlayRequested(F handler) const
{
	return PlayRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::PlayRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->remove_PlayRequested(token));
}

template <typename T> EventRegistrationToken impl_IPlayToReceiver<T>::PauseRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->add_PauseRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToReceiver<T>::PauseRequested(F handler) const
{
	return PauseRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::PauseRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->remove_PauseRequested(token));
}

template <typename T> EventRegistrationToken impl_IPlayToReceiver<T>::SourceChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::SourceChangeRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->add_SourceChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToReceiver<T>::SourceChangeRequested(F handler) const
{
	return SourceChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::SourceChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::SourceChangeRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->remove_SourceChangeRequested(token));
}

template <typename T> EventRegistrationToken impl_IPlayToReceiver<T>::PlaybackRateChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->add_PlaybackRateChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToReceiver<T>::PlaybackRateChangeRequested(F handler) const
{
	return PlaybackRateChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::PlaybackRateChangeRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->remove_PlaybackRateChangeRequested(token));
}

template <typename T> EventRegistrationToken impl_IPlayToReceiver<T>::CurrentTimeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->add_CurrentTimeChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToReceiver<T>::CurrentTimeChangeRequested(F handler) const
{
	return CurrentTimeChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::CurrentTimeChangeRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->remove_CurrentTimeChangeRequested(token));
}

template <typename T> EventRegistrationToken impl_IPlayToReceiver<T>::MuteChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::MuteChangeRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->add_MuteChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToReceiver<T>::MuteChangeRequested(F handler) const
{
	return MuteChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::MuteChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::MuteChangeRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->remove_MuteChangeRequested(token));
}

template <typename T> EventRegistrationToken impl_IPlayToReceiver<T>::VolumeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::VolumeChangeRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->add_VolumeChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToReceiver<T>::VolumeChangeRequested(F handler) const
{
	return VolumeChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::VolumeChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::VolumeChangeRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->remove_VolumeChangeRequested(token));
}

template <typename T> EventRegistrationToken impl_IPlayToReceiver<T>::TimeUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->add_TimeUpdateRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToReceiver<T>::TimeUpdateRequested(F handler) const
{
	return TimeUpdateRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::TimeUpdateRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->remove_TimeUpdateRequested(token));
}

template <typename T> EventRegistrationToken impl_IPlayToReceiver<T>::StopRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->add_StopRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToReceiver<T>::StopRequested(F handler) const
{
	return StopRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::StopRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->remove_StopRequested(token));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyVolumeChange(double const volume, bool const mute) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyVolumeChange(volume, mute));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyRateChange(double const rate) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyRateChange(rate));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyLoadedMetadata() const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyLoadedMetadata());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyTimeUpdate(Windows::Foundation::TimeSpan const & currentTime) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyTimeUpdate(currentTime));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyDurationChange(Windows::Foundation::TimeSpan const & duration) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyDurationChange(duration));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifySeeking() const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifySeeking());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifySeeked() const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifySeeked());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyPaused() const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyPaused());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyPlaying() const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyPlaying());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyEnded() const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyEnded());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyError() const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyError());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyStopped() const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_NotifyStopped());
}

template <typename T> String impl_IPlayToReceiver<T>::FriendlyName() const
{
	String value = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->get_FriendlyName(set(value)));
	return value;
}

template <typename T> void impl_IPlayToReceiver<T>::FriendlyName(String const & value) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->put_FriendlyName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IPlayToReceiver<T>::FriendlyName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->put_FriendlyName(StringReference(value)));
}

template <typename T> void impl_IPlayToReceiver<T>::SupportsImage(bool const value) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->put_SupportsImage(value));
}

template <typename T> bool impl_IPlayToReceiver<T>::SupportsImage() const
{
	bool value = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->get_SupportsImage(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPlayToReceiver<T>::SupportsAudio(bool const value) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->put_SupportsAudio(value));
}

template <typename T> bool impl_IPlayToReceiver<T>::SupportsAudio() const
{
	bool value = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->get_SupportsAudio(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPlayToReceiver<T>::SupportsVideo(bool const value) const
{
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->put_SupportsVideo(value));
}

template <typename T> bool impl_IPlayToReceiver<T>::SupportsVideo() const
{
	bool value = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->get_SupportsVideo(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IPlayToReceiver<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPlayToReceiver<T>::StartAsync() const
{
	Windows::Foundation::IAsyncAction action = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_StartAsync(set(action)));
	return action;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPlayToReceiver<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction action = {};
	check(static_cast<IPlayToReceiver const &>(static_cast<T const &>(*this))->abi_StopAsync(set(action)));
	return action;
}

template <typename T> Windows::Media::PlayTo::PlayToConnection impl_IPlayToSource<T>::Connection() const
{
	Windows::Media::PlayTo::PlayToConnection value(nullptr);
	check(static_cast<IPlayToSource const &>(static_cast<T const &>(*this))->get_Connection(set(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToSource impl_IPlayToSource<T>::Next() const
{
	Windows::Media::PlayTo::PlayToSource value(nullptr);
	check(static_cast<IPlayToSource const &>(static_cast<T const &>(*this))->get_Next(set(value)));
	return value;
}

template <typename T> void impl_IPlayToSource<T>::Next(Windows::Media::PlayTo::PlayToSource const & value) const
{
	check(static_cast<IPlayToSource const &>(static_cast<T const &>(*this))->put_Next(get(value)));
}

template <typename T> void impl_IPlayToSource<T>::PlayNext() const
{
	check(static_cast<IPlayToSource const &>(static_cast<T const &>(*this))->abi_PlayNext());
}

template <typename T> Windows::Foundation::Uri impl_IPlayToSourceWithPreferredSourceUri<T>::PreferredSourceUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IPlayToSourceWithPreferredSourceUri const &>(static_cast<T const &>(*this))->get_PreferredSourceUri(set(value)));
	return value;
}

template <typename T> void impl_IPlayToSourceWithPreferredSourceUri<T>::PreferredSourceUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IPlayToSourceWithPreferredSourceUri const &>(static_cast<T const &>(*this))->put_PreferredSourceUri(get(value)));
}

template <typename T> Windows::Media::PlayTo::PlayToConnectionState impl_IPlayToConnectionStateChangedEventArgs<T>::PreviousState() const
{
	Windows::Media::PlayTo::PlayToConnectionState value = {};
	check(static_cast<IPlayToConnectionStateChangedEventArgs const &>(static_cast<T const &>(*this))->get_PreviousState(&value));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToConnectionState impl_IPlayToConnectionStateChangedEventArgs<T>::CurrentState() const
{
	Windows::Media::PlayTo::PlayToConnectionState value = {};
	check(static_cast<IPlayToConnectionStateChangedEventArgs const &>(static_cast<T const &>(*this))->get_CurrentState(&value));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToSource impl_IPlayToConnectionTransferredEventArgs<T>::PreviousSource() const
{
	Windows::Media::PlayTo::PlayToSource value(nullptr);
	check(static_cast<IPlayToConnectionTransferredEventArgs const &>(static_cast<T const &>(*this))->get_PreviousSource(set(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToSource impl_IPlayToConnectionTransferredEventArgs<T>::CurrentSource() const
{
	Windows::Media::PlayTo::PlayToSource value(nullptr);
	check(static_cast<IPlayToConnectionTransferredEventArgs const &>(static_cast<T const &>(*this))->get_CurrentSource(set(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToConnectionError impl_IPlayToConnectionErrorEventArgs<T>::Code() const
{
	Windows::Media::PlayTo::PlayToConnectionError value = {};
	check(static_cast<IPlayToConnectionErrorEventArgs const &>(static_cast<T const &>(*this))->get_Code(&value));
	return value;
}

template <typename T> String impl_IPlayToConnectionErrorEventArgs<T>::Message() const
{
	String value = {};
	check(static_cast<IPlayToConnectionErrorEventArgs const &>(static_cast<T const &>(*this))->get_Message(set(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToConnectionState impl_IPlayToConnection<T>::State() const
{
	Windows::Media::PlayTo::PlayToConnectionState value = {};
	check(static_cast<IPlayToConnection const &>(static_cast<T const &>(*this))->get_State(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IPlayToConnection<T>::StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToConnection const &>(static_cast<T const &>(*this))->add_StateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToConnection<T>::StateChanged(F handler) const
{
	return StateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs>(handler));
}

template <typename T> void impl_IPlayToConnection<T>::StateChanged(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToConnection const &>(static_cast<T const &>(*this))->remove_StateChanged(token));
}

template <typename T> EventRegistrationToken impl_IPlayToConnection<T>::Transferred(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToConnection const &>(static_cast<T const &>(*this))->add_Transferred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToConnection<T>::Transferred(F handler) const
{
	return Transferred(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs>(handler));
}

template <typename T> void impl_IPlayToConnection<T>::Transferred(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToConnection const &>(static_cast<T const &>(*this))->remove_Transferred(token));
}

template <typename T> EventRegistrationToken impl_IPlayToConnection<T>::Error(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionErrorEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToConnection const &>(static_cast<T const &>(*this))->add_Error(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToConnection<T>::Error(F handler) const
{
	return Error(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionErrorEventArgs>(handler));
}

template <typename T> void impl_IPlayToConnection<T>::Error(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToConnection const &>(static_cast<T const &>(*this))->remove_Error(token));
}

template <typename T> String impl_IPlayToSourceSelectedEventArgs<T>::FriendlyName() const
{
	String value = {};
	check(static_cast<IPlayToSourceSelectedEventArgs const &>(static_cast<T const &>(*this))->get_FriendlyName(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_IPlayToSourceSelectedEventArgs<T>::Icon() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType value = {};
	check(static_cast<IPlayToSourceSelectedEventArgs const &>(static_cast<T const &>(*this))->get_Icon(set(value)));
	return value;
}

template <typename T> bool impl_IPlayToSourceSelectedEventArgs<T>::SupportsImage() const
{
	bool value = {};
	check(static_cast<IPlayToSourceSelectedEventArgs const &>(static_cast<T const &>(*this))->get_SupportsImage(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPlayToSourceSelectedEventArgs<T>::SupportsAudio() const
{
	bool value = {};
	check(static_cast<IPlayToSourceSelectedEventArgs const &>(static_cast<T const &>(*this))->get_SupportsAudio(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPlayToSourceSelectedEventArgs<T>::SupportsVideo() const
{
	bool value = {};
	check(static_cast<IPlayToSourceSelectedEventArgs const &>(static_cast<T const &>(*this))->get_SupportsVideo(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPlayToSourceDeferral<T>::Complete() const
{
	check(static_cast<IPlayToSourceDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::Foundation::DateTime impl_IPlayToSourceRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IPlayToSourceRequest const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IPlayToSourceRequest<T>::DisplayErrorString(String const & errorString) const
{
	check(static_cast<IPlayToSourceRequest const &>(static_cast<T const &>(*this))->abi_DisplayErrorString(get(errorString)));
}

template <typename T> template <unsigned S0> void impl_IPlayToSourceRequest<T>::DisplayErrorString(wchar_t const (&errorString)[S0]) const
{
	check(static_cast<IPlayToSourceRequest const &>(static_cast<T const &>(*this))->abi_DisplayErrorString(StringReference(errorString)));
}

template <typename T> Windows::Media::PlayTo::PlayToSourceDeferral impl_IPlayToSourceRequest<T>::GetDeferral() const
{
	Windows::Media::PlayTo::PlayToSourceDeferral deferral(nullptr);
	check(static_cast<IPlayToSourceRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> void impl_IPlayToSourceRequest<T>::SetSource(Windows::Media::PlayTo::PlayToSource const & value) const
{
	check(static_cast<IPlayToSourceRequest const &>(static_cast<T const &>(*this))->abi_SetSource(get(value)));
}

template <typename T> Windows::Media::PlayTo::PlayToSourceRequest impl_IPlayToSourceRequestedEventArgs<T>::SourceRequest() const
{
	Windows::Media::PlayTo::PlayToSourceRequest value(nullptr);
	check(static_cast<IPlayToSourceRequestedEventArgs const &>(static_cast<T const &>(*this))->get_SourceRequest(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IPlayToManager<T>::SourceRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToManager const &>(static_cast<T const &>(*this))->add_SourceRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToManager<T>::SourceRequested(F handler) const
{
	return SourceRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToManager<T>::SourceRequested(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToManager const &>(static_cast<T const &>(*this))->remove_SourceRequested(token));
}

template <typename T> EventRegistrationToken impl_IPlayToManager<T>::SourceSelected(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceSelectedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPlayToManager const &>(static_cast<T const &>(*this))->add_SourceSelected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPlayToManager<T>::SourceSelected(F handler) const
{
	return SourceSelected(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceSelectedEventArgs>(handler));
}

template <typename T> void impl_IPlayToManager<T>::SourceSelected(EventRegistrationToken const token) const
{
	check(static_cast<IPlayToManager const &>(static_cast<T const &>(*this))->remove_SourceSelected(token));
}

template <typename T> void impl_IPlayToManager<T>::DefaultSourceSelection(bool const value) const
{
	check(static_cast<IPlayToManager const &>(static_cast<T const &>(*this))->put_DefaultSourceSelection(value));
}

template <typename T> bool impl_IPlayToManager<T>::DefaultSourceSelection() const
{
	bool value = {};
	check(static_cast<IPlayToManager const &>(static_cast<T const &>(*this))->get_DefaultSourceSelection(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToManager impl_IPlayToManagerStatics<T>::GetForCurrentView() const
{
	Windows::Media::PlayTo::PlayToManager playToManager(nullptr);
	check(static_cast<IPlayToManagerStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(playToManager)));
	return playToManager;
}

template <typename T> void impl_IPlayToManagerStatics<T>::ShowPlayToUI() const
{
	check(static_cast<IPlayToManagerStatics const &>(static_cast<T const &>(*this))->abi_ShowPlayToUI());
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

template <typename T> Windows::Foundation::Collections::IVector<Windows::Storage::StorageFile> impl_IPlaylist<T>::Files() const
{
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFile> value = {};
	check(static_cast<IPlaylist const &>(static_cast<T const &>(*this))->get_Files(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPlaylist<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPlaylist const &>(static_cast<T const &>(*this))->abi_SaveAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IPlaylist<T>::SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, String const & desiredName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IPlaylist const &>(static_cast<T const &>(*this))->abi_SaveAsAsync(get(saveLocation), get(desiredName), option, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IPlaylist<T>::SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, wchar_t const (&desiredName)[S0], Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IPlaylist const &>(static_cast<T const &>(*this))->abi_SaveAsAsync(get(saveLocation), StringReference(desiredName), option, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IPlaylist<T>::SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, String const & desiredName, Windows::Storage::NameCollisionOption const option, Windows::Media::Playlists::PlaylistFormat const playlistFormat) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IPlaylist const &>(static_cast<T const &>(*this))->abi_SaveAsWithFormatAsync(get(saveLocation), get(desiredName), option, playlistFormat, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IPlaylist<T>::SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, wchar_t const (&desiredName)[S0], Windows::Storage::NameCollisionOption const option, Windows::Media::Playlists::PlaylistFormat const playlistFormat) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IPlaylist const &>(static_cast<T const &>(*this))->abi_SaveAsWithFormatAsync(get(saveLocation), StringReference(desiredName), option, playlistFormat, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> impl_IPlaylistStatics<T>::LoadAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> operation = {};
	check(static_cast<IPlaylistStatics const &>(static_cast<T const &>(*this))->abi_LoadAsync(get(file), set(operation)));
	return operation;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

template <typename T> void impl_IServiceRequestedEventHandler<T>::Invoke(Windows::Media::Protection::MediaProtectionManager const & sender, Windows::Media::Protection::ServiceRequestedEventArgs const & e) const
{
	check(static_cast<IServiceRequestedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IRebootNeededEventHandler<T>::Invoke(Windows::Media::Protection::MediaProtectionManager const & sender) const
{
	check(static_cast<IRebootNeededEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender)));
}

template <typename T> void impl_IComponentLoadFailedEventHandler<T>::Invoke(Windows::Media::Protection::MediaProtectionManager const & sender, Windows::Media::Protection::ComponentLoadFailedEventArgs const & e) const
{
	check(static_cast<IComponentLoadFailedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(e)));
}

template <typename T> EventRegistrationToken impl_IMediaProtectionManager<T>::ServiceRequested(Windows::Media::Protection::IServiceRequestedEventHandler const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMediaProtectionManager const &>(static_cast<T const &>(*this))->add_ServiceRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaProtectionManager<T>::ServiceRequested(F handler) const
{
	return ServiceRequested(Windows::Media::Protection::ServiceRequestedEventHandler(handler));
}

template <typename T> void impl_IMediaProtectionManager<T>::ServiceRequested(EventRegistrationToken const cookie) const
{
	check(static_cast<IMediaProtectionManager const &>(static_cast<T const &>(*this))->remove_ServiceRequested(cookie));
}

template <typename T> EventRegistrationToken impl_IMediaProtectionManager<T>::RebootNeeded(Windows::Media::Protection::IRebootNeededEventHandler const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMediaProtectionManager const &>(static_cast<T const &>(*this))->add_RebootNeeded(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaProtectionManager<T>::RebootNeeded(F handler) const
{
	return RebootNeeded(Windows::Media::Protection::RebootNeededEventHandler(handler));
}

template <typename T> void impl_IMediaProtectionManager<T>::RebootNeeded(EventRegistrationToken const cookie) const
{
	check(static_cast<IMediaProtectionManager const &>(static_cast<T const &>(*this))->remove_RebootNeeded(cookie));
}

template <typename T> EventRegistrationToken impl_IMediaProtectionManager<T>::ComponentLoadFailed(Windows::Media::Protection::IComponentLoadFailedEventHandler const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMediaProtectionManager const &>(static_cast<T const &>(*this))->add_ComponentLoadFailed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaProtectionManager<T>::ComponentLoadFailed(F handler) const
{
	return ComponentLoadFailed(Windows::Media::Protection::ComponentLoadFailedEventHandler(handler));
}

template <typename T> void impl_IMediaProtectionManager<T>::ComponentLoadFailed(EventRegistrationToken const cookie) const
{
	check(static_cast<IMediaProtectionManager const &>(static_cast<T const &>(*this))->remove_ComponentLoadFailed(cookie));
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IMediaProtectionManager<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value = {};
	check(static_cast<IMediaProtectionManager const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> void impl_IMediaProtectionServiceCompletion<T>::Complete(bool const success) const
{
	check(static_cast<IMediaProtectionServiceCompletion const &>(static_cast<T const &>(*this))->abi_Complete(success));
}

template <typename T> Windows::Media::Protection::IMediaProtectionServiceRequest impl_IServiceRequestedEventArgs<T>::Request() const
{
	Windows::Media::Protection::IMediaProtectionServiceRequest value = {};
	check(static_cast<IServiceRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> Windows::Media::Protection::MediaProtectionServiceCompletion impl_IServiceRequestedEventArgs<T>::Completion() const
{
	Windows::Media::Protection::MediaProtectionServiceCompletion value(nullptr);
	check(static_cast<IServiceRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Completion(set(value)));
	return value;
}

template <typename T> GUID impl_IMediaProtectionServiceRequest<T>::ProtectionSystem() const
{
	GUID system = {};
	check(static_cast<IMediaProtectionServiceRequest const &>(static_cast<T const &>(*this))->get_ProtectionSystem(&system));
	return system;
}

template <typename T> GUID impl_IMediaProtectionServiceRequest<T>::Type() const
{
	GUID type = {};
	check(static_cast<IMediaProtectionServiceRequest const &>(static_cast<T const &>(*this))->get_Type(&type));
	return type;
}

template <typename T> Windows::Media::Protection::RevocationAndRenewalInformation impl_IComponentLoadFailedEventArgs<T>::Information() const
{
	Windows::Media::Protection::RevocationAndRenewalInformation value(nullptr);
	check(static_cast<IComponentLoadFailedEventArgs const &>(static_cast<T const &>(*this))->get_Information(set(value)));
	return value;
}

template <typename T> Windows::Media::Protection::MediaProtectionServiceCompletion impl_IComponentLoadFailedEventArgs<T>::Completion() const
{
	Windows::Media::Protection::MediaProtectionServiceCompletion value(nullptr);
	check(static_cast<IComponentLoadFailedEventArgs const &>(static_cast<T const &>(*this))->get_Completion(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Protection::RevocationAndRenewalItem> impl_IRevocationAndRenewalInformation<T>::Items() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Protection::RevocationAndRenewalItem> items = {};
	check(static_cast<IRevocationAndRenewalInformation const &>(static_cast<T const &>(*this))->get_Items(set(items)));
	return items;
}

template <typename T> Windows::Media::Protection::RevocationAndRenewalReasons impl_IRevocationAndRenewalItem<T>::Reasons() const
{
	Windows::Media::Protection::RevocationAndRenewalReasons reasons = {};
	check(static_cast<IRevocationAndRenewalItem const &>(static_cast<T const &>(*this))->get_Reasons(&reasons));
	return reasons;
}

template <typename T> String impl_IRevocationAndRenewalItem<T>::HeaderHash() const
{
	String value = {};
	check(static_cast<IRevocationAndRenewalItem const &>(static_cast<T const &>(*this))->get_HeaderHash(set(value)));
	return value;
}

template <typename T> String impl_IRevocationAndRenewalItem<T>::PublicKeyHash() const
{
	String value = {};
	check(static_cast<IRevocationAndRenewalItem const &>(static_cast<T const &>(*this))->get_PublicKeyHash(set(value)));
	return value;
}

template <typename T> String impl_IRevocationAndRenewalItem<T>::Name() const
{
	String name = {};
	check(static_cast<IRevocationAndRenewalItem const &>(static_cast<T const &>(*this))->get_Name(set(name)));
	return name;
}

template <typename T> String impl_IRevocationAndRenewalItem<T>::RenewalId() const
{
	String value = {};
	check(static_cast<IRevocationAndRenewalItem const &>(static_cast<T const &>(*this))->get_RenewalId(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Modern::Windows::Media::Protection::RenewalStatus, unsigned> impl_IComponentRenewalStatics<T>::RenewSystemComponentsAsync(Windows::Media::Protection::RevocationAndRenewalInformation const & information) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Modern::Windows::Media::Protection::RenewalStatus, unsigned> operation = {};
	check(static_cast<IComponentRenewalStatics const &>(static_cast<T const &>(*this))->abi_RenewSystemComponentsAsync(get(information), set(operation)));
	return operation;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

template <typename T> String impl_IVoiceInformation<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IVoiceInformation const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> String impl_IVoiceInformation<T>::Id() const
{
	String value = {};
	check(static_cast<IVoiceInformation const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> String impl_IVoiceInformation<T>::Language() const
{
	String value = {};
	check(static_cast<IVoiceInformation const &>(static_cast<T const &>(*this))->get_Language(set(value)));
	return value;
}

template <typename T> String impl_IVoiceInformation<T>::Description() const
{
	String value = {};
	check(static_cast<IVoiceInformation const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> Windows::Media::SpeechSynthesis::VoiceGender impl_IVoiceInformation<T>::Gender() const
{
	Windows::Media::SpeechSynthesis::VoiceGender value = {};
	check(static_cast<IVoiceInformation const &>(static_cast<T const &>(*this))->get_Gender(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> impl_IInstalledVoicesStatic<T>::AllVoices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> value = {};
	check(static_cast<IInstalledVoicesStatic const &>(static_cast<T const &>(*this))->get_AllVoices(set(value)));
	return value;
}

template <typename T> Windows::Media::SpeechSynthesis::VoiceInformation impl_IInstalledVoicesStatic<T>::DefaultVoice() const
{
	Windows::Media::SpeechSynthesis::VoiceInformation value(nullptr);
	check(static_cast<IInstalledVoicesStatic const &>(static_cast<T const &>(*this))->get_DefaultVoice(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> impl_ISpeechSynthesisStream<T>::Markers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> value = {};
	check(static_cast<ISpeechSynthesisStream const &>(static_cast<T const &>(*this))->get_Markers(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> impl_ISpeechSynthesizer<T>::SynthesizeTextToStreamAsync(String const & text) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> operation = {};
	check(static_cast<ISpeechSynthesizer const &>(static_cast<T const &>(*this))->abi_SynthesizeTextToStreamAsync(get(text), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> impl_ISpeechSynthesizer<T>::SynthesizeTextToStreamAsync(wchar_t const (&text)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> operation = {};
	check(static_cast<ISpeechSynthesizer const &>(static_cast<T const &>(*this))->abi_SynthesizeTextToStreamAsync(StringReference(text), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> impl_ISpeechSynthesizer<T>::SynthesizeSsmlToStreamAsync(String const & Ssml) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> operation = {};
	check(static_cast<ISpeechSynthesizer const &>(static_cast<T const &>(*this))->abi_SynthesizeSsmlToStreamAsync(get(Ssml), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> impl_ISpeechSynthesizer<T>::SynthesizeSsmlToStreamAsync(wchar_t const (&Ssml)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> operation = {};
	check(static_cast<ISpeechSynthesizer const &>(static_cast<T const &>(*this))->abi_SynthesizeSsmlToStreamAsync(StringReference(Ssml), set(operation)));
	return operation;
}

template <typename T> void impl_ISpeechSynthesizer<T>::Voice(Windows::Media::SpeechSynthesis::VoiceInformation const & value) const
{
	check(static_cast<ISpeechSynthesizer const &>(static_cast<T const &>(*this))->put_Voice(get(value)));
}

template <typename T> Windows::Media::SpeechSynthesis::VoiceInformation impl_ISpeechSynthesizer<T>::Voice() const
{
	Windows::Media::SpeechSynthesis::VoiceInformation value(nullptr);
	check(static_cast<ISpeechSynthesizer const &>(static_cast<T const &>(*this))->get_Voice(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

template <typename T> void impl_IDeviceControllerFinderHandler<T>::Invoke(Windows::Media::Streaming::IDeviceController const & sender, String const & uniqueDeviceName, Windows::Media::Streaming::IBasicDevice const & device) const
{
	check(static_cast<IDeviceControllerFinderHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(uniqueDeviceName), get(device)));
}

template <typename T> template <unsigned S0> void impl_IDeviceControllerFinderHandler<T>::Invoke(Windows::Media::Streaming::IDeviceController const & sender, wchar_t const (&uniqueDeviceName)[S0], Windows::Media::Streaming::IBasicDevice const & device) const
{
	check(static_cast<IDeviceControllerFinderHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), StringReference(uniqueDeviceName), get(device)));
}

template <typename T> void impl_IConnectionStatusHandler<T>::Invoke(Windows::Media::Streaming::IBasicDevice const & sender, Windows::Media::Streaming::ConnectionStatus const arg) const
{
	check(static_cast<IConnectionStatusHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), arg));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IBasicDevice> impl_IDeviceController<T>::CachedDevices() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IBasicDevice> value = {};
	check(static_cast<IDeviceController const &>(static_cast<T const &>(*this))->get_CachedDevices(set(value)));
	return value;
}

template <typename T> void impl_IDeviceController<T>::AddDevice(String const & uniqueDeviceName) const
{
	check(static_cast<IDeviceController const &>(static_cast<T const &>(*this))->abi_AddDevice(get(uniqueDeviceName)));
}

template <typename T> template <unsigned S0> void impl_IDeviceController<T>::AddDevice(wchar_t const (&uniqueDeviceName)[S0]) const
{
	check(static_cast<IDeviceController const &>(static_cast<T const &>(*this))->abi_AddDevice(StringReference(uniqueDeviceName)));
}

template <typename T> void impl_IDeviceController<T>::RemoveDevice(Windows::Media::Streaming::IBasicDevice const & device) const
{
	check(static_cast<IDeviceController const &>(static_cast<T const &>(*this))->abi_RemoveDevice(get(device)));
}

template <typename T> EventRegistrationToken impl_IDeviceController<T>::DeviceArrival(Windows::Media::Streaming::IDeviceControllerFinderHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDeviceController const &>(static_cast<T const &>(*this))->add_DeviceArrival(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDeviceController<T>::DeviceArrival(F handler) const
{
	return DeviceArrival(Windows::Media::Streaming::DeviceControllerFinderHandler(handler));
}

template <typename T> void impl_IDeviceController<T>::DeviceArrival(EventRegistrationToken const token) const
{
	check(static_cast<IDeviceController const &>(static_cast<T const &>(*this))->remove_DeviceArrival(token));
}

template <typename T> EventRegistrationToken impl_IDeviceController<T>::DeviceDeparture(Windows::Media::Streaming::IDeviceControllerFinderHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IDeviceController const &>(static_cast<T const &>(*this))->add_DeviceDeparture(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDeviceController<T>::DeviceDeparture(F handler) const
{
	return DeviceDeparture(Windows::Media::Streaming::DeviceControllerFinderHandler(handler));
}

template <typename T> void impl_IDeviceController<T>::DeviceDeparture(EventRegistrationToken const token) const
{
	check(static_cast<IDeviceController const &>(static_cast<T const &>(*this))->remove_DeviceDeparture(token));
}

template <typename T> String impl_IBasicDevice<T>::FriendlyName() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_FriendlyName(set(value)));
	return value;
}

template <typename T> void impl_IBasicDevice<T>::FriendlyName(String const & value) const
{
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->put_FriendlyName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IBasicDevice<T>::FriendlyName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->put_FriendlyName(StringReference(value)));
}

template <typename T> String impl_IBasicDevice<T>::ManufacturerName() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_ManufacturerName(set(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::ManufacturerUrl() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_ManufacturerUrl(set(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::UniqueDeviceName() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_UniqueDeviceName(set(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::ModelName() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_ModelName(set(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::ModelNumber() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_ModelNumber(set(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::ModelUrl() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_ModelUrl(set(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::Description() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_Description(set(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::SerialNumber() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_SerialNumber(set(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::PresentationUrl() const
{
	String value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_PresentationUrl(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IBasicDevice<T>::RemoteStreamingUrls() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_RemoteStreamingUrls(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IBasicDevice<T>::PhysicalAddresses() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_PhysicalAddresses(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IBasicDevice<T>::IpAddresses() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_IpAddresses(set(value)));
	return value;
}

template <typename T> bool impl_IBasicDevice<T>::CanWakeDevices() const
{
	bool value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_CanWakeDevices(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IBasicDevice<T>::DiscoveredOnCurrentNetwork() const
{
	bool value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_DiscoveredOnCurrentNetwork(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::DeviceTypes impl_IBasicDevice<T>::Type() const
{
	Windows::Media::Streaming::DeviceTypes value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IDeviceIcon> impl_IBasicDevice<T>::Icons() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IDeviceIcon> value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_Icons(set(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::ConnectionStatus impl_IBasicDevice<T>::ConnectionStatus() const
{
	Windows::Media::Streaming::ConnectionStatus value = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->get_ConnectionStatus(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IBasicDevice<T>::ConnectionStatusChanged(Windows::Media::Streaming::IConnectionStatusHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->add_ConnectionStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IBasicDevice<T>::ConnectionStatusChanged(F handler) const
{
	return ConnectionStatusChanged(Windows::Media::Streaming::ConnectionStatusHandler(handler));
}

template <typename T> void impl_IBasicDevice<T>::ConnectionStatusChanged(EventRegistrationToken const token) const
{
	check(static_cast<IBasicDevice const &>(static_cast<T const &>(*this))->remove_ConnectionStatusChanged(token));
}

template <typename T> unsigned impl_IActiveBasicDevice<T>::MaxVolume() const
{
	unsigned value = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->get_MaxVolume(&value));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsMuteSupported() const
{
	bool value = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->get_IsMuteSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsSetNextSourceSupported() const
{
	bool value = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->get_IsSetNextSourceSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsAudioSupported() const
{
	bool value = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->get_IsAudioSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsVideoSupported() const
{
	bool value = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->get_IsVideoSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsImageSupported() const
{
	bool value = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->get_IsImageSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsSearchSupported() const
{
	bool value = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->get_IsSearchSupported(BoolProxy(value)));
	return value;
}

template <typename T> String impl_IActiveBasicDevice<T>::GetCachedSinkProtocolInfo() const
{
	String value = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->abi_GetCachedSinkProtocolInfo(set(value)));
	return value;
}

template <typename T> void impl_IActiveBasicDevice<T>::SetCachedSinkProtocolInfo(String const & value) const
{
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->abi_SetCachedSinkProtocolInfo(get(value)));
}

template <typename T> template <unsigned S0> void impl_IActiveBasicDevice<T>::SetCachedSinkProtocolInfo(wchar_t const (&value)[S0]) const
{
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->abi_SetCachedSinkProtocolInfo(StringReference(value)));
}

template <typename T> String impl_IActiveBasicDevice<T>::GetCachedExtraSinkProtocolInfo() const
{
	String value = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->abi_GetCachedExtraSinkProtocolInfo(set(value)));
	return value;
}

template <typename T> unsigned long long impl_IActiveBasicDevice<T>::GetEffectiveBandwidth(bool const transmitSpeed) const
{
	unsigned long long currentSpeed = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->abi_GetEffectiveBandwidth(transmitSpeed, &currentSpeed));
	return currentSpeed;
}

template <typename T> unsigned long long impl_IActiveBasicDevice<T>::GetCachedBitrateMeasurement(GUID const physicalNetworkInterface) const
{
	unsigned long long bitrate = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->abi_GetCachedBitrateMeasurement(physicalNetworkInterface, &bitrate));
	return bitrate;
}

template <typename T> void impl_IActiveBasicDevice<T>::SetCachedBitrateMeasurement(GUID const physicalNetworkInterface, unsigned long long const bitrate) const
{
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->abi_SetCachedBitrateMeasurement(physicalNetworkInterface, bitrate));
}

template <typename T> GUID impl_IActiveBasicDevice<T>::LogicalNetworkInterface() const
{
	GUID logicalNetworkInterface = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->get_LogicalNetworkInterface(&logicalNetworkInterface));
	return logicalNetworkInterface;
}

template <typename T> GUID impl_IActiveBasicDevice<T>::PhysicalNetworkInterface() const
{
	GUID physicalNetworkInterface = {};
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->get_PhysicalNetworkInterface(&physicalNetworkInterface));
	return physicalNetworkInterface;
}

template <typename T> void impl_IActiveBasicDevice<T>::NotifyStreamingStatus(bool const fIsStreaming) const
{
	check(static_cast<IActiveBasicDevice const &>(static_cast<T const &>(*this))->abi_NotifyStreamingStatus(fIsStreaming));
}

template <typename T> unsigned impl_IDeviceIcon<T>::Width() const
{
	unsigned value = {};
	check(static_cast<IDeviceIcon const &>(static_cast<T const &>(*this))->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_IDeviceIcon<T>::Height() const
{
	unsigned value = {};
	check(static_cast<IDeviceIcon const &>(static_cast<T const &>(*this))->get_Height(&value));
	return value;
}

template <typename T> String impl_IDeviceIcon<T>::ContentType() const
{
	String value = {};
	check(static_cast<IDeviceIcon const &>(static_cast<T const &>(*this))->get_ContentType(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_IDeviceIcon<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType value = {};
	check(static_cast<IDeviceIcon const &>(static_cast<T const &>(*this))->get_Stream(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> impl_IActiveBasicDeviceStatics<T>::CreateBasicDeviceAsync(String const & deviceIdentifier, Windows::Media::Streaming::DeviceTypes const type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> value = {};
	check(static_cast<IActiveBasicDeviceStatics const &>(static_cast<T const &>(*this))->abi_CreateBasicDeviceAsync(get(deviceIdentifier), type, set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> impl_IActiveBasicDeviceStatics<T>::CreateBasicDeviceAsync(wchar_t const (&deviceIdentifier)[S0], Windows::Media::Streaming::DeviceTypes const type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> value = {};
	check(static_cast<IActiveBasicDeviceStatics const &>(static_cast<T const &>(*this))->abi_CreateBasicDeviceAsync(StringReference(deviceIdentifier), type, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> impl_IActiveBasicDeviceStatics<T>::CloneBasicDeviceAsync(Windows::Media::Streaming::IBasicDevice const & basicDevice) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> value = {};
	check(static_cast<IActiveBasicDeviceStatics const &>(static_cast<T const &>(*this))->abi_CloneBasicDeviceAsync(get(basicDevice), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> impl_IActiveBasicDeviceStatics<T>::GetDevicesOnMatchingNetworkAsync(Windows::Media::Streaming::IActiveBasicDevice const & server, Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool const optimizeForProxying, bool const allowChangeRendererNetwork) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> operation = {};
	check(static_cast<IActiveBasicDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDevicesOnMatchingNetworkAsync(get(server), get(renderer), optimizeForProxying, allowChangeRendererNetwork, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> impl_IActiveBasicDeviceStatics<T>::CreateDevicesOnMatchingNetworkAsync(String const & serverUDN, Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool const optimizeForProxying, bool const allowChangeRendererNetwork) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> operation = {};
	check(static_cast<IActiveBasicDeviceStatics const &>(static_cast<T const &>(*this))->abi_CreateDevicesOnMatchingNetworkAsync(get(serverUDN), get(renderer), optimizeForProxying, allowChangeRendererNetwork, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> impl_IActiveBasicDeviceStatics<T>::CreateDevicesOnMatchingNetworkAsync(wchar_t const (&serverUDN)[S0], Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool const optimizeForProxying, bool const allowChangeRendererNetwork) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> operation = {};
	check(static_cast<IActiveBasicDeviceStatics const &>(static_cast<T const &>(*this))->abi_CreateDevicesOnMatchingNetworkAsync(StringReference(serverUDN), get(renderer), optimizeForProxying, allowChangeRendererNetwork, set(operation)));
	return operation;
}

template <typename T> Windows::Media::Streaming::ActiveBasicDevice impl_IDevicePair<T>::Server() const
{
	Windows::Media::Streaming::ActiveBasicDevice value(nullptr);
	check(static_cast<IDevicePair const &>(static_cast<T const &>(*this))->get_Server(set(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::ActiveBasicDevice impl_IDevicePair<T>::Renderer() const
{
	Windows::Media::Streaming::ActiveBasicDevice value(nullptr);
	check(static_cast<IDevicePair const &>(static_cast<T const &>(*this))->get_Renderer(set(value)));
	return value;
}

template <typename T> void impl_ITransportParametersUpdateHandler<T>::Invoke(Windows::Media::Streaming::IMediaRenderer const & sender, Windows::Media::Streaming::ITransportParameters const & arg) const
{
	check(static_cast<ITransportParametersUpdateHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(arg)));
}

template <typename T> void impl_IRenderingParametersUpdateHandler<T>::Invoke(Windows::Media::Streaming::IMediaRenderer const & sender, Windows::Media::Streaming::RenderingParameters const & arg) const
{
	check(static_cast<IRenderingParametersUpdateHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), arg));
}

template <typename T> bool impl_IMediaRenderer<T>::IsAudioSupported() const
{
	bool value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->get_IsAudioSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaRenderer<T>::IsVideoSupported() const
{
	bool value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->get_IsVideoSupported(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaRenderer<T>::IsImageSupported() const
{
	bool value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->get_IsImageSupported(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::IMediaRendererActionInformation impl_IMediaRenderer<T>::ActionInformation() const
{
	Windows::Media::Streaming::IMediaRendererActionInformation value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->get_ActionInformation(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetSourceFromUriAsync(String const & URI) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetSourceFromUriAsync(get(URI), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetSourceFromUriAsync(wchar_t const (&URI)[S0]) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetSourceFromUriAsync(StringReference(URI), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetSourceFromStreamAsync(IInspectable const & stream) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetSourceFromStreamAsync(get(stream), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetSourceFromMediaSourceAsync(IInspectable const & mediaSource) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetSourceFromMediaSourceAsync(get(mediaSource), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetNextSourceFromUriAsync(String const & URI) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetNextSourceFromUriAsync(get(URI), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetNextSourceFromUriAsync(wchar_t const (&URI)[S0]) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetNextSourceFromUriAsync(StringReference(URI), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetNextSourceFromStreamAsync(IInspectable const & stream) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetNextSourceFromStreamAsync(get(stream), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetNextSourceFromMediaSourceAsync(IInspectable const & mediaSource) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetNextSourceFromMediaSourceAsync(get(mediaSource), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::PlayAsync() const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_PlayAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::PlayAtSpeedAsync(Windows::Media::Streaming::PlaySpeed const & playSpeed) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_PlayAtSpeedAsync(playSpeed, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_StopAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::PauseAsync() const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_PauseAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IMediaRenderer<T>::GetMuteAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_GetMuteAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::SetMuteAsync(bool const mute) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetMuteAsync(mute, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::GetVolumeAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_GetVolumeAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::SetVolumeAsync(unsigned const volume) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SetVolumeAsync(volume, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::SeekAsync(Windows::Foundation::TimeSpan const & target) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_SeekAsync(target, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Media::Streaming::TransportInformation> impl_IMediaRenderer<T>::GetTransportInformationAsync() const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Media::Streaming::TransportInformation> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_GetTransportInformationAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Media::Streaming::PositionInformation> impl_IMediaRenderer<T>::GetPositionInformationAsync() const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Media::Streaming::PositionInformation> value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_GetPositionInformationAsync(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IMediaRenderer<T>::TransportParametersUpdate(Windows::Media::Streaming::ITransportParametersUpdateHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->add_TransportParametersUpdate(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaRenderer<T>::TransportParametersUpdate(F handler) const
{
	return TransportParametersUpdate(Windows::Media::Streaming::TransportParametersUpdateHandler(handler));
}

template <typename T> void impl_IMediaRenderer<T>::TransportParametersUpdate(EventRegistrationToken const token) const
{
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->remove_TransportParametersUpdate(token));
}

template <typename T> EventRegistrationToken impl_IMediaRenderer<T>::RenderingParametersUpdate(Windows::Media::Streaming::IRenderingParametersUpdateHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->add_RenderingParametersUpdate(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMediaRenderer<T>::RenderingParametersUpdate(F handler) const
{
	return RenderingParametersUpdate(Windows::Media::Streaming::RenderingParametersUpdateHandler(handler));
}

template <typename T> void impl_IMediaRenderer<T>::RenderingParametersUpdate(EventRegistrationToken const token) const
{
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->remove_RenderingParametersUpdate(token));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::NextAsync() const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IMediaRenderer const &>(static_cast<T const &>(*this))->abi_NextAsync(set(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsMuteAvailable() const
{
	bool value = {};
	check(static_cast<IMediaRendererActionInformation const &>(static_cast<T const &>(*this))->get_IsMuteAvailable(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsPauseAvailable() const
{
	bool value = {};
	check(static_cast<IMediaRendererActionInformation const &>(static_cast<T const &>(*this))->get_IsPauseAvailable(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsPlayAvailable() const
{
	bool value = {};
	check(static_cast<IMediaRendererActionInformation const &>(static_cast<T const &>(*this))->get_IsPlayAvailable(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsSeekAvailable() const
{
	bool value = {};
	check(static_cast<IMediaRendererActionInformation const &>(static_cast<T const &>(*this))->get_IsSeekAvailable(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsSetNextSourceAvailable() const
{
	bool value = {};
	check(static_cast<IMediaRendererActionInformation const &>(static_cast<T const &>(*this))->get_IsSetNextSourceAvailable(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsStopAvailable() const
{
	bool value = {};
	check(static_cast<IMediaRendererActionInformation const &>(static_cast<T const &>(*this))->get_IsStopAvailable(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsVolumeAvailable() const
{
	bool value = {};
	check(static_cast<IMediaRendererActionInformation const &>(static_cast<T const &>(*this))->get_IsVolumeAvailable(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Modern::Windows::Media::Streaming::PlaySpeed> impl_IMediaRendererActionInformation<T>::PlaySpeeds() const
{
	Windows::Foundation::Collections::IVector<Modern::Windows::Media::Streaming::PlaySpeed> value = {};
	check(static_cast<IMediaRendererActionInformation const &>(static_cast<T const &>(*this))->get_PlaySpeeds(set(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::IMediaRendererActionInformation impl_ITransportParameters<T>::ActionInformation() const
{
	Windows::Media::Streaming::IMediaRendererActionInformation value = {};
	check(static_cast<ITransportParameters const &>(static_cast<T const &>(*this))->get_ActionInformation(set(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::TrackInformation impl_ITransportParameters<T>::TrackInformation() const
{
	Windows::Media::Streaming::TrackInformation value = {};
	check(static_cast<ITransportParameters const &>(static_cast<T const &>(*this))->get_TrackInformation(&value));
	return value;
}

template <typename T> Windows::Media::Streaming::TransportInformation impl_ITransportParameters<T>::TransportInformation() const
{
	Windows::Media::Streaming::TransportInformation value = {};
	check(static_cast<ITransportParameters const &>(static_cast<T const &>(*this))->get_TransportInformation(&value));
	return value;
}

template <typename T> Windows::Media::Streaming::CreateMediaRendererOperation impl_IMediaRendererFactory<T>::CreateMediaRendererAsync(String const & deviceIdentifier) const
{
	Windows::Media::Streaming::CreateMediaRendererOperation value(nullptr);
	check(static_cast<IMediaRendererFactory const &>(static_cast<T const &>(*this))->abi_CreateMediaRendererAsync(get(deviceIdentifier), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Media::Streaming::CreateMediaRendererOperation impl_IMediaRendererFactory<T>::CreateMediaRendererAsync(wchar_t const (&deviceIdentifier)[S0]) const
{
	Windows::Media::Streaming::CreateMediaRendererOperation value(nullptr);
	check(static_cast<IMediaRendererFactory const &>(static_cast<T const &>(*this))->abi_CreateMediaRendererAsync(StringReference(deviceIdentifier), set(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::CreateMediaRendererOperation impl_IMediaRendererFactory<T>::CreateMediaRendererFromBasicDeviceAsync(Windows::Media::Streaming::IBasicDevice const & basicDevice) const
{
	Windows::Media::Streaming::CreateMediaRendererOperation value(nullptr);
	check(static_cast<IMediaRendererFactory const &>(static_cast<T const &>(*this))->abi_CreateMediaRendererFromBasicDeviceAsync(get(basicDevice), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IStreamSelectorStatics<T>::SelectBestStreamAsync(Windows::Storage::StorageFile const & storageFile, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> value = {};
	check(static_cast<IStreamSelectorStatics const &>(static_cast<T const &>(*this))->abi_SelectBestStreamAsync(get(storageFile), get(selectorProperties), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> impl_IStreamSelectorStatics<T>::GetStreamPropertiesAsync(Windows::Storage::StorageFile const & storageFile, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> value = {};
	check(static_cast<IStreamSelectorStatics const &>(static_cast<T const &>(*this))->abi_GetStreamPropertiesAsync(get(storageFile), get(selectorProperties), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IStreamSelectorStatics<T>::SelectBestStreamFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> value = {};
	check(static_cast<IStreamSelectorStatics const &>(static_cast<T const &>(*this))->abi_SelectBestStreamFromStreamAsync(get(stream), get(selectorProperties), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> impl_IStreamSelectorStatics<T>::GetStreamPropertiesFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> value = {};
	check(static_cast<IStreamSelectorStatics const &>(static_cast<T const &>(*this))->abi_GetStreamPropertiesFromStreamAsync(get(stream), get(selectorProperties), set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> impl_IMediaTranscoder2<T>::PrepareMediaStreamSourceTranscodeAsync(Windows::Media::Core::IMediaSource const & source, Windows::Storage::Streams::IRandomAccessStream const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> operation = {};
	check(static_cast<IMediaTranscoder2 const &>(static_cast<T const &>(*this))->abi_PrepareMediaStreamSourceTranscodeAsync(get(source), get(destination), get(profile), set(operation)));
	return operation;
}

template <typename T> void impl_IMediaTranscoder2<T>::VideoProcessingAlgorithm(Windows::Media::Transcoding::MediaVideoProcessingAlgorithm const value) const
{
	check(static_cast<IMediaTranscoder2 const &>(static_cast<T const &>(*this))->put_VideoProcessingAlgorithm(value));
}

template <typename T> Windows::Media::Transcoding::MediaVideoProcessingAlgorithm impl_IMediaTranscoder2<T>::VideoProcessingAlgorithm() const
{
	Windows::Media::Transcoding::MediaVideoProcessingAlgorithm value = {};
	check(static_cast<IMediaTranscoder2 const &>(static_cast<T const &>(*this))->get_VideoProcessingAlgorithm(&value));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::TrimStartTime(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->put_TrimStartTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaTranscoder<T>::TrimStartTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->get_TrimStartTime(&value));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::TrimStopTime(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->put_TrimStopTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaTranscoder<T>::TrimStopTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->get_TrimStopTime(&value));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::AlwaysReencode(bool const value) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->put_AlwaysReencode(value));
}

template <typename T> bool impl_IMediaTranscoder<T>::AlwaysReencode() const
{
	bool value = {};
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->get_AlwaysReencode(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::HardwareAccelerationEnabled(bool const value) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->put_HardwareAccelerationEnabled(value));
}

template <typename T> bool impl_IMediaTranscoder<T>::HardwareAccelerationEnabled() const
{
	bool value = {};
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->get_HardwareAccelerationEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::AddAudioEffect(String const & activatableClassId) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_AddAudioEffect(get(activatableClassId)));
}

template <typename T> template <unsigned S0> void impl_IMediaTranscoder<T>::AddAudioEffect(wchar_t const (&activatableClassId)[S0]) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_AddAudioEffect(StringReference(activatableClassId)));
}

template <typename T> void impl_IMediaTranscoder<T>::AddAudioEffect(String const & activatableClassId, bool const effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_AddAudioEffectWithSettings(get(activatableClassId), effectRequired, get(configuration)));
}

template <typename T> template <unsigned S0> void impl_IMediaTranscoder<T>::AddAudioEffect(wchar_t const (&activatableClassId)[S0], bool const effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_AddAudioEffectWithSettings(StringReference(activatableClassId), effectRequired, get(configuration)));
}

template <typename T> void impl_IMediaTranscoder<T>::AddVideoEffect(String const & activatableClassId) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_AddVideoEffect(get(activatableClassId)));
}

template <typename T> template <unsigned S0> void impl_IMediaTranscoder<T>::AddVideoEffect(wchar_t const (&activatableClassId)[S0]) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_AddVideoEffect(StringReference(activatableClassId)));
}

template <typename T> void impl_IMediaTranscoder<T>::AddVideoEffect(String const & activatableClassId, bool const effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_AddVideoEffectWithSettings(get(activatableClassId), effectRequired, get(configuration)));
}

template <typename T> template <unsigned S0> void impl_IMediaTranscoder<T>::AddVideoEffect(wchar_t const (&activatableClassId)[S0], bool const effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_AddVideoEffectWithSettings(StringReference(activatableClassId), effectRequired, get(configuration)));
}

template <typename T> void impl_IMediaTranscoder<T>::ClearEffects() const
{
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_ClearEffects());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> impl_IMediaTranscoder<T>::PrepareFileTranscodeAsync(Windows::Storage::IStorageFile const & source, Windows::Storage::IStorageFile const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> operation = {};
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_PrepareFileTranscodeAsync(get(source), get(destination), get(profile), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> impl_IMediaTranscoder<T>::PrepareStreamTranscodeAsync(Windows::Storage::Streams::IRandomAccessStream const & source, Windows::Storage::Streams::IRandomAccessStream const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> operation = {};
	check(static_cast<IMediaTranscoder const &>(static_cast<T const &>(*this))->abi_PrepareStreamTranscodeAsync(get(source), get(destination), get(profile), set(operation)));
	return operation;
}

template <typename T> bool impl_IPrepareTranscodeResult<T>::CanTranscode() const
{
	bool value = {};
	check(static_cast<IPrepareTranscodeResult const &>(static_cast<T const &>(*this))->get_CanTranscode(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Media::Transcoding::TranscodeFailureReason impl_IPrepareTranscodeResult<T>::FailureReason() const
{
	Windows::Media::Transcoding::TranscodeFailureReason value = {};
	check(static_cast<IPrepareTranscodeResult const &>(static_cast<T const &>(*this))->get_FailureReason(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<double> impl_IPrepareTranscodeResult<T>::TranscodeAsync() const
{
	Windows::Foundation::IAsyncActionWithProgress<double> operation = {};
	check(static_cast<IPrepareTranscodeResult const &>(static_cast<T const &>(*this))->abi_TranscodeAsync(set(operation)));
	return operation;
}

}}}}

namespace Modern { namespace Windows { namespace Networking {

template <typename T> int impl_IHostNameStatics<T>::Compare(String const & value1, String const & value2) const
{
	int result = {};
	check(static_cast<IHostNameStatics const &>(static_cast<T const &>(*this))->abi_Compare(get(value1), get(value2), &result));
	return result;
}

template <typename T> template <unsigned S0, unsigned S1> int impl_IHostNameStatics<T>::Compare(wchar_t const (&value1)[S0], wchar_t const (&value2)[S1]) const
{
	int result = {};
	check(static_cast<IHostNameStatics const &>(static_cast<T const &>(*this))->abi_Compare(StringReference(value1), StringReference(value2), &result));
	return result;
}

template <typename T> Windows::Networking::Connectivity::IPInformation impl_IHostName<T>::IPInformation() const
{
	Windows::Networking::Connectivity::IPInformation value(nullptr);
	check(static_cast<IHostName const &>(static_cast<T const &>(*this))->get_IPInformation(set(value)));
	return value;
}

template <typename T> String impl_IHostName<T>::RawName() const
{
	String value = {};
	check(static_cast<IHostName const &>(static_cast<T const &>(*this))->get_RawName(set(value)));
	return value;
}

template <typename T> String impl_IHostName<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IHostName const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> String impl_IHostName<T>::CanonicalName() const
{
	String value = {};
	check(static_cast<IHostName const &>(static_cast<T const &>(*this))->get_CanonicalName(set(value)));
	return value;
}

template <typename T> Windows::Networking::HostNameType impl_IHostName<T>::Type() const
{
	Windows::Networking::HostNameType value = {};
	check(static_cast<IHostName const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> bool impl_IHostName<T>::IsEqual(Windows::Networking::HostName const & hostName) const
{
	bool isEqual = {};
	check(static_cast<IHostName const &>(static_cast<T const &>(*this))->abi_IsEqual(get(hostName), BoolProxy(isEqual)));
	return isEqual;
}

template <typename T> Windows::Networking::HostName impl_IHostNameFactory<T>::CreateHostName(String const & hostName) const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IHostNameFactory const &>(static_cast<T const &>(*this))->abi_CreateHostName(get(hostName), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Networking::HostName impl_IHostNameFactory<T>::CreateHostName(wchar_t const (&hostName)[S0]) const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IHostNameFactory const &>(static_cast<T const &>(*this))->abi_CreateHostName(StringReference(hostName), set(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IEndpointPair<T>::LocalHostName() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->get_LocalHostName(set(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::LocalHostName(Windows::Networking::HostName const & value) const
{
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->put_LocalHostName(get(value)));
}

template <typename T> String impl_IEndpointPair<T>::LocalServiceName() const
{
	String value = {};
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->get_LocalServiceName(set(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::LocalServiceName(String const & value) const
{
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->put_LocalServiceName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IEndpointPair<T>::LocalServiceName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->put_LocalServiceName(StringReference(value)));
}

template <typename T> Windows::Networking::HostName impl_IEndpointPair<T>::RemoteHostName() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->get_RemoteHostName(set(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::RemoteHostName(Windows::Networking::HostName const & value) const
{
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->put_RemoteHostName(get(value)));
}

template <typename T> String impl_IEndpointPair<T>::RemoteServiceName() const
{
	String value = {};
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->get_RemoteServiceName(set(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::RemoteServiceName(String const & value) const
{
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->put_RemoteServiceName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IEndpointPair<T>::RemoteServiceName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IEndpointPair const &>(static_cast<T const &>(*this))->put_RemoteServiceName(StringReference(value)));
}

template <typename T> Windows::Networking::EndpointPair impl_IEndpointPairFactory<T>::CreateEndpointPair(Windows::Networking::HostName const & localHostName, String const & localServiceName, Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const
{
	Windows::Networking::EndpointPair value(nullptr);
	check(static_cast<IEndpointPairFactory const &>(static_cast<T const &>(*this))->abi_CreateEndpointPair(get(localHostName), get(localServiceName), get(remoteHostName), get(remoteServiceName), set(value)));
	return value;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Networking::EndpointPair impl_IEndpointPairFactory<T>::CreateEndpointPair(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0], Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S1]) const
{
	Windows::Networking::EndpointPair value(nullptr);
	check(static_cast<IEndpointPairFactory const &>(static_cast<T const &>(*this))->abi_CreateEndpointPair(get(localHostName), StringReference(localServiceName), get(remoteHostName), StringReference(remoteServiceName), set(value)));
	return value;
}

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

template <typename T> void impl_IBackgroundTransferBase<T>::SetRequestHeader(String const & headerName, String const & headerValue) const
{
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->abi_SetRequestHeader(get(headerName), get(headerValue)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IBackgroundTransferBase<T>::SetRequestHeader(wchar_t const (&headerName)[S0], wchar_t const (&headerValue)[S1]) const
{
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->abi_SetRequestHeader(StringReference(headerName), StringReference(headerValue)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IBackgroundTransferBase<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential credential(nullptr);
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->get_ServerCredential(set(credential)));
	return credential;
}

template <typename T> void impl_IBackgroundTransferBase<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->put_ServerCredential(get(credential)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IBackgroundTransferBase<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential credential(nullptr);
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->get_ProxyCredential(set(credential)));
	return credential;
}

template <typename T> void impl_IBackgroundTransferBase<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->put_ProxyCredential(get(credential)));
}

template <typename T> String impl_IBackgroundTransferBase<T>::Method() const
{
	String value = {};
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->get_Method(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundTransferBase<T>::Method(String const & value) const
{
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->put_Method(get(value)));
}

template <typename T> template <unsigned S0> void impl_IBackgroundTransferBase<T>::Method(wchar_t const (&value)[S0]) const
{
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->put_Method(StringReference(value)));
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy impl_IBackgroundTransferBase<T>::CostPolicy() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy value = {};
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->get_CostPolicy(&value));
	return value;
}

template <typename T> void impl_IBackgroundTransferBase<T>::CostPolicy(Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy const value) const
{
	check(static_cast<IBackgroundTransferBase const &>(static_cast<T const &>(*this))->put_CostPolicy(value));
}

template <typename T> bool impl_IUnconstrainedTransferRequestResult<T>::IsUnconstrained() const
{
	bool value = {};
	check(static_cast<IUnconstrainedTransferRequestResult const &>(static_cast<T const &>(*this))->get_IsUnconstrained(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> impl_IBackgroundDownloaderUserConsent<T>::RequestUnconstrainedDownloadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::DownloadOperation> const & operations) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> operation = {};
	check(static_cast<IBackgroundDownloaderUserConsent const &>(static_cast<T const &>(*this))->abi_RequestUnconstrainedDownloadsAsync(get(operations), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> impl_IBackgroundUploaderUserConsent<T>::RequestUnconstrainedUploadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::UploadOperation> const & operations) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> operation = {};
	check(static_cast<IBackgroundUploaderUserConsent const &>(static_cast<T const &>(*this))->abi_RequestUnconstrainedUploadsAsync(get(operations), set(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::DownloadOperation impl_IBackgroundDownloader<T>::CreateDownload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile) const
{
	Windows::Networking::BackgroundTransfer::DownloadOperation operation(nullptr);
	check(static_cast<IBackgroundDownloader const &>(static_cast<T const &>(*this))->abi_CreateDownload(get(uri), get(resultFile), set(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::DownloadOperation impl_IBackgroundDownloader<T>::CreateDownload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile, Windows::Storage::IStorageFile const & requestBodyFile) const
{
	Windows::Networking::BackgroundTransfer::DownloadOperation operation(nullptr);
	check(static_cast<IBackgroundDownloader const &>(static_cast<T const &>(*this))->abi_CreateDownloadFromFile(get(uri), get(resultFile), get(requestBodyFile), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::DownloadOperation> impl_IBackgroundDownloader<T>::CreateDownloadAsync(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile, Windows::Storage::Streams::IInputStream const & requestBodyStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::DownloadOperation> operation = {};
	check(static_cast<IBackgroundDownloader const &>(static_cast<T const &>(*this))->abi_CreateDownloadAsync(get(uri), get(resultFile), get(requestBodyStream), set(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IBackgroundDownloader2<T>::TransferGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value(nullptr);
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->get_TransferGroup(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::TransferGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & value) const
{
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->put_TransferGroup(get(value)));
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IBackgroundDownloader2<T>::SuccessToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value(nullptr);
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->get_SuccessToastNotification(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::SuccessToastNotification(Windows::UI::Notifications::ToastNotification const & value) const
{
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->put_SuccessToastNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IBackgroundDownloader2<T>::FailureToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value(nullptr);
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->get_FailureToastNotification(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::FailureToastNotification(Windows::UI::Notifications::ToastNotification const & value) const
{
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->put_FailureToastNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IBackgroundDownloader2<T>::SuccessTileNotification() const
{
	Windows::UI::Notifications::TileNotification value(nullptr);
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->get_SuccessTileNotification(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::SuccessTileNotification(Windows::UI::Notifications::TileNotification const & value) const
{
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->put_SuccessTileNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IBackgroundDownloader2<T>::FailureTileNotification() const
{
	Windows::UI::Notifications::TileNotification value(nullptr);
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->get_FailureTileNotification(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::FailureTileNotification(Windows::UI::Notifications::TileNotification const & value) const
{
	check(static_cast<IBackgroundDownloader2 const &>(static_cast<T const &>(*this))->put_FailureTileNotification(get(value)));
}

template <typename T> Windows::Networking::BackgroundTransfer::UploadOperation impl_IBackgroundUploader<T>::CreateUpload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & sourceFile) const
{
	Windows::Networking::BackgroundTransfer::UploadOperation operation(nullptr);
	check(static_cast<IBackgroundUploader const &>(static_cast<T const &>(*this))->abi_CreateUpload(get(uri), get(sourceFile), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadFromStreamAsync(Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IInputStream const & sourceStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation = {};
	check(static_cast<IBackgroundUploader const &>(static_cast<T const &>(*this))->abi_CreateUploadFromStreamAsync(get(uri), get(sourceStream), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation = {};
	check(static_cast<IBackgroundUploader const &>(static_cast<T const &>(*this))->abi_CreateUploadWithFormDataAndAutoBoundaryAsync(get(uri), get(parts), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, String const & subType) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation = {};
	check(static_cast<IBackgroundUploader const &>(static_cast<T const &>(*this))->abi_CreateUploadWithSubTypeAsync(get(uri), get(parts), get(subType), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, wchar_t const (&subType)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation = {};
	check(static_cast<IBackgroundUploader const &>(static_cast<T const &>(*this))->abi_CreateUploadWithSubTypeAsync(get(uri), get(parts), StringReference(subType), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, String const & subType, String const & boundary) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation = {};
	check(static_cast<IBackgroundUploader const &>(static_cast<T const &>(*this))->abi_CreateUploadWithSubTypeAndBoundaryAsync(get(uri), get(parts), get(subType), get(boundary), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, wchar_t const (&subType)[S0], wchar_t const (&boundary)[S1]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation = {};
	check(static_cast<IBackgroundUploader const &>(static_cast<T const &>(*this))->abi_CreateUploadWithSubTypeAndBoundaryAsync(get(uri), get(parts), StringReference(subType), StringReference(boundary), set(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IBackgroundUploader2<T>::TransferGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value(nullptr);
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->get_TransferGroup(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::TransferGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & value) const
{
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->put_TransferGroup(get(value)));
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IBackgroundUploader2<T>::SuccessToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value(nullptr);
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->get_SuccessToastNotification(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::SuccessToastNotification(Windows::UI::Notifications::ToastNotification const & value) const
{
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->put_SuccessToastNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IBackgroundUploader2<T>::FailureToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value(nullptr);
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->get_FailureToastNotification(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::FailureToastNotification(Windows::UI::Notifications::ToastNotification const & value) const
{
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->put_FailureToastNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IBackgroundUploader2<T>::SuccessTileNotification() const
{
	Windows::UI::Notifications::TileNotification value(nullptr);
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->get_SuccessTileNotification(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::SuccessTileNotification(Windows::UI::Notifications::TileNotification const & value) const
{
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->put_SuccessTileNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IBackgroundUploader2<T>::FailureTileNotification() const
{
	Windows::UI::Notifications::TileNotification value(nullptr);
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->get_FailureTileNotification(set(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::FailureTileNotification(Windows::UI::Notifications::TileNotification const & value) const
{
	check(static_cast<IBackgroundUploader2 const &>(static_cast<T const &>(*this))->put_FailureTileNotification(get(value)));
}

template <typename T> GUID impl_IBackgroundTransferOperation<T>::Guid() const
{
	GUID value = {};
	check(static_cast<IBackgroundTransferOperation const &>(static_cast<T const &>(*this))->get_Guid(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IBackgroundTransferOperation<T>::RequestedUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IBackgroundTransferOperation const &>(static_cast<T const &>(*this))->get_RequestedUri(set(value)));
	return value;
}

template <typename T> String impl_IBackgroundTransferOperation<T>::Method() const
{
	String value = {};
	check(static_cast<IBackgroundTransferOperation const &>(static_cast<T const &>(*this))->get_Method(set(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy impl_IBackgroundTransferOperation<T>::CostPolicy() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy value = {};
	check(static_cast<IBackgroundTransferOperation const &>(static_cast<T const &>(*this))->get_CostPolicy(&value));
	return value;
}

template <typename T> void impl_IBackgroundTransferOperation<T>::CostPolicy(Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy const value) const
{
	check(static_cast<IBackgroundTransferOperation const &>(static_cast<T const &>(*this))->put_CostPolicy(value));
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IBackgroundTransferOperation<T>::GetResultStreamAt(unsigned long long const position) const
{
	Windows::Storage::Streams::IInputStream value = {};
	check(static_cast<IBackgroundTransferOperation const &>(static_cast<T const &>(*this))->abi_GetResultStreamAt(position, set(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::ResponseInformation impl_IBackgroundTransferOperation<T>::GetResponseInformation() const
{
	Windows::Networking::BackgroundTransfer::ResponseInformation value(nullptr);
	check(static_cast<IBackgroundTransferOperation const &>(static_cast<T const &>(*this))->abi_GetResponseInformation(set(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferPriority impl_IBackgroundTransferOperationPriority<T>::Priority() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferPriority value = {};
	check(static_cast<IBackgroundTransferOperationPriority const &>(static_cast<T const &>(*this))->get_Priority(&value));
	return value;
}

template <typename T> void impl_IBackgroundTransferOperationPriority<T>::Priority(Windows::Networking::BackgroundTransfer::BackgroundTransferPriority const value) const
{
	check(static_cast<IBackgroundTransferOperationPriority const &>(static_cast<T const &>(*this))->put_Priority(value));
}

template <typename T> Windows::Storage::IStorageFile impl_IDownloadOperation<T>::ResultFile() const
{
	Windows::Storage::IStorageFile value = {};
	check(static_cast<IDownloadOperation const &>(static_cast<T const &>(*this))->get_ResultFile(set(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundDownloadProgress impl_IDownloadOperation<T>::Progress() const
{
	Windows::Networking::BackgroundTransfer::BackgroundDownloadProgress value = {};
	check(static_cast<IDownloadOperation const &>(static_cast<T const &>(*this))->get_Progress(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> impl_IDownloadOperation<T>::StartAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> operation = {};
	check(static_cast<IDownloadOperation const &>(static_cast<T const &>(*this))->abi_StartAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> impl_IDownloadOperation<T>::AttachAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> operation = {};
	check(static_cast<IDownloadOperation const &>(static_cast<T const &>(*this))->abi_AttachAsync(set(operation)));
	return operation;
}

template <typename T> void impl_IDownloadOperation<T>::Pause() const
{
	check(static_cast<IDownloadOperation const &>(static_cast<T const &>(*this))->abi_Pause());
}

template <typename T> void impl_IDownloadOperation<T>::Resume() const
{
	check(static_cast<IDownloadOperation const &>(static_cast<T const &>(*this))->abi_Resume());
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IDownloadOperation2<T>::TransferGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value(nullptr);
	check(static_cast<IDownloadOperation2 const &>(static_cast<T const &>(*this))->get_TransferGroup(set(value)));
	return value;
}

template <typename T> Windows::Storage::IStorageFile impl_IUploadOperation<T>::SourceFile() const
{
	Windows::Storage::IStorageFile value = {};
	check(static_cast<IUploadOperation const &>(static_cast<T const &>(*this))->get_SourceFile(set(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundUploadProgress impl_IUploadOperation<T>::Progress() const
{
	Windows::Networking::BackgroundTransfer::BackgroundUploadProgress value = {};
	check(static_cast<IUploadOperation const &>(static_cast<T const &>(*this))->get_Progress(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> impl_IUploadOperation<T>::StartAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> operation = {};
	check(static_cast<IUploadOperation const &>(static_cast<T const &>(*this))->abi_StartAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> impl_IUploadOperation<T>::AttachAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> operation = {};
	check(static_cast<IUploadOperation const &>(static_cast<T const &>(*this))->abi_AttachAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IUploadOperation2<T>::TransferGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value(nullptr);
	check(static_cast<IUploadOperation2 const &>(static_cast<T const &>(*this))->get_TransferGroup(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> impl_IBackgroundDownloaderStaticMethods<T>::GetCurrentDownloadsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> operation = {};
	check(static_cast<IBackgroundDownloaderStaticMethods const &>(static_cast<T const &>(*this))->abi_GetCurrentDownloadsAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> impl_IBackgroundDownloaderStaticMethods2<T>::GetCurrentDownloadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> operation = {};
	check(static_cast<IBackgroundDownloaderStaticMethods2 const &>(static_cast<T const &>(*this))->abi_GetCurrentDownloadsForTransferGroupAsync(get(group), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> impl_IBackgroundUploaderStaticMethods<T>::GetCurrentUploadsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> operation = {};
	check(static_cast<IBackgroundUploaderStaticMethods const &>(static_cast<T const &>(*this))->abi_GetCurrentUploadsAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> impl_IBackgroundUploaderStaticMethods2<T>::GetCurrentUploadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> operation = {};
	check(static_cast<IBackgroundUploaderStaticMethods2 const &>(static_cast<T const &>(*this))->abi_GetCurrentUploadsForTransferGroupAsync(get(group), set(operation)));
	return operation;
}

template <typename T> bool impl_IResponseInformation<T>::IsResumable() const
{
	bool value = {};
	check(static_cast<IResponseInformation const &>(static_cast<T const &>(*this))->get_IsResumable(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IResponseInformation<T>::ActualUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IResponseInformation const &>(static_cast<T const &>(*this))->get_ActualUri(set(value)));
	return value;
}

template <typename T> unsigned impl_IResponseInformation<T>::StatusCode() const
{
	unsigned value = {};
	check(static_cast<IResponseInformation const &>(static_cast<T const &>(*this))->get_StatusCode(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, String> impl_IResponseInformation<T>::Headers() const
{
	Windows::Foundation::Collections::IMapView<String, String> value = {};
	check(static_cast<IResponseInformation const &>(static_cast<T const &>(*this))->get_Headers(set(value)));
	return value;
}

template <typename T> Windows::Web::WebErrorStatus impl_IBackgroundTransferErrorStaticMethods<T>::GetStatus(int const hresult) const
{
	Windows::Web::WebErrorStatus status = {};
	check(static_cast<IBackgroundTransferErrorStaticMethods const &>(static_cast<T const &>(*this))->abi_GetStatus(hresult, &status));
	return status;
}

template <typename T> void impl_IBackgroundTransferContentPart<T>::SetHeader(String const & headerName, String const & headerValue) const
{
	check(static_cast<IBackgroundTransferContentPart const &>(static_cast<T const &>(*this))->abi_SetHeader(get(headerName), get(headerValue)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IBackgroundTransferContentPart<T>::SetHeader(wchar_t const (&headerName)[S0], wchar_t const (&headerValue)[S1]) const
{
	check(static_cast<IBackgroundTransferContentPart const &>(static_cast<T const &>(*this))->abi_SetHeader(StringReference(headerName), StringReference(headerValue)));
}

template <typename T> void impl_IBackgroundTransferContentPart<T>::SetText(String const & value) const
{
	check(static_cast<IBackgroundTransferContentPart const &>(static_cast<T const &>(*this))->abi_SetText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IBackgroundTransferContentPart<T>::SetText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IBackgroundTransferContentPart const &>(static_cast<T const &>(*this))->abi_SetText(StringReference(value)));
}

template <typename T> void impl_IBackgroundTransferContentPart<T>::SetFile(Windows::Storage::IStorageFile const & value) const
{
	check(static_cast<IBackgroundTransferContentPart const &>(static_cast<T const &>(*this))->abi_SetFile(get(value)));
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart impl_IBackgroundTransferContentPartFactory<T>::CreateWithName(String const & name) const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart value(nullptr);
	check(static_cast<IBackgroundTransferContentPartFactory const &>(static_cast<T const &>(*this))->abi_CreateWithName(get(name), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart impl_IBackgroundTransferContentPartFactory<T>::CreateWithName(wchar_t const (&name)[S0]) const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart value(nullptr);
	check(static_cast<IBackgroundTransferContentPartFactory const &>(static_cast<T const &>(*this))->abi_CreateWithName(StringReference(name), set(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart impl_IBackgroundTransferContentPartFactory<T>::CreateWithNameAndFileName(String const & name, String const & fileName) const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart value(nullptr);
	check(static_cast<IBackgroundTransferContentPartFactory const &>(static_cast<T const &>(*this))->abi_CreateWithNameAndFileName(get(name), get(fileName), set(value)));
	return value;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart impl_IBackgroundTransferContentPartFactory<T>::CreateWithNameAndFileName(wchar_t const (&name)[S0], wchar_t const (&fileName)[S1]) const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart value(nullptr);
	check(static_cast<IBackgroundTransferContentPartFactory const &>(static_cast<T const &>(*this))->abi_CreateWithNameAndFileName(StringReference(name), StringReference(fileName), set(value)));
	return value;
}

template <typename T> String impl_IBackgroundTransferGroup<T>::Name() const
{
	String value = {};
	check(static_cast<IBackgroundTransferGroup const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior impl_IBackgroundTransferGroup<T>::TransferBehavior() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior value = {};
	check(static_cast<IBackgroundTransferGroup const &>(static_cast<T const &>(*this))->get_TransferBehavior(&value));
	return value;
}

template <typename T> void impl_IBackgroundTransferGroup<T>::TransferBehavior(Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior const value) const
{
	check(static_cast<IBackgroundTransferGroup const &>(static_cast<T const &>(*this))->put_TransferBehavior(value));
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IBackgroundTransferGroupStatics<T>::CreateGroup(String const & name) const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value(nullptr);
	check(static_cast<IBackgroundTransferGroupStatics const &>(static_cast<T const &>(*this))->abi_CreateGroup(get(name), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IBackgroundTransferGroupStatics<T>::CreateGroup(wchar_t const (&name)[S0]) const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value(nullptr);
	check(static_cast<IBackgroundTransferGroupStatics const &>(static_cast<T const &>(*this))->abi_CreateGroup(StringReference(name), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IContentPrefetcherTime<T>::LastSuccessfulPrefetchTime() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IContentPrefetcherTime const &>(static_cast<T const &>(*this))->get_LastSuccessfulPrefetchTime(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> impl_IContentPrefetcher<T>::ContentUris() const
{
	Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> value = {};
	check(static_cast<IContentPrefetcher const &>(static_cast<T const &>(*this))->get_ContentUris(set(value)));
	return value;
}

template <typename T> void impl_IContentPrefetcher<T>::IndirectContentUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IContentPrefetcher const &>(static_cast<T const &>(*this))->put_IndirectContentUri(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IContentPrefetcher<T>::IndirectContentUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IContentPrefetcher const &>(static_cast<T const &>(*this))->get_IndirectContentUri(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

template <typename T> void impl_INetworkStatusChangedEventHandler<T>::Invoke(IInspectable const & sender) const
{
	check(static_cast<INetworkStatusChangedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender)));
}

template <typename T> unsigned impl_IDataPlanUsage<T>::MegabytesUsed() const
{
	unsigned value = {};
	check(static_cast<IDataPlanUsage const &>(static_cast<T const &>(*this))->get_MegabytesUsed(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IDataPlanUsage<T>::LastSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IDataPlanUsage const &>(static_cast<T const &>(*this))->get_LastSyncTime(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataPlanUsage impl_IDataPlanStatus<T>::DataPlanUsage() const
{
	Windows::Networking::Connectivity::DataPlanUsage value(nullptr);
	check(static_cast<IDataPlanStatus const &>(static_cast<T const &>(*this))->get_DataPlanUsage(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IDataPlanStatus<T>::DataLimitInMegabytes() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IDataPlanStatus const &>(static_cast<T const &>(*this))->get_DataLimitInMegabytes(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IDataPlanStatus<T>::InboundBitsPerSecond() const
{
	Windows::Foundation::IReference<unsigned long long> value = {};
	check(static_cast<IDataPlanStatus const &>(static_cast<T const &>(*this))->get_InboundBitsPerSecond(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IDataPlanStatus<T>::OutboundBitsPerSecond() const
{
	Windows::Foundation::IReference<unsigned long long> value = {};
	check(static_cast<IDataPlanStatus const &>(static_cast<T const &>(*this))->get_OutboundBitsPerSecond(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IDataPlanStatus<T>::NextBillingCycle() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IDataPlanStatus const &>(static_cast<T const &>(*this))->get_NextBillingCycle(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IDataPlanStatus<T>::MaxTransferSizeInMegabytes() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IDataPlanStatus const &>(static_cast<T const &>(*this))->get_MaxTransferSizeInMegabytes(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkCostType impl_IConnectionCost<T>::NetworkCostType() const
{
	Windows::Networking::Connectivity::NetworkCostType value = {};
	check(static_cast<IConnectionCost const &>(static_cast<T const &>(*this))->get_NetworkCostType(&value));
	return value;
}

template <typename T> bool impl_IConnectionCost<T>::Roaming() const
{
	bool value = {};
	check(static_cast<IConnectionCost const &>(static_cast<T const &>(*this))->get_Roaming(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IConnectionCost<T>::OverDataLimit() const
{
	bool value = {};
	check(static_cast<IConnectionCost const &>(static_cast<T const &>(*this))->get_OverDataLimit(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IConnectionCost<T>::ApproachingDataLimit() const
{
	bool value = {};
	check(static_cast<IConnectionCost const &>(static_cast<T const &>(*this))->get_ApproachingDataLimit(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAuthenticationType impl_INetworkSecuritySettings<T>::NetworkAuthenticationType() const
{
	Windows::Networking::Connectivity::NetworkAuthenticationType value = {};
	check(static_cast<INetworkSecuritySettings const &>(static_cast<T const &>(*this))->get_NetworkAuthenticationType(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkEncryptionType impl_INetworkSecuritySettings<T>::NetworkEncryptionType() const
{
	Windows::Networking::Connectivity::NetworkEncryptionType value = {};
	check(static_cast<INetworkSecuritySettings const &>(static_cast<T const &>(*this))->get_NetworkEncryptionType(&value));
	return value;
}

template <typename T> String impl_IConnectionProfile<T>::ProfileName() const
{
	String value = {};
	check(static_cast<IConnectionProfile const &>(static_cast<T const &>(*this))->get_ProfileName(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkConnectivityLevel impl_IConnectionProfile<T>::GetNetworkConnectivityLevel() const
{
	Windows::Networking::Connectivity::NetworkConnectivityLevel value = {};
	check(static_cast<IConnectionProfile const &>(static_cast<T const &>(*this))->abi_GetNetworkConnectivityLevel(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IConnectionProfile<T>::GetNetworkNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IConnectionProfile const &>(static_cast<T const &>(*this))->abi_GetNetworkNames(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionCost impl_IConnectionProfile<T>::GetConnectionCost() const
{
	Windows::Networking::Connectivity::ConnectionCost value(nullptr);
	check(static_cast<IConnectionProfile const &>(static_cast<T const &>(*this))->abi_GetConnectionCost(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataPlanStatus impl_IConnectionProfile<T>::GetDataPlanStatus() const
{
	Windows::Networking::Connectivity::DataPlanStatus value(nullptr);
	check(static_cast<IConnectionProfile const &>(static_cast<T const &>(*this))->abi_GetDataPlanStatus(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IConnectionProfile<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value(nullptr);
	check(static_cast<IConnectionProfile const &>(static_cast<T const &>(*this))->get_NetworkAdapter(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkSecuritySettings impl_IConnectionProfile<T>::NetworkSecuritySettings() const
{
	Windows::Networking::Connectivity::NetworkSecuritySettings value(nullptr);
	check(static_cast<IConnectionProfile const &>(static_cast<T const &>(*this))->get_NetworkSecuritySettings(set(value)));
	return value;
}

template <typename T> String impl_IWwanConnectionProfileDetails<T>::HomeProviderId() const
{
	String value = {};
	check(static_cast<IWwanConnectionProfileDetails const &>(static_cast<T const &>(*this))->get_HomeProviderId(set(value)));
	return value;
}

template <typename T> String impl_IWwanConnectionProfileDetails<T>::AccessPointName() const
{
	String value = {};
	check(static_cast<IWwanConnectionProfileDetails const &>(static_cast<T const &>(*this))->get_AccessPointName(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WwanNetworkRegistrationState impl_IWwanConnectionProfileDetails<T>::GetNetworkRegistrationState() const
{
	Windows::Networking::Connectivity::WwanNetworkRegistrationState value = {};
	check(static_cast<IWwanConnectionProfileDetails const &>(static_cast<T const &>(*this))->abi_GetNetworkRegistrationState(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WwanDataClass impl_IWwanConnectionProfileDetails<T>::GetCurrentDataClass() const
{
	Windows::Networking::Connectivity::WwanDataClass value = {};
	check(static_cast<IWwanConnectionProfileDetails const &>(static_cast<T const &>(*this))->abi_GetCurrentDataClass(&value));
	return value;
}

template <typename T> String impl_IWlanConnectionProfileDetails<T>::GetConnectedSsid() const
{
	String value = {};
	check(static_cast<IWlanConnectionProfileDetails const &>(static_cast<T const &>(*this))->abi_GetConnectedSsid(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IConnectivityInterval<T>::StartTime() const
{
	Windows::Foundation::DateTime startTime = {};
	check(static_cast<IConnectivityInterval const &>(static_cast<T const &>(*this))->get_StartTime(&startTime));
	return startTime;
}

template <typename T> Windows::Foundation::TimeSpan impl_IConnectivityInterval<T>::ConnectionDuration() const
{
	Windows::Foundation::TimeSpan duration = {};
	check(static_cast<IConnectivityInterval const &>(static_cast<T const &>(*this))->get_ConnectionDuration(&duration));
	return duration;
}

template <typename T> unsigned long long impl_INetworkUsage<T>::BytesSent() const
{
	unsigned long long value = {};
	check(static_cast<INetworkUsage const &>(static_cast<T const &>(*this))->get_BytesSent(&value));
	return value;
}

template <typename T> unsigned long long impl_INetworkUsage<T>::BytesReceived() const
{
	unsigned long long value = {};
	check(static_cast<INetworkUsage const &>(static_cast<T const &>(*this))->get_BytesReceived(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_INetworkUsage<T>::ConnectionDuration() const
{
	Windows::Foundation::TimeSpan duration = {};
	check(static_cast<INetworkUsage const &>(static_cast<T const &>(*this))->get_ConnectionDuration(&duration));
	return duration;
}

template <typename T> bool impl_IConnectionProfile2<T>::IsWwanConnectionProfile() const
{
	bool value = {};
	check(static_cast<IConnectionProfile2 const &>(static_cast<T const &>(*this))->get_IsWwanConnectionProfile(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IConnectionProfile2<T>::IsWlanConnectionProfile() const
{
	bool value = {};
	check(static_cast<IConnectionProfile2 const &>(static_cast<T const &>(*this))->get_IsWlanConnectionProfile(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WwanConnectionProfileDetails impl_IConnectionProfile2<T>::WwanConnectionProfileDetails() const
{
	Windows::Networking::Connectivity::WwanConnectionProfileDetails value(nullptr);
	check(static_cast<IConnectionProfile2 const &>(static_cast<T const &>(*this))->get_WwanConnectionProfileDetails(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WlanConnectionProfileDetails impl_IConnectionProfile2<T>::WlanConnectionProfileDetails() const
{
	Windows::Networking::Connectivity::WlanConnectionProfileDetails value(nullptr);
	check(static_cast<IConnectionProfile2 const &>(static_cast<T const &>(*this))->get_WlanConnectionProfileDetails(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<GUID> impl_IConnectionProfile2<T>::ServiceProviderGuid() const
{
	Windows::Foundation::IReference<GUID> value = {};
	check(static_cast<IConnectionProfile2 const &>(static_cast<T const &>(*this))->get_ServiceProviderGuid(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<byte> impl_IConnectionProfile2<T>::GetSignalBars() const
{
	Windows::Foundation::IReference<byte> value = {};
	check(static_cast<IConnectionProfile2 const &>(static_cast<T const &>(*this))->abi_GetSignalBars(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DomainConnectivityLevel impl_IConnectionProfile2<T>::GetDomainConnectivityLevel() const
{
	Windows::Networking::Connectivity::DomainConnectivityLevel value = {};
	check(static_cast<IConnectionProfile2 const &>(static_cast<T const &>(*this))->abi_GetDomainConnectivityLevel(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage>> impl_IConnectionProfile2<T>::GetNetworkUsageAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::DataUsageGranularity const granularity, Windows::Networking::Connectivity::NetworkUsageStates const & states) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage>> value = {};
	check(static_cast<IConnectionProfile2 const &>(static_cast<T const &>(*this))->abi_GetNetworkUsageAsync(startTime, endTime, granularity, states, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval>> impl_IConnectionProfile2<T>::GetConnectivityIntervalsAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::NetworkUsageStates const & states) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval>> value = {};
	check(static_cast<IConnectionProfile2 const &>(static_cast<T const &>(*this))->abi_GetConnectivityIntervalsAsync(startTime, endTime, states, set(value)));
	return value;
}

template <typename T> unsigned impl_ILanIdentifierData<T>::Type() const
{
	unsigned value = {};
	check(static_cast<ILanIdentifierData const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<byte> impl_ILanIdentifierData<T>::Value() const
{
	Windows::Foundation::Collections::IVectorView<byte> value = {};
	check(static_cast<ILanIdentifierData const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::LanIdentifierData impl_ILanIdentifier<T>::InfrastructureId() const
{
	Windows::Networking::Connectivity::LanIdentifierData value(nullptr);
	check(static_cast<ILanIdentifier const &>(static_cast<T const &>(*this))->get_InfrastructureId(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::LanIdentifierData impl_ILanIdentifier<T>::PortId() const
{
	Windows::Networking::Connectivity::LanIdentifierData value(nullptr);
	check(static_cast<ILanIdentifier const &>(static_cast<T const &>(*this))->get_PortId(set(value)));
	return value;
}

template <typename T> GUID impl_ILanIdentifier<T>::NetworkAdapterId() const
{
	GUID value = {};
	check(static_cast<ILanIdentifier const &>(static_cast<T const &>(*this))->get_NetworkAdapterId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> impl_INetworkInformationStatics<T>::GetConnectionProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> value = {};
	check(static_cast<INetworkInformationStatics const &>(static_cast<T const &>(*this))->abi_GetConnectionProfiles(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionProfile impl_INetworkInformationStatics<T>::GetInternetConnectionProfile() const
{
	Windows::Networking::Connectivity::ConnectionProfile value(nullptr);
	check(static_cast<INetworkInformationStatics const &>(static_cast<T const &>(*this))->abi_GetInternetConnectionProfile(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> impl_INetworkInformationStatics<T>::GetLanIdentifiers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> value = {};
	check(static_cast<INetworkInformationStatics const &>(static_cast<T const &>(*this))->abi_GetLanIdentifiers(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> impl_INetworkInformationStatics<T>::GetHostNames() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> value = {};
	check(static_cast<INetworkInformationStatics const &>(static_cast<T const &>(*this))->abi_GetHostNames(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> impl_INetworkInformationStatics<T>::GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> value = {};
	check(static_cast<INetworkInformationStatics const &>(static_cast<T const &>(*this))->abi_GetProxyConfigurationAsync(get(uri), set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> impl_INetworkInformationStatics<T>::GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions const sortOptions) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> value = {};
	check(static_cast<INetworkInformationStatics const &>(static_cast<T const &>(*this))->abi_GetSortedEndpointPairs(get(destinationList), sortOptions, set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_INetworkInformationStatics<T>::NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<INetworkInformationStatics const &>(static_cast<T const &>(*this))->add_NetworkStatusChanged(get(networkStatusHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_INetworkInformationStatics<T>::NetworkStatusChanged(F networkStatusHandler) const
{
	return NetworkStatusChanged(Windows::Networking::Connectivity::NetworkStatusChangedEventHandler(networkStatusHandler));
}

template <typename T> void impl_INetworkInformationStatics<T>::NetworkStatusChanged(EventRegistrationToken const eventCookie) const
{
	check(static_cast<INetworkInformationStatics const &>(static_cast<T const &>(*this))->remove_NetworkStatusChanged(eventCookie));
}

template <typename T> void impl_IConnectionProfileFilter<T>::IsConnected(bool const value) const
{
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->put_IsConnected(value));
}

template <typename T> bool impl_IConnectionProfileFilter<T>::IsConnected() const
{
	bool value = {};
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->get_IsConnected(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::IsWwanConnectionProfile(bool const value) const
{
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->put_IsWwanConnectionProfile(value));
}

template <typename T> bool impl_IConnectionProfileFilter<T>::IsWwanConnectionProfile() const
{
	bool value = {};
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->get_IsWwanConnectionProfile(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::IsWlanConnectionProfile(bool const value) const
{
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->put_IsWlanConnectionProfile(value));
}

template <typename T> bool impl_IConnectionProfileFilter<T>::IsWlanConnectionProfile() const
{
	bool value = {};
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->get_IsWlanConnectionProfile(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::NetworkCostType(Windows::Networking::Connectivity::NetworkCostType const value) const
{
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->put_NetworkCostType(value));
}

template <typename T> Windows::Networking::Connectivity::NetworkCostType impl_IConnectionProfileFilter<T>::NetworkCostType() const
{
	Windows::Networking::Connectivity::NetworkCostType value = {};
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->get_NetworkCostType(&value));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::ServiceProviderGuid(Windows::Foundation::IReference<GUID> const & value) const
{
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->put_ServiceProviderGuid(get(value)));
}

template <typename T> Windows::Foundation::IReference<GUID> impl_IConnectionProfileFilter<T>::ServiceProviderGuid() const
{
	Windows::Foundation::IReference<GUID> value = {};
	check(static_cast<IConnectionProfileFilter const &>(static_cast<T const &>(*this))->get_ServiceProviderGuid(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> impl_INetworkInformationStatics2<T>::FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> value = {};
	check(static_cast<INetworkInformationStatics2 const &>(static_cast<T const &>(*this))->abi_FindConnectionProfilesAsync(get(pProfileFilter), set(value)));
	return value;
}

template <typename T> GUID impl_INetworkItem<T>::NetworkId() const
{
	GUID value = {};
	check(static_cast<INetworkItem const &>(static_cast<T const &>(*this))->get_NetworkId(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkTypes impl_INetworkItem<T>::GetNetworkTypes() const
{
	Windows::Networking::Connectivity::NetworkTypes value = {};
	check(static_cast<INetworkItem const &>(static_cast<T const &>(*this))->abi_GetNetworkTypes(&value));
	return value;
}

template <typename T> unsigned long long impl_INetworkAdapter<T>::OutboundMaxBitsPerSecond() const
{
	unsigned long long value = {};
	check(static_cast<INetworkAdapter const &>(static_cast<T const &>(*this))->get_OutboundMaxBitsPerSecond(&value));
	return value;
}

template <typename T> unsigned long long impl_INetworkAdapter<T>::InboundMaxBitsPerSecond() const
{
	unsigned long long value = {};
	check(static_cast<INetworkAdapter const &>(static_cast<T const &>(*this))->get_InboundMaxBitsPerSecond(&value));
	return value;
}

template <typename T> unsigned impl_INetworkAdapter<T>::IanaInterfaceType() const
{
	unsigned value = {};
	check(static_cast<INetworkAdapter const &>(static_cast<T const &>(*this))->get_IanaInterfaceType(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkItem impl_INetworkAdapter<T>::NetworkItem() const
{
	Windows::Networking::Connectivity::NetworkItem value(nullptr);
	check(static_cast<INetworkAdapter const &>(static_cast<T const &>(*this))->get_NetworkItem(set(value)));
	return value;
}

template <typename T> GUID impl_INetworkAdapter<T>::NetworkAdapterId() const
{
	GUID value = {};
	check(static_cast<INetworkAdapter const &>(static_cast<T const &>(*this))->get_NetworkAdapterId(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile> impl_INetworkAdapter<T>::GetConnectedProfileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile> value = {};
	check(static_cast<INetworkAdapter const &>(static_cast<T const &>(*this))->abi_GetConnectedProfileAsync(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IIPInformation<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value(nullptr);
	check(static_cast<IIPInformation const &>(static_cast<T const &>(*this))->get_NetworkAdapter(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<byte> impl_IIPInformation<T>::PrefixLength() const
{
	Windows::Foundation::IReference<byte> value = {};
	check(static_cast<IIPInformation const &>(static_cast<T const &>(*this))->get_PrefixLength(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> impl_IProxyConfiguration<T>::ProxyUris() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> value = {};
	check(static_cast<IProxyConfiguration const &>(static_cast<T const &>(*this))->get_ProxyUris(set(value)));
	return value;
}

template <typename T> bool impl_IProxyConfiguration<T>::CanConnectDirectly() const
{
	bool value = {};
	check(static_cast<IProxyConfiguration const &>(static_cast<T const &>(*this))->get_CanConnectDirectly(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionProfile impl_IConnectionSession<T>::ConnectionProfile() const
{
	Windows::Networking::Connectivity::ConnectionProfile value(nullptr);
	check(static_cast<IConnectionSession const &>(static_cast<T const &>(*this))->get_ConnectionProfile(set(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionProfile impl_IRoutePolicy<T>::ConnectionProfile() const
{
	Windows::Networking::Connectivity::ConnectionProfile value(nullptr);
	check(static_cast<IRoutePolicy const &>(static_cast<T const &>(*this))->get_ConnectionProfile(set(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IRoutePolicy<T>::HostName() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IRoutePolicy const &>(static_cast<T const &>(*this))->get_HostName(set(value)));
	return value;
}

template <typename T> Windows::Networking::DomainNameType impl_IRoutePolicy<T>::HostNameType() const
{
	Windows::Networking::DomainNameType value = {};
	check(static_cast<IRoutePolicy const &>(static_cast<T const &>(*this))->get_HostNameType(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::RoutePolicy impl_IRoutePolicyFactory<T>::CreateRoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType const type) const
{
	Windows::Networking::Connectivity::RoutePolicy routePolicy(nullptr);
	check(static_cast<IRoutePolicyFactory const &>(static_cast<T const &>(*this))->abi_CreateRoutePolicy(get(connectionProfile), get(hostName), type, set(routePolicy)));
	return routePolicy;
}

template <typename T> String impl_ICellularApnContext<T>::ProviderId() const
{
	String value = {};
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->get_ProviderId(set(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::ProviderId(String const & value) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_ProviderId(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICellularApnContext<T>::ProviderId(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_ProviderId(StringReference(value)));
}

template <typename T> String impl_ICellularApnContext<T>::AccessPointName() const
{
	String value = {};
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->get_AccessPointName(set(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::AccessPointName(String const & value) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_AccessPointName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICellularApnContext<T>::AccessPointName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_AccessPointName(StringReference(value)));
}

template <typename T> String impl_ICellularApnContext<T>::UserName() const
{
	String value = {};
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->get_UserName(set(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::UserName(String const & value) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_UserName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICellularApnContext<T>::UserName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_UserName(StringReference(value)));
}

template <typename T> String impl_ICellularApnContext<T>::Password() const
{
	String value = {};
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->get_Password(set(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::Password(String const & value) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_Password(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICellularApnContext<T>::Password(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_Password(StringReference(value)));
}

template <typename T> bool impl_ICellularApnContext<T>::IsCompressionEnabled() const
{
	bool value = {};
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->get_IsCompressionEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::IsCompressionEnabled(bool const value) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_IsCompressionEnabled(value));
}

template <typename T> Windows::Networking::Connectivity::CellularApnAuthenticationType impl_ICellularApnContext<T>::AuthenticationType() const
{
	Windows::Networking::Connectivity::CellularApnAuthenticationType value = {};
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->get_AuthenticationType(&value));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::AuthenticationType(Windows::Networking::Connectivity::CellularApnAuthenticationType const value) const
{
	check(static_cast<ICellularApnContext const &>(static_cast<T const &>(*this))->put_AuthenticationType(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> impl_IConnectivityManagerStatics<T>::AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> operation = {};
	check(static_cast<IConnectivityManagerStatics const &>(static_cast<T const &>(*this))->abi_AcquireConnectionAsync(get(cellularApnContext), set(operation)));
	return operation;
}

template <typename T> void impl_IConnectivityManagerStatics<T>::AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const
{
	check(static_cast<IConnectivityManagerStatics const &>(static_cast<T const &>(*this))->abi_AddHttpRoutePolicy(get(routePolicy)));
}

template <typename T> void impl_IConnectivityManagerStatics<T>::RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const
{
	check(static_cast<IConnectivityManagerStatics const &>(static_cast<T const &>(*this))->abi_RemoveHttpRoutePolicy(get(routePolicy)));
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewInternetConnectionProfile() const
{
	bool value = {};
	check(static_cast<INetworkStateChangeEventDetails const &>(static_cast<T const &>(*this))->get_HasNewInternetConnectionProfile(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewConnectionCost() const
{
	bool value = {};
	check(static_cast<INetworkStateChangeEventDetails const &>(static_cast<T const &>(*this))->get_HasNewConnectionCost(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewNetworkConnectivityLevel() const
{
	bool value = {};
	check(static_cast<INetworkStateChangeEventDetails const &>(static_cast<T const &>(*this))->get_HasNewNetworkConnectivityLevel(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewDomainConnectivityLevel() const
{
	bool value = {};
	check(static_cast<INetworkStateChangeEventDetails const &>(static_cast<T const &>(*this))->get_HasNewDomainConnectivityLevel(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewHostNameList() const
{
	bool value = {};
	check(static_cast<INetworkStateChangeEventDetails const &>(static_cast<T const &>(*this))->get_HasNewHostNameList(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewWwanRegistrationState() const
{
	bool value = {};
	check(static_cast<INetworkStateChangeEventDetails const &>(static_cast<T const &>(*this))->get_HasNewWwanRegistrationState(BoolProxy(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IMobileBroadbandAccountStatics<T>::AvailableNetworkAccountIds() const
{
	Windows::Foundation::Collections::IVectorView<String> ppAccountIds = {};
	check(static_cast<IMobileBroadbandAccountStatics const &>(static_cast<T const &>(*this))->get_AvailableNetworkAccountIds(set(ppAccountIds)));
	return ppAccountIds;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandAccount impl_IMobileBroadbandAccountStatics<T>::CreateFromNetworkAccountId(String const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::MobileBroadbandAccount ppAccount(nullptr);
	check(static_cast<IMobileBroadbandAccountStatics const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkAccountId(get(networkAccountId), set(ppAccount)));
	return ppAccount;
}

template <typename T> template <unsigned S0> Windows::Networking::NetworkOperators::MobileBroadbandAccount impl_IMobileBroadbandAccountStatics<T>::CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const
{
	Windows::Networking::NetworkOperators::MobileBroadbandAccount ppAccount(nullptr);
	check(static_cast<IMobileBroadbandAccountStatics const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkAccountId(StringReference(networkAccountId), set(ppAccount)));
	return ppAccount;
}

template <typename T> String impl_IMobileBroadbandAccount<T>::NetworkAccountId() const
{
	String value = {};
	check(static_cast<IMobileBroadbandAccount const &>(static_cast<T const &>(*this))->get_NetworkAccountId(set(value)));
	return value;
}

template <typename T> GUID impl_IMobileBroadbandAccount<T>::ServiceProviderGuid() const
{
	GUID value = {};
	check(static_cast<IMobileBroadbandAccount const &>(static_cast<T const &>(*this))->get_ServiceProviderGuid(&value));
	return value;
}

template <typename T> String impl_IMobileBroadbandAccount<T>::ServiceProviderName() const
{
	String value = {};
	check(static_cast<IMobileBroadbandAccount const &>(static_cast<T const &>(*this))->get_ServiceProviderName(set(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandNetwork impl_IMobileBroadbandAccount<T>::CurrentNetwork() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandNetwork network(nullptr);
	check(static_cast<IMobileBroadbandAccount const &>(static_cast<T const &>(*this))->get_CurrentNetwork(set(network)));
	return network;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation impl_IMobileBroadbandAccount<T>::CurrentDeviceInformation() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation deviceInformation(nullptr);
	check(static_cast<IMobileBroadbandAccount const &>(static_cast<T const &>(*this))->get_CurrentDeviceInformation(set(deviceInformation)));
	return deviceInformation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> impl_IMobileBroadbandAccount2<T>::GetConnectionProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> value = {};
	check(static_cast<IMobileBroadbandAccount2 const &>(static_cast<T const &>(*this))->abi_GetConnectionProfiles(set(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkDeviceStatus impl_IMobileBroadbandDeviceInformation<T>::NetworkDeviceStatus() const
{
	Windows::Networking::NetworkOperators::NetworkDeviceStatus value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_NetworkDeviceStatus(&value));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::Manufacturer() const
{
	String value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_Manufacturer(set(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::Model() const
{
	String value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_Model(set(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::FirmwareInformation() const
{
	String value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_FirmwareInformation(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_IMobileBroadbandDeviceInformation<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::DataClasses impl_IMobileBroadbandDeviceInformation<T>::DataClasses() const
{
	Windows::Networking::NetworkOperators::DataClasses value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_DataClasses(&value));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::CustomDataClass() const
{
	String value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_CustomDataClass(set(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::MobileEquipmentId() const
{
	String value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_MobileEquipmentId(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IMobileBroadbandDeviceInformation<T>::TelephoneNumbers() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_TelephoneNumbers(set(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::SubscriberId() const
{
	String value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_SubscriberId(set(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::SimIccId() const
{
	String value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_SimIccId(set(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandDeviceType impl_IMobileBroadbandDeviceInformation<T>::DeviceType() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceType pDeviceType = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_DeviceType(&pDeviceType));
	return pDeviceType;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::DeviceId() const
{
	String value = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandRadioState impl_IMobileBroadbandDeviceInformation<T>::CurrentRadioState() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandRadioState pCurrentState = {};
	check(static_cast<IMobileBroadbandDeviceInformation const &>(static_cast<T const &>(*this))->get_CurrentRadioState(&pCurrentState));
	return pCurrentState;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IMobileBroadbandNetwork<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value(nullptr);
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->get_NetworkAdapter(set(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkRegistrationState impl_IMobileBroadbandNetwork<T>::NetworkRegistrationState() const
{
	Windows::Networking::NetworkOperators::NetworkRegistrationState registrationState = {};
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->get_NetworkRegistrationState(&registrationState));
	return registrationState;
}

template <typename T> unsigned impl_IMobileBroadbandNetwork<T>::RegistrationNetworkError() const
{
	unsigned networkError = {};
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->get_RegistrationNetworkError(&networkError));
	return networkError;
}

template <typename T> unsigned impl_IMobileBroadbandNetwork<T>::PacketAttachNetworkError() const
{
	unsigned networkError = {};
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->get_PacketAttachNetworkError(&networkError));
	return networkError;
}

template <typename T> unsigned impl_IMobileBroadbandNetwork<T>::ActivationNetworkError() const
{
	unsigned networkError = {};
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->get_ActivationNetworkError(&networkError));
	return networkError;
}

template <typename T> String impl_IMobileBroadbandNetwork<T>::AccessPointName() const
{
	String apn = {};
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->get_AccessPointName(set(apn)));
	return apn;
}

template <typename T> Windows::Networking::NetworkOperators::DataClasses impl_IMobileBroadbandNetwork<T>::RegisteredDataClass() const
{
	Windows::Networking::NetworkOperators::DataClasses value = {};
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->get_RegisteredDataClass(&value));
	return value;
}

template <typename T> String impl_IMobileBroadbandNetwork<T>::RegisteredProviderId() const
{
	String value = {};
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->get_RegisteredProviderId(set(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandNetwork<T>::RegisteredProviderName() const
{
	String value = {};
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->get_RegisteredProviderName(set(value)));
	return value;
}

template <typename T> void impl_IMobileBroadbandNetwork<T>::ShowConnectionUI() const
{
	check(static_cast<IMobileBroadbandNetwork const &>(static_cast<T const &>(*this))->abi_ShowConnectionUI());
}

template <typename T> Windows::Networking::NetworkOperators::NetworkOperatorEventMessageType impl_INetworkOperatorNotificationEventDetails<T>::NotificationType() const
{
	Windows::Networking::NetworkOperators::NetworkOperatorEventMessageType value = {};
	check(static_cast<INetworkOperatorNotificationEventDetails const &>(static_cast<T const &>(*this))->get_NotificationType(&value));
	return value;
}

template <typename T> String impl_INetworkOperatorNotificationEventDetails<T>::NetworkAccountId() const
{
	String value = {};
	check(static_cast<INetworkOperatorNotificationEventDetails const &>(static_cast<T const &>(*this))->get_NetworkAccountId(set(value)));
	return value;
}

template <typename T> byte impl_INetworkOperatorNotificationEventDetails<T>::EncodingType() const
{
	byte value = {};
	check(static_cast<INetworkOperatorNotificationEventDetails const &>(static_cast<T const &>(*this))->get_EncodingType(&value));
	return value;
}

template <typename T> String impl_INetworkOperatorNotificationEventDetails<T>::Message() const
{
	String value = {};
	check(static_cast<INetworkOperatorNotificationEventDetails const &>(static_cast<T const &>(*this))->get_Message(set(value)));
	return value;
}

template <typename T> String impl_INetworkOperatorNotificationEventDetails<T>::RuleId() const
{
	String value = {};
	check(static_cast<INetworkOperatorNotificationEventDetails const &>(static_cast<T const &>(*this))->get_RuleId(set(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::ISmsMessage impl_INetworkOperatorNotificationEventDetails<T>::SmsMessage() const
{
	Windows::Devices::Sms::ISmsMessage value = {};
	check(static_cast<INetworkOperatorNotificationEventDetails const &>(static_cast<T const &>(*this))->get_SmsMessage(set(value)));
	return value;
}

template <typename T> void impl_INetworkOperatorTetheringEntitlementCheck<T>::AuthorizeTethering(bool const allow, String const & entitlementFailureReason) const
{
	check(static_cast<INetworkOperatorTetheringEntitlementCheck const &>(static_cast<T const &>(*this))->abi_AuthorizeTethering(allow, get(entitlementFailureReason)));
}

template <typename T> template <unsigned S0> void impl_INetworkOperatorTetheringEntitlementCheck<T>::AuthorizeTethering(bool const allow, wchar_t const (&entitlementFailureReason)[S0]) const
{
	check(static_cast<INetworkOperatorTetheringEntitlementCheck const &>(static_cast<T const &>(*this))->abi_AuthorizeTethering(allow, StringReference(entitlementFailureReason)));
}

template <typename T> String impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Ssid() const
{
	String value = {};
	check(static_cast<INetworkOperatorTetheringAccessPointConfiguration const &>(static_cast<T const &>(*this))->get_Ssid(set(value)));
	return value;
}

template <typename T> void impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Ssid(String const & value) const
{
	check(static_cast<INetworkOperatorTetheringAccessPointConfiguration const &>(static_cast<T const &>(*this))->put_Ssid(get(value)));
}

template <typename T> template <unsigned S0> void impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Ssid(wchar_t const (&value)[S0]) const
{
	check(static_cast<INetworkOperatorTetheringAccessPointConfiguration const &>(static_cast<T const &>(*this))->put_Ssid(StringReference(value)));
}

template <typename T> String impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Passphrase() const
{
	String value = {};
	check(static_cast<INetworkOperatorTetheringAccessPointConfiguration const &>(static_cast<T const &>(*this))->get_Passphrase(set(value)));
	return value;
}

template <typename T> void impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Passphrase(String const & value) const
{
	check(static_cast<INetworkOperatorTetheringAccessPointConfiguration const &>(static_cast<T const &>(*this))->put_Passphrase(get(value)));
}

template <typename T> template <unsigned S0> void impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Passphrase(wchar_t const (&value)[S0]) const
{
	check(static_cast<INetworkOperatorTetheringAccessPointConfiguration const &>(static_cast<T const &>(*this))->put_Passphrase(StringReference(value)));
}

template <typename T> Windows::Networking::NetworkOperators::TetheringOperationStatus impl_INetworkOperatorTetheringOperationResult<T>::Status() const
{
	Windows::Networking::NetworkOperators::TetheringOperationStatus value = {};
	check(static_cast<INetworkOperatorTetheringOperationResult const &>(static_cast<T const &>(*this))->get_Status(&value));
	return value;
}

template <typename T> String impl_INetworkOperatorTetheringOperationResult<T>::AdditionalErrorMessage() const
{
	String value = {};
	check(static_cast<INetworkOperatorTetheringOperationResult const &>(static_cast<T const &>(*this))->get_AdditionalErrorMessage(set(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::TetheringCapability impl_INetworkOperatorTetheringManagerStatics<T>::GetTetheringCapability(String const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::TetheringCapability value = {};
	check(static_cast<INetworkOperatorTetheringManagerStatics const &>(static_cast<T const &>(*this))->abi_GetTetheringCapability(get(networkAccountId), &value));
	return value;
}

template <typename T> template <unsigned S0> Windows::Networking::NetworkOperators::TetheringCapability impl_INetworkOperatorTetheringManagerStatics<T>::GetTetheringCapability(wchar_t const (&networkAccountId)[S0]) const
{
	Windows::Networking::NetworkOperators::TetheringCapability value = {};
	check(static_cast<INetworkOperatorTetheringManagerStatics const &>(static_cast<T const &>(*this))->abi_GetTetheringCapability(StringReference(networkAccountId), &value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager impl_INetworkOperatorTetheringManagerStatics<T>::CreateFromNetworkAccountId(String const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager ppManager(nullptr);
	check(static_cast<INetworkOperatorTetheringManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkAccountId(get(networkAccountId), set(ppManager)));
	return ppManager;
}

template <typename T> template <unsigned S0> Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager impl_INetworkOperatorTetheringManagerStatics<T>::CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const
{
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager ppManager(nullptr);
	check(static_cast<INetworkOperatorTetheringManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkAccountId(StringReference(networkAccountId), set(ppManager)));
	return ppManager;
}

template <typename T> unsigned impl_INetworkOperatorTetheringManager<T>::MaxClientCount() const
{
	unsigned value = {};
	check(static_cast<INetworkOperatorTetheringManager const &>(static_cast<T const &>(*this))->get_MaxClientCount(&value));
	return value;
}

template <typename T> unsigned impl_INetworkOperatorTetheringManager<T>::ClientCount() const
{
	unsigned value = {};
	check(static_cast<INetworkOperatorTetheringManager const &>(static_cast<T const &>(*this))->get_ClientCount(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::TetheringOperationalState impl_INetworkOperatorTetheringManager<T>::TetheringOperationalState() const
{
	Windows::Networking::NetworkOperators::TetheringOperationalState value = {};
	check(static_cast<INetworkOperatorTetheringManager const &>(static_cast<T const &>(*this))->get_TetheringOperationalState(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration impl_INetworkOperatorTetheringManager<T>::GetCurrentAccessPointConfiguration() const
{
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration configuration(nullptr);
	check(static_cast<INetworkOperatorTetheringManager const &>(static_cast<T const &>(*this))->abi_GetCurrentAccessPointConfiguration(set(configuration)));
	return configuration;
}

template <typename T> Windows::Foundation::IAsyncAction impl_INetworkOperatorTetheringManager<T>::ConfigureAccessPointAsync(Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration const & configuration) const
{
	Windows::Foundation::IAsyncAction asyncInfo = {};
	check(static_cast<INetworkOperatorTetheringManager const &>(static_cast<T const &>(*this))->abi_ConfigureAccessPointAsync(get(configuration), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> impl_INetworkOperatorTetheringManager<T>::StartTetheringAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> asyncInfo = {};
	check(static_cast<INetworkOperatorTetheringManager const &>(static_cast<T const &>(*this))->abi_StartTetheringAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> impl_INetworkOperatorTetheringManager<T>::StopTetheringAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> asyncInfo = {};
	check(static_cast<INetworkOperatorTetheringManager const &>(static_cast<T const &>(*this))->abi_StopTetheringAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> String impl_IMobileBroadbandAccountEventArgs<T>::NetworkAccountId() const
{
	String value = {};
	check(static_cast<IMobileBroadbandAccountEventArgs const &>(static_cast<T const &>(*this))->get_NetworkAccountId(set(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandAccountUpdatedEventArgs<T>::NetworkAccountId() const
{
	String value = {};
	check(static_cast<IMobileBroadbandAccountUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_NetworkAccountId(set(value)));
	return value;
}

template <typename T> bool impl_IMobileBroadbandAccountUpdatedEventArgs<T>::HasDeviceInformationChanged() const
{
	bool value = {};
	check(static_cast<IMobileBroadbandAccountUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_HasDeviceInformationChanged(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IMobileBroadbandAccountUpdatedEventArgs<T>::HasNetworkChanged() const
{
	bool value = {};
	check(static_cast<IMobileBroadbandAccountUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_HasNetworkChanged(BoolProxy(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::AccountAdded(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->add_AccountAdded(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::AccountAdded(F handler) const
{
	return AccountAdded(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::AccountAdded(EventRegistrationToken const cookie) const
{
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->remove_AccountAdded(cookie));
}

template <typename T> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::AccountUpdated(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->add_AccountUpdated(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::AccountUpdated(F handler) const
{
	return AccountUpdated(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::AccountUpdated(EventRegistrationToken const cookie) const
{
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->remove_AccountUpdated(cookie));
}

template <typename T> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::AccountRemoved(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->add_AccountRemoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::AccountRemoved(F handler) const
{
	return AccountRemoved(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::AccountRemoved(EventRegistrationToken const cookie) const
{
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->remove_AccountRemoved(cookie));
}

template <typename T> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->add_EnumerationCompleted(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::EnumerationCompleted(EventRegistrationToken const cookie) const
{
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->remove_EnumerationCompleted(cookie));
}

template <typename T> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->add_Stopped(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMobileBroadbandAccountWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::Stopped(EventRegistrationToken const cookie) const
{
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->remove_Stopped(cookie));
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcherStatus impl_IMobileBroadbandAccountWatcher<T>::Status() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcherStatus status = {};
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->get_Status(&status));
	return status;
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::Start() const
{
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->abi_Start());
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::Stop() const
{
	check(static_cast<IMobileBroadbandAccountWatcher const &>(static_cast<T const &>(*this))->abi_Stop());
}

template <typename T> String impl_IHotspotAuthenticationEventDetails<T>::EventToken() const
{
	String value = {};
	check(static_cast<IHotspotAuthenticationEventDetails const &>(static_cast<T const &>(*this))->get_EventToken(set(value)));
	return value;
}

template <typename T> bool impl_IHotspotAuthenticationContextStatics<T>::TryGetAuthenticationContext(String const & evenToken, Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context) const
{
	bool isValid = {};
	check(static_cast<IHotspotAuthenticationContextStatics const &>(static_cast<T const &>(*this))->abi_TryGetAuthenticationContext(get(evenToken), set(context), BoolProxy(isValid)));
	return isValid;
}

template <typename T> template <unsigned S0> bool impl_IHotspotAuthenticationContextStatics<T>::TryGetAuthenticationContext(wchar_t const (&evenToken)[S0], Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context) const
{
	bool isValid = {};
	check(static_cast<IHotspotAuthenticationContextStatics const &>(static_cast<T const &>(*this))->abi_TryGetAuthenticationContext(StringReference(evenToken), set(context), BoolProxy(isValid)));
	return isValid;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IHotspotAuthenticationContext<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value(nullptr);
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->get_NetworkAdapter(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IHotspotAuthenticationContext<T>::RedirectMessageUrl() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->get_RedirectMessageUrl(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IHotspotAuthenticationContext<T>::RedirectMessageXml() const
{
	Windows::Data::Xml::Dom::XmlDocument value(nullptr);
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->get_RedirectMessageXml(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IHotspotAuthenticationContext<T>::AuthenticationUrl() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->get_AuthenticationUrl(set(value)));
	return value;
}

template <typename T> void impl_IHotspotAuthenticationContext<T>::IssueCredentials(String const & userName, String const & password, String const & extraParameters, bool const markAsManualConnectOnFailure) const
{
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->abi_IssueCredentials(get(userName), get(password), get(extraParameters), markAsManualConnectOnFailure));
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> void impl_IHotspotAuthenticationContext<T>::IssueCredentials(wchar_t const (&userName)[S0], wchar_t const (&password)[S1], wchar_t const (&extraParameters)[S2], bool const markAsManualConnectOnFailure) const
{
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->abi_IssueCredentials(StringReference(userName), StringReference(password), StringReference(extraParameters), markAsManualConnectOnFailure));
}

template <typename T> void impl_IHotspotAuthenticationContext<T>::AbortAuthentication(bool const markAsManual) const
{
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->abi_AbortAuthentication(markAsManual));
}

template <typename T> void impl_IHotspotAuthenticationContext<T>::SkipAuthentication() const
{
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->abi_SkipAuthentication());
}

template <typename T> void impl_IHotspotAuthenticationContext<T>::TriggerAttentionRequired(String const & packageRelativeApplicationId, String const & applicationParameters) const
{
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->abi_TriggerAttentionRequired(get(packageRelativeApplicationId), get(applicationParameters)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IHotspotAuthenticationContext<T>::TriggerAttentionRequired(wchar_t const (&packageRelativeApplicationId)[S0], wchar_t const (&applicationParameters)[S1]) const
{
	check(static_cast<IHotspotAuthenticationContext const &>(static_cast<T const &>(*this))->abi_TriggerAttentionRequired(StringReference(packageRelativeApplicationId), StringReference(applicationParameters)));
}

template <typename T> bool impl_IHotspotCredentialsAuthenticationResult<T>::HasNetworkErrorOccurred() const
{
	bool value = {};
	check(static_cast<IHotspotCredentialsAuthenticationResult const &>(static_cast<T const &>(*this))->get_HasNetworkErrorOccurred(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::HotspotAuthenticationResponseCode impl_IHotspotCredentialsAuthenticationResult<T>::ResponseCode() const
{
	Windows::Networking::NetworkOperators::HotspotAuthenticationResponseCode value = {};
	check(static_cast<IHotspotCredentialsAuthenticationResult const &>(static_cast<T const &>(*this))->get_ResponseCode(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IHotspotCredentialsAuthenticationResult<T>::LogoffUrl() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IHotspotCredentialsAuthenticationResult const &>(static_cast<T const &>(*this))->get_LogoffUrl(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IHotspotCredentialsAuthenticationResult<T>::AuthenticationReplyXml() const
{
	Windows::Data::Xml::Dom::XmlDocument value(nullptr);
	check(static_cast<IHotspotCredentialsAuthenticationResult const &>(static_cast<T const &>(*this))->get_AuthenticationReplyXml(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> impl_IHotspotAuthenticationContext2<T>::IssueCredentialsAsync(String const & userName, String const & password, String const & extraParameters, bool const markAsManualConnectOnFailure) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> asyncInfo = {};
	check(static_cast<IHotspotAuthenticationContext2 const &>(static_cast<T const &>(*this))->abi_IssueCredentialsAsync(get(userName), get(password), get(extraParameters), markAsManualConnectOnFailure, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> impl_IHotspotAuthenticationContext2<T>::IssueCredentialsAsync(wchar_t const (&userName)[S0], wchar_t const (&password)[S1], wchar_t const (&extraParameters)[S2], bool const markAsManualConnectOnFailure) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> asyncInfo = {};
	check(static_cast<IHotspotAuthenticationContext2 const &>(static_cast<T const &>(*this))->abi_IssueCredentialsAsync(StringReference(userName), StringReference(password), StringReference(extraParameters), markAsManualConnectOnFailure, set(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IProvisionFromXmlDocumentResults<T>::AllElementsProvisioned() const
{
	bool value = {};
	check(static_cast<IProvisionFromXmlDocumentResults const &>(static_cast<T const &>(*this))->get_AllElementsProvisioned(BoolProxy(value)));
	return value;
}

template <typename T> String impl_IProvisionFromXmlDocumentResults<T>::ProvisionResultsXml() const
{
	String value = {};
	check(static_cast<IProvisionFromXmlDocumentResults const &>(static_cast<T const &>(*this))->get_ProvisionResultsXml(set(value)));
	return value;
}

template <typename T> void impl_IProvisionedProfile<T>::UpdateCost(Windows::Networking::Connectivity::NetworkCostType const value) const
{
	check(static_cast<IProvisionedProfile const &>(static_cast<T const &>(*this))->abi_UpdateCost(value));
}

template <typename T> void impl_IProvisionedProfile<T>::UpdateUsage(Windows::Networking::NetworkOperators::ProfileUsage const & value) const
{
	check(static_cast<IProvisionedProfile const &>(static_cast<T const &>(*this))->abi_UpdateUsage(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> impl_IProvisioningAgent<T>::ProvisionFromXmlDocumentAsync(String const & provisioningXmlDocument) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> asyncInfo = {};
	check(static_cast<IProvisioningAgent const &>(static_cast<T const &>(*this))->abi_ProvisionFromXmlDocumentAsync(get(provisioningXmlDocument), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> impl_IProvisioningAgent<T>::ProvisionFromXmlDocumentAsync(wchar_t const (&provisioningXmlDocument)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> asyncInfo = {};
	check(static_cast<IProvisioningAgent const &>(static_cast<T const &>(*this))->abi_ProvisionFromXmlDocumentAsync(StringReference(provisioningXmlDocument), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Networking::NetworkOperators::ProvisionedProfile impl_IProvisioningAgent<T>::GetProvisionedProfile(Windows::Networking::NetworkOperators::ProfileMediaType const mediaType, String const & profileName) const
{
	Windows::Networking::NetworkOperators::ProvisionedProfile provisionedProfile(nullptr);
	check(static_cast<IProvisioningAgent const &>(static_cast<T const &>(*this))->abi_GetProvisionedProfile(mediaType, get(profileName), set(provisionedProfile)));
	return provisionedProfile;
}

template <typename T> template <unsigned S0> Windows::Networking::NetworkOperators::ProvisionedProfile impl_IProvisioningAgent<T>::GetProvisionedProfile(Windows::Networking::NetworkOperators::ProfileMediaType const mediaType, wchar_t const (&profileName)[S0]) const
{
	Windows::Networking::NetworkOperators::ProvisionedProfile provisionedProfile(nullptr);
	check(static_cast<IProvisioningAgent const &>(static_cast<T const &>(*this))->abi_GetProvisionedProfile(mediaType, StringReference(profileName), set(provisionedProfile)));
	return provisionedProfile;
}

template <typename T> Windows::Networking::NetworkOperators::ProvisioningAgent impl_IProvisioningAgentStaticMethods<T>::CreateFromNetworkAccountId(String const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::ProvisioningAgent provisioningAgent(nullptr);
	check(static_cast<IProvisioningAgentStaticMethods const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkAccountId(get(networkAccountId), set(provisioningAgent)));
	return provisioningAgent;
}

template <typename T> template <unsigned S0> Windows::Networking::NetworkOperators::ProvisioningAgent impl_IProvisioningAgentStaticMethods<T>::CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const
{
	Windows::Networking::NetworkOperators::ProvisioningAgent provisioningAgent(nullptr);
	check(static_cast<IProvisioningAgentStaticMethods const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkAccountId(StringReference(networkAccountId), set(provisioningAgent)));
	return provisioningAgent;
}

template <typename T> byte impl_IUssdMessage<T>::DataCodingScheme() const
{
	byte value = {};
	check(static_cast<IUssdMessage const &>(static_cast<T const &>(*this))->get_DataCodingScheme(&value));
	return value;
}

template <typename T> void impl_IUssdMessage<T>::DataCodingScheme(byte const value) const
{
	check(static_cast<IUssdMessage const &>(static_cast<T const &>(*this))->put_DataCodingScheme(value));
}

template <typename T> String impl_IUssdMessage<T>::PayloadAsText() const
{
	String value = {};
	check(static_cast<IUssdMessage const &>(static_cast<T const &>(*this))->get_PayloadAsText(set(value)));
	return value;
}

template <typename T> void impl_IUssdMessage<T>::PayloadAsText(String const & value) const
{
	check(static_cast<IUssdMessage const &>(static_cast<T const &>(*this))->put_PayloadAsText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IUssdMessage<T>::PayloadAsText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IUssdMessage const &>(static_cast<T const &>(*this))->put_PayloadAsText(StringReference(value)));
}

template <typename T> Windows::Networking::NetworkOperators::UssdMessage impl_IUssdMessageFactory<T>::CreateMessage(String const & messageText) const
{
	Windows::Networking::NetworkOperators::UssdMessage ussdMessage(nullptr);
	check(static_cast<IUssdMessageFactory const &>(static_cast<T const &>(*this))->abi_CreateMessage(get(messageText), set(ussdMessage)));
	return ussdMessage;
}

template <typename T> template <unsigned S0> Windows::Networking::NetworkOperators::UssdMessage impl_IUssdMessageFactory<T>::CreateMessage(wchar_t const (&messageText)[S0]) const
{
	Windows::Networking::NetworkOperators::UssdMessage ussdMessage(nullptr);
	check(static_cast<IUssdMessageFactory const &>(static_cast<T const &>(*this))->abi_CreateMessage(StringReference(messageText), set(ussdMessage)));
	return ussdMessage;
}

template <typename T> Windows::Networking::NetworkOperators::UssdResultCode impl_IUssdReply<T>::ResultCode() const
{
	Windows::Networking::NetworkOperators::UssdResultCode value = {};
	check(static_cast<IUssdReply const &>(static_cast<T const &>(*this))->get_ResultCode(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::UssdMessage impl_IUssdReply<T>::Message() const
{
	Windows::Networking::NetworkOperators::UssdMessage value(nullptr);
	check(static_cast<IUssdReply const &>(static_cast<T const &>(*this))->get_Message(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::UssdReply> impl_IUssdSession<T>::SendMessageAndGetReplyAsync(Windows::Networking::NetworkOperators::UssdMessage const & message) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::UssdReply> asyncInfo = {};
	check(static_cast<IUssdSession const &>(static_cast<T const &>(*this))->abi_SendMessageAndGetReplyAsync(get(message), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IUssdSession<T>::Close() const
{
	check(static_cast<IUssdSession const &>(static_cast<T const &>(*this))->abi_Close());
}

template <typename T> Windows::Networking::NetworkOperators::UssdSession impl_IUssdSessionStatics<T>::CreateFromNetworkAccountId(String const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::UssdSession ussdSession(nullptr);
	check(static_cast<IUssdSessionStatics const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkAccountId(get(networkAccountId), set(ussdSession)));
	return ussdSession;
}

template <typename T> template <unsigned S0> Windows::Networking::NetworkOperators::UssdSession impl_IUssdSessionStatics<T>::CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0]) const
{
	Windows::Networking::NetworkOperators::UssdSession ussdSession(nullptr);
	check(static_cast<IUssdSessionStatics const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkAccountId(StringReference(networkAccountId), set(ussdSession)));
	return ussdSession;
}

template <typename T> Windows::Networking::NetworkOperators::UssdSession impl_IUssdSessionStatics<T>::CreateFromNetworkInterfaceId(String const & networkInterfaceId) const
{
	Windows::Networking::NetworkOperators::UssdSession ussdSession(nullptr);
	check(static_cast<IUssdSessionStatics const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkInterfaceId(get(networkInterfaceId), set(ussdSession)));
	return ussdSession;
}

template <typename T> template <unsigned S0> Windows::Networking::NetworkOperators::UssdSession impl_IUssdSessionStatics<T>::CreateFromNetworkInterfaceId(wchar_t const (&networkInterfaceId)[S0]) const
{
	Windows::Networking::NetworkOperators::UssdSession ussdSession(nullptr);
	check(static_cast<IUssdSessionStatics const &>(static_cast<T const &>(*this))->abi_CreateFromNetworkInterfaceId(StringReference(networkInterfaceId), set(ussdSession)));
	return ussdSession;
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

template <typename T> void impl_IMessageReceivedHandler<T>::Invoke(Windows::Networking::Proximity::ProximityDevice const & sender, Windows::Networking::Proximity::ProximityMessage const & message) const
{
	check(static_cast<IMessageReceivedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(message)));
}

template <typename T> void impl_IMessageTransmittedHandler<T>::Invoke(Windows::Networking::Proximity::ProximityDevice const & sender, long long const messageId) const
{
	check(static_cast<IMessageTransmittedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), messageId));
}

template <typename T> void impl_IDeviceArrivedEventHandler<T>::Invoke(Windows::Networking::Proximity::ProximityDevice const & sender) const
{
	check(static_cast<IDeviceArrivedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender)));
}

template <typename T> void impl_IDeviceDepartedEventHandler<T>::Invoke(Windows::Networking::Proximity::ProximityDevice const & sender) const
{
	check(static_cast<IDeviceDepartedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender)));
}

template <typename T> String impl_IProximityMessage<T>::MessageType() const
{
	String value = {};
	check(static_cast<IProximityMessage const &>(static_cast<T const &>(*this))->get_MessageType(set(value)));
	return value;
}

template <typename T> long long impl_IProximityMessage<T>::SubscriptionId() const
{
	long long value = {};
	check(static_cast<IProximityMessage const &>(static_cast<T const &>(*this))->get_SubscriptionId(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IProximityMessage<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IProximityMessage const &>(static_cast<T const &>(*this))->get_Data(set(value)));
	return value;
}

template <typename T> String impl_IProximityMessage<T>::DataAsString() const
{
	String value = {};
	check(static_cast<IProximityMessage const &>(static_cast<T const &>(*this))->get_DataAsString(set(value)));
	return value;
}

template <typename T> long long impl_IProximityDevice<T>::SubscribeForMessage(String const & messageType, Windows::Networking::Proximity::IMessageReceivedHandler const & messageReceivedHandler) const
{
	long long subscriptionId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_SubscribeForMessage(get(messageType), get(messageReceivedHandler), &subscriptionId));
	return subscriptionId;
}

template <typename T> template <unsigned S0> long long impl_IProximityDevice<T>::SubscribeForMessage(wchar_t const (&messageType)[S0], Windows::Networking::Proximity::IMessageReceivedHandler const & messageReceivedHandler) const
{
	long long subscriptionId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_SubscribeForMessage(StringReference(messageType), get(messageReceivedHandler), &subscriptionId));
	return subscriptionId;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::SubscribeForMessage(String const & messageType, F messageReceivedHandler) const
{
	return SubscribeForMessage(messageType, Windows::Networking::Proximity::MessageReceivedHandler(messageReceivedHandler));
}

template <typename T> template <unsigned S0, typename F> long long impl_IProximityDevice<T>::SubscribeForMessage(wchar_t const (&messageType)[S0], F messageReceivedHandler) const
{
	return SubscribeForMessage(messageType, Windows::Networking::Proximity::MessageReceivedHandler(messageReceivedHandler));
}

template <typename T> long long impl_IProximityDevice<T>::PublishMessage(String const & messageType, String const & message) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishMessage(get(messageType), get(message), &messageId));
	return messageId;
}

template <typename T> template <unsigned S0, unsigned S1> long long impl_IProximityDevice<T>::PublishMessage(wchar_t const (&messageType)[S0], wchar_t const (&message)[S1]) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishMessage(StringReference(messageType), StringReference(message), &messageId));
	return messageId;
}

template <typename T> long long impl_IProximityDevice<T>::PublishMessage(String const & messageType, String const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishMessageWithCallback(get(messageType), get(message), get(messageTransmittedHandler), &messageId));
	return messageId;
}

template <typename T> template <unsigned S0, unsigned S1> long long impl_IProximityDevice<T>::PublishMessage(wchar_t const (&messageType)[S0], wchar_t const (&message)[S1], Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishMessageWithCallback(StringReference(messageType), StringReference(message), get(messageTransmittedHandler), &messageId));
	return messageId;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::PublishMessage(String const & messageType, String const & message, F messageTransmittedHandler) const
{
	return PublishMessage(messageType, message, Windows::Networking::Proximity::MessageTransmittedHandler(messageTransmittedHandler));
}

template <typename T> template <unsigned S0, unsigned S1, typename F> long long impl_IProximityDevice<T>::PublishMessage(wchar_t const (&messageType)[S0], wchar_t const (&message)[S1], F messageTransmittedHandler) const
{
	return PublishMessage(messageType, message, Windows::Networking::Proximity::MessageTransmittedHandler(messageTransmittedHandler));
}

template <typename T> long long impl_IProximityDevice<T>::PublishBinaryMessage(String const & messageType, Windows::Storage::Streams::IBuffer const & message) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishBinaryMessage(get(messageType), get(message), &messageId));
	return messageId;
}

template <typename T> template <unsigned S0> long long impl_IProximityDevice<T>::PublishBinaryMessage(wchar_t const (&messageType)[S0], Windows::Storage::Streams::IBuffer const & message) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishBinaryMessage(StringReference(messageType), get(message), &messageId));
	return messageId;
}

template <typename T> long long impl_IProximityDevice<T>::PublishBinaryMessage(String const & messageType, Windows::Storage::Streams::IBuffer const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishBinaryMessageWithCallback(get(messageType), get(message), get(messageTransmittedHandler), &messageId));
	return messageId;
}

template <typename T> template <unsigned S0> long long impl_IProximityDevice<T>::PublishBinaryMessage(wchar_t const (&messageType)[S0], Windows::Storage::Streams::IBuffer const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishBinaryMessageWithCallback(StringReference(messageType), get(message), get(messageTransmittedHandler), &messageId));
	return messageId;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::PublishBinaryMessage(String const & messageType, Windows::Storage::Streams::IBuffer const & message, F messageTransmittedHandler) const
{
	return PublishBinaryMessage(messageType, message, Windows::Networking::Proximity::MessageTransmittedHandler(messageTransmittedHandler));
}

template <typename T> template <unsigned S0, typename F> long long impl_IProximityDevice<T>::PublishBinaryMessage(wchar_t const (&messageType)[S0], Windows::Storage::Streams::IBuffer const & message, F messageTransmittedHandler) const
{
	return PublishBinaryMessage(messageType, message, Windows::Networking::Proximity::MessageTransmittedHandler(messageTransmittedHandler));
}

template <typename T> long long impl_IProximityDevice<T>::PublishUriMessage(Windows::Foundation::Uri const & message) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishUriMessage(get(message), &messageId));
	return messageId;
}

template <typename T> long long impl_IProximityDevice<T>::PublishUriMessage(Windows::Foundation::Uri const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const
{
	long long messageId = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_PublishUriMessageWithCallback(get(message), get(messageTransmittedHandler), &messageId));
	return messageId;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::PublishUriMessage(Windows::Foundation::Uri const & message, F messageTransmittedHandler) const
{
	return PublishUriMessage(message, Windows::Networking::Proximity::MessageTransmittedHandler(messageTransmittedHandler));
}

template <typename T> void impl_IProximityDevice<T>::StopSubscribingForMessage(long long const subscriptionId) const
{
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_StopSubscribingForMessage(subscriptionId));
}

template <typename T> void impl_IProximityDevice<T>::StopPublishingMessage(long long const messageId) const
{
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->abi_StopPublishingMessage(messageId));
}

template <typename T> EventRegistrationToken impl_IProximityDevice<T>::DeviceArrived(Windows::Networking::Proximity::IDeviceArrivedEventHandler const & arrivedHandler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->add_DeviceArrived(get(arrivedHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IProximityDevice<T>::DeviceArrived(F arrivedHandler) const
{
	return DeviceArrived(Windows::Networking::Proximity::DeviceArrivedEventHandler(arrivedHandler));
}

template <typename T> void impl_IProximityDevice<T>::DeviceArrived(EventRegistrationToken const cookie) const
{
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->remove_DeviceArrived(cookie));
}

template <typename T> EventRegistrationToken impl_IProximityDevice<T>::DeviceDeparted(Windows::Networking::Proximity::IDeviceDepartedEventHandler const & departedHandler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->add_DeviceDeparted(get(departedHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IProximityDevice<T>::DeviceDeparted(F departedHandler) const
{
	return DeviceDeparted(Windows::Networking::Proximity::DeviceDepartedEventHandler(departedHandler));
}

template <typename T> void impl_IProximityDevice<T>::DeviceDeparted(EventRegistrationToken const cookie) const
{
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->remove_DeviceDeparted(cookie));
}

template <typename T> unsigned impl_IProximityDevice<T>::MaxMessageBytes() const
{
	unsigned value = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->get_MaxMessageBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProximityDevice<T>::BitsPerSecond() const
{
	unsigned long long value = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->get_BitsPerSecond(&value));
	return value;
}

template <typename T> String impl_IProximityDevice<T>::DeviceId() const
{
	String value = {};
	check(static_cast<IProximityDevice const &>(static_cast<T const &>(*this))->get_DeviceId(set(value)));
	return value;
}

template <typename T> String impl_IProximityDeviceStatics<T>::GetDeviceSelector() const
{
	String selector = {};
	check(static_cast<IProximityDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDeviceSelector(set(selector)));
	return selector;
}

template <typename T> Windows::Networking::Proximity::ProximityDevice impl_IProximityDeviceStatics<T>::GetDefault() const
{
	Windows::Networking::Proximity::ProximityDevice proximityDevice(nullptr);
	check(static_cast<IProximityDeviceStatics const &>(static_cast<T const &>(*this))->abi_GetDefault(set(proximityDevice)));
	return proximityDevice;
}

template <typename T> Windows::Networking::Proximity::ProximityDevice impl_IProximityDeviceStatics<T>::FromId(String const & deviceId) const
{
	Windows::Networking::Proximity::ProximityDevice proximityDevice(nullptr);
	check(static_cast<IProximityDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromId(get(deviceId), set(proximityDevice)));
	return proximityDevice;
}

template <typename T> template <unsigned S0> Windows::Networking::Proximity::ProximityDevice impl_IProximityDeviceStatics<T>::FromId(wchar_t const (&deviceId)[S0]) const
{
	Windows::Networking::Proximity::ProximityDevice proximityDevice(nullptr);
	check(static_cast<IProximityDeviceStatics const &>(static_cast<T const &>(*this))->abi_FromId(StringReference(deviceId), set(proximityDevice)));
	return proximityDevice;
}

template <typename T> Windows::Networking::Proximity::TriggeredConnectState impl_ITriggeredConnectionStateChangedEventArgs<T>::State() const
{
	Windows::Networking::Proximity::TriggeredConnectState value = {};
	check(static_cast<ITriggeredConnectionStateChangedEventArgs const &>(static_cast<T const &>(*this))->get_State(&value));
	return value;
}

template <typename T> unsigned impl_ITriggeredConnectionStateChangedEventArgs<T>::Id() const
{
	unsigned value = {};
	check(static_cast<ITriggeredConnectionStateChangedEventArgs const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocket impl_ITriggeredConnectionStateChangedEventArgs<T>::Socket() const
{
	Windows::Networking::Sockets::StreamSocket value(nullptr);
	check(static_cast<ITriggeredConnectionStateChangedEventArgs const &>(static_cast<T const &>(*this))->get_Socket(set(value)));
	return value;
}

template <typename T> String impl_IPeerInformation<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IPeerInformation const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> String impl_IPeerInformation3<T>::Id() const
{
	String value = {};
	check(static_cast<IPeerInformation3 const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IPeerInformation3<T>::DiscoveryData() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IPeerInformation3 const &>(static_cast<T const &>(*this))->get_DiscoveryData(set(value)));
	return value;
}

template <typename T> Windows::Networking::Proximity::PeerInformation impl_IConnectionRequestedEventArgs<T>::PeerInformation() const
{
	Windows::Networking::Proximity::PeerInformation value(nullptr);
	check(static_cast<IConnectionRequestedEventArgs const &>(static_cast<T const &>(*this))->get_PeerInformation(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IPeerWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPeerWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::Added(EventRegistrationToken const token) const
{
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->remove_Added(token));
}

template <typename T> EventRegistrationToken impl_IPeerWatcher<T>::Removed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->add_Removed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPeerWatcher<T>::Removed(F handler) const
{
	return Removed(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::Removed(EventRegistrationToken const token) const
{
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->remove_Removed(token));
}

template <typename T> EventRegistrationToken impl_IPeerWatcher<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPeerWatcher<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::Updated(EventRegistrationToken const token) const
{
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->remove_Updated(token));
}

template <typename T> EventRegistrationToken impl_IPeerWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPeerWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::EnumerationCompleted(EventRegistrationToken const token) const
{
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->remove_EnumerationCompleted(token));
}

template <typename T> EventRegistrationToken impl_IPeerWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPeerWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::Stopped(EventRegistrationToken const token) const
{
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->remove_Stopped(token));
}

template <typename T> Windows::Networking::Proximity::PeerWatcherStatus impl_IPeerWatcher<T>::Status() const
{
	Windows::Networking::Proximity::PeerWatcherStatus status = {};
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->get_Status(&status));
	return status;
}

template <typename T> void impl_IPeerWatcher<T>::Start() const
{
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->abi_Start());
}

template <typename T> void impl_IPeerWatcher<T>::Stop() const
{
	check(static_cast<IPeerWatcher const &>(static_cast<T const &>(*this))->abi_Stop());
}

template <typename T> bool impl_IPeerFinderStatics<T>::AllowBluetooth() const
{
	bool value = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->get_AllowBluetooth(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::AllowBluetooth(bool const value) const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->put_AllowBluetooth(value));
}

template <typename T> bool impl_IPeerFinderStatics<T>::AllowInfrastructure() const
{
	bool value = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->get_AllowInfrastructure(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::AllowInfrastructure(bool const value) const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->put_AllowInfrastructure(value));
}

template <typename T> bool impl_IPeerFinderStatics<T>::AllowWiFiDirect() const
{
	bool value = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->get_AllowWiFiDirect(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::AllowWiFiDirect(bool const value) const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->put_AllowWiFiDirect(value));
}

template <typename T> String impl_IPeerFinderStatics<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::DisplayName(String const & value) const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->put_DisplayName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IPeerFinderStatics<T>::DisplayName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->put_DisplayName(StringReference(value)));
}

template <typename T> Windows::Networking::Proximity::PeerDiscoveryTypes impl_IPeerFinderStatics<T>::SupportedDiscoveryTypes() const
{
	Windows::Networking::Proximity::PeerDiscoveryTypes value = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->get_SupportedDiscoveryTypes(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IPeerFinderStatics<T>::AlternateIdentities() const
{
	Windows::Foundation::Collections::IMap<String, String> value = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->get_AlternateIdentities(set(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::Start() const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->abi_Start());
}

template <typename T> void impl_IPeerFinderStatics<T>::Start(String const & peerMessage) const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->abi_StartWithMessage(get(peerMessage)));
}

template <typename T> template <unsigned S0> void impl_IPeerFinderStatics<T>::Start(wchar_t const (&peerMessage)[S0]) const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->abi_StartWithMessage(StringReference(peerMessage)));
}

template <typename T> void impl_IPeerFinderStatics<T>::Stop() const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->abi_Stop());
}

template <typename T> EventRegistrationToken impl_IPeerFinderStatics<T>::TriggeredConnectionStateChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->add_TriggeredConnectionStateChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPeerFinderStatics<T>::TriggeredConnectionStateChanged(F handler) const
{
	return TriggeredConnectionStateChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>(handler));
}

template <typename T> void impl_IPeerFinderStatics<T>::TriggeredConnectionStateChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->remove_TriggeredConnectionStateChanged(cookie));
}

template <typename T> EventRegistrationToken impl_IPeerFinderStatics<T>::ConnectionRequested(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->add_ConnectionRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPeerFinderStatics<T>::ConnectionRequested(F handler) const
{
	return ConnectionRequested(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs>(handler));
}

template <typename T> void impl_IPeerFinderStatics<T>::ConnectionRequested(EventRegistrationToken const cookie) const
{
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->remove_ConnectionRequested(cookie));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> impl_IPeerFinderStatics<T>::FindAllPeersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> asyncOp = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->abi_FindAllPeersAsync(set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> impl_IPeerFinderStatics<T>::ConnectAsync(Windows::Networking::Proximity::PeerInformation const & peerInformation) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> asyncOp = {};
	check(static_cast<IPeerFinderStatics const &>(static_cast<T const &>(*this))->abi_ConnectAsync(get(peerInformation), set(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Networking::Proximity::PeerRole impl_IPeerFinderStatics2<T>::Role() const
{
	Windows::Networking::Proximity::PeerRole value = {};
	check(static_cast<IPeerFinderStatics2 const &>(static_cast<T const &>(*this))->get_Role(&value));
	return value;
}

template <typename T> void impl_IPeerFinderStatics2<T>::Role(Windows::Networking::Proximity::PeerRole const value) const
{
	check(static_cast<IPeerFinderStatics2 const &>(static_cast<T const &>(*this))->put_Role(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IPeerFinderStatics2<T>::DiscoveryData() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IPeerFinderStatics2 const &>(static_cast<T const &>(*this))->get_DiscoveryData(set(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics2<T>::DiscoveryData(Windows::Storage::Streams::IBuffer const & value) const
{
	check(static_cast<IPeerFinderStatics2 const &>(static_cast<T const &>(*this))->put_DiscoveryData(get(value)));
}

template <typename T> Windows::Networking::Proximity::PeerWatcher impl_IPeerFinderStatics2<T>::CreateWatcher() const
{
	Windows::Networking::Proximity::PeerWatcher watcher(nullptr);
	check(static_cast<IPeerFinderStatics2 const &>(static_cast<T const &>(*this))->abi_CreateWatcher(set(watcher)));
	return watcher;
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> impl_IPushNotificationChannelManagerStatics<T>::CreatePushNotificationChannelForApplicationAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> operation = {};
	check(static_cast<IPushNotificationChannelManagerStatics const &>(static_cast<T const &>(*this))->abi_CreatePushNotificationChannelForApplicationAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> impl_IPushNotificationChannelManagerStatics<T>::CreatePushNotificationChannelForApplicationAsync(String const & applicationId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> operation = {};
	check(static_cast<IPushNotificationChannelManagerStatics const &>(static_cast<T const &>(*this))->abi_CreatePushNotificationChannelForApplicationAsyncWithId(get(applicationId), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> impl_IPushNotificationChannelManagerStatics<T>::CreatePushNotificationChannelForApplicationAsync(wchar_t const (&applicationId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> operation = {};
	check(static_cast<IPushNotificationChannelManagerStatics const &>(static_cast<T const &>(*this))->abi_CreatePushNotificationChannelForApplicationAsyncWithId(StringReference(applicationId), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> impl_IPushNotificationChannelManagerStatics<T>::CreatePushNotificationChannelForSecondaryTileAsync(String const & tileId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> operation = {};
	check(static_cast<IPushNotificationChannelManagerStatics const &>(static_cast<T const &>(*this))->abi_CreatePushNotificationChannelForSecondaryTileAsync(get(tileId), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> impl_IPushNotificationChannelManagerStatics<T>::CreatePushNotificationChannelForSecondaryTileAsync(wchar_t const (&tileId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> operation = {};
	check(static_cast<IPushNotificationChannelManagerStatics const &>(static_cast<T const &>(*this))->abi_CreatePushNotificationChannelForSecondaryTileAsync(StringReference(tileId), set(operation)));
	return operation;
}

template <typename T> String impl_IPushNotificationChannel<T>::Uri() const
{
	String value = {};
	check(static_cast<IPushNotificationChannel const &>(static_cast<T const &>(*this))->get_Uri(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPushNotificationChannel<T>::ExpirationTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IPushNotificationChannel const &>(static_cast<T const &>(*this))->get_ExpirationTime(&value));
	return value;
}

template <typename T> void impl_IPushNotificationChannel<T>::Close() const
{
	check(static_cast<IPushNotificationChannel const &>(static_cast<T const &>(*this))->abi_Close());
}

template <typename T> EventRegistrationToken impl_IPushNotificationChannel<T>::PushNotificationReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::PushNotifications::PushNotificationChannel, Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IPushNotificationChannel const &>(static_cast<T const &>(*this))->add_PushNotificationReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IPushNotificationChannel<T>::PushNotificationReceived(F handler) const
{
	return PushNotificationReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::PushNotifications::PushNotificationChannel, Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs>(handler));
}

template <typename T> void impl_IPushNotificationChannel<T>::PushNotificationReceived(EventRegistrationToken const token) const
{
	check(static_cast<IPushNotificationChannel const &>(static_cast<T const &>(*this))->remove_PushNotificationReceived(token));
}

template <typename T> void impl_IPushNotificationReceivedEventArgs<T>::Cancel(bool const value) const
{
	check(static_cast<IPushNotificationReceivedEventArgs const &>(static_cast<T const &>(*this))->put_Cancel(value));
}

template <typename T> bool impl_IPushNotificationReceivedEventArgs<T>::Cancel() const
{
	bool value = {};
	check(static_cast<IPushNotificationReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Cancel(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Networking::PushNotifications::PushNotificationType impl_IPushNotificationReceivedEventArgs<T>::NotificationType() const
{
	Windows::Networking::PushNotifications::PushNotificationType value = {};
	check(static_cast<IPushNotificationReceivedEventArgs const &>(static_cast<T const &>(*this))->get_NotificationType(&value));
	return value;
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IPushNotificationReceivedEventArgs<T>::ToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value(nullptr);
	check(static_cast<IPushNotificationReceivedEventArgs const &>(static_cast<T const &>(*this))->get_ToastNotification(set(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IPushNotificationReceivedEventArgs<T>::TileNotification() const
{
	Windows::UI::Notifications::TileNotification value(nullptr);
	check(static_cast<IPushNotificationReceivedEventArgs const &>(static_cast<T const &>(*this))->get_TileNotification(set(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::BadgeNotification impl_IPushNotificationReceivedEventArgs<T>::BadgeNotification() const
{
	Windows::UI::Notifications::BadgeNotification value(nullptr);
	check(static_cast<IPushNotificationReceivedEventArgs const &>(static_cast<T const &>(*this))->get_BadgeNotification(set(value)));
	return value;
}

template <typename T> Windows::Networking::PushNotifications::RawNotification impl_IPushNotificationReceivedEventArgs<T>::RawNotification() const
{
	Windows::Networking::PushNotifications::RawNotification value(nullptr);
	check(static_cast<IPushNotificationReceivedEventArgs const &>(static_cast<T const &>(*this))->get_RawNotification(set(value)));
	return value;
}

template <typename T> String impl_IRawNotification<T>::Content() const
{
	String value = {};
	check(static_cast<IRawNotification const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

template <typename T> String impl_IControlChannelTrigger<T>::ControlChannelTriggerId() const
{
	String value = {};
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->get_ControlChannelTriggerId(set(value)));
	return value;
}

template <typename T> unsigned impl_IControlChannelTrigger<T>::ServerKeepAliveIntervalInMinutes() const
{
	unsigned value = {};
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->get_ServerKeepAliveIntervalInMinutes(&value));
	return value;
}

template <typename T> void impl_IControlChannelTrigger<T>::ServerKeepAliveIntervalInMinutes(unsigned const value) const
{
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->put_ServerKeepAliveIntervalInMinutes(value));
}

template <typename T> unsigned impl_IControlChannelTrigger<T>::CurrentKeepAliveIntervalInMinutes() const
{
	unsigned value = {};
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->get_CurrentKeepAliveIntervalInMinutes(&value));
	return value;
}

template <typename T> IInspectable impl_IControlChannelTrigger<T>::TransportObject() const
{
	IInspectable value = {};
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->get_TransportObject(set(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::IBackgroundTrigger impl_IControlChannelTrigger<T>::KeepAliveTrigger() const
{
	Windows::ApplicationModel::Background::IBackgroundTrigger trigger = {};
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->get_KeepAliveTrigger(set(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::IBackgroundTrigger impl_IControlChannelTrigger<T>::PushNotificationTrigger() const
{
	Windows::ApplicationModel::Background::IBackgroundTrigger trigger = {};
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->get_PushNotificationTrigger(set(trigger)));
	return trigger;
}

template <typename T> void impl_IControlChannelTrigger<T>::UsingTransport(IInspectable const & transport) const
{
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->abi_UsingTransport(get(transport)));
}

template <typename T> Windows::Networking::Sockets::ControlChannelTriggerStatus impl_IControlChannelTrigger<T>::WaitForPushEnabled() const
{
	Windows::Networking::Sockets::ControlChannelTriggerStatus channelTriggerStatus = {};
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->abi_WaitForPushEnabled(&channelTriggerStatus));
	return channelTriggerStatus;
}

template <typename T> void impl_IControlChannelTrigger<T>::DecreaseNetworkKeepAliveInterval() const
{
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->abi_DecreaseNetworkKeepAliveInterval());
}

template <typename T> void impl_IControlChannelTrigger<T>::FlushTransport() const
{
	check(static_cast<IControlChannelTrigger const &>(static_cast<T const &>(*this))->abi_FlushTransport());
}

template <typename T> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerFactory<T>::CreateControlChannelTrigger(String const & channelId, unsigned const serverKeepAliveIntervalInMinutes) const
{
	Windows::Networking::Sockets::ControlChannelTrigger notificationChannel(nullptr);
	check(static_cast<IControlChannelTriggerFactory const &>(static_cast<T const &>(*this))->abi_CreateControlChannelTrigger(get(channelId), serverKeepAliveIntervalInMinutes, set(notificationChannel)));
	return notificationChannel;
}

template <typename T> template <unsigned S0> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerFactory<T>::CreateControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned const serverKeepAliveIntervalInMinutes) const
{
	Windows::Networking::Sockets::ControlChannelTrigger notificationChannel(nullptr);
	check(static_cast<IControlChannelTriggerFactory const &>(static_cast<T const &>(*this))->abi_CreateControlChannelTrigger(StringReference(channelId), serverKeepAliveIntervalInMinutes, set(notificationChannel)));
	return notificationChannel;
}

template <typename T> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerFactory<T>::CreateControlChannelTrigger(String const & channelId, unsigned const serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType const resourceRequestType) const
{
	Windows::Networking::Sockets::ControlChannelTrigger notificationChannel(nullptr);
	check(static_cast<IControlChannelTriggerFactory const &>(static_cast<T const &>(*this))->abi_CreateControlChannelTriggerEx(get(channelId), serverKeepAliveIntervalInMinutes, resourceRequestType, set(notificationChannel)));
	return notificationChannel;
}

template <typename T> template <unsigned S0> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerFactory<T>::CreateControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned const serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType const resourceRequestType) const
{
	Windows::Networking::Sockets::ControlChannelTrigger notificationChannel(nullptr);
	check(static_cast<IControlChannelTriggerFactory const &>(static_cast<T const &>(*this))->abi_CreateControlChannelTriggerEx(StringReference(channelId), serverKeepAliveIntervalInMinutes, resourceRequestType, set(notificationChannel)));
	return notificationChannel;
}

template <typename T> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerEventDetails<T>::ControlChannelTrigger() const
{
	Windows::Networking::Sockets::ControlChannelTrigger value(nullptr);
	check(static_cast<IControlChannelTriggerEventDetails const &>(static_cast<T const &>(*this))->get_ControlChannelTrigger(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::ControlChannelTriggerResetReason impl_IControlChannelTriggerResetEventDetails<T>::ResetReason() const
{
	Windows::Networking::Sockets::ControlChannelTriggerResetReason value = {};
	check(static_cast<IControlChannelTriggerResetEventDetails const &>(static_cast<T const &>(*this))->get_ResetReason(&value));
	return value;
}

template <typename T> bool impl_IControlChannelTriggerResetEventDetails<T>::HardwareSlotReset() const
{
	bool value = {};
	check(static_cast<IControlChannelTriggerResetEventDetails const &>(static_cast<T const &>(*this))->get_HardwareSlotReset(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IControlChannelTriggerResetEventDetails<T>::SoftwareSlotReset() const
{
	bool value = {};
	check(static_cast<IControlChannelTriggerResetEventDetails const &>(static_cast<T const &>(*this))->get_SoftwareSlotReset(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketMessageReceivedEventArgs<T>::RemoteAddress() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IDatagramSocketMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->get_RemoteAddress(set(value)));
	return value;
}

template <typename T> String impl_IDatagramSocketMessageReceivedEventArgs<T>::RemotePort() const
{
	String value = {};
	check(static_cast<IDatagramSocketMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->get_RemotePort(set(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketMessageReceivedEventArgs<T>::LocalAddress() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IDatagramSocketMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->get_LocalAddress(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IDatagramSocketMessageReceivedEventArgs<T>::GetDataReader() const
{
	Windows::Storage::Streams::DataReader dataReader(nullptr);
	check(static_cast<IDatagramSocketMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->abi_GetDataReader(set(dataReader)));
	return dataReader;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IDatagramSocketMessageReceivedEventArgs<T>::GetDataStream() const
{
	Windows::Storage::Streams::IInputStream inputStream = {};
	check(static_cast<IDatagramSocketMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->abi_GetDataStream(set(inputStream)));
	return inputStream;
}

template <typename T> Windows::Networking::Sockets::SocketMessageType impl_IMessageWebSocketMessageReceivedEventArgs<T>::MessageType() const
{
	Windows::Networking::Sockets::SocketMessageType value = {};
	check(static_cast<IMessageWebSocketMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->get_MessageType(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IMessageWebSocketMessageReceivedEventArgs<T>::GetDataReader() const
{
	Windows::Storage::Streams::DataReader dataReader(nullptr);
	check(static_cast<IMessageWebSocketMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->abi_GetDataReader(set(dataReader)));
	return dataReader;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IMessageWebSocketMessageReceivedEventArgs<T>::GetDataStream() const
{
	Windows::Storage::Streams::IInputStream inputStream = {};
	check(static_cast<IMessageWebSocketMessageReceivedEventArgs const &>(static_cast<T const &>(*this))->abi_GetDataStream(set(inputStream)));
	return inputStream;
}

template <typename T> unsigned short impl_IWebSocketClosedEventArgs<T>::Code() const
{
	unsigned short value = {};
	check(static_cast<IWebSocketClosedEventArgs const &>(static_cast<T const &>(*this))->get_Code(&value));
	return value;
}

template <typename T> String impl_IWebSocketClosedEventArgs<T>::Reason() const
{
	String value = {};
	check(static_cast<IWebSocketClosedEventArgs const &>(static_cast<T const &>(*this))->get_Reason(set(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketInformation<T>::LocalAddress() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IDatagramSocketInformation const &>(static_cast<T const &>(*this))->get_LocalAddress(set(value)));
	return value;
}

template <typename T> String impl_IDatagramSocketInformation<T>::LocalPort() const
{
	String value = {};
	check(static_cast<IDatagramSocketInformation const &>(static_cast<T const &>(*this))->get_LocalPort(set(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketInformation<T>::RemoteAddress() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IDatagramSocketInformation const &>(static_cast<T const &>(*this))->get_RemoteAddress(set(value)));
	return value;
}

template <typename T> String impl_IDatagramSocketInformation<T>::RemotePort() const
{
	String value = {};
	check(static_cast<IDatagramSocketInformation const &>(static_cast<T const &>(*this))->get_RemotePort(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketQualityOfService impl_IDatagramSocketControl<T>::QualityOfService() const
{
	Windows::Networking::Sockets::SocketQualityOfService value = {};
	check(static_cast<IDatagramSocketControl const &>(static_cast<T const &>(*this))->get_QualityOfService(&value));
	return value;
}

template <typename T> void impl_IDatagramSocketControl<T>::QualityOfService(Windows::Networking::Sockets::SocketQualityOfService const value) const
{
	check(static_cast<IDatagramSocketControl const &>(static_cast<T const &>(*this))->put_QualityOfService(value));
}

template <typename T> byte impl_IDatagramSocketControl<T>::OutboundUnicastHopLimit() const
{
	byte value = {};
	check(static_cast<IDatagramSocketControl const &>(static_cast<T const &>(*this))->get_OutboundUnicastHopLimit(&value));
	return value;
}

template <typename T> void impl_IDatagramSocketControl<T>::OutboundUnicastHopLimit(byte const value) const
{
	check(static_cast<IDatagramSocketControl const &>(static_cast<T const &>(*this))->put_OutboundUnicastHopLimit(value));
}

template <typename T> unsigned impl_IDatagramSocketControl2<T>::InboundBufferSizeInBytes() const
{
	unsigned value = {};
	check(static_cast<IDatagramSocketControl2 const &>(static_cast<T const &>(*this))->get_InboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IDatagramSocketControl2<T>::InboundBufferSizeInBytes(unsigned const value) const
{
	check(static_cast<IDatagramSocketControl2 const &>(static_cast<T const &>(*this))->put_InboundBufferSizeInBytes(value));
}

template <typename T> bool impl_IDatagramSocketControl2<T>::DontFragment() const
{
	bool value = {};
	check(static_cast<IDatagramSocketControl2 const &>(static_cast<T const &>(*this))->get_DontFragment(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IDatagramSocketControl2<T>::DontFragment(bool const value) const
{
	check(static_cast<IDatagramSocketControl2 const &>(static_cast<T const &>(*this))->put_DontFragment(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> impl_IDatagramSocketStatics<T>::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> operation = {};
	check(static_cast<IDatagramSocketStatics const &>(static_cast<T const &>(*this))->abi_GetEndpointPairsAsync(get(remoteHostName), get(remoteServiceName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> impl_IDatagramSocketStatics<T>::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> operation = {};
	check(static_cast<IDatagramSocketStatics const &>(static_cast<T const &>(*this))->abi_GetEndpointPairsAsync(get(remoteHostName), StringReference(remoteServiceName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> impl_IDatagramSocketStatics<T>::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::HostNameSortOptions const sortOptions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> operation = {};
	check(static_cast<IDatagramSocketStatics const &>(static_cast<T const &>(*this))->abi_GetEndpointPairsWithSortOptionsAsync(get(remoteHostName), get(remoteServiceName), sortOptions, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> impl_IDatagramSocketStatics<T>::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::HostNameSortOptions const sortOptions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> operation = {};
	check(static_cast<IDatagramSocketStatics const &>(static_cast<T const &>(*this))->abi_GetEndpointPairsWithSortOptionsAsync(get(remoteHostName), StringReference(remoteServiceName), sortOptions, set(operation)));
	return operation;
}

template <typename T> Windows::Networking::Sockets::DatagramSocketControl impl_IDatagramSocket<T>::Control() const
{
	Windows::Networking::Sockets::DatagramSocketControl value(nullptr);
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->get_Control(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::DatagramSocketInformation impl_IDatagramSocket<T>::Information() const
{
	Windows::Networking::Sockets::DatagramSocketInformation value(nullptr);
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->get_Information(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IDatagramSocket<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->get_OutputStream(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_ConnectAsync(get(remoteHostName), get(remoteServiceName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_ConnectAsync(get(remoteHostName), StringReference(remoteServiceName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_ConnectWithEndpointPairAsync(get(endpointPair), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::BindServiceNameAsync(String const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_BindServiceNameAsync(get(localServiceName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::BindServiceNameAsync(wchar_t const (&localServiceName)[S0]) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_BindServiceNameAsync(StringReference(localServiceName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::BindEndpointAsync(Windows::Networking::HostName const & localHostName, String const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_BindEndpointAsync(get(localHostName), get(localServiceName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::BindEndpointAsync(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0]) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_BindEndpointAsync(get(localHostName), StringReference(localServiceName), set(operation)));
	return operation;
}

template <typename T> void impl_IDatagramSocket<T>::JoinMulticastGroup(Windows::Networking::HostName const & host) const
{
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_JoinMulticastGroup(get(host)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> impl_IDatagramSocket<T>::GetOutputStreamAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> value = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_GetOutputStreamAsync(get(remoteHostName), get(remoteServiceName), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> impl_IDatagramSocket<T>::GetOutputStreamAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> value = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_GetOutputStreamAsync(get(remoteHostName), StringReference(remoteServiceName), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> impl_IDatagramSocket<T>::GetOutputStreamAsync(Windows::Networking::EndpointPair const & endpointPair) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> value = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->abi_GetOutputStreamWithEndpointPairAsync(get(endpointPair), set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IDatagramSocket<T>::MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::DatagramSocket, Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->add_MessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IDatagramSocket<T>::MessageReceived(F eventHandler) const
{
	return MessageReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::DatagramSocket, Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IDatagramSocket<T>::MessageReceived(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IDatagramSocket const &>(static_cast<T const &>(*this))->remove_MessageReceived(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket2<T>::BindServiceNameAsync(String const & localServiceName, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IDatagramSocket2 const &>(static_cast<T const &>(*this))->abi_BindServiceNameAndAdapterAsync(get(localServiceName), get(adapter), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IDatagramSocket2<T>::BindServiceNameAsync(wchar_t const (&localServiceName)[S0], Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IDatagramSocket2 const &>(static_cast<T const &>(*this))->abi_BindServiceNameAndAdapterAsync(StringReference(localServiceName), get(adapter), set(operation)));
	return operation;
}

template <typename T> Windows::Networking::HostName impl_IStreamSocketInformation<T>::LocalAddress() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_LocalAddress(set(value)));
	return value;
}

template <typename T> String impl_IStreamSocketInformation<T>::LocalPort() const
{
	String value = {};
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_LocalPort(set(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IStreamSocketInformation<T>::RemoteHostName() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_RemoteHostName(set(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IStreamSocketInformation<T>::RemoteAddress() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_RemoteAddress(set(value)));
	return value;
}

template <typename T> String impl_IStreamSocketInformation<T>::RemoteServiceName() const
{
	String value = {};
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_RemoteServiceName(set(value)));
	return value;
}

template <typename T> String impl_IStreamSocketInformation<T>::RemotePort() const
{
	String value = {};
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_RemotePort(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::RoundTripTimeStatistics impl_IStreamSocketInformation<T>::RoundTripTimeStatistics() const
{
	Windows::Networking::Sockets::RoundTripTimeStatistics value = {};
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_RoundTripTimeStatistics(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::BandwidthStatistics impl_IStreamSocketInformation<T>::BandwidthStatistics() const
{
	Windows::Networking::Sockets::BandwidthStatistics value = {};
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_BandwidthStatistics(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketProtectionLevel impl_IStreamSocketInformation<T>::ProtectionLevel() const
{
	Windows::Networking::Sockets::SocketProtectionLevel value = {};
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_ProtectionLevel(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IStreamSocketInformation<T>::SessionKey() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IStreamSocketInformation const &>(static_cast<T const &>(*this))->get_SessionKey(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketSslErrorSeverity impl_IStreamSocketInformation2<T>::ServerCertificateErrorSeverity() const
{
	Windows::Networking::Sockets::SocketSslErrorSeverity value = {};
	check(static_cast<IStreamSocketInformation2 const &>(static_cast<T const &>(*this))->get_ServerCertificateErrorSeverity(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IStreamSocketInformation2<T>::ServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> value = {};
	check(static_cast<IStreamSocketInformation2 const &>(static_cast<T const &>(*this))->get_ServerCertificateErrors(set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IStreamSocketInformation2<T>::ServerCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value(nullptr);
	check(static_cast<IStreamSocketInformation2 const &>(static_cast<T const &>(*this))->get_ServerCertificate(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_IStreamSocketInformation2<T>::ServerIntermediateCertificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value = {};
	check(static_cast<IStreamSocketInformation2 const &>(static_cast<T const &>(*this))->get_ServerIntermediateCertificates(set(value)));
	return value;
}

template <typename T> bool impl_IStreamSocketControl<T>::NoDelay() const
{
	bool value = {};
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->get_NoDelay(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::NoDelay(bool const value) const
{
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->put_NoDelay(value));
}

template <typename T> bool impl_IStreamSocketControl<T>::KeepAlive() const
{
	bool value = {};
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->get_KeepAlive(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::KeepAlive(bool const value) const
{
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->put_KeepAlive(value));
}

template <typename T> unsigned impl_IStreamSocketControl<T>::OutboundBufferSizeInBytes() const
{
	unsigned value = {};
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->get_OutboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::OutboundBufferSizeInBytes(unsigned const value) const
{
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->put_OutboundBufferSizeInBytes(value));
}

template <typename T> Windows::Networking::Sockets::SocketQualityOfService impl_IStreamSocketControl<T>::QualityOfService() const
{
	Windows::Networking::Sockets::SocketQualityOfService value = {};
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->get_QualityOfService(&value));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::QualityOfService(Windows::Networking::Sockets::SocketQualityOfService const value) const
{
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->put_QualityOfService(value));
}

template <typename T> byte impl_IStreamSocketControl<T>::OutboundUnicastHopLimit() const
{
	byte value = {};
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->get_OutboundUnicastHopLimit(&value));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::OutboundUnicastHopLimit(byte const value) const
{
	check(static_cast<IStreamSocketControl const &>(static_cast<T const &>(*this))->put_OutboundUnicastHopLimit(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IStreamSocketControl2<T>::IgnorableServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVector<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> value = {};
	check(static_cast<IStreamSocketControl2 const &>(static_cast<T const &>(*this))->get_IgnorableServerCertificateErrors(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketControl impl_IStreamSocket<T>::Control() const
{
	Windows::Networking::Sockets::StreamSocketControl value(nullptr);
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->get_Control(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketInformation impl_IStreamSocket<T>::Information() const
{
	Windows::Networking::Sockets::StreamSocketInformation value(nullptr);
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->get_Information(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IStreamSocket<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value = {};
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->get_InputStream(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IStreamSocket<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value = {};
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->get_OutputStream(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->abi_ConnectWithEndpointPairAsync(get(endpointPair), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->abi_ConnectAsync(get(remoteHostName), get(remoteServiceName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0]) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->abi_ConnectAsync(get(remoteHostName), StringReference(remoteServiceName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::EndpointPair const & endpointPair, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->abi_ConnectWithEndpointPairAndProtectionLevelAsync(get(endpointPair), protectionLevel, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->abi_ConnectWithProtectionLevelAsync(get(remoteHostName), get(remoteServiceName), protectionLevel, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->abi_ConnectWithProtectionLevelAsync(get(remoteHostName), StringReference(remoteServiceName), protectionLevel, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::UpgradeToSslAsync(Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::HostName const & validationHostName) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocket const &>(static_cast<T const &>(*this))->abi_UpgradeToSslAsync(protectionLevel, get(validationHostName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket2<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocket2 const &>(static_cast<T const &>(*this))->abi_ConnectWithProtectionLevelAndAdapterAsync(get(remoteHostName), get(remoteServiceName), protectionLevel, get(adapter), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStreamSocket2<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocket2 const &>(static_cast<T const &>(*this))->abi_ConnectWithProtectionLevelAndAdapterAsync(get(remoteHostName), StringReference(remoteServiceName), protectionLevel, get(adapter), set(operation)));
	return operation;
}

template <typename T> Windows::Networking::Sockets::SocketQualityOfService impl_IStreamSocketListenerControl<T>::QualityOfService() const
{
	Windows::Networking::Sockets::SocketQualityOfService value = {};
	check(static_cast<IStreamSocketListenerControl const &>(static_cast<T const &>(*this))->get_QualityOfService(&value));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl<T>::QualityOfService(Windows::Networking::Sockets::SocketQualityOfService const value) const
{
	check(static_cast<IStreamSocketListenerControl const &>(static_cast<T const &>(*this))->put_QualityOfService(value));
}

template <typename T> String impl_IStreamSocketListenerInformation<T>::LocalPort() const
{
	String value = {};
	check(static_cast<IStreamSocketListenerInformation const &>(static_cast<T const &>(*this))->get_LocalPort(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocket impl_IStreamSocketListenerConnectionReceivedEventArgs<T>::Socket() const
{
	Windows::Networking::Sockets::StreamSocket value(nullptr);
	check(static_cast<IStreamSocketListenerConnectionReceivedEventArgs const &>(static_cast<T const &>(*this))->get_Socket(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketListenerControl impl_IStreamSocketListener<T>::Control() const
{
	Windows::Networking::Sockets::StreamSocketListenerControl value(nullptr);
	check(static_cast<IStreamSocketListener const &>(static_cast<T const &>(*this))->get_Control(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketListenerInformation impl_IStreamSocketListener<T>::Information() const
{
	Windows::Networking::Sockets::StreamSocketListenerInformation value(nullptr);
	check(static_cast<IStreamSocketListener const &>(static_cast<T const &>(*this))->get_Information(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener<T>::BindServiceNameAsync(String const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocketListener const &>(static_cast<T const &>(*this))->abi_BindServiceNameAsync(get(localServiceName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStreamSocketListener<T>::BindServiceNameAsync(wchar_t const (&localServiceName)[S0]) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocketListener const &>(static_cast<T const &>(*this))->abi_BindServiceNameAsync(StringReference(localServiceName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener<T>::BindEndpointAsync(Windows::Networking::HostName const & localHostName, String const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocketListener const &>(static_cast<T const &>(*this))->abi_BindEndpointAsync(get(localHostName), get(localServiceName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStreamSocketListener<T>::BindEndpointAsync(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0]) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocketListener const &>(static_cast<T const &>(*this))->abi_BindEndpointAsync(get(localHostName), StringReference(localServiceName), set(operation)));
	return operation;
}

template <typename T> EventRegistrationToken impl_IStreamSocketListener<T>::ConnectionReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::StreamSocketListener, Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IStreamSocketListener const &>(static_cast<T const &>(*this))->add_ConnectionReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IStreamSocketListener<T>::ConnectionReceived(F eventHandler) const
{
	return ConnectionReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::StreamSocketListener, Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IStreamSocketListener<T>::ConnectionReceived(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IStreamSocketListener const &>(static_cast<T const &>(*this))->remove_ConnectionReceived(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener2<T>::BindServiceNameAsync(String const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocketListener2 const &>(static_cast<T const &>(*this))->abi_BindServiceNameWithProtectionLevelAsync(get(localServiceName), protectionLevel, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStreamSocketListener2<T>::BindServiceNameAsync(wchar_t const (&localServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocketListener2 const &>(static_cast<T const &>(*this))->abi_BindServiceNameWithProtectionLevelAsync(StringReference(localServiceName), protectionLevel, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener2<T>::BindServiceNameAsync(String const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocketListener2 const &>(static_cast<T const &>(*this))->abi_BindServiceNameWithProtectionLevelAndAdapterAsync(get(localServiceName), protectionLevel, get(adapter), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStreamSocketListener2<T>::BindServiceNameAsync(wchar_t const (&localServiceName)[S0], Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStreamSocketListener2 const &>(static_cast<T const &>(*this))->abi_BindServiceNameWithProtectionLevelAndAdapterAsync(StringReference(localServiceName), protectionLevel, get(adapter), set(operation)));
	return operation;
}

template <typename T> unsigned impl_IWebSocketControl<T>::OutboundBufferSizeInBytes() const
{
	unsigned value = {};
	check(static_cast<IWebSocketControl const &>(static_cast<T const &>(*this))->get_OutboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IWebSocketControl<T>::OutboundBufferSizeInBytes(unsigned const value) const
{
	check(static_cast<IWebSocketControl const &>(static_cast<T const &>(*this))->put_OutboundBufferSizeInBytes(value));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IWebSocketControl<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential value(nullptr);
	check(static_cast<IWebSocketControl const &>(static_cast<T const &>(*this))->get_ServerCredential(set(value)));
	return value;
}

template <typename T> void impl_IWebSocketControl<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(static_cast<IWebSocketControl const &>(static_cast<T const &>(*this))->put_ServerCredential(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IWebSocketControl<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value(nullptr);
	check(static_cast<IWebSocketControl const &>(static_cast<T const &>(*this))->get_ProxyCredential(set(value)));
	return value;
}

template <typename T> void impl_IWebSocketControl<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(static_cast<IWebSocketControl const &>(static_cast<T const &>(*this))->put_ProxyCredential(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IWebSocketControl<T>::SupportedProtocols() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IWebSocketControl const &>(static_cast<T const &>(*this))->get_SupportedProtocols(set(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IWebSocketInformation<T>::LocalAddress() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IWebSocketInformation const &>(static_cast<T const &>(*this))->get_LocalAddress(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::BandwidthStatistics impl_IWebSocketInformation<T>::BandwidthStatistics() const
{
	Windows::Networking::Sockets::BandwidthStatistics value = {};
	check(static_cast<IWebSocketInformation const &>(static_cast<T const &>(*this))->get_BandwidthStatistics(&value));
	return value;
}

template <typename T> String impl_IWebSocketInformation<T>::Protocol() const
{
	String value = {};
	check(static_cast<IWebSocketInformation const &>(static_cast<T const &>(*this))->get_Protocol(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IWebSocket<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value = {};
	check(static_cast<IWebSocket const &>(static_cast<T const &>(*this))->get_OutputStream(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebSocket<T>::ConnectAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IWebSocket const &>(static_cast<T const &>(*this))->abi_ConnectAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> void impl_IWebSocket<T>::SetRequestHeader(String const & headerName, String const & headerValue) const
{
	check(static_cast<IWebSocket const &>(static_cast<T const &>(*this))->abi_SetRequestHeader(get(headerName), get(headerValue)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IWebSocket<T>::SetRequestHeader(wchar_t const (&headerName)[S0], wchar_t const (&headerValue)[S1]) const
{
	check(static_cast<IWebSocket const &>(static_cast<T const &>(*this))->abi_SetRequestHeader(StringReference(headerName), StringReference(headerValue)));
}

template <typename T> EventRegistrationToken impl_IWebSocket<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::IWebSocket, Windows::Networking::Sockets::WebSocketClosedEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IWebSocket const &>(static_cast<T const &>(*this))->add_Closed(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IWebSocket<T>::Closed(F eventHandler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::IWebSocket, Windows::Networking::Sockets::WebSocketClosedEventArgs>(eventHandler));
}

template <typename T> void impl_IWebSocket<T>::Closed(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IWebSocket const &>(static_cast<T const &>(*this))->remove_Closed(eventCookie));
}

template <typename T> void impl_IWebSocket<T>::Close(unsigned short const code, String const & reason) const
{
	check(static_cast<IWebSocket const &>(static_cast<T const &>(*this))->abi_CloseWithStatus(code, get(reason)));
}

template <typename T> template <unsigned S0> void impl_IWebSocket<T>::Close(unsigned short const code, wchar_t const (&reason)[S0]) const
{
	check(static_cast<IWebSocket const &>(static_cast<T const &>(*this))->abi_CloseWithStatus(code, StringReference(reason)));
}

template <typename T> unsigned impl_IMessageWebSocketControl<T>::MaxMessageSize() const
{
	unsigned value = {};
	check(static_cast<IMessageWebSocketControl const &>(static_cast<T const &>(*this))->get_MaxMessageSize(&value));
	return value;
}

template <typename T> void impl_IMessageWebSocketControl<T>::MaxMessageSize(unsigned const value) const
{
	check(static_cast<IMessageWebSocketControl const &>(static_cast<T const &>(*this))->put_MaxMessageSize(value));
}

template <typename T> Windows::Networking::Sockets::SocketMessageType impl_IMessageWebSocketControl<T>::MessageType() const
{
	Windows::Networking::Sockets::SocketMessageType value = {};
	check(static_cast<IMessageWebSocketControl const &>(static_cast<T const &>(*this))->get_MessageType(&value));
	return value;
}

template <typename T> void impl_IMessageWebSocketControl<T>::MessageType(Windows::Networking::Sockets::SocketMessageType const value) const
{
	check(static_cast<IMessageWebSocketControl const &>(static_cast<T const &>(*this))->put_MessageType(value));
}

template <typename T> Windows::Networking::Sockets::MessageWebSocketControl impl_IMessageWebSocket<T>::Control() const
{
	Windows::Networking::Sockets::MessageWebSocketControl value(nullptr);
	check(static_cast<IMessageWebSocket const &>(static_cast<T const &>(*this))->get_Control(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::MessageWebSocketInformation impl_IMessageWebSocket<T>::Information() const
{
	Windows::Networking::Sockets::MessageWebSocketInformation value(nullptr);
	check(static_cast<IMessageWebSocket const &>(static_cast<T const &>(*this))->get_Information(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IMessageWebSocket<T>::MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::MessageWebSocket, Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs> const & eventHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IMessageWebSocket const &>(static_cast<T const &>(*this))->add_MessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IMessageWebSocket<T>::MessageReceived(F eventHandler) const
{
	return MessageReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::MessageWebSocket, Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IMessageWebSocket<T>::MessageReceived(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IMessageWebSocket const &>(static_cast<T const &>(*this))->remove_MessageReceived(eventCookie));
}

template <typename T> bool impl_IStreamWebSocketControl<T>::NoDelay() const
{
	bool value = {};
	check(static_cast<IStreamWebSocketControl const &>(static_cast<T const &>(*this))->get_NoDelay(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IStreamWebSocketControl<T>::NoDelay(bool const value) const
{
	check(static_cast<IStreamWebSocketControl const &>(static_cast<T const &>(*this))->put_NoDelay(value));
}

template <typename T> Windows::Networking::Sockets::StreamWebSocketControl impl_IStreamWebSocket<T>::Control() const
{
	Windows::Networking::Sockets::StreamWebSocketControl value(nullptr);
	check(static_cast<IStreamWebSocket const &>(static_cast<T const &>(*this))->get_Control(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamWebSocketInformation impl_IStreamWebSocket<T>::Information() const
{
	Windows::Networking::Sockets::StreamWebSocketInformation value(nullptr);
	check(static_cast<IStreamWebSocket const &>(static_cast<T const &>(*this))->get_Information(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IStreamWebSocket<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value = {};
	check(static_cast<IStreamWebSocket const &>(static_cast<T const &>(*this))->get_InputStream(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketErrorStatus impl_ISocketErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Networking::Sockets::SocketErrorStatus status = {};
	check(static_cast<ISocketErrorStatics const &>(static_cast<T const &>(*this))->abi_GetStatus(hresult, &status));
	return status;
}

template <typename T> Windows::Web::WebErrorStatus impl_IWebSocketErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Web::WebErrorStatus status = {};
	check(static_cast<IWebSocketErrorStatics const &>(static_cast<T const &>(*this))->abi_GetStatus(hresult, &status));
	return status;
}

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

template <typename T> String impl_IOnlineIdServiceTicketRequest<T>::Service() const
{
	String value = {};
	check(static_cast<IOnlineIdServiceTicketRequest const &>(static_cast<T const &>(*this))->get_Service(set(value)));
	return value;
}

template <typename T> String impl_IOnlineIdServiceTicketRequest<T>::Policy() const
{
	String value = {};
	check(static_cast<IOnlineIdServiceTicketRequest const &>(static_cast<T const &>(*this))->get_Policy(set(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest impl_IOnlineIdServiceTicketRequestFactory<T>::CreateOnlineIdServiceTicketRequest(String const & service, String const & policy) const
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest onlineIdServiceTicketRequest(nullptr);
	check(static_cast<IOnlineIdServiceTicketRequestFactory const &>(static_cast<T const &>(*this))->abi_CreateOnlineIdServiceTicketRequest(get(service), get(policy), set(onlineIdServiceTicketRequest)));
	return onlineIdServiceTicketRequest;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest impl_IOnlineIdServiceTicketRequestFactory<T>::CreateOnlineIdServiceTicketRequest(wchar_t const (&service)[S0], wchar_t const (&policy)[S1]) const
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest onlineIdServiceTicketRequest(nullptr);
	check(static_cast<IOnlineIdServiceTicketRequestFactory const &>(static_cast<T const &>(*this))->abi_CreateOnlineIdServiceTicketRequest(StringReference(service), StringReference(policy), set(onlineIdServiceTicketRequest)));
	return onlineIdServiceTicketRequest;
}

template <typename T> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest impl_IOnlineIdServiceTicketRequestFactory<T>::CreateOnlineIdServiceTicketRequest(String const & service) const
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest onlineIdServiceTicketRequest(nullptr);
	check(static_cast<IOnlineIdServiceTicketRequestFactory const &>(static_cast<T const &>(*this))->abi_CreateOnlineIdServiceTicketRequestAdvanced(get(service), set(onlineIdServiceTicketRequest)));
	return onlineIdServiceTicketRequest;
}

template <typename T> template <unsigned S0> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest impl_IOnlineIdServiceTicketRequestFactory<T>::CreateOnlineIdServiceTicketRequest(wchar_t const (&service)[S0]) const
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest onlineIdServiceTicketRequest(nullptr);
	check(static_cast<IOnlineIdServiceTicketRequestFactory const &>(static_cast<T const &>(*this))->abi_CreateOnlineIdServiceTicketRequestAdvanced(StringReference(service), set(onlineIdServiceTicketRequest)));
	return onlineIdServiceTicketRequest;
}

template <typename T> String impl_IOnlineIdServiceTicket<T>::Value() const
{
	String value = {};
	check(static_cast<IOnlineIdServiceTicket const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest impl_IOnlineIdServiceTicket<T>::Request() const
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest value(nullptr);
	check(static_cast<IOnlineIdServiceTicket const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> int impl_IOnlineIdServiceTicket<T>::ErrorCode() const
{
	int value = {};
	check(static_cast<IOnlineIdServiceTicket const &>(static_cast<T const &>(*this))->get_ErrorCode(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket> impl_IUserIdentity<T>::Tickets() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket> value = {};
	check(static_cast<IUserIdentity const &>(static_cast<T const &>(*this))->get_Tickets(set(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::Id() const
{
	String value = {};
	check(static_cast<IUserIdentity const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::SafeCustomerId() const
{
	String value = {};
	check(static_cast<IUserIdentity const &>(static_cast<T const &>(*this))->get_SafeCustomerId(set(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::SignInName() const
{
	String value = {};
	check(static_cast<IUserIdentity const &>(static_cast<T const &>(*this))->get_SignInName(set(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::FirstName() const
{
	String value = {};
	check(static_cast<IUserIdentity const &>(static_cast<T const &>(*this))->get_FirstName(set(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::LastName() const
{
	String value = {};
	check(static_cast<IUserIdentity const &>(static_cast<T const &>(*this))->get_LastName(set(value)));
	return value;
}

template <typename T> bool impl_IUserIdentity<T>::IsBetaAccount() const
{
	bool value = {};
	check(static_cast<IUserIdentity const &>(static_cast<T const &>(*this))->get_IsBetaAccount(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUserIdentity<T>::IsConfirmedPC() const
{
	bool value = {};
	check(static_cast<IUserIdentity const &>(static_cast<T const &>(*this))->get_IsConfirmedPC(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::OnlineId::UserAuthenticationOperation impl_IOnlineIdAuthenticator<T>::AuthenticateUserAsync(Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest const & request) const
{
	Windows::Security::Authentication::OnlineId::UserAuthenticationOperation authenticationOperation(nullptr);
	check(static_cast<IOnlineIdAuthenticator const &>(static_cast<T const &>(*this))->abi_AuthenticateUserAsync(get(request), set(authenticationOperation)));
	return authenticationOperation;
}

template <typename T> Windows::Security::Authentication::OnlineId::UserAuthenticationOperation impl_IOnlineIdAuthenticator<T>::AuthenticateUserAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest> const & requests, Windows::Security::Authentication::OnlineId::CredentialPromptType const credentialPromptType) const
{
	Windows::Security::Authentication::OnlineId::UserAuthenticationOperation authenticationOperation(nullptr);
	check(static_cast<IOnlineIdAuthenticator const &>(static_cast<T const &>(*this))->abi_AuthenticateUserAsyncAdvanced(get(requests), credentialPromptType, set(authenticationOperation)));
	return authenticationOperation;
}

template <typename T> Windows::Security::Authentication::OnlineId::SignOutUserOperation impl_IOnlineIdAuthenticator<T>::SignOutUserAsync() const
{
	Windows::Security::Authentication::OnlineId::SignOutUserOperation signOutUserOperation(nullptr);
	check(static_cast<IOnlineIdAuthenticator const &>(static_cast<T const &>(*this))->abi_SignOutUserAsync(set(signOutUserOperation)));
	return signOutUserOperation;
}

template <typename T> void impl_IOnlineIdAuthenticator<T>::ApplicationId(GUID const value) const
{
	check(static_cast<IOnlineIdAuthenticator const &>(static_cast<T const &>(*this))->put_ApplicationId(value));
}

template <typename T> GUID impl_IOnlineIdAuthenticator<T>::ApplicationId() const
{
	GUID value = {};
	check(static_cast<IOnlineIdAuthenticator const &>(static_cast<T const &>(*this))->get_ApplicationId(&value));
	return value;
}

template <typename T> bool impl_IOnlineIdAuthenticator<T>::CanSignOut() const
{
	bool value = {};
	check(static_cast<IOnlineIdAuthenticator const &>(static_cast<T const &>(*this))->get_CanSignOut(BoolProxy(value)));
	return value;
}

template <typename T> String impl_IOnlineIdAuthenticator<T>::AuthenticatedSafeCustomerId() const
{
	String value = {};
	check(static_cast<IOnlineIdAuthenticator const &>(static_cast<T const &>(*this))->get_AuthenticatedSafeCustomerId(set(value)));
	return value;
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

template <typename T> String impl_IWebAuthenticationResult<T>::ResponseData() const
{
	String value = {};
	check(static_cast<IWebAuthenticationResult const &>(static_cast<T const &>(*this))->get_ResponseData(set(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::WebAuthenticationStatus impl_IWebAuthenticationResult<T>::ResponseStatus() const
{
	Windows::Security::Authentication::Web::WebAuthenticationStatus value = {};
	check(static_cast<IWebAuthenticationResult const &>(static_cast<T const &>(*this))->get_ResponseStatus(&value));
	return value;
}

template <typename T> unsigned impl_IWebAuthenticationResult<T>::ResponseErrorDetail() const
{
	unsigned value = {};
	check(static_cast<IWebAuthenticationResult const &>(static_cast<T const &>(*this))->get_ResponseErrorDetail(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics<T>::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo = {};
	check(static_cast<IWebAuthenticationBrokerStatics const &>(static_cast<T const &>(*this))->abi_AuthenticateWithCallbackUriAsync(options, get(requestUri), get(callbackUri), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics<T>::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo = {};
	check(static_cast<IWebAuthenticationBrokerStatics const &>(static_cast<T const &>(*this))->abi_AuthenticateWithoutCallbackUriAsync(options, get(requestUri), set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::Uri impl_IWebAuthenticationBrokerStatics<T>::GetCurrentApplicationCallbackUri() const
{
	Windows::Foundation::Uri callbackUri(nullptr);
	check(static_cast<IWebAuthenticationBrokerStatics const &>(static_cast<T const &>(*this))->abi_GetCurrentApplicationCallbackUri(set(callbackUri)));
	return callbackUri;
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

template <typename T> String impl_IPasswordCredential<T>::Resource() const
{
	String resource = {};
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->get_Resource(set(resource)));
	return resource;
}

template <typename T> void impl_IPasswordCredential<T>::Resource(String const & resource) const
{
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->put_Resource(get(resource)));
}

template <typename T> template <unsigned S0> void impl_IPasswordCredential<T>::Resource(wchar_t const (&resource)[S0]) const
{
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->put_Resource(StringReference(resource)));
}

template <typename T> String impl_IPasswordCredential<T>::UserName() const
{
	String userName = {};
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->get_UserName(set(userName)));
	return userName;
}

template <typename T> void impl_IPasswordCredential<T>::UserName(String const & userName) const
{
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->put_UserName(get(userName)));
}

template <typename T> template <unsigned S0> void impl_IPasswordCredential<T>::UserName(wchar_t const (&userName)[S0]) const
{
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->put_UserName(StringReference(userName)));
}

template <typename T> String impl_IPasswordCredential<T>::Password() const
{
	String password = {};
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->get_Password(set(password)));
	return password;
}

template <typename T> void impl_IPasswordCredential<T>::Password(String const & password) const
{
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->put_Password(get(password)));
}

template <typename T> template <unsigned S0> void impl_IPasswordCredential<T>::Password(wchar_t const (&password)[S0]) const
{
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->put_Password(StringReference(password)));
}

template <typename T> void impl_IPasswordCredential<T>::RetrievePassword() const
{
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->abi_RetrievePassword());
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IPasswordCredential<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet props = {};
	check(static_cast<IPasswordCredential const &>(static_cast<T const &>(*this))->get_Properties(set(props)));
	return props;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_ICredentialFactory<T>::CreatePasswordCredential(String const & resource, String const & userName, String const & password) const
{
	Windows::Security::Credentials::PasswordCredential credential(nullptr);
	check(static_cast<ICredentialFactory const &>(static_cast<T const &>(*this))->abi_CreatePasswordCredential(get(resource), get(userName), get(password), set(credential)));
	return credential;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Security::Credentials::PasswordCredential impl_ICredentialFactory<T>::CreatePasswordCredential(wchar_t const (&resource)[S0], wchar_t const (&userName)[S1], wchar_t const (&password)[S2]) const
{
	Windows::Security::Credentials::PasswordCredential credential(nullptr);
	check(static_cast<ICredentialFactory const &>(static_cast<T const &>(*this))->abi_CreatePasswordCredential(StringReference(resource), StringReference(userName), StringReference(password), set(credential)));
	return credential;
}

template <typename T> void impl_IPasswordVault<T>::Add(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check(static_cast<IPasswordVault const &>(static_cast<T const &>(*this))->abi_Add(get(credential)));
}

template <typename T> void impl_IPasswordVault<T>::Remove(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check(static_cast<IPasswordVault const &>(static_cast<T const &>(*this))->abi_Remove(get(credential)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IPasswordVault<T>::Retrieve(String const & resource, String const & userName) const
{
	Windows::Security::Credentials::PasswordCredential credential(nullptr);
	check(static_cast<IPasswordVault const &>(static_cast<T const &>(*this))->abi_Retrieve(get(resource), get(userName), set(credential)));
	return credential;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Security::Credentials::PasswordCredential impl_IPasswordVault<T>::Retrieve(wchar_t const (&resource)[S0], wchar_t const (&userName)[S1]) const
{
	Windows::Security::Credentials::PasswordCredential credential(nullptr);
	check(static_cast<IPasswordVault const &>(static_cast<T const &>(*this))->abi_Retrieve(StringReference(resource), StringReference(userName), set(credential)));
	return credential;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::FindAllByResource(String const & resource) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials = {};
	check(static_cast<IPasswordVault const &>(static_cast<T const &>(*this))->abi_FindAllByResource(get(resource), set(credentials)));
	return credentials;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::FindAllByResource(wchar_t const (&resource)[S0]) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials = {};
	check(static_cast<IPasswordVault const &>(static_cast<T const &>(*this))->abi_FindAllByResource(StringReference(resource), set(credentials)));
	return credentials;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::FindAllByUserName(String const & userName) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials = {};
	check(static_cast<IPasswordVault const &>(static_cast<T const &>(*this))->abi_FindAllByUserName(get(userName), set(credentials)));
	return credentials;
}

template <typename T> template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::FindAllByUserName(wchar_t const (&userName)[S0]) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials = {};
	check(static_cast<IPasswordVault const &>(static_cast<T const &>(*this))->abi_FindAllByUserName(StringReference(userName), set(credentials)));
	return credentials;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::RetrieveAll() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials = {};
	check(static_cast<IPasswordVault const &>(static_cast<T const &>(*this))->abi_RetrieveAll(set(credentials)));
	return credentials;
}

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebAccountProviderFactory<T>::CreateWebAccountProvider(String const & id, String const & displayName, Windows::Foundation::Uri const & iconUri) const
{
	Windows::Security::Credentials::WebAccountProvider instance(nullptr);
	check(static_cast<IWebAccountProviderFactory const &>(static_cast<T const &>(*this))->abi_CreateWebAccountProvider(get(id), get(displayName), get(iconUri), set(instance)));
	return instance;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Security::Credentials::WebAccountProvider impl_IWebAccountProviderFactory<T>::CreateWebAccountProvider(wchar_t const (&id)[S0], wchar_t const (&displayName)[S1], Windows::Foundation::Uri const & iconUri) const
{
	Windows::Security::Credentials::WebAccountProvider instance(nullptr);
	check(static_cast<IWebAccountProviderFactory const &>(static_cast<T const &>(*this))->abi_CreateWebAccountProvider(StringReference(id), StringReference(displayName), get(iconUri), set(instance)));
	return instance;
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountFactory<T>::CreateWebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, String const & userName, Windows::Security::Credentials::WebAccountState const state) const
{
	Windows::Security::Credentials::WebAccount instance(nullptr);
	check(static_cast<IWebAccountFactory const &>(static_cast<T const &>(*this))->abi_CreateWebAccount(get(webAccountProvider), get(userName), state, set(instance)));
	return instance;
}

template <typename T> template <unsigned S0> Windows::Security::Credentials::WebAccount impl_IWebAccountFactory<T>::CreateWebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, wchar_t const (&userName)[S0], Windows::Security::Credentials::WebAccountState const state) const
{
	Windows::Security::Credentials::WebAccount instance(nullptr);
	check(static_cast<IWebAccountFactory const &>(static_cast<T const &>(*this))->abi_CreateWebAccount(get(webAccountProvider), StringReference(userName), state, set(instance)));
	return instance;
}

template <typename T> String impl_IWebAccountProvider<T>::Id() const
{
	String value = {};
	check(static_cast<IWebAccountProvider const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> String impl_IWebAccountProvider<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IWebAccountProvider const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProvider<T>::IconUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IWebAccountProvider const &>(static_cast<T const &>(*this))->get_IconUri(set(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebAccount<T>::WebAccountProvider() const
{
	Windows::Security::Credentials::WebAccountProvider value(nullptr);
	check(static_cast<IWebAccount const &>(static_cast<T const &>(*this))->get_WebAccountProvider(set(value)));
	return value;
}

template <typename T> String impl_IWebAccount<T>::UserName() const
{
	String value = {};
	check(static_cast<IWebAccount const &>(static_cast<T const &>(*this))->get_UserName(set(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::WebAccountState impl_IWebAccount<T>::State() const
{
	Windows::Security::Credentials::WebAccountState value = {};
	check(static_cast<IWebAccount const &>(static_cast<T const &>(*this))->get_State(&value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> impl_IUserConsentVerifierStatics<T>::CheckAvailabilityAsync() const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> result = {};
	check(static_cast<IUserConsentVerifierStatics const &>(static_cast<T const &>(*this))->abi_CheckAvailabilityAsync(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> impl_IUserConsentVerifierStatics<T>::RequestVerificationAsync(String const & message) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> result = {};
	check(static_cast<IUserConsentVerifierStatics const &>(static_cast<T const &>(*this))->abi_RequestVerificationAsync(get(message), set(result)));
	return result;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> impl_IUserConsentVerifierStatics<T>::RequestVerificationAsync(wchar_t const (&message)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> result = {};
	check(static_cast<IUserConsentVerifierStatics const &>(static_cast<T const &>(*this))->abi_RequestVerificationAsync(StringReference(message), set(result)));
	return result;
}

template <typename T> void impl_ICredentialPickerOptions<T>::Caption(String const & value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_Caption(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICredentialPickerOptions<T>::Caption(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_Caption(StringReference(value)));
}

template <typename T> String impl_ICredentialPickerOptions<T>::Caption() const
{
	String value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_Caption(set(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::Message(String const & value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_Message(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICredentialPickerOptions<T>::Message(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_Message(StringReference(value)));
}

template <typename T> String impl_ICredentialPickerOptions<T>::Message() const
{
	String value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_Message(set(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::ErrorCode(unsigned const value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_ErrorCode(value));
}

template <typename T> unsigned impl_ICredentialPickerOptions<T>::ErrorCode() const
{
	unsigned value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_ErrorCode(&value));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::TargetName(String const & value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_TargetName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICredentialPickerOptions<T>::TargetName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_TargetName(StringReference(value)));
}

template <typename T> String impl_ICredentialPickerOptions<T>::TargetName() const
{
	String value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_TargetName(set(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::AuthenticationProtocol(Windows::Security::Credentials::UI::AuthenticationProtocol const value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_AuthenticationProtocol(value));
}

template <typename T> Windows::Security::Credentials::UI::AuthenticationProtocol impl_ICredentialPickerOptions<T>::AuthenticationProtocol() const
{
	Windows::Security::Credentials::UI::AuthenticationProtocol value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_AuthenticationProtocol(&value));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::CustomAuthenticationProtocol(String const & value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_CustomAuthenticationProtocol(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICredentialPickerOptions<T>::CustomAuthenticationProtocol(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_CustomAuthenticationProtocol(StringReference(value)));
}

template <typename T> String impl_ICredentialPickerOptions<T>::CustomAuthenticationProtocol() const
{
	String value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_CustomAuthenticationProtocol(set(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::PreviousCredential(Windows::Storage::Streams::IBuffer const & value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_PreviousCredential(get(value)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICredentialPickerOptions<T>::PreviousCredential() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_PreviousCredential(set(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::AlwaysDisplayDialog(bool const value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_AlwaysDisplayDialog(value));
}

template <typename T> bool impl_ICredentialPickerOptions<T>::AlwaysDisplayDialog() const
{
	bool value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_AlwaysDisplayDialog(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::CallerSavesCredential(bool const value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_CallerSavesCredential(value));
}

template <typename T> bool impl_ICredentialPickerOptions<T>::CallerSavesCredential() const
{
	bool value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_CallerSavesCredential(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::CredentialSaveOption(Windows::Security::Credentials::UI::CredentialSaveOption const value) const
{
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->put_CredentialSaveOption(value));
}

template <typename T> Windows::Security::Credentials::UI::CredentialSaveOption impl_ICredentialPickerOptions<T>::CredentialSaveOption() const
{
	Windows::Security::Credentials::UI::CredentialSaveOption value = {};
	check(static_cast<ICredentialPickerOptions const &>(static_cast<T const &>(*this))->get_CredentialSaveOption(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> impl_ICredentialPickerStatics<T>::PickAsync(Windows::Security::Credentials::UI::CredentialPickerOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> operation = {};
	check(static_cast<ICredentialPickerStatics const &>(static_cast<T const &>(*this))->abi_PickWithOptionsAsync(get(options), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> impl_ICredentialPickerStatics<T>::PickAsync(String const & targetName, String const & message) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> operation = {};
	check(static_cast<ICredentialPickerStatics const &>(static_cast<T const &>(*this))->abi_PickWithMessageAsync(get(targetName), get(message), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> impl_ICredentialPickerStatics<T>::PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> operation = {};
	check(static_cast<ICredentialPickerStatics const &>(static_cast<T const &>(*this))->abi_PickWithMessageAsync(StringReference(targetName), StringReference(message), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> impl_ICredentialPickerStatics<T>::PickAsync(String const & targetName, String const & message, String const & caption) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> operation = {};
	check(static_cast<ICredentialPickerStatics const &>(static_cast<T const &>(*this))->abi_PickWithCaptionAsync(get(targetName), get(message), get(caption), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> impl_ICredentialPickerStatics<T>::PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1], wchar_t const (&caption)[S2]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> operation = {};
	check(static_cast<ICredentialPickerStatics const &>(static_cast<T const &>(*this))->abi_PickWithCaptionAsync(StringReference(targetName), StringReference(message), StringReference(caption), set(operation)));
	return operation;
}

template <typename T> unsigned impl_ICredentialPickerResults<T>::ErrorCode() const
{
	unsigned value = {};
	check(static_cast<ICredentialPickerResults const &>(static_cast<T const &>(*this))->get_ErrorCode(&value));
	return value;
}

template <typename T> Windows::Security::Credentials::UI::CredentialSaveOption impl_ICredentialPickerResults<T>::CredentialSaveOption() const
{
	Windows::Security::Credentials::UI::CredentialSaveOption value = {};
	check(static_cast<ICredentialPickerResults const &>(static_cast<T const &>(*this))->get_CredentialSaveOption(&value));
	return value;
}

template <typename T> bool impl_ICredentialPickerResults<T>::CredentialSaved() const
{
	bool value = {};
	check(static_cast<ICredentialPickerResults const &>(static_cast<T const &>(*this))->get_CredentialSaved(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICredentialPickerResults<T>::Credential() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICredentialPickerResults const &>(static_cast<T const &>(*this))->get_Credential(set(value)));
	return value;
}

template <typename T> String impl_ICredentialPickerResults<T>::CredentialDomainName() const
{
	String value = {};
	check(static_cast<ICredentialPickerResults const &>(static_cast<T const &>(*this))->get_CredentialDomainName(set(value)));
	return value;
}

template <typename T> String impl_ICredentialPickerResults<T>::CredentialUserName() const
{
	String value = {};
	check(static_cast<ICredentialPickerResults const &>(static_cast<T const &>(*this))->get_CredentialUserName(set(value)));
	return value;
}

template <typename T> String impl_ICredentialPickerResults<T>::CredentialPassword() const
{
	String value = {};
	check(static_cast<ICredentialPickerResults const &>(static_cast<T const &>(*this))->get_CredentialPassword(set(value)));
	return value;
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

template <typename T> bool impl_ICryptographicBufferStatics<T>::Compare(Windows::Storage::Streams::IBuffer const & object1, Windows::Storage::Streams::IBuffer const & object2) const
{
	bool isEqual = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_Compare(get(object1), get(object2), BoolProxy(isEqual)));
	return isEqual;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::GenerateRandom(unsigned const length) const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_GenerateRandom(length, set(buffer)));
	return buffer;
}

template <typename T> unsigned impl_ICryptographicBufferStatics<T>::GenerateRandomNumber() const
{
	unsigned value = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_GenerateRandomNumber(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::DecodeFromHexString(String const & value) const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_DecodeFromHexString(get(value), set(buffer)));
	return buffer;
}

template <typename T> template <unsigned S0> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::DecodeFromHexString(wchar_t const (&value)[S0]) const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_DecodeFromHexString(StringReference(value), set(buffer)));
	return buffer;
}

template <typename T> String impl_ICryptographicBufferStatics<T>::EncodeToHexString(Windows::Storage::Streams::IBuffer const & buffer) const
{
	String value = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_EncodeToHexString(get(buffer), set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::DecodeFromBase64String(String const & value) const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_DecodeFromBase64String(get(value), set(buffer)));
	return buffer;
}

template <typename T> template <unsigned S0> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::DecodeFromBase64String(wchar_t const (&value)[S0]) const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_DecodeFromBase64String(StringReference(value), set(buffer)));
	return buffer;
}

template <typename T> String impl_ICryptographicBufferStatics<T>::EncodeToBase64String(Windows::Storage::Streams::IBuffer const & buffer) const
{
	String value = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_EncodeToBase64String(get(buffer), set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::ConvertStringToBinary(String const & value, Windows::Security::Cryptography::BinaryStringEncoding const encoding) const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_ConvertStringToBinary(get(value), encoding, set(buffer)));
	return buffer;
}

template <typename T> template <unsigned S0> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::ConvertStringToBinary(wchar_t const (&value)[S0], Windows::Security::Cryptography::BinaryStringEncoding const encoding) const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_ConvertStringToBinary(StringReference(value), encoding, set(buffer)));
	return buffer;
}

template <typename T> String impl_ICryptographicBufferStatics<T>::ConvertBinaryToString(Windows::Security::Cryptography::BinaryStringEncoding const encoding, Windows::Storage::Streams::IBuffer const & buffer) const
{
	String value = {};
	check(static_cast<ICryptographicBufferStatics const &>(static_cast<T const &>(*this))->abi_ConvertBinaryToString(encoding, get(buffer), set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

template <typename T> String impl_ICertificateRequestProperties<T>::Subject() const
{
	String value = {};
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->get_Subject(set(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::Subject(String const & value) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_Subject(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICertificateRequestProperties<T>::Subject(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_Subject(StringReference(value)));
}

template <typename T> String impl_ICertificateRequestProperties<T>::KeyAlgorithmName() const
{
	String value = {};
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->get_KeyAlgorithmName(set(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyAlgorithmName(String const & value) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_KeyAlgorithmName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICertificateRequestProperties<T>::KeyAlgorithmName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_KeyAlgorithmName(StringReference(value)));
}

template <typename T> unsigned impl_ICertificateRequestProperties<T>::KeySize() const
{
	unsigned value = {};
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->get_KeySize(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeySize(unsigned const value) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_KeySize(value));
}

template <typename T> String impl_ICertificateRequestProperties<T>::FriendlyName() const
{
	String value = {};
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->get_FriendlyName(set(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::FriendlyName(String const & value) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_FriendlyName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICertificateRequestProperties<T>::FriendlyName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_FriendlyName(StringReference(value)));
}

template <typename T> String impl_ICertificateRequestProperties<T>::HashAlgorithmName() const
{
	String value = {};
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->get_HashAlgorithmName(set(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::HashAlgorithmName(String const & value) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_HashAlgorithmName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICertificateRequestProperties<T>::HashAlgorithmName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_HashAlgorithmName(StringReference(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::ExportOption impl_ICertificateRequestProperties<T>::Exportable() const
{
	Windows::Security::Cryptography::Certificates::ExportOption value = {};
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->get_Exportable(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::Exportable(Windows::Security::Cryptography::Certificates::ExportOption const value) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_Exportable(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::EnrollKeyUsages impl_ICertificateRequestProperties<T>::KeyUsages() const
{
	Windows::Security::Cryptography::Certificates::EnrollKeyUsages value = {};
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->get_KeyUsages(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyUsages(Windows::Security::Cryptography::Certificates::EnrollKeyUsages const value) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_KeyUsages(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::KeyProtectionLevel impl_ICertificateRequestProperties<T>::KeyProtectionLevel() const
{
	Windows::Security::Cryptography::Certificates::KeyProtectionLevel value = {};
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->get_KeyProtectionLevel(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyProtectionLevel(Windows::Security::Cryptography::Certificates::KeyProtectionLevel const value) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_KeyProtectionLevel(value));
}

template <typename T> String impl_ICertificateRequestProperties<T>::KeyStorageProviderName() const
{
	String value = {};
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->get_KeyStorageProviderName(set(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyStorageProviderName(String const & value) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_KeyStorageProviderName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICertificateRequestProperties<T>::KeyStorageProviderName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICertificateRequestProperties const &>(static_cast<T const &>(*this))->put_KeyStorageProviderName(StringReference(value)));
}

template <typename T> String impl_ICertificateRequestProperties2<T>::SmartcardReaderName() const
{
	String value = {};
	check(static_cast<ICertificateRequestProperties2 const &>(static_cast<T const &>(*this))->get_SmartcardReaderName(set(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties2<T>::SmartcardReaderName(String const & value) const
{
	check(static_cast<ICertificateRequestProperties2 const &>(static_cast<T const &>(*this))->put_SmartcardReaderName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICertificateRequestProperties2<T>::SmartcardReaderName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICertificateRequestProperties2 const &>(static_cast<T const &>(*this))->put_SmartcardReaderName(StringReference(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICertificateRequestProperties2<T>::SigningCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value(nullptr);
	check(static_cast<ICertificateRequestProperties2 const &>(static_cast<T const &>(*this))->get_SigningCertificate(set(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties2<T>::SigningCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(static_cast<ICertificateRequestProperties2 const &>(static_cast<T const &>(*this))->put_SigningCertificate(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICertificateRequestProperties2<T>::AttestationCredentialCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value(nullptr);
	check(static_cast<ICertificateRequestProperties2 const &>(static_cast<T const &>(*this))->get_AttestationCredentialCertificate(set(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties2<T>::AttestationCredentialCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(static_cast<ICertificateRequestProperties2 const &>(static_cast<T const &>(*this))->put_AttestationCredentialCertificate(get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICertificateEnrollmentManagerStatics<T>::CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const
{
	Windows::Foundation::IAsyncOperation<String> value = {};
	check(static_cast<ICertificateEnrollmentManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateRequestAsync(get(request), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics<T>::InstallCertificateAsync(String const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions const installOption) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<ICertificateEnrollmentManagerStatics const &>(static_cast<T const &>(*this))->abi_InstallCertificateAsync(get(certificate), installOption, set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics<T>::InstallCertificateAsync(wchar_t const (&certificate)[S0], Windows::Security::Cryptography::Certificates::InstallOptions const installOption) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<ICertificateEnrollmentManagerStatics const &>(static_cast<T const &>(*this))->abi_InstallCertificateAsync(StringReference(certificate), installOption, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics<T>::ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, String const & friendlyName) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<ICertificateEnrollmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ImportPfxDataAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), set(value)));
	return value;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics<T>::ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, wchar_t const (&friendlyName)[S2]) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<ICertificateEnrollmentManagerStatics const &>(static_cast<T const &>(*this))->abi_ImportPfxDataAsync(StringReference(pfxData), StringReference(password), exportable, keyProtectionLevel, installOption, StringReference(friendlyName), set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager impl_ICertificateEnrollmentManagerStatics2<T>::UserCertificateEnrollmentManager() const
{
	Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager value(nullptr);
	check(static_cast<ICertificateEnrollmentManagerStatics2 const &>(static_cast<T const &>(*this))->get_UserCertificateEnrollmentManager(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics2<T>::ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, String const & friendlyName, String const & keyStorageProvider) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<ICertificateEnrollmentManagerStatics2 const &>(static_cast<T const &>(*this))->abi_ImportPfxDataToKspAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), get(keyStorageProvider), set(value)));
	return value;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics2<T>::ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, wchar_t const (&friendlyName)[S2], wchar_t const (&keyStorageProvider)[S3]) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<ICertificateEnrollmentManagerStatics2 const &>(static_cast<T const &>(*this))->abi_ImportPfxDataToKspAsync(StringReference(pfxData), StringReference(password), exportable, keyProtectionLevel, installOption, StringReference(friendlyName), StringReference(keyStorageProvider), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IKeyAttestationHelperStatics<T>::DecryptTpmAttestationCredentialAsync(String const & credential) const
{
	Windows::Foundation::IAsyncOperation<String> value = {};
	check(static_cast<IKeyAttestationHelperStatics const &>(static_cast<T const &>(*this))->abi_DecryptTpmAttestationCredentialAsync(get(credential), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<String> impl_IKeyAttestationHelperStatics<T>::DecryptTpmAttestationCredentialAsync(wchar_t const (&credential)[S0]) const
{
	Windows::Foundation::IAsyncOperation<String> value = {};
	check(static_cast<IKeyAttestationHelperStatics const &>(static_cast<T const &>(*this))->abi_DecryptTpmAttestationCredentialAsync(StringReference(credential), set(value)));
	return value;
}

template <typename T> String impl_IKeyAttestationHelperStatics<T>::GetTpmAttestationCredentialId(String const & credential) const
{
	String value = {};
	check(static_cast<IKeyAttestationHelperStatics const &>(static_cast<T const &>(*this))->abi_GetTpmAttestationCredentialId(get(credential), set(value)));
	return value;
}

template <typename T> template <unsigned S0> String impl_IKeyAttestationHelperStatics<T>::GetTpmAttestationCredentialId(wchar_t const (&credential)[S0]) const
{
	String value = {};
	check(static_cast<IKeyAttestationHelperStatics const &>(static_cast<T const &>(*this))->abi_GetTpmAttestationCredentialId(StringReference(credential), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> impl_ICertificateStoresStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> value = {};
	check(static_cast<ICertificateStoresStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsync(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> impl_ICertificateStoresStatics<T>::FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> value = {};
	check(static_cast<ICertificateStoresStatics const &>(static_cast<T const &>(*this))->abi_FindAllWithQueryAsync(get(query), set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::TrustedRootCertificationAuthorities() const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value(nullptr);
	check(static_cast<ICertificateStoresStatics const &>(static_cast<T const &>(*this))->get_TrustedRootCertificationAuthorities(set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::IntermediateCertificationAuthorities() const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value(nullptr);
	check(static_cast<ICertificateStoresStatics const &>(static_cast<T const &>(*this))->get_IntermediateCertificationAuthorities(set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::GetStoreByName(String const & storeName) const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value(nullptr);
	check(static_cast<ICertificateStoresStatics const &>(static_cast<T const &>(*this))->abi_GetStoreByName(get(storeName), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::GetStoreByName(wchar_t const (&storeName)[S0]) const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value(nullptr);
	check(static_cast<ICertificateStoresStatics const &>(static_cast<T const &>(*this))->abi_GetStoreByName(StringReference(storeName), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserCertificateEnrollmentManager<T>::CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const
{
	Windows::Foundation::IAsyncOperation<String> value = {};
	check(static_cast<IUserCertificateEnrollmentManager const &>(static_cast<T const &>(*this))->abi_CreateRequestAsync(get(request), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::InstallCertificateAsync(String const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions const installOption) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IUserCertificateEnrollmentManager const &>(static_cast<T const &>(*this))->abi_InstallCertificateAsync(get(certificate), installOption, set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::InstallCertificateAsync(wchar_t const (&certificate)[S0], Windows::Security::Cryptography::Certificates::InstallOptions const installOption) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IUserCertificateEnrollmentManager const &>(static_cast<T const &>(*this))->abi_InstallCertificateAsync(StringReference(certificate), installOption, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, String const & friendlyName) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IUserCertificateEnrollmentManager const &>(static_cast<T const &>(*this))->abi_ImportPfxDataAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), set(value)));
	return value;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, wchar_t const (&friendlyName)[S2]) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IUserCertificateEnrollmentManager const &>(static_cast<T const &>(*this))->abi_ImportPfxDataAsync(StringReference(pfxData), StringReference(password), exportable, keyProtectionLevel, installOption, StringReference(friendlyName), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, String const & friendlyName, String const & keyStorageProvider) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IUserCertificateEnrollmentManager const &>(static_cast<T const &>(*this))->abi_ImportPfxDataToKspAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), get(keyStorageProvider), set(value)));
	return value;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, wchar_t const (&friendlyName)[S2], wchar_t const (&keyStorageProvider)[S3]) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IUserCertificateEnrollmentManager const &>(static_cast<T const &>(*this))->abi_ImportPfxDataToKspAsync(StringReference(pfxData), StringReference(password), exportable, keyProtectionLevel, installOption, StringReference(friendlyName), StringReference(keyStorageProvider), set(value)));
	return value;
}

template <typename T> void impl_ICertificateStore<T>::Add(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const
{
	check(static_cast<ICertificateStore const &>(static_cast<T const &>(*this))->abi_Add(get(certificate)));
}

template <typename T> void impl_ICertificateStore<T>::Delete(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const
{
	check(static_cast<ICertificateStore const &>(static_cast<T const &>(*this))->abi_Delete(get(certificate)));
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Rsa() const
{
	String value = {};
	check(static_cast<IKeyAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Rsa(set(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Dsa() const
{
	String value = {};
	check(static_cast<IKeyAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Dsa(set(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdh256() const
{
	String value = {};
	check(static_cast<IKeyAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Ecdh256(set(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdh384() const
{
	String value = {};
	check(static_cast<IKeyAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Ecdh384(set(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdh521() const
{
	String value = {};
	check(static_cast<IKeyAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Ecdh521(set(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdsa256() const
{
	String value = {};
	check(static_cast<IKeyAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Ecdsa256(set(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdsa384() const
{
	String value = {};
	check(static_cast<IKeyAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Ecdsa384(set(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdsa521() const
{
	String value = {};
	check(static_cast<IKeyAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Ecdsa521(set(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics<T>::SoftwareKeyStorageProvider() const
{
	String value = {};
	check(static_cast<IKeyStorageProviderNamesStatics const &>(static_cast<T const &>(*this))->get_SoftwareKeyStorageProvider(set(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics<T>::SmartcardKeyStorageProvider() const
{
	String value = {};
	check(static_cast<IKeyStorageProviderNamesStatics const &>(static_cast<T const &>(*this))->get_SmartcardKeyStorageProvider(set(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics<T>::PlatformKeyStorageProvider() const
{
	String value = {};
	check(static_cast<IKeyStorageProviderNamesStatics const &>(static_cast<T const &>(*this))->get_PlatformKeyStorageProvider(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IChainBuildingParameters<T>::EnhancedKeyUsages() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->get_EnhancedKeyUsages(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IChainBuildingParameters<T>::ValidationTimestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->get_ValidationTimestamp(&value));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::ValidationTimestamp(Windows::Foundation::DateTime const & value) const
{
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->put_ValidationTimestamp(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::RevocationCheckEnabled() const
{
	bool value = {};
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->get_RevocationCheckEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::RevocationCheckEnabled(bool const value) const
{
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->put_RevocationCheckEnabled(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::NetworkRetrievalEnabled() const
{
	bool value = {};
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->get_NetworkRetrievalEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::NetworkRetrievalEnabled(bool const value) const
{
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->put_NetworkRetrievalEnabled(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::AuthorityInformationAccessEnabled() const
{
	bool value = {};
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->get_AuthorityInformationAccessEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::AuthorityInformationAccessEnabled(bool const value) const
{
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->put_AuthorityInformationAccessEnabled(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::CurrentTimeValidationEnabled() const
{
	bool value = {};
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->get_CurrentTimeValidationEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::CurrentTimeValidationEnabled(bool const value) const
{
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->put_CurrentTimeValidationEnabled(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Security::Cryptography::Certificates::Certificate> impl_IChainBuildingParameters<T>::ExclusiveTrustRoots() const
{
	Windows::Foundation::Collections::IVector<Windows::Security::Cryptography::Certificates::Certificate> certificates = {};
	check(static_cast<IChainBuildingParameters const &>(static_cast<T const &>(*this))->get_ExclusiveTrustRoots(set(certificates)));
	return certificates;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateChainPolicy impl_IChainValidationParameters<T>::CertificateChainPolicy() const
{
	Windows::Security::Cryptography::Certificates::CertificateChainPolicy value = {};
	check(static_cast<IChainValidationParameters const &>(static_cast<T const &>(*this))->get_CertificateChainPolicy(&value));
	return value;
}

template <typename T> void impl_IChainValidationParameters<T>::CertificateChainPolicy(Windows::Security::Cryptography::Certificates::CertificateChainPolicy const value) const
{
	check(static_cast<IChainValidationParameters const &>(static_cast<T const &>(*this))->put_CertificateChainPolicy(value));
}

template <typename T> Windows::Networking::HostName impl_IChainValidationParameters<T>::ServerDnsName() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IChainValidationParameters const &>(static_cast<T const &>(*this))->get_ServerDnsName(set(value)));
	return value;
}

template <typename T> void impl_IChainValidationParameters<T>::ServerDnsName(Windows::Networking::HostName const & value) const
{
	check(static_cast<IChainValidationParameters const &>(static_cast<T const &>(*this))->put_ServerDnsName(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ICertificateQuery<T>::EnhancedKeyUsages() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<ICertificateQuery const &>(static_cast<T const &>(*this))->get_EnhancedKeyUsages(set(value)));
	return value;
}

template <typename T> String impl_ICertificateQuery<T>::IssuerName() const
{
	String value = {};
	check(static_cast<ICertificateQuery const &>(static_cast<T const &>(*this))->get_IssuerName(set(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery<T>::IssuerName(String const & value) const
{
	check(static_cast<ICertificateQuery const &>(static_cast<T const &>(*this))->put_IssuerName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICertificateQuery<T>::IssuerName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICertificateQuery const &>(static_cast<T const &>(*this))->put_IssuerName(StringReference(value)));
}

template <typename T> String impl_ICertificateQuery<T>::FriendlyName() const
{
	String value = {};
	check(static_cast<ICertificateQuery const &>(static_cast<T const &>(*this))->get_FriendlyName(set(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery<T>::FriendlyName(String const & value) const
{
	check(static_cast<ICertificateQuery const &>(static_cast<T const &>(*this))->put_FriendlyName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICertificateQuery<T>::FriendlyName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICertificateQuery const &>(static_cast<T const &>(*this))->put_FriendlyName(StringReference(value)));
}

template <typename T> bool impl_ICertificateQuery<T>::HardwareOnly() const
{
	bool value = {};
	check(static_cast<ICertificateQuery const &>(static_cast<T const &>(*this))->get_HardwareOnly(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery<T>::HardwareOnly(bool const value) const
{
	check(static_cast<ICertificateQuery const &>(static_cast<T const &>(*this))->put_HardwareOnly(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::ChainValidationResult impl_ICertificateChain<T>::Validate() const
{
	Windows::Security::Cryptography::Certificates::ChainValidationResult status = {};
	check(static_cast<ICertificateChain const &>(static_cast<T const &>(*this))->abi_Validate(&status));
	return status;
}

template <typename T> Windows::Security::Cryptography::Certificates::ChainValidationResult impl_ICertificateChain<T>::Validate(Windows::Security::Cryptography::Certificates::ChainValidationParameters const & parameter) const
{
	Windows::Security::Cryptography::Certificates::ChainValidationResult status = {};
	check(static_cast<ICertificateChain const &>(static_cast<T const &>(*this))->abi_ValidateWithParameters(get(parameter), &status));
	return status;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICertificateChain<T>::GetCertificates(bool const includeRoot) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> certificates = {};
	check(static_cast<ICertificateChain const &>(static_cast<T const &>(*this))->abi_GetCertificates(includeRoot, set(certificates)));
	return certificates;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> impl_ICertificate<T>::BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->abi_BuildChainAsync(get(certificates), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> impl_ICertificate<T>::BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates, Windows::Security::Cryptography::Certificates::ChainBuildingParameters const & parameters) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->abi_BuildChainWithParametersAsync(get(certificates), get(parameters), set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICertificate<T>::GetCertificateBlob() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->abi_GetCertificateBlob(set(value)));
	return value;
}

template <typename T> String impl_ICertificate<T>::Subject() const
{
	String value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->get_Subject(set(value)));
	return value;
}

template <typename T> String impl_ICertificate<T>::Issuer() const
{
	String value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->get_Issuer(set(value)));
	return value;
}

template <typename T> bool impl_ICertificate<T>::HasPrivateKey() const
{
	bool value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->get_HasPrivateKey(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ICertificate<T>::IsStronglyProtected() const
{
	bool value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->get_IsStronglyProtected(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICertificate<T>::ValidFrom() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->get_ValidFrom(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICertificate<T>::ValidTo() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->get_ValidTo(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ICertificate<T>::EnhancedKeyUsages() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->get_EnhancedKeyUsages(set(value)));
	return value;
}

template <typename T> void impl_ICertificate<T>::FriendlyName(String const & value) const
{
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->put_FriendlyName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICertificate<T>::FriendlyName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->put_FriendlyName(StringReference(value)));
}

template <typename T> String impl_ICertificate<T>::FriendlyName() const
{
	String value = {};
	check(static_cast<ICertificate const &>(static_cast<T const &>(*this))->get_FriendlyName(set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICertificateFactory<T>::CreateCertificate(Windows::Storage::Streams::IBuffer const & certBlob) const
{
	Windows::Security::Cryptography::Certificates::Certificate certificate(nullptr);
	check(static_cast<ICertificateFactory const &>(static_cast<T const &>(*this))->abi_CreateCertificate(get(certBlob), set(certificate)));
	return certificate;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICmsTimestampInfo<T>::SigningCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value(nullptr);
	check(static_cast<ICmsTimestampInfo const &>(static_cast<T const &>(*this))->get_SigningCertificate(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICmsTimestampInfo<T>::Certificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value = {};
	check(static_cast<ICmsTimestampInfo const &>(static_cast<T const &>(*this))->get_Certificates(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICmsTimestampInfo<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ICmsTimestampInfo const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICmsSignerInfo<T>::Certificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value(nullptr);
	check(static_cast<ICmsSignerInfo const &>(static_cast<T const &>(*this))->get_Certificate(set(value)));
	return value;
}

template <typename T> void impl_ICmsSignerInfo<T>::Certificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(static_cast<ICmsSignerInfo const &>(static_cast<T const &>(*this))->put_Certificate(get(value)));
}

template <typename T> String impl_ICmsSignerInfo<T>::HashAlgorithmName() const
{
	String value = {};
	check(static_cast<ICmsSignerInfo const &>(static_cast<T const &>(*this))->get_HashAlgorithmName(set(value)));
	return value;
}

template <typename T> void impl_ICmsSignerInfo<T>::HashAlgorithmName(String const & value) const
{
	check(static_cast<ICmsSignerInfo const &>(static_cast<T const &>(*this))->put_HashAlgorithmName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICmsSignerInfo<T>::HashAlgorithmName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICmsSignerInfo const &>(static_cast<T const &>(*this))->put_HashAlgorithmName(StringReference(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::CmsTimestampInfo impl_ICmsSignerInfo<T>::TimestampInfo() const
{
	Windows::Security::Cryptography::Certificates::CmsTimestampInfo value(nullptr);
	check(static_cast<ICmsSignerInfo const &>(static_cast<T const &>(*this))->get_TimestampInfo(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICmsAttachedSignature<T>::Certificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value = {};
	check(static_cast<ICmsAttachedSignature const &>(static_cast<T const &>(*this))->get_Certificates(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> impl_ICmsAttachedSignature<T>::Signers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> value = {};
	check(static_cast<ICmsAttachedSignature const &>(static_cast<T const &>(*this))->get_Signers(set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::SignatureValidationResult impl_ICmsAttachedSignature<T>::VerifySignature() const
{
	Windows::Security::Cryptography::Certificates::SignatureValidationResult value = {};
	check(static_cast<ICmsAttachedSignature const &>(static_cast<T const &>(*this))->abi_VerifySignature(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CmsAttachedSignature impl_ICmsAttachedSignatureFactory<T>::CreateCmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const
{
	Windows::Security::Cryptography::Certificates::CmsAttachedSignature cmsSignedData(nullptr);
	check(static_cast<ICmsAttachedSignatureFactory const &>(static_cast<T const &>(*this))->abi_CreateCmsAttachedSignature(get(inputBlob), set(cmsSignedData)));
	return cmsSignedData;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICmsAttachedSignatureStatics<T>::GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> outputBlob = {};
	check(static_cast<ICmsAttachedSignatureStatics const &>(static_cast<T const &>(*this))->abi_GenerateSignatureAsync(get(data), get(signers), get(certificates), set(outputBlob)));
	return outputBlob;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICmsDetachedSignature<T>::Certificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value = {};
	check(static_cast<ICmsDetachedSignature const &>(static_cast<T const &>(*this))->get_Certificates(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> impl_ICmsDetachedSignature<T>::Signers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> value = {};
	check(static_cast<ICmsDetachedSignature const &>(static_cast<T const &>(*this))->get_Signers(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Cryptography::Certificates::SignatureValidationResult> impl_ICmsDetachedSignature<T>::VerifySignatureAsync(Windows::Storage::Streams::IInputStream const & data) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Cryptography::Certificates::SignatureValidationResult> value = {};
	check(static_cast<ICmsDetachedSignature const &>(static_cast<T const &>(*this))->abi_VerifySignatureAsync(get(data), set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CmsDetachedSignature impl_ICmsDetachedSignatureFactory<T>::CreateCmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const
{
	Windows::Security::Cryptography::Certificates::CmsDetachedSignature cmsSignedData(nullptr);
	check(static_cast<ICmsDetachedSignatureFactory const &>(static_cast<T const &>(*this))->abi_CreateCmsDetachedSignature(get(inputBlob), set(cmsSignedData)));
	return cmsSignedData;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICmsDetachedSignatureStatics<T>::GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> outputBlob = {};
	check(static_cast<ICmsDetachedSignatureStatics const &>(static_cast<T const &>(*this))->abi_GenerateSignatureAsync(get(data), get(signers), get(certificates), set(outputBlob)));
	return outputBlob;
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyDerivationParameters<T>::KdfGenericBinary() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IKeyDerivationParameters const &>(static_cast<T const &>(*this))->get_KdfGenericBinary(set(value)));
	return value;
}

template <typename T> void impl_IKeyDerivationParameters<T>::KdfGenericBinary(Windows::Storage::Streams::IBuffer const & value) const
{
	check(static_cast<IKeyDerivationParameters const &>(static_cast<T const &>(*this))->put_KdfGenericBinary(get(value)));
}

template <typename T> unsigned impl_IKeyDerivationParameters<T>::IterationCount() const
{
	unsigned value = {};
	check(static_cast<IKeyDerivationParameters const &>(static_cast<T const &>(*this))->get_IterationCount(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics<T>::BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned const iterationCount) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value(nullptr);
	check(static_cast<IKeyDerivationParametersStatics const &>(static_cast<T const &>(*this))->abi_BuildForPbkdf2(get(pbkdf2Salt), iterationCount, set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics<T>::BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value(nullptr);
	check(static_cast<IKeyDerivationParametersStatics const &>(static_cast<T const &>(*this))->abi_BuildForSP800108(get(label), get(context), set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics<T>::BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value(nullptr);
	check(static_cast<IKeyDerivationParametersStatics const &>(static_cast<T const &>(*this))->abi_BuildForSP80056a(get(algorithmId), get(partyUInfo), get(partyVInfo), get(suppPubInfo), get(suppPrivInfo), set(value)));
	return value;
}

template <typename T> unsigned impl_ICryptographicKey<T>::KeySize() const
{
	unsigned value = {};
	check(static_cast<ICryptographicKey const &>(static_cast<T const &>(*this))->get_KeySize(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::Export() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICryptographicKey const &>(static_cast<T const &>(*this))->abi_ExportDefaultPrivateKeyBlobType(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::Export(Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType const BlobType) const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICryptographicKey const &>(static_cast<T const &>(*this))->abi_ExportPrivateKeyWithBlobType(BlobType, set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::ExportPublicKey() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICryptographicKey const &>(static_cast<T const &>(*this))->abi_ExportDefaultPublicKeyBlobType(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::ExportPublicKey(Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType const BlobType) const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICryptographicKey const &>(static_cast<T const &>(*this))->abi_ExportPublicKeyWithBlobType(BlobType, set(value)));
	return value;
}

template <typename T> void impl_IHashComputation<T>::Append(Windows::Storage::Streams::IBuffer const & data) const
{
	check(static_cast<IHashComputation const &>(static_cast<T const &>(*this))->abi_Append(get(data)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHashComputation<T>::GetValueAndReset() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IHashComputation const &>(static_cast<T const &>(*this))->abi_GetValueAndReset(set(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmProvider<T>::AlgorithmName() const
{
	String value = {};
	check(static_cast<IHashAlgorithmProvider const &>(static_cast<T const &>(*this))->get_AlgorithmName(set(value)));
	return value;
}

template <typename T> unsigned impl_IHashAlgorithmProvider<T>::HashLength() const
{
	unsigned value = {};
	check(static_cast<IHashAlgorithmProvider const &>(static_cast<T const &>(*this))->get_HashLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHashAlgorithmProvider<T>::HashData(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IHashAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_HashData(get(data), set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicHash impl_IHashAlgorithmProvider<T>::CreateHash() const
{
	Windows::Security::Cryptography::Core::CryptographicHash Value(nullptr);
	check(static_cast<IHashAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_CreateHash(set(Value)));
	return Value;
}

template <typename T> String impl_IMacAlgorithmProvider<T>::AlgorithmName() const
{
	String value = {};
	check(static_cast<IMacAlgorithmProvider const &>(static_cast<T const &>(*this))->get_AlgorithmName(set(value)));
	return value;
}

template <typename T> unsigned impl_IMacAlgorithmProvider<T>::MacLength() const
{
	unsigned value = {};
	check(static_cast<IMacAlgorithmProvider const &>(static_cast<T const &>(*this))->get_MacLength(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IMacAlgorithmProvider<T>::CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicKey macKey(nullptr);
	check(static_cast<IMacAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_CreateKey(get(keyMaterial), set(macKey)));
	return macKey;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicHash impl_IMacAlgorithmProvider2<T>::CreateHash(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicHash value(nullptr);
	check(static_cast<IMacAlgorithmProvider2 const &>(static_cast<T const &>(*this))->abi_CreateHash(get(keyMaterial), set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmProvider<T>::AlgorithmName() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmProvider const &>(static_cast<T const &>(*this))->get_AlgorithmName(set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IKeyDerivationAlgorithmProvider<T>::CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key(nullptr);
	check(static_cast<IKeyDerivationAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_CreateKey(get(keyMaterial), set(key)));
	return key;
}

template <typename T> String impl_ISymmetricKeyAlgorithmProvider<T>::AlgorithmName() const
{
	String value = {};
	check(static_cast<ISymmetricKeyAlgorithmProvider const &>(static_cast<T const &>(*this))->get_AlgorithmName(set(value)));
	return value;
}

template <typename T> unsigned impl_ISymmetricKeyAlgorithmProvider<T>::BlockLength() const
{
	unsigned value = {};
	check(static_cast<ISymmetricKeyAlgorithmProvider const &>(static_cast<T const &>(*this))->get_BlockLength(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_ISymmetricKeyAlgorithmProvider<T>::CreateSymmetricKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key(nullptr);
	check(static_cast<ISymmetricKeyAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_CreateSymmetricKey(get(keyMaterial), set(key)));
	return key;
}

template <typename T> String impl_IAsymmetricKeyAlgorithmProvider<T>::AlgorithmName() const
{
	String value = {};
	check(static_cast<IAsymmetricKeyAlgorithmProvider const &>(static_cast<T const &>(*this))->get_AlgorithmName(set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::CreateKeyPair(unsigned const keySize) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key(nullptr);
	check(static_cast<IAsymmetricKeyAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_CreateKeyPair(keySize, set(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key(nullptr);
	check(static_cast<IAsymmetricKeyAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_ImportDefaultPrivateKeyBlob(get(keyBlob), set(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType const BlobType) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key(nullptr);
	check(static_cast<IAsymmetricKeyAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_ImportKeyPairWithBlobType(get(keyBlob), BlobType, set(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key(nullptr);
	check(static_cast<IAsymmetricKeyAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_ImportDefaultPublicKeyBlob(get(keyBlob), set(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType const BlobType) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key(nullptr);
	check(static_cast<IAsymmetricKeyAlgorithmProvider const &>(static_cast<T const &>(*this))->abi_ImportPublicKeyWithBlobType(get(keyBlob), BlobType, set(key)));
	return key;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> impl_IPersistedKeyProviderStatics<T>::OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> operation = {};
	check(static_cast<IPersistedKeyProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenKeyPairFromCertificateAsync(get(certificate), get(hashAlgorithmName), padding, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> impl_IPersistedKeyProviderStatics<T>::OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding const padding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> operation = {};
	check(static_cast<IPersistedKeyProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenKeyPairFromCertificateAsync(get(certificate), StringReference(hashAlgorithmName), padding, set(operation)));
	return operation;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IPersistedKeyProviderStatics<T>::OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key(nullptr);
	check(static_cast<IPersistedKeyProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenPublicKeyFromCertificate(get(certificate), get(hashAlgorithmName), padding, set(key)));
	return key;
}

template <typename T> template <unsigned S0> Windows::Security::Cryptography::Core::CryptographicKey impl_IPersistedKeyProviderStatics<T>::OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding const padding) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key(nullptr);
	check(static_cast<IPersistedKeyProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenPublicKeyFromCertificate(get(certificate), StringReference(hashAlgorithmName), padding, set(key)));
	return key;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IEncryptedAndAuthenticatedData<T>::EncryptedData() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IEncryptedAndAuthenticatedData const &>(static_cast<T const &>(*this))->get_EncryptedData(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IEncryptedAndAuthenticatedData<T>::AuthenticationTag() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IEncryptedAndAuthenticatedData const &>(static_cast<T const &>(*this))->get_AuthenticationTag(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICryptographicEngineStatics const &>(static_cast<T const &>(*this))->abi_Encrypt(get(key), get(data), get(iv), set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICryptographicEngineStatics const &>(static_cast<T const &>(*this))->abi_Decrypt(get(key), get(data), get(iv), set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData impl_ICryptographicEngineStatics<T>::EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData) const
{
	Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData value(nullptr);
	check(static_cast<ICryptographicEngineStatics const &>(static_cast<T const &>(*this))->abi_EncryptAndAuthenticate(get(key), get(data), get(nonce), get(authenticatedData), set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData) const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICryptographicEngineStatics const &>(static_cast<T const &>(*this))->abi_DecryptAndAuthenticate(get(key), get(data), get(nonce), get(authenticationTag), get(authenticatedData), set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICryptographicEngineStatics const &>(static_cast<T const &>(*this))->abi_Sign(get(key), get(data), set(value)));
	return value;
}

template <typename T> bool impl_ICryptographicEngineStatics<T>::VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const
{
	bool isAuthenticated = {};
	check(static_cast<ICryptographicEngineStatics const &>(static_cast<T const &>(*this))->abi_VerifySignature(get(key), get(data), get(signature), BoolProxy(isAuthenticated)));
	return isAuthenticated;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned const desiredKeySize) const
{
	Windows::Storage::Streams::IBuffer keyMaterial = {};
	check(static_cast<ICryptographicEngineStatics const &>(static_cast<T const &>(*this))->abi_DeriveKeyMaterial(get(key), get(parameters), desiredKeySize, set(keyMaterial)));
	return keyMaterial;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics2<T>::SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<ICryptographicEngineStatics2 const &>(static_cast<T const &>(*this))->abi_SignHashedData(get(key), get(data), set(value)));
	return value;
}

template <typename T> bool impl_ICryptographicEngineStatics2<T>::VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const
{
	bool isAuthenticated = {};
	check(static_cast<ICryptographicEngineStatics2 const &>(static_cast<T const &>(*this))->abi_VerifySignatureWithHashInput(get(key), get(data), get(signature), BoolProxy(isAuthenticated)));
	return isAuthenticated;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICryptographicEngineStatics2<T>::DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value = {};
	check(static_cast<ICryptographicEngineStatics2 const &>(static_cast<T const &>(*this))->abi_DecryptAsync(get(key), get(data), get(iv), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICryptographicEngineStatics2<T>::SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value = {};
	check(static_cast<ICryptographicEngineStatics2 const &>(static_cast<T const &>(*this))->abi_SignAsync(get(key), get(data), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICryptographicEngineStatics2<T>::SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value = {};
	check(static_cast<ICryptographicEngineStatics2 const &>(static_cast<T const &>(*this))->abi_SignHashedDataAsync(get(key), get(data), set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::HashAlgorithmProvider impl_IHashAlgorithmProviderStatics<T>::OpenAlgorithm(String const & algorithm) const
{
	Windows::Security::Cryptography::Core::HashAlgorithmProvider provider(nullptr);
	check(static_cast<IHashAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(get(algorithm), set(provider)));
	return provider;
}

template <typename T> template <unsigned S0> Windows::Security::Cryptography::Core::HashAlgorithmProvider impl_IHashAlgorithmProviderStatics<T>::OpenAlgorithm(wchar_t const (&algorithm)[S0]) const
{
	Windows::Security::Cryptography::Core::HashAlgorithmProvider provider(nullptr);
	check(static_cast<IHashAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(StringReference(algorithm), set(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::MacAlgorithmProvider impl_IMacAlgorithmProviderStatics<T>::OpenAlgorithm(String const & algorithm) const
{
	Windows::Security::Cryptography::Core::MacAlgorithmProvider provider(nullptr);
	check(static_cast<IMacAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(get(algorithm), set(provider)));
	return provider;
}

template <typename T> template <unsigned S0> Windows::Security::Cryptography::Core::MacAlgorithmProvider impl_IMacAlgorithmProviderStatics<T>::OpenAlgorithm(wchar_t const (&algorithm)[S0]) const
{
	Windows::Security::Cryptography::Core::MacAlgorithmProvider provider(nullptr);
	check(static_cast<IMacAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(StringReference(algorithm), set(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider impl_IKeyDerivationAlgorithmProviderStatics<T>::OpenAlgorithm(String const & algorithm) const
{
	Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider provider(nullptr);
	check(static_cast<IKeyDerivationAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(get(algorithm), set(provider)));
	return provider;
}

template <typename T> template <unsigned S0> Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider impl_IKeyDerivationAlgorithmProviderStatics<T>::OpenAlgorithm(wchar_t const (&algorithm)[S0]) const
{
	Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider provider(nullptr);
	check(static_cast<IKeyDerivationAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(StringReference(algorithm), set(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider impl_ISymmetricKeyAlgorithmProviderStatics<T>::OpenAlgorithm(String const & algorithm) const
{
	Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider provider(nullptr);
	check(static_cast<ISymmetricKeyAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(get(algorithm), set(provider)));
	return provider;
}

template <typename T> template <unsigned S0> Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider impl_ISymmetricKeyAlgorithmProviderStatics<T>::OpenAlgorithm(wchar_t const (&algorithm)[S0]) const
{
	Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider provider(nullptr);
	check(static_cast<ISymmetricKeyAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(StringReference(algorithm), set(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider impl_IAsymmetricKeyAlgorithmProviderStatics<T>::OpenAlgorithm(String const & algorithm) const
{
	Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider provider(nullptr);
	check(static_cast<IAsymmetricKeyAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(get(algorithm), set(provider)));
	return provider;
}

template <typename T> template <unsigned S0> Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider impl_IAsymmetricKeyAlgorithmProviderStatics<T>::OpenAlgorithm(wchar_t const (&algorithm)[S0]) const
{
	Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider provider(nullptr);
	check(static_cast<IAsymmetricKeyAlgorithmProviderStatics const &>(static_cast<T const &>(*this))->abi_OpenAlgorithm(StringReference(algorithm), set(provider)));
	return provider;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Md5() const
{
	String value = {};
	check(static_cast<IHashAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Md5(set(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha1() const
{
	String value = {};
	check(static_cast<IHashAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sha1(set(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha256() const
{
	String value = {};
	check(static_cast<IHashAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sha256(set(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha384() const
{
	String value = {};
	check(static_cast<IHashAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sha384(set(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha512() const
{
	String value = {};
	check(static_cast<IHashAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sha512(set(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacMd5() const
{
	String value = {};
	check(static_cast<IMacAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_HmacMd5(set(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha1() const
{
	String value = {};
	check(static_cast<IMacAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_HmacSha1(set(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha256() const
{
	String value = {};
	check(static_cast<IMacAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_HmacSha256(set(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha384() const
{
	String value = {};
	check(static_cast<IMacAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_HmacSha384(set(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha512() const
{
	String value = {};
	check(static_cast<IMacAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_HmacSha512(set(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::AesCmac() const
{
	String value = {};
	check(static_cast<IMacAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_AesCmac(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesCbc() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_DesCbc(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesEcb() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_DesEcb(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesCbc() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_TripleDesCbc(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesEcb() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_TripleDesEcb(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2Cbc() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Rc2Cbc(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2Ecb() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Rc2Ecb(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesCbc() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_AesCbc(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesEcb() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_AesEcb(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesGcm() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_AesGcm(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesCcm() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_AesCcm(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesCbcPkcs7() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_AesCbcPkcs7(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesEcbPkcs7() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_AesEcbPkcs7(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesCbcPkcs7() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_DesCbcPkcs7(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesEcbPkcs7() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_DesEcbPkcs7(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesCbcPkcs7() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_TripleDesCbcPkcs7(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesEcbPkcs7() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_TripleDesEcbPkcs7(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2CbcPkcs7() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Rc2CbcPkcs7(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2EcbPkcs7() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Rc2EcbPkcs7(set(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc4() const
{
	String value = {};
	check(static_cast<ISymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Rc4(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaPkcs1() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaPkcs1(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha1() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaOaepSha1(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha256() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaOaepSha256(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha384() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaOaepSha384(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha512() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaOaepSha512(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::EcdsaP256Sha256() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_EcdsaP256Sha256(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::EcdsaP384Sha384() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_EcdsaP384Sha384(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::EcdsaP521Sha512() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_EcdsaP521Sha512(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::DsaSha1() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_DsaSha1(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::DsaSha256() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_DsaSha256(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha1() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaSignPkcs1Sha1(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha256() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaSignPkcs1Sha256(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha384() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaSignPkcs1Sha384(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha512() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaSignPkcs1Sha512(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha1() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaSignPssSha1(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha256() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaSignPssSha256(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha384() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaSignPssSha384(set(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha512() const
{
	String value = {};
	check(static_cast<IAsymmetricAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_RsaSignPssSha512(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Md5() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Pbkdf2Md5(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha1() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Pbkdf2Sha1(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha256() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Pbkdf2Sha256(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha384() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Pbkdf2Sha384(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha512() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Pbkdf2Sha512(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacMd5() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp800108CtrHmacMd5(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha1() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp800108CtrHmacSha1(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha256() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp800108CtrHmacSha256(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha384() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp800108CtrHmacSha384(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha512() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp800108CtrHmacSha512(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatMd5() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp80056aConcatMd5(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha1() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp80056aConcatSha1(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha256() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp80056aConcatSha256(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha384() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp80056aConcatSha384(set(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha512() const
{
	String value = {};
	check(static_cast<IKeyDerivationAlgorithmNamesStatics const &>(static_cast<T const &>(*this))->get_Sp80056aConcatSha512(set(value)));
	return value;
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IDataProtectionProvider<T>::ProtectAsync(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value = {};
	check(static_cast<IDataProtectionProvider const &>(static_cast<T const &>(*this))->abi_ProtectAsync(get(data), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IDataProtectionProvider<T>::UnprotectAsync(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value = {};
	check(static_cast<IDataProtectionProvider const &>(static_cast<T const &>(*this))->abi_UnprotectAsync(get(data), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDataProtectionProvider<T>::ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & src, Windows::Storage::Streams::IOutputStream const & dest) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IDataProtectionProvider const &>(static_cast<T const &>(*this))->abi_ProtectStreamAsync(get(src), get(dest), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDataProtectionProvider<T>::UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & src, Windows::Storage::Streams::IOutputStream const & dest) const
{
	Windows::Foundation::IAsyncAction value = {};
	check(static_cast<IDataProtectionProvider const &>(static_cast<T const &>(*this))->abi_UnprotectStreamAsync(get(src), get(dest), set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::DataProtection::DataProtectionProvider impl_IDataProtectionProviderFactory<T>::CreateOverloadExplicit(String const & protectionDescriptor) const
{
	Windows::Security::Cryptography::DataProtection::DataProtectionProvider value(nullptr);
	check(static_cast<IDataProtectionProviderFactory const &>(static_cast<T const &>(*this))->abi_CreateOverloadExplicit(get(protectionDescriptor), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::Security::Cryptography::DataProtection::DataProtectionProvider impl_IDataProtectionProviderFactory<T>::CreateOverloadExplicit(wchar_t const (&protectionDescriptor)[S0]) const
{
	Windows::Security::Cryptography::DataProtection::DataProtectionProvider value(nullptr);
	check(static_cast<IDataProtectionProviderFactory const &>(static_cast<T const &>(*this))->abi_CreateOverloadExplicit(StringReference(protectionDescriptor), set(value)));
	return value;
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> impl_IFileRevocationManagerStatics<T>::ProtectAsync(Windows::Storage::IStorageItem const & storageItem, String const & enterpriseIdentity) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> operation = {};
	check(static_cast<IFileRevocationManagerStatics const &>(static_cast<T const &>(*this))->abi_ProtectAsync(get(storageItem), get(enterpriseIdentity), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> impl_IFileRevocationManagerStatics<T>::ProtectAsync(Windows::Storage::IStorageItem const & storageItem, wchar_t const (&enterpriseIdentity)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> operation = {};
	check(static_cast<IFileRevocationManagerStatics const &>(static_cast<T const &>(*this))->abi_ProtectAsync(get(storageItem), StringReference(enterpriseIdentity), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IFileRevocationManagerStatics<T>::CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IFileRevocationManagerStatics const &>(static_cast<T const &>(*this))->abi_CopyProtectionAsync(get(sourceStorageItem), get(targetStorageItem), set(operation)));
	return operation;
}

template <typename T> void impl_IFileRevocationManagerStatics<T>::Revoke(String const & enterpriseIdentity) const
{
	check(static_cast<IFileRevocationManagerStatics const &>(static_cast<T const &>(*this))->abi_Revoke(get(enterpriseIdentity)));
}

template <typename T> template <unsigned S0> void impl_IFileRevocationManagerStatics<T>::Revoke(wchar_t const (&enterpriseIdentity)[S0]) const
{
	check(static_cast<IFileRevocationManagerStatics const &>(static_cast<T const &>(*this))->abi_Revoke(StringReference(enterpriseIdentity)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> impl_IFileRevocationManagerStatics<T>::GetStatusAsync(Windows::Storage::IStorageItem const & storageItem) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> operation = {};
	check(static_cast<IFileRevocationManagerStatics const &>(static_cast<T const &>(*this))->abi_GetStatusAsync(get(storageItem), set(operation)));
	return operation;
}

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

template <typename T> GUID impl_IEasClientDeviceInformation<T>::Id() const
{
	GUID value = {};
	check(static_cast<IEasClientDeviceInformation const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::OperatingSystem() const
{
	String value = {};
	check(static_cast<IEasClientDeviceInformation const &>(static_cast<T const &>(*this))->get_OperatingSystem(set(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::FriendlyName() const
{
	String value = {};
	check(static_cast<IEasClientDeviceInformation const &>(static_cast<T const &>(*this))->get_FriendlyName(set(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::SystemManufacturer() const
{
	String value = {};
	check(static_cast<IEasClientDeviceInformation const &>(static_cast<T const &>(*this))->get_SystemManufacturer(set(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::SystemProductName() const
{
	String value = {};
	check(static_cast<IEasClientDeviceInformation const &>(static_cast<T const &>(*this))->get_SystemProductName(set(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::SystemSku() const
{
	String value = {};
	check(static_cast<IEasClientDeviceInformation const &>(static_cast<T const &>(*this))->get_SystemSku(set(value)));
	return value;
}

template <typename T> bool impl_IEasClientSecurityPolicy<T>::RequireEncryption() const
{
	bool value = {};
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->get_RequireEncryption(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::RequireEncryption(bool const value) const
{
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->put_RequireEncryption(value));
}

template <typename T> byte impl_IEasClientSecurityPolicy<T>::MinPasswordLength() const
{
	byte value = {};
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->get_MinPasswordLength(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::MinPasswordLength(byte const value) const
{
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->put_MinPasswordLength(value));
}

template <typename T> bool impl_IEasClientSecurityPolicy<T>::DisallowConvenienceLogon() const
{
	bool value = {};
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->get_DisallowConvenienceLogon(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::DisallowConvenienceLogon(bool const value) const
{
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->put_DisallowConvenienceLogon(value));
}

template <typename T> byte impl_IEasClientSecurityPolicy<T>::MinPasswordComplexCharacters() const
{
	byte value = {};
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->get_MinPasswordComplexCharacters(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::MinPasswordComplexCharacters(byte const value) const
{
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->put_MinPasswordComplexCharacters(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IEasClientSecurityPolicy<T>::PasswordExpiration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->get_PasswordExpiration(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::PasswordExpiration(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->put_PasswordExpiration(value));
}

template <typename T> unsigned impl_IEasClientSecurityPolicy<T>::PasswordHistory() const
{
	unsigned value = {};
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->get_PasswordHistory(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::PasswordHistory(unsigned const value) const
{
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->put_PasswordHistory(value));
}

template <typename T> byte impl_IEasClientSecurityPolicy<T>::MaxPasswordFailedAttempts() const
{
	byte value = {};
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->get_MaxPasswordFailedAttempts(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::MaxPasswordFailedAttempts(byte const value) const
{
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->put_MaxPasswordFailedAttempts(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IEasClientSecurityPolicy<T>::MaxInactivityTimeLock() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->get_MaxInactivityTimeLock(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::MaxInactivityTimeLock(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->put_MaxInactivityTimeLock(value));
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults impl_IEasClientSecurityPolicy<T>::CheckCompliance() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults result(nullptr);
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->abi_CheckCompliance(set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults> impl_IEasClientSecurityPolicy<T>::ApplyAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults> operation = {};
	check(static_cast<IEasClientSecurityPolicy const &>(static_cast<T const &>(*this))->abi_ApplyAsync(set(operation)));
	return operation;
}

template <typename T> bool impl_IEasComplianceResults<T>::Compliant() const
{
	bool value = {};
	check(static_cast<IEasComplianceResults const &>(static_cast<T const &>(*this))->get_Compliant(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasRequireEncryptionResult impl_IEasComplianceResults<T>::RequireEncryptionResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasRequireEncryptionResult value = {};
	check(static_cast<IEasComplianceResults const &>(static_cast<T const &>(*this))->get_RequireEncryptionResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordLengthResult impl_IEasComplianceResults<T>::MinPasswordLengthResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordLengthResult value = {};
	check(static_cast<IEasComplianceResults const &>(static_cast<T const &>(*this))->get_MinPasswordLengthResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasDisallowConvenienceLogonResult impl_IEasComplianceResults<T>::DisallowConvenienceLogonResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasDisallowConvenienceLogonResult value = {};
	check(static_cast<IEasComplianceResults const &>(static_cast<T const &>(*this))->get_DisallowConvenienceLogonResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordComplexCharactersResult impl_IEasComplianceResults<T>::MinPasswordComplexCharactersResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordComplexCharactersResult value = {};
	check(static_cast<IEasComplianceResults const &>(static_cast<T const &>(*this))->get_MinPasswordComplexCharactersResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordExpirationResult impl_IEasComplianceResults<T>::PasswordExpirationResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordExpirationResult value = {};
	check(static_cast<IEasComplianceResults const &>(static_cast<T const &>(*this))->get_PasswordExpirationResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordHistoryResult impl_IEasComplianceResults<T>::PasswordHistoryResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordHistoryResult value = {};
	check(static_cast<IEasComplianceResults const &>(static_cast<T const &>(*this))->get_PasswordHistoryResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasMaxPasswordFailedAttemptsResult impl_IEasComplianceResults<T>::MaxPasswordFailedAttemptsResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasMaxPasswordFailedAttemptsResult value = {};
	check(static_cast<IEasComplianceResults const &>(static_cast<T const &>(*this))->get_MaxPasswordFailedAttemptsResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasMaxInactivityTimeLockResult impl_IEasComplianceResults<T>::MaxInactivityTimeLockResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasMaxInactivityTimeLockResult value = {};
	check(static_cast<IEasComplianceResults const &>(static_cast<T const &>(*this))->get_MaxInactivityTimeLockResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasEncryptionProviderType impl_IEasComplianceResults2<T>::EncryptionProviderType() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasEncryptionProviderType value = {};
	check(static_cast<IEasComplianceResults2 const &>(static_cast<T const &>(*this))->get_EncryptionProviderType(&value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Storage {

template <typename T> void impl_IStreamedFileDataRequestedHandler<T>::Invoke(Windows::Storage::StreamedFileDataRequest const & stream) const
{
	check(static_cast<IStreamedFileDataRequestedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(stream)));
}

template <typename T> void impl_IApplicationDataSetVersionHandler<T>::Invoke(Windows::Storage::SetVersionRequest const & setVersionRequest) const
{
	check(static_cast<IApplicationDataSetVersionHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(setVersionRequest)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> impl_IStorageLibraryStatics<T>::GetLibraryAsync(Windows::Storage::KnownLibraryId const libraryId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> operation = {};
	check(static_cast<IStorageLibraryStatics const &>(static_cast<T const &>(*this))->abi_GetLibraryAsync(libraryId, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageLibrary<T>::RequestAddFolderAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageLibrary const &>(static_cast<T const &>(*this))->abi_RequestAddFolderAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IStorageLibrary<T>::RequestRemoveFolderAsync(Windows::Storage::StorageFolder const & folder) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IStorageLibrary const &>(static_cast<T const &>(*this))->abi_RequestRemoveFolderAsync(get(folder), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder> impl_IStorageLibrary<T>::Folders() const
{
	Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder> value = {};
	check(static_cast<IStorageLibrary const &>(static_cast<T const &>(*this))->get_Folders(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IStorageLibrary<T>::SaveFolder() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IStorageLibrary const &>(static_cast<T const &>(*this))->get_SaveFolder(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IStorageLibrary<T>::DefinitionChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::StorageLibrary, IInspectable> const & handler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IStorageLibrary const &>(static_cast<T const &>(*this))->add_DefinitionChanged(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IStorageLibrary<T>::DefinitionChanged(F handler) const
{
	return DefinitionChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::StorageLibrary, IInspectable>(handler));
}

template <typename T> void impl_IStorageLibrary<T>::DefinitionChanged(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IStorageLibrary const &>(static_cast<T const &>(*this))->remove_DefinitionChanged(eventCookie));
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::MusicLibrary() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersStatics const &>(static_cast<T const &>(*this))->get_MusicLibrary(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::PicturesLibrary() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersStatics const &>(static_cast<T const &>(*this))->get_PicturesLibrary(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::VideosLibrary() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersStatics const &>(static_cast<T const &>(*this))->get_VideosLibrary(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::DocumentsLibrary() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersStatics const &>(static_cast<T const &>(*this))->get_DocumentsLibrary(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::HomeGroup() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersStatics const &>(static_cast<T const &>(*this))->get_HomeGroup(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::RemovableDevices() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersStatics const &>(static_cast<T const &>(*this))->get_RemovableDevices(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::MediaServerDevices() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersStatics const &>(static_cast<T const &>(*this))->get_MediaServerDevices(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersPlaylistsStatics<T>::Playlists() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersPlaylistsStatics const &>(static_cast<T const &>(*this))->get_Playlists(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersCameraRollStatics<T>::CameraRoll() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersCameraRollStatics const &>(static_cast<T const &>(*this))->get_CameraRoll(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersSavedPicturesStatics<T>::SavedPictures() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IKnownFoldersSavedPicturesStatics const &>(static_cast<T const &>(*this))->get_SavedPictures(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics<T>::CreateFileAsync(String const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IDownloadsFolderStatics const &>(static_cast<T const &>(*this))->abi_CreateFileAsync(get(desiredName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics<T>::CreateFileAsync(wchar_t const (&desiredName)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IDownloadsFolderStatics const &>(static_cast<T const &>(*this))->abi_CreateFileAsync(StringReference(desiredName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics<T>::CreateFolderAsync(String const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IDownloadsFolderStatics const &>(static_cast<T const &>(*this))->abi_CreateFolderAsync(get(desiredName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics<T>::CreateFolderAsync(wchar_t const (&desiredName)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IDownloadsFolderStatics const &>(static_cast<T const &>(*this))->abi_CreateFolderAsync(StringReference(desiredName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics<T>::CreateFileAsync(String const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IDownloadsFolderStatics const &>(static_cast<T const &>(*this))->abi_CreateFileWithCollisionOptionAsync(get(desiredName), option, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics<T>::CreateFileAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IDownloadsFolderStatics const &>(static_cast<T const &>(*this))->abi_CreateFileWithCollisionOptionAsync(StringReference(desiredName), option, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics<T>::CreateFolderAsync(String const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IDownloadsFolderStatics const &>(static_cast<T const &>(*this))->abi_CreateFolderWithCollisionOptionAsync(get(desiredName), option, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics<T>::CreateFolderAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IDownloadsFolderStatics const &>(static_cast<T const &>(*this))->abi_CreateFolderWithCollisionOptionAsync(StringReference(desiredName), option, set(operation)));
	return operation;
}

template <typename T> void impl_IStreamedFileDataRequest<T>::FailAndClose(Windows::Storage::StreamedFileFailureMode const failureMode) const
{
	check(static_cast<IStreamedFileDataRequest const &>(static_cast<T const &>(*this))->abi_FailAndClose(failureMode));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::GetFileFromPathAsync(String const & path) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFileStatics const &>(static_cast<T const &>(*this))->abi_GetFileFromPathAsync(get(path), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::GetFileFromPathAsync(wchar_t const (&path)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFileStatics const &>(static_cast<T const &>(*this))->abi_GetFileFromPathAsync(StringReference(path), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFileStatics const &>(static_cast<T const &>(*this))->abi_GetFileFromApplicationUriAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileAsync(String const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFileStatics const &>(static_cast<T const &>(*this))->abi_CreateStreamedFileAsync(get(displayNameWithExtension), get(dataRequested), get(thumbnail), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFileStatics const &>(static_cast<T const &>(*this))->abi_CreateStreamedFileAsync(StringReference(displayNameWithExtension), get(dataRequested), get(thumbnail), set(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileAsync(String const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	return CreateStreamedFileAsync(displayNameWithExtension, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

template <typename T> template <unsigned S0, typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	return CreateStreamedFileAsync(displayNameWithExtension, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFileStatics const &>(static_cast<T const &>(*this))->abi_ReplaceWithStreamedFileAsync(get(fileToReplace), get(dataRequested), get(thumbnail), set(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	return ReplaceWithStreamedFileAsync(fileToReplace, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileFromUriAsync(String const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFileStatics const &>(static_cast<T const &>(*this))->abi_CreateStreamedFileFromUriAsync(get(displayNameWithExtension), get(uri), get(thumbnail), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileFromUriAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFileStatics const &>(static_cast<T const &>(*this))->abi_CreateStreamedFileFromUriAsync(StringReference(displayNameWithExtension), get(uri), get(thumbnail), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFileStatics const &>(static_cast<T const &>(*this))->abi_ReplaceWithStreamedFileFromUriAsync(get(fileToReplace), get(uri), get(thumbnail), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::RenameAsync(String const & desiredName) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->abi_RenameAsyncOverloadDefaultOptions(get(desiredName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::RenameAsync(wchar_t const (&desiredName)[S0]) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->abi_RenameAsyncOverloadDefaultOptions(StringReference(desiredName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::RenameAsync(String const & desiredName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->abi_RenameAsync(get(desiredName), option, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::RenameAsync(wchar_t const (&desiredName)[S0], Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->abi_RenameAsync(StringReference(desiredName), option, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->abi_DeleteAsyncOverloadDefaultOptions(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::DeleteAsync(Windows::Storage::StorageDeleteOption const option) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->abi_DeleteAsync(option, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::BasicProperties> impl_IStorageItem<T>::GetBasicPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::BasicProperties> operation = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->abi_GetBasicPropertiesAsync(set(operation)));
	return operation;
}

template <typename T> String impl_IStorageItem<T>::Name() const
{
	String value = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> String impl_IStorageItem<T>::Path() const
{
	String value = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->get_Path(set(value)));
	return value;
}

template <typename T> Windows::Storage::FileAttributes impl_IStorageItem<T>::Attributes() const
{
	Windows::Storage::FileAttributes value = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->get_Attributes(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IStorageItem<T>::DateCreated() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->get_DateCreated(&value));
	return value;
}

template <typename T> bool impl_IStorageItem<T>::IsOfType(Windows::Storage::StorageItemTypes const type) const
{
	bool value = {};
	check(static_cast<IStorageItem const &>(static_cast<T const &>(*this))->abi_IsOfType(type, BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::CreateFileAsync(String const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_CreateFileAsyncOverloadDefaultOptions(get(desiredName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::CreateFileAsync(wchar_t const (&desiredName)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_CreateFileAsyncOverloadDefaultOptions(StringReference(desiredName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::CreateFileAsync(String const & desiredName, Windows::Storage::CreationCollisionOption const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_CreateFileAsync(get(desiredName), options, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::CreateFileAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_CreateFileAsync(StringReference(desiredName), options, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::CreateFolderAsync(String const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_CreateFolderAsyncOverloadDefaultOptions(get(desiredName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::CreateFolderAsync(wchar_t const (&desiredName)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_CreateFolderAsyncOverloadDefaultOptions(StringReference(desiredName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::CreateFolderAsync(String const & desiredName, Windows::Storage::CreationCollisionOption const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_CreateFolderAsync(get(desiredName), options, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::CreateFolderAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_CreateFolderAsync(StringReference(desiredName), options, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::GetFileAsync(String const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_GetFileAsync(get(name), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::GetFileAsync(wchar_t const (&name)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_GetFileAsync(StringReference(name), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::GetFolderAsync(String const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_GetFolderAsync(get(name), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::GetFolderAsync(wchar_t const (&name)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_GetFolderAsync(StringReference(name), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageFolder<T>::GetItemAsync(String const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_GetItemAsync(get(name), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageFolder<T>::GetItemAsync(wchar_t const (&name)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_GetItemAsync(StringReference(name), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFolder<T>::GetFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_GetFilesAsyncOverloadDefaultOptionsStartAndCount(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolder<T>::GetFoldersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_GetFoldersAsyncOverloadDefaultOptionsStartAndCount(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageFolder<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation = {};
	check(static_cast<IStorageFolder const &>(static_cast<T const &>(*this))->abi_GetItemsAsyncOverloadDefaultStartAndCount(set(operation)));
	return operation;
}

template <typename T> String impl_IStorageFile<T>::FileType() const
{
	String value = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->get_FileType(set(value)));
	return value;
}

template <typename T> String impl_IStorageFile<T>::ContentType() const
{
	String value = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->get_ContentType(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IStorageFile<T>::OpenAsync(Windows::Storage::FileAccessMode const accessMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_OpenAsync(accessMode, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> impl_IStorageFile<T>::OpenTransactedWriteAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_OpenTransactedWriteAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_CopyOverloadDefaultNameAndOptions(get(destinationFolder), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_CopyOverloadDefaultOptions(get(destinationFolder), get(desiredNewName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_CopyOverloadDefaultOptions(get(destinationFolder), StringReference(desiredNewName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_CopyOverload(get(destinationFolder), get(desiredNewName), option, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0], Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_CopyOverload(get(destinationFolder), StringReference(desiredNewName), option, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::CopyAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_CopyAndReplaceAsync(get(fileToReplace), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_MoveOverloadDefaultNameAndOptions(get(destinationFolder), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_MoveOverloadDefaultOptions(get(destinationFolder), get(desiredNewName), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0]) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_MoveOverloadDefaultOptions(get(destinationFolder), StringReference(desiredNewName), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, String const & desiredNewName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_MoveOverload(get(destinationFolder), get(desiredNewName), option, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, wchar_t const (&desiredNewName)[S0], Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_MoveOverload(get(destinationFolder), StringReference(desiredNewName), option, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageFile const &>(static_cast<T const &>(*this))->abi_MoveAndReplaceAsync(get(fileToReplace), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolderStatics<T>::GetFolderFromPathAsync(String const & path) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageFolderStatics const &>(static_cast<T const &>(*this))->abi_GetFolderFromPathAsync(get(path), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolderStatics<T>::GetFolderFromPathAsync(wchar_t const (&path)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageFolderStatics const &>(static_cast<T const &>(*this))->abi_GetFolderFromPathAsync(StringReference(path), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageItem2<T>::GetParentAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageItem2 const &>(static_cast<T const &>(*this))->abi_GetParentAsync(set(operation)));
	return operation;
}

template <typename T> bool impl_IStorageItem2<T>::IsEqual(Windows::Storage::IStorageItem const & item) const
{
	bool value = {};
	check(static_cast<IStorageItem2 const &>(static_cast<T const &>(*this))->abi_IsEqual(get(item), BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties<T>::GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation = {};
	check(static_cast<IStorageItemProperties const &>(static_cast<T const &>(*this))->abi_GetThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties<T>::GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation = {};
	check(static_cast<IStorageItemProperties const &>(static_cast<T const &>(*this))->abi_GetThumbnailAsyncOverloadDefaultOptions(mode, requestedSize, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties<T>::GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize, Windows::Storage::FileProperties::ThumbnailOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation = {};
	check(static_cast<IStorageItemProperties const &>(static_cast<T const &>(*this))->abi_GetThumbnailAsync(mode, requestedSize, options, set(operation)));
	return operation;
}

template <typename T> String impl_IStorageItemProperties<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IStorageItemProperties const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> String impl_IStorageItemProperties<T>::DisplayType() const
{
	String value = {};
	check(static_cast<IStorageItemProperties const &>(static_cast<T const &>(*this))->get_DisplayType(set(value)));
	return value;
}

template <typename T> String impl_IStorageItemProperties<T>::FolderRelativeId() const
{
	String value = {};
	check(static_cast<IStorageItemProperties const &>(static_cast<T const &>(*this))->get_FolderRelativeId(set(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::StorageItemContentProperties impl_IStorageItemProperties<T>::Properties() const
{
	Windows::Storage::FileProperties::StorageItemContentProperties value(nullptr);
	check(static_cast<IStorageItemProperties const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties2<T>::GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation = {};
	check(static_cast<IStorageItemProperties2 const &>(static_cast<T const &>(*this))->abi_GetScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties2<T>::GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation = {};
	check(static_cast<IStorageItemProperties2 const &>(static_cast<T const &>(*this))->abi_GetScaledImageAsThumbnailAsyncOverloadDefaultOptions(mode, requestedSize, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties2<T>::GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize, Windows::Storage::FileProperties::ThumbnailOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation = {};
	check(static_cast<IStorageItemProperties2 const &>(static_cast<T const &>(*this))->abi_GetScaledImageAsThumbnailAsync(mode, requestedSize, options, set(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageProvider impl_IStorageItemPropertiesWithProvider<T>::Provider() const
{
	Windows::Storage::StorageProvider value(nullptr);
	check(static_cast<IStorageItemPropertiesWithProvider const &>(static_cast<T const &>(*this))->get_Provider(set(value)));
	return value;
}

template <typename T> bool impl_IStorageFilePropertiesWithAvailability<T>::IsAvailable() const
{
	bool value = {};
	check(static_cast<IStorageFilePropertiesWithAvailability const &>(static_cast<T const &>(*this))->get_IsAvailable(BoolProxy(value)));
	return value;
}

template <typename T> String impl_IStorageProvider<T>::Id() const
{
	String value = {};
	check(static_cast<IStorageProvider const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> String impl_IStorageProvider<T>::DisplayName() const
{
	String value = {};
	check(static_cast<IStorageProvider const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageFolder2<T>::TryGetItemAsync(String const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation = {};
	check(static_cast<IStorageFolder2 const &>(static_cast<T const &>(*this))->abi_TryGetItemAsync(get(name), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageFolder2<T>::TryGetItemAsync(wchar_t const (&name)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation = {};
	check(static_cast<IStorageFolder2 const &>(static_cast<T const &>(*this))->abi_TryGetItemAsync(StringReference(name), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IFileIOStatics<T>::ReadTextAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_ReadTextAsync(get(file), set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IFileIOStatics<T>::ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_ReadTextWithEncodingAsync(get(file), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_WriteTextAsync(get(file), get(contents), set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_WriteTextAsync(get(file), StringReference(contents), set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_WriteTextWithEncodingAsync(get(file), get(contents), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_WriteTextWithEncodingAsync(get(file), StringReference(contents), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_AppendTextAsync(get(file), get(contents), set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0]) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_AppendTextAsync(get(file), StringReference(contents), set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_AppendTextWithEncodingAsync(get(file), get(contents), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_AppendTextWithEncodingAsync(get(file), StringReference(contents), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IFileIOStatics<T>::ReadLinesAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_ReadLinesAsync(get(file), set(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IFileIOStatics<T>::ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_ReadLinesWithEncodingAsync(get(file), encoding, set(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_WriteLinesAsync(get(file), get(lines), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_WriteLinesWithEncodingAsync(get(file), get(lines), encoding, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_AppendLinesAsync(get(file), get(lines), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_AppendLinesWithEncodingAsync(get(file), get(lines), encoding, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IFileIOStatics<T>::ReadBufferAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_ReadBufferAsync(get(file), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IFileIOStatics const &>(static_cast<T const &>(*this))->abi_WriteBufferAsync(get(file), get(buffer), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IPathIOStatics<T>::ReadTextAsync(String const & absolutePath) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadTextAsync(get(absolutePath), set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<String> impl_IPathIOStatics<T>::ReadTextAsync(wchar_t const (&absolutePath)[S0]) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadTextAsync(StringReference(absolutePath), set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IPathIOStatics<T>::ReadTextAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadTextWithEncodingAsync(get(absolutePath), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<String> impl_IPathIOStatics<T>::ReadTextAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadTextWithEncodingAsync(StringReference(absolutePath), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteTextAsync(String const & absolutePath, String const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteTextAsync(get(absolutePath), get(contents), set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteTextAsync(StringReference(absolutePath), StringReference(contents), set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteTextWithEncodingAsync(get(absolutePath), get(contents), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteTextWithEncodingAsync(StringReference(absolutePath), StringReference(contents), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendTextAsync(String const & absolutePath, String const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_AppendTextAsync(get(absolutePath), get(contents), set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1]) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_AppendTextAsync(StringReference(absolutePath), StringReference(contents), set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_AppendTextWithEncodingAsync(get(absolutePath), get(contents), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_AppendTextWithEncodingAsync(StringReference(absolutePath), StringReference(contents), encoding, set(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IPathIOStatics<T>::ReadLinesAsync(String const & absolutePath) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadLinesAsync(get(absolutePath), set(linesOperation)));
	return linesOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IPathIOStatics<T>::ReadLinesAsync(wchar_t const (&absolutePath)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadLinesAsync(StringReference(absolutePath), set(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IPathIOStatics<T>::ReadLinesAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadLinesWithEncodingAsync(get(absolutePath), encoding, set(linesOperation)));
	return linesOperation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IPathIOStatics<T>::ReadLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadLinesWithEncodingAsync(StringReference(absolutePath), encoding, set(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteLinesAsync(get(absolutePath), get(lines), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteLinesAsync(StringReference(absolutePath), get(lines), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteLinesWithEncodingAsync(get(absolutePath), get(lines), encoding, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteLinesWithEncodingAsync(StringReference(absolutePath), get(lines), encoding, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_AppendLinesAsync(get(absolutePath), get(lines), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_AppendLinesAsync(StringReference(absolutePath), get(lines), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_AppendLinesWithEncodingAsync(get(absolutePath), get(lines), encoding, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_AppendLinesWithEncodingAsync(StringReference(absolutePath), get(lines), encoding, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IPathIOStatics<T>::ReadBufferAsync(String const & absolutePath) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadBufferAsync(get(absolutePath), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IPathIOStatics<T>::ReadBufferAsync(wchar_t const (&absolutePath)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_ReadBufferAsync(StringReference(absolutePath), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteBufferAsync(String const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteBufferAsync(get(absolutePath), get(buffer), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteBufferAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPathIOStatics const &>(static_cast<T const &>(*this))->abi_WriteBufferAsync(StringReference(absolutePath), get(buffer), set(operation)));
	return operation;
}

template <typename T> void impl_ICachedFileManagerStatics<T>::DeferUpdates(Windows::Storage::IStorageFile const & file) const
{
	check(static_cast<ICachedFileManagerStatics const &>(static_cast<T const &>(*this))->abi_DeferUpdates(get(file)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Provider::FileUpdateStatus> impl_ICachedFileManagerStatics<T>::CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Provider::FileUpdateStatus> operation = {};
	check(static_cast<ICachedFileManagerStatics const &>(static_cast<T const &>(*this))->abi_CompleteUpdatesAsync(get(file), set(operation)));
	return operation;
}

template <typename T> String impl_ISystemAudioProperties<T>::EncodingBitrate() const
{
	String value = {};
	check(static_cast<ISystemAudioProperties const &>(static_cast<T const &>(*this))->get_EncodingBitrate(set(value)));
	return value;
}

template <typename T> String impl_ISystemGPSProperties<T>::LatitudeDecimal() const
{
	String value = {};
	check(static_cast<ISystemGPSProperties const &>(static_cast<T const &>(*this))->get_LatitudeDecimal(set(value)));
	return value;
}

template <typename T> String impl_ISystemGPSProperties<T>::LongitudeDecimal() const
{
	String value = {};
	check(static_cast<ISystemGPSProperties const &>(static_cast<T const &>(*this))->get_LongitudeDecimal(set(value)));
	return value;
}

template <typename T> String impl_ISystemImageProperties<T>::HorizontalSize() const
{
	String value = {};
	check(static_cast<ISystemImageProperties const &>(static_cast<T const &>(*this))->get_HorizontalSize(set(value)));
	return value;
}

template <typename T> String impl_ISystemImageProperties<T>::VerticalSize() const
{
	String value = {};
	check(static_cast<ISystemImageProperties const &>(static_cast<T const &>(*this))->get_VerticalSize(set(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Duration() const
{
	String value = {};
	check(static_cast<ISystemMediaProperties const &>(static_cast<T const &>(*this))->get_Duration(set(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Producer() const
{
	String value = {};
	check(static_cast<ISystemMediaProperties const &>(static_cast<T const &>(*this))->get_Producer(set(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Publisher() const
{
	String value = {};
	check(static_cast<ISystemMediaProperties const &>(static_cast<T const &>(*this))->get_Publisher(set(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::SubTitle() const
{
	String value = {};
	check(static_cast<ISystemMediaProperties const &>(static_cast<T const &>(*this))->get_SubTitle(set(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Writer() const
{
	String value = {};
	check(static_cast<ISystemMediaProperties const &>(static_cast<T const &>(*this))->get_Writer(set(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Year() const
{
	String value = {};
	check(static_cast<ISystemMediaProperties const &>(static_cast<T const &>(*this))->get_Year(set(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::AlbumArtist() const
{
	String value = {};
	check(static_cast<ISystemMusicProperties const &>(static_cast<T const &>(*this))->get_AlbumArtist(set(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::AlbumTitle() const
{
	String value = {};
	check(static_cast<ISystemMusicProperties const &>(static_cast<T const &>(*this))->get_AlbumTitle(set(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Artist() const
{
	String value = {};
	check(static_cast<ISystemMusicProperties const &>(static_cast<T const &>(*this))->get_Artist(set(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Composer() const
{
	String value = {};
	check(static_cast<ISystemMusicProperties const &>(static_cast<T const &>(*this))->get_Composer(set(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Conductor() const
{
	String value = {};
	check(static_cast<ISystemMusicProperties const &>(static_cast<T const &>(*this))->get_Conductor(set(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::DisplayArtist() const
{
	String value = {};
	check(static_cast<ISystemMusicProperties const &>(static_cast<T const &>(*this))->get_DisplayArtist(set(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Genre() const
{
	String value = {};
	check(static_cast<ISystemMusicProperties const &>(static_cast<T const &>(*this))->get_Genre(set(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::TrackNumber() const
{
	String value = {};
	check(static_cast<ISystemMusicProperties const &>(static_cast<T const &>(*this))->get_TrackNumber(set(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::CameraManufacturer() const
{
	String value = {};
	check(static_cast<ISystemPhotoProperties const &>(static_cast<T const &>(*this))->get_CameraManufacturer(set(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::CameraModel() const
{
	String value = {};
	check(static_cast<ISystemPhotoProperties const &>(static_cast<T const &>(*this))->get_CameraModel(set(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::DateTaken() const
{
	String value = {};
	check(static_cast<ISystemPhotoProperties const &>(static_cast<T const &>(*this))->get_DateTaken(set(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::Orientation() const
{
	String value = {};
	check(static_cast<ISystemPhotoProperties const &>(static_cast<T const &>(*this))->get_Orientation(set(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::PeopleNames() const
{
	String value = {};
	check(static_cast<ISystemPhotoProperties const &>(static_cast<T const &>(*this))->get_PeopleNames(set(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::Director() const
{
	String value = {};
	check(static_cast<ISystemVideoProperties const &>(static_cast<T const &>(*this))->get_Director(set(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::FrameHeight() const
{
	String value = {};
	check(static_cast<ISystemVideoProperties const &>(static_cast<T const &>(*this))->get_FrameHeight(set(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::FrameWidth() const
{
	String value = {};
	check(static_cast<ISystemVideoProperties const &>(static_cast<T const &>(*this))->get_FrameWidth(set(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::Orientation() const
{
	String value = {};
	check(static_cast<ISystemVideoProperties const &>(static_cast<T const &>(*this))->get_Orientation(set(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::TotalBitrate() const
{
	String value = {};
	check(static_cast<ISystemVideoProperties const &>(static_cast<T const &>(*this))->get_TotalBitrate(set(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Author() const
{
	String value = {};
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Author(set(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Comment() const
{
	String value = {};
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Comment(set(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::ItemNameDisplay() const
{
	String value = {};
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_ItemNameDisplay(set(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Keywords() const
{
	String value = {};
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Keywords(set(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Rating() const
{
	String value = {};
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Rating(set(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Title() const
{
	String value = {};
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> Windows::Storage::SystemAudioProperties impl_ISystemProperties<T>::Audio() const
{
	Windows::Storage::SystemAudioProperties value(nullptr);
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Audio(set(value)));
	return value;
}

template <typename T> Windows::Storage::SystemGPSProperties impl_ISystemProperties<T>::GPS() const
{
	Windows::Storage::SystemGPSProperties value(nullptr);
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_GPS(set(value)));
	return value;
}

template <typename T> Windows::Storage::SystemMediaProperties impl_ISystemProperties<T>::Media() const
{
	Windows::Storage::SystemMediaProperties value(nullptr);
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Media(set(value)));
	return value;
}

template <typename T> Windows::Storage::SystemMusicProperties impl_ISystemProperties<T>::Music() const
{
	Windows::Storage::SystemMusicProperties value(nullptr);
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Music(set(value)));
	return value;
}

template <typename T> Windows::Storage::SystemPhotoProperties impl_ISystemProperties<T>::Photo() const
{
	Windows::Storage::SystemPhotoProperties value(nullptr);
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Photo(set(value)));
	return value;
}

template <typename T> Windows::Storage::SystemVideoProperties impl_ISystemProperties<T>::Video() const
{
	Windows::Storage::SystemVideoProperties value(nullptr);
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Video(set(value)));
	return value;
}

template <typename T> Windows::Storage::SystemImageProperties impl_ISystemProperties<T>::Image() const
{
	Windows::Storage::SystemImageProperties value(nullptr);
	check(static_cast<ISystemProperties const &>(static_cast<T const &>(*this))->get_Image(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IStorageStreamTransaction<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStream value = {};
	check(static_cast<IStorageStreamTransaction const &>(static_cast<T const &>(*this))->get_Stream(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageStreamTransaction<T>::CommitAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageStreamTransaction const &>(static_cast<T const &>(*this))->abi_CommitAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Storage::ApplicationData impl_IApplicationDataStatics<T>::Current() const
{
	Windows::Storage::ApplicationData value(nullptr);
	check(static_cast<IApplicationDataStatics const &>(static_cast<T const &>(*this))->get_Current(set(value)));
	return value;
}

template <typename T> unsigned impl_IApplicationData<T>::Version() const
{
	unsigned value = {};
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->get_Version(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::SetVersionAsync(unsigned const desiredVersion, Windows::Storage::IApplicationDataSetVersionHandler const & handler) const
{
	Windows::Foundation::IAsyncAction setVersionOperation = {};
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->abi_SetVersionAsync(desiredVersion, get(handler), set(setVersionOperation)));
	return setVersionOperation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::SetVersionAsync(unsigned const desiredVersion, F handler) const
{
	return SetVersionAsync(desiredVersion, Windows::Storage::ApplicationDataSetVersionHandler(handler));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::ClearAsync() const
{
	Windows::Foundation::IAsyncAction clearOperation = {};
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->abi_ClearAllAsync(set(clearOperation)));
	return clearOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::ClearAsync(Windows::Storage::ApplicationDataLocality const locality) const
{
	Windows::Foundation::IAsyncAction clearOperation = {};
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->abi_ClearAsync(locality, set(clearOperation)));
	return clearOperation;
}

template <typename T> Windows::Storage::ApplicationDataContainer impl_IApplicationData<T>::LocalSettings() const
{
	Windows::Storage::ApplicationDataContainer value(nullptr);
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->get_LocalSettings(set(value)));
	return value;
}

template <typename T> Windows::Storage::ApplicationDataContainer impl_IApplicationData<T>::RoamingSettings() const
{
	Windows::Storage::ApplicationDataContainer value(nullptr);
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->get_RoamingSettings(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData<T>::LocalFolder() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->get_LocalFolder(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData<T>::RoamingFolder() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->get_RoamingFolder(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData<T>::TemporaryFolder() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->get_TemporaryFolder(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IApplicationData<T>::DataChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::ApplicationData, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->add_DataChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IApplicationData<T>::DataChanged(F handler) const
{
	return DataChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::ApplicationData, IInspectable>(handler));
}

template <typename T> void impl_IApplicationData<T>::DataChanged(EventRegistrationToken const token) const
{
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->remove_DataChanged(token));
}

template <typename T> void impl_IApplicationData<T>::SignalDataChanged() const
{
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->abi_SignalDataChanged());
}

template <typename T> unsigned long long impl_IApplicationData<T>::RoamingStorageQuota() const
{
	unsigned long long value = {};
	check(static_cast<IApplicationData const &>(static_cast<T const &>(*this))->get_RoamingStorageQuota(&value));
	return value;
}

template <typename T> unsigned impl_ISetVersionRequest<T>::CurrentVersion() const
{
	unsigned currentVersion = {};
	check(static_cast<ISetVersionRequest const &>(static_cast<T const &>(*this))->get_CurrentVersion(&currentVersion));
	return currentVersion;
}

template <typename T> unsigned impl_ISetVersionRequest<T>::DesiredVersion() const
{
	unsigned desiredVersion = {};
	check(static_cast<ISetVersionRequest const &>(static_cast<T const &>(*this))->get_DesiredVersion(&desiredVersion));
	return desiredVersion;
}

template <typename T> Windows::Storage::SetVersionDeferral impl_ISetVersionRequest<T>::GetDeferral() const
{
	Windows::Storage::SetVersionDeferral deferral(nullptr);
	check(static_cast<ISetVersionRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> void impl_ISetVersionDeferral<T>::Complete() const
{
	check(static_cast<ISetVersionDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> String impl_IApplicationDataContainer<T>::Name() const
{
	String value = {};
	check(static_cast<IApplicationDataContainer const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> Windows::Storage::ApplicationDataLocality impl_IApplicationDataContainer<T>::Locality() const
{
	Windows::Storage::ApplicationDataLocality value = {};
	check(static_cast<IApplicationDataContainer const &>(static_cast<T const &>(*this))->get_Locality(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IApplicationDataContainer<T>::Values() const
{
	Windows::Foundation::Collections::IPropertySet value = {};
	check(static_cast<IApplicationDataContainer const &>(static_cast<T const &>(*this))->get_Values(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Storage::ApplicationDataContainer> impl_IApplicationDataContainer<T>::Containers() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Storage::ApplicationDataContainer> value = {};
	check(static_cast<IApplicationDataContainer const &>(static_cast<T const &>(*this))->get_Containers(set(value)));
	return value;
}

template <typename T> Windows::Storage::ApplicationDataContainer impl_IApplicationDataContainer<T>::CreateContainer(String const & name, Windows::Storage::ApplicationDataCreateDisposition const disposition) const
{
	Windows::Storage::ApplicationDataContainer container(nullptr);
	check(static_cast<IApplicationDataContainer const &>(static_cast<T const &>(*this))->abi_CreateContainer(get(name), disposition, set(container)));
	return container;
}

template <typename T> template <unsigned S0> Windows::Storage::ApplicationDataContainer impl_IApplicationDataContainer<T>::CreateContainer(wchar_t const (&name)[S0], Windows::Storage::ApplicationDataCreateDisposition const disposition) const
{
	Windows::Storage::ApplicationDataContainer container(nullptr);
	check(static_cast<IApplicationDataContainer const &>(static_cast<T const &>(*this))->abi_CreateContainer(StringReference(name), disposition, set(container)));
	return container;
}

template <typename T> void impl_IApplicationDataContainer<T>::DeleteContainer(String const & name) const
{
	check(static_cast<IApplicationDataContainer const &>(static_cast<T const &>(*this))->abi_DeleteContainer(get(name)));
}

template <typename T> template <unsigned S0> void impl_IApplicationDataContainer<T>::DeleteContainer(wchar_t const (&name)[S0]) const
{
	check(static_cast<IApplicationDataContainer const &>(static_cast<T const &>(*this))->abi_DeleteContainer(StringReference(name)));
}

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

template <typename T> Windows::Storage::AccessCache::AccessListEntry impl_IItemRemovedEventArgs<T>::RemovedEntry() const
{
	Windows::Storage::AccessCache::AccessListEntry value = {};
	check(static_cast<IItemRemovedEventArgs const &>(static_cast<T const &>(*this))->get_RemovedEntry(&value));
	return value;
}

template <typename T> String impl_IStorageItemAccessList<T>::Add(Windows::Storage::IStorageItem const & file) const
{
	String token = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_AddOverloadDefaultMetadata(get(file), set(token)));
	return token;
}

template <typename T> String impl_IStorageItemAccessList<T>::Add(Windows::Storage::IStorageItem const & file, String const & metadata) const
{
	String token = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_Add(get(file), get(metadata), set(token)));
	return token;
}

template <typename T> template <unsigned S0> String impl_IStorageItemAccessList<T>::Add(Windows::Storage::IStorageItem const & file, wchar_t const (&metadata)[S0]) const
{
	String token = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_Add(get(file), StringReference(metadata), set(token)));
	return token;
}

template <typename T> void impl_IStorageItemAccessList<T>::AddOrReplace(String const & token, Windows::Storage::IStorageItem const & file) const
{
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_AddOrReplaceOverloadDefaultMetadata(get(token), get(file)));
}

template <typename T> template <unsigned S0> void impl_IStorageItemAccessList<T>::AddOrReplace(wchar_t const (&token)[S0], Windows::Storage::IStorageItem const & file) const
{
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_AddOrReplaceOverloadDefaultMetadata(StringReference(token), get(file)));
}

template <typename T> void impl_IStorageItemAccessList<T>::AddOrReplace(String const & token, Windows::Storage::IStorageItem const & file, String const & metadata) const
{
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_AddOrReplace(get(token), get(file), get(metadata)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IStorageItemAccessList<T>::AddOrReplace(wchar_t const (&token)[S0], Windows::Storage::IStorageItem const & file, wchar_t const (&metadata)[S1]) const
{
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_AddOrReplace(StringReference(token), get(file), StringReference(metadata)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageItemAccessList<T>::GetItemAsync(String const & token) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetItemAsync(get(token), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageItemAccessList<T>::GetItemAsync(wchar_t const (&token)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetItemAsync(StringReference(token), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageItemAccessList<T>::GetFileAsync(String const & token) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetFileAsync(get(token), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageItemAccessList<T>::GetFileAsync(wchar_t const (&token)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetFileAsync(StringReference(token), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageItemAccessList<T>::GetFolderAsync(String const & token) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetFolderAsync(get(token), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageItemAccessList<T>::GetFolderAsync(wchar_t const (&token)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetFolderAsync(StringReference(token), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageItemAccessList<T>::GetItemAsync(String const & token, Windows::Storage::AccessCache::AccessCacheOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetItemWithOptionsAsync(get(token), options, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageItemAccessList<T>::GetItemAsync(wchar_t const (&token)[S0], Windows::Storage::AccessCache::AccessCacheOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetItemWithOptionsAsync(StringReference(token), options, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageItemAccessList<T>::GetFileAsync(String const & token, Windows::Storage::AccessCache::AccessCacheOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetFileWithOptionsAsync(get(token), options, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageItemAccessList<T>::GetFileAsync(wchar_t const (&token)[S0], Windows::Storage::AccessCache::AccessCacheOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetFileWithOptionsAsync(StringReference(token), options, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageItemAccessList<T>::GetFolderAsync(String const & token, Windows::Storage::AccessCache::AccessCacheOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetFolderWithOptionsAsync(get(token), options, set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageItemAccessList<T>::GetFolderAsync(wchar_t const (&token)[S0], Windows::Storage::AccessCache::AccessCacheOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_GetFolderWithOptionsAsync(StringReference(token), options, set(operation)));
	return operation;
}

template <typename T> void impl_IStorageItemAccessList<T>::Remove(String const & token) const
{
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_Remove(get(token)));
}

template <typename T> template <unsigned S0> void impl_IStorageItemAccessList<T>::Remove(wchar_t const (&token)[S0]) const
{
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_Remove(StringReference(token)));
}

template <typename T> bool impl_IStorageItemAccessList<T>::ContainsItem(String const & token) const
{
	bool value = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_ContainsItem(get(token), BoolProxy(value)));
	return value;
}

template <typename T> template <unsigned S0> bool impl_IStorageItemAccessList<T>::ContainsItem(wchar_t const (&token)[S0]) const
{
	bool value = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_ContainsItem(StringReference(token), BoolProxy(value)));
	return value;
}

template <typename T> void impl_IStorageItemAccessList<T>::Clear() const
{
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_Clear());
}

template <typename T> bool impl_IStorageItemAccessList<T>::CheckAccess(Windows::Storage::IStorageItem const & file) const
{
	bool value = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->abi_CheckAccess(get(file), BoolProxy(value)));
	return value;
}

template <typename T> Windows::Storage::AccessCache::AccessListEntryView impl_IStorageItemAccessList<T>::Entries() const
{
	Windows::Storage::AccessCache::AccessListEntryView entries(nullptr);
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->get_Entries(set(entries)));
	return entries;
}

template <typename T> unsigned impl_IStorageItemAccessList<T>::MaximumItemsAllowed() const
{
	unsigned value = {};
	check(static_cast<IStorageItemAccessList const &>(static_cast<T const &>(*this))->get_MaximumItemsAllowed(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IStorageItemMostRecentlyUsedList<T>::ItemRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList, Windows::Storage::AccessCache::ItemRemovedEventArgs> const & handler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IStorageItemMostRecentlyUsedList const &>(static_cast<T const &>(*this))->add_ItemRemoved(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IStorageItemMostRecentlyUsedList<T>::ItemRemoved(F handler) const
{
	return ItemRemoved(Windows::Foundation::TypedEventHandler<Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList, Windows::Storage::AccessCache::ItemRemovedEventArgs>(handler));
}

template <typename T> void impl_IStorageItemMostRecentlyUsedList<T>::ItemRemoved(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IStorageItemMostRecentlyUsedList const &>(static_cast<T const &>(*this))->remove_ItemRemoved(eventCookie));
}

template <typename T> Windows::Storage::AccessCache::StorageItemAccessList impl_IStorageApplicationPermissionsStatics<T>::FutureAccessList() const
{
	Windows::Storage::AccessCache::StorageItemAccessList value(nullptr);
	check(static_cast<IStorageApplicationPermissionsStatics const &>(static_cast<T const &>(*this))->get_FutureAccessList(set(value)));
	return value;
}

template <typename T> Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList impl_IStorageApplicationPermissionsStatics<T>::MostRecentlyUsedList() const
{
	Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList value(nullptr);
	check(static_cast<IStorageApplicationPermissionsStatics const &>(static_cast<T const &>(*this))->get_MostRecentlyUsedList(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

template <typename T> Windows::Storage::FileProperties::MusicProperties impl_IStorageItemInformation<T>::MusicProperties() const
{
	Windows::Storage::FileProperties::MusicProperties value(nullptr);
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->get_MusicProperties(set(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::VideoProperties impl_IStorageItemInformation<T>::VideoProperties() const
{
	Windows::Storage::FileProperties::VideoProperties value(nullptr);
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->get_VideoProperties(set(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::ImageProperties impl_IStorageItemInformation<T>::ImageProperties() const
{
	Windows::Storage::FileProperties::ImageProperties value(nullptr);
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->get_ImageProperties(set(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::DocumentProperties impl_IStorageItemInformation<T>::DocumentProperties() const
{
	Windows::Storage::FileProperties::DocumentProperties value(nullptr);
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->get_DocumentProperties(set(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::BasicProperties impl_IStorageItemInformation<T>::BasicProperties() const
{
	Windows::Storage::FileProperties::BasicProperties value(nullptr);
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->get_BasicProperties(set(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::StorageItemThumbnail impl_IStorageItemInformation<T>::Thumbnail() const
{
	Windows::Storage::FileProperties::StorageItemThumbnail value(nullptr);
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->get_Thumbnail(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IStorageItemInformation<T>::ThumbnailUpdated(Windows::Foundation::ITypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable> const & changedHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->add_ThumbnailUpdated(get(changedHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IStorageItemInformation<T>::ThumbnailUpdated(F changedHandler) const
{
	return ThumbnailUpdated(Windows::Foundation::TypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable>(changedHandler));
}

template <typename T> void impl_IStorageItemInformation<T>::ThumbnailUpdated(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->remove_ThumbnailUpdated(eventCookie));
}

template <typename T> EventRegistrationToken impl_IStorageItemInformation<T>::PropertiesUpdated(Windows::Foundation::ITypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable> const & changedHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->add_PropertiesUpdated(get(changedHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IStorageItemInformation<T>::PropertiesUpdated(F changedHandler) const
{
	return PropertiesUpdated(Windows::Foundation::TypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable>(changedHandler));
}

template <typename T> void impl_IStorageItemInformation<T>::PropertiesUpdated(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IStorageItemInformation const &>(static_cast<T const &>(*this))->remove_PropertiesUpdated(eventCookie));
}

template <typename T> Windows::Storage::BulkAccess::FileInformationFactory impl_IFileInformationFactoryFactory<T>::CreateWithMode(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode) const
{
	Windows::Storage::BulkAccess::FileInformationFactory value(nullptr);
	check(static_cast<IFileInformationFactoryFactory const &>(static_cast<T const &>(*this))->abi_CreateWithMode(get(queryResult), mode, set(value)));
	return value;
}

template <typename T> Windows::Storage::BulkAccess::FileInformationFactory impl_IFileInformationFactoryFactory<T>::CreateWithModeAndSize(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize) const
{
	Windows::Storage::BulkAccess::FileInformationFactory value(nullptr);
	check(static_cast<IFileInformationFactoryFactory const &>(static_cast<T const &>(*this))->abi_CreateWithModeAndSize(get(queryResult), mode, requestedThumbnailSize, set(value)));
	return value;
}

template <typename T> Windows::Storage::BulkAccess::FileInformationFactory impl_IFileInformationFactoryFactory<T>::CreateWithModeAndSizeAndOptions(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions const thumbnailOptions) const
{
	Windows::Storage::BulkAccess::FileInformationFactory value(nullptr);
	check(static_cast<IFileInformationFactoryFactory const &>(static_cast<T const &>(*this))->abi_CreateWithModeAndSizeAndOptions(get(queryResult), mode, requestedThumbnailSize, thumbnailOptions, set(value)));
	return value;
}

template <typename T> Windows::Storage::BulkAccess::FileInformationFactory impl_IFileInformationFactoryFactory<T>::CreateWithModeAndSizeAndOptionsAndFlags(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions const thumbnailOptions, bool const delayLoad) const
{
	Windows::Storage::BulkAccess::FileInformationFactory value(nullptr);
	check(static_cast<IFileInformationFactoryFactory const &>(static_cast<T const &>(*this))->abi_CreateWithModeAndSizeAndOptionsAndFlags(get(queryResult), mode, requestedThumbnailSize, thumbnailOptions, delayLoad, set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> impl_IFileInformationFactory<T>::GetItemsAsync(unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> operation = {};
	check(static_cast<IFileInformationFactory const &>(static_cast<T const &>(*this))->abi_GetItemsAsync(startIndex, maxItemsToRetrieve, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> impl_IFileInformationFactory<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> operation = {};
	check(static_cast<IFileInformationFactory const &>(static_cast<T const &>(*this))->abi_GetItemsAsyncDefaultStartAndCount(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> impl_IFileInformationFactory<T>::GetFilesAsync(unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> operation = {};
	check(static_cast<IFileInformationFactory const &>(static_cast<T const &>(*this))->abi_GetFilesAsync(startIndex, maxItemsToRetrieve, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> impl_IFileInformationFactory<T>::GetFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> operation = {};
	check(static_cast<IFileInformationFactory const &>(static_cast<T const &>(*this))->abi_GetFilesAsyncDefaultStartAndCount(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> impl_IFileInformationFactory<T>::GetFoldersAsync(unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> operation = {};
	check(static_cast<IFileInformationFactory const &>(static_cast<T const &>(*this))->abi_GetFoldersAsync(startIndex, maxItemsToRetrieve, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> impl_IFileInformationFactory<T>::GetFoldersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> operation = {};
	check(static_cast<IFileInformationFactory const &>(static_cast<T const &>(*this))->abi_GetFoldersAsyncDefaultStartAndCount(set(operation)));
	return operation;
}

template <typename T> IInspectable impl_IFileInformationFactory<T>::GetVirtualizedItemsVector() const
{
	IInspectable vector = {};
	check(static_cast<IFileInformationFactory const &>(static_cast<T const &>(*this))->abi_GetVirtualizedItemsVector(set(vector)));
	return vector;
}

template <typename T> IInspectable impl_IFileInformationFactory<T>::GetVirtualizedFilesVector() const
{
	IInspectable vector = {};
	check(static_cast<IFileInformationFactory const &>(static_cast<T const &>(*this))->abi_GetVirtualizedFilesVector(set(vector)));
	return vector;
}

template <typename T> IInspectable impl_IFileInformationFactory<T>::GetVirtualizedFoldersVector() const
{
	IInspectable vector = {};
	check(static_cast<IFileInformationFactory const &>(static_cast<T const &>(*this))->abi_GetVirtualizedFoldersVector(set(vector)));
	return vector;
}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICompressor<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ICompressor const &>(static_cast<T const &>(*this))->abi_FinishAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_ICompressor<T>::DetachStream() const
{
	Windows::Storage::Streams::IOutputStream stream = {};
	check(static_cast<ICompressor const &>(static_cast<T const &>(*this))->abi_DetachStream(set(stream)));
	return stream;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IDecompressor<T>::DetachStream() const
{
	Windows::Storage::Streams::IInputStream stream = {};
	check(static_cast<IDecompressor const &>(static_cast<T const &>(*this))->abi_DetachStream(set(stream)));
	return stream;
}

template <typename T> Windows::Storage::Compression::Compressor impl_ICompressorFactory<T>::CreateCompressor(Windows::Storage::Streams::IOutputStream const & underlyingStream) const
{
	Windows::Storage::Compression::Compressor createdCompressor(nullptr);
	check(static_cast<ICompressorFactory const &>(static_cast<T const &>(*this))->abi_CreateCompressor(get(underlyingStream), set(createdCompressor)));
	return createdCompressor;
}

template <typename T> Windows::Storage::Compression::Compressor impl_ICompressorFactory<T>::CreateCompressorEx(Windows::Storage::Streams::IOutputStream const & underlyingStream, Windows::Storage::Compression::CompressAlgorithm const algorithm, unsigned const blockSize) const
{
	Windows::Storage::Compression::Compressor createdCompressor(nullptr);
	check(static_cast<ICompressorFactory const &>(static_cast<T const &>(*this))->abi_CreateCompressorEx(get(underlyingStream), algorithm, blockSize, set(createdCompressor)));
	return createdCompressor;
}

template <typename T> Windows::Storage::Compression::Decompressor impl_IDecompressorFactory<T>::CreateDecompressor(Windows::Storage::Streams::IInputStream const & underlyingStream) const
{
	Windows::Storage::Compression::Decompressor createdDecompressor(nullptr);
	check(static_cast<IDecompressorFactory const &>(static_cast<T const &>(*this))->abi_CreateDecompressor(get(underlyingStream), set(createdDecompressor)));
	return createdDecompressor;
}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

template <typename T> unsigned impl_IThumbnailProperties<T>::OriginalWidth() const
{
	unsigned value = {};
	check(static_cast<IThumbnailProperties const &>(static_cast<T const &>(*this))->get_OriginalWidth(&value));
	return value;
}

template <typename T> unsigned impl_IThumbnailProperties<T>::OriginalHeight() const
{
	unsigned value = {};
	check(static_cast<IThumbnailProperties const &>(static_cast<T const &>(*this))->get_OriginalHeight(&value));
	return value;
}

template <typename T> bool impl_IThumbnailProperties<T>::ReturnedSmallerCachedSize() const
{
	bool value = {};
	check(static_cast<IThumbnailProperties const &>(static_cast<T const &>(*this))->get_ReturnedSmallerCachedSize(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::ThumbnailType impl_IThumbnailProperties<T>::Type() const
{
	Windows::Storage::FileProperties::ThumbnailType value = {};
	check(static_cast<IThumbnailProperties const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<String, IInspectable>> impl_IStorageItemExtraProperties<T>::RetrievePropertiesAsync(Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<String, IInspectable>> operation = {};
	check(static_cast<IStorageItemExtraProperties const &>(static_cast<T const &>(*this))->abi_RetrievePropertiesAsync(get(propertiesToRetrieve), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItemExtraProperties<T>::SavePropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>> const & propertiesToSave) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageItemExtraProperties const &>(static_cast<T const &>(*this))->abi_SavePropertiesAsync(get(propertiesToSave), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItemExtraProperties<T>::SavePropertiesAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IStorageItemExtraProperties const &>(static_cast<T const &>(*this))->abi_SavePropertiesAsyncOverloadDefault(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::MusicProperties> impl_IStorageItemContentProperties<T>::GetMusicPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::MusicProperties> operation = {};
	check(static_cast<IStorageItemContentProperties const &>(static_cast<T const &>(*this))->abi_GetMusicPropertiesAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::VideoProperties> impl_IStorageItemContentProperties<T>::GetVideoPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::VideoProperties> operation = {};
	check(static_cast<IStorageItemContentProperties const &>(static_cast<T const &>(*this))->abi_GetVideoPropertiesAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::ImageProperties> impl_IStorageItemContentProperties<T>::GetImagePropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::ImageProperties> operation = {};
	check(static_cast<IStorageItemContentProperties const &>(static_cast<T const &>(*this))->abi_GetImagePropertiesAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::DocumentProperties> impl_IStorageItemContentProperties<T>::GetDocumentPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::DocumentProperties> operation = {};
	check(static_cast<IStorageItemContentProperties const &>(static_cast<T const &>(*this))->abi_GetDocumentPropertiesAsync(set(operation)));
	return operation;
}

template <typename T> String impl_IMusicProperties<T>::Album() const
{
	String value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Album(set(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Album(String const & value) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Album(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMusicProperties<T>::Album(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Album(StringReference(value)));
}

template <typename T> String impl_IMusicProperties<T>::Artist() const
{
	String value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Artist(set(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Artist(String const & value) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Artist(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMusicProperties<T>::Artist(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Artist(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Genre() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Genre(set(value)));
	return value;
}

template <typename T> unsigned impl_IMusicProperties<T>::TrackNumber() const
{
	unsigned value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_TrackNumber(&value));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::TrackNumber(unsigned const value) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_TrackNumber(value));
}

template <typename T> String impl_IMusicProperties<T>::Title() const
{
	String value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Title(String const & value) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMusicProperties<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> unsigned impl_IMusicProperties<T>::Rating() const
{
	unsigned value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Rating(&value));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Rating(unsigned const value) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Rating(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMusicProperties<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Duration(&value));
	return value;
}

template <typename T> unsigned impl_IMusicProperties<T>::Bitrate() const
{
	unsigned value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Bitrate(&value));
	return value;
}

template <typename T> String impl_IMusicProperties<T>::AlbumArtist() const
{
	String value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_AlbumArtist(set(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::AlbumArtist(String const & value) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_AlbumArtist(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMusicProperties<T>::AlbumArtist(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_AlbumArtist(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Composers() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Composers(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Conductors() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Conductors(set(value)));
	return value;
}

template <typename T> String impl_IMusicProperties<T>::Subtitle() const
{
	String value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Subtitle(set(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Subtitle(String const & value) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Subtitle(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMusicProperties<T>::Subtitle(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Subtitle(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Producers() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Producers(set(value)));
	return value;
}

template <typename T> String impl_IMusicProperties<T>::Publisher() const
{
	String value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Publisher(set(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Publisher(String const & value) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Publisher(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMusicProperties<T>::Publisher(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Publisher(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Writers() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Writers(set(value)));
	return value;
}

template <typename T> unsigned impl_IMusicProperties<T>::Year() const
{
	unsigned value = {};
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->get_Year(&value));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Year(unsigned const value) const
{
	check(static_cast<IMusicProperties const &>(static_cast<T const &>(*this))->put_Year(value));
}

template <typename T> unsigned impl_IImageProperties<T>::Rating() const
{
	unsigned value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_Rating(&value));
	return value;
}

template <typename T> void impl_IImageProperties<T>::Rating(unsigned const value) const
{
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->put_Rating(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IImageProperties<T>::Keywords() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_Keywords(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IImageProperties<T>::DateTaken() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_DateTaken(&value));
	return value;
}

template <typename T> void impl_IImageProperties<T>::DateTaken(Windows::Foundation::DateTime const & value) const
{
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->put_DateTaken(value));
}

template <typename T> unsigned impl_IImageProperties<T>::Width() const
{
	unsigned value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_IImageProperties<T>::Height() const
{
	unsigned value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_Height(&value));
	return value;
}

template <typename T> String impl_IImageProperties<T>::Title() const
{
	String value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IImageProperties<T>::Title(String const & value) const
{
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IImageProperties<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> Windows::Foundation::IReference<double> impl_IImageProperties<T>::Latitude() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_Latitude(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IImageProperties<T>::Longitude() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_Longitude(set(value)));
	return value;
}

template <typename T> String impl_IImageProperties<T>::CameraManufacturer() const
{
	String value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_CameraManufacturer(set(value)));
	return value;
}

template <typename T> void impl_IImageProperties<T>::CameraManufacturer(String const & value) const
{
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->put_CameraManufacturer(get(value)));
}

template <typename T> template <unsigned S0> void impl_IImageProperties<T>::CameraManufacturer(wchar_t const (&value)[S0]) const
{
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->put_CameraManufacturer(StringReference(value)));
}

template <typename T> String impl_IImageProperties<T>::CameraModel() const
{
	String value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_CameraModel(set(value)));
	return value;
}

template <typename T> void impl_IImageProperties<T>::CameraModel(String const & value) const
{
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->put_CameraModel(get(value)));
}

template <typename T> template <unsigned S0> void impl_IImageProperties<T>::CameraModel(wchar_t const (&value)[S0]) const
{
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->put_CameraModel(StringReference(value)));
}

template <typename T> Windows::Storage::FileProperties::PhotoOrientation impl_IImageProperties<T>::Orientation() const
{
	Windows::Storage::FileProperties::PhotoOrientation value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_Orientation(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IImageProperties<T>::PeopleNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IImageProperties const &>(static_cast<T const &>(*this))->get_PeopleNames(set(value)));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Rating() const
{
	unsigned value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Rating(&value));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Rating(unsigned const value) const
{
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->put_Rating(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Keywords() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Keywords(set(value)));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Width() const
{
	unsigned value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Height() const
{
	unsigned value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Height(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IVideoProperties<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Duration(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IVideoProperties<T>::Latitude() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Latitude(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IVideoProperties<T>::Longitude() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Longitude(set(value)));
	return value;
}

template <typename T> String impl_IVideoProperties<T>::Title() const
{
	String value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Title(String const & value) const
{
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IVideoProperties<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> String impl_IVideoProperties<T>::Subtitle() const
{
	String value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Subtitle(set(value)));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Subtitle(String const & value) const
{
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->put_Subtitle(get(value)));
}

template <typename T> template <unsigned S0> void impl_IVideoProperties<T>::Subtitle(wchar_t const (&value)[S0]) const
{
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->put_Subtitle(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Producers() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Producers(set(value)));
	return value;
}

template <typename T> String impl_IVideoProperties<T>::Publisher() const
{
	String value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Publisher(set(value)));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Publisher(String const & value) const
{
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->put_Publisher(get(value)));
}

template <typename T> template <unsigned S0> void impl_IVideoProperties<T>::Publisher(wchar_t const (&value)[S0]) const
{
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->put_Publisher(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Writers() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Writers(set(value)));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Year() const
{
	unsigned value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Year(&value));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Year(unsigned const value) const
{
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->put_Year(value));
}

template <typename T> unsigned impl_IVideoProperties<T>::Bitrate() const
{
	unsigned value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Bitrate(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Directors() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Directors(set(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::VideoOrientation impl_IVideoProperties<T>::Orientation() const
{
	Windows::Storage::FileProperties::VideoOrientation value = {};
	check(static_cast<IVideoProperties const &>(static_cast<T const &>(*this))->get_Orientation(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDocumentProperties<T>::Author() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IDocumentProperties const &>(static_cast<T const &>(*this))->get_Author(set(value)));
	return value;
}

template <typename T> String impl_IDocumentProperties<T>::Title() const
{
	String value = {};
	check(static_cast<IDocumentProperties const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IDocumentProperties<T>::Title(String const & value) const
{
	check(static_cast<IDocumentProperties const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDocumentProperties<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDocumentProperties const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDocumentProperties<T>::Keywords() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IDocumentProperties const &>(static_cast<T const &>(*this))->get_Keywords(set(value)));
	return value;
}

template <typename T> String impl_IDocumentProperties<T>::Comment() const
{
	String value = {};
	check(static_cast<IDocumentProperties const &>(static_cast<T const &>(*this))->get_Comment(set(value)));
	return value;
}

template <typename T> void impl_IDocumentProperties<T>::Comment(String const & value) const
{
	check(static_cast<IDocumentProperties const &>(static_cast<T const &>(*this))->put_Comment(get(value)));
}

template <typename T> template <unsigned S0> void impl_IDocumentProperties<T>::Comment(wchar_t const (&value)[S0]) const
{
	check(static_cast<IDocumentProperties const &>(static_cast<T const &>(*this))->put_Comment(StringReference(value)));
}

template <typename T> unsigned long long impl_IBasicProperties<T>::Size() const
{
	unsigned long long value = {};
	check(static_cast<IBasicProperties const &>(static_cast<T const &>(*this))->get_Size(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IBasicProperties<T>::DateModified() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IBasicProperties const &>(static_cast<T const &>(*this))->get_DateModified(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IBasicProperties<T>::ItemDate() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IBasicProperties const &>(static_cast<T const &>(*this))->get_ItemDate(&value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

template <typename T> Windows::Storage::Pickers::PickerViewMode impl_IFileOpenPicker<T>::ViewMode() const
{
	Windows::Storage::Pickers::PickerViewMode value = {};
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->get_ViewMode(&value));
	return value;
}

template <typename T> void impl_IFileOpenPicker<T>::ViewMode(Windows::Storage::Pickers::PickerViewMode const value) const
{
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->put_ViewMode(value));
}

template <typename T> String impl_IFileOpenPicker<T>::SettingsIdentifier() const
{
	String value = {};
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->get_SettingsIdentifier(set(value)));
	return value;
}

template <typename T> void impl_IFileOpenPicker<T>::SettingsIdentifier(String const & value) const
{
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->put_SettingsIdentifier(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFileOpenPicker<T>::SettingsIdentifier(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->put_SettingsIdentifier(StringReference(value)));
}

template <typename T> Windows::Storage::Pickers::PickerLocationId impl_IFileOpenPicker<T>::SuggestedStartLocation() const
{
	Windows::Storage::Pickers::PickerLocationId value = {};
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->get_SuggestedStartLocation(&value));
	return value;
}

template <typename T> void impl_IFileOpenPicker<T>::SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId const value) const
{
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->put_SuggestedStartLocation(value));
}

template <typename T> String impl_IFileOpenPicker<T>::CommitButtonText() const
{
	String value = {};
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->get_CommitButtonText(set(value)));
	return value;
}

template <typename T> void impl_IFileOpenPicker<T>::CommitButtonText(String const & value) const
{
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->put_CommitButtonText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFileOpenPicker<T>::CommitButtonText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->put_CommitButtonText(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IFileOpenPicker<T>::FileTypeFilter() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->get_FileTypeFilter(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IFileOpenPicker<T>::PickSingleFileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> pickSingleFileOperation = {};
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->abi_PickSingleFileAsync(set(pickSingleFileOperation)));
	return pickSingleFileOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IFileOpenPicker<T>::PickMultipleFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> pickMultipleFilesOperation = {};
	check(static_cast<IFileOpenPicker const &>(static_cast<T const &>(*this))->abi_PickMultipleFilesAsync(set(pickMultipleFilesOperation)));
	return pickMultipleFilesOperation;
}

template <typename T> String impl_IFileSavePicker<T>::SettingsIdentifier() const
{
	String value = {};
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->get_SettingsIdentifier(set(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::SettingsIdentifier(String const & value) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_SettingsIdentifier(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFileSavePicker<T>::SettingsIdentifier(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_SettingsIdentifier(StringReference(value)));
}

template <typename T> Windows::Storage::Pickers::PickerLocationId impl_IFileSavePicker<T>::SuggestedStartLocation() const
{
	Windows::Storage::Pickers::PickerLocationId value = {};
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->get_SuggestedStartLocation(&value));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId const value) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_SuggestedStartLocation(value));
}

template <typename T> String impl_IFileSavePicker<T>::CommitButtonText() const
{
	String value = {};
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->get_CommitButtonText(set(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::CommitButtonText(String const & value) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_CommitButtonText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFileSavePicker<T>::CommitButtonText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_CommitButtonText(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>> impl_IFileSavePicker<T>::FileTypeChoices() const
{
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>> value = {};
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->get_FileTypeChoices(set(value)));
	return value;
}

template <typename T> String impl_IFileSavePicker<T>::DefaultFileExtension() const
{
	String value = {};
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->get_DefaultFileExtension(set(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::DefaultFileExtension(String const & value) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_DefaultFileExtension(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFileSavePicker<T>::DefaultFileExtension(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_DefaultFileExtension(StringReference(value)));
}

template <typename T> Windows::Storage::StorageFile impl_IFileSavePicker<T>::SuggestedSaveFile() const
{
	Windows::Storage::StorageFile value(nullptr);
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->get_SuggestedSaveFile(set(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::SuggestedSaveFile(Windows::Storage::StorageFile const & value) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_SuggestedSaveFile(get(value)));
}

template <typename T> String impl_IFileSavePicker<T>::SuggestedFileName() const
{
	String value = {};
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->get_SuggestedFileName(set(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::SuggestedFileName(String const & value) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_SuggestedFileName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFileSavePicker<T>::SuggestedFileName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->put_SuggestedFileName(StringReference(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IFileSavePicker<T>::PickSaveFileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> pickSaveFileOperation = {};
	check(static_cast<IFileSavePicker const &>(static_cast<T const &>(*this))->abi_PickSaveFileAsync(set(pickSaveFileOperation)));
	return pickSaveFileOperation;
}

template <typename T> Windows::Storage::Pickers::PickerViewMode impl_IFolderPicker<T>::ViewMode() const
{
	Windows::Storage::Pickers::PickerViewMode value = {};
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->get_ViewMode(&value));
	return value;
}

template <typename T> void impl_IFolderPicker<T>::ViewMode(Windows::Storage::Pickers::PickerViewMode const value) const
{
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->put_ViewMode(value));
}

template <typename T> String impl_IFolderPicker<T>::SettingsIdentifier() const
{
	String value = {};
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->get_SettingsIdentifier(set(value)));
	return value;
}

template <typename T> void impl_IFolderPicker<T>::SettingsIdentifier(String const & value) const
{
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->put_SettingsIdentifier(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFolderPicker<T>::SettingsIdentifier(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->put_SettingsIdentifier(StringReference(value)));
}

template <typename T> Windows::Storage::Pickers::PickerLocationId impl_IFolderPicker<T>::SuggestedStartLocation() const
{
	Windows::Storage::Pickers::PickerLocationId value = {};
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->get_SuggestedStartLocation(&value));
	return value;
}

template <typename T> void impl_IFolderPicker<T>::SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId const value) const
{
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->put_SuggestedStartLocation(value));
}

template <typename T> String impl_IFolderPicker<T>::CommitButtonText() const
{
	String value = {};
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->get_CommitButtonText(set(value)));
	return value;
}

template <typename T> void impl_IFolderPicker<T>::CommitButtonText(String const & value) const
{
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->put_CommitButtonText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFolderPicker<T>::CommitButtonText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->put_CommitButtonText(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IFolderPicker<T>::FileTypeFilter() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->get_FileTypeFilter(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IFolderPicker<T>::PickSingleFolderAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> pickSingleFolderOperation = {};
	check(static_cast<IFolderPicker const &>(static_cast<T const &>(*this))->abi_PickSingleFolderAsync(set(pickSingleFolderOperation)));
	return pickSingleFolderOperation;
}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

template <typename T> String impl_IFileRemovedEventArgs<T>::Id() const
{
	String value = {};
	check(static_cast<IFileRemovedEventArgs const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::AddFileResult impl_IFileOpenPickerUI<T>::AddFile(String const & id, Windows::Storage::IStorageFile const & file) const
{
	Windows::Storage::Pickers::Provider::AddFileResult addResult = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->abi_AddFile(get(id), get(file), &addResult));
	return addResult;
}

template <typename T> template <unsigned S0> Windows::Storage::Pickers::Provider::AddFileResult impl_IFileOpenPickerUI<T>::AddFile(wchar_t const (&id)[S0], Windows::Storage::IStorageFile const & file) const
{
	Windows::Storage::Pickers::Provider::AddFileResult addResult = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->abi_AddFile(StringReference(id), get(file), &addResult));
	return addResult;
}

template <typename T> void impl_IFileOpenPickerUI<T>::RemoveFile(String const & id) const
{
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->abi_RemoveFile(get(id)));
}

template <typename T> template <unsigned S0> void impl_IFileOpenPickerUI<T>::RemoveFile(wchar_t const (&id)[S0]) const
{
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->abi_RemoveFile(StringReference(id)));
}

template <typename T> bool impl_IFileOpenPickerUI<T>::ContainsFile(String const & id) const
{
	bool isContained = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->abi_ContainsFile(get(id), BoolProxy(isContained)));
	return isContained;
}

template <typename T> template <unsigned S0> bool impl_IFileOpenPickerUI<T>::ContainsFile(wchar_t const (&id)[S0]) const
{
	bool isContained = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->abi_ContainsFile(StringReference(id), BoolProxy(isContained)));
	return isContained;
}

template <typename T> bool impl_IFileOpenPickerUI<T>::CanAddFile(Windows::Storage::IStorageFile const & file) const
{
	bool canAdd = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->abi_CanAddFile(get(file), BoolProxy(canAdd)));
	return canAdd;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IFileOpenPickerUI<T>::AllowedFileTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->get_AllowedFileTypes(set(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::FileSelectionMode impl_IFileOpenPickerUI<T>::SelectionMode() const
{
	Windows::Storage::Pickers::Provider::FileSelectionMode value = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->get_SelectionMode(&value));
	return value;
}

template <typename T> String impl_IFileOpenPickerUI<T>::SettingsIdentifier() const
{
	String value = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->get_SettingsIdentifier(set(value)));
	return value;
}

template <typename T> String impl_IFileOpenPickerUI<T>::Title() const
{
	String value = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IFileOpenPickerUI<T>::Title(String const & value) const
{
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFileOpenPickerUI<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> EventRegistrationToken impl_IFileOpenPickerUI<T>::FileRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::FileRemovedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->add_FileRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IFileOpenPickerUI<T>::FileRemoved(F handler) const
{
	return FileRemoved(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::FileRemovedEventArgs>(handler));
}

template <typename T> void impl_IFileOpenPickerUI<T>::FileRemoved(EventRegistrationToken const token) const
{
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->remove_FileRemoved(token));
}

template <typename T> EventRegistrationToken impl_IFileOpenPickerUI<T>::Closing(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::PickerClosingEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->add_Closing(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IFileOpenPickerUI<T>::Closing(F handler) const
{
	return Closing(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::PickerClosingEventArgs>(handler));
}

template <typename T> void impl_IFileOpenPickerUI<T>::Closing(EventRegistrationToken const token) const
{
	check(static_cast<IFileOpenPickerUI const &>(static_cast<T const &>(*this))->remove_Closing(token));
}

template <typename T> Windows::Storage::Pickers::Provider::PickerClosingOperation impl_IPickerClosingEventArgs<T>::ClosingOperation() const
{
	Windows::Storage::Pickers::Provider::PickerClosingOperation value(nullptr);
	check(static_cast<IPickerClosingEventArgs const &>(static_cast<T const &>(*this))->get_ClosingOperation(set(value)));
	return value;
}

template <typename T> bool impl_IPickerClosingEventArgs<T>::IsCanceled() const
{
	bool value = {};
	check(static_cast<IPickerClosingEventArgs const &>(static_cast<T const &>(*this))->get_IsCanceled(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::PickerClosingDeferral impl_IPickerClosingOperation<T>::GetDeferral() const
{
	Windows::Storage::Pickers::Provider::PickerClosingDeferral value(nullptr);
	check(static_cast<IPickerClosingOperation const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPickerClosingOperation<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IPickerClosingOperation const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IPickerClosingDeferral<T>::Complete() const
{
	check(static_cast<IPickerClosingDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> String impl_IFileSavePickerUI<T>::Title() const
{
	String value = {};
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IFileSavePickerUI<T>::Title(String const & value) const
{
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IFileSavePickerUI<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IFileSavePickerUI<T>::AllowedFileTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->get_AllowedFileTypes(set(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerUI<T>::SettingsIdentifier() const
{
	String value = {};
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->get_SettingsIdentifier(set(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerUI<T>::FileName() const
{
	String value = {};
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->get_FileName(set(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::SetFileNameResult impl_IFileSavePickerUI<T>::TrySetFileName(String const & value) const
{
	Windows::Storage::Pickers::Provider::SetFileNameResult result = {};
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->abi_TrySetFileName(get(value), &result));
	return result;
}

template <typename T> template <unsigned S0> Windows::Storage::Pickers::Provider::SetFileNameResult impl_IFileSavePickerUI<T>::TrySetFileName(wchar_t const (&value)[S0]) const
{
	Windows::Storage::Pickers::Provider::SetFileNameResult result = {};
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->abi_TrySetFileName(StringReference(value), &result));
	return result;
}

template <typename T> EventRegistrationToken impl_IFileSavePickerUI<T>::FileNameChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->add_FileNameChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IFileSavePickerUI<T>::FileNameChanged(F handler) const
{
	return FileNameChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, IInspectable>(handler));
}

template <typename T> void impl_IFileSavePickerUI<T>::FileNameChanged(EventRegistrationToken const token) const
{
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->remove_FileNameChanged(token));
}

template <typename T> EventRegistrationToken impl_IFileSavePickerUI<T>::TargetFileRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->add_TargetFileRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IFileSavePickerUI<T>::TargetFileRequested(F handler) const
{
	return TargetFileRequested(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>(handler));
}

template <typename T> void impl_IFileSavePickerUI<T>::TargetFileRequested(EventRegistrationToken const token) const
{
	check(static_cast<IFileSavePickerUI const &>(static_cast<T const &>(*this))->remove_TargetFileRequested(token));
}

template <typename T> Windows::Storage::Pickers::Provider::TargetFileRequest impl_ITargetFileRequestedEventArgs<T>::Request() const
{
	Windows::Storage::Pickers::Provider::TargetFileRequest value(nullptr);
	check(static_cast<ITargetFileRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> Windows::Storage::IStorageFile impl_ITargetFileRequest<T>::TargetFile() const
{
	Windows::Storage::IStorageFile value = {};
	check(static_cast<ITargetFileRequest const &>(static_cast<T const &>(*this))->get_TargetFile(set(value)));
	return value;
}

template <typename T> void impl_ITargetFileRequest<T>::TargetFile(Windows::Storage::IStorageFile const & value) const
{
	check(static_cast<ITargetFileRequest const &>(static_cast<T const &>(*this))->put_TargetFile(get(value)));
}

template <typename T> Windows::Storage::Pickers::Provider::TargetFileRequestDeferral impl_ITargetFileRequest<T>::GetDeferral() const
{
	Windows::Storage::Pickers::Provider::TargetFileRequestDeferral value(nullptr);
	check(static_cast<ITargetFileRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(value)));
	return value;
}

template <typename T> void impl_ITargetFileRequestDeferral<T>::Complete() const
{
	check(static_cast<ITargetFileRequestDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

template <typename T> String impl_ICachedFileUpdaterUI<T>::Title() const
{
	String value = {};
	check(static_cast<ICachedFileUpdaterUI const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_ICachedFileUpdaterUI<T>::Title(String const & value) const
{
	check(static_cast<ICachedFileUpdaterUI const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICachedFileUpdaterUI<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICachedFileUpdaterUI const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> Windows::Storage::Provider::CachedFileTarget impl_ICachedFileUpdaterUI<T>::UpdateTarget() const
{
	Windows::Storage::Provider::CachedFileTarget value = {};
	check(static_cast<ICachedFileUpdaterUI const &>(static_cast<T const &>(*this))->get_UpdateTarget(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_ICachedFileUpdaterUI<T>::FileUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, Windows::Storage::Provider::FileUpdateRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICachedFileUpdaterUI const &>(static_cast<T const &>(*this))->add_FileUpdateRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICachedFileUpdaterUI<T>::FileUpdateRequested(F handler) const
{
	return FileUpdateRequested(Windows::Foundation::TypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, Windows::Storage::Provider::FileUpdateRequestedEventArgs>(handler));
}

template <typename T> void impl_ICachedFileUpdaterUI<T>::FileUpdateRequested(EventRegistrationToken const token) const
{
	check(static_cast<ICachedFileUpdaterUI const &>(static_cast<T const &>(*this))->remove_FileUpdateRequested(token));
}

template <typename T> EventRegistrationToken impl_ICachedFileUpdaterUI<T>::UIRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ICachedFileUpdaterUI const &>(static_cast<T const &>(*this))->add_UIRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICachedFileUpdaterUI<T>::UIRequested(F handler) const
{
	return UIRequested(Windows::Foundation::TypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, IInspectable>(handler));
}

template <typename T> void impl_ICachedFileUpdaterUI<T>::UIRequested(EventRegistrationToken const token) const
{
	check(static_cast<ICachedFileUpdaterUI const &>(static_cast<T const &>(*this))->remove_UIRequested(token));
}

template <typename T> Windows::Storage::Provider::UIStatus impl_ICachedFileUpdaterUI<T>::UIStatus() const
{
	Windows::Storage::Provider::UIStatus value = {};
	check(static_cast<ICachedFileUpdaterUI const &>(static_cast<T const &>(*this))->get_UIStatus(&value));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateRequest impl_IFileUpdateRequestedEventArgs<T>::Request() const
{
	Windows::Storage::Provider::FileUpdateRequest value(nullptr);
	check(static_cast<IFileUpdateRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> String impl_IFileUpdateRequest<T>::ContentId() const
{
	String value = {};
	check(static_cast<IFileUpdateRequest const &>(static_cast<T const &>(*this))->get_ContentId(set(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IFileUpdateRequest<T>::File() const
{
	Windows::Storage::StorageFile value(nullptr);
	check(static_cast<IFileUpdateRequest const &>(static_cast<T const &>(*this))->get_File(set(value)));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateStatus impl_IFileUpdateRequest<T>::Status() const
{
	Windows::Storage::Provider::FileUpdateStatus value = {};
	check(static_cast<IFileUpdateRequest const &>(static_cast<T const &>(*this))->get_Status(&value));
	return value;
}

template <typename T> void impl_IFileUpdateRequest<T>::Status(Windows::Storage::Provider::FileUpdateStatus const value) const
{
	check(static_cast<IFileUpdateRequest const &>(static_cast<T const &>(*this))->put_Status(value));
}

template <typename T> Windows::Storage::Provider::FileUpdateRequestDeferral impl_IFileUpdateRequest<T>::GetDeferral() const
{
	Windows::Storage::Provider::FileUpdateRequestDeferral value(nullptr);
	check(static_cast<IFileUpdateRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(value)));
	return value;
}

template <typename T> void impl_IFileUpdateRequest<T>::UpdateLocalFile(Windows::Storage::IStorageFile const & value) const
{
	check(static_cast<IFileUpdateRequest const &>(static_cast<T const &>(*this))->abi_UpdateLocalFile(get(value)));
}

template <typename T> void impl_IFileUpdateRequestDeferral<T>::Complete() const
{
	check(static_cast<IFileUpdateRequestDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> void impl_ICachedFileUpdaterStatics<T>::SetUpdateInformation(Windows::Storage::IStorageFile const & file, String const & contentId, Windows::Storage::Provider::ReadActivationMode const readMode, Windows::Storage::Provider::WriteActivationMode const writeMode, Windows::Storage::Provider::CachedFileOptions const options) const
{
	check(static_cast<ICachedFileUpdaterStatics const &>(static_cast<T const &>(*this))->abi_SetUpdateInformation(get(file), get(contentId), readMode, writeMode, options));
}

template <typename T> template <unsigned S0> void impl_ICachedFileUpdaterStatics<T>::SetUpdateInformation(Windows::Storage::IStorageFile const & file, wchar_t const (&contentId)[S0], Windows::Storage::Provider::ReadActivationMode const readMode, Windows::Storage::Provider::WriteActivationMode const writeMode, Windows::Storage::Provider::CachedFileOptions const options) const
{
	check(static_cast<ICachedFileUpdaterStatics const &>(static_cast<T const &>(*this))->abi_SetUpdateInformation(get(file), StringReference(contentId), readMode, writeMode, options));
}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

template <typename T> Windows::Storage::Search::ContentIndexer impl_IContentIndexerStatics<T>::GetIndexer(String const & indexName) const
{
	Windows::Storage::Search::ContentIndexer index(nullptr);
	check(static_cast<IContentIndexerStatics const &>(static_cast<T const &>(*this))->abi_GetIndexerWithName(get(indexName), set(index)));
	return index;
}

template <typename T> template <unsigned S0> Windows::Storage::Search::ContentIndexer impl_IContentIndexerStatics<T>::GetIndexer(wchar_t const (&indexName)[S0]) const
{
	Windows::Storage::Search::ContentIndexer index(nullptr);
	check(static_cast<IContentIndexerStatics const &>(static_cast<T const &>(*this))->abi_GetIndexerWithName(StringReference(indexName), set(index)));
	return index;
}

template <typename T> Windows::Storage::Search::ContentIndexer impl_IContentIndexerStatics<T>::GetIndexer() const
{
	Windows::Storage::Search::ContentIndexer index(nullptr);
	check(static_cast<IContentIndexerStatics const &>(static_cast<T const &>(*this))->abi_GetIndexer(set(index)));
	return index;
}

template <typename T> String impl_IIndexableContent<T>::Id() const
{
	String value = {};
	check(static_cast<IIndexableContent const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> void impl_IIndexableContent<T>::Id(String const & value) const
{
	check(static_cast<IIndexableContent const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> template <unsigned S0> void impl_IIndexableContent<T>::Id(wchar_t const (&value)[S0]) const
{
	check(static_cast<IIndexableContent const &>(static_cast<T const &>(*this))->put_Id(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, IInspectable> impl_IIndexableContent<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, IInspectable> value = {};
	check(static_cast<IIndexableContent const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IIndexableContent<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStream value = {};
	check(static_cast<IIndexableContent const &>(static_cast<T const &>(*this))->get_Stream(set(value)));
	return value;
}

template <typename T> void impl_IIndexableContent<T>::Stream(Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(static_cast<IIndexableContent const &>(static_cast<T const &>(*this))->put_Stream(get(value)));
}

template <typename T> String impl_IIndexableContent<T>::StreamContentType() const
{
	String value = {};
	check(static_cast<IIndexableContent const &>(static_cast<T const &>(*this))->get_StreamContentType(set(value)));
	return value;
}

template <typename T> void impl_IIndexableContent<T>::StreamContentType(String const & value) const
{
	check(static_cast<IIndexableContent const &>(static_cast<T const &>(*this))->put_StreamContentType(get(value)));
}

template <typename T> template <unsigned S0> void impl_IIndexableContent<T>::StreamContentType(wchar_t const (&value)[S0]) const
{
	check(static_cast<IIndexableContent const &>(static_cast<T const &>(*this))->put_StreamContentType(StringReference(value)));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::AddAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IContentIndexer const &>(static_cast<T const &>(*this))->abi_AddAsync(get(indexableContent), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::UpdateAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IContentIndexer const &>(static_cast<T const &>(*this))->abi_UpdateAsync(get(indexableContent), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteAsync(String const & contentId) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IContentIndexer const &>(static_cast<T const &>(*this))->abi_DeleteAsync(get(contentId), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteAsync(wchar_t const (&contentId)[S0]) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IContentIndexer const &>(static_cast<T const &>(*this))->abi_DeleteAsync(StringReference(contentId), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteMultipleAsync(Windows::Foundation::Collections::IIterable<String> const & contentIds) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IContentIndexer const &>(static_cast<T const &>(*this))->abi_DeleteMultipleAsync(get(contentIds), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteAllAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IContentIndexer const &>(static_cast<T const &>(*this))->abi_DeleteAllAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> impl_IContentIndexer<T>::RetrievePropertiesAsync(String const & contentId, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> operation = {};
	check(static_cast<IContentIndexer const &>(static_cast<T const &>(*this))->abi_RetrievePropertiesAsync(get(contentId), get(propertiesToRetrieve), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> impl_IContentIndexer<T>::RetrievePropertiesAsync(wchar_t const (&contentId)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> operation = {};
	check(static_cast<IContentIndexer const &>(static_cast<T const &>(*this))->abi_RetrievePropertiesAsync(StringReference(contentId), get(propertiesToRetrieve), set(operation)));
	return operation;
}

template <typename T> unsigned long long impl_IContentIndexer<T>::Revision() const
{
	unsigned long long value = {};
	check(static_cast<IContentIndexer const &>(static_cast<T const &>(*this))->get_Revision(&value));
	return value;
}

template <typename T> String impl_IValueAndLanguage<T>::Language() const
{
	String value = {};
	check(static_cast<IValueAndLanguage const &>(static_cast<T const &>(*this))->get_Language(set(value)));
	return value;
}

template <typename T> void impl_IValueAndLanguage<T>::Language(String const & value) const
{
	check(static_cast<IValueAndLanguage const &>(static_cast<T const &>(*this))->put_Language(get(value)));
}

template <typename T> template <unsigned S0> void impl_IValueAndLanguage<T>::Language(wchar_t const (&value)[S0]) const
{
	check(static_cast<IValueAndLanguage const &>(static_cast<T const &>(*this))->put_Language(StringReference(value)));
}

template <typename T> IInspectable impl_IValueAndLanguage<T>::Value() const
{
	IInspectable value = {};
	check(static_cast<IValueAndLanguage const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> void impl_IValueAndLanguage<T>::Value(IInspectable const & value) const
{
	check(static_cast<IValueAndLanguage const &>(static_cast<T const &>(*this))->put_Value(get(value)));
}

template <typename T> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(String const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder, String const & searchFilterLanguage) const
{
	Windows::Storage::Search::ContentIndexerQuery query(nullptr);
	check(static_cast<IContentIndexerQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateQueryWithSortOrderAndLanguage(get(searchFilter), get(propertiesToRetrieve), get(sortOrder), get(searchFilterLanguage), set(query)));
	return query;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(wchar_t const (&searchFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder, wchar_t const (&searchFilterLanguage)[S1]) const
{
	Windows::Storage::Search::ContentIndexerQuery query(nullptr);
	check(static_cast<IContentIndexerQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateQueryWithSortOrderAndLanguage(StringReference(searchFilter), get(propertiesToRetrieve), get(sortOrder), StringReference(searchFilterLanguage), set(query)));
	return query;
}

template <typename T> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(String const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder) const
{
	Windows::Storage::Search::ContentIndexerQuery query(nullptr);
	check(static_cast<IContentIndexerQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateQueryWithSortOrder(get(searchFilter), get(propertiesToRetrieve), get(sortOrder), set(query)));
	return query;
}

template <typename T> template <unsigned S0> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(wchar_t const (&searchFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<Modern::Windows::Storage::Search::SortEntry> const & sortOrder) const
{
	Windows::Storage::Search::ContentIndexerQuery query(nullptr);
	check(static_cast<IContentIndexerQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateQueryWithSortOrder(StringReference(searchFilter), get(propertiesToRetrieve), get(sortOrder), set(query)));
	return query;
}

template <typename T> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(String const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Storage::Search::ContentIndexerQuery query(nullptr);
	check(static_cast<IContentIndexerQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateQuery(get(searchFilter), get(propertiesToRetrieve), set(query)));
	return query;
}

template <typename T> template <unsigned S0> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(wchar_t const (&searchFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Storage::Search::ContentIndexerQuery query(nullptr);
	check(static_cast<IContentIndexerQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateQuery(StringReference(searchFilter), get(propertiesToRetrieve), set(query)));
	return query;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IContentIndexerQuery<T>::GetCountAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation = {};
	check(static_cast<IContentIndexerQuery const &>(static_cast<T const &>(*this))->abi_GetCountAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> impl_IContentIndexerQuery<T>::GetPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> operation = {};
	check(static_cast<IContentIndexerQuery const &>(static_cast<T const &>(*this))->abi_GetPropertiesAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> impl_IContentIndexerQuery<T>::GetPropertiesAsync(unsigned const startIndex, unsigned const maxItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> operation = {};
	check(static_cast<IContentIndexerQuery const &>(static_cast<T const &>(*this))->abi_GetPropertiesRangeAsync(startIndex, maxItems, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> impl_IContentIndexerQuery<T>::GetAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> operation = {};
	check(static_cast<IContentIndexerQuery const &>(static_cast<T const &>(*this))->abi_GetAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> impl_IContentIndexerQuery<T>::GetAsync(unsigned const startIndex, unsigned const maxItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> operation = {};
	check(static_cast<IContentIndexerQuery const &>(static_cast<T const &>(*this))->abi_GetRangeAsync(startIndex, maxItems, set(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageFolder impl_IContentIndexerQuery<T>::QueryFolder() const
{
	Windows::Storage::StorageFolder value(nullptr);
	check(static_cast<IContentIndexerQuery const &>(static_cast<T const &>(*this))->get_QueryFolder(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQueryOptions<T>::FileTypeFilter() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->get_FileTypeFilter(set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::FolderDepth impl_IQueryOptions<T>::FolderDepth() const
{
	Windows::Storage::Search::FolderDepth value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->get_FolderDepth(&value));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::FolderDepth(Windows::Storage::Search::FolderDepth const value) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->put_FolderDepth(value));
}

template <typename T> String impl_IQueryOptions<T>::ApplicationSearchFilter() const
{
	String value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->get_ApplicationSearchFilter(set(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::ApplicationSearchFilter(String const & value) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->put_ApplicationSearchFilter(get(value)));
}

template <typename T> template <unsigned S0> void impl_IQueryOptions<T>::ApplicationSearchFilter(wchar_t const (&value)[S0]) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->put_ApplicationSearchFilter(StringReference(value)));
}

template <typename T> String impl_IQueryOptions<T>::UserSearchFilter() const
{
	String value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->get_UserSearchFilter(set(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::UserSearchFilter(String const & value) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->put_UserSearchFilter(get(value)));
}

template <typename T> template <unsigned S0> void impl_IQueryOptions<T>::UserSearchFilter(wchar_t const (&value)[S0]) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->put_UserSearchFilter(StringReference(value)));
}

template <typename T> String impl_IQueryOptions<T>::Language() const
{
	String value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->get_Language(set(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::Language(String const & value) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->put_Language(get(value)));
}

template <typename T> template <unsigned S0> void impl_IQueryOptions<T>::Language(wchar_t const (&value)[S0]) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->put_Language(StringReference(value)));
}

template <typename T> Windows::Storage::Search::IndexerOption impl_IQueryOptions<T>::IndexerOption() const
{
	Windows::Storage::Search::IndexerOption value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->get_IndexerOption(&value));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::IndexerOption(Windows::Storage::Search::IndexerOption const value) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->put_IndexerOption(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Modern::Windows::Storage::Search::SortEntry> impl_IQueryOptions<T>::SortOrder() const
{
	Windows::Foundation::Collections::IVector<Modern::Windows::Storage::Search::SortEntry> value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->get_SortOrder(set(value)));
	return value;
}

template <typename T> String impl_IQueryOptions<T>::GroupPropertyName() const
{
	String value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->get_GroupPropertyName(set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::DateStackOption impl_IQueryOptions<T>::DateStackOption() const
{
	Windows::Storage::Search::DateStackOption value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->get_DateStackOption(&value));
	return value;
}

template <typename T> String impl_IQueryOptions<T>::SaveToString() const
{
	String value = {};
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->abi_SaveToString(set(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::LoadFromString(String const & value) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->abi_LoadFromString(get(value)));
}

template <typename T> template <unsigned S0> void impl_IQueryOptions<T>::LoadFromString(wchar_t const (&value)[S0]) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->abi_LoadFromString(StringReference(value)));
}

template <typename T> void impl_IQueryOptions<T>::SetThumbnailPrefetch(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize, Windows::Storage::FileProperties::ThumbnailOptions const options) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->abi_SetThumbnailPrefetch(mode, requestedSize, options));
}

template <typename T> void impl_IQueryOptions<T>::SetPropertyPrefetch(Windows::Storage::FileProperties::PropertyPrefetchOptions const options, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	check(static_cast<IQueryOptions const &>(static_cast<T const &>(*this))->abi_SetPropertyPrefetch(options, get(propertiesToRetrieve)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQueryOptionsWithProviderFilter<T>::StorageProviderIdFilter() const
{
	Windows::Foundation::Collections::IVector<String> value = {};
	check(static_cast<IQueryOptionsWithProviderFilter const &>(static_cast<T const &>(*this))->get_StorageProviderIdFilter(set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::QueryOptions impl_IQueryOptionsFactory<T>::CreateCommonFileQuery(Windows::Storage::Search::CommonFileQuery const query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter) const
{
	Windows::Storage::Search::QueryOptions queryOptions(nullptr);
	check(static_cast<IQueryOptionsFactory const &>(static_cast<T const &>(*this))->abi_CreateCommonFileQuery(query, get(fileTypeFilter), set(queryOptions)));
	return queryOptions;
}

template <typename T> Windows::Storage::Search::QueryOptions impl_IQueryOptionsFactory<T>::CreateCommonFolderQuery(Windows::Storage::Search::CommonFolderQuery const query) const
{
	Windows::Storage::Search::QueryOptions queryOptions(nullptr);
	check(static_cast<IQueryOptionsFactory const &>(static_cast<T const &>(*this))->abi_CreateCommonFolderQuery(query, set(queryOptions)));
	return queryOptions;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IStorageQueryResultBase<T>::GetItemCountAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation = {};
	check(static_cast<IStorageQueryResultBase const &>(static_cast<T const &>(*this))->abi_GetItemCountAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageFolder impl_IStorageQueryResultBase<T>::Folder() const
{
	Windows::Storage::StorageFolder container(nullptr);
	check(static_cast<IStorageQueryResultBase const &>(static_cast<T const &>(*this))->get_Folder(set(container)));
	return container;
}

template <typename T> EventRegistrationToken impl_IStorageQueryResultBase<T>::ContentsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & handler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IStorageQueryResultBase const &>(static_cast<T const &>(*this))->add_ContentsChanged(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IStorageQueryResultBase<T>::ContentsChanged(F handler) const
{
	return ContentsChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable>(handler));
}

template <typename T> void impl_IStorageQueryResultBase<T>::ContentsChanged(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IStorageQueryResultBase const &>(static_cast<T const &>(*this))->remove_ContentsChanged(eventCookie));
}

template <typename T> EventRegistrationToken impl_IStorageQueryResultBase<T>::OptionsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & changedHandler) const
{
	EventRegistrationToken eventCookie = {};
	check(static_cast<IStorageQueryResultBase const &>(static_cast<T const &>(*this))->add_OptionsChanged(get(changedHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IStorageQueryResultBase<T>::OptionsChanged(F changedHandler) const
{
	return OptionsChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable>(changedHandler));
}

template <typename T> void impl_IStorageQueryResultBase<T>::OptionsChanged(EventRegistrationToken const eventCookie) const
{
	check(static_cast<IStorageQueryResultBase const &>(static_cast<T const &>(*this))->remove_OptionsChanged(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IStorageQueryResultBase<T>::FindStartIndexAsync(IInspectable const & value) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation = {};
	check(static_cast<IStorageQueryResultBase const &>(static_cast<T const &>(*this))->abi_FindStartIndexAsync(get(value), set(operation)));
	return operation;
}

template <typename T> Windows::Storage::Search::QueryOptions impl_IStorageQueryResultBase<T>::GetCurrentQueryOptions() const
{
	Windows::Storage::Search::QueryOptions value(nullptr);
	check(static_cast<IStorageQueryResultBase const &>(static_cast<T const &>(*this))->abi_GetCurrentQueryOptions(set(value)));
	return value;
}

template <typename T> void impl_IStorageQueryResultBase<T>::ApplyNewQueryOptions(Windows::Storage::Search::QueryOptions const & newQueryOptions) const
{
	check(static_cast<IStorageQueryResultBase const &>(static_cast<T const &>(*this))->abi_ApplyNewQueryOptions(get(newQueryOptions)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFileQueryResult<T>::GetFilesAsync(unsigned const startIndex, unsigned const maxNumberOfItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation = {};
	check(static_cast<IStorageFileQueryResult const &>(static_cast<T const &>(*this))->abi_GetFilesAsync(startIndex, maxNumberOfItems, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFileQueryResult<T>::GetFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation = {};
	check(static_cast<IStorageFileQueryResult const &>(static_cast<T const &>(*this))->abi_GetFilesAsyncDefaultStartAndCount(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment>> impl_IStorageFileQueryResult2<T>::GetMatchingPropertiesWithRanges(Windows::Storage::StorageFile const & file) const
{
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVectorView<Modern::Windows::Data::Text::TextSegment>> result = {};
	check(static_cast<IStorageFileQueryResult2 const &>(static_cast<T const &>(*this))->abi_GetMatchingPropertiesWithRanges(get(file), set(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryResult<T>::GetFoldersAsync(unsigned const startIndex, unsigned const maxNumberOfItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation = {};
	check(static_cast<IStorageFolderQueryResult const &>(static_cast<T const &>(*this))->abi_GetFoldersAsync(startIndex, maxNumberOfItems, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryResult<T>::GetFoldersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation = {};
	check(static_cast<IStorageFolderQueryResult const &>(static_cast<T const &>(*this))->abi_GetFoldersAsyncDefaultStartAndCount(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageItemQueryResult<T>::GetItemsAsync(unsigned const startIndex, unsigned const maxNumberOfItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation = {};
	check(static_cast<IStorageItemQueryResult const &>(static_cast<T const &>(*this))->abi_GetItemsAsync(startIndex, maxNumberOfItems, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageItemQueryResult<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation = {};
	check(static_cast<IStorageItemQueryResult const &>(static_cast<T const &>(*this))->abi_GetItemsAsyncDefaultStartAndCount(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Search::IndexedState> impl_IStorageFolderQueryOperations<T>::GetIndexedStateAsync() const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Search::IndexedState> operation = {};
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_GetIndexedStateAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IStorageFolderQueryOperations<T>::CreateFileQuery() const
{
	Windows::Storage::Search::StorageFileQueryResult value(nullptr);
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateFileQueryOverloadDefault(set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IStorageFolderQueryOperations<T>::CreateFileQuery(Windows::Storage::Search::CommonFileQuery const query) const
{
	Windows::Storage::Search::StorageFileQueryResult value(nullptr);
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateFileQuery(query, set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IStorageFolderQueryOperations<T>::CreateFileQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	Windows::Storage::Search::StorageFileQueryResult value(nullptr);
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateFileQueryWithOptions(get(queryOptions), set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFolderQueryResult impl_IStorageFolderQueryOperations<T>::CreateFolderQuery() const
{
	Windows::Storage::Search::StorageFolderQueryResult value(nullptr);
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateFolderQueryOverloadDefault(set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFolderQueryResult impl_IStorageFolderQueryOperations<T>::CreateFolderQuery(Windows::Storage::Search::CommonFolderQuery const query) const
{
	Windows::Storage::Search::StorageFolderQueryResult value(nullptr);
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateFolderQuery(query, set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFolderQueryResult impl_IStorageFolderQueryOperations<T>::CreateFolderQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	Windows::Storage::Search::StorageFolderQueryResult value(nullptr);
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateFolderQueryWithOptions(get(queryOptions), set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageItemQueryResult impl_IStorageFolderQueryOperations<T>::CreateItemQuery() const
{
	Windows::Storage::Search::StorageItemQueryResult value(nullptr);
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateItemQuery(set(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageItemQueryResult impl_IStorageFolderQueryOperations<T>::CreateItemQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	Windows::Storage::Search::StorageItemQueryResult value(nullptr);
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_CreateItemQueryWithOptions(get(queryOptions), set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFolderQueryOperations<T>::GetFilesAsync(Windows::Storage::Search::CommonFileQuery const query, unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation = {};
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_GetFilesAsync(query, startIndex, maxItemsToRetrieve, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFolderQueryOperations<T>::GetFilesAsync(Windows::Storage::Search::CommonFileQuery const query) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation = {};
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_GetFilesAsyncOverloadDefaultStartAndCount(query, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryOperations<T>::GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery const query, unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation = {};
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_GetFoldersAsync(query, startIndex, maxItemsToRetrieve, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryOperations<T>::GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery const query) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation = {};
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_GetFoldersAsyncOverloadDefaultStartAndCount(query, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageFolderQueryOperations<T>::GetItemsAsync(unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation = {};
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_GetItemsAsync(startIndex, maxItemsToRetrieve, set(operation)));
	return operation;
}

template <typename T> bool impl_IStorageFolderQueryOperations<T>::AreQueryOptionsSupported(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	bool value = {};
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_AreQueryOptionsSupported(get(queryOptions), BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IStorageFolderQueryOperations<T>::IsCommonFolderQuerySupported(Windows::Storage::Search::CommonFolderQuery const query) const
{
	bool value = {};
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_IsCommonFolderQuerySupported(query, BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IStorageFolderQueryOperations<T>::IsCommonFileQuerySupported(Windows::Storage::Search::CommonFileQuery const query) const
{
	bool value = {};
	check(static_cast<IStorageFolderQueryOperations const &>(static_cast<T const &>(*this))->abi_IsCommonFileQuerySupported(query, BoolProxy(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

template <typename T> unsigned impl_IDataReader<T>::UnconsumedBufferLength() const
{
	unsigned value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->get_UnconsumedBufferLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::UnicodeEncoding impl_IDataReader<T>::UnicodeEncoding() const
{
	Windows::Storage::Streams::UnicodeEncoding value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->get_UnicodeEncoding(&value));
	return value;
}

template <typename T> void impl_IDataReader<T>::UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding const value) const
{
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->put_UnicodeEncoding(value));
}

template <typename T> Windows::Storage::Streams::ByteOrder impl_IDataReader<T>::ByteOrder() const
{
	Windows::Storage::Streams::ByteOrder value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->get_ByteOrder(&value));
	return value;
}

template <typename T> void impl_IDataReader<T>::ByteOrder(Windows::Storage::Streams::ByteOrder const value) const
{
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->put_ByteOrder(value));
}

template <typename T> Windows::Storage::Streams::InputStreamOptions impl_IDataReader<T>::InputStreamOptions() const
{
	Windows::Storage::Streams::InputStreamOptions value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->get_InputStreamOptions(&value));
	return value;
}

template <typename T> void impl_IDataReader<T>::InputStreamOptions(Windows::Storage::Streams::InputStreamOptions const value) const
{
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->put_InputStreamOptions(value));
}

template <typename T> byte impl_IDataReader<T>::ReadByte() const
{
	byte value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadByte(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataReader<T>::ReadBuffer(unsigned const length) const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadBuffer(length, set(buffer)));
	return buffer;
}

template <typename T> bool impl_IDataReader<T>::ReadBoolean() const
{
	bool value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadBoolean(BoolProxy(value)));
	return value;
}

template <typename T> GUID impl_IDataReader<T>::ReadGuid() const
{
	GUID value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadGuid(&value));
	return value;
}

template <typename T> short impl_IDataReader<T>::ReadInt16() const
{
	short value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadInt16(&value));
	return value;
}

template <typename T> int impl_IDataReader<T>::ReadInt32() const
{
	int value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadInt32(&value));
	return value;
}

template <typename T> long long impl_IDataReader<T>::ReadInt64() const
{
	long long value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadInt64(&value));
	return value;
}

template <typename T> unsigned short impl_IDataReader<T>::ReadUInt16() const
{
	unsigned short value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadUInt16(&value));
	return value;
}

template <typename T> unsigned impl_IDataReader<T>::ReadUInt32() const
{
	unsigned value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadUInt32(&value));
	return value;
}

template <typename T> unsigned long long impl_IDataReader<T>::ReadUInt64() const
{
	unsigned long long value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadUInt64(&value));
	return value;
}

template <typename T> float impl_IDataReader<T>::ReadSingle() const
{
	float value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadSingle(&value));
	return value;
}

template <typename T> double impl_IDataReader<T>::ReadDouble() const
{
	double value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadDouble(&value));
	return value;
}

template <typename T> String impl_IDataReader<T>::ReadString(unsigned const codeUnitCount) const
{
	String value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadString(codeUnitCount, set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IDataReader<T>::ReadDateTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadDateTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IDataReader<T>::ReadTimeSpan() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_ReadTimeSpan(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::DataReaderLoadOperation impl_IDataReader<T>::LoadAsync(unsigned const count) const
{
	Windows::Storage::Streams::DataReaderLoadOperation operation(nullptr);
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_LoadAsync(count, set(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataReader<T>::DetachBuffer() const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_DetachBuffer(set(buffer)));
	return buffer;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IDataReader<T>::DetachStream() const
{
	Windows::Storage::Streams::IInputStream stream = {};
	check(static_cast<IDataReader const &>(static_cast<T const &>(*this))->abi_DetachStream(set(stream)));
	return stream;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IDataReaderFactory<T>::CreateDataReader(Windows::Storage::Streams::IInputStream const & inputStream) const
{
	Windows::Storage::Streams::DataReader dataReader(nullptr);
	check(static_cast<IDataReaderFactory const &>(static_cast<T const &>(*this))->abi_CreateDataReader(get(inputStream), set(dataReader)));
	return dataReader;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IDataReaderStatics<T>::FromBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Storage::Streams::DataReader dataReader(nullptr);
	check(static_cast<IDataReaderStatics const &>(static_cast<T const &>(*this))->abi_FromBuffer(get(buffer), set(dataReader)));
	return dataReader;
}

template <typename T> unsigned impl_IDataWriter<T>::UnstoredBufferLength() const
{
	unsigned value = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->get_UnstoredBufferLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::UnicodeEncoding impl_IDataWriter<T>::UnicodeEncoding() const
{
	Windows::Storage::Streams::UnicodeEncoding value = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->get_UnicodeEncoding(&value));
	return value;
}

template <typename T> void impl_IDataWriter<T>::UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->put_UnicodeEncoding(value));
}

template <typename T> Windows::Storage::Streams::ByteOrder impl_IDataWriter<T>::ByteOrder() const
{
	Windows::Storage::Streams::ByteOrder value = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->get_ByteOrder(&value));
	return value;
}

template <typename T> void impl_IDataWriter<T>::ByteOrder(Windows::Storage::Streams::ByteOrder const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->put_ByteOrder(value));
}

template <typename T> void impl_IDataWriter<T>::WriteByte(byte const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteByte(value));
}

template <typename T> void impl_IDataWriter<T>::WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteBuffer(get(buffer)));
}

template <typename T> void impl_IDataWriter<T>::WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer, unsigned const start, unsigned const count) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteBufferRange(get(buffer), start, count));
}

template <typename T> void impl_IDataWriter<T>::WriteBoolean(bool const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteBoolean(value));
}

template <typename T> void impl_IDataWriter<T>::WriteGuid(GUID const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteGuid(value));
}

template <typename T> void impl_IDataWriter<T>::WriteInt16(short const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteInt16(value));
}

template <typename T> void impl_IDataWriter<T>::WriteInt32(int const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteInt32(value));
}

template <typename T> void impl_IDataWriter<T>::WriteInt64(long long const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteInt64(value));
}

template <typename T> void impl_IDataWriter<T>::WriteUInt16(unsigned short const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteUInt16(value));
}

template <typename T> void impl_IDataWriter<T>::WriteUInt32(unsigned const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteUInt32(value));
}

template <typename T> void impl_IDataWriter<T>::WriteUInt64(unsigned long long const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteUInt64(value));
}

template <typename T> void impl_IDataWriter<T>::WriteSingle(float const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteSingle(value));
}

template <typename T> void impl_IDataWriter<T>::WriteDouble(double const value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteDouble(value));
}

template <typename T> void impl_IDataWriter<T>::WriteDateTime(Windows::Foundation::DateTime const & value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteDateTime(value));
}

template <typename T> void impl_IDataWriter<T>::WriteTimeSpan(Windows::Foundation::TimeSpan const & value) const
{
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteTimeSpan(value));
}

template <typename T> unsigned impl_IDataWriter<T>::WriteString(String const & value) const
{
	unsigned codeUnitCount = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteString(get(value), &codeUnitCount));
	return codeUnitCount;
}

template <typename T> template <unsigned S0> unsigned impl_IDataWriter<T>::WriteString(wchar_t const (&value)[S0]) const
{
	unsigned codeUnitCount = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_WriteString(StringReference(value), &codeUnitCount));
	return codeUnitCount;
}

template <typename T> unsigned impl_IDataWriter<T>::MeasureString(String const & value) const
{
	unsigned codeUnitCount = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_MeasureString(get(value), &codeUnitCount));
	return codeUnitCount;
}

template <typename T> template <unsigned S0> unsigned impl_IDataWriter<T>::MeasureString(wchar_t const (&value)[S0]) const
{
	unsigned codeUnitCount = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_MeasureString(StringReference(value), &codeUnitCount));
	return codeUnitCount;
}

template <typename T> Windows::Storage::Streams::DataWriterStoreOperation impl_IDataWriter<T>::StoreAsync() const
{
	Windows::Storage::Streams::DataWriterStoreOperation operation(nullptr);
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_StoreAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IDataWriter<T>::FlushAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_FlushAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataWriter<T>::DetachBuffer() const
{
	Windows::Storage::Streams::IBuffer buffer = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_DetachBuffer(set(buffer)));
	return buffer;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IDataWriter<T>::DetachStream() const
{
	Windows::Storage::Streams::IOutputStream outputStream = {};
	check(static_cast<IDataWriter const &>(static_cast<T const &>(*this))->abi_DetachStream(set(outputStream)));
	return outputStream;
}

template <typename T> Windows::Storage::Streams::DataWriter impl_IDataWriterFactory<T>::CreateDataWriter(Windows::Storage::Streams::IOutputStream const & outputStream) const
{
	Windows::Storage::Streams::DataWriter dataWriter(nullptr);
	check(static_cast<IDataWriterFactory const &>(static_cast<T const &>(*this))->abi_CreateDataWriter(get(outputStream), set(dataWriter)));
	return dataWriter;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IRandomAccessStreamStatics<T>::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation = {};
	check(static_cast<IRandomAccessStreamStatics const &>(static_cast<T const &>(*this))->abi_CopyAsync(get(source), get(destination), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IRandomAccessStreamStatics<T>::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long const bytesToCopy) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation = {};
	check(static_cast<IRandomAccessStreamStatics const &>(static_cast<T const &>(*this))->abi_CopySizeAsync(get(source), get(destination), bytesToCopy, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IRandomAccessStreamStatics<T>::CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation = {};
	check(static_cast<IRandomAccessStreamStatics const &>(static_cast<T const &>(*this))->abi_CopyAndCloseAsync(get(source), get(destination), set(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::Buffer impl_IBufferFactory<T>::Create(unsigned const capacity) const
{
	Windows::Storage::Streams::Buffer value(nullptr);
	check(static_cast<IBufferFactory const &>(static_cast<T const &>(*this))->abi_Create(capacity, set(value)));
	return value;
}

template <typename T> unsigned impl_IBuffer<T>::Capacity() const
{
	unsigned value = {};
	check(static_cast<IBuffer const &>(static_cast<T const &>(*this))->get_Capacity(&value));
	return value;
}

template <typename T> unsigned impl_IBuffer<T>::Length() const
{
	unsigned value = {};
	check(static_cast<IBuffer const &>(static_cast<T const &>(*this))->get_Length(&value));
	return value;
}

template <typename T> void impl_IBuffer<T>::Length(unsigned const value) const
{
	check(static_cast<IBuffer const &>(static_cast<T const &>(*this))->put_Length(value));
}

template <typename T> String impl_IContentTypeProvider<T>::ContentType() const
{
	String value = {};
	check(static_cast<IContentTypeProvider const &>(static_cast<T const &>(*this))->get_ContentType(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IRandomAccessStreamReference<T>::OpenReadAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> operation = {};
	check(static_cast<IRandomAccessStreamReference const &>(static_cast<T const &>(*this))->abi_OpenReadAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> impl_IInputStreamReference<T>::OpenSequentialReadAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> operation = {};
	check(static_cast<IInputStreamReference const &>(static_cast<T const &>(*this))->abi_OpenSequentialReadAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IRandomAccessStreamReferenceStatics<T>::CreateFromFile(Windows::Storage::IStorageFile const & file) const
{
	Windows::Storage::Streams::RandomAccessStreamReference streamReference(nullptr);
	check(static_cast<IRandomAccessStreamReferenceStatics const &>(static_cast<T const &>(*this))->abi_CreateFromFile(get(file), set(streamReference)));
	return streamReference;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IRandomAccessStreamReferenceStatics<T>::CreateFromUri(Windows::Foundation::Uri const & uri) const
{
	Windows::Storage::Streams::RandomAccessStreamReference streamReference(nullptr);
	check(static_cast<IRandomAccessStreamReferenceStatics const &>(static_cast<T const &>(*this))->abi_CreateFromUri(get(uri), set(streamReference)));
	return streamReference;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IRandomAccessStreamReferenceStatics<T>::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Storage::Streams::RandomAccessStreamReference streamReference(nullptr);
	check(static_cast<IRandomAccessStreamReferenceStatics const &>(static_cast<T const &>(*this))->abi_CreateFromStream(get(stream), set(streamReference)));
	return streamReference;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned> impl_IInputStream<T>::ReadAsync(Windows::Storage::Streams::IBuffer const & buffer, unsigned const count, Windows::Storage::Streams::InputStreamOptions const options) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned> operation = {};
	check(static_cast<IInputStream const &>(static_cast<T const &>(*this))->abi_ReadAsync(get(buffer), count, options, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> impl_IOutputStream<T>::WriteAsync(Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> operation = {};
	check(static_cast<IOutputStream const &>(static_cast<T const &>(*this))->abi_WriteAsync(get(buffer), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IOutputStream<T>::FlushAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IOutputStream const &>(static_cast<T const &>(*this))->abi_FlushAsync(set(operation)));
	return operation;
}

template <typename T> unsigned long long impl_IRandomAccessStream<T>::Size() const
{
	unsigned long long value = {};
	check(static_cast<IRandomAccessStream const &>(static_cast<T const &>(*this))->get_Size(&value));
	return value;
}

template <typename T> void impl_IRandomAccessStream<T>::Size(unsigned long long const value) const
{
	check(static_cast<IRandomAccessStream const &>(static_cast<T const &>(*this))->put_Size(value));
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IRandomAccessStream<T>::GetInputStreamAt(unsigned long long const position) const
{
	Windows::Storage::Streams::IInputStream stream = {};
	check(static_cast<IRandomAccessStream const &>(static_cast<T const &>(*this))->abi_GetInputStreamAt(position, set(stream)));
	return stream;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IRandomAccessStream<T>::GetOutputStreamAt(unsigned long long const position) const
{
	Windows::Storage::Streams::IOutputStream stream = {};
	check(static_cast<IRandomAccessStream const &>(static_cast<T const &>(*this))->abi_GetOutputStreamAt(position, set(stream)));
	return stream;
}

template <typename T> unsigned long long impl_IRandomAccessStream<T>::Position() const
{
	unsigned long long value = {};
	check(static_cast<IRandomAccessStream const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> void impl_IRandomAccessStream<T>::Seek(unsigned long long const position) const
{
	check(static_cast<IRandomAccessStream const &>(static_cast<T const &>(*this))->abi_Seek(position));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IRandomAccessStream<T>::CloneStream() const
{
	Windows::Storage::Streams::IRandomAccessStream stream = {};
	check(static_cast<IRandomAccessStream const &>(static_cast<T const &>(*this))->abi_CloneStream(set(stream)));
	return stream;
}

template <typename T> bool impl_IRandomAccessStream<T>::CanRead() const
{
	bool value = {};
	check(static_cast<IRandomAccessStream const &>(static_cast<T const &>(*this))->get_CanRead(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IRandomAccessStream<T>::CanWrite() const
{
	bool value = {};
	check(static_cast<IRandomAccessStream const &>(static_cast<T const &>(*this))->get_CanWrite(BoolProxy(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace System {

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::Point> impl_ILauncherUIOptions<T>::InvocationPoint() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::Point> value = {};
	check(static_cast<ILauncherUIOptions const &>(static_cast<T const &>(*this))->get_InvocationPoint(set(value)));
	return value;
}

template <typename T> void impl_ILauncherUIOptions<T>::InvocationPoint(Windows::Foundation::IReference<Modern::Windows::Foundation::Point> const & value) const
{
	check(static_cast<ILauncherUIOptions const &>(static_cast<T const &>(*this))->put_InvocationPoint(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::Rect> impl_ILauncherUIOptions<T>::SelectionRect() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::Rect> value = {};
	check(static_cast<ILauncherUIOptions const &>(static_cast<T const &>(*this))->get_SelectionRect(set(value)));
	return value;
}

template <typename T> void impl_ILauncherUIOptions<T>::SelectionRect(Windows::Foundation::IReference<Modern::Windows::Foundation::Rect> const & value) const
{
	check(static_cast<ILauncherUIOptions const &>(static_cast<T const &>(*this))->put_SelectionRect(get(value)));
}

template <typename T> Windows::UI::Popups::Placement impl_ILauncherUIOptions<T>::PreferredPlacement() const
{
	Windows::UI::Popups::Placement value = {};
	check(static_cast<ILauncherUIOptions const &>(static_cast<T const &>(*this))->get_PreferredPlacement(&value));
	return value;
}

template <typename T> void impl_ILauncherUIOptions<T>::PreferredPlacement(Windows::UI::Popups::Placement const value) const
{
	check(static_cast<ILauncherUIOptions const &>(static_cast<T const &>(*this))->put_PreferredPlacement(value));
}

template <typename T> bool impl_ILauncherOptions<T>::TreatAsUntrusted() const
{
	bool value = {};
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->get_TreatAsUntrusted(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::TreatAsUntrusted(bool const value) const
{
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->put_TreatAsUntrusted(value));
}

template <typename T> bool impl_ILauncherOptions<T>::DisplayApplicationPicker() const
{
	bool value = {};
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->get_DisplayApplicationPicker(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::DisplayApplicationPicker(bool const value) const
{
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->put_DisplayApplicationPicker(value));
}

template <typename T> Windows::System::LauncherUIOptions impl_ILauncherOptions<T>::UI() const
{
	Windows::System::LauncherUIOptions value(nullptr);
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->get_UI(set(value)));
	return value;
}

template <typename T> String impl_ILauncherOptions<T>::PreferredApplicationPackageFamilyName() const
{
	String value = {};
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->get_PreferredApplicationPackageFamilyName(set(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::PreferredApplicationPackageFamilyName(String const & value) const
{
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->put_PreferredApplicationPackageFamilyName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ILauncherOptions<T>::PreferredApplicationPackageFamilyName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->put_PreferredApplicationPackageFamilyName(StringReference(value)));
}

template <typename T> String impl_ILauncherOptions<T>::PreferredApplicationDisplayName() const
{
	String value = {};
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->get_PreferredApplicationDisplayName(set(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::PreferredApplicationDisplayName(String const & value) const
{
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->put_PreferredApplicationDisplayName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ILauncherOptions<T>::PreferredApplicationDisplayName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->put_PreferredApplicationDisplayName(StringReference(value)));
}

template <typename T> Windows::Foundation::Uri impl_ILauncherOptions<T>::FallbackUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->get_FallbackUri(set(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::FallbackUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->put_FallbackUri(get(value)));
}

template <typename T> String impl_ILauncherOptions<T>::ContentType() const
{
	String value = {};
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->get_ContentType(set(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::ContentType(String const & value) const
{
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->put_ContentType(get(value)));
}

template <typename T> template <unsigned S0> void impl_ILauncherOptions<T>::ContentType(wchar_t const (&value)[S0]) const
{
	check(static_cast<ILauncherOptions const &>(static_cast<T const &>(*this))->put_ContentType(StringReference(value)));
}

template <typename T> Windows::UI::ViewManagement::ViewSizePreference impl_ILauncherViewOptions<T>::DesiredRemainingView() const
{
	Windows::UI::ViewManagement::ViewSizePreference value = {};
	check(static_cast<ILauncherViewOptions const &>(static_cast<T const &>(*this))->get_DesiredRemainingView(&value));
	return value;
}

template <typename T> void impl_ILauncherViewOptions<T>::DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference const value) const
{
	check(static_cast<ILauncherViewOptions const &>(static_cast<T const &>(*this))->put_DesiredRemainingView(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ILauncherStatics const &>(static_cast<T const &>(*this))->abi_LaunchFileAsync(get(file), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ILauncherStatics const &>(static_cast<T const &>(*this))->abi_LaunchFileWithOptionsAsync(get(file), get(options), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchUriAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ILauncherStatics const &>(static_cast<T const &>(*this))->abi_LaunchUriAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ILauncherStatics const &>(static_cast<T const &>(*this))->abi_LaunchUriWithOptionsAsync(get(uri), get(options), set(operation)));
	return operation;
}

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

template <typename T> void impl_IDisplayRequest<T>::RequestActive() const
{
	check(static_cast<IDisplayRequest const &>(static_cast<T const &>(*this))->abi_RequestActive());
}

template <typename T> void impl_IDisplayRequest<T>::RequestRelease() const
{
	check(static_cast<IDisplayRequest const &>(static_cast<T const &>(*this))->abi_RequestRelease());
}

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

template <typename T> Windows::Storage::Streams::IBuffer impl_IHardwareToken<T>::Id() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IHardwareToken const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHardwareToken<T>::Signature() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IHardwareToken const &>(static_cast<T const &>(*this))->get_Signature(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHardwareToken<T>::Certificate() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IHardwareToken const &>(static_cast<T const &>(*this))->get_Certificate(set(value)));
	return value;
}

template <typename T> Windows::System::Profile::HardwareToken impl_IHardwareIdentificationStatics<T>::GetPackageSpecificToken(Windows::Storage::Streams::IBuffer const & nonce) const
{
	Windows::System::Profile::HardwareToken packageSpecificHardwareToken(nullptr);
	check(static_cast<IHardwareIdentificationStatics const &>(static_cast<T const &>(*this))->abi_GetPackageSpecificToken(get(nonce), set(packageSpecificHardwareToken)));
	return packageSpecificHardwareToken;
}

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

template <typename T> String impl_ISmbiosInformationStatics<T>::SerialNumber() const
{
	String value = {};
	check(static_cast<ISmbiosInformationStatics const &>(static_cast<T const &>(*this))->get_SerialNumber(set(value)));
	return value;
}

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

template <typename T> bool impl_IInteractiveSessionStatics<T>::IsRemote() const
{
	bool value = {};
	check(static_cast<IInteractiveSessionStatics const &>(static_cast<T const &>(*this))->get_IsRemote(BoolProxy(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

template <typename T> void impl_ITimerElapsedHandler<T>::Invoke(Windows::System::Threading::ThreadPoolTimer const & timer) const
{
	check(static_cast<ITimerElapsedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(timer)));
}

template <typename T> void impl_ITimerDestroyedHandler<T>::Invoke(Windows::System::Threading::ThreadPoolTimer const & timer) const
{
	check(static_cast<ITimerDestroyedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(timer)));
}

template <typename T> void impl_IWorkItemHandler<T>::Invoke(Windows::Foundation::IAsyncAction const & operation) const
{
	check(static_cast<IWorkItemHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(operation)));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IThreadPoolStatics const &>(static_cast<T const &>(*this))->abi_RunAsync(get(handler), set(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(F handler) const
{
	return RunAsync(Windows::System::Threading::WorkItemHandler(handler));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IThreadPoolStatics const &>(static_cast<T const &>(*this))->abi_RunWithPriorityAsync(get(handler), priority, set(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(F handler, Windows::System::Threading::WorkItemPriority const priority) const
{
	return RunAsync(Windows::System::Threading::WorkItemHandler(handler), priority);
}

template <typename T> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IThreadPoolStatics const &>(static_cast<T const &>(*this))->abi_RunWithPriorityAndOptionsAsync(get(handler), priority, options, set(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(F handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) const
{
	return RunAsync(Windows::System::Threading::WorkItemHandler(handler), priority, options);
}

template <typename T> Windows::Foundation::TimeSpan impl_IThreadPoolTimer<T>::Period() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IThreadPoolTimer const &>(static_cast<T const &>(*this))->get_Period(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IThreadPoolTimer<T>::Delay() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IThreadPoolTimer const &>(static_cast<T const &>(*this))->get_Delay(&value));
	return value;
}

template <typename T> void impl_IThreadPoolTimer<T>::Cancel() const
{
	check(static_cast<IThreadPoolTimer const &>(static_cast<T const &>(*this))->abi_Cancel());
}

template <typename T> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period) const
{
	Windows::System::Threading::ThreadPoolTimer timer(nullptr);
	check(static_cast<IThreadPoolTimerStatics const &>(static_cast<T const &>(*this))->abi_CreatePeriodicTimer(get(handler), period, set(timer)));
	return timer;
}

template <typename T> template <typename F> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period) const
{
	return CreatePeriodicTimer(Windows::System::Threading::TimerElapsedHandler(handler), period);
}

template <typename T> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay) const
{
	Windows::System::Threading::ThreadPoolTimer timer(nullptr);
	check(static_cast<IThreadPoolTimerStatics const &>(static_cast<T const &>(*this))->abi_CreateTimer(get(handler), delay, set(timer)));
	return timer;
}

template <typename T> template <typename F> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay) const
{
	return CreateTimer(Windows::System::Threading::TimerElapsedHandler(handler), delay);
}

template <typename T> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period, Windows::System::Threading::ITimerDestroyedHandler const & destroyed) const
{
	Windows::System::Threading::ThreadPoolTimer timer(nullptr);
	check(static_cast<IThreadPoolTimerStatics const &>(static_cast<T const &>(*this))->abi_CreatePeriodicTimerWithCompletion(get(handler), period, get(destroyed), set(timer)));
	return timer;
}

template <typename T> template <typename F> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period, F destroyed) const
{
	return CreatePeriodicTimer(Windows::System::Threading::TimerElapsedHandler(handler), period, Windows::System::Threading::TimerDestroyedHandler(destroyed));
}

template <typename T> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay, Windows::System::Threading::ITimerDestroyedHandler const & destroyed) const
{
	Windows::System::Threading::ThreadPoolTimer timer(nullptr);
	check(static_cast<IThreadPoolTimerStatics const &>(static_cast<T const &>(*this))->abi_CreateTimerWithCompletion(get(handler), delay, get(destroyed), set(timer)));
	return timer;
}

template <typename T> template <typename F> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay, F destroyed) const
{
	return CreateTimer(Windows::System::Threading::TimerElapsedHandler(handler), delay, Windows::System::Threading::TimerDestroyedHandler(destroyed));
}

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

template <typename T> void impl_ISignalHandler<T>::Invoke(Windows::System::Threading::Core::SignalNotifier const & signalNotifier, bool const timedOut) const
{
	check(static_cast<ISignalHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(signalNotifier), timedOut));
}

template <typename T> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier(nullptr);
	check(static_cast<ISignalNotifierStatics const &>(static_cast<T const &>(*this))->abi_AttachToEvent(get(name), get(handler), set(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <unsigned S0> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier(nullptr);
	check(static_cast<ISignalNotifierStatics const &>(static_cast<T const &>(*this))->abi_AttachToEvent(StringReference(name), get(handler), set(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(String const & name, F handler) const
{
	return AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler));
}

template <typename T> template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(wchar_t const (&name)[S0], F handler) const
{
	return AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler));
}

template <typename T> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier(nullptr);
	check(static_cast<ISignalNotifierStatics const &>(static_cast<T const &>(*this))->abi_AttachToEventWithTimeout(get(name), get(handler), timeout, set(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <unsigned S0> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier(nullptr);
	check(static_cast<ISignalNotifierStatics const &>(static_cast<T const &>(*this))->abi_AttachToEventWithTimeout(StringReference(name), get(handler), timeout, set(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout) const
{
	return AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

template <typename T> template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout) const
{
	return AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

template <typename T> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier(nullptr);
	check(static_cast<ISignalNotifierStatics const &>(static_cast<T const &>(*this))->abi_AttachToSemaphore(get(name), get(handler), set(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <unsigned S0> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier(nullptr);
	check(static_cast<ISignalNotifierStatics const &>(static_cast<T const &>(*this))->abi_AttachToSemaphore(StringReference(name), get(handler), set(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(String const & name, F handler) const
{
	return AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler));
}

template <typename T> template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(wchar_t const (&name)[S0], F handler) const
{
	return AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler));
}

template <typename T> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier(nullptr);
	check(static_cast<ISignalNotifierStatics const &>(static_cast<T const &>(*this))->abi_AttachToSemaphoreWithTimeout(get(name), get(handler), timeout, set(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <unsigned S0> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier(nullptr);
	check(static_cast<ISignalNotifierStatics const &>(static_cast<T const &>(*this))->abi_AttachToSemaphoreWithTimeout(StringReference(name), get(handler), timeout, set(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout) const
{
	return AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

template <typename T> template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout) const
{
	return AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

template <typename T> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItem(Windows::System::Threading::IWorkItemHandler const & handler) const
{
	Windows::System::Threading::Core::PreallocatedWorkItem workItem(nullptr);
	check(static_cast<IPreallocatedWorkItemFactory const &>(static_cast<T const &>(*this))->abi_CreateWorkItem(get(handler), set(workItem)));
	return workItem;
}

template <typename T> template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItem(F handler) const
{
	return CreateWorkItem(Windows::System::Threading::WorkItemHandler(handler));
}

template <typename T> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItemWithPriority(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority) const
{
	Windows::System::Threading::Core::PreallocatedWorkItem WorkItem(nullptr);
	check(static_cast<IPreallocatedWorkItemFactory const &>(static_cast<T const &>(*this))->abi_CreateWorkItemWithPriority(get(handler), priority, set(WorkItem)));
	return WorkItem;
}

template <typename T> template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItemWithPriority(F handler, Windows::System::Threading::WorkItemPriority const priority) const
{
	return CreateWorkItemWithPriority(Windows::System::Threading::WorkItemHandler(handler), priority);
}

template <typename T> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItemWithPriorityAndOptions(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) const
{
	Windows::System::Threading::Core::PreallocatedWorkItem WorkItem(nullptr);
	check(static_cast<IPreallocatedWorkItemFactory const &>(static_cast<T const &>(*this))->abi_CreateWorkItemWithPriorityAndOptions(get(handler), priority, options, set(WorkItem)));
	return WorkItem;
}

template <typename T> template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItemWithPriorityAndOptions(F handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) const
{
	return CreateWorkItemWithPriorityAndOptions(Windows::System::Threading::WorkItemHandler(handler), priority, options);
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPreallocatedWorkItem<T>::RunAsync() const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IPreallocatedWorkItem const &>(static_cast<T const &>(*this))->abi_RunAsync(set(operation)));
	return operation;
}

template <typename T> void impl_ISignalNotifier<T>::Enable() const
{
	check(static_cast<ISignalNotifier const &>(static_cast<T const &>(*this))->abi_Enable());
}

template <typename T> void impl_ISignalNotifier<T>::Terminate() const
{
	check(static_cast<ISignalNotifier const &>(static_cast<T const &>(*this))->abi_Terminate());
}

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

template <typename T> String impl_IAdvertisingManagerStatics<T>::AdvertisingId() const
{
	String value = {};
	check(static_cast<IAdvertisingManagerStatics const &>(static_cast<T const &>(*this))->get_AdvertisingId(set(value)));
	return value;
}

template <typename T> bool impl_IUserInformationStatics<T>::AccountPictureChangeEnabled() const
{
	bool value = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->get_AccountPictureChangeEnabled(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUserInformationStatics<T>::NameAccessAllowed() const
{
	bool value = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->get_NameAccessAllowed(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Storage::IStorageFile impl_IUserInformationStatics<T>::GetAccountPicture(Windows::System::UserProfile::AccountPictureKind const kind) const
{
	Windows::Storage::IStorageFile storageFile = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_GetAccountPicture(kind, set(storageFile)));
	return storageFile;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> impl_IUserInformationStatics<T>::SetAccountPictureAsync(Windows::Storage::IStorageFile const & image) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_SetAccountPictureAsync(get(image), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> impl_IUserInformationStatics<T>::SetAccountPicturesAsync(Windows::Storage::IStorageFile const & smallImage, Windows::Storage::IStorageFile const & largeImage, Windows::Storage::IStorageFile const & video) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_SetAccountPicturesAsync(get(smallImage), get(largeImage), get(video), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> impl_IUserInformationStatics<T>::SetAccountPictureFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & image) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_SetAccountPictureFromStreamAsync(get(image), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> impl_IUserInformationStatics<T>::SetAccountPicturesFromStreamsAsync(Windows::Storage::Streams::IRandomAccessStream const & smallImage, Windows::Storage::Streams::IRandomAccessStream const & largeImage, Windows::Storage::Streams::IRandomAccessStream const & video) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_SetAccountPicturesFromStreamsAsync(get(smallImage), get(largeImage), get(video), set(operation)));
	return operation;
}

template <typename T> EventRegistrationToken impl_IUserInformationStatics<T>::AccountPictureChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->add_AccountPictureChanged(get(changeHandler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IUserInformationStatics<T>::AccountPictureChanged(F changeHandler) const
{
	return AccountPictureChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

template <typename T> void impl_IUserInformationStatics<T>::AccountPictureChanged(EventRegistrationToken const token) const
{
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->remove_AccountPictureChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetDisplayNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_GetDisplayNameAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetFirstNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_GetFirstNameAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetLastNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_GetLastNameAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetPrincipalNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_GetPrincipalNameAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IUserInformationStatics<T>::GetSessionInitiationProtocolUriAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_GetSessionInitiationProtocolUriAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetDomainNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation = {};
	check(static_cast<IUserInformationStatics const &>(static_cast<T const &>(*this))->abi_GetDomainNameAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Uri impl_ILockScreenStatics<T>::OriginalImageFile() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ILockScreenStatics const &>(static_cast<T const &>(*this))->get_OriginalImageFile(set(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_ILockScreenStatics<T>::GetImageStream() const
{
	Windows::Storage::Streams::IRandomAccessStream value = {};
	check(static_cast<ILockScreenStatics const &>(static_cast<T const &>(*this))->abi_GetImageStream(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILockScreenStatics<T>::SetImageFileAsync(Windows::Storage::IStorageFile const & value) const
{
	Windows::Foundation::IAsyncAction Operation = {};
	check(static_cast<ILockScreenStatics const &>(static_cast<T const &>(*this))->abi_SetImageFileAsync(get(value), set(Operation)));
	return Operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILockScreenStatics<T>::SetImageStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	Windows::Foundation::IAsyncAction Operation = {};
	check(static_cast<ILockScreenStatics const &>(static_cast<T const &>(*this))->abi_SetImageStreamAsync(get(value), set(Operation)));
	return Operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetImageFeedResult> impl_ILockScreenImageFeedStatics<T>::RequestSetImageFeedAsync(Windows::Foundation::Uri const & syndicationFeedUri) const
{
	Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetImageFeedResult> value = {};
	check(static_cast<ILockScreenImageFeedStatics const &>(static_cast<T const &>(*this))->abi_RequestSetImageFeedAsync(get(syndicationFeedUri), set(value)));
	return value;
}

template <typename T> bool impl_ILockScreenImageFeedStatics<T>::TryRemoveImageFeed() const
{
	bool result = {};
	check(static_cast<ILockScreenImageFeedStatics const &>(static_cast<T const &>(*this))->abi_TryRemoveImageFeed(BoolProxy(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGlobalizationPreferencesStatics<T>::Calendars() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IGlobalizationPreferencesStatics const &>(static_cast<T const &>(*this))->get_Calendars(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGlobalizationPreferencesStatics<T>::Clocks() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IGlobalizationPreferencesStatics const &>(static_cast<T const &>(*this))->get_Clocks(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGlobalizationPreferencesStatics<T>::Currencies() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IGlobalizationPreferencesStatics const &>(static_cast<T const &>(*this))->get_Currencies(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGlobalizationPreferencesStatics<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IGlobalizationPreferencesStatics const &>(static_cast<T const &>(*this))->get_Languages(set(value)));
	return value;
}

template <typename T> String impl_IGlobalizationPreferencesStatics<T>::HomeGeographicRegion() const
{
	String value = {};
	check(static_cast<IGlobalizationPreferencesStatics const &>(static_cast<T const &>(*this))->get_HomeGeographicRegion(set(value)));
	return value;
}

template <typename T> Windows::Globalization::DayOfWeek impl_IGlobalizationPreferencesStatics<T>::WeekStartsOn() const
{
	Windows::Globalization::DayOfWeek value = {};
	check(static_cast<IGlobalizationPreferencesStatics const &>(static_cast<T const &>(*this))->get_WeekStartsOn(&value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace UI {

template <typename T> Windows::UI::Color impl_IColorHelperStatics<T>::FromArgb(byte const a, byte const r, byte const g, byte const b) const
{
	Windows::UI::Color returnValue = {};
	check(static_cast<IColorHelperStatics const &>(static_cast<T const &>(*this))->abi_FromArgb(a, r, g, b, &returnValue));
	return returnValue;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::AliceBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_AliceBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::AntiqueWhite() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_AntiqueWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Aqua() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Aqua(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Aquamarine() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Aquamarine(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Azure() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Azure(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Beige() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Beige(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Bisque() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Bisque(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Black() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Black(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::BlanchedAlmond() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_BlanchedAlmond(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Blue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Blue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::BlueViolet() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_BlueViolet(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Brown() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Brown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::BurlyWood() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_BurlyWood(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::CadetBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_CadetBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Chartreuse() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Chartreuse(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Chocolate() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Chocolate(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Coral() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Coral(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::CornflowerBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_CornflowerBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Cornsilk() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Cornsilk(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Crimson() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Crimson(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Cyan() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Cyan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkCyan() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkCyan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkGoldenrod() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkGoldenrod(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkGray() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkKhaki() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkKhaki(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkMagenta() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkMagenta(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkOliveGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkOliveGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkOrange() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkOrange(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkOrchid() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkOrchid(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkRed() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSalmon() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkSalmon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSeaGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkSeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSlateBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkSlateBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSlateGray() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkSlateGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkTurquoise() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkTurquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkViolet() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DarkViolet(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DeepPink() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DeepPink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DeepSkyBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DeepSkyBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DimGray() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DimGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DodgerBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_DodgerBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Firebrick() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Firebrick(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::FloralWhite() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_FloralWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::ForestGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_ForestGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Fuchsia() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Fuchsia(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Gainsboro() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Gainsboro(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::GhostWhite() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_GhostWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Gold() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Gold(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Goldenrod() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Goldenrod(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Gray() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Gray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Green() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Green(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::GreenYellow() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_GreenYellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Honeydew() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Honeydew(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::HotPink() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_HotPink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::IndianRed() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_IndianRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Indigo() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Indigo(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Ivory() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Ivory(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Khaki() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Khaki(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Lavender() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Lavender(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LavenderBlush() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LavenderBlush(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LawnGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LawnGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LemonChiffon() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LemonChiffon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightCoral() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightCoral(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightCyan() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightCyan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightGoldenrodYellow() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightGoldenrodYellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightGray() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightPink() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightPink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSalmon() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightSalmon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSeaGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightSeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSkyBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightSkyBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSlateGray() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightSlateGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSteelBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightSteelBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightYellow() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LightYellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Lime() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Lime(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LimeGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_LimeGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Linen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Linen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Magenta() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Magenta(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Maroon() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Maroon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumAquamarine() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MediumAquamarine(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MediumBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumOrchid() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MediumOrchid(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumPurple() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MediumPurple(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumSeaGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MediumSeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumSlateBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MediumSlateBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumSpringGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MediumSpringGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumTurquoise() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MediumTurquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumVioletRed() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MediumVioletRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MidnightBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MidnightBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MintCream() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MintCream(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MistyRose() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_MistyRose(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Moccasin() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Moccasin(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::NavajoWhite() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_NavajoWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Navy() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Navy(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::OldLace() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_OldLace(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Olive() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Olive(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::OliveDrab() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_OliveDrab(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Orange() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Orange(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::OrangeRed() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_OrangeRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Orchid() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Orchid(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleGoldenrod() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_PaleGoldenrod(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_PaleGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleTurquoise() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_PaleTurquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleVioletRed() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_PaleVioletRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PapayaWhip() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_PapayaWhip(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PeachPuff() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_PeachPuff(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Peru() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Peru(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Pink() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Pink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Plum() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Plum(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PowderBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_PowderBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Purple() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Purple(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Red() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Red(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::RosyBrown() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_RosyBrown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::RoyalBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_RoyalBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SaddleBrown() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_SaddleBrown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Salmon() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Salmon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SandyBrown() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_SandyBrown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SeaGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_SeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SeaShell() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_SeaShell(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Sienna() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Sienna(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Silver() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Silver(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SkyBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_SkyBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SlateBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_SlateBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SlateGray() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_SlateGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Snow() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Snow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SpringGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_SpringGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SteelBlue() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_SteelBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Tan() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Tan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Teal() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Teal(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Thistle() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Thistle(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Tomato() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Tomato(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Transparent() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Transparent(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Turquoise() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Turquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Violet() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Violet(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Wheat() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Wheat(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::White() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_White(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::WhiteSmoke() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_WhiteSmoke(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Yellow() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_Yellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::YellowGreen() const
{
	Windows::UI::Color value = {};
	check(static_cast<IColorsStatics const &>(static_cast<T const &>(*this))->get_YellowGreen(&value));
	return value;
}

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

template <typename T> void impl_IWebAccountProviderCommandInvokedHandler<T>::Invoke(Windows::UI::ApplicationSettings::WebAccountProviderCommand const & command) const
{
	check(static_cast<IWebAccountProviderCommandInvokedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(command)));
}

template <typename T> void impl_IWebAccountCommandInvokedHandler<T>::Invoke(Windows::UI::ApplicationSettings::WebAccountCommand const & command, Windows::UI::ApplicationSettings::WebAccountInvokedArgs const & args) const
{
	check(static_cast<IWebAccountCommandInvokedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(command), get(args)));
}

template <typename T> void impl_ICredentialCommandCredentialDeletedHandler<T>::Invoke(Windows::UI::ApplicationSettings::CredentialCommand const & command) const
{
	check(static_cast<ICredentialCommandCredentialDeletedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(command)));
}

template <typename T> Windows::UI::ApplicationSettings::SettingsCommand impl_ISettingsCommandFactory<T>::Create(IInspectable const & settingsCommandId, String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & handler) const
{
	Windows::UI::ApplicationSettings::SettingsCommand instance(nullptr);
	check(static_cast<ISettingsCommandFactory const &>(static_cast<T const &>(*this))->abi_CreateSettingsCommand(get(settingsCommandId), get(label), get(handler), set(instance)));
	return instance;
}

template <typename T> template <unsigned S0> Windows::UI::ApplicationSettings::SettingsCommand impl_ISettingsCommandFactory<T>::Create(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & handler) const
{
	Windows::UI::ApplicationSettings::SettingsCommand instance(nullptr);
	check(static_cast<ISettingsCommandFactory const &>(static_cast<T const &>(*this))->abi_CreateSettingsCommand(get(settingsCommandId), StringReference(label), get(handler), set(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::ApplicationSettings::SettingsCommand impl_ISettingsCommandFactory<T>::Create(IInspectable const & settingsCommandId, String const & label, F handler) const
{
	return Create(settingsCommandId, label, Windows::UI::Popups::UICommandInvokedHandler(handler));
}

template <typename T> template <unsigned S0, typename F> Windows::UI::ApplicationSettings::SettingsCommand impl_ISettingsCommandFactory<T>::Create(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], F handler) const
{
	return Create(settingsCommandId, label, Windows::UI::Popups::UICommandInvokedHandler(handler));
}

template <typename T> Windows::UI::ApplicationSettings::SettingsCommand impl_ISettingsCommandStatics<T>::AccountsCommand() const
{
	Windows::UI::ApplicationSettings::SettingsCommand value(nullptr);
	check(static_cast<ISettingsCommandStatics const &>(static_cast<T const &>(*this))->get_AccountsCommand(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> impl_ISettingsPaneCommandsRequest<T>::ApplicationCommands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> value = {};
	check(static_cast<ISettingsPaneCommandsRequest const &>(static_cast<T const &>(*this))->get_ApplicationCommands(set(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest impl_ISettingsPaneCommandsRequestedEventArgs<T>::Request() const
{
	Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest request(nullptr);
	check(static_cast<ISettingsPaneCommandsRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(request)));
	return request;
}

template <typename T> Windows::UI::ApplicationSettings::SettingsPane impl_ISettingsPaneStatics<T>::GetForCurrentView() const
{
	Windows::UI::ApplicationSettings::SettingsPane current(nullptr);
	check(static_cast<ISettingsPaneStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(current)));
	return current;
}

template <typename T> void impl_ISettingsPaneStatics<T>::Show() const
{
	check(static_cast<ISettingsPaneStatics const &>(static_cast<T const &>(*this))->abi_Show());
}

template <typename T> Windows::UI::ApplicationSettings::SettingsEdgeLocation impl_ISettingsPaneStatics<T>::Edge() const
{
	Windows::UI::ApplicationSettings::SettingsEdgeLocation value = {};
	check(static_cast<ISettingsPaneStatics const &>(static_cast<T const &>(*this))->get_Edge(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_ISettingsPane<T>::CommandsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::ApplicationSettings::SettingsPane, Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ISettingsPane const &>(static_cast<T const &>(*this))->add_CommandsRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISettingsPane<T>::CommandsRequested(F handler) const
{
	return CommandsRequested(Windows::Foundation::TypedEventHandler<Windows::UI::ApplicationSettings::SettingsPane, Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs>(handler));
}

template <typename T> void impl_ISettingsPane<T>::CommandsRequested(EventRegistrationToken const cookie) const
{
	check(static_cast<ISettingsPane const &>(static_cast<T const &>(*this))->remove_CommandsRequested(cookie));
}

template <typename T> Windows::UI::ApplicationSettings::WebAccountProviderCommand impl_IWebAccountProviderCommandFactory<T>::CreateWebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler const & invoked) const
{
	Windows::UI::ApplicationSettings::WebAccountProviderCommand instance(nullptr);
	check(static_cast<IWebAccountProviderCommandFactory const &>(static_cast<T const &>(*this))->abi_CreateWebAccountProviderCommand(get(webAccountProvider), get(invoked), set(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::ApplicationSettings::WebAccountProviderCommand impl_IWebAccountProviderCommandFactory<T>::CreateWebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, F invoked) const
{
	return CreateWebAccountProviderCommand(webAccountProvider, Windows::UI::ApplicationSettings::WebAccountProviderCommandInvokedHandler(invoked));
}

template <typename T> Windows::UI::ApplicationSettings::WebAccountCommand impl_IWebAccountCommandFactory<T>::CreateWebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler const & invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions const actions) const
{
	Windows::UI::ApplicationSettings::WebAccountCommand instance(nullptr);
	check(static_cast<IWebAccountCommandFactory const &>(static_cast<T const &>(*this))->abi_CreateWebAccountCommand(get(webAccount), get(invoked), actions, set(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::ApplicationSettings::WebAccountCommand impl_IWebAccountCommandFactory<T>::CreateWebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, F invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions const actions) const
{
	return CreateWebAccountCommand(webAccount, Windows::UI::ApplicationSettings::WebAccountCommandInvokedHandler(invoked), actions);
}

template <typename T> Windows::UI::ApplicationSettings::CredentialCommand impl_ICredentialCommandFactory<T>::CreateCredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential) const
{
	Windows::UI::ApplicationSettings::CredentialCommand instance(nullptr);
	check(static_cast<ICredentialCommandFactory const &>(static_cast<T const &>(*this))->abi_CreateCredentialCommand(get(passwordCredential), set(instance)));
	return instance;
}

template <typename T> Windows::UI::ApplicationSettings::CredentialCommand impl_ICredentialCommandFactory<T>::CreateCredentialCommandWithHandler(Windows::Security::Credentials::PasswordCredential const & passwordCredential, Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler const & deleted) const
{
	Windows::UI::ApplicationSettings::CredentialCommand instance(nullptr);
	check(static_cast<ICredentialCommandFactory const &>(static_cast<T const &>(*this))->abi_CreateCredentialCommandWithHandler(get(passwordCredential), get(deleted), set(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::ApplicationSettings::CredentialCommand impl_ICredentialCommandFactory<T>::CreateCredentialCommandWithHandler(Windows::Security::Credentials::PasswordCredential const & passwordCredential, F deleted) const
{
	return CreateCredentialCommandWithHandler(passwordCredential, Windows::UI::ApplicationSettings::CredentialCommandCredentialDeletedHandler(deleted));
}

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebAccountProviderCommand<T>::WebAccountProvider() const
{
	Windows::Security::Credentials::WebAccountProvider value(nullptr);
	check(static_cast<IWebAccountProviderCommand const &>(static_cast<T const &>(*this))->get_WebAccountProvider(set(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler impl_IWebAccountProviderCommand<T>::Invoked() const
{
	Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler value = {};
	check(static_cast<IWebAccountProviderCommand const &>(static_cast<T const &>(*this))->get_Invoked(set(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::WebAccountAction impl_IWebAccountInvokedArgs<T>::Action() const
{
	Windows::UI::ApplicationSettings::WebAccountAction action = {};
	check(static_cast<IWebAccountInvokedArgs const &>(static_cast<T const &>(*this))->get_Action(&action));
	return action;
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountCommand<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value(nullptr);
	check(static_cast<IWebAccountCommand const &>(static_cast<T const &>(*this))->get_WebAccount(set(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler impl_IWebAccountCommand<T>::Invoked() const
{
	Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler value = {};
	check(static_cast<IWebAccountCommand const &>(static_cast<T const &>(*this))->get_Invoked(set(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::SupportedWebAccountActions impl_IWebAccountCommand<T>::Actions() const
{
	Windows::UI::ApplicationSettings::SupportedWebAccountActions value = {};
	check(static_cast<IWebAccountCommand const &>(static_cast<T const &>(*this))->get_Actions(&value));
	return value;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_ICredentialCommand<T>::PasswordCredential() const
{
	Windows::Security::Credentials::PasswordCredential value(nullptr);
	check(static_cast<ICredentialCommand const &>(static_cast<T const &>(*this))->get_PasswordCredential(set(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler impl_ICredentialCommand<T>::CredentialDeleted() const
{
	Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler value = {};
	check(static_cast<ICredentialCommand const &>(static_cast<T const &>(*this))->get_CredentialDeleted(set(value)));
	return value;
}

template <typename T> void impl_IAccountsSettingsPaneEventDeferral<T>::Complete() const
{
	check(static_cast<IAccountsSettingsPaneEventDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountProviderCommand> impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::WebAccountProviderCommands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountProviderCommand> value = {};
	check(static_cast<IAccountsSettingsPaneCommandsRequestedEventArgs const &>(static_cast<T const &>(*this))->get_WebAccountProviderCommands(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountCommand> impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::WebAccountCommands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountCommand> value = {};
	check(static_cast<IAccountsSettingsPaneCommandsRequestedEventArgs const &>(static_cast<T const &>(*this))->get_WebAccountCommands(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::CredentialCommand> impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::CredentialCommands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::CredentialCommand> value = {};
	check(static_cast<IAccountsSettingsPaneCommandsRequestedEventArgs const &>(static_cast<T const &>(*this))->get_CredentialCommands(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> value = {};
	check(static_cast<IAccountsSettingsPaneCommandsRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Commands(set(value)));
	return value;
}

template <typename T> String impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::HeaderText() const
{
	String value = {};
	check(static_cast<IAccountsSettingsPaneCommandsRequestedEventArgs const &>(static_cast<T const &>(*this))->get_HeaderText(set(value)));
	return value;
}

template <typename T> void impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::HeaderText(String const & value) const
{
	check(static_cast<IAccountsSettingsPaneCommandsRequestedEventArgs const &>(static_cast<T const &>(*this))->put_HeaderText(get(value)));
}

template <typename T> template <unsigned S0> void impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::HeaderText(wchar_t const (&value)[S0]) const
{
	check(static_cast<IAccountsSettingsPaneCommandsRequestedEventArgs const &>(static_cast<T const &>(*this))->put_HeaderText(StringReference(value)));
}

template <typename T> Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::GetDeferral() const
{
	Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral deferral(nullptr);
	check(static_cast<IAccountsSettingsPaneCommandsRequestedEventArgs const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> Windows::UI::ApplicationSettings::AccountsSettingsPane impl_IAccountsSettingsPaneStatics<T>::GetForCurrentView() const
{
	Windows::UI::ApplicationSettings::AccountsSettingsPane current(nullptr);
	check(static_cast<IAccountsSettingsPaneStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(current)));
	return current;
}

template <typename T> void impl_IAccountsSettingsPaneStatics<T>::Show() const
{
	check(static_cast<IAccountsSettingsPaneStatics const &>(static_cast<T const &>(*this))->abi_Show());
}

template <typename T> EventRegistrationToken impl_IAccountsSettingsPane<T>::AccountCommandsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::ApplicationSettings::AccountsSettingsPane, Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IAccountsSettingsPane const &>(static_cast<T const &>(*this))->add_AccountCommandsRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IAccountsSettingsPane<T>::AccountCommandsRequested(F handler) const
{
	return AccountCommandsRequested(Windows::Foundation::TypedEventHandler<Windows::UI::ApplicationSettings::AccountsSettingsPane, Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs>(handler));
}

template <typename T> void impl_IAccountsSettingsPane<T>::AccountCommandsRequested(EventRegistrationToken const cookie) const
{
	check(static_cast<IAccountsSettingsPane const &>(static_cast<T const &>(*this))->remove_AccountCommandsRequested(cookie));
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

template <typename T> void impl_IDispatchedHandler<T>::Invoke() const
{
	check(static_cast<IDispatchedHandler const &>(static_cast<T const &>(*this))->abi_Invoke());
}

template <typename T> void impl_IIdleDispatchedHandler<T>::Invoke(Windows::UI::Core::IdleDispatchedHandlerArgs const & e) const
{
	check(static_cast<IIdleDispatchedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(e)));
}

template <typename T> bool impl_ICoreWindowEventArgs<T>::Handled() const
{
	bool value = {};
	check(static_cast<ICoreWindowEventArgs const &>(static_cast<T const &>(*this))->get_Handled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICoreWindowEventArgs<T>::Handled(bool const value) const
{
	check(static_cast<ICoreWindowEventArgs const &>(static_cast<T const &>(*this))->put_Handled(value));
}

template <typename T> IInspectable impl_IAutomationProviderRequestedEventArgs<T>::AutomationProvider() const
{
	IInspectable value = {};
	check(static_cast<IAutomationProviderRequestedEventArgs const &>(static_cast<T const &>(*this))->get_AutomationProvider(set(value)));
	return value;
}

template <typename T> void impl_IAutomationProviderRequestedEventArgs<T>::AutomationProvider(IInspectable const & value) const
{
	check(static_cast<IAutomationProviderRequestedEventArgs const &>(static_cast<T const &>(*this))->put_AutomationProvider(get(value)));
}

template <typename T> unsigned impl_ICharacterReceivedEventArgs<T>::KeyCode() const
{
	unsigned value = {};
	check(static_cast<ICharacterReceivedEventArgs const &>(static_cast<T const &>(*this))->get_KeyCode(&value));
	return value;
}

template <typename T> Windows::UI::Core::CorePhysicalKeyStatus impl_ICharacterReceivedEventArgs<T>::KeyStatus() const
{
	Windows::UI::Core::CorePhysicalKeyStatus value = {};
	check(static_cast<ICharacterReceivedEventArgs const &>(static_cast<T const &>(*this))->get_KeyStatus(&value));
	return value;
}

template <typename T> bool impl_IInputEnabledEventArgs<T>::InputEnabled() const
{
	bool value = {};
	check(static_cast<IInputEnabledEventArgs const &>(static_cast<T const &>(*this))->get_InputEnabled(BoolProxy(value)));
	return value;
}

template <typename T> Windows::System::VirtualKey impl_IKeyEventArgs<T>::VirtualKey() const
{
	Windows::System::VirtualKey value = {};
	check(static_cast<IKeyEventArgs const &>(static_cast<T const &>(*this))->get_VirtualKey(&value));
	return value;
}

template <typename T> Windows::UI::Core::CorePhysicalKeyStatus impl_IKeyEventArgs<T>::KeyStatus() const
{
	Windows::UI::Core::CorePhysicalKeyStatus value = {};
	check(static_cast<IKeyEventArgs const &>(static_cast<T const &>(*this))->get_KeyStatus(&value));
	return value;
}

template <typename T> Windows::UI::Input::PointerPoint impl_IPointerEventArgs<T>::CurrentPoint() const
{
	Windows::UI::Input::PointerPoint value(nullptr);
	check(static_cast<IPointerEventArgs const &>(static_cast<T const &>(*this))->get_CurrentPoint(set(value)));
	return value;
}

template <typename T> Windows::System::VirtualKeyModifiers impl_IPointerEventArgs<T>::KeyModifiers() const
{
	Windows::System::VirtualKeyModifiers value = {};
	check(static_cast<IPointerEventArgs const &>(static_cast<T const &>(*this))->get_KeyModifiers(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> impl_IPointerEventArgs<T>::GetIntermediatePoints() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> value = {};
	check(static_cast<IPointerEventArgs const &>(static_cast<T const &>(*this))->abi_GetIntermediatePoints(set(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreProximityEvaluation impl_ITouchHitTestingEventArgs<T>::ProximityEvaluation() const
{
	Windows::UI::Core::CoreProximityEvaluation value = {};
	check(static_cast<ITouchHitTestingEventArgs const &>(static_cast<T const &>(*this))->get_ProximityEvaluation(&value));
	return value;
}

template <typename T> void impl_ITouchHitTestingEventArgs<T>::ProximityEvaluation(Windows::UI::Core::CoreProximityEvaluation const & value) const
{
	check(static_cast<ITouchHitTestingEventArgs const &>(static_cast<T const &>(*this))->put_ProximityEvaluation(value));
}

template <typename T> Windows::Foundation::Point impl_ITouchHitTestingEventArgs<T>::Point() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<ITouchHitTestingEventArgs const &>(static_cast<T const &>(*this))->get_Point(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_ITouchHitTestingEventArgs<T>::BoundingBox() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<ITouchHitTestingEventArgs const &>(static_cast<T const &>(*this))->get_BoundingBox(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreProximityEvaluation impl_ITouchHitTestingEventArgs<T>::EvaluateProximity(Windows::Foundation::Rect const & controlBoundingBox) const
{
	Windows::UI::Core::CoreProximityEvaluation proximityEvaluation = {};
	check(static_cast<ITouchHitTestingEventArgs const &>(static_cast<T const &>(*this))->abi_EvaluateProximityToRect(controlBoundingBox, &proximityEvaluation));
	return proximityEvaluation;
}

template <typename T> Windows::UI::Core::CoreWindowActivationState impl_IWindowActivatedEventArgs<T>::WindowActivationState() const
{
	Windows::UI::Core::CoreWindowActivationState value = {};
	check(static_cast<IWindowActivatedEventArgs const &>(static_cast<T const &>(*this))->get_WindowActivationState(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IWindowSizeChangedEventArgs<T>::Size() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<IWindowSizeChangedEventArgs const &>(static_cast<T const &>(*this))->get_Size(&value));
	return value;
}

template <typename T> bool impl_IVisibilityChangedEventArgs<T>::Visible() const
{
	bool value = {};
	check(static_cast<IVisibilityChangedEventArgs const &>(static_cast<T const &>(*this))->get_Visible(BoolProxy(value)));
	return value;
}

template <typename T> IInspectable impl_ICoreWindow<T>::AutomationHostProvider() const
{
	IInspectable value = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->get_AutomationHostProvider(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_ICoreWindow<T>::Bounds() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->get_Bounds(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_ICoreWindow<T>::CustomProperties() const
{
	Windows::Foundation::Collections::IPropertySet value = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->get_CustomProperties(set(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICoreWindow<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value(nullptr);
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->get_Dispatcher(set(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreWindowFlowDirection impl_ICoreWindow<T>::FlowDirection() const
{
	Windows::UI::Core::CoreWindowFlowDirection value = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->get_FlowDirection(&value));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::FlowDirection(Windows::UI::Core::CoreWindowFlowDirection const value) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->put_FlowDirection(value));
}

template <typename T> bool impl_ICoreWindow<T>::IsInputEnabled() const
{
	bool value = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->get_IsInputEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::IsInputEnabled(bool const value) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->put_IsInputEnabled(value));
}

template <typename T> Windows::UI::Core::CoreCursor impl_ICoreWindow<T>::PointerCursor() const
{
	Windows::UI::Core::CoreCursor value(nullptr);
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->get_PointerCursor(set(value)));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::PointerCursor(Windows::UI::Core::CoreCursor const & value) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->put_PointerCursor(get(value)));
}

template <typename T> Windows::Foundation::Point impl_ICoreWindow<T>::PointerPosition() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->get_PointerPosition(&value));
	return value;
}

template <typename T> bool impl_ICoreWindow<T>::Visible() const
{
	bool value = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->get_Visible(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::Activate() const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->abi_Activate());
}

template <typename T> void impl_ICoreWindow<T>::Close() const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->abi_Close());
}

template <typename T> Windows::UI::Core::CoreVirtualKeyStates impl_ICoreWindow<T>::GetAsyncKeyState(Windows::System::VirtualKey const virtualKey) const
{
	Windows::UI::Core::CoreVirtualKeyStates KeyState = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->abi_GetAsyncKeyState(virtualKey, &KeyState));
	return KeyState;
}

template <typename T> Windows::UI::Core::CoreVirtualKeyStates impl_ICoreWindow<T>::GetKeyState(Windows::System::VirtualKey const virtualKey) const
{
	Windows::UI::Core::CoreVirtualKeyStates KeyState = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->abi_GetKeyState(virtualKey, &KeyState));
	return KeyState;
}

template <typename T> void impl_ICoreWindow<T>::ReleasePointerCapture() const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->abi_ReleasePointerCapture());
}

template <typename T> void impl_ICoreWindow<T>::SetPointerCapture() const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->abi_SetPointerCapture());
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowActivatedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_Activated(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::Activated(F handler) const
{
	return Activated(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowActivatedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::Activated(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_Activated(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::AutomationProviderRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::AutomationProviderRequestedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_AutomationProviderRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::AutomationProviderRequested(F handler) const
{
	return AutomationProviderRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::AutomationProviderRequestedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::AutomationProviderRequested(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_AutomationProviderRequested(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::CharacterReceived(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_CharacterReceived(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::CharacterReceived(F handler) const
{
	return CharacterReceived(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CharacterReceivedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::CharacterReceived(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_CharacterReceived(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_Closed(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::Closed(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_Closed(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::InputEnabled(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::InputEnabledEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_InputEnabled(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::InputEnabled(F handler) const
{
	return InputEnabled(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::InputEnabledEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::InputEnabled(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_InputEnabled(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::KeyDown(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_KeyDown(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::KeyDown(F handler) const
{
	return KeyDown(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::KeyDown(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_KeyDown(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::KeyUp(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_KeyUp(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::KeyUp(F handler) const
{
	return KeyUp(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::KeyUp(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_KeyUp(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::PointerCaptureLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_PointerCaptureLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::PointerCaptureLost(F handler) const
{
	return PointerCaptureLost(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerCaptureLost(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_PointerCaptureLost(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::PointerEntered(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_PointerEntered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::PointerEntered(F handler) const
{
	return PointerEntered(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerEntered(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_PointerEntered(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::PointerExited(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_PointerExited(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::PointerExited(F handler) const
{
	return PointerExited(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerExited(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_PointerExited(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::PointerMoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_PointerMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::PointerMoved(F handler) const
{
	return PointerMoved(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerMoved(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_PointerMoved(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::PointerPressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_PointerPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::PointerPressed(F handler) const
{
	return PointerPressed(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerPressed(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_PointerPressed(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::PointerReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_PointerReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::PointerReleased(F handler) const
{
	return PointerReleased(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerReleased(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_PointerReleased(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::TouchHitTesting(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_TouchHitTesting(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::TouchHitTesting(F handler) const
{
	return TouchHitTesting(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::TouchHitTestingEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::TouchHitTesting(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_TouchHitTesting(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::PointerWheelChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_PointerWheelChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::PointerWheelChanged(F handler) const
{
	return PointerWheelChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerWheelChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_PointerWheelChanged(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::SizeChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowSizeChangedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_SizeChanged(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::SizeChanged(F handler) const
{
	return SizeChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowSizeChangedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::SizeChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_SizeChanged(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreWindow<T>::VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::VisibilityChangedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->add_VisibilityChanged(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindow<T>::VisibilityChanged(F handler) const
{
	return VisibilityChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::VisibilityChangedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::VisibilityChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindow const &>(static_cast<T const &>(*this))->remove_VisibilityChanged(cookie));
}

template <typename T> Windows::UI::Core::CoreWindow impl_ICoreWindowStatic<T>::GetForCurrentThread() const
{
	Windows::UI::Core::CoreWindow ppWindow(nullptr);
	check(static_cast<ICoreWindowStatic const &>(static_cast<T const &>(*this))->abi_GetForCurrentThread(set(ppWindow)));
	return ppWindow;
}

template <typename T> Windows::UI::Core::CoreAcceleratorKeyEventType impl_IAcceleratorKeyEventArgs<T>::EventType() const
{
	Windows::UI::Core::CoreAcceleratorKeyEventType value = {};
	check(static_cast<IAcceleratorKeyEventArgs const &>(static_cast<T const &>(*this))->get_EventType(&value));
	return value;
}

template <typename T> Windows::System::VirtualKey impl_IAcceleratorKeyEventArgs<T>::VirtualKey() const
{
	Windows::System::VirtualKey value = {};
	check(static_cast<IAcceleratorKeyEventArgs const &>(static_cast<T const &>(*this))->get_VirtualKey(&value));
	return value;
}

template <typename T> Windows::UI::Core::CorePhysicalKeyStatus impl_IAcceleratorKeyEventArgs<T>::KeyStatus() const
{
	Windows::UI::Core::CorePhysicalKeyStatus value = {};
	check(static_cast<IAcceleratorKeyEventArgs const &>(static_cast<T const &>(*this))->get_KeyStatus(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_ICoreAcceleratorKeys<T>::AcceleratorKeyActivated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreDispatcher, Windows::UI::Core::AcceleratorKeyEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreAcceleratorKeys const &>(static_cast<T const &>(*this))->add_AcceleratorKeyActivated(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreAcceleratorKeys<T>::AcceleratorKeyActivated(F handler) const
{
	return AcceleratorKeyActivated(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreDispatcher, Windows::UI::Core::AcceleratorKeyEventArgs>(handler));
}

template <typename T> void impl_ICoreAcceleratorKeys<T>::AcceleratorKeyActivated(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreAcceleratorKeys const &>(static_cast<T const &>(*this))->remove_AcceleratorKeyActivated(cookie));
}

template <typename T> bool impl_ICoreDispatcher<T>::HasThreadAccess() const
{
	bool value = {};
	check(static_cast<ICoreDispatcher const &>(static_cast<T const &>(*this))->get_HasThreadAccess(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICoreDispatcher<T>::ProcessEvents(Windows::UI::Core::CoreProcessEventsOption const options) const
{
	check(static_cast<ICoreDispatcher const &>(static_cast<T const &>(*this))->abi_ProcessEvents(options));
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, Windows::UI::Core::IDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncAction asyncAction = {};
	check(static_cast<ICoreDispatcher const &>(static_cast<T const &>(*this))->abi_RunAsync(priority, get(agileCallback), set(asyncAction)));
	return asyncAction;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, F agileCallback) const
{
	return RunAsync(priority, Windows::UI::Core::DispatchedHandler(agileCallback));
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunIdleAsync(Windows::UI::Core::IIdleDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncAction asyncAction = {};
	check(static_cast<ICoreDispatcher const &>(static_cast<T const &>(*this))->abi_RunIdleAsync(get(agileCallback), set(asyncAction)));
	return asyncAction;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunIdleAsync(F agileCallback) const
{
	return RunIdleAsync(Windows::UI::Core::IdleDispatchedHandler(agileCallback));
}

template <typename T> Windows::UI::Core::CoreDispatcherPriority impl_ICoreDispatcherWithTaskPriority<T>::CurrentPriority() const
{
	Windows::UI::Core::CoreDispatcherPriority value = {};
	check(static_cast<ICoreDispatcherWithTaskPriority const &>(static_cast<T const &>(*this))->get_CurrentPriority(&value));
	return value;
}

template <typename T> void impl_ICoreDispatcherWithTaskPriority<T>::CurrentPriority(Windows::UI::Core::CoreDispatcherPriority const value) const
{
	check(static_cast<ICoreDispatcherWithTaskPriority const &>(static_cast<T const &>(*this))->put_CurrentPriority(value));
}

template <typename T> bool impl_ICoreDispatcherWithTaskPriority<T>::ShouldYield() const
{
	bool value = {};
	check(static_cast<ICoreDispatcherWithTaskPriority const &>(static_cast<T const &>(*this))->abi_ShouldYield(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ICoreDispatcherWithTaskPriority<T>::ShouldYield(Windows::UI::Core::CoreDispatcherPriority const priority) const
{
	bool value = {};
	check(static_cast<ICoreDispatcherWithTaskPriority const &>(static_cast<T const &>(*this))->abi_ShouldYieldToPriority(priority, BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICoreDispatcherWithTaskPriority<T>::StopProcessEvents() const
{
	check(static_cast<ICoreDispatcherWithTaskPriority const &>(static_cast<T const &>(*this))->abi_StopProcessEvents());
}

template <typename T> bool impl_IIdleDispatchedHandlerArgs<T>::IsDispatcherIdle() const
{
	bool value = {};
	check(static_cast<IIdleDispatchedHandlerArgs const &>(static_cast<T const &>(*this))->get_IsDispatcherIdle(BoolProxy(value)));
	return value;
}

template <typename T> unsigned impl_ICoreCursor<T>::Id() const
{
	unsigned value = {};
	check(static_cast<ICoreCursor const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreCursorType impl_ICoreCursor<T>::Type() const
{
	Windows::UI::Core::CoreCursorType value = {};
	check(static_cast<ICoreCursor const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreCursor impl_ICoreCursorFactory<T>::CreateCursor(Windows::UI::Core::CoreCursorType const type, unsigned const id) const
{
	Windows::UI::Core::CoreCursor cursor(nullptr);
	check(static_cast<ICoreCursorFactory const &>(static_cast<T const &>(*this))->abi_CreateCursor(type, id, set(cursor)));
	return cursor;
}

template <typename T> void impl_IInitializeWithCoreWindow<T>::Initialize(Windows::UI::Core::CoreWindow const & window) const
{
	check(static_cast<IInitializeWithCoreWindow const &>(static_cast<T const &>(*this))->abi_Initialize(get(window)));
}

template <typename T> void impl_ICoreWindowResizeManager<T>::NotifyLayoutCompleted() const
{
	check(static_cast<ICoreWindowResizeManager const &>(static_cast<T const &>(*this))->abi_NotifyLayoutCompleted());
}

template <typename T> void impl_ICoreWindowResizeManagerLayoutCapability<T>::ShouldWaitForLayoutCompletion(bool const value) const
{
	check(static_cast<ICoreWindowResizeManagerLayoutCapability const &>(static_cast<T const &>(*this))->put_ShouldWaitForLayoutCompletion(value));
}

template <typename T> bool impl_ICoreWindowResizeManagerLayoutCapability<T>::ShouldWaitForLayoutCompletion() const
{
	bool value = {};
	check(static_cast<ICoreWindowResizeManagerLayoutCapability const &>(static_cast<T const &>(*this))->get_ShouldWaitForLayoutCompletion(BoolProxy(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreWindowResizeManager impl_ICoreWindowResizeManagerStatics<T>::GetForCurrentView() const
{
	Windows::UI::Core::CoreWindowResizeManager CoreWindowResizeManager(nullptr);
	check(static_cast<ICoreWindowResizeManagerStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(CoreWindowResizeManager)));
	return CoreWindowResizeManager;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICoreInputSourceBase<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value(nullptr);
	check(static_cast<ICoreInputSourceBase const &>(static_cast<T const &>(*this))->get_Dispatcher(set(value)));
	return value;
}

template <typename T> bool impl_ICoreInputSourceBase<T>::IsInputEnabled() const
{
	bool value = {};
	check(static_cast<ICoreInputSourceBase const &>(static_cast<T const &>(*this))->get_IsInputEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ICoreInputSourceBase<T>::IsInputEnabled(bool const value) const
{
	check(static_cast<ICoreInputSourceBase const &>(static_cast<T const &>(*this))->put_IsInputEnabled(value));
}

template <typename T> EventRegistrationToken impl_ICoreInputSourceBase<T>::InputEnabled(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::InputEnabledEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreInputSourceBase const &>(static_cast<T const &>(*this))->add_InputEnabled(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreInputSourceBase<T>::InputEnabled(F handler) const
{
	return InputEnabled(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::InputEnabledEventArgs>(handler));
}

template <typename T> void impl_ICoreInputSourceBase<T>::InputEnabled(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreInputSourceBase const &>(static_cast<T const &>(*this))->remove_InputEnabled(cookie));
}

template <typename T> void impl_ICorePointerInputSource<T>::ReleasePointerCapture() const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->abi_ReleasePointerCapture());
}

template <typename T> void impl_ICorePointerInputSource<T>::SetPointerCapture() const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->abi_SetPointerCapture());
}

template <typename T> bool impl_ICorePointerInputSource<T>::HasCapture() const
{
	bool value = {};
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->get_HasCapture(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ICorePointerInputSource<T>::PointerPosition() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->get_PointerPosition(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreCursor impl_ICorePointerInputSource<T>::PointerCursor() const
{
	Windows::UI::Core::CoreCursor value(nullptr);
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->get_PointerCursor(set(value)));
	return value;
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerCursor(Windows::UI::Core::CoreCursor const & value) const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->put_PointerCursor(get(value)));
}

template <typename T> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerCaptureLost(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->add_PointerCaptureLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerCaptureLost(F handler) const
{
	return PointerCaptureLost(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerCaptureLost(EventRegistrationToken const cookie) const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->remove_PointerCaptureLost(cookie));
}

template <typename T> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerEntered(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->add_PointerEntered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerEntered(F handler) const
{
	return PointerEntered(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerEntered(EventRegistrationToken const cookie) const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->remove_PointerEntered(cookie));
}

template <typename T> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerExited(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->add_PointerExited(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerExited(F handler) const
{
	return PointerExited(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerExited(EventRegistrationToken const cookie) const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->remove_PointerExited(cookie));
}

template <typename T> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerMoved(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->add_PointerMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerMoved(F handler) const
{
	return PointerMoved(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerMoved(EventRegistrationToken const cookie) const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->remove_PointerMoved(cookie));
}

template <typename T> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerPressed(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->add_PointerPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerPressed(F handler) const
{
	return PointerPressed(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerPressed(EventRegistrationToken const cookie) const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->remove_PointerPressed(cookie));
}

template <typename T> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerReleased(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->add_PointerReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerReleased(F handler) const
{
	return PointerReleased(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerReleased(EventRegistrationToken const cookie) const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->remove_PointerReleased(cookie));
}

template <typename T> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerWheelChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->add_PointerWheelChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICorePointerInputSource<T>::PointerWheelChanged(F handler) const
{
	return PointerWheelChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerWheelChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<ICorePointerInputSource const &>(static_cast<T const &>(*this))->remove_PointerWheelChanged(cookie));
}

template <typename T> Windows::UI::Core::CoreVirtualKeyStates impl_ICoreKeyboardInputSource<T>::GetCurrentKeyState(Windows::System::VirtualKey const virtualKey) const
{
	Windows::UI::Core::CoreVirtualKeyStates KeyState = {};
	check(static_cast<ICoreKeyboardInputSource const &>(static_cast<T const &>(*this))->abi_GetCurrentKeyState(virtualKey, &KeyState));
	return KeyState;
}

template <typename T> EventRegistrationToken impl_ICoreKeyboardInputSource<T>::CharacterReceived(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreKeyboardInputSource const &>(static_cast<T const &>(*this))->add_CharacterReceived(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreKeyboardInputSource<T>::CharacterReceived(F handler) const
{
	return CharacterReceived(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::CharacterReceivedEventArgs>(handler));
}

template <typename T> void impl_ICoreKeyboardInputSource<T>::CharacterReceived(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreKeyboardInputSource const &>(static_cast<T const &>(*this))->remove_CharacterReceived(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreKeyboardInputSource<T>::KeyDown(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreKeyboardInputSource const &>(static_cast<T const &>(*this))->add_KeyDown(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreKeyboardInputSource<T>::KeyDown(F handler) const
{
	return KeyDown(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreKeyboardInputSource<T>::KeyDown(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreKeyboardInputSource const &>(static_cast<T const &>(*this))->remove_KeyDown(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreKeyboardInputSource<T>::KeyUp(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreKeyboardInputSource const &>(static_cast<T const &>(*this))->add_KeyUp(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreKeyboardInputSource<T>::KeyUp(F handler) const
{
	return KeyUp(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreKeyboardInputSource<T>::KeyUp(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreKeyboardInputSource const &>(static_cast<T const &>(*this))->remove_KeyUp(cookie));
}

template <typename T> bool impl_ICoreComponentFocusable<T>::HasFocus() const
{
	bool value = {};
	check(static_cast<ICoreComponentFocusable const &>(static_cast<T const &>(*this))->get_HasFocus(BoolProxy(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_ICoreComponentFocusable<T>::GotFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreComponentFocusable const &>(static_cast<T const &>(*this))->add_GotFocus(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreComponentFocusable<T>::GotFocus(F handler) const
{
	return GotFocus(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs>(handler));
}

template <typename T> void impl_ICoreComponentFocusable<T>::GotFocus(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreComponentFocusable const &>(static_cast<T const &>(*this))->remove_GotFocus(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreComponentFocusable<T>::LostFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreComponentFocusable const &>(static_cast<T const &>(*this))->add_LostFocus(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreComponentFocusable<T>::LostFocus(F handler) const
{
	return LostFocus(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs>(handler));
}

template <typename T> void impl_ICoreComponentFocusable<T>::LostFocus(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreComponentFocusable const &>(static_cast<T const &>(*this))->remove_LostFocus(cookie));
}

template <typename T> EventRegistrationToken impl_ICoreTouchHitTesting<T>::TouchHitTesting(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<ICoreTouchHitTesting const &>(static_cast<T const &>(*this))->add_TouchHitTesting(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreTouchHitTesting<T>::TouchHitTesting(F handler) const
{
	return TouchHitTesting(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::TouchHitTestingEventArgs>(handler));
}

template <typename T> void impl_ICoreTouchHitTesting<T>::TouchHitTesting(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreTouchHitTesting const &>(static_cast<T const &>(*this))->remove_TouchHitTesting(cookie));
}

template <typename T> void impl_ICoreWindowPopupShowingEventArgs<T>::SetDesiredSize(Windows::Foundation::Size const & value) const
{
	check(static_cast<ICoreWindowPopupShowingEventArgs const &>(static_cast<T const &>(*this))->abi_SetDesiredSize(value));
}

template <typename T> EventRegistrationToken impl_ICoreWindowDialog<T>::Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->add_Showing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindowDialog<T>::Showing(F handler) const
{
	return Showing(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs>(handler));
}

template <typename T> void impl_ICoreWindowDialog<T>::Showing(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->remove_Showing(cookie));
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowDialog<T>::MaxSize() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->get_MaxSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowDialog<T>::MinSize() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->get_MinSize(&value));
	return value;
}

template <typename T> String impl_ICoreWindowDialog<T>::Title() const
{
	String value = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::Title(String const & value) const
{
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICoreWindowDialog<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> int impl_ICoreWindowDialog<T>::IsInteractionDelayed() const
{
	int value = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->get_IsInteractionDelayed(&value));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::IsInteractionDelayed(int const value) const
{
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->put_IsInteractionDelayed(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_ICoreWindowDialog<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->get_Commands(set(value)));
	return value;
}

template <typename T> unsigned impl_ICoreWindowDialog<T>::DefaultCommandIndex() const
{
	unsigned value = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->get_DefaultCommandIndex(&value));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::DefaultCommandIndex(unsigned const value) const
{
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->put_DefaultCommandIndex(value));
}

template <typename T> unsigned impl_ICoreWindowDialog<T>::CancelCommandIndex() const
{
	unsigned value = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->get_CancelCommandIndex(&value));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::CancelCommandIndex(unsigned const value) const
{
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->put_CancelCommandIndex(value));
}

template <typename T> Windows::UI::Popups::IUICommandInvokedHandler impl_ICoreWindowDialog<T>::BackButtonCommand() const
{
	Windows::UI::Popups::IUICommandInvokedHandler value = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->get_BackButtonCommand(set(value)));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const
{
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->put_BackButtonCommand(get(value)));
}

template <typename T> template <typename F> void impl_ICoreWindowDialog<T>::BackButtonCommand(F value) const
{
	BackButtonCommand(Windows::UI::Popups::UICommandInvokedHandler(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_ICoreWindowDialog<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncInfo = {};
	check(static_cast<ICoreWindowDialog const &>(static_cast<T const &>(*this))->abi_ShowAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::UI::Core::CoreWindowDialog impl_ICoreWindowDialogFactory<T>::CreateWithTitle(String const & title) const
{
	Windows::UI::Core::CoreWindowDialog coreWindowDialog(nullptr);
	check(static_cast<ICoreWindowDialogFactory const &>(static_cast<T const &>(*this))->abi_CreateWithTitle(get(title), set(coreWindowDialog)));
	return coreWindowDialog;
}

template <typename T> template <unsigned S0> Windows::UI::Core::CoreWindowDialog impl_ICoreWindowDialogFactory<T>::CreateWithTitle(wchar_t const (&title)[S0]) const
{
	Windows::UI::Core::CoreWindowDialog coreWindowDialog(nullptr);
	check(static_cast<ICoreWindowDialogFactory const &>(static_cast<T const &>(*this))->abi_CreateWithTitle(StringReference(title), set(coreWindowDialog)));
	return coreWindowDialog;
}

template <typename T> EventRegistrationToken impl_ICoreWindowFlyout<T>::Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->add_Showing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_ICoreWindowFlyout<T>::Showing(F handler) const
{
	return Showing(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs>(handler));
}

template <typename T> void impl_ICoreWindowFlyout<T>::Showing(EventRegistrationToken const cookie) const
{
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->remove_Showing(cookie));
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowFlyout<T>::MaxSize() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->get_MaxSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowFlyout<T>::MinSize() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->get_MinSize(&value));
	return value;
}

template <typename T> String impl_ICoreWindowFlyout<T>::Title() const
{
	String value = {};
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::Title(String const & value) const
{
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_ICoreWindowFlyout<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> int impl_ICoreWindowFlyout<T>::IsInteractionDelayed() const
{
	int value = {};
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->get_IsInteractionDelayed(&value));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::IsInteractionDelayed(int const value) const
{
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->put_IsInteractionDelayed(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_ICoreWindowFlyout<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value = {};
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->get_Commands(set(value)));
	return value;
}

template <typename T> unsigned impl_ICoreWindowFlyout<T>::DefaultCommandIndex() const
{
	unsigned value = {};
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->get_DefaultCommandIndex(&value));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::DefaultCommandIndex(unsigned const value) const
{
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->put_DefaultCommandIndex(value));
}

template <typename T> Windows::UI::Popups::IUICommandInvokedHandler impl_ICoreWindowFlyout<T>::BackButtonCommand() const
{
	Windows::UI::Popups::IUICommandInvokedHandler value = {};
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->get_BackButtonCommand(set(value)));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const
{
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->put_BackButtonCommand(get(value)));
}

template <typename T> template <typename F> void impl_ICoreWindowFlyout<T>::BackButtonCommand(F value) const
{
	BackButtonCommand(Windows::UI::Popups::UICommandInvokedHandler(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_ICoreWindowFlyout<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncInfo = {};
	check(static_cast<ICoreWindowFlyout const &>(static_cast<T const &>(*this))->abi_ShowAsync(set(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::UI::Core::CoreWindowFlyout impl_ICoreWindowFlyoutFactory<T>::Create(Windows::Foundation::Point const & position) const
{
	Windows::UI::Core::CoreWindowFlyout coreWindowFlyout(nullptr);
	check(static_cast<ICoreWindowFlyoutFactory const &>(static_cast<T const &>(*this))->abi_Create(position, set(coreWindowFlyout)));
	return coreWindowFlyout;
}

template <typename T> Windows::UI::Core::CoreWindowFlyout impl_ICoreWindowFlyoutFactory<T>::CreateWithTitle(Windows::Foundation::Point const & position, String const & title) const
{
	Windows::UI::Core::CoreWindowFlyout coreWindowFlyout(nullptr);
	check(static_cast<ICoreWindowFlyoutFactory const &>(static_cast<T const &>(*this))->abi_CreateWithTitle(position, get(title), set(coreWindowFlyout)));
	return coreWindowFlyout;
}

template <typename T> template <unsigned S0> Windows::UI::Core::CoreWindowFlyout impl_ICoreWindowFlyoutFactory<T>::CreateWithTitle(Windows::Foundation::Point const & position, wchar_t const (&title)[S0]) const
{
	Windows::UI::Core::CoreWindowFlyout coreWindowFlyout(nullptr);
	check(static_cast<ICoreWindowFlyoutFactory const &>(static_cast<T const &>(*this))->abi_CreateWithTitle(position, StringReference(title), set(coreWindowFlyout)));
	return coreWindowFlyout;
}

template <typename T> Windows::UI::Core::CoreWindow impl_ICoreWindowFactory<T>::CreateCoreWindow(String const & windowTitle) const
{
	Windows::UI::Core::CoreWindow window(nullptr);
	check(static_cast<ICoreWindowFactory const &>(static_cast<T const &>(*this))->abi_CreateCoreWindow(get(windowTitle), set(window)));
	return window;
}

template <typename T> template <unsigned S0> Windows::UI::Core::CoreWindow impl_ICoreWindowFactory<T>::CreateCoreWindow(wchar_t const (&windowTitle)[S0]) const
{
	Windows::UI::Core::CoreWindow window(nullptr);
	check(static_cast<ICoreWindowFactory const &>(static_cast<T const &>(*this))->abi_CreateCoreWindow(StringReference(windowTitle), set(window)));
	return window;
}

template <typename T> bool impl_ICoreWindowFactory<T>::WindowReuseAllowed() const
{
	bool value = {};
	check(static_cast<ICoreWindowFactory const &>(static_cast<T const &>(*this))->get_WindowReuseAllowed(BoolProxy(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

template <typename T> Windows::UI::Core::AnimationMetrics::PropertyAnimationType impl_IPropertyAnimation<T>::Type() const
{
	Windows::UI::Core::AnimationMetrics::PropertyAnimationType value = {};
	check(static_cast<IPropertyAnimation const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPropertyAnimation<T>::Delay() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IPropertyAnimation const &>(static_cast<T const &>(*this))->get_Delay(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPropertyAnimation<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IPropertyAnimation const &>(static_cast<T const &>(*this))->get_Duration(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPropertyAnimation<T>::Control1() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IPropertyAnimation const &>(static_cast<T const &>(*this))->get_Control1(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPropertyAnimation<T>::Control2() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IPropertyAnimation const &>(static_cast<T const &>(*this))->get_Control2(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<float> impl_IScaleAnimation<T>::InitialScaleX() const
{
	Windows::Foundation::IReference<float> value = {};
	check(static_cast<IScaleAnimation const &>(static_cast<T const &>(*this))->get_InitialScaleX(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<float> impl_IScaleAnimation<T>::InitialScaleY() const
{
	Windows::Foundation::IReference<float> value = {};
	check(static_cast<IScaleAnimation const &>(static_cast<T const &>(*this))->get_InitialScaleY(set(value)));
	return value;
}

template <typename T> float impl_IScaleAnimation<T>::FinalScaleX() const
{
	float value = {};
	check(static_cast<IScaleAnimation const &>(static_cast<T const &>(*this))->get_FinalScaleX(&value));
	return value;
}

template <typename T> float impl_IScaleAnimation<T>::FinalScaleY() const
{
	float value = {};
	check(static_cast<IScaleAnimation const &>(static_cast<T const &>(*this))->get_FinalScaleY(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IScaleAnimation<T>::NormalizedOrigin() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IScaleAnimation const &>(static_cast<T const &>(*this))->get_NormalizedOrigin(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<float> impl_IOpacityAnimation<T>::InitialOpacity() const
{
	Windows::Foundation::IReference<float> value = {};
	check(static_cast<IOpacityAnimation const &>(static_cast<T const &>(*this))->get_InitialOpacity(set(value)));
	return value;
}

template <typename T> float impl_IOpacityAnimation<T>::FinalOpacity() const
{
	float value = {};
	check(static_cast<IOpacityAnimation const &>(static_cast<T const &>(*this))->get_FinalOpacity(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Core::AnimationMetrics::IPropertyAnimation> impl_IAnimationDescription<T>::Animations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Core::AnimationMetrics::IPropertyAnimation> value = {};
	check(static_cast<IAnimationDescription const &>(static_cast<T const &>(*this))->get_Animations(set(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAnimationDescription<T>::StaggerDelay() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IAnimationDescription const &>(static_cast<T const &>(*this))->get_StaggerDelay(&value));
	return value;
}

template <typename T> float impl_IAnimationDescription<T>::StaggerDelayFactor() const
{
	float value = {};
	check(static_cast<IAnimationDescription const &>(static_cast<T const &>(*this))->get_StaggerDelayFactor(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAnimationDescription<T>::DelayLimit() const
{
	Windows::Foundation::TimeSpan value = {};
	check(static_cast<IAnimationDescription const &>(static_cast<T const &>(*this))->get_DelayLimit(&value));
	return value;
}

template <typename T> int impl_IAnimationDescription<T>::ZOrder() const
{
	int value = {};
	check(static_cast<IAnimationDescription const &>(static_cast<T const &>(*this))->get_ZOrder(&value));
	return value;
}

template <typename T> Windows::UI::Core::AnimationMetrics::AnimationDescription impl_IAnimationDescriptionFactory<T>::CreateInstance(Windows::UI::Core::AnimationMetrics::AnimationEffect const effect, Windows::UI::Core::AnimationMetrics::AnimationEffectTarget const target) const
{
	Windows::UI::Core::AnimationMetrics::AnimationDescription animation(nullptr);
	check(static_cast<IAnimationDescriptionFactory const &>(static_cast<T const &>(*this))->abi_CreateInstance(effect, target, set(animation)));
	return animation;
}

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

template <typename T> Windows::UI::Input::EdgeGestureKind impl_IEdgeGestureEventArgs<T>::Kind() const
{
	Windows::UI::Input::EdgeGestureKind value = {};
	check(static_cast<IEdgeGestureEventArgs const &>(static_cast<T const &>(*this))->get_Kind(&value));
	return value;
}

template <typename T> Windows::UI::Input::EdgeGesture impl_IEdgeGestureStatics<T>::GetForCurrentView() const
{
	Windows::UI::Input::EdgeGesture current(nullptr);
	check(static_cast<IEdgeGestureStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(current)));
	return current;
}

template <typename T> EventRegistrationToken impl_IEdgeGesture<T>::Starting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IEdgeGesture const &>(static_cast<T const &>(*this))->add_Starting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IEdgeGesture<T>::Starting(F handler) const
{
	return Starting(Windows::Foundation::TypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs>(handler));
}

template <typename T> void impl_IEdgeGesture<T>::Starting(EventRegistrationToken const token) const
{
	check(static_cast<IEdgeGesture const &>(static_cast<T const &>(*this))->remove_Starting(token));
}

template <typename T> EventRegistrationToken impl_IEdgeGesture<T>::Completed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IEdgeGesture const &>(static_cast<T const &>(*this))->add_Completed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IEdgeGesture<T>::Completed(F handler) const
{
	return Completed(Windows::Foundation::TypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs>(handler));
}

template <typename T> void impl_IEdgeGesture<T>::Completed(EventRegistrationToken const token) const
{
	check(static_cast<IEdgeGesture const &>(static_cast<T const &>(*this))->remove_Completed(token));
}

template <typename T> EventRegistrationToken impl_IEdgeGesture<T>::Canceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IEdgeGesture const &>(static_cast<T const &>(*this))->add_Canceled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IEdgeGesture<T>::Canceled(F handler) const
{
	return Canceled(Windows::Foundation::TypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs>(handler));
}

template <typename T> void impl_IEdgeGesture<T>::Canceled(EventRegistrationToken const token) const
{
	check(static_cast<IEdgeGesture const &>(static_cast<T const &>(*this))->remove_Canceled(token));
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_ITappedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<ITappedEventArgs const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ITappedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<ITappedEventArgs const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> unsigned impl_ITappedEventArgs<T>::TapCount() const
{
	unsigned value = {};
	check(static_cast<ITappedEventArgs const &>(static_cast<T const &>(*this))->get_TapCount(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IRightTappedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<IRightTappedEventArgs const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IRightTappedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IRightTappedEventArgs const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IHoldingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<IHoldingEventArgs const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IHoldingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IHoldingEventArgs const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::HoldingState impl_IHoldingEventArgs<T>::HoldingState() const
{
	Windows::UI::Input::HoldingState value = {};
	check(static_cast<IHoldingEventArgs const &>(static_cast<T const &>(*this))->get_HoldingState(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IDraggingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<IDraggingEventArgs const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IDraggingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IDraggingEventArgs const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::DraggingState impl_IDraggingEventArgs<T>::DraggingState() const
{
	Windows::UI::Input::DraggingState value = {};
	check(static_cast<IDraggingEventArgs const &>(static_cast<T const &>(*this))->get_DraggingState(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationStartedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<IManipulationStartedEventArgs const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationStartedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IManipulationStartedEventArgs const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationStartedEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(static_cast<IManipulationStartedEventArgs const &>(static_cast<T const &>(*this))->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationUpdatedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<IManipulationUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationUpdatedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IManipulationUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationUpdatedEventArgs<T>::Delta() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(static_cast<IManipulationUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_Delta(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationUpdatedEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(static_cast<IManipulationUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationVelocities impl_IManipulationUpdatedEventArgs<T>::Velocities() const
{
	Windows::UI::Input::ManipulationVelocities value = {};
	check(static_cast<IManipulationUpdatedEventArgs const &>(static_cast<T const &>(*this))->get_Velocities(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationInertiaStartingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<IManipulationInertiaStartingEventArgs const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationInertiaStartingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IManipulationInertiaStartingEventArgs const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationInertiaStartingEventArgs<T>::Delta() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(static_cast<IManipulationInertiaStartingEventArgs const &>(static_cast<T const &>(*this))->get_Delta(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationInertiaStartingEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(static_cast<IManipulationInertiaStartingEventArgs const &>(static_cast<T const &>(*this))->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationVelocities impl_IManipulationInertiaStartingEventArgs<T>::Velocities() const
{
	Windows::UI::Input::ManipulationVelocities value = {};
	check(static_cast<IManipulationInertiaStartingEventArgs const &>(static_cast<T const &>(*this))->get_Velocities(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationCompletedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<IManipulationCompletedEventArgs const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationCompletedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IManipulationCompletedEventArgs const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationCompletedEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(static_cast<IManipulationCompletedEventArgs const &>(static_cast<T const &>(*this))->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationVelocities impl_IManipulationCompletedEventArgs<T>::Velocities() const
{
	Windows::UI::Input::ManipulationVelocities value = {};
	check(static_cast<IManipulationCompletedEventArgs const &>(static_cast<T const &>(*this))->get_Velocities(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_ICrossSlidingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(static_cast<ICrossSlidingEventArgs const &>(static_cast<T const &>(*this))->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ICrossSlidingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<ICrossSlidingEventArgs const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::CrossSlidingState impl_ICrossSlidingEventArgs<T>::CrossSlidingState() const
{
	Windows::UI::Input::CrossSlidingState value = {};
	check(static_cast<ICrossSlidingEventArgs const &>(static_cast<T const &>(*this))->get_CrossSlidingState(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IMouseWheelParameters<T>::CharTranslation() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IMouseWheelParameters const &>(static_cast<T const &>(*this))->get_CharTranslation(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::CharTranslation(Windows::Foundation::Point const & value) const
{
	check(static_cast<IMouseWheelParameters const &>(static_cast<T const &>(*this))->put_CharTranslation(value));
}

template <typename T> float impl_IMouseWheelParameters<T>::DeltaScale() const
{
	float value = {};
	check(static_cast<IMouseWheelParameters const &>(static_cast<T const &>(*this))->get_DeltaScale(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::DeltaScale(float const value) const
{
	check(static_cast<IMouseWheelParameters const &>(static_cast<T const &>(*this))->put_DeltaScale(value));
}

template <typename T> float impl_IMouseWheelParameters<T>::DeltaRotationAngle() const
{
	float value = {};
	check(static_cast<IMouseWheelParameters const &>(static_cast<T const &>(*this))->get_DeltaRotationAngle(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::DeltaRotationAngle(float const value) const
{
	check(static_cast<IMouseWheelParameters const &>(static_cast<T const &>(*this))->put_DeltaRotationAngle(value));
}

template <typename T> Windows::Foundation::Point impl_IMouseWheelParameters<T>::PageTranslation() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IMouseWheelParameters const &>(static_cast<T const &>(*this))->get_PageTranslation(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::PageTranslation(Windows::Foundation::Point const & value) const
{
	check(static_cast<IMouseWheelParameters const &>(static_cast<T const &>(*this))->put_PageTranslation(value));
}

template <typename T> Windows::UI::Input::GestureSettings impl_IGestureRecognizer<T>::GestureSettings() const
{
	Windows::UI::Input::GestureSettings value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_GestureSettings(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::GestureSettings(Windows::UI::Input::GestureSettings const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_GestureSettings(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::IsInertial() const
{
	bool value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_IsInertial(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IGestureRecognizer<T>::IsActive() const
{
	bool value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_IsActive(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IGestureRecognizer<T>::ShowGestureFeedback() const
{
	bool value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_ShowGestureFeedback(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::ShowGestureFeedback(bool const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_ShowGestureFeedback(value));
}

template <typename T> Windows::Foundation::Point impl_IGestureRecognizer<T>::PivotCenter() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_PivotCenter(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::PivotCenter(Windows::Foundation::Point const & value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_PivotCenter(value));
}

template <typename T> float impl_IGestureRecognizer<T>::PivotRadius() const
{
	float value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_PivotRadius(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::PivotRadius(float const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_PivotRadius(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaTranslationDeceleration() const
{
	float value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_InertiaTranslationDeceleration(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaTranslationDeceleration(float const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_InertiaTranslationDeceleration(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaRotationDeceleration() const
{
	float value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_InertiaRotationDeceleration(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaRotationDeceleration(float const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_InertiaRotationDeceleration(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaExpansionDeceleration() const
{
	float value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_InertiaExpansionDeceleration(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaExpansionDeceleration(float const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_InertiaExpansionDeceleration(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaTranslationDisplacement() const
{
	float value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_InertiaTranslationDisplacement(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaTranslationDisplacement(float const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_InertiaTranslationDisplacement(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaRotationAngle() const
{
	float value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_InertiaRotationAngle(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaRotationAngle(float const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_InertiaRotationAngle(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaExpansion() const
{
	float value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_InertiaExpansion(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaExpansion(float const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_InertiaExpansion(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::ManipulationExact() const
{
	bool value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_ManipulationExact(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationExact(bool const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_ManipulationExact(value));
}

template <typename T> Windows::UI::Input::CrossSlideThresholds impl_IGestureRecognizer<T>::CrossSlideThresholds() const
{
	Windows::UI::Input::CrossSlideThresholds value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_CrossSlideThresholds(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSlideThresholds(Windows::UI::Input::CrossSlideThresholds const & value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_CrossSlideThresholds(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::CrossSlideHorizontally() const
{
	bool value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_CrossSlideHorizontally(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSlideHorizontally(bool const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_CrossSlideHorizontally(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::CrossSlideExact() const
{
	bool value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_CrossSlideExact(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSlideExact(bool const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_CrossSlideExact(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::AutoProcessInertia() const
{
	bool value = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_AutoProcessInertia(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::AutoProcessInertia(bool const value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->put_AutoProcessInertia(value));
}

template <typename T> Windows::UI::Input::MouseWheelParameters impl_IGestureRecognizer<T>::MouseWheelParameters() const
{
	Windows::UI::Input::MouseWheelParameters value(nullptr);
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->get_MouseWheelParameters(set(value)));
	return value;
}

template <typename T> bool impl_IGestureRecognizer<T>::CanBeDoubleTap(Windows::UI::Input::PointerPoint const & value) const
{
	bool canBeDoubleTap = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->abi_CanBeDoubleTap(get(value), BoolProxy(canBeDoubleTap)));
	return canBeDoubleTap;
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessDownEvent(Windows::UI::Input::PointerPoint const & value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->abi_ProcessDownEvent(get(value)));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessMoveEvents(Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> const & value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->abi_ProcessMoveEvents(get(value)));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessUpEvent(Windows::UI::Input::PointerPoint const & value) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->abi_ProcessUpEvent(get(value)));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessMouseWheelEvent(Windows::UI::Input::PointerPoint const & value, bool const isShiftKeyDown, bool const isControlKeyDown) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->abi_ProcessMouseWheelEvent(get(value), isShiftKeyDown, isControlKeyDown));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessInertia() const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->abi_ProcessInertia());
}

template <typename T> void impl_IGestureRecognizer<T>::CompleteGesture() const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->abi_CompleteGesture());
}

template <typename T> EventRegistrationToken impl_IGestureRecognizer<T>::Tapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::TappedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->add_Tapped(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGestureRecognizer<T>::Tapped(F handler) const
{
	return Tapped(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::TappedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::Tapped(EventRegistrationToken const cookie) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->remove_Tapped(cookie));
}

template <typename T> EventRegistrationToken impl_IGestureRecognizer<T>::RightTapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::RightTappedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->add_RightTapped(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGestureRecognizer<T>::RightTapped(F handler) const
{
	return RightTapped(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::RightTappedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::RightTapped(EventRegistrationToken const cookie) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->remove_RightTapped(cookie));
}

template <typename T> EventRegistrationToken impl_IGestureRecognizer<T>::Holding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::HoldingEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->add_Holding(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGestureRecognizer<T>::Holding(F handler) const
{
	return Holding(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::HoldingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::Holding(EventRegistrationToken const cookie) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->remove_Holding(cookie));
}

template <typename T> EventRegistrationToken impl_IGestureRecognizer<T>::Dragging(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::DraggingEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->add_Dragging(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGestureRecognizer<T>::Dragging(F handler) const
{
	return Dragging(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::DraggingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::Dragging(EventRegistrationToken const cookie) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->remove_Dragging(cookie));
}

template <typename T> EventRegistrationToken impl_IGestureRecognizer<T>::ManipulationStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationStartedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->add_ManipulationStarted(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGestureRecognizer<T>::ManipulationStarted(F handler) const
{
	return ManipulationStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationStartedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationStarted(EventRegistrationToken const cookie) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->remove_ManipulationStarted(cookie));
}

template <typename T> EventRegistrationToken impl_IGestureRecognizer<T>::ManipulationUpdated(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationUpdatedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->add_ManipulationUpdated(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGestureRecognizer<T>::ManipulationUpdated(F handler) const
{
	return ManipulationUpdated(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationUpdatedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationUpdated(EventRegistrationToken const cookie) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->remove_ManipulationUpdated(cookie));
}

template <typename T> EventRegistrationToken impl_IGestureRecognizer<T>::ManipulationInertiaStarting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationInertiaStartingEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->add_ManipulationInertiaStarting(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGestureRecognizer<T>::ManipulationInertiaStarting(F handler) const
{
	return ManipulationInertiaStarting(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationInertiaStartingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationInertiaStarting(EventRegistrationToken const cookie) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->remove_ManipulationInertiaStarting(cookie));
}

template <typename T> EventRegistrationToken impl_IGestureRecognizer<T>::ManipulationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationCompletedEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->add_ManipulationCompleted(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGestureRecognizer<T>::ManipulationCompleted(F handler) const
{
	return ManipulationCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationCompletedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationCompleted(EventRegistrationToken const cookie) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->remove_ManipulationCompleted(cookie));
}

template <typename T> EventRegistrationToken impl_IGestureRecognizer<T>::CrossSliding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::CrossSlidingEventArgs> const & handler) const
{
	EventRegistrationToken pCookie = {};
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->add_CrossSliding(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IGestureRecognizer<T>::CrossSliding(F handler) const
{
	return CrossSliding(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::CrossSlidingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSliding(EventRegistrationToken const cookie) const
{
	check(static_cast<IGestureRecognizer const &>(static_cast<T const &>(*this))->remove_CrossSliding(cookie));
}

template <typename T> Windows::UI::Input::PointerPoint impl_IPointerPointStatics<T>::GetCurrentPoint(unsigned const pointerId) const
{
	Windows::UI::Input::PointerPoint pointerPoint(nullptr);
	check(static_cast<IPointerPointStatics const &>(static_cast<T const &>(*this))->abi_GetCurrentPoint(pointerId, set(pointerPoint)));
	return pointerPoint;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> impl_IPointerPointStatics<T>::GetIntermediatePoints(unsigned const pointerId) const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> pointerPoints = {};
	check(static_cast<IPointerPointStatics const &>(static_cast<T const &>(*this))->abi_GetIntermediatePoints(pointerId, set(pointerPoints)));
	return pointerPoints;
}

template <typename T> Windows::UI::Input::PointerPoint impl_IPointerPointStatics<T>::GetCurrentPoint(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const
{
	Windows::UI::Input::PointerPoint pointerPoint(nullptr);
	check(static_cast<IPointerPointStatics const &>(static_cast<T const &>(*this))->abi_GetCurrentPointTransformed(pointerId, get(transform), set(pointerPoint)));
	return pointerPoint;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> impl_IPointerPointStatics<T>::GetIntermediatePoints(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> pointerPoints = {};
	check(static_cast<IPointerPointStatics const &>(static_cast<T const &>(*this))->abi_GetIntermediatePointsTransformed(pointerId, get(transform), set(pointerPoints)));
	return pointerPoints;
}

template <typename T> Windows::UI::Input::IPointerPointTransform impl_IPointerPointTransform<T>::Inverse() const
{
	Windows::UI::Input::IPointerPointTransform value = {};
	check(static_cast<IPointerPointTransform const &>(static_cast<T const &>(*this))->get_Inverse(set(value)));
	return value;
}

template <typename T> bool impl_IPointerPointTransform<T>::TryTransform(Windows::Foundation::Point const & inPoint, Windows::Foundation::Point & outPoint) const
{
	bool returnValue = {};
	check(static_cast<IPointerPointTransform const &>(static_cast<T const &>(*this))->abi_TryTransform(inPoint, &outPoint, BoolProxy(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::Rect impl_IPointerPointTransform<T>::TransformBounds(Windows::Foundation::Rect const & rect) const
{
	Windows::Foundation::Rect returnValue = {};
	check(static_cast<IPointerPointTransform const &>(static_cast<T const &>(*this))->abi_TransformBounds(rect, &returnValue));
	return returnValue;
}

template <typename T> Windows::Devices::Input::PointerDevice impl_IPointerPoint<T>::PointerDevice() const
{
	Windows::Devices::Input::PointerDevice value(nullptr);
	check(static_cast<IPointerPoint const &>(static_cast<T const &>(*this))->get_PointerDevice(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPointerPoint<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IPointerPoint const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPointerPoint<T>::RawPosition() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IPointerPoint const &>(static_cast<T const &>(*this))->get_RawPosition(&value));
	return value;
}

template <typename T> unsigned impl_IPointerPoint<T>::PointerId() const
{
	unsigned value = {};
	check(static_cast<IPointerPoint const &>(static_cast<T const &>(*this))->get_PointerId(&value));
	return value;
}

template <typename T> unsigned impl_IPointerPoint<T>::FrameId() const
{
	unsigned value = {};
	check(static_cast<IPointerPoint const &>(static_cast<T const &>(*this))->get_FrameId(&value));
	return value;
}

template <typename T> unsigned long long impl_IPointerPoint<T>::Timestamp() const
{
	unsigned long long value = {};
	check(static_cast<IPointerPoint const &>(static_cast<T const &>(*this))->get_Timestamp(&value));
	return value;
}

template <typename T> bool impl_IPointerPoint<T>::IsInContact() const
{
	bool value = {};
	check(static_cast<IPointerPoint const &>(static_cast<T const &>(*this))->get_IsInContact(BoolProxy(value)));
	return value;
}

template <typename T> Windows::UI::Input::PointerPointProperties impl_IPointerPoint<T>::Properties() const
{
	Windows::UI::Input::PointerPointProperties value(nullptr);
	check(static_cast<IPointerPoint const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::Pressure() const
{
	float value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_Pressure(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsInverted() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsInverted(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsEraser() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsEraser(BoolProxy(value)));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::Orientation() const
{
	float value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_Orientation(&value));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::XTilt() const
{
	float value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_XTilt(&value));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::YTilt() const
{
	float value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_YTilt(&value));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::Twist() const
{
	float value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_Twist(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerPointProperties<T>::ContactRect() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_ContactRect(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerPointProperties<T>::ContactRectRaw() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_ContactRectRaw(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::TouchConfidence() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_TouchConfidence(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsLeftButtonPressed() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsLeftButtonPressed(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsRightButtonPressed() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsRightButtonPressed(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsMiddleButtonPressed() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsMiddleButtonPressed(BoolProxy(value)));
	return value;
}

template <typename T> int impl_IPointerPointProperties<T>::MouseWheelDelta() const
{
	int value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_MouseWheelDelta(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsHorizontalMouseWheel() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsHorizontalMouseWheel(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsPrimary() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsPrimary(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsInRange() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsInRange(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsCanceled() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsCanceled(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsBarrelButtonPressed() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsBarrelButtonPressed(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsXButton1Pressed() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsXButton1Pressed(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsXButton2Pressed() const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_IsXButton2Pressed(BoolProxy(value)));
	return value;
}

template <typename T> Windows::UI::Input::PointerUpdateKind impl_IPointerPointProperties<T>::PointerUpdateKind() const
{
	Windows::UI::Input::PointerUpdateKind value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->get_PointerUpdateKind(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::HasUsage(unsigned const usagePage, unsigned const usageId) const
{
	bool value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->abi_HasUsage(usagePage, usageId, BoolProxy(value)));
	return value;
}

template <typename T> int impl_IPointerPointProperties<T>::GetUsageValue(unsigned const usagePage, unsigned const usageId) const
{
	int value = {};
	check(static_cast<IPointerPointProperties const &>(static_cast<T const &>(*this))->abi_GetUsageValue(usagePage, usageId, &value));
	return value;
}

template <typename T> void impl_IPointerVisualizationSettings<T>::IsContactFeedbackEnabled(bool const value) const
{
	check(static_cast<IPointerVisualizationSettings const &>(static_cast<T const &>(*this))->put_IsContactFeedbackEnabled(value));
}

template <typename T> bool impl_IPointerVisualizationSettings<T>::IsContactFeedbackEnabled() const
{
	bool value = {};
	check(static_cast<IPointerVisualizationSettings const &>(static_cast<T const &>(*this))->get_IsContactFeedbackEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IPointerVisualizationSettings<T>::IsBarrelButtonFeedbackEnabled(bool const value) const
{
	check(static_cast<IPointerVisualizationSettings const &>(static_cast<T const &>(*this))->put_IsBarrelButtonFeedbackEnabled(value));
}

template <typename T> bool impl_IPointerVisualizationSettings<T>::IsBarrelButtonFeedbackEnabled() const
{
	bool value = {};
	check(static_cast<IPointerVisualizationSettings const &>(static_cast<T const &>(*this))->get_IsBarrelButtonFeedbackEnabled(BoolProxy(value)));
	return value;
}

template <typename T> Windows::UI::Input::PointerVisualizationSettings impl_IPointerVisualizationSettingsStatics<T>::GetForCurrentView() const
{
	Windows::UI::Input::PointerVisualizationSettings visualizationSettings(nullptr);
	check(static_cast<IPointerVisualizationSettingsStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(visualizationSettings)));
	return visualizationSettings;
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

template <typename T> Windows::UI::Color impl_IInkDrawingAttributes<T>::Color() const
{
	Windows::UI::Color value = {};
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->get_Color(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::Color(Windows::UI::Color const & value) const
{
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->put_Color(value));
}

template <typename T> Windows::UI::Input::Inking::PenTipShape impl_IInkDrawingAttributes<T>::PenTip() const
{
	Windows::UI::Input::Inking::PenTipShape value = {};
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->get_PenTip(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::PenTip(Windows::UI::Input::Inking::PenTipShape const value) const
{
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->put_PenTip(value));
}

template <typename T> Windows::Foundation::Size impl_IInkDrawingAttributes<T>::Size() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->get_Size(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::Size(Windows::Foundation::Size const & value) const
{
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->put_Size(value));
}

template <typename T> bool impl_IInkDrawingAttributes<T>::IgnorePressure() const
{
	bool value = {};
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->get_IgnorePressure(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::IgnorePressure(bool const value) const
{
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->put_IgnorePressure(value));
}

template <typename T> bool impl_IInkDrawingAttributes<T>::FitToCurve() const
{
	bool value = {};
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->get_FitToCurve(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::FitToCurve(bool const value) const
{
	check(static_cast<IInkDrawingAttributes const &>(static_cast<T const &>(*this))->put_FitToCurve(value));
}

template <typename T> Windows::Foundation::Point impl_IInkStrokeRenderingSegment<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IInkStrokeRenderingSegment const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IInkStrokeRenderingSegment<T>::BezierControlPoint1() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IInkStrokeRenderingSegment const &>(static_cast<T const &>(*this))->get_BezierControlPoint1(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IInkStrokeRenderingSegment<T>::BezierControlPoint2() const
{
	Windows::Foundation::Point value = {};
	check(static_cast<IInkStrokeRenderingSegment const &>(static_cast<T const &>(*this))->get_BezierControlPoint2(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::Pressure() const
{
	float value = {};
	check(static_cast<IInkStrokeRenderingSegment const &>(static_cast<T const &>(*this))->get_Pressure(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::TiltX() const
{
	float value = {};
	check(static_cast<IInkStrokeRenderingSegment const &>(static_cast<T const &>(*this))->get_TiltX(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::TiltY() const
{
	float value = {};
	check(static_cast<IInkStrokeRenderingSegment const &>(static_cast<T const &>(*this))->get_TiltY(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::Twist() const
{
	float value = {};
	check(static_cast<IInkStrokeRenderingSegment const &>(static_cast<T const &>(*this))->get_Twist(&value));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkStroke<T>::DrawingAttributes() const
{
	Windows::UI::Input::Inking::InkDrawingAttributes value(nullptr);
	check(static_cast<IInkStroke const &>(static_cast<T const &>(*this))->get_DrawingAttributes(set(value)));
	return value;
}

template <typename T> void impl_IInkStroke<T>::DrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & value) const
{
	check(static_cast<IInkStroke const &>(static_cast<T const &>(*this))->put_DrawingAttributes(get(value)));
}

template <typename T> Windows::Foundation::Rect impl_IInkStroke<T>::BoundingRect() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IInkStroke const &>(static_cast<T const &>(*this))->get_BoundingRect(&value));
	return value;
}

template <typename T> bool impl_IInkStroke<T>::Selected() const
{
	bool value = {};
	check(static_cast<IInkStroke const &>(static_cast<T const &>(*this))->get_Selected(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IInkStroke<T>::Selected(bool const value) const
{
	check(static_cast<IInkStroke const &>(static_cast<T const &>(*this))->put_Selected(value));
}

template <typename T> bool impl_IInkStroke<T>::Recognized() const
{
	bool value = {};
	check(static_cast<IInkStroke const &>(static_cast<T const &>(*this))->get_Recognized(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStrokeRenderingSegment> impl_IInkStroke<T>::GetRenderingSegments() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStrokeRenderingSegment> renderingSegments = {};
	check(static_cast<IInkStroke const &>(static_cast<T const &>(*this))->abi_GetRenderingSegments(set(renderingSegments)));
	return renderingSegments;
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStroke<T>::Clone() const
{
	Windows::UI::Input::Inking::InkStroke clonedStroke(nullptr);
	check(static_cast<IInkStroke const &>(static_cast<T const &>(*this))->abi_Clone(set(clonedStroke)));
	return clonedStroke;
}

template <typename T> void impl_IInkStrokeBuilder<T>::BeginStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	check(static_cast<IInkStrokeBuilder const &>(static_cast<T const &>(*this))->abi_BeginStroke(get(pointerPoint)));
}

template <typename T> Windows::UI::Input::PointerPoint impl_IInkStrokeBuilder<T>::AppendToStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	Windows::UI::Input::PointerPoint previousPointerPoint(nullptr);
	check(static_cast<IInkStrokeBuilder const &>(static_cast<T const &>(*this))->abi_AppendToStroke(get(pointerPoint), set(previousPointerPoint)));
	return previousPointerPoint;
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStrokeBuilder<T>::EndStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	Windows::UI::Input::Inking::InkStroke stroke(nullptr);
	check(static_cast<IInkStrokeBuilder const &>(static_cast<T const &>(*this))->abi_EndStroke(get(pointerPoint), set(stroke)));
	return stroke;
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStrokeBuilder<T>::CreateStroke(Windows::Foundation::Collections::IIterable<Modern::Windows::Foundation::Point> const & points) const
{
	Windows::UI::Input::Inking::InkStroke stroke(nullptr);
	check(static_cast<IInkStrokeBuilder const &>(static_cast<T const &>(*this))->abi_CreateStroke(get(points), set(stroke)));
	return stroke;
}

template <typename T> void impl_IInkStrokeBuilder<T>::SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const
{
	check(static_cast<IInkStrokeBuilder const &>(static_cast<T const &>(*this))->abi_SetDefaultDrawingAttributes(get(drawingAttributes)));
}

template <typename T> Windows::Foundation::Rect impl_IInkRecognitionResult<T>::BoundingRect() const
{
	Windows::Foundation::Rect boundingRect = {};
	check(static_cast<IInkRecognitionResult const &>(static_cast<T const &>(*this))->get_BoundingRect(&boundingRect));
	return boundingRect;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IInkRecognitionResult<T>::GetTextCandidates() const
{
	Windows::Foundation::Collections::IVectorView<String> textCandidates = {};
	check(static_cast<IInkRecognitionResult const &>(static_cast<T const &>(*this))->abi_GetTextCandidates(set(textCandidates)));
	return textCandidates;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkRecognitionResult<T>::GetStrokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> strokes = {};
	check(static_cast<IInkRecognitionResult const &>(static_cast<T const &>(*this))->abi_GetStrokes(set(strokes)));
	return strokes;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::BoundingRect() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->get_BoundingRect(&value));
	return value;
}

template <typename T> void impl_IInkStrokeContainer<T>::AddStroke(Windows::UI::Input::Inking::InkStroke const & stroke) const
{
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_AddStroke(get(stroke)));
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::DeleteSelected() const
{
	Windows::Foundation::Rect invalidatedRect = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_DeleteSelected(&invalidatedRect));
	return invalidatedRect;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::MoveSelected(Windows::Foundation::Point const & translation) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_MoveSelected(translation, &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::SelectWithPolyLine(Windows::Foundation::Collections::IIterable<Modern::Windows::Foundation::Point> const & polyline) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_SelectWithPolyLine(get(polyline), &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::SelectWithLine(Windows::Foundation::Point const & from, Windows::Foundation::Point const & to) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_SelectWithLine(from, to, &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> void impl_IInkStrokeContainer<T>::CopySelectedToClipboard() const
{
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_CopySelectedToClipboard());
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::PasteFromClipboard(Windows::Foundation::Point const & position) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_PasteFromClipboard(position, &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> bool impl_IInkStrokeContainer<T>::CanPasteFromClipboard() const
{
	bool canPaste = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_CanPasteFromClipboard(BoolProxy(canPaste)));
	return canPaste;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<unsigned long long> impl_IInkStrokeContainer<T>::LoadAsync(Windows::Storage::Streams::IInputStream const & inputStream) const
{
	Windows::Foundation::IAsyncActionWithProgress<unsigned long long> loadAction = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_LoadAsync(get(inputStream), set(loadAction)));
	return loadAction;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> impl_IInkStrokeContainer<T>::SaveAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> outputStreamOperation = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_SaveAsync(get(outputStream), set(outputStreamOperation)));
	return outputStreamOperation;
}

template <typename T> void impl_IInkStrokeContainer<T>::UpdateRecognitionResults(Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> const & recognitionResults) const
{
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_UpdateRecognitionResults(get(recognitionResults)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkStrokeContainer<T>::GetStrokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> strokeView = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_GetStrokes(set(strokeView)));
	return strokeView;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> impl_IInkStrokeContainer<T>::GetRecognitionResults() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> recognitionResults = {};
	check(static_cast<IInkStrokeContainer const &>(static_cast<T const &>(*this))->abi_GetRecognitionResults(set(recognitionResults)));
	return recognitionResults;
}

template <typename T> String impl_IInkRecognizer<T>::Name() const
{
	String value = {};
	check(static_cast<IInkRecognizer const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> void impl_IInkRecognizerContainer<T>::SetDefaultRecognizer(Windows::UI::Input::Inking::InkRecognizer const & recognizer) const
{
	check(static_cast<IInkRecognizerContainer const &>(static_cast<T const &>(*this))->abi_SetDefaultRecognizer(get(recognizer)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> impl_IInkRecognizerContainer<T>::RecognizeAsync(Windows::UI::Input::Inking::InkStrokeContainer const & strokeCollection, Windows::UI::Input::Inking::InkRecognitionTarget const recognitionTarget) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> recognitionResults = {};
	check(static_cast<IInkRecognizerContainer const &>(static_cast<T const &>(*this))->abi_RecognizeAsync(get(strokeCollection), recognitionTarget, set(recognitionResults)));
	return recognitionResults;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognizer> impl_IInkRecognizerContainer<T>::GetRecognizers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognizer> recognizerView = {};
	check(static_cast<IInkRecognizerContainer const &>(static_cast<T const &>(*this))->abi_GetRecognizers(set(recognizerView)));
	return recognizerView;
}

template <typename T> Windows::UI::Input::Inking::InkManipulationMode impl_IInkManager<T>::Mode() const
{
	Windows::UI::Input::Inking::InkManipulationMode value = {};
	check(static_cast<IInkManager const &>(static_cast<T const &>(*this))->get_Mode(&value));
	return value;
}

template <typename T> void impl_IInkManager<T>::Mode(Windows::UI::Input::Inking::InkManipulationMode const value) const
{
	check(static_cast<IInkManager const &>(static_cast<T const &>(*this))->put_Mode(value));
}

template <typename T> void impl_IInkManager<T>::ProcessPointerDown(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	check(static_cast<IInkManager const &>(static_cast<T const &>(*this))->abi_ProcessPointerDown(get(pointerPoint)));
}

template <typename T> IInspectable impl_IInkManager<T>::ProcessPointerUpdate(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	IInspectable updateInformation = {};
	check(static_cast<IInkManager const &>(static_cast<T const &>(*this))->abi_ProcessPointerUpdate(get(pointerPoint), set(updateInformation)));
	return updateInformation;
}

template <typename T> Windows::Foundation::Rect impl_IInkManager<T>::ProcessPointerUp(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	Windows::Foundation::Rect updateRectangle = {};
	check(static_cast<IInkManager const &>(static_cast<T const &>(*this))->abi_ProcessPointerUp(get(pointerPoint), &updateRectangle));
	return updateRectangle;
}

template <typename T> void impl_IInkManager<T>::SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const
{
	check(static_cast<IInkManager const &>(static_cast<T const &>(*this))->abi_SetDefaultDrawingAttributes(get(drawingAttributes)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> impl_IInkManager<T>::RecognizeAsync(Windows::UI::Input::Inking::InkRecognitionTarget const recognitionTarget) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> recognitionResults = {};
	check(static_cast<IInkManager const &>(static_cast<T const &>(*this))->abi_RecognizeAsync2(recognitionTarget, set(recognitionResults)));
	return recognitionResults;
}

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

template <typename T> Windows::UI::Notifications::ToastDismissalReason impl_IToastDismissedEventArgs<T>::Reason() const
{
	Windows::UI::Notifications::ToastDismissalReason value = {};
	check(static_cast<IToastDismissedEventArgs const &>(static_cast<T const &>(*this))->get_Reason(&value));
	return value;
}

template <typename T> HRESULT impl_IToastFailedEventArgs<T>::ErrorCode() const
{
	HRESULT value = {};
	check(static_cast<IToastFailedEventArgs const &>(static_cast<T const &>(*this))->get_ErrorCode(&value));
	return value;
}

template <typename T> String impl_IToastActivatedEventArgs<T>::Arguments() const
{
	String value = {};
	check(static_cast<IToastActivatedEventArgs const &>(static_cast<T const &>(*this))->get_Arguments(set(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::TileUpdater impl_ITileUpdateManagerStatics<T>::CreateTileUpdaterForApplication() const
{
	Windows::UI::Notifications::TileUpdater updater(nullptr);
	check(static_cast<ITileUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateTileUpdaterForApplication(set(updater)));
	return updater;
}

template <typename T> Windows::UI::Notifications::TileUpdater impl_ITileUpdateManagerStatics<T>::CreateTileUpdaterForApplication(String const & applicationId) const
{
	Windows::UI::Notifications::TileUpdater updater(nullptr);
	check(static_cast<ITileUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateTileUpdaterForApplicationWithId(get(applicationId), set(updater)));
	return updater;
}

template <typename T> template <unsigned S0> Windows::UI::Notifications::TileUpdater impl_ITileUpdateManagerStatics<T>::CreateTileUpdaterForApplication(wchar_t const (&applicationId)[S0]) const
{
	Windows::UI::Notifications::TileUpdater updater(nullptr);
	check(static_cast<ITileUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateTileUpdaterForApplicationWithId(StringReference(applicationId), set(updater)));
	return updater;
}

template <typename T> Windows::UI::Notifications::TileUpdater impl_ITileUpdateManagerStatics<T>::CreateTileUpdaterForSecondaryTile(String const & tileId) const
{
	Windows::UI::Notifications::TileUpdater updater(nullptr);
	check(static_cast<ITileUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateTileUpdaterForSecondaryTile(get(tileId), set(updater)));
	return updater;
}

template <typename T> template <unsigned S0> Windows::UI::Notifications::TileUpdater impl_ITileUpdateManagerStatics<T>::CreateTileUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]) const
{
	Windows::UI::Notifications::TileUpdater updater(nullptr);
	check(static_cast<ITileUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateTileUpdaterForSecondaryTile(StringReference(tileId), set(updater)));
	return updater;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_ITileUpdateManagerStatics<T>::GetTemplateContent(Windows::UI::Notifications::TileTemplateType const type) const
{
	Windows::Data::Xml::Dom::XmlDocument content(nullptr);
	check(static_cast<ITileUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_GetTemplateContent(type, set(content)));
	return content;
}

template <typename T> void impl_ITileUpdater<T>::Update(Windows::UI::Notifications::TileNotification const & notification) const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_Update(get(notification)));
}

template <typename T> void impl_ITileUpdater<T>::Clear() const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_Clear());
}

template <typename T> void impl_ITileUpdater<T>::EnableNotificationQueue(bool const enable) const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_EnableNotificationQueue(enable));
}

template <typename T> Windows::UI::Notifications::NotificationSetting impl_ITileUpdater<T>::Setting() const
{
	Windows::UI::Notifications::NotificationSetting value = {};
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->get_Setting(&value));
	return value;
}

template <typename T> void impl_ITileUpdater<T>::AddToSchedule(Windows::UI::Notifications::ScheduledTileNotification const & scheduledTile) const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_AddToSchedule(get(scheduledTile)));
}

template <typename T> void impl_ITileUpdater<T>::RemoveFromSchedule(Windows::UI::Notifications::ScheduledTileNotification const & scheduledTile) const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_RemoveFromSchedule(get(scheduledTile)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledTileNotification> impl_ITileUpdater<T>::GetScheduledTileNotifications() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledTileNotification> scheduledTiles = {};
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_GetScheduledTileNotifications(set(scheduledTiles)));
	return scheduledTiles;
}

template <typename T> void impl_ITileUpdater<T>::StartPeriodicUpdate(Windows::Foundation::Uri const & tileContent, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_StartPeriodicUpdate(get(tileContent), requestedInterval));
}

template <typename T> void impl_ITileUpdater<T>::StartPeriodicUpdate(Windows::Foundation::Uri const & tileContent, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_StartPeriodicUpdateAtTime(get(tileContent), startTime, requestedInterval));
}

template <typename T> void impl_ITileUpdater<T>::StopPeriodicUpdate() const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_StopPeriodicUpdate());
}

template <typename T> void impl_ITileUpdater<T>::StartPeriodicUpdateBatch(Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & tileContents, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_StartPeriodicUpdateBatch(get(tileContents), requestedInterval));
}

template <typename T> void impl_ITileUpdater<T>::StartPeriodicUpdateBatch(Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & tileContents, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(static_cast<ITileUpdater const &>(static_cast<T const &>(*this))->abi_StartPeriodicUpdateBatchAtTime(get(tileContents), startTime, requestedInterval));
}

template <typename T> void impl_ITileUpdater2<T>::EnableNotificationQueueForSquare150x150(bool const enable) const
{
	check(static_cast<ITileUpdater2 const &>(static_cast<T const &>(*this))->abi_EnableNotificationQueueForSquare150x150(enable));
}

template <typename T> void impl_ITileUpdater2<T>::EnableNotificationQueueForWide310x150(bool const enable) const
{
	check(static_cast<ITileUpdater2 const &>(static_cast<T const &>(*this))->abi_EnableNotificationQueueForWide310x150(enable));
}

template <typename T> void impl_ITileUpdater2<T>::EnableNotificationQueueForSquare310x310(bool const enable) const
{
	check(static_cast<ITileUpdater2 const &>(static_cast<T const &>(*this))->abi_EnableNotificationQueueForSquare310x310(enable));
}

template <typename T> Windows::UI::Notifications::BadgeUpdater impl_IBadgeUpdateManagerStatics<T>::CreateBadgeUpdaterForApplication() const
{
	Windows::UI::Notifications::BadgeUpdater updater(nullptr);
	check(static_cast<IBadgeUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateBadgeUpdaterForApplication(set(updater)));
	return updater;
}

template <typename T> Windows::UI::Notifications::BadgeUpdater impl_IBadgeUpdateManagerStatics<T>::CreateBadgeUpdaterForApplication(String const & applicationId) const
{
	Windows::UI::Notifications::BadgeUpdater updater(nullptr);
	check(static_cast<IBadgeUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateBadgeUpdaterForApplicationWithId(get(applicationId), set(updater)));
	return updater;
}

template <typename T> template <unsigned S0> Windows::UI::Notifications::BadgeUpdater impl_IBadgeUpdateManagerStatics<T>::CreateBadgeUpdaterForApplication(wchar_t const (&applicationId)[S0]) const
{
	Windows::UI::Notifications::BadgeUpdater updater(nullptr);
	check(static_cast<IBadgeUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateBadgeUpdaterForApplicationWithId(StringReference(applicationId), set(updater)));
	return updater;
}

template <typename T> Windows::UI::Notifications::BadgeUpdater impl_IBadgeUpdateManagerStatics<T>::CreateBadgeUpdaterForSecondaryTile(String const & tileId) const
{
	Windows::UI::Notifications::BadgeUpdater updater(nullptr);
	check(static_cast<IBadgeUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateBadgeUpdaterForSecondaryTile(get(tileId), set(updater)));
	return updater;
}

template <typename T> template <unsigned S0> Windows::UI::Notifications::BadgeUpdater impl_IBadgeUpdateManagerStatics<T>::CreateBadgeUpdaterForSecondaryTile(wchar_t const (&tileId)[S0]) const
{
	Windows::UI::Notifications::BadgeUpdater updater(nullptr);
	check(static_cast<IBadgeUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateBadgeUpdaterForSecondaryTile(StringReference(tileId), set(updater)));
	return updater;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IBadgeUpdateManagerStatics<T>::GetTemplateContent(Windows::UI::Notifications::BadgeTemplateType const type) const
{
	Windows::Data::Xml::Dom::XmlDocument content(nullptr);
	check(static_cast<IBadgeUpdateManagerStatics const &>(static_cast<T const &>(*this))->abi_GetTemplateContent(type, set(content)));
	return content;
}

template <typename T> void impl_IBadgeUpdater<T>::Update(Windows::UI::Notifications::BadgeNotification const & notification) const
{
	check(static_cast<IBadgeUpdater const &>(static_cast<T const &>(*this))->abi_Update(get(notification)));
}

template <typename T> void impl_IBadgeUpdater<T>::Clear() const
{
	check(static_cast<IBadgeUpdater const &>(static_cast<T const &>(*this))->abi_Clear());
}

template <typename T> void impl_IBadgeUpdater<T>::StartPeriodicUpdate(Windows::Foundation::Uri const & badgeContent, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(static_cast<IBadgeUpdater const &>(static_cast<T const &>(*this))->abi_StartPeriodicUpdate(get(badgeContent), requestedInterval));
}

template <typename T> void impl_IBadgeUpdater<T>::StartPeriodicUpdate(Windows::Foundation::Uri const & badgeContent, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(static_cast<IBadgeUpdater const &>(static_cast<T const &>(*this))->abi_StartPeriodicUpdateAtTime(get(badgeContent), startTime, requestedInterval));
}

template <typename T> void impl_IBadgeUpdater<T>::StopPeriodicUpdate() const
{
	check(static_cast<IBadgeUpdater const &>(static_cast<T const &>(*this))->abi_StopPeriodicUpdate());
}

template <typename T> Windows::UI::Notifications::ToastNotifier impl_IToastNotificationManagerStatics<T>::CreateToastNotifier() const
{
	Windows::UI::Notifications::ToastNotifier notifier(nullptr);
	check(static_cast<IToastNotificationManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateToastNotifier(set(notifier)));
	return notifier;
}

template <typename T> Windows::UI::Notifications::ToastNotifier impl_IToastNotificationManagerStatics<T>::CreateToastNotifier(String const & applicationId) const
{
	Windows::UI::Notifications::ToastNotifier notifier(nullptr);
	check(static_cast<IToastNotificationManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateToastNotifierWithId(get(applicationId), set(notifier)));
	return notifier;
}

template <typename T> template <unsigned S0> Windows::UI::Notifications::ToastNotifier impl_IToastNotificationManagerStatics<T>::CreateToastNotifier(wchar_t const (&applicationId)[S0]) const
{
	Windows::UI::Notifications::ToastNotifier notifier(nullptr);
	check(static_cast<IToastNotificationManagerStatics const &>(static_cast<T const &>(*this))->abi_CreateToastNotifierWithId(StringReference(applicationId), set(notifier)));
	return notifier;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IToastNotificationManagerStatics<T>::GetTemplateContent(Windows::UI::Notifications::ToastTemplateType const type) const
{
	Windows::Data::Xml::Dom::XmlDocument content(nullptr);
	check(static_cast<IToastNotificationManagerStatics const &>(static_cast<T const &>(*this))->abi_GetTemplateContent(type, set(content)));
	return content;
}

template <typename T> void impl_IToastNotifier<T>::Show(Windows::UI::Notifications::ToastNotification const & notification) const
{
	check(static_cast<IToastNotifier const &>(static_cast<T const &>(*this))->abi_Show(get(notification)));
}

template <typename T> void impl_IToastNotifier<T>::Hide(Windows::UI::Notifications::ToastNotification const & notification) const
{
	check(static_cast<IToastNotifier const &>(static_cast<T const &>(*this))->abi_Hide(get(notification)));
}

template <typename T> Windows::UI::Notifications::NotificationSetting impl_IToastNotifier<T>::Setting() const
{
	Windows::UI::Notifications::NotificationSetting value = {};
	check(static_cast<IToastNotifier const &>(static_cast<T const &>(*this))->get_Setting(&value));
	return value;
}

template <typename T> void impl_IToastNotifier<T>::AddToSchedule(Windows::UI::Notifications::ScheduledToastNotification const & scheduledToast) const
{
	check(static_cast<IToastNotifier const &>(static_cast<T const &>(*this))->abi_AddToSchedule(get(scheduledToast)));
}

template <typename T> void impl_IToastNotifier<T>::RemoveFromSchedule(Windows::UI::Notifications::ScheduledToastNotification const & scheduledToast) const
{
	check(static_cast<IToastNotifier const &>(static_cast<T const &>(*this))->abi_RemoveFromSchedule(get(scheduledToast)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledToastNotification> impl_IToastNotifier<T>::GetScheduledToastNotifications() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledToastNotification> scheduledToasts = {};
	check(static_cast<IToastNotifier const &>(static_cast<T const &>(*this))->abi_GetScheduledToastNotifications(set(scheduledToasts)));
	return scheduledToasts;
}

template <typename T> Windows::UI::Notifications::TileNotification impl_ITileNotificationFactory<T>::CreateTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const
{
	Windows::UI::Notifications::TileNotification notification(nullptr);
	check(static_cast<ITileNotificationFactory const &>(static_cast<T const &>(*this))->abi_CreateTileNotification(get(content), set(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_ITileNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value(nullptr);
	check(static_cast<ITileNotification const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

template <typename T> void impl_ITileNotification<T>::ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<ITileNotification const &>(static_cast<T const &>(*this))->put_ExpirationTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_ITileNotification<T>::ExpirationTime() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<ITileNotification const &>(static_cast<T const &>(*this))->get_ExpirationTime(set(value)));
	return value;
}

template <typename T> void impl_ITileNotification<T>::Tag(String const & value) const
{
	check(static_cast<ITileNotification const &>(static_cast<T const &>(*this))->put_Tag(get(value)));
}

template <typename T> template <unsigned S0> void impl_ITileNotification<T>::Tag(wchar_t const (&value)[S0]) const
{
	check(static_cast<ITileNotification const &>(static_cast<T const &>(*this))->put_Tag(StringReference(value)));
}

template <typename T> String impl_ITileNotification<T>::Tag() const
{
	String value = {};
	check(static_cast<ITileNotification const &>(static_cast<T const &>(*this))->get_Tag(set(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::BadgeNotification impl_IBadgeNotificationFactory<T>::CreateBadgeNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const
{
	Windows::UI::Notifications::BadgeNotification notification(nullptr);
	check(static_cast<IBadgeNotificationFactory const &>(static_cast<T const &>(*this))->abi_CreateBadgeNotification(get(content), set(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IBadgeNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value(nullptr);
	check(static_cast<IBadgeNotification const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

template <typename T> void impl_IBadgeNotification<T>::ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IBadgeNotification const &>(static_cast<T const &>(*this))->put_ExpirationTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IBadgeNotification<T>::ExpirationTime() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IBadgeNotification const &>(static_cast<T const &>(*this))->get_ExpirationTime(set(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IToastNotificationFactory<T>::CreateToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const
{
	Windows::UI::Notifications::ToastNotification notification(nullptr);
	check(static_cast<IToastNotificationFactory const &>(static_cast<T const &>(*this))->abi_CreateToastNotification(get(content), set(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IToastNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value(nullptr);
	check(static_cast<IToastNotification const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

template <typename T> void impl_IToastNotification<T>::ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IToastNotification const &>(static_cast<T const &>(*this))->put_ExpirationTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IToastNotification<T>::ExpirationTime() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IToastNotification const &>(static_cast<T const &>(*this))->get_ExpirationTime(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IToastNotification<T>::Dismissed(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastDismissedEventArgs> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IToastNotification const &>(static_cast<T const &>(*this))->add_Dismissed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IToastNotification<T>::Dismissed(F handler) const
{
	return Dismissed(Windows::Foundation::TypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastDismissedEventArgs>(handler));
}

template <typename T> void impl_IToastNotification<T>::Dismissed(EventRegistrationToken const cookie) const
{
	check(static_cast<IToastNotification const &>(static_cast<T const &>(*this))->remove_Dismissed(cookie));
}

template <typename T> EventRegistrationToken impl_IToastNotification<T>::Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, IInspectable> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IToastNotification const &>(static_cast<T const &>(*this))->add_Activated(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IToastNotification<T>::Activated(F handler) const
{
	return Activated(Windows::Foundation::TypedEventHandler<Windows::UI::Notifications::ToastNotification, IInspectable>(handler));
}

template <typename T> void impl_IToastNotification<T>::Activated(EventRegistrationToken const cookie) const
{
	check(static_cast<IToastNotification const &>(static_cast<T const &>(*this))->remove_Activated(cookie));
}

template <typename T> EventRegistrationToken impl_IToastNotification<T>::Failed(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastFailedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IToastNotification const &>(static_cast<T const &>(*this))->add_Failed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IToastNotification<T>::Failed(F handler) const
{
	return Failed(Windows::Foundation::TypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastFailedEventArgs>(handler));
}

template <typename T> void impl_IToastNotification<T>::Failed(EventRegistrationToken const token) const
{
	check(static_cast<IToastNotification const &>(static_cast<T const &>(*this))->remove_Failed(token));
}

template <typename T> Windows::UI::Notifications::ScheduledToastNotification impl_IScheduledToastNotificationFactory<T>::CreateScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) const
{
	Windows::UI::Notifications::ScheduledToastNotification notification(nullptr);
	check(static_cast<IScheduledToastNotificationFactory const &>(static_cast<T const &>(*this))->abi_CreateScheduledToastNotification(get(content), deliveryTime, set(notification)));
	return notification;
}

template <typename T> Windows::UI::Notifications::ScheduledToastNotification impl_IScheduledToastNotificationFactory<T>::CreateScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime, Windows::Foundation::TimeSpan const & snoozeInterval, unsigned const maximumSnoozeCount) const
{
	Windows::UI::Notifications::ScheduledToastNotification notification(nullptr);
	check(static_cast<IScheduledToastNotificationFactory const &>(static_cast<T const &>(*this))->abi_CreateScheduledToastNotificationRecurring(get(content), deliveryTime, snoozeInterval, maximumSnoozeCount, set(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IScheduledToastNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value(nullptr);
	check(static_cast<IScheduledToastNotification const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IScheduledToastNotification<T>::DeliveryTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IScheduledToastNotification const &>(static_cast<T const &>(*this))->get_DeliveryTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> impl_IScheduledToastNotification<T>::SnoozeInterval() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> value = {};
	check(static_cast<IScheduledToastNotification const &>(static_cast<T const &>(*this))->get_SnoozeInterval(set(value)));
	return value;
}

template <typename T> unsigned impl_IScheduledToastNotification<T>::MaximumSnoozeCount() const
{
	unsigned value = {};
	check(static_cast<IScheduledToastNotification const &>(static_cast<T const &>(*this))->get_MaximumSnoozeCount(&value));
	return value;
}

template <typename T> void impl_IScheduledToastNotification<T>::Id(String const & value) const
{
	check(static_cast<IScheduledToastNotification const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> template <unsigned S0> void impl_IScheduledToastNotification<T>::Id(wchar_t const (&value)[S0]) const
{
	check(static_cast<IScheduledToastNotification const &>(static_cast<T const &>(*this))->put_Id(StringReference(value)));
}

template <typename T> String impl_IScheduledToastNotification<T>::Id() const
{
	String value = {};
	check(static_cast<IScheduledToastNotification const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::ScheduledTileNotification impl_IScheduledTileNotificationFactory<T>::CreateScheduledTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) const
{
	Windows::UI::Notifications::ScheduledTileNotification notification(nullptr);
	check(static_cast<IScheduledTileNotificationFactory const &>(static_cast<T const &>(*this))->abi_CreateScheduledTileNotification(get(content), deliveryTime, set(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IScheduledTileNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value(nullptr);
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IScheduledTileNotification<T>::DeliveryTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->get_DeliveryTime(&value));
	return value;
}

template <typename T> void impl_IScheduledTileNotification<T>::ExpirationTime(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->put_ExpirationTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IScheduledTileNotification<T>::ExpirationTime() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->get_ExpirationTime(set(value)));
	return value;
}

template <typename T> void impl_IScheduledTileNotification<T>::Tag(String const & value) const
{
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->put_Tag(get(value)));
}

template <typename T> template <unsigned S0> void impl_IScheduledTileNotification<T>::Tag(wchar_t const (&value)[S0]) const
{
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->put_Tag(StringReference(value)));
}

template <typename T> String impl_IScheduledTileNotification<T>::Tag() const
{
	String value = {};
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->get_Tag(set(value)));
	return value;
}

template <typename T> void impl_IScheduledTileNotification<T>::Id(String const & value) const
{
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> template <unsigned S0> void impl_IScheduledTileNotification<T>::Id(wchar_t const (&value)[S0]) const
{
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->put_Id(StringReference(value)));
}

template <typename T> String impl_IScheduledTileNotification<T>::Id() const
{
	String value = {};
	check(static_cast<IScheduledTileNotification const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

template <typename T> void impl_IUICommandInvokedHandler<T>::Invoke(Windows::UI::Popups::IUICommand const & command) const
{
	check(static_cast<IUICommandInvokedHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(command)));
}

template <typename T> String impl_IMessageDialog<T>::Title() const
{
	String value = {};
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::Title(String const & value) const
{
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMessageDialog<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_IMessageDialog<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value = {};
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->get_Commands(set(value)));
	return value;
}

template <typename T> unsigned impl_IMessageDialog<T>::DefaultCommandIndex() const
{
	unsigned value = {};
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->get_DefaultCommandIndex(&value));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::DefaultCommandIndex(unsigned const value) const
{
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->put_DefaultCommandIndex(value));
}

template <typename T> unsigned impl_IMessageDialog<T>::CancelCommandIndex() const
{
	unsigned value = {};
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->get_CancelCommandIndex(&value));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::CancelCommandIndex(unsigned const value) const
{
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->put_CancelCommandIndex(value));
}

template <typename T> String impl_IMessageDialog<T>::Content() const
{
	String value = {};
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::Content(String const & value) const
{
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->put_Content(get(value)));
}

template <typename T> template <unsigned S0> void impl_IMessageDialog<T>::Content(wchar_t const (&value)[S0]) const
{
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->put_Content(StringReference(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IMessageDialog<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> messageDialogAsyncOperation = {};
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->abi_ShowAsync(set(messageDialogAsyncOperation)));
	return messageDialogAsyncOperation;
}

template <typename T> Windows::UI::Popups::MessageDialogOptions impl_IMessageDialog<T>::Options() const
{
	Windows::UI::Popups::MessageDialogOptions value = {};
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->get_Options(&value));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::Options(Windows::UI::Popups::MessageDialogOptions const value) const
{
	check(static_cast<IMessageDialog const &>(static_cast<T const &>(*this))->put_Options(value));
}

template <typename T> Windows::UI::Popups::MessageDialog impl_IMessageDialogFactory<T>::Create(String const & content) const
{
	Windows::UI::Popups::MessageDialog messageDialog(nullptr);
	check(static_cast<IMessageDialogFactory const &>(static_cast<T const &>(*this))->abi_Create(get(content), set(messageDialog)));
	return messageDialog;
}

template <typename T> template <unsigned S0> Windows::UI::Popups::MessageDialog impl_IMessageDialogFactory<T>::Create(wchar_t const (&content)[S0]) const
{
	Windows::UI::Popups::MessageDialog messageDialog(nullptr);
	check(static_cast<IMessageDialogFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(content), set(messageDialog)));
	return messageDialog;
}

template <typename T> Windows::UI::Popups::MessageDialog impl_IMessageDialogFactory<T>::CreateWithTitle(String const & content, String const & title) const
{
	Windows::UI::Popups::MessageDialog messageDialog(nullptr);
	check(static_cast<IMessageDialogFactory const &>(static_cast<T const &>(*this))->abi_CreateWithTitle(get(content), get(title), set(messageDialog)));
	return messageDialog;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::UI::Popups::MessageDialog impl_IMessageDialogFactory<T>::CreateWithTitle(wchar_t const (&content)[S0], wchar_t const (&title)[S1]) const
{
	Windows::UI::Popups::MessageDialog messageDialog(nullptr);
	check(static_cast<IMessageDialogFactory const &>(static_cast<T const &>(*this))->abi_CreateWithTitle(StringReference(content), StringReference(title), set(messageDialog)));
	return messageDialog;
}

template <typename T> String impl_IUICommand<T>::Label() const
{
	String value = {};
	check(static_cast<IUICommand const &>(static_cast<T const &>(*this))->get_Label(set(value)));
	return value;
}

template <typename T> void impl_IUICommand<T>::Label(String const & value) const
{
	check(static_cast<IUICommand const &>(static_cast<T const &>(*this))->put_Label(get(value)));
}

template <typename T> template <unsigned S0> void impl_IUICommand<T>::Label(wchar_t const (&value)[S0]) const
{
	check(static_cast<IUICommand const &>(static_cast<T const &>(*this))->put_Label(StringReference(value)));
}

template <typename T> Windows::UI::Popups::IUICommandInvokedHandler impl_IUICommand<T>::Invoked() const
{
	Windows::UI::Popups::IUICommandInvokedHandler value = {};
	check(static_cast<IUICommand const &>(static_cast<T const &>(*this))->get_Invoked(set(value)));
	return value;
}

template <typename T> void impl_IUICommand<T>::Invoked(Windows::UI::Popups::IUICommandInvokedHandler const & value) const
{
	check(static_cast<IUICommand const &>(static_cast<T const &>(*this))->put_Invoked(get(value)));
}

template <typename T> template <typename F> void impl_IUICommand<T>::Invoked(F value) const
{
	Invoked(Windows::UI::Popups::UICommandInvokedHandler(value));
}

template <typename T> IInspectable impl_IUICommand<T>::Id() const
{
	IInspectable value = {};
	check(static_cast<IUICommand const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> void impl_IUICommand<T>::Id(IInspectable const & value) const
{
	check(static_cast<IUICommand const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::Create(String const & label) const
{
	Windows::UI::Popups::UICommand instance(nullptr);
	check(static_cast<IUICommandFactory const &>(static_cast<T const &>(*this))->abi_Create(get(label), set(instance)));
	return instance;
}

template <typename T> template <unsigned S0> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::Create(wchar_t const (&label)[S0]) const
{
	Windows::UI::Popups::UICommand instance(nullptr);
	check(static_cast<IUICommandFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(label), set(instance)));
	return instance;
}

template <typename T> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandler(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action) const
{
	Windows::UI::Popups::UICommand instance(nullptr);
	check(static_cast<IUICommandFactory const &>(static_cast<T const &>(*this))->abi_CreateWithHandler(get(label), get(action), set(instance)));
	return instance;
}

template <typename T> template <unsigned S0> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandler(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action) const
{
	Windows::UI::Popups::UICommand instance(nullptr);
	check(static_cast<IUICommandFactory const &>(static_cast<T const &>(*this))->abi_CreateWithHandler(StringReference(label), get(action), set(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandler(String const & label, F action) const
{
	return CreateWithHandler(label, Windows::UI::Popups::UICommandInvokedHandler(action));
}

template <typename T> template <unsigned S0, typename F> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandler(wchar_t const (&label)[S0], F action) const
{
	return CreateWithHandler(label, Windows::UI::Popups::UICommandInvokedHandler(action));
}

template <typename T> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandlerAndId(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) const
{
	Windows::UI::Popups::UICommand instance(nullptr);
	check(static_cast<IUICommandFactory const &>(static_cast<T const &>(*this))->abi_CreateWithHandlerAndId(get(label), get(action), get(commandId), set(instance)));
	return instance;
}

template <typename T> template <unsigned S0> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandlerAndId(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) const
{
	Windows::UI::Popups::UICommand instance(nullptr);
	check(static_cast<IUICommandFactory const &>(static_cast<T const &>(*this))->abi_CreateWithHandlerAndId(StringReference(label), get(action), get(commandId), set(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandlerAndId(String const & label, F action, IInspectable const & commandId) const
{
	return CreateWithHandlerAndId(label, Windows::UI::Popups::UICommandInvokedHandler(action), commandId);
}

template <typename T> template <unsigned S0, typename F> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandlerAndId(wchar_t const (&label)[S0], F action, IInspectable const & commandId) const
{
	return CreateWithHandlerAndId(label, Windows::UI::Popups::UICommandInvokedHandler(action), commandId);
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value = {};
	check(static_cast<IPopupMenu const &>(static_cast<T const &>(*this))->get_Commands(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::ShowAsync(Windows::Foundation::Point const & invocationPoint) const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncOperation = {};
	check(static_cast<IPopupMenu const &>(static_cast<T const &>(*this))->abi_ShowAsync(invocationPoint, set(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::ShowForSelectionAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncOperation = {};
	check(static_cast<IPopupMenu const &>(static_cast<T const &>(*this))->abi_ShowAsyncWithRect(selection, set(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::ShowForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncOperation = {};
	check(static_cast<IPopupMenu const &>(static_cast<T const &>(*this))->abi_ShowAsyncWithRectAndPlacement(selection, preferredPlacement, set(asyncOperation)));
	return asyncOperation;
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

template <typename T> void impl_ISecondaryTile<T>::TileId(String const & value) const
{
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->put_TileId(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISecondaryTile<T>::TileId(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->put_TileId(StringReference(value)));
}

template <typename T> String impl_ISecondaryTile<T>::TileId() const
{
	String value = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->get_TileId(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::Arguments(String const & value) const
{
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->put_Arguments(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISecondaryTile<T>::Arguments(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->put_Arguments(StringReference(value)));
}

template <typename T> String impl_ISecondaryTile<T>::Arguments() const
{
	String value = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->get_Arguments(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::DisplayName(String const & value) const
{
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->put_DisplayName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISecondaryTile<T>::DisplayName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->put_DisplayName(StringReference(value)));
}

template <typename T> String impl_ISecondaryTile<T>::DisplayName() const
{
	String value = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->get_DisplayName(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::LockScreenBadgeLogo(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->put_LockScreenBadgeLogo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTile<T>::LockScreenBadgeLogo() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->get_LockScreenBadgeLogo(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::LockScreenDisplayBadgeAndTileText(bool const value) const
{
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->put_LockScreenDisplayBadgeAndTileText(value));
}

template <typename T> bool impl_ISecondaryTile<T>::LockScreenDisplayBadgeAndTileText() const
{
	bool value = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->get_LockScreenDisplayBadgeAndTileText(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestCreateAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->abi_RequestCreateAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestCreateAsync(Windows::Foundation::Point const & invocationPoint) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->abi_RequestCreateAsyncWithPoint(invocationPoint, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestCreateForSelectionAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->abi_RequestCreateAsyncWithRect(selection, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestCreateForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->abi_RequestCreateAsyncWithRectAndPlacement(selection, preferredPlacement, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestDeleteAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->abi_RequestDeleteAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestDeleteAsync(Windows::Foundation::Point const & invocationPoint) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->abi_RequestDeleteAsyncWithPoint(invocationPoint, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestDeleteForSelectionAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->abi_RequestDeleteAsyncWithRect(selection, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestDeleteForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->abi_RequestDeleteAsyncWithRectAndPlacement(selection, preferredPlacement, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::UpdateAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<ISecondaryTile const &>(static_cast<T const &>(*this))->abi_UpdateAsync(set(operation)));
	return operation;
}

template <typename T> void impl_ISecondaryTile2<T>::PhoneticName(String const & value) const
{
	check(static_cast<ISecondaryTile2 const &>(static_cast<T const &>(*this))->put_PhoneticName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISecondaryTile2<T>::PhoneticName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISecondaryTile2 const &>(static_cast<T const &>(*this))->put_PhoneticName(StringReference(value)));
}

template <typename T> String impl_ISecondaryTile2<T>::PhoneticName() const
{
	String value = {};
	check(static_cast<ISecondaryTile2 const &>(static_cast<T const &>(*this))->get_PhoneticName(set(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTileVisualElements impl_ISecondaryTile2<T>::VisualElements() const
{
	Windows::UI::StartScreen::SecondaryTileVisualElements value(nullptr);
	check(static_cast<ISecondaryTile2 const &>(static_cast<T const &>(*this))->get_VisualElements(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile2<T>::RoamingEnabled(bool const value) const
{
	check(static_cast<ISecondaryTile2 const &>(static_cast<T const &>(*this))->put_RoamingEnabled(value));
}

template <typename T> bool impl_ISecondaryTile2<T>::RoamingEnabled() const
{
	bool value = {};
	check(static_cast<ISecondaryTile2 const &>(static_cast<T const &>(*this))->get_RoamingEnabled(BoolProxy(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_ISecondaryTile2<T>::VisualElementsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::StartScreen::SecondaryTile, Windows::UI::StartScreen::VisualElementsRequestedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<ISecondaryTile2 const &>(static_cast<T const &>(*this))->add_VisualElementsRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_ISecondaryTile2<T>::VisualElementsRequested(F handler) const
{
	return VisualElementsRequested(Windows::Foundation::TypedEventHandler<Windows::UI::StartScreen::SecondaryTile, Windows::UI::StartScreen::VisualElementsRequestedEventArgs>(handler));
}

template <typename T> void impl_ISecondaryTile2<T>::VisualElementsRequested(EventRegistrationToken const token) const
{
	check(static_cast<ISecondaryTile2 const &>(static_cast<T const &>(*this))->remove_VisualElementsRequested(token));
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Square30x30Logo(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_Square30x30Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Square30x30Logo() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_Square30x30Logo(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Square70x70Logo(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_Square70x70Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Square70x70Logo() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_Square70x70Logo(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Square150x150Logo(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_Square150x150Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Square150x150Logo() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_Square150x150Logo(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Wide310x150Logo(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_Wide310x150Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Wide310x150Logo() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_Wide310x150Logo(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Square310x310Logo(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_Square310x310Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Square310x310Logo() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_Square310x310Logo(set(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::ForegroundText(Windows::UI::StartScreen::ForegroundText const value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_ForegroundText(value));
}

template <typename T> Windows::UI::StartScreen::ForegroundText impl_ISecondaryTileVisualElements<T>::ForegroundText() const
{
	Windows::UI::StartScreen::ForegroundText value = {};
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_ForegroundText(&value));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::BackgroundColor(Windows::UI::Color const & value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_BackgroundColor(value));
}

template <typename T> Windows::UI::Color impl_ISecondaryTileVisualElements<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_BackgroundColor(&value));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::ShowNameOnSquare150x150Logo(bool const value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_ShowNameOnSquare150x150Logo(value));
}

template <typename T> bool impl_ISecondaryTileVisualElements<T>::ShowNameOnSquare150x150Logo() const
{
	bool value = {};
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_ShowNameOnSquare150x150Logo(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::ShowNameOnWide310x150Logo(bool const value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_ShowNameOnWide310x150Logo(value));
}

template <typename T> bool impl_ISecondaryTileVisualElements<T>::ShowNameOnWide310x150Logo() const
{
	bool value = {};
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_ShowNameOnWide310x150Logo(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::ShowNameOnSquare310x310Logo(bool const value) const
{
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->put_ShowNameOnSquare310x310Logo(value));
}

template <typename T> bool impl_ISecondaryTileVisualElements<T>::ShowNameOnSquare310x310Logo() const
{
	bool value = {};
	check(static_cast<ISecondaryTileVisualElements const &>(static_cast<T const &>(*this))->get_ShowNameOnSquare310x310Logo(BoolProxy(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTile impl_ISecondaryTileFactory<T>::CreateWithId(String const & tileId) const
{
	Windows::UI::StartScreen::SecondaryTile value(nullptr);
	check(static_cast<ISecondaryTileFactory const &>(static_cast<T const &>(*this))->abi_CreateWithId(get(tileId), set(value)));
	return value;
}

template <typename T> template <unsigned S0> Windows::UI::StartScreen::SecondaryTile impl_ISecondaryTileFactory<T>::CreateWithId(wchar_t const (&tileId)[S0]) const
{
	Windows::UI::StartScreen::SecondaryTile value(nullptr);
	check(static_cast<ISecondaryTileFactory const &>(static_cast<T const &>(*this))->abi_CreateWithId(StringReference(tileId), set(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTile impl_ISecondaryTileFactory2<T>::CreateMinimalTile(String const & tileId, String const & displayName, String const & arguments, Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize const desiredSize) const
{
	Windows::UI::StartScreen::SecondaryTile value(nullptr);
	check(static_cast<ISecondaryTileFactory2 const &>(static_cast<T const &>(*this))->abi_CreateMinimalTile(get(tileId), get(displayName), get(arguments), get(square150x150Logo), desiredSize, set(value)));
	return value;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::UI::StartScreen::SecondaryTile impl_ISecondaryTileFactory2<T>::CreateMinimalTile(wchar_t const (&tileId)[S0], wchar_t const (&displayName)[S1], wchar_t const (&arguments)[S2], Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize const desiredSize) const
{
	Windows::UI::StartScreen::SecondaryTile value(nullptr);
	check(static_cast<ISecondaryTileFactory2 const &>(static_cast<T const &>(*this))->abi_CreateMinimalTile(StringReference(tileId), StringReference(displayName), StringReference(arguments), get(square150x150Logo), desiredSize, set(value)));
	return value;
}

template <typename T> bool impl_ISecondaryTileStatics<T>::Exists(String const & tileId) const
{
	bool exists = {};
	check(static_cast<ISecondaryTileStatics const &>(static_cast<T const &>(*this))->abi_Exists(get(tileId), BoolProxy(exists)));
	return exists;
}

template <typename T> template <unsigned S0> bool impl_ISecondaryTileStatics<T>::Exists(wchar_t const (&tileId)[S0]) const
{
	bool exists = {};
	check(static_cast<ISecondaryTileStatics const &>(static_cast<T const &>(*this))->abi_Exists(StringReference(tileId), BoolProxy(exists)));
	return exists;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> impl_ISecondaryTileStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> operation = {};
	check(static_cast<ISecondaryTileStatics const &>(static_cast<T const &>(*this))->abi_FindAllAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> impl_ISecondaryTileStatics<T>::FindAllAsync(String const & applicationId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> operation = {};
	check(static_cast<ISecondaryTileStatics const &>(static_cast<T const &>(*this))->abi_FindAllForApplicationAsync(get(applicationId), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> impl_ISecondaryTileStatics<T>::FindAllAsync(wchar_t const (&applicationId)[S0]) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> operation = {};
	check(static_cast<ISecondaryTileStatics const &>(static_cast<T const &>(*this))->abi_FindAllForApplicationAsync(StringReference(applicationId), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> impl_ISecondaryTileStatics<T>::FindAllForPackageAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> operation = {};
	check(static_cast<ISecondaryTileStatics const &>(static_cast<T const &>(*this))->abi_FindAllForPackageAsync(set(operation)));
	return operation;
}

template <typename T> Windows::UI::StartScreen::VisualElementsRequest impl_IVisualElementsRequestedEventArgs<T>::Request() const
{
	Windows::UI::StartScreen::VisualElementsRequest value(nullptr);
	check(static_cast<IVisualElementsRequestedEventArgs const &>(static_cast<T const &>(*this))->get_Request(set(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTileVisualElements impl_IVisualElementsRequest<T>::VisualElements() const
{
	Windows::UI::StartScreen::SecondaryTileVisualElements value(nullptr);
	check(static_cast<IVisualElementsRequest const &>(static_cast<T const &>(*this))->get_VisualElements(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTileVisualElements> impl_IVisualElementsRequest<T>::AlternateVisualElements() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTileVisualElements> value = {};
	check(static_cast<IVisualElementsRequest const &>(static_cast<T const &>(*this))->get_AlternateVisualElements(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IVisualElementsRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<IVisualElementsRequest const &>(static_cast<T const &>(*this))->get_Deadline(&value));
	return value;
}

template <typename T> Windows::UI::StartScreen::VisualElementsRequestDeferral impl_IVisualElementsRequest<T>::GetDeferral() const
{
	Windows::UI::StartScreen::VisualElementsRequestDeferral deferral(nullptr);
	check(static_cast<IVisualElementsRequest const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> void impl_IVisualElementsRequestDeferral<T>::Complete() const
{
	check(static_cast<IVisualElementsRequestDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

template <typename T> Windows::UI::Color impl_ITextConstantsStatics<T>::AutoColor() const
{
	Windows::UI::Color value = {};
	check(static_cast<ITextConstantsStatics const &>(static_cast<T const &>(*this))->get_AutoColor(&value));
	return value;
}

template <typename T> int impl_ITextConstantsStatics<T>::MinUnitCount() const
{
	int value = {};
	check(static_cast<ITextConstantsStatics const &>(static_cast<T const &>(*this))->get_MinUnitCount(&value));
	return value;
}

template <typename T> int impl_ITextConstantsStatics<T>::MaxUnitCount() const
{
	int value = {};
	check(static_cast<ITextConstantsStatics const &>(static_cast<T const &>(*this))->get_MaxUnitCount(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_ITextConstantsStatics<T>::UndefinedColor() const
{
	Windows::UI::Color value = {};
	check(static_cast<ITextConstantsStatics const &>(static_cast<T const &>(*this))->get_UndefinedColor(&value));
	return value;
}

template <typename T> float impl_ITextConstantsStatics<T>::UndefinedFloatValue() const
{
	float value = {};
	check(static_cast<ITextConstantsStatics const &>(static_cast<T const &>(*this))->get_UndefinedFloatValue(&value));
	return value;
}

template <typename T> int impl_ITextConstantsStatics<T>::UndefinedInt32Value() const
{
	int value = {};
	check(static_cast<ITextConstantsStatics const &>(static_cast<T const &>(*this))->get_UndefinedInt32Value(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontStretch impl_ITextConstantsStatics<T>::UndefinedFontStretch() const
{
	Windows::UI::Text::FontStretch value = {};
	check(static_cast<ITextConstantsStatics const &>(static_cast<T const &>(*this))->get_UndefinedFontStretch(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontStyle impl_ITextConstantsStatics<T>::UndefinedFontStyle() const
{
	Windows::UI::Text::FontStyle value = {};
	check(static_cast<ITextConstantsStatics const &>(static_cast<T const &>(*this))->get_UndefinedFontStyle(&value));
	return value;
}

template <typename T> Windows::UI::Text::CaretType impl_ITextDocument<T>::CaretType() const
{
	Windows::UI::Text::CaretType value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->get_CaretType(&value));
	return value;
}

template <typename T> void impl_ITextDocument<T>::CaretType(Windows::UI::Text::CaretType const value) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->put_CaretType(value));
}

template <typename T> float impl_ITextDocument<T>::DefaultTabStop() const
{
	float value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->get_DefaultTabStop(&value));
	return value;
}

template <typename T> void impl_ITextDocument<T>::DefaultTabStop(float const value) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->put_DefaultTabStop(value));
}

template <typename T> Windows::UI::Text::ITextSelection impl_ITextDocument<T>::Selection() const
{
	Windows::UI::Text::ITextSelection value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->get_Selection(set(value)));
	return value;
}

template <typename T> unsigned impl_ITextDocument<T>::UndoLimit() const
{
	unsigned value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->get_UndoLimit(&value));
	return value;
}

template <typename T> void impl_ITextDocument<T>::UndoLimit(unsigned const value) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->put_UndoLimit(value));
}

template <typename T> bool impl_ITextDocument<T>::CanCopy() const
{
	bool value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_CanCopy(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ITextDocument<T>::CanPaste() const
{
	bool value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_CanPaste(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ITextDocument<T>::CanRedo() const
{
	bool value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_CanRedo(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ITextDocument<T>::CanUndo() const
{
	bool value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_CanUndo(BoolProxy(value)));
	return value;
}

template <typename T> int impl_ITextDocument<T>::ApplyDisplayUpdates() const
{
	int count = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_ApplyDisplayUpdates(&count));
	return count;
}

template <typename T> int impl_ITextDocument<T>::BatchDisplayUpdates() const
{
	int count = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_BatchDisplayUpdates(&count));
	return count;
}

template <typename T> void impl_ITextDocument<T>::BeginUndoGroup() const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_BeginUndoGroup());
}

template <typename T> void impl_ITextDocument<T>::EndUndoGroup() const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_EndUndoGroup());
}

template <typename T> Windows::UI::Text::ITextCharacterFormat impl_ITextDocument<T>::GetDefaultCharacterFormat() const
{
	Windows::UI::Text::ITextCharacterFormat value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_GetDefaultCharacterFormat(set(value)));
	return value;
}

template <typename T> Windows::UI::Text::ITextParagraphFormat impl_ITextDocument<T>::GetDefaultParagraphFormat() const
{
	Windows::UI::Text::ITextParagraphFormat value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_GetDefaultParagraphFormat(set(value)));
	return value;
}

template <typename T> Windows::UI::Text::ITextRange impl_ITextDocument<T>::GetRange(int const startPosition, int const endPosition) const
{
	Windows::UI::Text::ITextRange value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_GetRange(startPosition, endPosition, set(value)));
	return value;
}

template <typename T> Windows::UI::Text::ITextRange impl_ITextDocument<T>::GetRangeFromPoint(Windows::Foundation::Point const & point, Windows::UI::Text::PointOptions const options) const
{
	Windows::UI::Text::ITextRange value = {};
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_GetRangeFromPoint(point, options, set(value)));
	return value;
}

template <typename T> void impl_ITextDocument<T>::GetText(Windows::UI::Text::TextGetOptions const options, String & value) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_GetText(options, set(value)));
}

template <typename T> void impl_ITextDocument<T>::LoadFromStream(Windows::UI::Text::TextSetOptions const options, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_LoadFromStream(options, get(value)));
}

template <typename T> void impl_ITextDocument<T>::Redo() const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_Redo());
}

template <typename T> void impl_ITextDocument<T>::SaveToStream(Windows::UI::Text::TextGetOptions const options, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_SaveToStream(options, get(value)));
}

template <typename T> void impl_ITextDocument<T>::SetDefaultCharacterFormat(Windows::UI::Text::ITextCharacterFormat const & value) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_SetDefaultCharacterFormat(get(value)));
}

template <typename T> void impl_ITextDocument<T>::SetDefaultParagraphFormat(Windows::UI::Text::ITextParagraphFormat const & value) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_SetDefaultParagraphFormat(get(value)));
}

template <typename T> void impl_ITextDocument<T>::SetText(Windows::UI::Text::TextSetOptions const options, String const & value) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_SetText(options, get(value)));
}

template <typename T> template <unsigned S0> void impl_ITextDocument<T>::SetText(Windows::UI::Text::TextSetOptions const options, wchar_t const (&value)[S0]) const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_SetText(options, StringReference(value)));
}

template <typename T> void impl_ITextDocument<T>::Undo() const
{
	check(static_cast<ITextDocument const &>(static_cast<T const &>(*this))->abi_Undo());
}

template <typename T> wchar_t impl_ITextRange<T>::Character() const
{
	wchar_t value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_Character(&value));
	return value;
}

template <typename T> void impl_ITextRange<T>::Character(wchar_t const value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_Character(value));
}

template <typename T> Windows::UI::Text::ITextCharacterFormat impl_ITextRange<T>::CharacterFormat() const
{
	Windows::UI::Text::ITextCharacterFormat value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_CharacterFormat(set(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::CharacterFormat(Windows::UI::Text::ITextCharacterFormat const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_CharacterFormat(get(value)));
}

template <typename T> Windows::UI::Text::ITextRange impl_ITextRange<T>::FormattedText() const
{
	Windows::UI::Text::ITextRange value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_FormattedText(set(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::FormattedText(Windows::UI::Text::ITextRange const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_FormattedText(get(value)));
}

template <typename T> int impl_ITextRange<T>::EndPosition() const
{
	int value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_EndPosition(&value));
	return value;
}

template <typename T> void impl_ITextRange<T>::EndPosition(int const value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_EndPosition(value));
}

template <typename T> Windows::UI::Text::RangeGravity impl_ITextRange<T>::Gravity() const
{
	Windows::UI::Text::RangeGravity value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_Gravity(&value));
	return value;
}

template <typename T> void impl_ITextRange<T>::Gravity(Windows::UI::Text::RangeGravity const value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_Gravity(value));
}

template <typename T> int impl_ITextRange<T>::Length() const
{
	int length = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_Length(&length));
	return length;
}

template <typename T> String impl_ITextRange<T>::Link() const
{
	String value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_Link(set(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::Link(String const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_Link(get(value)));
}

template <typename T> template <unsigned S0> void impl_ITextRange<T>::Link(wchar_t const (&value)[S0]) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_Link(StringReference(value)));
}

template <typename T> Windows::UI::Text::ITextParagraphFormat impl_ITextRange<T>::ParagraphFormat() const
{
	Windows::UI::Text::ITextParagraphFormat value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_ParagraphFormat(set(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::ParagraphFormat(Windows::UI::Text::ITextParagraphFormat const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_ParagraphFormat(get(value)));
}

template <typename T> int impl_ITextRange<T>::StartPosition() const
{
	int value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_StartPosition(&value));
	return value;
}

template <typename T> void impl_ITextRange<T>::StartPosition(int const value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_StartPosition(value));
}

template <typename T> int impl_ITextRange<T>::StoryLength() const
{
	int value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_StoryLength(&value));
	return value;
}

template <typename T> String impl_ITextRange<T>::Text() const
{
	String value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->get_Text(set(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::Text(String const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_Text(get(value)));
}

template <typename T> template <unsigned S0> void impl_ITextRange<T>::Text(wchar_t const (&value)[S0]) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->put_Text(StringReference(value)));
}

template <typename T> bool impl_ITextRange<T>::CanPaste(int const format) const
{
	bool value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_CanPaste(format, BoolProxy(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::ChangeCase(Windows::UI::Text::LetterCase const value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_ChangeCase(value));
}

template <typename T> void impl_ITextRange<T>::Collapse(bool const value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_Collapse(value));
}

template <typename T> void impl_ITextRange<T>::Copy() const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_Copy());
}

template <typename T> void impl_ITextRange<T>::Cut() const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_Cut());
}

template <typename T> int impl_ITextRange<T>::Delete(Windows::UI::Text::TextRangeUnit const unit, int const count) const
{
	int delta = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_Delete(unit, count, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::EndOf(Windows::UI::Text::TextRangeUnit const unit, bool const extend) const
{
	int delta = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_EndOf(unit, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::Expand(Windows::UI::Text::TextRangeUnit const unit) const
{
	int delta = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_Expand(unit, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::FindText(String const & value, int const scanLength, Windows::UI::Text::FindOptions const options) const
{
	int length = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_FindText(get(value), scanLength, options, &length));
	return length;
}

template <typename T> template <unsigned S0> int impl_ITextRange<T>::FindText(wchar_t const (&value)[S0], int const scanLength, Windows::UI::Text::FindOptions const options) const
{
	int length = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_FindText(StringReference(value), scanLength, options, &length));
	return length;
}

template <typename T> void impl_ITextRange<T>::GetCharacterUtf32(unsigned & value, int const offset) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_GetCharacterUtf32(&value, offset));
}

template <typename T> Windows::UI::Text::ITextRange impl_ITextRange<T>::GetClone() const
{
	Windows::UI::Text::ITextRange value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_GetClone(set(value)));
	return value;
}

template <typename T> int impl_ITextRange<T>::GetIndex(Windows::UI::Text::TextRangeUnit const unit) const
{
	int index = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_GetIndex(unit, &index));
	return index;
}

template <typename T> void impl_ITextRange<T>::GetPoint(Windows::UI::Text::HorizontalCharacterAlignment const horizontalAlign, Windows::UI::Text::VerticalCharacterAlignment const verticalAlign, Windows::UI::Text::PointOptions const options, Windows::Foundation::Point & point) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_GetPoint(horizontalAlign, verticalAlign, options, &point));
}

template <typename T> void impl_ITextRange<T>::GetRect(Windows::UI::Text::PointOptions const options, Windows::Foundation::Rect & rect, int & hit) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_GetRect(options, &rect, &hit));
}

template <typename T> void impl_ITextRange<T>::GetText(Windows::UI::Text::TextGetOptions const options, String & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_GetText(options, set(value)));
}

template <typename T> void impl_ITextRange<T>::GetTextViaStream(Windows::UI::Text::TextGetOptions const options, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_GetTextViaStream(options, get(value)));
}

template <typename T> bool impl_ITextRange<T>::InRange(Windows::UI::Text::ITextRange const & range) const
{
	bool value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_InRange(get(range), BoolProxy(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::InsertImage(int const width, int const height, int const ascent, Windows::UI::Text::VerticalCharacterAlignment const verticalAlign, String const & alternateText, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_InsertImage(width, height, ascent, verticalAlign, get(alternateText), get(value)));
}

template <typename T> template <unsigned S0> void impl_ITextRange<T>::InsertImage(int const width, int const height, int const ascent, Windows::UI::Text::VerticalCharacterAlignment const verticalAlign, wchar_t const (&alternateText)[S0], Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_InsertImage(width, height, ascent, verticalAlign, StringReference(alternateText), get(value)));
}

template <typename T> bool impl_ITextRange<T>::InStory(Windows::UI::Text::ITextRange const & range) const
{
	bool value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_InStory(get(range), BoolProxy(value)));
	return value;
}

template <typename T> bool impl_ITextRange<T>::IsEqual(Windows::UI::Text::ITextRange const & range) const
{
	bool value = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_IsEqual(get(range), BoolProxy(value)));
	return value;
}

template <typename T> int impl_ITextRange<T>::Move(Windows::UI::Text::TextRangeUnit const unit, int const count) const
{
	int delta = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_Move(unit, count, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::MoveEnd(Windows::UI::Text::TextRangeUnit const unit, int const count) const
{
	int delta = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_MoveEnd(unit, count, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::MoveStart(Windows::UI::Text::TextRangeUnit const unit, int const count) const
{
	int delta = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_MoveStart(unit, count, &delta));
	return delta;
}

template <typename T> void impl_ITextRange<T>::Paste(int const format) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_Paste(format));
}

template <typename T> void impl_ITextRange<T>::ScrollIntoView(Windows::UI::Text::PointOptions const value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_ScrollIntoView(value));
}

template <typename T> void impl_ITextRange<T>::MatchSelection() const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_MatchSelection());
}

template <typename T> void impl_ITextRange<T>::SetIndex(Windows::UI::Text::TextRangeUnit const unit, int const index, bool const extend) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_SetIndex(unit, index, extend));
}

template <typename T> void impl_ITextRange<T>::SetPoint(Windows::Foundation::Point const & point, Windows::UI::Text::PointOptions const options, bool const extend) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_SetPoint(point, options, extend));
}

template <typename T> void impl_ITextRange<T>::SetRange(int const startPosition, int const endPosition) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_SetRange(startPosition, endPosition));
}

template <typename T> void impl_ITextRange<T>::SetText(Windows::UI::Text::TextSetOptions const options, String const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_SetText(options, get(value)));
}

template <typename T> template <unsigned S0> void impl_ITextRange<T>::SetText(Windows::UI::Text::TextSetOptions const options, wchar_t const (&value)[S0]) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_SetText(options, StringReference(value)));
}

template <typename T> void impl_ITextRange<T>::SetTextViaStream(Windows::UI::Text::TextSetOptions const options, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_SetTextViaStream(options, get(value)));
}

template <typename T> int impl_ITextRange<T>::StartOf(Windows::UI::Text::TextRangeUnit const unit, bool const extend) const
{
	int delta = {};
	check(static_cast<ITextRange const &>(static_cast<T const &>(*this))->abi_StartOf(unit, extend, &delta));
	return delta;
}

template <typename T> Windows::UI::Text::SelectionOptions impl_ITextSelection<T>::Options() const
{
	Windows::UI::Text::SelectionOptions value = {};
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->get_Options(&value));
	return value;
}

template <typename T> void impl_ITextSelection<T>::Options(Windows::UI::Text::SelectionOptions const value) const
{
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->put_Options(value));
}

template <typename T> Windows::UI::Text::SelectionType impl_ITextSelection<T>::Type() const
{
	Windows::UI::Text::SelectionType value = {};
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->get_Type(&value));
	return value;
}

template <typename T> int impl_ITextSelection<T>::EndKey(Windows::UI::Text::TextRangeUnit const unit, bool const extend) const
{
	int delta = {};
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->abi_EndKey(unit, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::HomeKey(Windows::UI::Text::TextRangeUnit const unit, bool const extend) const
{
	int delta = {};
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->abi_HomeKey(unit, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::MoveDown(Windows::UI::Text::TextRangeUnit const unit, int const count, bool const extend) const
{
	int delta = {};
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->abi_MoveDown(unit, count, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::MoveLeft(Windows::UI::Text::TextRangeUnit const unit, int const count, bool const extend) const
{
	int delta = {};
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->abi_MoveLeft(unit, count, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::MoveRight(Windows::UI::Text::TextRangeUnit const unit, int const count, bool const extend) const
{
	int delta = {};
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->abi_MoveRight(unit, count, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::MoveUp(Windows::UI::Text::TextRangeUnit const unit, int const count, bool const extend) const
{
	int delta = {};
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->abi_MoveUp(unit, count, extend, &delta));
	return delta;
}

template <typename T> void impl_ITextSelection<T>::TypeText(String const & value) const
{
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->abi_TypeText(get(value)));
}

template <typename T> template <unsigned S0> void impl_ITextSelection<T>::TypeText(wchar_t const (&value)[S0]) const
{
	check(static_cast<ITextSelection const &>(static_cast<T const &>(*this))->abi_TypeText(StringReference(value)));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::AllCaps() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_AllCaps(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::AllCaps(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_AllCaps(value));
}

template <typename T> Windows::UI::Color impl_ITextCharacterFormat<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_BackgroundColor(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::BackgroundColor(Windows::UI::Color const & value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_BackgroundColor(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Bold() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Bold(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Bold(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Bold(value));
}

template <typename T> Windows::UI::Text::FontStretch impl_ITextCharacterFormat<T>::FontStretch() const
{
	Windows::UI::Text::FontStretch value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_FontStretch(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::FontStretch(Windows::UI::Text::FontStretch const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_FontStretch(value));
}

template <typename T> Windows::UI::Text::FontStyle impl_ITextCharacterFormat<T>::FontStyle() const
{
	Windows::UI::Text::FontStyle value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_FontStyle(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::FontStyle(Windows::UI::Text::FontStyle const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_FontStyle(value));
}

template <typename T> Windows::UI::Color impl_ITextCharacterFormat<T>::ForegroundColor() const
{
	Windows::UI::Color value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_ForegroundColor(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::ForegroundColor(Windows::UI::Color const & value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_ForegroundColor(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Hidden() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Hidden(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Hidden(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Hidden(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Italic() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Italic(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Italic(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Italic(value));
}

template <typename T> float impl_ITextCharacterFormat<T>::Kerning() const
{
	float value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Kerning(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Kerning(float const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Kerning(value));
}

template <typename T> String impl_ITextCharacterFormat<T>::LanguageTag() const
{
	String value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_LanguageTag(set(value)));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::LanguageTag(String const & value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_LanguageTag(get(value)));
}

template <typename T> template <unsigned S0> void impl_ITextCharacterFormat<T>::LanguageTag(wchar_t const (&value)[S0]) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_LanguageTag(StringReference(value)));
}

template <typename T> Windows::UI::Text::LinkType impl_ITextCharacterFormat<T>::LinkType() const
{
	Windows::UI::Text::LinkType value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_LinkType(&value));
	return value;
}

template <typename T> String impl_ITextCharacterFormat<T>::Name() const
{
	String value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Name(String const & value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Name(get(value)));
}

template <typename T> template <unsigned S0> void impl_ITextCharacterFormat<T>::Name(wchar_t const (&value)[S0]) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Name(StringReference(value)));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Outline() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Outline(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Outline(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Outline(value));
}

template <typename T> float impl_ITextCharacterFormat<T>::Position() const
{
	float value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Position(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Position(float const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Position(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::ProtectedText() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_ProtectedText(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::ProtectedText(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_ProtectedText(value));
}

template <typename T> float impl_ITextCharacterFormat<T>::Size() const
{
	float value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Size(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Size(float const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Size(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::SmallCaps() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_SmallCaps(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::SmallCaps(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_SmallCaps(value));
}

template <typename T> float impl_ITextCharacterFormat<T>::Spacing() const
{
	float value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Spacing(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Spacing(float const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Spacing(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Strikethrough() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Strikethrough(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Strikethrough(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Strikethrough(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Subscript() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Subscript(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Subscript(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Subscript(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Superscript() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Superscript(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Superscript(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Superscript(value));
}

template <typename T> Windows::UI::Text::TextScript impl_ITextCharacterFormat<T>::TextScript() const
{
	Windows::UI::Text::TextScript value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_TextScript(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::TextScript(Windows::UI::Text::TextScript const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_TextScript(value));
}

template <typename T> Windows::UI::Text::UnderlineType impl_ITextCharacterFormat<T>::Underline() const
{
	Windows::UI::Text::UnderlineType value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Underline(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Underline(Windows::UI::Text::UnderlineType const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Underline(value));
}

template <typename T> int impl_ITextCharacterFormat<T>::Weight() const
{
	int value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->get_Weight(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Weight(int const value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->put_Weight(value));
}

template <typename T> void impl_ITextCharacterFormat<T>::SetClone(Windows::UI::Text::ITextCharacterFormat const & value) const
{
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->abi_SetClone(get(value)));
}

template <typename T> Windows::UI::Text::ITextCharacterFormat impl_ITextCharacterFormat<T>::GetClone() const
{
	Windows::UI::Text::ITextCharacterFormat value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->abi_GetClone(set(value)));
	return value;
}

template <typename T> bool impl_ITextCharacterFormat<T>::IsEqual(Windows::UI::Text::ITextCharacterFormat const & format) const
{
	bool value = {};
	check(static_cast<ITextCharacterFormat const &>(static_cast<T const &>(*this))->abi_IsEqual(get(format), BoolProxy(value)));
	return value;
}

template <typename T> Windows::UI::Text::ParagraphAlignment impl_ITextParagraphFormat<T>::Alignment() const
{
	Windows::UI::Text::ParagraphAlignment value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_Alignment(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::Alignment(Windows::UI::Text::ParagraphAlignment const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_Alignment(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::FirstLineIndent() const
{
	float value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_FirstLineIndent(&value));
	return value;
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::KeepTogether() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_KeepTogether(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::KeepTogether(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_KeepTogether(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::KeepWithNext() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_KeepWithNext(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::KeepWithNext(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_KeepWithNext(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::LeftIndent() const
{
	float value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_LeftIndent(&value));
	return value;
}

template <typename T> float impl_ITextParagraphFormat<T>::LineSpacing() const
{
	float value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_LineSpacing(&value));
	return value;
}

template <typename T> Windows::UI::Text::LineSpacingRule impl_ITextParagraphFormat<T>::LineSpacingRule() const
{
	Windows::UI::Text::LineSpacingRule value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_LineSpacingRule(&value));
	return value;
}

template <typename T> Windows::UI::Text::MarkerAlignment impl_ITextParagraphFormat<T>::ListAlignment() const
{
	Windows::UI::Text::MarkerAlignment value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_ListAlignment(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListAlignment(Windows::UI::Text::MarkerAlignment const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_ListAlignment(value));
}

template <typename T> int impl_ITextParagraphFormat<T>::ListLevelIndex() const
{
	int value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_ListLevelIndex(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListLevelIndex(int const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_ListLevelIndex(value));
}

template <typename T> int impl_ITextParagraphFormat<T>::ListStart() const
{
	int value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_ListStart(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListStart(int const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_ListStart(value));
}

template <typename T> Windows::UI::Text::MarkerStyle impl_ITextParagraphFormat<T>::ListStyle() const
{
	Windows::UI::Text::MarkerStyle value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_ListStyle(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListStyle(Windows::UI::Text::MarkerStyle const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_ListStyle(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::ListTab() const
{
	float value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_ListTab(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListTab(float const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_ListTab(value));
}

template <typename T> Windows::UI::Text::MarkerType impl_ITextParagraphFormat<T>::ListType() const
{
	Windows::UI::Text::MarkerType value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_ListType(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListType(Windows::UI::Text::MarkerType const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_ListType(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::NoLineNumber() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_NoLineNumber(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::NoLineNumber(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_NoLineNumber(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::PageBreakBefore() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_PageBreakBefore(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::PageBreakBefore(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_PageBreakBefore(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::RightIndent() const
{
	float value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_RightIndent(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::RightIndent(float const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_RightIndent(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::RightToLeft() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_RightToLeft(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::RightToLeft(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_RightToLeft(value));
}

template <typename T> Windows::UI::Text::ParagraphStyle impl_ITextParagraphFormat<T>::Style() const
{
	Windows::UI::Text::ParagraphStyle value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_Style(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::Style(Windows::UI::Text::ParagraphStyle const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_Style(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::SpaceAfter() const
{
	float value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_SpaceAfter(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::SpaceAfter(float const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_SpaceAfter(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::SpaceBefore() const
{
	float value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_SpaceBefore(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::SpaceBefore(float const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_SpaceBefore(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::WidowControl() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_WidowControl(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::WidowControl(Windows::UI::Text::FormatEffect const value) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->put_WidowControl(value));
}

template <typename T> int impl_ITextParagraphFormat<T>::TabCount() const
{
	int value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->get_TabCount(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::AddTab(float const position, Windows::UI::Text::TabAlignment const align, Windows::UI::Text::TabLeader const leader) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->abi_AddTab(position, align, leader));
}

template <typename T> void impl_ITextParagraphFormat<T>::ClearAllTabs() const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->abi_ClearAllTabs());
}

template <typename T> void impl_ITextParagraphFormat<T>::DeleteTab(float const position) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->abi_DeleteTab(position));
}

template <typename T> Windows::UI::Text::ITextParagraphFormat impl_ITextParagraphFormat<T>::GetClone() const
{
	Windows::UI::Text::ITextParagraphFormat value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->abi_GetClone(set(value)));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::GetTab(int const index, float & position, Windows::UI::Text::TabAlignment & align, Windows::UI::Text::TabLeader & leader) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->abi_GetTab(index, &position, &align, &leader));
}

template <typename T> bool impl_ITextParagraphFormat<T>::IsEqual(Windows::UI::Text::ITextParagraphFormat const & format) const
{
	bool value = {};
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->abi_IsEqual(get(format), BoolProxy(value)));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::SetClone(Windows::UI::Text::ITextParagraphFormat const & format) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->abi_SetClone(get(format)));
}

template <typename T> void impl_ITextParagraphFormat<T>::SetIndents(float const start, float const left, float const right) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->abi_SetIndents(start, left, right));
}

template <typename T> void impl_ITextParagraphFormat<T>::SetLineSpacing(Windows::UI::Text::LineSpacingRule const rule, float const spacing) const
{
	check(static_cast<ITextParagraphFormat const &>(static_cast<T const &>(*this))->abi_SetLineSpacing(rule, spacing));
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Black() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_Black(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Bold() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_Bold(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::ExtraBlack() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_ExtraBlack(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::ExtraBold() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_ExtraBold(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::ExtraLight() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_ExtraLight(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Light() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_Light(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Medium() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_Medium(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Normal() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_Normal(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::SemiBold() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_SemiBold(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::SemiLight() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_SemiLight(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Thin() const
{
	Windows::UI::Text::FontWeight value = {};
	check(static_cast<IFontWeightsStatics const &>(static_cast<T const &>(*this))->get_Thin(&value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

template <typename T> void impl_IApplicationViewSwitcherStatics<T>::DisableShowingMainViewOnActivation() const
{
	check(static_cast<IApplicationViewSwitcherStatics const &>(static_cast<T const &>(*this))->abi_DisableShowingMainViewOnActivation());
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::TryShowAsStandaloneAsync(int const viewId) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IApplicationViewSwitcherStatics const &>(static_cast<T const &>(*this))->abi_TryShowAsStandaloneAsync(viewId, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IApplicationViewSwitcherStatics const &>(static_cast<T const &>(*this))->abi_TryShowAsStandaloneWithSizePreferenceAsync(viewId, sizePreference, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference, int const anchorViewId, Windows::UI::ViewManagement::ViewSizePreference const anchorSizePreference) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IApplicationViewSwitcherStatics const &>(static_cast<T const &>(*this))->abi_TryShowAsStandaloneWithAnchorViewAndSizePreferenceAsync(viewId, sizePreference, anchorViewId, anchorSizePreference, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationViewSwitcherStatics<T>::SwitchAsync(int const viewId) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IApplicationViewSwitcherStatics const &>(static_cast<T const &>(*this))->abi_SwitchAsync(viewId, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationViewSwitcherStatics<T>::SwitchAsync(int const toViewId, int const fromViewId) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IApplicationViewSwitcherStatics const &>(static_cast<T const &>(*this))->abi_SwitchFromViewAsync(toViewId, fromViewId, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationViewSwitcherStatics<T>::SwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IApplicationViewSwitcherStatics const &>(static_cast<T const &>(*this))->abi_SwitchFromViewWithOptionsAsync(toViewId, fromViewId, options, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::PrepareForCustomAnimatedSwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation = {};
	check(static_cast<IApplicationViewSwitcherStatics const &>(static_cast<T const &>(*this))->abi_PrepareForCustomAnimatedSwitchAsync(toViewId, fromViewId, options, set(operation)));
	return operation;
}

template <typename T> int impl_IApplicationViewInteropStatics<T>::GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window) const
{
	int id = {};
	check(static_cast<IApplicationViewInteropStatics const &>(static_cast<T const &>(*this))->abi_GetApplicationViewIdForWindow(get(window), &id));
	return id;
}

template <typename T> Windows::UI::ViewManagement::ApplicationView impl_IApplicationViewStatics2<T>::GetForCurrentView() const
{
	Windows::UI::ViewManagement::ApplicationView current(nullptr);
	check(static_cast<IApplicationViewStatics2 const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(current)));
	return current;
}

template <typename T> bool impl_IApplicationViewStatics2<T>::TerminateAppOnFinalViewClose() const
{
	bool value = {};
	check(static_cast<IApplicationViewStatics2 const &>(static_cast<T const &>(*this))->get_TerminateAppOnFinalViewClose(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IApplicationViewStatics2<T>::TerminateAppOnFinalViewClose(bool const value) const
{
	check(static_cast<IApplicationViewStatics2 const &>(static_cast<T const &>(*this))->put_TerminateAppOnFinalViewClose(value));
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewOrientation impl_IApplicationView<T>::Orientation() const
{
	Windows::UI::ViewManagement::ApplicationViewOrientation value = {};
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->get_Orientation(&value));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::AdjacentToLeftDisplayEdge() const
{
	bool value = {};
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->get_AdjacentToLeftDisplayEdge(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::AdjacentToRightDisplayEdge() const
{
	bool value = {};
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->get_AdjacentToRightDisplayEdge(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::IsFullScreen() const
{
	bool value = {};
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->get_IsFullScreen(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::IsOnLockScreen() const
{
	bool value = {};
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->get_IsOnLockScreen(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::IsScreenCaptureEnabled() const
{
	bool value = {};
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->get_IsScreenCaptureEnabled(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IApplicationView<T>::IsScreenCaptureEnabled(bool const value) const
{
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->put_IsScreenCaptureEnabled(value));
}

template <typename T> void impl_IApplicationView<T>::Title(String const & value) const
{
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_IApplicationView<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> String impl_IApplicationView<T>::Title() const
{
	String value = {};
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> int impl_IApplicationView<T>::Id() const
{
	int value = {};
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->get_Id(&value));
	return value;
}

template <typename T> EventRegistrationToken impl_IApplicationView<T>::Consolidated(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::ApplicationView, Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->add_Consolidated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IApplicationView<T>::Consolidated(F handler) const
{
	return Consolidated(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::ApplicationView, Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>(handler));
}

template <typename T> void impl_IApplicationView<T>::Consolidated(EventRegistrationToken const token) const
{
	check(static_cast<IApplicationView const &>(static_cast<T const &>(*this))->remove_Consolidated(token));
}

template <typename T> bool impl_IApplicationViewConsolidatedEventArgs<T>::IsUserInitiated() const
{
	bool value = {};
	check(static_cast<IApplicationViewConsolidatedEventArgs const &>(static_cast<T const &>(*this))->get_IsUserInitiated(BoolProxy(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics<T>::StartProjectingAsync(int const projectionViewId, int const anchorViewId) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IProjectionManagerStatics const &>(static_cast<T const &>(*this))->abi_StartProjectingAsync(projectionViewId, anchorViewId, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics<T>::SwapDisplaysForViewsAsync(int const projectionViewId, int const anchorViewId) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IProjectionManagerStatics const &>(static_cast<T const &>(*this))->abi_SwapDisplaysForViewsAsync(projectionViewId, anchorViewId, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics<T>::StopProjectingAsync(int const projectionViewId, int const anchorViewId) const
{
	Windows::Foundation::IAsyncAction operation = {};
	check(static_cast<IProjectionManagerStatics const &>(static_cast<T const &>(*this))->abi_StopProjectingAsync(projectionViewId, anchorViewId, set(operation)));
	return operation;
}

template <typename T> bool impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailable() const
{
	bool value = {};
	check(static_cast<IProjectionManagerStatics const &>(static_cast<T const &>(*this))->get_ProjectionDisplayAvailable(BoolProxy(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IProjectionManagerStatics const &>(static_cast<T const &>(*this))->add_ProjectionDisplayAvailableChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailableChanged(F handler) const
{
	return ProjectionDisplayAvailableChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailableChanged(EventRegistrationToken const token) const
{
	check(static_cast<IProjectionManagerStatics const &>(static_cast<T const &>(*this))->remove_ProjectionDisplayAvailableChanged(token));
}

template <typename T> Windows::Foundation::Rect impl_IInputPaneVisibilityEventArgs<T>::OccludedRect() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IInputPaneVisibilityEventArgs const &>(static_cast<T const &>(*this))->get_OccludedRect(&value));
	return value;
}

template <typename T> void impl_IInputPaneVisibilityEventArgs<T>::EnsuredFocusedElementInView(bool const value) const
{
	check(static_cast<IInputPaneVisibilityEventArgs const &>(static_cast<T const &>(*this))->put_EnsuredFocusedElementInView(value));
}

template <typename T> bool impl_IInputPaneVisibilityEventArgs<T>::EnsuredFocusedElementInView() const
{
	bool value = {};
	check(static_cast<IInputPaneVisibilityEventArgs const &>(static_cast<T const &>(*this))->get_EnsuredFocusedElementInView(BoolProxy(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IInputPane<T>::Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IInputPane const &>(static_cast<T const &>(*this))->add_Showing(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IInputPane<T>::Showing(F handler) const
{
	return Showing(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>(handler));
}

template <typename T> void impl_IInputPane<T>::Showing(EventRegistrationToken const token) const
{
	check(static_cast<IInputPane const &>(static_cast<T const &>(*this))->remove_Showing(token));
}

template <typename T> EventRegistrationToken impl_IInputPane<T>::Hiding(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IInputPane const &>(static_cast<T const &>(*this))->add_Hiding(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IInputPane<T>::Hiding(F handler) const
{
	return Hiding(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>(handler));
}

template <typename T> void impl_IInputPane<T>::Hiding(EventRegistrationToken const token) const
{
	check(static_cast<IInputPane const &>(static_cast<T const &>(*this))->remove_Hiding(token));
}

template <typename T> Windows::Foundation::Rect impl_IInputPane<T>::OccludedRect() const
{
	Windows::Foundation::Rect value = {};
	check(static_cast<IInputPane const &>(static_cast<T const &>(*this))->get_OccludedRect(&value));
	return value;
}

template <typename T> Windows::UI::ViewManagement::InputPane impl_IInputPaneStatics<T>::GetForCurrentView() const
{
	Windows::UI::ViewManagement::InputPane inputPane(nullptr);
	check(static_cast<IInputPaneStatics const &>(static_cast<T const &>(*this))->abi_GetForCurrentView(set(inputPane)));
	return inputPane;
}

template <typename T> bool impl_IAccessibilitySettings<T>::HighContrast() const
{
	bool value = {};
	check(static_cast<IAccessibilitySettings const &>(static_cast<T const &>(*this))->get_HighContrast(BoolProxy(value)));
	return value;
}

template <typename T> String impl_IAccessibilitySettings<T>::HighContrastScheme() const
{
	String value = {};
	check(static_cast<IAccessibilitySettings const &>(static_cast<T const &>(*this))->get_HighContrastScheme(set(value)));
	return value;
}

template <typename T> EventRegistrationToken impl_IAccessibilitySettings<T>::HighContrastChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::AccessibilitySettings, IInspectable> const & handler) const
{
	EventRegistrationToken cookie = {};
	check(static_cast<IAccessibilitySettings const &>(static_cast<T const &>(*this))->add_HighContrastChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> EventRegistrationToken impl_IAccessibilitySettings<T>::HighContrastChanged(F handler) const
{
	return HighContrastChanged(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::AccessibilitySettings, IInspectable>(handler));
}

template <typename T> void impl_IAccessibilitySettings<T>::HighContrastChanged(EventRegistrationToken const cookie) const
{
	check(static_cast<IAccessibilitySettings const &>(static_cast<T const &>(*this))->remove_HighContrastChanged(cookie));
}

template <typename T> Windows::UI::ViewManagement::HandPreference impl_IUISettings<T>::HandPreference() const
{
	Windows::UI::ViewManagement::HandPreference value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_HandPreference(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::CursorSize() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_CursorSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::ScrollBarSize() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_ScrollBarSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::ScrollBarArrowSize() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_ScrollBarArrowSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::ScrollBarThumbBoxSize() const
{
	Windows::Foundation::Size value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_ScrollBarThumbBoxSize(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::MessageDuration() const
{
	unsigned value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_MessageDuration(&value));
	return value;
}

template <typename T> bool impl_IUISettings<T>::AnimationsEnabled() const
{
	bool value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_AnimationsEnabled(BoolProxy(value)));
	return value;
}

template <typename T> bool impl_IUISettings<T>::CaretBrowsingEnabled() const
{
	bool value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_CaretBrowsingEnabled(BoolProxy(value)));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::CaretBlinkRate() const
{
	unsigned value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_CaretBlinkRate(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::CaretWidth() const
{
	unsigned value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_CaretWidth(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::DoubleClickTime() const
{
	unsigned value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_DoubleClickTime(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::MouseHoverTime() const
{
	unsigned value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->get_MouseHoverTime(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IUISettings<T>::UIElementColor(Windows::UI::ViewManagement::UIElementType const desiredElement) const
{
	Windows::UI::Color value = {};
	check(static_cast<IUISettings const &>(static_cast<T const &>(*this))->abi_UIElementColor(desiredElement, &value));
	return value;
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

template <typename T> void impl_IActivatedEventHandler<T>::Invoke(IInspectable const & sender, Windows::ApplicationModel::Activation::IActivatedEventArgs const & eventArgs) const
{
	check(static_cast<IActivatedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(eventArgs)));
}

template <typename T> void impl_IResumingEventHandler<T>::Invoke(IInspectable const & sender) const
{
	check(static_cast<IResumingEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender)));
}

template <typename T> void impl_ISuspendingEventHandler<T>::Invoke(IInspectable const & sender, Windows::ApplicationModel::ISuspendingEventArgs const & e) const
{
	check(static_cast<ISuspendingEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_INavigatedEventHandler<T>::Invoke(IInspectable const & sender, Windows::UI::WebUI::IWebUINavigatedEventArgs const & e) const
{
	check(static_cast<INavigatedEventHandler const &>(static_cast<T const &>(*this))->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IActivatedDeferral<T>::Complete() const
{
	check(static_cast<IActivatedDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::UI::WebUI::ActivatedDeferral impl_IActivatedOperation<T>::GetDeferral() const
{
	Windows::UI::WebUI::ActivatedDeferral deferral(nullptr);
	check(static_cast<IActivatedOperation const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> Windows::UI::WebUI::ActivatedOperation impl_IActivatedEventArgsDeferral<T>::ActivatedOperation() const
{
	Windows::UI::WebUI::ActivatedOperation value(nullptr);
	check(static_cast<IActivatedEventArgsDeferral const &>(static_cast<T const &>(*this))->get_ActivatedOperation(set(value)));
	return value;
}

template <typename T> Windows::UI::WebUI::WebUINavigatedOperation impl_IWebUINavigatedEventArgs<T>::NavigatedOperation() const
{
	Windows::UI::WebUI::WebUINavigatedOperation value(nullptr);
	check(static_cast<IWebUINavigatedEventArgs const &>(static_cast<T const &>(*this))->get_NavigatedOperation(set(value)));
	return value;
}

template <typename T> bool impl_IWebUIBackgroundTaskInstance<T>::Succeeded() const
{
	bool succeeded = {};
	check(static_cast<IWebUIBackgroundTaskInstance const &>(static_cast<T const &>(*this))->get_Succeeded(BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> void impl_IWebUIBackgroundTaskInstance<T>::Succeeded(bool const succeeded) const
{
	check(static_cast<IWebUIBackgroundTaskInstance const &>(static_cast<T const &>(*this))->put_Succeeded(succeeded));
}

template <typename T> Windows::UI::WebUI::IWebUIBackgroundTaskInstance impl_IWebUIBackgroundTaskInstanceStatics<T>::Current() const
{
	Windows::UI::WebUI::IWebUIBackgroundTaskInstance backgroundTaskInstance = {};
	check(static_cast<IWebUIBackgroundTaskInstanceStatics const &>(static_cast<T const &>(*this))->get_Current(set(backgroundTaskInstance)));
	return backgroundTaskInstance;
}

template <typename T> void impl_IWebUINavigatedDeferral<T>::Complete() const
{
	check(static_cast<IWebUINavigatedDeferral const &>(static_cast<T const &>(*this))->abi_Complete());
}

template <typename T> Windows::UI::WebUI::WebUINavigatedDeferral impl_IWebUINavigatedOperation<T>::GetDeferral() const
{
	Windows::UI::WebUI::WebUINavigatedDeferral deferral(nullptr);
	check(static_cast<IWebUINavigatedOperation const &>(static_cast<T const &>(*this))->abi_GetDeferral(set(deferral)));
	return deferral;
}

template <typename T> EventRegistrationToken impl_IWebUIActivationStatics<T>::Activated(Windows::UI::WebUI::IActivatedEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IWebUIActivationStatics const &>(static_cast<T const &>(*this))->add_Activated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IWebUIActivationStatics<T>::Activated(F handler) const
{
	return Activated(Windows::UI::WebUI::ActivatedEventHandler(handler));
}

template <typename T> void impl_IWebUIActivationStatics<T>::Activated(EventRegistrationToken const token) const
{
	check(static_cast<IWebUIActivationStatics const &>(static_cast<T const &>(*this))->remove_Activated(token));
}

template <typename T> EventRegistrationToken impl_IWebUIActivationStatics<T>::Suspending(Windows::UI::WebUI::ISuspendingEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IWebUIActivationStatics const &>(static_cast<T const &>(*this))->add_Suspending(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IWebUIActivationStatics<T>::Suspending(F handler) const
{
	return Suspending(Windows::UI::WebUI::SuspendingEventHandler(handler));
}

template <typename T> void impl_IWebUIActivationStatics<T>::Suspending(EventRegistrationToken const token) const
{
	check(static_cast<IWebUIActivationStatics const &>(static_cast<T const &>(*this))->remove_Suspending(token));
}

template <typename T> EventRegistrationToken impl_IWebUIActivationStatics<T>::Resuming(Windows::UI::WebUI::IResumingEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IWebUIActivationStatics const &>(static_cast<T const &>(*this))->add_Resuming(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IWebUIActivationStatics<T>::Resuming(F handler) const
{
	return Resuming(Windows::UI::WebUI::ResumingEventHandler(handler));
}

template <typename T> void impl_IWebUIActivationStatics<T>::Resuming(EventRegistrationToken const token) const
{
	check(static_cast<IWebUIActivationStatics const &>(static_cast<T const &>(*this))->remove_Resuming(token));
}

template <typename T> EventRegistrationToken impl_IWebUIActivationStatics<T>::Navigated(Windows::UI::WebUI::INavigatedEventHandler const & handler) const
{
	EventRegistrationToken token = {};
	check(static_cast<IWebUIActivationStatics const &>(static_cast<T const &>(*this))->add_Navigated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> EventRegistrationToken impl_IWebUIActivationStatics<T>::Navigated(F handler) const
{
	return Navigated(Windows::UI::WebUI::NavigatedEventHandler(handler));
}

template <typename T> void impl_IWebUIActivationStatics<T>::Navigated(EventRegistrationToken const token) const
{
	check(static_cast<IWebUIActivationStatics const &>(static_cast<T const &>(*this))->remove_Navigated(token));
}

template <typename T> Windows::UI::WebUI::PrintContent impl_IHtmlPrintDocumentSource<T>::Content() const
{
	Windows::UI::WebUI::PrintContent value = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->get_Content(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::Content(Windows::UI::WebUI::PrintContent const value) const
{
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->put_Content(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::LeftMargin() const
{
	float value = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->get_LeftMargin(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::LeftMargin(float const value) const
{
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->put_LeftMargin(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::TopMargin() const
{
	float value = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->get_TopMargin(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::TopMargin(float const value) const
{
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->put_TopMargin(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::RightMargin() const
{
	float value = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->get_RightMargin(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::RightMargin(float const value) const
{
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->put_RightMargin(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::BottomMargin() const
{
	float value = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->get_BottomMargin(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::BottomMargin(float const value) const
{
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->put_BottomMargin(value));
}

template <typename T> bool impl_IHtmlPrintDocumentSource<T>::EnableHeaderFooter() const
{
	bool value = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->get_EnableHeaderFooter(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::EnableHeaderFooter(bool const value) const
{
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->put_EnableHeaderFooter(value));
}

template <typename T> bool impl_IHtmlPrintDocumentSource<T>::ShrinkToFit() const
{
	bool value = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->get_ShrinkToFit(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::ShrinkToFit(bool const value) const
{
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->put_ShrinkToFit(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::PercentScale() const
{
	float pScalePercent = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->get_PercentScale(&pScalePercent));
	return pScalePercent;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::PercentScale(float const scalePercent) const
{
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->put_PercentScale(scalePercent));
}

template <typename T> String impl_IHtmlPrintDocumentSource<T>::PageRange() const
{
	String pstrPageRange = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->get_PageRange(set(pstrPageRange)));
	return pstrPageRange;
}

template <typename T> bool impl_IHtmlPrintDocumentSource<T>::TrySetPageRange(String const & strPageRange) const
{
	bool pfSuccess = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->abi_TrySetPageRange(get(strPageRange), BoolProxy(pfSuccess)));
	return pfSuccess;
}

template <typename T> template <unsigned S0> bool impl_IHtmlPrintDocumentSource<T>::TrySetPageRange(wchar_t const (&strPageRange)[S0]) const
{
	bool pfSuccess = {};
	check(static_cast<IHtmlPrintDocumentSource const &>(static_cast<T const &>(*this))->abi_TrySetPageRange(StringReference(strPageRange), BoolProxy(pfSuccess)));
	return pfSuccess;
}

}}}}

namespace Modern { namespace Windows { namespace Web {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> impl_IUriToStreamResolver<T>::UriToStreamAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> operation = {};
	check(static_cast<IUriToStreamResolver const &>(static_cast<T const &>(*this))->abi_UriToStreamAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Web::WebErrorStatus impl_IWebErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Web::WebErrorStatus status = {};
	check(static_cast<IWebErrorStatics const &>(static_cast<T const &>(*this))->abi_GetStatus(hresult, &status));
	return status;
}

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

template <typename T> Windows::Web::Syndication::ISyndicationText impl_IResourceCollection<T>::Title() const
{
	Windows::Web::Syndication::ISyndicationText value = {};
	check(static_cast<IResourceCollection const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IResourceCollection<T>::Uri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IResourceCollection const &>(static_cast<T const &>(*this))->get_Uri(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Web::Syndication::SyndicationCategory> impl_IResourceCollection<T>::Categories() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Web::Syndication::SyndicationCategory> value = {};
	check(static_cast<IResourceCollection const &>(static_cast<T const &>(*this))->get_Categories(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IResourceCollection<T>::Accepts() const
{
	Windows::Foundation::Collections::IVectorView<String> value = {};
	check(static_cast<IResourceCollection const &>(static_cast<T const &>(*this))->get_Accepts(set(value)));
	return value;
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_IWorkspace<T>::Title() const
{
	Windows::Web::Syndication::ISyndicationText value = {};
	check(static_cast<IWorkspace const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::ResourceCollection> impl_IWorkspace<T>::Collections() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::ResourceCollection> value = {};
	check(static_cast<IWorkspace const &>(static_cast<T const &>(*this))->get_Collections(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::Workspace> impl_IServiceDocument<T>::Workspaces() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::Workspace> value = {};
	check(static_cast<IServiceDocument const &>(static_cast<T const &>(*this))->get_Workspaces(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::AtomPub::ServiceDocument, Modern::Windows::Web::Syndication::RetrievalProgress> impl_IAtomPubClient<T>::RetrieveServiceDocumentAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::AtomPub::ServiceDocument, Modern::Windows::Web::Syndication::RetrievalProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_RetrieveServiceDocumentAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, Modern::Windows::Web::Syndication::RetrievalProgress> impl_IAtomPubClient<T>::RetrieveMediaResourceAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, Modern::Windows::Web::Syndication::RetrievalProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_RetrieveMediaResourceAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::RetrievalProgress> impl_IAtomPubClient<T>::RetrieveResourceAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::RetrievalProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_RetrieveResourceAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::CreateResourceAsync(Windows::Foundation::Uri const & uri, String const & description, Windows::Web::Syndication::SyndicationItem const & item) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_CreateResourceAsync(get(uri), get(description), get(item), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::CreateResourceAsync(Windows::Foundation::Uri const & uri, wchar_t const (&description)[S0], Windows::Web::Syndication::SyndicationItem const & item) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_CreateResourceAsync(get(uri), StringReference(description), get(item), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::CreateMediaResourceAsync(Windows::Foundation::Uri const & uri, String const & mediaType, String const & description, Windows::Storage::Streams::IInputStream const & mediaStream) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_CreateMediaResourceAsync(get(uri), get(mediaType), get(description), get(mediaStream), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::CreateMediaResourceAsync(Windows::Foundation::Uri const & uri, wchar_t const (&mediaType)[S0], wchar_t const (&description)[S1], Windows::Storage::Streams::IInputStream const & mediaStream) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_CreateMediaResourceAsync(get(uri), StringReference(mediaType), StringReference(description), get(mediaStream), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::UpdateMediaResourceAsync(Windows::Foundation::Uri const & uri, String const & mediaType, Windows::Storage::Streams::IInputStream const & mediaStream) const
{
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_UpdateMediaResourceAsync(get(uri), get(mediaType), get(mediaStream), set(operation)));
	return operation;
}

template <typename T> template <unsigned S0> Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::UpdateMediaResourceAsync(Windows::Foundation::Uri const & uri, wchar_t const (&mediaType)[S0], Windows::Storage::Streams::IInputStream const & mediaStream) const
{
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_UpdateMediaResourceAsync(get(uri), StringReference(mediaType), get(mediaStream), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::UpdateResourceAsync(Windows::Foundation::Uri const & uri, Windows::Web::Syndication::SyndicationItem const & item) const
{
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_UpdateResourceAsync(get(uri), get(item), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::UpdateResourceItemAsync(Windows::Web::Syndication::SyndicationItem const & item) const
{
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_UpdateResourceItemAsync(get(item), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::DeleteResourceAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_DeleteResourceAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::DeleteResourceItemAsync(Windows::Web::Syndication::SyndicationItem const & item) const
{
	Windows::Foundation::IAsyncActionWithProgress<Modern::Windows::Web::Syndication::TransferProgress> operation = {};
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_DeleteResourceItemAsync(get(item), set(operation)));
	return operation;
}

template <typename T> void impl_IAtomPubClient<T>::CancelAsyncOperations() const
{
	check(static_cast<IAtomPubClient const &>(static_cast<T const &>(*this))->abi_CancelAsyncOperations());
}

template <typename T> Windows::Web::AtomPub::AtomPubClient impl_IAtomPubClientFactory<T>::CreateAtomPubClientWithCredentials(Windows::Security::Credentials::PasswordCredential const & serverCredential) const
{
	Windows::Web::AtomPub::AtomPubClient atomPubClient(nullptr);
	check(static_cast<IAtomPubClientFactory const &>(static_cast<T const &>(*this))->abi_CreateAtomPubClientWithCredentials(get(serverCredential), set(atomPubClient)));
	return atomPubClient;
}

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

template <typename T> Windows::Web::Http::HttpClient impl_IHttpClientFactory<T>::Create(Windows::Web::Http::Filters::IHttpFilter const & filter) const
{
	Windows::Web::Http::HttpClient client(nullptr);
	check(static_cast<IHttpClientFactory const &>(static_cast<T const &>(*this))->abi_Create(get(filter), set(client)));
	return client;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::DeleteAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_DeleteAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_GetAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::HttpCompletionOption const completionOption) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_GetWithOptionAsync(get(uri), completionOption, set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetBufferAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_GetBufferAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetInputStreamAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_GetInputStreamAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<String, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetStringAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<String, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_GetStringAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::PostAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_PostAsync(get(uri), get(content), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::PutAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_PutAsync(get(uri), get(content), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_SendRequestAsync(get(request), set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request, Windows::Web::Http::HttpCompletionOption const completionOption) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->abi_SendRequestWithOptionAsync(get(request), completionOption, set(operation)));
	return operation;
}

template <typename T> Windows::Web::Http::Headers::HttpRequestHeaderCollection impl_IHttpClient<T>::DefaultRequestHeaders() const
{
	Windows::Web::Http::Headers::HttpRequestHeaderCollection value(nullptr);
	check(static_cast<IHttpClient const &>(static_cast<T const &>(*this))->get_DefaultRequestHeaders(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpContentHeaderCollection impl_IHttpContent<T>::Headers() const
{
	Windows::Web::Http::Headers::HttpContentHeaderCollection value(nullptr);
	check(static_cast<IHttpContent const &>(static_cast<T const &>(*this))->get_Headers(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IHttpContent<T>::BufferAllAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation = {};
	check(static_cast<IHttpContent const &>(static_cast<T const &>(*this))->abi_BufferAllAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned long long> impl_IHttpContent<T>::ReadAsBufferAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned long long> operation = {};
	check(static_cast<IHttpContent const &>(static_cast<T const &>(*this))->abi_ReadAsBufferAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, unsigned long long> impl_IHttpContent<T>::ReadAsInputStreamAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, unsigned long long> operation = {};
	check(static_cast<IHttpContent const &>(static_cast<T const &>(*this))->abi_ReadAsInputStreamAsync(set(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<String, unsigned long long> impl_IHttpContent<T>::ReadAsStringAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<String, unsigned long long> operation = {};
	check(static_cast<IHttpContent const &>(static_cast<T const &>(*this))->abi_ReadAsStringAsync(set(operation)));
	return operation;
}

template <typename T> bool impl_IHttpContent<T>::TryComputeLength(unsigned long long & length) const
{
	bool succeeded = {};
	check(static_cast<IHttpContent const &>(static_cast<T const &>(*this))->abi_TryComputeLength(&length, BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IHttpContent<T>::WriteToStreamAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation = {};
	check(static_cast<IHttpContent const &>(static_cast<T const &>(*this))->abi_WriteToStreamAsync(get(outputStream), set(operation)));
	return operation;
}

template <typename T> bool impl_IHttpCookieManager<T>::SetCookie(Windows::Web::Http::HttpCookie const & cookie) const
{
	bool replaced = {};
	check(static_cast<IHttpCookieManager const &>(static_cast<T const &>(*this))->abi_SetCookie(get(cookie), BoolProxy(replaced)));
	return replaced;
}

template <typename T> bool impl_IHttpCookieManager<T>::SetCookie(Windows::Web::Http::HttpCookie const & cookie, bool const thirdParty) const
{
	bool replaced = {};
	check(static_cast<IHttpCookieManager const &>(static_cast<T const &>(*this))->abi_SetCookieWithThirdParty(get(cookie), thirdParty, BoolProxy(replaced)));
	return replaced;
}

template <typename T> void impl_IHttpCookieManager<T>::DeleteCookie(Windows::Web::Http::HttpCookie const & cookie) const
{
	check(static_cast<IHttpCookieManager const &>(static_cast<T const &>(*this))->abi_DeleteCookie(get(cookie)));
}

template <typename T> Windows::Web::Http::HttpCookieCollection impl_IHttpCookieManager<T>::GetCookies(Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Http::HttpCookieCollection value(nullptr);
	check(static_cast<IHttpCookieManager const &>(static_cast<T const &>(*this))->abi_GetCookies(get(uri), set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpCookie impl_IHttpCookieFactory<T>::Create(String const & name, String const & domain, String const & path) const
{
	Windows::Web::Http::HttpCookie cookie(nullptr);
	check(static_cast<IHttpCookieFactory const &>(static_cast<T const &>(*this))->abi_Create(get(name), get(domain), get(path), set(cookie)));
	return cookie;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Http::HttpCookie impl_IHttpCookieFactory<T>::Create(wchar_t const (&name)[S0], wchar_t const (&domain)[S1], wchar_t const (&path)[S2]) const
{
	Windows::Web::Http::HttpCookie cookie(nullptr);
	check(static_cast<IHttpCookieFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(name), StringReference(domain), StringReference(path), set(cookie)));
	return cookie;
}

template <typename T> String impl_IHttpCookie<T>::Name() const
{
	String value = {};
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> String impl_IHttpCookie<T>::Domain() const
{
	String value = {};
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->get_Domain(set(value)));
	return value;
}

template <typename T> String impl_IHttpCookie<T>::Path() const
{
	String value = {};
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->get_Path(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IHttpCookie<T>::Expires() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->get_Expires(set(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::Expires(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->put_Expires(get(value)));
}

template <typename T> bool impl_IHttpCookie<T>::HttpOnly() const
{
	bool value = {};
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->get_HttpOnly(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::HttpOnly(bool const value) const
{
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->put_HttpOnly(value));
}

template <typename T> bool impl_IHttpCookie<T>::Secure() const
{
	bool value = {};
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->get_Secure(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::Secure(bool const value) const
{
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->put_Secure(value));
}

template <typename T> String impl_IHttpCookie<T>::Value() const
{
	String value = {};
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::Value(String const & value) const
{
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->put_Value(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpCookie<T>::Value(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpCookie const &>(static_cast<T const &>(*this))->put_Value(StringReference(value)));
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Delete() const
{
	Windows::Web::Http::HttpMethod value(nullptr);
	check(static_cast<IHttpMethodStatics const &>(static_cast<T const &>(*this))->get_Delete(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Get() const
{
	Windows::Web::Http::HttpMethod value(nullptr);
	check(static_cast<IHttpMethodStatics const &>(static_cast<T const &>(*this))->get_Get(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Head() const
{
	Windows::Web::Http::HttpMethod value(nullptr);
	check(static_cast<IHttpMethodStatics const &>(static_cast<T const &>(*this))->get_Head(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Options() const
{
	Windows::Web::Http::HttpMethod value(nullptr);
	check(static_cast<IHttpMethodStatics const &>(static_cast<T const &>(*this))->get_Options(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Patch() const
{
	Windows::Web::Http::HttpMethod value(nullptr);
	check(static_cast<IHttpMethodStatics const &>(static_cast<T const &>(*this))->get_Patch(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Post() const
{
	Windows::Web::Http::HttpMethod value(nullptr);
	check(static_cast<IHttpMethodStatics const &>(static_cast<T const &>(*this))->get_Post(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Put() const
{
	Windows::Web::Http::HttpMethod value(nullptr);
	check(static_cast<IHttpMethodStatics const &>(static_cast<T const &>(*this))->get_Put(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodFactory<T>::Create(String const & method) const
{
	Windows::Web::Http::HttpMethod httpMethod(nullptr);
	check(static_cast<IHttpMethodFactory const &>(static_cast<T const &>(*this))->abi_Create(get(method), set(httpMethod)));
	return httpMethod;
}

template <typename T> template <unsigned S0> Windows::Web::Http::HttpMethod impl_IHttpMethodFactory<T>::Create(wchar_t const (&method)[S0]) const
{
	Windows::Web::Http::HttpMethod httpMethod(nullptr);
	check(static_cast<IHttpMethodFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(method), set(httpMethod)));
	return httpMethod;
}

template <typename T> String impl_IHttpMethod<T>::Method() const
{
	String value = {};
	check(static_cast<IHttpMethod const &>(static_cast<T const &>(*this))->get_Method(set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IHttpTransportInformation<T>::ServerCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value(nullptr);
	check(static_cast<IHttpTransportInformation const &>(static_cast<T const &>(*this))->get_ServerCertificate(set(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketSslErrorSeverity impl_IHttpTransportInformation<T>::ServerCertificateErrorSeverity() const
{
	Windows::Networking::Sockets::SocketSslErrorSeverity value = {};
	check(static_cast<IHttpTransportInformation const &>(static_cast<T const &>(*this))->get_ServerCertificateErrorSeverity(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IHttpTransportInformation<T>::ServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVectorView<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> value = {};
	check(static_cast<IHttpTransportInformation const &>(static_cast<T const &>(*this))->get_ServerCertificateErrors(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_IHttpTransportInformation<T>::ServerIntermediateCertificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value = {};
	check(static_cast<IHttpTransportInformation const &>(static_cast<T const &>(*this))->get_ServerIntermediateCertificates(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpRequestMessage impl_IHttpRequestMessageFactory<T>::Create(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Http::HttpRequestMessage httpRequestMessage(nullptr);
	check(static_cast<IHttpRequestMessageFactory const &>(static_cast<T const &>(*this))->abi_Create(get(method), get(uri), set(httpRequestMessage)));
	return httpRequestMessage;
}

template <typename T> Windows::Web::Http::IHttpContent impl_IHttpRequestMessage<T>::Content() const
{
	Windows::Web::Http::IHttpContent value = {};
	check(static_cast<IHttpRequestMessage const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestMessage<T>::Content(Windows::Web::Http::IHttpContent const & value) const
{
	check(static_cast<IHttpRequestMessage const &>(static_cast<T const &>(*this))->put_Content(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpRequestHeaderCollection impl_IHttpRequestMessage<T>::Headers() const
{
	Windows::Web::Http::Headers::HttpRequestHeaderCollection value(nullptr);
	check(static_cast<IHttpRequestMessage const &>(static_cast<T const &>(*this))->get_Headers(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpRequestMessage<T>::Method() const
{
	Windows::Web::Http::HttpMethod value(nullptr);
	check(static_cast<IHttpRequestMessage const &>(static_cast<T const &>(*this))->get_Method(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestMessage<T>::Method(Windows::Web::Http::HttpMethod const & value) const
{
	check(static_cast<IHttpRequestMessage const &>(static_cast<T const &>(*this))->put_Method(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, IInspectable> impl_IHttpRequestMessage<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, IInspectable> value = {};
	check(static_cast<IHttpRequestMessage const &>(static_cast<T const &>(*this))->get_Properties(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IHttpRequestMessage<T>::RequestUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IHttpRequestMessage const &>(static_cast<T const &>(*this))->get_RequestUri(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestMessage<T>::RequestUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IHttpRequestMessage const &>(static_cast<T const &>(*this))->put_RequestUri(get(value)));
}

template <typename T> Windows::Web::Http::HttpTransportInformation impl_IHttpRequestMessage<T>::TransportInformation() const
{
	Windows::Web::Http::HttpTransportInformation value(nullptr);
	check(static_cast<IHttpRequestMessage const &>(static_cast<T const &>(*this))->get_TransportInformation(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpResponseMessage impl_IHttpResponseMessageFactory<T>::Create(Windows::Web::Http::HttpStatusCode const statusCode) const
{
	Windows::Web::Http::HttpResponseMessage httpResponseMessage(nullptr);
	check(static_cast<IHttpResponseMessageFactory const &>(static_cast<T const &>(*this))->abi_Create(statusCode, set(httpResponseMessage)));
	return httpResponseMessage;
}

template <typename T> Windows::Web::Http::IHttpContent impl_IHttpResponseMessage<T>::Content() const
{
	Windows::Web::Http::IHttpContent value = {};
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::Content(Windows::Web::Http::IHttpContent const & value) const
{
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->put_Content(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpResponseHeaderCollection impl_IHttpResponseMessage<T>::Headers() const
{
	Windows::Web::Http::Headers::HttpResponseHeaderCollection value(nullptr);
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->get_Headers(set(value)));
	return value;
}

template <typename T> bool impl_IHttpResponseMessage<T>::IsSuccessStatusCode() const
{
	bool value = {};
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->get_IsSuccessStatusCode(BoolProxy(value)));
	return value;
}

template <typename T> String impl_IHttpResponseMessage<T>::ReasonPhrase() const
{
	String value = {};
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->get_ReasonPhrase(set(value)));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::ReasonPhrase(String const & value) const
{
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->put_ReasonPhrase(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpResponseMessage<T>::ReasonPhrase(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->put_ReasonPhrase(StringReference(value)));
}

template <typename T> Windows::Web::Http::HttpRequestMessage impl_IHttpResponseMessage<T>::RequestMessage() const
{
	Windows::Web::Http::HttpRequestMessage value(nullptr);
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->get_RequestMessage(set(value)));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::RequestMessage(Windows::Web::Http::HttpRequestMessage const & value) const
{
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->put_RequestMessage(get(value)));
}

template <typename T> Windows::Web::Http::HttpResponseMessageSource impl_IHttpResponseMessage<T>::Source() const
{
	Windows::Web::Http::HttpResponseMessageSource value = {};
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->get_Source(&value));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::Source(Windows::Web::Http::HttpResponseMessageSource const value) const
{
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->put_Source(value));
}

template <typename T> Windows::Web::Http::HttpStatusCode impl_IHttpResponseMessage<T>::StatusCode() const
{
	Windows::Web::Http::HttpStatusCode value = {};
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->get_StatusCode(&value));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::StatusCode(Windows::Web::Http::HttpStatusCode const value) const
{
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->put_StatusCode(value));
}

template <typename T> Windows::Web::Http::HttpVersion impl_IHttpResponseMessage<T>::Version() const
{
	Windows::Web::Http::HttpVersion value = {};
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->get_Version(&value));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::Version(Windows::Web::Http::HttpVersion const value) const
{
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->put_Version(value));
}

template <typename T> Windows::Web::Http::HttpResponseMessage impl_IHttpResponseMessage<T>::EnsureSuccessStatusCode() const
{
	Windows::Web::Http::HttpResponseMessage httpResponseMessage(nullptr);
	check(static_cast<IHttpResponseMessage const &>(static_cast<T const &>(*this))->abi_EnsureSuccessStatusCode(set(httpResponseMessage)));
	return httpResponseMessage;
}

template <typename T> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromString(String const & content) const
{
	Windows::Web::Http::HttpStringContent stringContent(nullptr);
	check(static_cast<IHttpStringContentFactory const &>(static_cast<T const &>(*this))->abi_CreateFromString(get(content), set(stringContent)));
	return stringContent;
}

template <typename T> template <unsigned S0> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromString(wchar_t const (&content)[S0]) const
{
	Windows::Web::Http::HttpStringContent stringContent(nullptr);
	check(static_cast<IHttpStringContentFactory const &>(static_cast<T const &>(*this))->abi_CreateFromString(StringReference(content), set(stringContent)));
	return stringContent;
}

template <typename T> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromStringWithEncoding(String const & content, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Web::Http::HttpStringContent stringContent(nullptr);
	check(static_cast<IHttpStringContentFactory const &>(static_cast<T const &>(*this))->abi_CreateFromStringWithEncoding(get(content), encoding, set(stringContent)));
	return stringContent;
}

template <typename T> template <unsigned S0> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromStringWithEncoding(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Web::Http::HttpStringContent stringContent(nullptr);
	check(static_cast<IHttpStringContentFactory const &>(static_cast<T const &>(*this))->abi_CreateFromStringWithEncoding(StringReference(content), encoding, set(stringContent)));
	return stringContent;
}

template <typename T> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromStringWithEncodingAndMediaType(String const & content, Windows::Storage::Streams::UnicodeEncoding const encoding, String const & mediaType) const
{
	Windows::Web::Http::HttpStringContent stringContent(nullptr);
	check(static_cast<IHttpStringContentFactory const &>(static_cast<T const &>(*this))->abi_CreateFromStringWithEncodingAndMediaType(get(content), encoding, get(mediaType), set(stringContent)));
	return stringContent;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromStringWithEncodingAndMediaType(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding, wchar_t const (&mediaType)[S1]) const
{
	Windows::Web::Http::HttpStringContent stringContent(nullptr);
	check(static_cast<IHttpStringContentFactory const &>(static_cast<T const &>(*this))->abi_CreateFromStringWithEncodingAndMediaType(StringReference(content), encoding, StringReference(mediaType), set(stringContent)));
	return stringContent;
}

template <typename T> Windows::Web::Http::HttpBufferContent impl_IHttpBufferContentFactory<T>::CreateFromBuffer(Windows::Storage::Streams::IBuffer const & content) const
{
	Windows::Web::Http::HttpBufferContent bufferContent(nullptr);
	check(static_cast<IHttpBufferContentFactory const &>(static_cast<T const &>(*this))->abi_CreateFromBuffer(get(content), set(bufferContent)));
	return bufferContent;
}

template <typename T> Windows::Web::Http::HttpBufferContent impl_IHttpBufferContentFactory<T>::CreateFromBufferWithOffset(Windows::Storage::Streams::IBuffer const & content, unsigned const offset, unsigned const count) const
{
	Windows::Web::Http::HttpBufferContent bufferContent(nullptr);
	check(static_cast<IHttpBufferContentFactory const &>(static_cast<T const &>(*this))->abi_CreateFromBufferWithOffset(get(content), offset, count, set(bufferContent)));
	return bufferContent;
}

template <typename T> Windows::Web::Http::HttpStreamContent impl_IHttpStreamContentFactory<T>::CreateFromInputStream(Windows::Storage::Streams::IInputStream const & content) const
{
	Windows::Web::Http::HttpStreamContent streamContent(nullptr);
	check(static_cast<IHttpStreamContentFactory const &>(static_cast<T const &>(*this))->abi_CreateFromInputStream(get(content), set(streamContent)));
	return streamContent;
}

template <typename T> Windows::Web::Http::HttpFormUrlEncodedContent impl_IHttpFormUrlEncodedContentFactory<T>::Create(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content) const
{
	Windows::Web::Http::HttpFormUrlEncodedContent formUrlEncodedContent(nullptr);
	check(static_cast<IHttpFormUrlEncodedContentFactory const &>(static_cast<T const &>(*this))->abi_Create(get(content), set(formUrlEncodedContent)));
	return formUrlEncodedContent;
}

template <typename T> Windows::Web::Http::HttpMultipartContent impl_IHttpMultipartContentFactory<T>::CreateWithSubtype(String const & subtype) const
{
	Windows::Web::Http::HttpMultipartContent multipartContent(nullptr);
	check(static_cast<IHttpMultipartContentFactory const &>(static_cast<T const &>(*this))->abi_CreateWithSubtype(get(subtype), set(multipartContent)));
	return multipartContent;
}

template <typename T> template <unsigned S0> Windows::Web::Http::HttpMultipartContent impl_IHttpMultipartContentFactory<T>::CreateWithSubtype(wchar_t const (&subtype)[S0]) const
{
	Windows::Web::Http::HttpMultipartContent multipartContent(nullptr);
	check(static_cast<IHttpMultipartContentFactory const &>(static_cast<T const &>(*this))->abi_CreateWithSubtype(StringReference(subtype), set(multipartContent)));
	return multipartContent;
}

template <typename T> Windows::Web::Http::HttpMultipartContent impl_IHttpMultipartContentFactory<T>::CreateWithSubtypeAndBoundary(String const & subtype, String const & boundary) const
{
	Windows::Web::Http::HttpMultipartContent multipartContent(nullptr);
	check(static_cast<IHttpMultipartContentFactory const &>(static_cast<T const &>(*this))->abi_CreateWithSubtypeAndBoundary(get(subtype), get(boundary), set(multipartContent)));
	return multipartContent;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Http::HttpMultipartContent impl_IHttpMultipartContentFactory<T>::CreateWithSubtypeAndBoundary(wchar_t const (&subtype)[S0], wchar_t const (&boundary)[S1]) const
{
	Windows::Web::Http::HttpMultipartContent multipartContent(nullptr);
	check(static_cast<IHttpMultipartContentFactory const &>(static_cast<T const &>(*this))->abi_CreateWithSubtypeAndBoundary(StringReference(subtype), StringReference(boundary), set(multipartContent)));
	return multipartContent;
}

template <typename T> void impl_IHttpMultipartContent<T>::Add(Windows::Web::Http::IHttpContent const & content) const
{
	check(static_cast<IHttpMultipartContent const &>(static_cast<T const &>(*this))->abi_Add(get(content)));
}

template <typename T> Windows::Web::Http::HttpMultipartFormDataContent impl_IHttpMultipartFormDataContentFactory<T>::CreateWithBoundary(String const & boundary) const
{
	Windows::Web::Http::HttpMultipartFormDataContent multipartFormDataContent(nullptr);
	check(static_cast<IHttpMultipartFormDataContentFactory const &>(static_cast<T const &>(*this))->abi_CreateWithBoundary(get(boundary), set(multipartFormDataContent)));
	return multipartFormDataContent;
}

template <typename T> template <unsigned S0> Windows::Web::Http::HttpMultipartFormDataContent impl_IHttpMultipartFormDataContentFactory<T>::CreateWithBoundary(wchar_t const (&boundary)[S0]) const
{
	Windows::Web::Http::HttpMultipartFormDataContent multipartFormDataContent(nullptr);
	check(static_cast<IHttpMultipartFormDataContentFactory const &>(static_cast<T const &>(*this))->abi_CreateWithBoundary(StringReference(boundary), set(multipartFormDataContent)));
	return multipartFormDataContent;
}

template <typename T> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content) const
{
	check(static_cast<IHttpMultipartFormDataContent const &>(static_cast<T const &>(*this))->abi_Add(get(content)));
}

template <typename T> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content, String const & name) const
{
	check(static_cast<IHttpMultipartFormDataContent const &>(static_cast<T const &>(*this))->abi_AddWithName(get(content), get(name)));
}

template <typename T> template <unsigned S0> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content, wchar_t const (&name)[S0]) const
{
	check(static_cast<IHttpMultipartFormDataContent const &>(static_cast<T const &>(*this))->abi_AddWithName(get(content), StringReference(name)));
}

template <typename T> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content, String const & name, String const & fileName) const
{
	check(static_cast<IHttpMultipartFormDataContent const &>(static_cast<T const &>(*this))->abi_AddWithNameAndFileName(get(content), get(name), get(fileName)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content, wchar_t const (&name)[S0], wchar_t const (&fileName)[S1]) const
{
	check(static_cast<IHttpMultipartFormDataContent const &>(static_cast<T const &>(*this))->abi_AddWithNameAndFileName(get(content), StringReference(name), StringReference(fileName)));
}

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> impl_IHttpFilter<T>::SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, Modern::Windows::Web::Http::HttpProgress> operation = {};
	check(static_cast<IHttpFilter const &>(static_cast<T const &>(*this))->abi_SendRequestAsync(get(request), set(operation)));
	return operation;
}

template <typename T> Windows::Web::Http::Filters::HttpCacheReadBehavior impl_IHttpCacheControl<T>::ReadBehavior() const
{
	Windows::Web::Http::Filters::HttpCacheReadBehavior value = {};
	check(static_cast<IHttpCacheControl const &>(static_cast<T const &>(*this))->get_ReadBehavior(&value));
	return value;
}

template <typename T> void impl_IHttpCacheControl<T>::ReadBehavior(Windows::Web::Http::Filters::HttpCacheReadBehavior const value) const
{
	check(static_cast<IHttpCacheControl const &>(static_cast<T const &>(*this))->put_ReadBehavior(value));
}

template <typename T> Windows::Web::Http::Filters::HttpCacheWriteBehavior impl_IHttpCacheControl<T>::WriteBehavior() const
{
	Windows::Web::Http::Filters::HttpCacheWriteBehavior value = {};
	check(static_cast<IHttpCacheControl const &>(static_cast<T const &>(*this))->get_WriteBehavior(&value));
	return value;
}

template <typename T> void impl_IHttpCacheControl<T>::WriteBehavior(Windows::Web::Http::Filters::HttpCacheWriteBehavior const value) const
{
	check(static_cast<IHttpCacheControl const &>(static_cast<T const &>(*this))->put_WriteBehavior(value));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::AllowAutoRedirect() const
{
	bool value = {};
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_AllowAutoRedirect(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::AllowAutoRedirect(bool const value) const
{
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->put_AllowAutoRedirect(value));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::AllowUI() const
{
	bool value = {};
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_AllowUI(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::AllowUI(bool const value) const
{
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->put_AllowUI(value));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::AutomaticDecompression() const
{
	bool value = {};
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_AutomaticDecompression(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::AutomaticDecompression(bool const value) const
{
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->put_AutomaticDecompression(value));
}

template <typename T> Windows::Web::Http::Filters::HttpCacheControl impl_IHttpBaseProtocolFilter<T>::CacheControl() const
{
	Windows::Web::Http::Filters::HttpCacheControl value(nullptr);
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_CacheControl(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpCookieManager impl_IHttpBaseProtocolFilter<T>::CookieManager() const
{
	Windows::Web::Http::HttpCookieManager value(nullptr);
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_CookieManager(set(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IHttpBaseProtocolFilter<T>::ClientCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value(nullptr);
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_ClientCertificate(set(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::ClientCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->put_ClientCertificate(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IHttpBaseProtocolFilter<T>::IgnorableServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVector<Modern::Windows::Security::Cryptography::Certificates::ChainValidationResult> value = {};
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_IgnorableServerCertificateErrors(set(value)));
	return value;
}

template <typename T> unsigned impl_IHttpBaseProtocolFilter<T>::MaxConnectionsPerServer() const
{
	unsigned value = {};
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_MaxConnectionsPerServer(&value));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::MaxConnectionsPerServer(unsigned const value) const
{
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->put_MaxConnectionsPerServer(value));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IHttpBaseProtocolFilter<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value(nullptr);
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_ProxyCredential(set(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->put_ProxyCredential(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IHttpBaseProtocolFilter<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential value(nullptr);
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_ServerCredential(set(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->put_ServerCredential(get(value)));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::UseProxy() const
{
	bool value = {};
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->get_UseProxy(BoolProxy(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::UseProxy(bool const value) const
{
	check(static_cast<IHttpBaseProtocolFilter const &>(static_cast<T const &>(*this))->put_UseProxy(value));
}

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

template <typename T> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentHeaderCollection<T>::ContentDisposition() const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue value(nullptr);
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_ContentDisposition(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentDisposition(Windows::Web::Http::Headers::HttpContentDispositionHeaderValue const & value) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->put_ContentDisposition(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection impl_IHttpContentHeaderCollection<T>::ContentEncoding() const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection value(nullptr);
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_ContentEncoding(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection impl_IHttpContentHeaderCollection<T>::ContentLanguage() const
{
	Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection value(nullptr);
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_ContentLanguage(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentHeaderCollection<T>::ContentLength() const
{
	Windows::Foundation::IReference<unsigned long long> value = {};
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_ContentLength(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentLength(Windows::Foundation::IReference<unsigned long long> const & value) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->put_ContentLength(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IHttpContentHeaderCollection<T>::ContentLocation() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_ContentLocation(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentLocation(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->put_ContentLocation(get(value)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHttpContentHeaderCollection<T>::ContentMD5() const
{
	Windows::Storage::Streams::IBuffer value = {};
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_ContentMD5(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentMD5(Windows::Storage::Streams::IBuffer const & value) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->put_ContentMD5(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentHeaderCollection<T>::ContentRange() const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue value(nullptr);
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_ContentRange(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentRange(Windows::Web::Http::Headers::HttpContentRangeHeaderValue const & value) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->put_ContentRange(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpContentHeaderCollection<T>::ContentType() const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue value(nullptr);
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_ContentType(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentType(Windows::Web::Http::Headers::HttpMediaTypeHeaderValue const & value) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->put_ContentType(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IHttpContentHeaderCollection<T>::Expires() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_Expires(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::Expires(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->put_Expires(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IHttpContentHeaderCollection<T>::LastModified() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->get_LastModified(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::LastModified(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->put_LastModified(get(value)));
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::Append(String const & name, String const & value) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->abi_Append(get(name), get(value)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IHttpContentHeaderCollection<T>::Append(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->abi_Append(StringReference(name), StringReference(value)));
}

template <typename T> bool impl_IHttpContentHeaderCollection<T>::TryAppendWithoutValidation(String const & name, String const & value) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->abi_TryAppendWithoutValidation(get(name), get(value), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0, unsigned S1> bool impl_IHttpContentHeaderCollection<T>::TryAppendWithoutValidation(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentHeaderCollection const &>(static_cast<T const &>(*this))->abi_TryAppendWithoutValidation(StringReference(name), StringReference(value), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Accept() const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_Accept(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::AcceptEncoding() const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_AcceptEncoding(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::AcceptLanguage() const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_AcceptLanguage(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpRequestHeaderCollection<T>::Authorization() const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_Authorization(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Authorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_Authorization(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::CacheControl() const
{
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_CacheControl(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Connection() const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_Connection(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Cookie() const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_Cookie(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IHttpRequestHeaderCollection<T>::Date() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_Date(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Date(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_Date(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Expect() const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_Expect(set(value)));
	return value;
}

template <typename T> String impl_IHttpRequestHeaderCollection<T>::From() const
{
	String value = {};
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_From(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::From(String const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_From(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpRequestHeaderCollection<T>::From(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_From(StringReference(value)));
}

template <typename T> Windows::Networking::HostName impl_IHttpRequestHeaderCollection<T>::Host() const
{
	Windows::Networking::HostName value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_Host(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Host(Windows::Networking::HostName const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_Host(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IHttpRequestHeaderCollection<T>::IfModifiedSince() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_IfModifiedSince(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::IfModifiedSince(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_IfModifiedSince(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IHttpRequestHeaderCollection<T>::IfUnmodifiedSince() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_IfUnmodifiedSince(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::IfUnmodifiedSince(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_IfUnmodifiedSince(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IHttpRequestHeaderCollection<T>::MaxForwards() const
{
	Windows::Foundation::IReference<unsigned> value = {};
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_MaxForwards(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::MaxForwards(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_MaxForwards(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpRequestHeaderCollection<T>::ProxyAuthorization() const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_ProxyAuthorization(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::ProxyAuthorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_ProxyAuthorization(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IHttpRequestHeaderCollection<T>::Referer() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_Referer(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Referer(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->put_Referer(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::TransferEncoding() const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_TransferEncoding(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::UserAgent() const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection value(nullptr);
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->get_UserAgent(set(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Append(String const & name, String const & value) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->abi_Append(get(name), get(value)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IHttpRequestHeaderCollection<T>::Append(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->abi_Append(StringReference(name), StringReference(value)));
}

template <typename T> bool impl_IHttpRequestHeaderCollection<T>::TryAppendWithoutValidation(String const & name, String const & value) const
{
	bool succeeded = {};
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->abi_TryAppendWithoutValidation(get(name), get(value), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0, unsigned S1> bool impl_IHttpRequestHeaderCollection<T>::TryAppendWithoutValidation(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	bool succeeded = {};
	check(static_cast<IHttpRequestHeaderCollection const &>(static_cast<T const &>(*this))->abi_TryAppendWithoutValidation(StringReference(name), StringReference(value), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> impl_IHttpResponseHeaderCollection<T>::Age() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> value = {};
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_Age(set(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Age(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const
{
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->put_Age(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpMethodHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::Allow() const
{
	Windows::Web::Http::Headers::HttpMethodHeaderValueCollection value(nullptr);
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_Allow(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::CacheControl() const
{
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection value(nullptr);
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_CacheControl(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::Connection() const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection value(nullptr);
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_Connection(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IHttpResponseHeaderCollection<T>::Date() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_Date(set(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Date(Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> const & value) const
{
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->put_Date(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IHttpResponseHeaderCollection<T>::Location() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_Location(set(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Location(Windows::Foundation::Uri const & value) const
{
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->put_Location(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::ProxyAuthenticate() const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection value(nullptr);
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_ProxyAuthenticate(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue impl_IHttpResponseHeaderCollection<T>::RetryAfter() const
{
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue value(nullptr);
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_RetryAfter(set(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::RetryAfter(Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue const & value) const
{
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->put_RetryAfter(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::TransferEncoding() const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection value(nullptr);
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_TransferEncoding(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::WwwAuthenticate() const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection value(nullptr);
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->get_WwwAuthenticate(set(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Append(String const & name, String const & value) const
{
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->abi_Append(get(name), get(value)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_IHttpResponseHeaderCollection<T>::Append(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->abi_Append(StringReference(name), StringReference(value)));
}

template <typename T> bool impl_IHttpResponseHeaderCollection<T>::TryAppendWithoutValidation(String const & name, String const & value) const
{
	bool succeeded = {};
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->abi_TryAppendWithoutValidation(get(name), get(value), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0, unsigned S1> bool impl_IHttpResponseHeaderCollection<T>::TryAppendWithoutValidation(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	bool succeeded = {};
	check(static_cast<IHttpResponseHeaderCollection const &>(static_cast<T const &>(*this))->abi_TryAppendWithoutValidation(StringReference(name), StringReference(value), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxAge() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> value = {};
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->get_MaxAge(set(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxAge(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const
{
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->put_MaxAge(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxStale() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> value = {};
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->get_MaxStale(set(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxStale(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const
{
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->put_MaxStale(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::MinFresh() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> value = {};
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->get_MinFresh(set(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::MinFresh(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const
{
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->put_MinFresh(get(value)));
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::SharedMaxAge() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> value = {};
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->get_SharedMaxAge(set(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::SharedMaxAge(Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> const & value) const
{
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->put_SharedMaxAge(get(value)));
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpCacheDirectiveHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpCacheDirectiveHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpCacheDirectiveHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue(nullptr);
	check(static_cast<IHttpChallengeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue(nullptr);
	check(static_cast<IHttpChallengeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> bool impl_IHttpChallengeHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpChallengeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(challengeHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpChallengeHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpChallengeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(challengeHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueFactory<T>::CreateFromScheme(String const & scheme) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue(nullptr);
	check(static_cast<IHttpChallengeHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromScheme(get(scheme), set(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueFactory<T>::CreateFromScheme(wchar_t const (&scheme)[S0]) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue(nullptr);
	check(static_cast<IHttpChallengeHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromScheme(StringReference(scheme), set(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueFactory<T>::CreateFromSchemeWithToken(String const & scheme, String const & token) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue(nullptr);
	check(static_cast<IHttpChallengeHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromSchemeWithToken(get(scheme), get(token), set(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueFactory<T>::CreateFromSchemeWithToken(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue(nullptr);
	check(static_cast<IHttpChallengeHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromSchemeWithToken(StringReference(scheme), StringReference(token), set(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpChallengeHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value = {};
	check(static_cast<IHttpChallengeHeaderValue const &>(static_cast<T const &>(*this))->get_Parameters(set(value)));
	return value;
}

template <typename T> String impl_IHttpChallengeHeaderValue<T>::Scheme() const
{
	String value = {};
	check(static_cast<IHttpChallengeHeaderValue const &>(static_cast<T const &>(*this))->get_Scheme(set(value)));
	return value;
}

template <typename T> String impl_IHttpChallengeHeaderValue<T>::Token() const
{
	String value = {};
	check(static_cast<IHttpChallengeHeaderValue const &>(static_cast<T const &>(*this))->get_Token(set(value)));
	return value;
}

template <typename T> void impl_IHttpChallengeHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpChallengeHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpChallengeHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpChallengeHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpChallengeHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpChallengeHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpChallengeHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpChallengeHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue(nullptr);
	check(static_cast<IHttpCredentialsHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue(nullptr);
	check(static_cast<IHttpCredentialsHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> bool impl_IHttpCredentialsHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpCredentialsHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(credentialsHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpCredentialsHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpCredentialsHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(credentialsHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueFactory<T>::CreateFromScheme(String const & scheme) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue(nullptr);
	check(static_cast<IHttpCredentialsHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromScheme(get(scheme), set(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueFactory<T>::CreateFromScheme(wchar_t const (&scheme)[S0]) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue(nullptr);
	check(static_cast<IHttpCredentialsHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromScheme(StringReference(scheme), set(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueFactory<T>::CreateFromSchemeWithToken(String const & scheme, String const & token) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue(nullptr);
	check(static_cast<IHttpCredentialsHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromSchemeWithToken(get(scheme), get(token), set(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueFactory<T>::CreateFromSchemeWithToken(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue(nullptr);
	check(static_cast<IHttpCredentialsHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromSchemeWithToken(StringReference(scheme), StringReference(token), set(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpCredentialsHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value = {};
	check(static_cast<IHttpCredentialsHeaderValue const &>(static_cast<T const &>(*this))->get_Parameters(set(value)));
	return value;
}

template <typename T> String impl_IHttpCredentialsHeaderValue<T>::Scheme() const
{
	String value = {};
	check(static_cast<IHttpCredentialsHeaderValue const &>(static_cast<T const &>(*this))->get_Scheme(set(value)));
	return value;
}

template <typename T> String impl_IHttpCredentialsHeaderValue<T>::Token() const
{
	String value = {};
	check(static_cast<IHttpCredentialsHeaderValue const &>(static_cast<T const &>(*this))->get_Token(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue impl_IHttpConnectionOptionHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue connectionOptionHeaderValue(nullptr);
	check(static_cast<IHttpConnectionOptionHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(connectionOptionHeaderValue)));
	return connectionOptionHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue impl_IHttpConnectionOptionHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue connectionOptionHeaderValue(nullptr);
	check(static_cast<IHttpConnectionOptionHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(connectionOptionHeaderValue)));
	return connectionOptionHeaderValue;
}

template <typename T> bool impl_IHttpConnectionOptionHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpConnectionOptionHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(connectionOptionHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpConnectionOptionHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpConnectionOptionHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(connectionOptionHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue impl_IHttpConnectionOptionHeaderValueFactory<T>::Create(String const & token) const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue connectionOptionHeaderValue(nullptr);
	check(static_cast<IHttpConnectionOptionHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(get(token), set(connectionOptionHeaderValue)));
	return connectionOptionHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue impl_IHttpConnectionOptionHeaderValueFactory<T>::Create(wchar_t const (&token)[S0]) const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue connectionOptionHeaderValue(nullptr);
	check(static_cast<IHttpConnectionOptionHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(token), set(connectionOptionHeaderValue)));
	return connectionOptionHeaderValue;
}

template <typename T> String impl_IHttpConnectionOptionHeaderValue<T>::Token() const
{
	String value = {};
	check(static_cast<IHttpConnectionOptionHeaderValue const &>(static_cast<T const &>(*this))->get_Token(set(value)));
	return value;
}

template <typename T> void impl_IHttpConnectionOptionHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpConnectionOptionHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpConnectionOptionHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpConnectionOptionHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpConnectionOptionHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpConnectionOptionHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpConnectionOptionHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpConnectionOptionHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingHeaderValue impl_IHttpContentCodingHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue contentCodingHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(contentCodingHeaderValue)));
	return contentCodingHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingHeaderValue impl_IHttpContentCodingHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue contentCodingHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(contentCodingHeaderValue)));
	return contentCodingHeaderValue;
}

template <typename T> bool impl_IHttpContentCodingHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentCodingHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(contentCodingHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpContentCodingHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentCodingHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(contentCodingHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingHeaderValue impl_IHttpContentCodingHeaderValueFactory<T>::Create(String const & contentCoding) const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue contentCodingHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(get(contentCoding), set(contentCodingHeaderValue)));
	return contentCodingHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingHeaderValue impl_IHttpContentCodingHeaderValueFactory<T>::Create(wchar_t const (&contentCoding)[S0]) const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue contentCodingHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(contentCoding), set(contentCodingHeaderValue)));
	return contentCodingHeaderValue;
}

template <typename T> String impl_IHttpContentCodingHeaderValue<T>::ContentCoding() const
{
	String value = {};
	check(static_cast<IHttpContentCodingHeaderValue const &>(static_cast<T const &>(*this))->get_ContentCoding(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentCodingHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpContentCodingHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpContentCodingHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpContentCodingHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpContentCodingHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentCodingHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpContentCodingHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentCodingHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentDispositionHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue contentDispositionHeaderValue(nullptr);
	check(static_cast<IHttpContentDispositionHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(contentDispositionHeaderValue)));
	return contentDispositionHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentDispositionHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue contentDispositionHeaderValue(nullptr);
	check(static_cast<IHttpContentDispositionHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(contentDispositionHeaderValue)));
	return contentDispositionHeaderValue;
}

template <typename T> bool impl_IHttpContentDispositionHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentDispositionHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(contentDispositionHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpContentDispositionHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentDispositionHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(contentDispositionHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentDispositionHeaderValueFactory<T>::Create(String const & dispositionType) const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue contentDispositionHeaderValue(nullptr);
	check(static_cast<IHttpContentDispositionHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(get(dispositionType), set(contentDispositionHeaderValue)));
	return contentDispositionHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentDispositionHeaderValueFactory<T>::Create(wchar_t const (&dispositionType)[S0]) const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue contentDispositionHeaderValue(nullptr);
	check(static_cast<IHttpContentDispositionHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(dispositionType), set(contentDispositionHeaderValue)));
	return contentDispositionHeaderValue;
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::DispositionType() const
{
	String value = {};
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->get_DispositionType(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::DispositionType(String const & value) const
{
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->put_DispositionType(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpContentDispositionHeaderValue<T>::DispositionType(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->put_DispositionType(StringReference(value)));
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::FileName() const
{
	String value = {};
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->get_FileName(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::FileName(String const & value) const
{
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->put_FileName(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpContentDispositionHeaderValue<T>::FileName(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->put_FileName(StringReference(value)));
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::FileNameStar() const
{
	String value = {};
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->get_FileNameStar(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::FileNameStar(String const & value) const
{
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->put_FileNameStar(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpContentDispositionHeaderValue<T>::FileNameStar(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->put_FileNameStar(StringReference(value)));
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::Name() const
{
	String value = {};
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::Name(String const & value) const
{
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->put_Name(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpContentDispositionHeaderValue<T>::Name(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->put_Name(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpContentDispositionHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value = {};
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->get_Parameters(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentDispositionHeaderValue<T>::Size() const
{
	Windows::Foundation::IReference<unsigned long long> value = {};
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->get_Size(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::Size(Windows::Foundation::IReference<unsigned long long> const & value) const
{
	check(static_cast<IHttpContentDispositionHeaderValue const &>(static_cast<T const &>(*this))->put_Size(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue(nullptr);
	check(static_cast<IHttpContentRangeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue(nullptr);
	check(static_cast<IHttpContentRangeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> bool impl_IHttpContentRangeHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentRangeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(contentRangeHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpContentRangeHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentRangeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(contentRangeHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueFactory<T>::CreateFromLength(unsigned long long const length) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue(nullptr);
	check(static_cast<IHttpContentRangeHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromLength(length, set(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueFactory<T>::CreateFromRange(unsigned long long const from, unsigned long long const to) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue(nullptr);
	check(static_cast<IHttpContentRangeHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromRange(from, to, set(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueFactory<T>::CreateFromRangeWithLength(unsigned long long const from, unsigned long long const to, unsigned long long const length) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue(nullptr);
	check(static_cast<IHttpContentRangeHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromRangeWithLength(from, to, length, set(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentRangeHeaderValue<T>::FirstBytePosition() const
{
	Windows::Foundation::IReference<unsigned long long> value = {};
	check(static_cast<IHttpContentRangeHeaderValue const &>(static_cast<T const &>(*this))->get_FirstBytePosition(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentRangeHeaderValue<T>::LastBytePosition() const
{
	Windows::Foundation::IReference<unsigned long long> value = {};
	check(static_cast<IHttpContentRangeHeaderValue const &>(static_cast<T const &>(*this))->get_LastBytePosition(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentRangeHeaderValue<T>::Length() const
{
	Windows::Foundation::IReference<unsigned long long> value = {};
	check(static_cast<IHttpContentRangeHeaderValue const &>(static_cast<T const &>(*this))->get_Length(set(value)));
	return value;
}

template <typename T> String impl_IHttpContentRangeHeaderValue<T>::Unit() const
{
	String value = {};
	check(static_cast<IHttpContentRangeHeaderValue const &>(static_cast<T const &>(*this))->get_Unit(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentRangeHeaderValue<T>::Unit(String const & value) const
{
	check(static_cast<IHttpContentRangeHeaderValue const &>(static_cast<T const &>(*this))->put_Unit(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpContentRangeHeaderValue<T>::Unit(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpContentRangeHeaderValue const &>(static_cast<T const &>(*this))->put_Unit(StringReference(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue(nullptr);
	check(static_cast<IHttpCookiePairHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue(nullptr);
	check(static_cast<IHttpCookiePairHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> bool impl_IHttpCookiePairHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpCookiePairHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(cookiePairHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpCookiePairHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpCookiePairHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(cookiePairHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueFactory<T>::CreateFromName(String const & name) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue(nullptr);
	check(static_cast<IHttpCookiePairHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromName(get(name), set(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueFactory<T>::CreateFromName(wchar_t const (&name)[S0]) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue(nullptr);
	check(static_cast<IHttpCookiePairHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromName(StringReference(name), set(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueFactory<T>::CreateFromNameWithValue(String const & name, String const & value) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue(nullptr);
	check(static_cast<IHttpCookiePairHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithValue(get(name), get(value), set(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueFactory<T>::CreateFromNameWithValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue(nullptr);
	check(static_cast<IHttpCookiePairHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithValue(StringReference(name), StringReference(value), set(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> String impl_IHttpCookiePairHeaderValue<T>::Name() const
{
	String value = {};
	check(static_cast<IHttpCookiePairHeaderValue const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> String impl_IHttpCookiePairHeaderValue<T>::Value() const
{
	String value = {};
	check(static_cast<IHttpCookiePairHeaderValue const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> void impl_IHttpCookiePairHeaderValue<T>::Value(String const & value) const
{
	check(static_cast<IHttpCookiePairHeaderValue const &>(static_cast<T const &>(*this))->put_Value(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpCookiePairHeaderValue<T>::Value(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpCookiePairHeaderValue const &>(static_cast<T const &>(*this))->put_Value(StringReference(value)));
}

template <typename T> void impl_IHttpCookiePairHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpCookiePairHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpCookiePairHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpCookiePairHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpCookiePairHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpCookiePairHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpCookiePairHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpCookiePairHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue impl_IHttpDateOrDeltaHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue dateOrDeltaHeaderValue(nullptr);
	check(static_cast<IHttpDateOrDeltaHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(dateOrDeltaHeaderValue)));
	return dateOrDeltaHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue impl_IHttpDateOrDeltaHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue dateOrDeltaHeaderValue(nullptr);
	check(static_cast<IHttpDateOrDeltaHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(dateOrDeltaHeaderValue)));
	return dateOrDeltaHeaderValue;
}

template <typename T> bool impl_IHttpDateOrDeltaHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpDateOrDeltaHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(dateOrDeltaHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpDateOrDeltaHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpDateOrDeltaHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(dateOrDeltaHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> impl_IHttpDateOrDeltaHeaderValue<T>::Date() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> value = {};
	check(static_cast<IHttpDateOrDeltaHeaderValue const &>(static_cast<T const &>(*this))->get_Date(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> impl_IHttpDateOrDeltaHeaderValue<T>::Delta() const
{
	Windows::Foundation::IReference<Modern::Windows::Foundation::TimeSpan> value = {};
	check(static_cast<IHttpDateOrDeltaHeaderValue const &>(static_cast<T const &>(*this))->get_Delta(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue(nullptr);
	check(static_cast<IHttpExpectationHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue(nullptr);
	check(static_cast<IHttpExpectationHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> bool impl_IHttpExpectationHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpExpectationHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(expectationHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpExpectationHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpExpectationHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(expectationHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueFactory<T>::CreateFromName(String const & name) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue(nullptr);
	check(static_cast<IHttpExpectationHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromName(get(name), set(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueFactory<T>::CreateFromName(wchar_t const (&name)[S0]) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue(nullptr);
	check(static_cast<IHttpExpectationHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromName(StringReference(name), set(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueFactory<T>::CreateFromNameWithValue(String const & name, String const & value) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue(nullptr);
	check(static_cast<IHttpExpectationHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithValue(get(name), get(value), set(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueFactory<T>::CreateFromNameWithValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue(nullptr);
	check(static_cast<IHttpExpectationHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithValue(StringReference(name), StringReference(value), set(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> String impl_IHttpExpectationHeaderValue<T>::Name() const
{
	String value = {};
	check(static_cast<IHttpExpectationHeaderValue const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> String impl_IHttpExpectationHeaderValue<T>::Value() const
{
	String value = {};
	check(static_cast<IHttpExpectationHeaderValue const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> void impl_IHttpExpectationHeaderValue<T>::Value(String const & value) const
{
	check(static_cast<IHttpExpectationHeaderValue const &>(static_cast<T const &>(*this))->put_Value(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpExpectationHeaderValue<T>::Value(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpExpectationHeaderValue const &>(static_cast<T const &>(*this))->put_Value(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpExpectationHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value = {};
	check(static_cast<IHttpExpectationHeaderValue const &>(static_cast<T const &>(*this))->get_Parameters(set(value)));
	return value;
}

template <typename T> void impl_IHttpExpectationHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpExpectationHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpExpectationHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpExpectationHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpExpectationHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpExpectationHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpExpectationHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpExpectationHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> void impl_IHttpLanguageHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpLanguageHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpLanguageHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpLanguageHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpLanguageHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpLanguageHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpLanguageHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpLanguageHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> bool impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(languageRangeWithQualityHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(languageRangeWithQualityHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>::CreateFromLanguageRange(String const & languageRange) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromLanguageRange(get(languageRange), set(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>::CreateFromLanguageRange(wchar_t const (&languageRange)[S0]) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromLanguageRange(StringReference(languageRange), set(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>::CreateFromLanguageRangeWithQuality(String const & languageRange, double const quality) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromLanguageRangeWithQuality(get(languageRange), quality, set(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>::CreateFromLanguageRangeWithQuality(wchar_t const (&languageRange)[S0], double const quality) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromLanguageRangeWithQuality(StringReference(languageRange), quality, set(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> String impl_IHttpLanguageRangeWithQualityHeaderValue<T>::LanguageRange() const
{
	String languageRange = {};
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->get_LanguageRange(set(languageRange)));
	return languageRange;
}

template <typename T> Windows::Foundation::IReference<double> impl_IHttpLanguageRangeWithQualityHeaderValue<T>::Quality() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->get_Quality(set(value)));
	return value;
}

template <typename T> void impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpLanguageRangeWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpMediaTypeHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue mediaTypeHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(mediaTypeHeaderValue)));
	return mediaTypeHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpMediaTypeHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue mediaTypeHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(mediaTypeHeaderValue)));
	return mediaTypeHeaderValue;
}

template <typename T> bool impl_IHttpMediaTypeHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpMediaTypeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(mediaTypeHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpMediaTypeHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpMediaTypeHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(mediaTypeHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpMediaTypeHeaderValueFactory<T>::Create(String const & mediaType) const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue mediaTypeHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(get(mediaType), set(mediaTypeHeaderValue)));
	return mediaTypeHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpMediaTypeHeaderValueFactory<T>::Create(wchar_t const (&mediaType)[S0]) const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue mediaTypeHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(mediaType), set(mediaTypeHeaderValue)));
	return mediaTypeHeaderValue;
}

template <typename T> String impl_IHttpMediaTypeHeaderValue<T>::CharSet() const
{
	String value = {};
	check(static_cast<IHttpMediaTypeHeaderValue const &>(static_cast<T const &>(*this))->get_CharSet(set(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeHeaderValue<T>::CharSet(String const & value) const
{
	check(static_cast<IHttpMediaTypeHeaderValue const &>(static_cast<T const &>(*this))->put_CharSet(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpMediaTypeHeaderValue<T>::CharSet(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpMediaTypeHeaderValue const &>(static_cast<T const &>(*this))->put_CharSet(StringReference(value)));
}

template <typename T> String impl_IHttpMediaTypeHeaderValue<T>::MediaType() const
{
	String value = {};
	check(static_cast<IHttpMediaTypeHeaderValue const &>(static_cast<T const &>(*this))->get_MediaType(set(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeHeaderValue<T>::MediaType(String const & value) const
{
	check(static_cast<IHttpMediaTypeHeaderValue const &>(static_cast<T const &>(*this))->put_MediaType(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpMediaTypeHeaderValue<T>::MediaType(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpMediaTypeHeaderValue const &>(static_cast<T const &>(*this))->put_MediaType(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpMediaTypeHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value = {};
	check(static_cast<IHttpMediaTypeHeaderValue const &>(static_cast<T const &>(*this))->get_Parameters(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> bool impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(mediaTypeWithQualityHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(mediaTypeWithQualityHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>::CreateFromMediaType(String const & mediaType) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromMediaType(get(mediaType), set(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>::CreateFromMediaType(wchar_t const (&mediaType)[S0]) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromMediaType(StringReference(mediaType), set(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>::CreateFromMediaTypeWithQuality(String const & mediaType, double const quality) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromMediaTypeWithQuality(get(mediaType), quality, set(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>::CreateFromMediaTypeWithQuality(wchar_t const (&mediaType)[S0], double const quality) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromMediaTypeWithQuality(StringReference(mediaType), quality, set(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> String impl_IHttpMediaTypeWithQualityHeaderValue<T>::CharSet() const
{
	String value = {};
	check(static_cast<IHttpMediaTypeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->get_CharSet(set(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::CharSet(String const & value) const
{
	check(static_cast<IHttpMediaTypeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->put_CharSet(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::CharSet(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpMediaTypeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->put_CharSet(StringReference(value)));
}

template <typename T> String impl_IHttpMediaTypeWithQualityHeaderValue<T>::MediaType() const
{
	String value = {};
	check(static_cast<IHttpMediaTypeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->get_MediaType(set(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::MediaType(String const & value) const
{
	check(static_cast<IHttpMediaTypeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->put_MediaType(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::MediaType(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpMediaTypeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->put_MediaType(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpMediaTypeWithQualityHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value = {};
	check(static_cast<IHttpMediaTypeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->get_Parameters(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IHttpMediaTypeWithQualityHeaderValue<T>::Quality() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IHttpMediaTypeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->get_Quality(set(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::Quality(Windows::Foundation::IReference<double> const & value) const
{
	check(static_cast<IHttpMediaTypeWithQualityHeaderValue const &>(static_cast<T const &>(*this))->put_Quality(get(value)));
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpMediaTypeWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> void impl_IHttpMethodHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpMethodHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpMethodHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpMethodHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpMethodHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpMethodHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpMethodHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpMethodHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue(nullptr);
	check(static_cast<IHttpNameValueHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue(nullptr);
	check(static_cast<IHttpNameValueHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> bool impl_IHttpNameValueHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpNameValueHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(nameValueHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpNameValueHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpNameValueHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(nameValueHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueFactory<T>::CreateFromName(String const & name) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue(nullptr);
	check(static_cast<IHttpNameValueHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromName(get(name), set(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueFactory<T>::CreateFromName(wchar_t const (&name)[S0]) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue(nullptr);
	check(static_cast<IHttpNameValueHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromName(StringReference(name), set(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueFactory<T>::CreateFromNameWithValue(String const & name, String const & value) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue(nullptr);
	check(static_cast<IHttpNameValueHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithValue(get(name), get(value), set(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueFactory<T>::CreateFromNameWithValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue(nullptr);
	check(static_cast<IHttpNameValueHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithValue(StringReference(name), StringReference(value), set(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> String impl_IHttpNameValueHeaderValue<T>::Name() const
{
	String value = {};
	check(static_cast<IHttpNameValueHeaderValue const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> String impl_IHttpNameValueHeaderValue<T>::Value() const
{
	String value = {};
	check(static_cast<IHttpNameValueHeaderValue const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> void impl_IHttpNameValueHeaderValue<T>::Value(String const & value) const
{
	check(static_cast<IHttpNameValueHeaderValue const &>(static_cast<T const &>(*this))->put_Value(get(value)));
}

template <typename T> template <unsigned S0> void impl_IHttpNameValueHeaderValue<T>::Value(wchar_t const (&value)[S0]) const
{
	check(static_cast<IHttpNameValueHeaderValue const &>(static_cast<T const &>(*this))->put_Value(StringReference(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue(nullptr);
	check(static_cast<IHttpProductHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue(nullptr);
	check(static_cast<IHttpProductHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> bool impl_IHttpProductHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpProductHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(productHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpProductHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpProductHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(productHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueFactory<T>::CreateFromName(String const & productName) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue(nullptr);
	check(static_cast<IHttpProductHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromName(get(productName), set(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueFactory<T>::CreateFromName(wchar_t const (&productName)[S0]) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue(nullptr);
	check(static_cast<IHttpProductHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromName(StringReference(productName), set(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueFactory<T>::CreateFromNameWithVersion(String const & productName, String const & productVersion) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue(nullptr);
	check(static_cast<IHttpProductHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithVersion(get(productName), get(productVersion), set(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueFactory<T>::CreateFromNameWithVersion(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue(nullptr);
	check(static_cast<IHttpProductHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithVersion(StringReference(productName), StringReference(productVersion), set(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> String impl_IHttpProductHeaderValue<T>::Name() const
{
	String value = {};
	check(static_cast<IHttpProductHeaderValue const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> String impl_IHttpProductHeaderValue<T>::Version() const
{
	String value = {};
	check(static_cast<IHttpProductHeaderValue const &>(static_cast<T const &>(*this))->get_Version(set(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue(nullptr);
	check(static_cast<IHttpProductInfoHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue(nullptr);
	check(static_cast<IHttpProductInfoHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> bool impl_IHttpProductInfoHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpProductInfoHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(productInfoHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpProductInfoHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpProductInfoHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(productInfoHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueFactory<T>::CreateFromComment(String const & productComment) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue(nullptr);
	check(static_cast<IHttpProductInfoHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromComment(get(productComment), set(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueFactory<T>::CreateFromComment(wchar_t const (&productComment)[S0]) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue(nullptr);
	check(static_cast<IHttpProductInfoHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromComment(StringReference(productComment), set(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueFactory<T>::CreateFromNameWithVersion(String const & productName, String const & productVersion) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue(nullptr);
	check(static_cast<IHttpProductInfoHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithVersion(get(productName), get(productVersion), set(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueFactory<T>::CreateFromNameWithVersion(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue(nullptr);
	check(static_cast<IHttpProductInfoHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromNameWithVersion(StringReference(productName), StringReference(productVersion), set(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductInfoHeaderValue<T>::Product() const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue value(nullptr);
	check(static_cast<IHttpProductInfoHeaderValue const &>(static_cast<T const &>(*this))->get_Product(set(value)));
	return value;
}

template <typename T> String impl_IHttpProductInfoHeaderValue<T>::Comment() const
{
	String value = {};
	check(static_cast<IHttpProductInfoHeaderValue const &>(static_cast<T const &>(*this))->get_Comment(set(value)));
	return value;
}

template <typename T> void impl_IHttpProductInfoHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpProductInfoHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpProductInfoHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpProductInfoHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpProductInfoHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpProductInfoHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpProductInfoHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpProductInfoHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> bool impl_IHttpContentCodingWithQualityHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentCodingWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(contentCodingWithQualityHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpContentCodingWithQualityHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentCodingWithQualityHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(contentCodingWithQualityHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueFactory<T>::CreateFromValue(String const & contentCoding) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromValue(get(contentCoding), set(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueFactory<T>::CreateFromValue(wchar_t const (&contentCoding)[S0]) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromValue(StringReference(contentCoding), set(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueFactory<T>::CreateFromValueWithQuality(String const & contentCoding, double const quality) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromValueWithQuality(get(contentCoding), quality, set(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueFactory<T>::CreateFromValueWithQuality(wchar_t const (&contentCoding)[S0], double const quality) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue(nullptr);
	check(static_cast<IHttpContentCodingWithQualityHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_CreateFromValueWithQuality(StringReference(contentCoding), quality, set(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> String impl_IHttpContentCodingWithQualityHeaderValue<T>::ContentCoding() const
{
	String value = {};
	check(static_cast<IHttpContentCodingWithQualityHeaderValue const &>(static_cast<T const &>(*this))->get_ContentCoding(set(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IHttpContentCodingWithQualityHeaderValue<T>::Quality() const
{
	Windows::Foundation::IReference<double> value = {};
	check(static_cast<IHttpContentCodingWithQualityHeaderValue const &>(static_cast<T const &>(*this))->get_Quality(set(value)));
	return value;
}

template <typename T> void impl_IHttpContentCodingWithQualityHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpContentCodingWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpContentCodingWithQualityHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpContentCodingWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpContentCodingWithQualityHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentCodingWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpContentCodingWithQualityHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpContentCodingWithQualityHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue impl_IHttpTransferCodingHeaderValueStatics<T>::Parse(String const & input) const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue transferCodingHeaderValue(nullptr);
	check(static_cast<IHttpTransferCodingHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(get(input), set(transferCodingHeaderValue)));
	return transferCodingHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue impl_IHttpTransferCodingHeaderValueStatics<T>::Parse(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue transferCodingHeaderValue(nullptr);
	check(static_cast<IHttpTransferCodingHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_Parse(StringReference(input), set(transferCodingHeaderValue)));
	return transferCodingHeaderValue;
}

template <typename T> bool impl_IHttpTransferCodingHeaderValueStatics<T>::TryParse(String const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpTransferCodingHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(get(input), set(transferCodingHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpTransferCodingHeaderValueStatics<T>::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue) const
{
	bool succeeded = {};
	check(static_cast<IHttpTransferCodingHeaderValueStatics const &>(static_cast<T const &>(*this))->abi_TryParse(StringReference(input), set(transferCodingHeaderValue), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue impl_IHttpTransferCodingHeaderValueFactory<T>::Create(String const & input) const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue transferCodingHeaderValue(nullptr);
	check(static_cast<IHttpTransferCodingHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(get(input), set(transferCodingHeaderValue)));
	return transferCodingHeaderValue;
}

template <typename T> template <unsigned S0> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue impl_IHttpTransferCodingHeaderValueFactory<T>::Create(wchar_t const (&input)[S0]) const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue transferCodingHeaderValue(nullptr);
	check(static_cast<IHttpTransferCodingHeaderValueFactory const &>(static_cast<T const &>(*this))->abi_Create(StringReference(input), set(transferCodingHeaderValue)));
	return transferCodingHeaderValue;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpTransferCodingHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value = {};
	check(static_cast<IHttpTransferCodingHeaderValue const &>(static_cast<T const &>(*this))->get_Parameters(set(value)));
	return value;
}

template <typename T> String impl_IHttpTransferCodingHeaderValue<T>::Value() const
{
	String value = {};
	check(static_cast<IHttpTransferCodingHeaderValue const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> void impl_IHttpTransferCodingHeaderValueCollection<T>::ParseAdd(String const & input) const
{
	check(static_cast<IHttpTransferCodingHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(get(input)));
}

template <typename T> template <unsigned S0> void impl_IHttpTransferCodingHeaderValueCollection<T>::ParseAdd(wchar_t const (&input)[S0]) const
{
	check(static_cast<IHttpTransferCodingHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_ParseAdd(StringReference(input)));
}

template <typename T> bool impl_IHttpTransferCodingHeaderValueCollection<T>::TryParseAdd(String const & input) const
{
	bool succeeded = {};
	check(static_cast<IHttpTransferCodingHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(get(input), BoolProxy(succeeded)));
	return succeeded;
}

template <typename T> template <unsigned S0> bool impl_IHttpTransferCodingHeaderValueCollection<T>::TryParseAdd(wchar_t const (&input)[S0]) const
{
	bool succeeded = {};
	check(static_cast<IHttpTransferCodingHeaderValueCollection const &>(static_cast<T const &>(*this))->abi_TryParseAdd(StringReference(input), BoolProxy(succeeded)));
	return succeeded;
}

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

template <typename T> String impl_ISyndicationAttribute<T>::Name() const
{
	String value = {};
	check(static_cast<ISyndicationAttribute const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationAttribute<T>::Name(String const & value) const
{
	check(static_cast<ISyndicationAttribute const &>(static_cast<T const &>(*this))->put_Name(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationAttribute<T>::Name(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationAttribute const &>(static_cast<T const &>(*this))->put_Name(StringReference(value)));
}

template <typename T> String impl_ISyndicationAttribute<T>::Namespace() const
{
	String value = {};
	check(static_cast<ISyndicationAttribute const &>(static_cast<T const &>(*this))->get_Namespace(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationAttribute<T>::Namespace(String const & value) const
{
	check(static_cast<ISyndicationAttribute const &>(static_cast<T const &>(*this))->put_Namespace(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationAttribute<T>::Namespace(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationAttribute const &>(static_cast<T const &>(*this))->put_Namespace(StringReference(value)));
}

template <typename T> String impl_ISyndicationAttribute<T>::Value() const
{
	String value = {};
	check(static_cast<ISyndicationAttribute const &>(static_cast<T const &>(*this))->get_Value(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationAttribute<T>::Value(String const & value) const
{
	check(static_cast<ISyndicationAttribute const &>(static_cast<T const &>(*this))->put_Value(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationAttribute<T>::Value(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationAttribute const &>(static_cast<T const &>(*this))->put_Value(StringReference(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationAttribute impl_ISyndicationAttributeFactory<T>::CreateSyndicationAttribute(String const & attributeName, String const & attributeNamespace, String const & attributeValue) const
{
	Windows::Web::Syndication::SyndicationAttribute syndicationAttribute(nullptr);
	check(static_cast<ISyndicationAttributeFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationAttribute(get(attributeName), get(attributeNamespace), get(attributeValue), set(syndicationAttribute)));
	return syndicationAttribute;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationAttribute impl_ISyndicationAttributeFactory<T>::CreateSyndicationAttribute(wchar_t const (&attributeName)[S0], wchar_t const (&attributeNamespace)[S1], wchar_t const (&attributeValue)[S2]) const
{
	Windows::Web::Syndication::SyndicationAttribute syndicationAttribute(nullptr);
	check(static_cast<ISyndicationAttributeFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationAttribute(StringReference(attributeName), StringReference(attributeNamespace), StringReference(attributeValue), set(syndicationAttribute)));
	return syndicationAttribute;
}

template <typename T> String impl_ISyndicationNode<T>::NodeName() const
{
	String value = {};
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->get_NodeName(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::NodeName(String const & value) const
{
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->put_NodeName(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationNode<T>::NodeName(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->put_NodeName(StringReference(value)));
}

template <typename T> String impl_ISyndicationNode<T>::NodeNamespace() const
{
	String value = {};
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->get_NodeNamespace(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::NodeNamespace(String const & value) const
{
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->put_NodeNamespace(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationNode<T>::NodeNamespace(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->put_NodeNamespace(StringReference(value)));
}

template <typename T> String impl_ISyndicationNode<T>::NodeValue() const
{
	String value = {};
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->get_NodeValue(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::NodeValue(String const & value) const
{
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->put_NodeValue(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationNode<T>::NodeValue(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->put_NodeValue(StringReference(value)));
}

template <typename T> String impl_ISyndicationNode<T>::Language() const
{
	String value = {};
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->get_Language(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::Language(String const & value) const
{
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->put_Language(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationNode<T>::Language(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->put_Language(StringReference(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationNode<T>::BaseUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->get_BaseUri(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::BaseUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->put_BaseUri(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationAttribute> impl_ISyndicationNode<T>::AttributeExtensions() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationAttribute> value = {};
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->get_AttributeExtensions(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::ISyndicationNode> impl_ISyndicationNode<T>::ElementExtensions() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::ISyndicationNode> value = {};
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->get_ElementExtensions(set(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_ISyndicationNode<T>::GetXmlDocument(Windows::Web::Syndication::SyndicationFormat const format) const
{
	Windows::Data::Xml::Dom::XmlDocument xmlDocument(nullptr);
	check(static_cast<ISyndicationNode const &>(static_cast<T const &>(*this))->abi_GetXmlDocument(format, set(xmlDocument)));
	return xmlDocument;
}

template <typename T> Windows::Web::Syndication::SyndicationNode impl_ISyndicationNodeFactory<T>::CreateSyndicationNode(String const & nodeName, String const & nodeNamespace, String const & nodeValue) const
{
	Windows::Web::Syndication::SyndicationNode node(nullptr);
	check(static_cast<ISyndicationNodeFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationNode(get(nodeName), get(nodeNamespace), get(nodeValue), set(node)));
	return node;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationNode impl_ISyndicationNodeFactory<T>::CreateSyndicationNode(wchar_t const (&nodeName)[S0], wchar_t const (&nodeNamespace)[S1], wchar_t const (&nodeValue)[S2]) const
{
	Windows::Web::Syndication::SyndicationNode node(nullptr);
	check(static_cast<ISyndicationNodeFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationNode(StringReference(nodeName), StringReference(nodeNamespace), StringReference(nodeValue), set(node)));
	return node;
}

template <typename T> String impl_ISyndicationGenerator<T>::Text() const
{
	String value = {};
	check(static_cast<ISyndicationGenerator const &>(static_cast<T const &>(*this))->get_Text(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationGenerator<T>::Text(String const & value) const
{
	check(static_cast<ISyndicationGenerator const &>(static_cast<T const &>(*this))->put_Text(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationGenerator<T>::Text(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationGenerator const &>(static_cast<T const &>(*this))->put_Text(StringReference(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationGenerator<T>::Uri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationGenerator const &>(static_cast<T const &>(*this))->get_Uri(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationGenerator<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISyndicationGenerator const &>(static_cast<T const &>(*this))->put_Uri(get(value)));
}

template <typename T> String impl_ISyndicationGenerator<T>::Version() const
{
	String value = {};
	check(static_cast<ISyndicationGenerator const &>(static_cast<T const &>(*this))->get_Version(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationGenerator<T>::Version(String const & value) const
{
	check(static_cast<ISyndicationGenerator const &>(static_cast<T const &>(*this))->put_Version(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationGenerator<T>::Version(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationGenerator const &>(static_cast<T const &>(*this))->put_Version(StringReference(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationGenerator impl_ISyndicationGeneratorFactory<T>::CreateSyndicationGenerator(String const & text) const
{
	Windows::Web::Syndication::SyndicationGenerator generator(nullptr);
	check(static_cast<ISyndicationGeneratorFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationGenerator(get(text), set(generator)));
	return generator;
}

template <typename T> template <unsigned S0> Windows::Web::Syndication::SyndicationGenerator impl_ISyndicationGeneratorFactory<T>::CreateSyndicationGenerator(wchar_t const (&text)[S0]) const
{
	Windows::Web::Syndication::SyndicationGenerator generator(nullptr);
	check(static_cast<ISyndicationGeneratorFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationGenerator(StringReference(text), set(generator)));
	return generator;
}

template <typename T> String impl_ISyndicationText<T>::Text() const
{
	String value = {};
	check(static_cast<ISyndicationText const &>(static_cast<T const &>(*this))->get_Text(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationText<T>::Text(String const & value) const
{
	check(static_cast<ISyndicationText const &>(static_cast<T const &>(*this))->put_Text(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationText<T>::Text(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationText const &>(static_cast<T const &>(*this))->put_Text(StringReference(value)));
}

template <typename T> String impl_ISyndicationText<T>::Type() const
{
	String value = {};
	check(static_cast<ISyndicationText const &>(static_cast<T const &>(*this))->get_Type(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationText<T>::Type(String const & value) const
{
	check(static_cast<ISyndicationText const &>(static_cast<T const &>(*this))->put_Type(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationText<T>::Type(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationText const &>(static_cast<T const &>(*this))->put_Type(StringReference(value)));
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_ISyndicationText<T>::Xml() const
{
	Windows::Data::Xml::Dom::XmlDocument value(nullptr);
	check(static_cast<ISyndicationText const &>(static_cast<T const &>(*this))->get_Xml(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationText<T>::Xml(Windows::Data::Xml::Dom::XmlDocument const & value) const
{
	check(static_cast<ISyndicationText const &>(static_cast<T const &>(*this))->put_Xml(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationText impl_ISyndicationTextFactory<T>::CreateSyndicationText(String const & text) const
{
	Windows::Web::Syndication::SyndicationText syndicationText(nullptr);
	check(static_cast<ISyndicationTextFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationText(get(text), set(syndicationText)));
	return syndicationText;
}

template <typename T> template <unsigned S0> Windows::Web::Syndication::SyndicationText impl_ISyndicationTextFactory<T>::CreateSyndicationText(wchar_t const (&text)[S0]) const
{
	Windows::Web::Syndication::SyndicationText syndicationText(nullptr);
	check(static_cast<ISyndicationTextFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationText(StringReference(text), set(syndicationText)));
	return syndicationText;
}

template <typename T> Windows::Web::Syndication::SyndicationText impl_ISyndicationTextFactory<T>::CreateSyndicationText(String const & text, Windows::Web::Syndication::SyndicationTextType const type) const
{
	Windows::Web::Syndication::SyndicationText syndicationText(nullptr);
	check(static_cast<ISyndicationTextFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationTextEx(get(text), type, set(syndicationText)));
	return syndicationText;
}

template <typename T> template <unsigned S0> Windows::Web::Syndication::SyndicationText impl_ISyndicationTextFactory<T>::CreateSyndicationText(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType const type) const
{
	Windows::Web::Syndication::SyndicationText syndicationText(nullptr);
	check(static_cast<ISyndicationTextFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationTextEx(StringReference(text), type, set(syndicationText)));
	return syndicationText;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationContent<T>::SourceUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationContent const &>(static_cast<T const &>(*this))->get_SourceUri(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationContent<T>::SourceUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISyndicationContent const &>(static_cast<T const &>(*this))->put_SourceUri(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationContent impl_ISyndicationContentFactory<T>::CreateSyndicationContent(String const & text, Windows::Web::Syndication::SyndicationTextType const type) const
{
	Windows::Web::Syndication::SyndicationContent content(nullptr);
	check(static_cast<ISyndicationContentFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationContent(get(text), type, set(content)));
	return content;
}

template <typename T> template <unsigned S0> Windows::Web::Syndication::SyndicationContent impl_ISyndicationContentFactory<T>::CreateSyndicationContent(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType const type) const
{
	Windows::Web::Syndication::SyndicationContent content(nullptr);
	check(static_cast<ISyndicationContentFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationContent(StringReference(text), type, set(content)));
	return content;
}

template <typename T> Windows::Web::Syndication::SyndicationContent impl_ISyndicationContentFactory<T>::CreateSyndicationContent(Windows::Foundation::Uri const & sourceUri) const
{
	Windows::Web::Syndication::SyndicationContent content(nullptr);
	check(static_cast<ISyndicationContentFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationContentWithSourceUri(get(sourceUri), set(content)));
	return content;
}

template <typename T> unsigned impl_ISyndicationLink<T>::Length() const
{
	unsigned value = {};
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->get_Length(&value));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::Length(unsigned const value) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_Length(value));
}

template <typename T> String impl_ISyndicationLink<T>::MediaType() const
{
	String value = {};
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->get_MediaType(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::MediaType(String const & value) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_MediaType(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationLink<T>::MediaType(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_MediaType(StringReference(value)));
}

template <typename T> String impl_ISyndicationLink<T>::Relationship() const
{
	String value = {};
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->get_Relationship(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::Relationship(String const & value) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_Relationship(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationLink<T>::Relationship(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_Relationship(StringReference(value)));
}

template <typename T> String impl_ISyndicationLink<T>::Title() const
{
	String value = {};
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::Title(String const & value) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationLink<T>::Title(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_Title(StringReference(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationLink<T>::Uri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->get_Uri(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_Uri(get(value)));
}

template <typename T> String impl_ISyndicationLink<T>::ResourceLanguage() const
{
	String value = {};
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->get_ResourceLanguage(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::ResourceLanguage(String const & value) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_ResourceLanguage(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationLink<T>::ResourceLanguage(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationLink const &>(static_cast<T const &>(*this))->put_ResourceLanguage(StringReference(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationLink impl_ISyndicationLinkFactory<T>::CreateSyndicationLink(Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationLink link(nullptr);
	check(static_cast<ISyndicationLinkFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationLink(get(uri), set(link)));
	return link;
}

template <typename T> Windows::Web::Syndication::SyndicationLink impl_ISyndicationLinkFactory<T>::CreateSyndicationLink(Windows::Foundation::Uri const & uri, String const & relationship, String const & title, String const & mediaType, unsigned const length) const
{
	Windows::Web::Syndication::SyndicationLink link(nullptr);
	check(static_cast<ISyndicationLinkFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationLinkEx(get(uri), get(relationship), get(title), get(mediaType), length, set(link)));
	return link;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationLink impl_ISyndicationLinkFactory<T>::CreateSyndicationLink(Windows::Foundation::Uri const & uri, wchar_t const (&relationship)[S0], wchar_t const (&title)[S1], wchar_t const (&mediaType)[S2], unsigned const length) const
{
	Windows::Web::Syndication::SyndicationLink link(nullptr);
	check(static_cast<ISyndicationLinkFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationLinkEx(get(uri), StringReference(relationship), StringReference(title), StringReference(mediaType), length, set(link)));
	return link;
}

template <typename T> String impl_ISyndicationPerson<T>::Email() const
{
	String value = {};
	check(static_cast<ISyndicationPerson const &>(static_cast<T const &>(*this))->get_Email(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationPerson<T>::Email(String const & value) const
{
	check(static_cast<ISyndicationPerson const &>(static_cast<T const &>(*this))->put_Email(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationPerson<T>::Email(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationPerson const &>(static_cast<T const &>(*this))->put_Email(StringReference(value)));
}

template <typename T> String impl_ISyndicationPerson<T>::Name() const
{
	String value = {};
	check(static_cast<ISyndicationPerson const &>(static_cast<T const &>(*this))->get_Name(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationPerson<T>::Name(String const & value) const
{
	check(static_cast<ISyndicationPerson const &>(static_cast<T const &>(*this))->put_Name(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationPerson<T>::Name(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationPerson const &>(static_cast<T const &>(*this))->put_Name(StringReference(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationPerson<T>::Uri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationPerson const &>(static_cast<T const &>(*this))->get_Uri(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationPerson<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISyndicationPerson const &>(static_cast<T const &>(*this))->put_Uri(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationPerson impl_ISyndicationPersonFactory<T>::CreateSyndicationPerson(String const & name) const
{
	Windows::Web::Syndication::SyndicationPerson person(nullptr);
	check(static_cast<ISyndicationPersonFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationPerson(get(name), set(person)));
	return person;
}

template <typename T> template <unsigned S0> Windows::Web::Syndication::SyndicationPerson impl_ISyndicationPersonFactory<T>::CreateSyndicationPerson(wchar_t const (&name)[S0]) const
{
	Windows::Web::Syndication::SyndicationPerson person(nullptr);
	check(static_cast<ISyndicationPersonFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationPerson(StringReference(name), set(person)));
	return person;
}

template <typename T> Windows::Web::Syndication::SyndicationPerson impl_ISyndicationPersonFactory<T>::CreateSyndicationPerson(String const & name, String const & email, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationPerson person(nullptr);
	check(static_cast<ISyndicationPersonFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationPersonEx(get(name), get(email), get(uri), set(person)));
	return person;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Syndication::SyndicationPerson impl_ISyndicationPersonFactory<T>::CreateSyndicationPerson(wchar_t const (&name)[S0], wchar_t const (&email)[S1], Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationPerson person(nullptr);
	check(static_cast<ISyndicationPersonFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationPersonEx(StringReference(name), StringReference(email), get(uri), set(person)));
	return person;
}

template <typename T> String impl_ISyndicationCategory<T>::Label() const
{
	String value = {};
	check(static_cast<ISyndicationCategory const &>(static_cast<T const &>(*this))->get_Label(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationCategory<T>::Label(String const & value) const
{
	check(static_cast<ISyndicationCategory const &>(static_cast<T const &>(*this))->put_Label(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationCategory<T>::Label(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationCategory const &>(static_cast<T const &>(*this))->put_Label(StringReference(value)));
}

template <typename T> String impl_ISyndicationCategory<T>::Scheme() const
{
	String value = {};
	check(static_cast<ISyndicationCategory const &>(static_cast<T const &>(*this))->get_Scheme(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationCategory<T>::Scheme(String const & value) const
{
	check(static_cast<ISyndicationCategory const &>(static_cast<T const &>(*this))->put_Scheme(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationCategory<T>::Scheme(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationCategory const &>(static_cast<T const &>(*this))->put_Scheme(StringReference(value)));
}

template <typename T> String impl_ISyndicationCategory<T>::Term() const
{
	String value = {};
	check(static_cast<ISyndicationCategory const &>(static_cast<T const &>(*this))->get_Term(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationCategory<T>::Term(String const & value) const
{
	check(static_cast<ISyndicationCategory const &>(static_cast<T const &>(*this))->put_Term(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationCategory<T>::Term(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationCategory const &>(static_cast<T const &>(*this))->put_Term(StringReference(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationCategory impl_ISyndicationCategoryFactory<T>::CreateSyndicationCategory(String const & term) const
{
	Windows::Web::Syndication::SyndicationCategory category(nullptr);
	check(static_cast<ISyndicationCategoryFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationCategory(get(term), set(category)));
	return category;
}

template <typename T> template <unsigned S0> Windows::Web::Syndication::SyndicationCategory impl_ISyndicationCategoryFactory<T>::CreateSyndicationCategory(wchar_t const (&term)[S0]) const
{
	Windows::Web::Syndication::SyndicationCategory category(nullptr);
	check(static_cast<ISyndicationCategoryFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationCategory(StringReference(term), set(category)));
	return category;
}

template <typename T> Windows::Web::Syndication::SyndicationCategory impl_ISyndicationCategoryFactory<T>::CreateSyndicationCategory(String const & term, String const & scheme, String const & label) const
{
	Windows::Web::Syndication::SyndicationCategory category(nullptr);
	check(static_cast<ISyndicationCategoryFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationCategoryEx(get(term), get(scheme), get(label), set(category)));
	return category;
}

template <typename T> template <unsigned S0, unsigned S1, unsigned S2> Windows::Web::Syndication::SyndicationCategory impl_ISyndicationCategoryFactory<T>::CreateSyndicationCategory(wchar_t const (&term)[S0], wchar_t const (&scheme)[S1], wchar_t const (&label)[S2]) const
{
	Windows::Web::Syndication::SyndicationCategory category(nullptr);
	check(static_cast<ISyndicationCategoryFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationCategoryEx(StringReference(term), StringReference(scheme), StringReference(label), set(category)));
	return category;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> impl_ISyndicationItem<T>::Authors() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Authors(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> impl_ISyndicationItem<T>::Categories() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Categories(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> impl_ISyndicationItem<T>::Contributors() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Contributors(set(value)));
	return value;
}

template <typename T> Windows::Web::Syndication::SyndicationContent impl_ISyndicationItem<T>::Content() const
{
	Windows::Web::Syndication::SyndicationContent value(nullptr);
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Content(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Content(Windows::Web::Syndication::SyndicationContent const & value) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_Content(get(value)));
}

template <typename T> String impl_ISyndicationItem<T>::Id() const
{
	String value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Id(String const & value) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationItem<T>::Id(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_Id(StringReference(value)));
}

template <typename T> Windows::Foundation::DateTime impl_ISyndicationItem<T>::LastUpdatedTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_LastUpdatedTime(&value));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::LastUpdatedTime(Windows::Foundation::DateTime const & value) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_LastUpdatedTime(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> impl_ISyndicationItem<T>::Links() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Links(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISyndicationItem<T>::PublishedDate() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_PublishedDate(&value));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::PublishedDate(Windows::Foundation::DateTime const & value) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_PublishedDate(value));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationItem<T>::Rights() const
{
	Windows::Web::Syndication::ISyndicationText value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Rights(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Rights(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_Rights(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationFeed impl_ISyndicationItem<T>::Source() const
{
	Windows::Web::Syndication::SyndicationFeed value(nullptr);
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Source(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Source(Windows::Web::Syndication::SyndicationFeed const & value) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_Source(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationItem<T>::Summary() const
{
	Windows::Web::Syndication::ISyndicationText value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Summary(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Summary(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_Summary(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationItem<T>::Title() const
{
	Windows::Web::Syndication::ISyndicationText value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Title(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationItem<T>::CommentsUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_CommentsUri(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::CommentsUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->put_CommentsUri(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationItem<T>::EditUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_EditUri(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationItem<T>::EditMediaUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_EditMediaUri(set(value)));
	return value;
}

template <typename T> String impl_ISyndicationItem<T>::ETag() const
{
	String value = {};
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_ETag(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationItem<T>::ItemUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->get_ItemUri(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Load(String const & item) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->abi_Load(get(item)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationItem<T>::Load(wchar_t const (&item)[S0]) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->abi_Load(StringReference(item)));
}

template <typename T> void impl_ISyndicationItem<T>::LoadFromXml(Windows::Data::Xml::Dom::XmlDocument const & itemDocument) const
{
	check(static_cast<ISyndicationItem const &>(static_cast<T const &>(*this))->abi_LoadFromXml(get(itemDocument)));
}

template <typename T> Windows::Web::Syndication::SyndicationItem impl_ISyndicationItemFactory<T>::CreateSyndicationItem(String const & title, Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationItem item(nullptr);
	check(static_cast<ISyndicationItemFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationItem(get(title), get(content), get(uri), set(item)));
	return item;
}

template <typename T> template <unsigned S0> Windows::Web::Syndication::SyndicationItem impl_ISyndicationItemFactory<T>::CreateSyndicationItem(wchar_t const (&title)[S0], Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationItem item(nullptr);
	check(static_cast<ISyndicationItemFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationItem(StringReference(title), get(content), get(uri), set(item)));
	return item;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> impl_ISyndicationFeed<T>::Authors() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Authors(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> impl_ISyndicationFeed<T>::Categories() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Categories(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> impl_ISyndicationFeed<T>::Contributors() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Contributors(set(value)));
	return value;
}

template <typename T> Windows::Web::Syndication::SyndicationGenerator impl_ISyndicationFeed<T>::Generator() const
{
	Windows::Web::Syndication::SyndicationGenerator value(nullptr);
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Generator(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Generator(Windows::Web::Syndication::SyndicationGenerator const & value) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->put_Generator(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::IconUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_IconUri(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::IconUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->put_IconUri(get(value)));
}

template <typename T> String impl_ISyndicationFeed<T>::Id() const
{
	String value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Id(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Id(String const & value) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->put_Id(get(value)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationFeed<T>::Id(wchar_t const (&value)[S0]) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->put_Id(StringReference(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationItem> impl_ISyndicationFeed<T>::Items() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationItem> value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Items(set(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISyndicationFeed<T>::LastUpdatedTime() const
{
	Windows::Foundation::DateTime value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_LastUpdatedTime(&value));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::LastUpdatedTime(Windows::Foundation::DateTime const & value) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->put_LastUpdatedTime(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> impl_ISyndicationFeed<T>::Links() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Links(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::ImageUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_ImageUri(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::ImageUri(Windows::Foundation::Uri const & value) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->put_ImageUri(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationFeed<T>::Rights() const
{
	Windows::Web::Syndication::ISyndicationText value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Rights(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Rights(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->put_Rights(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationFeed<T>::Subtitle() const
{
	Windows::Web::Syndication::ISyndicationText value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Subtitle(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Subtitle(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->put_Subtitle(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationFeed<T>::Title() const
{
	Windows::Web::Syndication::ISyndicationText value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_Title(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Title(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::FirstUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_FirstUri(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::LastUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_LastUri(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::NextUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_NextUri(set(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::PreviousUri() const
{
	Windows::Foundation::Uri value(nullptr);
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_PreviousUri(set(value)));
	return value;
}

template <typename T> Windows::Web::Syndication::SyndicationFormat impl_ISyndicationFeed<T>::SourceFormat() const
{
	Windows::Web::Syndication::SyndicationFormat value = {};
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->get_SourceFormat(&value));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Load(String const & feed) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->abi_Load(get(feed)));
}

template <typename T> template <unsigned S0> void impl_ISyndicationFeed<T>::Load(wchar_t const (&feed)[S0]) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->abi_Load(StringReference(feed)));
}

template <typename T> void impl_ISyndicationFeed<T>::LoadFromXml(Windows::Data::Xml::Dom::XmlDocument const & feedDocument) const
{
	check(static_cast<ISyndicationFeed const &>(static_cast<T const &>(*this))->abi_LoadFromXml(get(feedDocument)));
}

template <typename T> Windows::Web::Syndication::SyndicationFeed impl_ISyndicationFeedFactory<T>::CreateSyndicationFeed(String const & title, String const & subtitle, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationFeed feed(nullptr);
	check(static_cast<ISyndicationFeedFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationFeed(get(title), get(subtitle), get(uri), set(feed)));
	return feed;
}

template <typename T> template <unsigned S0, unsigned S1> Windows::Web::Syndication::SyndicationFeed impl_ISyndicationFeedFactory<T>::CreateSyndicationFeed(wchar_t const (&title)[S0], wchar_t const (&subtitle)[S1], Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationFeed feed(nullptr);
	check(static_cast<ISyndicationFeedFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationFeed(StringReference(title), StringReference(subtitle), get(uri), set(feed)));
	return feed;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_ISyndicationClient<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential value(nullptr);
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->get_ServerCredential(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->put_ServerCredential(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_ISyndicationClient<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value(nullptr);
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->get_ProxyCredential(set(value)));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->put_ProxyCredential(get(value)));
}

template <typename T> unsigned impl_ISyndicationClient<T>::MaxResponseBufferSize() const
{
	unsigned value = {};
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->get_MaxResponseBufferSize(&value));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::MaxResponseBufferSize(unsigned const value) const
{
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->put_MaxResponseBufferSize(value));
}

template <typename T> unsigned impl_ISyndicationClient<T>::Timeout() const
{
	unsigned value = {};
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->get_Timeout(&value));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::Timeout(unsigned const value) const
{
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->put_Timeout(value));
}

template <typename T> bool impl_ISyndicationClient<T>::BypassCacheOnRetrieve() const
{
	bool value = {};
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->get_BypassCacheOnRetrieve(BoolProxy(value)));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::BypassCacheOnRetrieve(bool const value) const
{
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->put_BypassCacheOnRetrieve(value));
}

template <typename T> void impl_ISyndicationClient<T>::SetRequestHeader(String const & name, String const & value) const
{
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->abi_SetRequestHeader(get(name), get(value)));
}

template <typename T> template <unsigned S0, unsigned S1> void impl_ISyndicationClient<T>::SetRequestHeader(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) const
{
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->abi_SetRequestHeader(StringReference(name), StringReference(value)));
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationFeed, Modern::Windows::Web::Syndication::RetrievalProgress> impl_ISyndicationClient<T>::RetrieveFeedAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationFeed, Modern::Windows::Web::Syndication::RetrievalProgress> operation = {};
	check(static_cast<ISyndicationClient const &>(static_cast<T const &>(*this))->abi_RetrieveFeedAsync(get(uri), set(operation)));
	return operation;
}

template <typename T> Windows::Web::Syndication::SyndicationClient impl_ISyndicationClientFactory<T>::CreateSyndicationClient(Windows::Security::Credentials::PasswordCredential const & serverCredential) const
{
	Windows::Web::Syndication::SyndicationClient syndicationClient(nullptr);
	check(static_cast<ISyndicationClientFactory const &>(static_cast<T const &>(*this))->abi_CreateSyndicationClient(get(serverCredential), set(syndicationClient)));
	return syndicationClient;
}

template <typename T> Windows::Web::Syndication::SyndicationErrorStatus impl_ISyndicationErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Web::Syndication::SyndicationErrorStatus status = {};
	check(static_cast<ISyndicationErrorStatics const &>(static_cast<T const &>(*this))->abi_GetStatus(hresult, &status));
	return status;
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel {

inline Windows::ApplicationModel::Package Package::Current()
{
	return GetActivationFactory<Package, IPackageStatics>().Current();
}

inline bool DesignMode::DesignModeEnabled()
{
	return GetActivationFactory<DesignMode, IDesignModeStatics>().DesignModeEnabled();
}

}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Activation {

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments {

inline Appointment::Appointment() :
	Windows::ApplicationModel::Appointments::IAppointment(ActivateInstance<Appointment>())
{}

inline AppointmentOrganizer::AppointmentOrganizer() :
	Windows::ApplicationModel::Appointments::IAppointmentParticipant(ActivateInstance<AppointmentOrganizer>())
{}

inline AppointmentInvitee::AppointmentInvitee() :
	Windows::ApplicationModel::Appointments::IAppointmentInvitee(ActivateInstance<AppointmentInvitee>())
{}

inline AppointmentRecurrence::AppointmentRecurrence() :
	Windows::ApplicationModel::Appointments::IAppointmentRecurrence(ActivateInstance<AppointmentRecurrence>())
{}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowAddAppointmentAsync(appointment, selection);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowAddAppointmentAsync(appointment, selection, preferredPlacement);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection, preferredPlacement);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection, preferredPlacement);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(String const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection, preferredPlacement, instanceStartDate);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection, preferredPlacement, instanceStartDate);
}

inline Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection);
}

inline Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection, preferredPlacement);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection, preferredPlacement);
}

inline Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(String const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection, preferredPlacement, instanceStartDate);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(wchar_t const (&appointmentId)[S0], Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection, preferredPlacement, instanceStartDate);
}

inline Windows::Foundation::IAsyncAction AppointmentManager::ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowTimeFrameAsync(timeToShow, duration);
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

inline String AppointmentsProviderLaunchActionVerbs::AddAppointment()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().AddAppointment();
}

inline String AppointmentsProviderLaunchActionVerbs::ReplaceAppointment()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().ReplaceAppointment();
}

inline String AppointmentsProviderLaunchActionVerbs::RemoveAppointment()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().RemoveAppointment();
}

inline String AppointmentsProviderLaunchActionVerbs::ShowTimeFrame()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().ShowTimeFrame();
}

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Background {

inline Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::AlarmAccessStatus> AlarmApplicationManager::RequestAccessAsync()
{
	return GetActivationFactory<AlarmApplicationManager, IAlarmApplicationManagerStatics>().RequestAccessAsync();
}

inline Windows::ApplicationModel::Background::AlarmAccessStatus AlarmApplicationManager::GetAccessStatus()
{
	return GetActivationFactory<AlarmApplicationManager, IAlarmApplicationManagerStatics>().GetAccessStatus();
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> BackgroundExecutionManager::RequestAccessAsync()
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RequestAccessAsync();
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> BackgroundExecutionManager::RequestAccessAsync(String const & applicationId)
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RequestAccessAsync(applicationId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Background::BackgroundAccessStatus> BackgroundExecutionManager::RequestAccessAsync(wchar_t const (&applicationId)[S0])
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RequestAccessAsync(applicationId);
}

inline void BackgroundExecutionManager::RemoveAccess()
{
	GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RemoveAccess();
}

inline void BackgroundExecutionManager::RemoveAccess(String const & applicationId)
{
	GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RemoveAccess(applicationId);
}

template <unsigned S0> void BackgroundExecutionManager::RemoveAccess(wchar_t const (&applicationId)[S0])
{
	GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RemoveAccess(applicationId);
}

inline Windows::ApplicationModel::Background::BackgroundAccessStatus BackgroundExecutionManager::GetAccessStatus()
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().GetAccessStatus();
}

inline Windows::ApplicationModel::Background::BackgroundAccessStatus BackgroundExecutionManager::GetAccessStatus(String const & applicationId)
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().GetAccessStatus(applicationId);
}

template <unsigned S0> Windows::ApplicationModel::Background::BackgroundAccessStatus BackgroundExecutionManager::GetAccessStatus(wchar_t const (&applicationId)[S0])
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().GetAccessStatus(applicationId);
}

inline Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> BackgroundTaskRegistration::AllTasks()
{
	return GetActivationFactory<BackgroundTaskRegistration, IBackgroundTaskRegistrationStatics>().AllTasks();
}

inline BackgroundTaskBuilder::BackgroundTaskBuilder() :
	Windows::ApplicationModel::Background::IBackgroundTaskBuilder(ActivateInstance<BackgroundTaskBuilder>())
{}

inline Windows::ApplicationModel::Background::BackgroundWorkCostValue BackgroundWorkCost::CurrentBackgroundWorkCost()
{
	return GetActivationFactory<BackgroundWorkCost, IBackgroundWorkCostStatics>().CurrentBackgroundWorkCost();
}

inline SystemTrigger::SystemTrigger(Windows::ApplicationModel::Background::SystemTriggerType const triggerType, bool const oneShot) :
	Windows::ApplicationModel::Background::ISystemTrigger(GetActivationFactory<SystemTrigger, ISystemTriggerFactory>().Create(triggerType, oneShot))
{}

inline SystemCondition::SystemCondition(Windows::ApplicationModel::Background::SystemConditionType const conditionType) :
	Windows::ApplicationModel::Background::ISystemCondition(GetActivationFactory<SystemCondition, ISystemConditionFactory>().Create(conditionType))
{}

inline NetworkOperatorNotificationTrigger::NetworkOperatorNotificationTrigger(String const & networkAccountId) :
	Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger(GetActivationFactory<NetworkOperatorNotificationTrigger, INetworkOperatorNotificationTriggerFactory>().Create(networkAccountId))
{}

template <unsigned S0> NetworkOperatorNotificationTrigger::NetworkOperatorNotificationTrigger(wchar_t const (&networkAccountId)[S0]) :
	Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger(GetActivationFactory<NetworkOperatorNotificationTrigger, INetworkOperatorNotificationTriggerFactory>().Create(networkAccountId))
{}

inline TimeTrigger::TimeTrigger(unsigned const freshnessTime, bool const oneShot) :
	Windows::ApplicationModel::Background::ITimeTrigger(GetActivationFactory<TimeTrigger, ITimeTriggerFactory>().Create(freshnessTime, oneShot))
{}

inline MaintenanceTrigger::MaintenanceTrigger(unsigned const freshnessTime, bool const oneShot) :
	Windows::ApplicationModel::Background::IMaintenanceTrigger(GetActivationFactory<MaintenanceTrigger, IMaintenanceTriggerFactory>().Create(freshnessTime, oneShot))
{}

inline DeviceUseTrigger::DeviceUseTrigger() :
	Windows::ApplicationModel::Background::IDeviceUseTrigger(ActivateInstance<DeviceUseTrigger>())
{}

inline DeviceServicingTrigger::DeviceServicingTrigger() :
	Windows::ApplicationModel::Background::IDeviceServicingTrigger(ActivateInstance<DeviceServicingTrigger>())
{}

inline LocationTrigger::LocationTrigger(Windows::ApplicationModel::Background::LocationTriggerType const triggerType) :
	Windows::ApplicationModel::Background::ILocationTrigger(GetActivationFactory<LocationTrigger, ILocationTriggerFactory>().Create(triggerType))
{}

inline NetworkOperatorHotspotAuthenticationTrigger::NetworkOperatorHotspotAuthenticationTrigger() :
	Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger(ActivateInstance<NetworkOperatorHotspotAuthenticationTrigger>())
{}

inline PushNotificationTrigger::PushNotificationTrigger() :
	Windows::ApplicationModel::Background::IBackgroundTrigger(ActivateInstance<PushNotificationTrigger>())
{}

inline PushNotificationTrigger::PushNotificationTrigger(String const & applicationId) :
	Windows::ApplicationModel::Background::IBackgroundTrigger(GetActivationFactory<PushNotificationTrigger, IPushNotificationTriggerFactory>().Create(applicationId))
{}

template <unsigned S0> PushNotificationTrigger::PushNotificationTrigger(wchar_t const (&applicationId)[S0]) :
	Windows::ApplicationModel::Background::IBackgroundTrigger(GetActivationFactory<PushNotificationTrigger, IPushNotificationTriggerFactory>().Create(applicationId))
{}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Calls {

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts {

inline void ContactManager::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection)
{
	GetActivationFactory<ContactManager, IContactManagerStatics>().ShowContactCard(contact, selection);
}

inline void ContactManager::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	GetActivationFactory<ContactManager, IContactManagerStatics>().ShowContactCard(contact, selection, preferredPlacement);
}

inline Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ContactManager::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics>().ShowDelayLoadedContactCard(contact, selection, preferredPlacement);
}

inline String ContactLaunchActionVerbs::Call()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Call();
}

inline String ContactLaunchActionVerbs::Message()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Message();
}

inline String ContactLaunchActionVerbs::Map()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Map();
}

inline String ContactLaunchActionVerbs::Post()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Post();
}

inline String ContactLaunchActionVerbs::VideoCall()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().VideoCall();
}

inline Contact::Contact() :
	Windows::ApplicationModel::Contacts::IContact(ActivateInstance<Contact>())
{}

inline ContactPicker::ContactPicker() :
	Windows::ApplicationModel::Contacts::IContactPicker(ActivateInstance<ContactPicker>())
{}

inline ContactSignificantOther::ContactSignificantOther() :
	Windows::ApplicationModel::Contacts::IContactSignificantOther(ActivateInstance<ContactSignificantOther>())
{}

inline ContactWebsite::ContactWebsite() :
	Windows::ApplicationModel::Contacts::IContactWebsite(ActivateInstance<ContactWebsite>())
{}

inline ContactEmail::ContactEmail() :
	Windows::ApplicationModel::Contacts::IContactEmail(ActivateInstance<ContactEmail>())
{}

inline ContactPhone::ContactPhone() :
	Windows::ApplicationModel::Contacts::IContactPhone(ActivateInstance<ContactPhone>())
{}

inline ContactAddress::ContactAddress() :
	Windows::ApplicationModel::Contacts::IContactAddress(ActivateInstance<ContactAddress>())
{}

inline ContactConnectedServiceAccount::ContactConnectedServiceAccount() :
	Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount(ActivateInstance<ContactConnectedServiceAccount>())
{}

inline ContactDate::ContactDate() :
	Windows::ApplicationModel::Contacts::IContactDate(ActivateInstance<ContactDate>())
{}

inline ContactJobInfo::ContactJobInfo() :
	Windows::ApplicationModel::Contacts::IContactJobInfo(ActivateInstance<ContactJobInfo>())
{}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Core {

inline EventRegistrationToken CoreApplication::UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationUnhandledError>().UnhandledErrorDetected(handler);
}

template <typename F> EventRegistrationToken CoreApplication::UnhandledErrorDetected(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationUnhandledError>().UnhandledErrorDetected(Windows::Foundation::EventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>(handler));
}

inline void CoreApplication::UnhandledErrorDetected(EventRegistrationToken const token)
{
	GetActivationFactory<CoreApplication, ICoreApplicationUnhandledError>().UnhandledErrorDetected(token);
}

inline Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> CoreApplication::Views()
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().Views();
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::CreateNewView(String const & runtimeType, String const & entryPoint)
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().CreateNewView(runtimeType, entryPoint);
}

template <unsigned S0, unsigned S1> Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::CreateNewView(wchar_t const (&runtimeType)[S0], wchar_t const (&entryPoint)[S1])
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().CreateNewView(runtimeType, entryPoint);
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::MainView()
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().MainView();
}

inline String CoreApplication::Id()
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Id();
}

inline EventRegistrationToken CoreApplication::Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Suspending(handler);
}

template <typename F> EventRegistrationToken CoreApplication::Suspending(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Suspending(Windows::Foundation::EventHandler<Windows::ApplicationModel::SuspendingEventArgs>(handler));
}

inline void CoreApplication::Suspending(EventRegistrationToken const token)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().Suspending(token);
}

inline EventRegistrationToken CoreApplication::Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Resuming(handler);
}

template <typename F> EventRegistrationToken CoreApplication::Resuming(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Resuming(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void CoreApplication::Resuming(EventRegistrationToken const token)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().Resuming(token);
}

inline Windows::Foundation::Collections::IPropertySet CoreApplication::Properties()
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Properties();
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::GetCurrentView()
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().GetCurrentView();
}

inline void CoreApplication::Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().Run(viewSource);
}

inline void CoreApplication::RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().RunWithActivationFactories(activationFactoryCallback);
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::CreateNewView()
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication2>().CreateNewView();
}

inline void CoreApplication::Exit()
{
	GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exit();
}

inline EventRegistrationToken CoreApplication::Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exiting(handler);
}

template <typename F> EventRegistrationToken CoreApplication::Exiting(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exiting(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void CoreApplication::Exiting(EventRegistrationToken const token)
{
	GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exiting(token);
}

inline void CoreApplication::IncrementApplicationUseCount()
{
	GetActivationFactory<CoreApplication, ICoreApplicationUseCount>().IncrementApplicationUseCount();
}

inline void CoreApplication::DecrementApplicationUseCount()
{
	GetActivationFactory<CoreApplication, ICoreApplicationUseCount>().DecrementApplicationUseCount();
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

inline String StandardDataFormats::Text()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Text();
}

inline String StandardDataFormats::Html()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Html();
}

inline String StandardDataFormats::Rtf()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Rtf();
}

inline String StandardDataFormats::Bitmap()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Bitmap();
}

inline String StandardDataFormats::StorageItems()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().StorageItems();
}

inline String StandardDataFormats::WebLink()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics2>().WebLink();
}

inline String StandardDataFormats::ApplicationLink()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics2>().ApplicationLink();
}

inline DataPackage::DataPackage() :
	Windows::ApplicationModel::DataTransfer::IDataPackage(ActivateInstance<DataPackage>())
{}

inline String HtmlFormatHelper::GetStaticFragment(String const & htmlFormat)
{
	return GetActivationFactory<HtmlFormatHelper, IHtmlFormatHelperStatics>().GetStaticFragment(htmlFormat);
}

template <unsigned S0> String HtmlFormatHelper::GetStaticFragment(wchar_t const (&htmlFormat)[S0])
{
	return GetActivationFactory<HtmlFormatHelper, IHtmlFormatHelperStatics>().GetStaticFragment(htmlFormat);
}

inline String HtmlFormatHelper::CreateHtmlFormat(String const & htmlFragment)
{
	return GetActivationFactory<HtmlFormatHelper, IHtmlFormatHelperStatics>().CreateHtmlFormat(htmlFragment);
}

template <unsigned S0> String HtmlFormatHelper::CreateHtmlFormat(wchar_t const (&htmlFragment)[S0])
{
	return GetActivationFactory<HtmlFormatHelper, IHtmlFormatHelperStatics>().CreateHtmlFormat(htmlFragment);
}

inline Windows::ApplicationModel::DataTransfer::DataPackageView Clipboard::GetContent()
{
	return GetActivationFactory<Clipboard, IClipboardStatics>().GetContent();
}

inline void Clipboard::SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content)
{
	GetActivationFactory<Clipboard, IClipboardStatics>().SetContent(content);
}

inline void Clipboard::Flush()
{
	GetActivationFactory<Clipboard, IClipboardStatics>().Flush();
}

inline void Clipboard::Clear()
{
	GetActivationFactory<Clipboard, IClipboardStatics>().Clear();
}

inline EventRegistrationToken Clipboard::ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler)
{
	return GetActivationFactory<Clipboard, IClipboardStatics>().ContentChanged(changeHandler);
}

template <typename F> EventRegistrationToken Clipboard::ContentChanged(F changeHandler)
{
	return GetActivationFactory<Clipboard, IClipboardStatics>().ContentChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

inline void Clipboard::ContentChanged(EventRegistrationToken const token)
{
	GetActivationFactory<Clipboard, IClipboardStatics>().ContentChanged(token);
}

inline void DataTransferManager::ShowShareUI()
{
	GetActivationFactory<DataTransferManager, IDataTransferManagerStatics>().ShowShareUI();
}

inline Windows::ApplicationModel::DataTransfer::DataTransferManager DataTransferManager::GetForCurrentView()
{
	return GetActivationFactory<DataTransferManager, IDataTransferManagerStatics>().GetForCurrentView();
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

inline QuickLink::QuickLink() :
	Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink(ActivateInstance<QuickLink>())
{}

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources {

inline ResourceLoader::ResourceLoader() :
	Windows::ApplicationModel::Resources::IResourceLoader(ActivateInstance<ResourceLoader>())
{}

inline Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForCurrentView()
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForCurrentView();
}

inline Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForCurrentView(String const & name)
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForCurrentView(name);
}

template <unsigned S0> Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForCurrentView(wchar_t const (&name)[S0])
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForCurrentView(name);
}

inline Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForViewIndependentUse()
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForViewIndependentUse();
}

inline Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForViewIndependentUse(String const & name)
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForViewIndependentUse(name);
}

template <unsigned S0> Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForViewIndependentUse(wchar_t const (&name)[S0])
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForViewIndependentUse(name);
}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

inline ResourceContext::ResourceContext() :
	Windows::ApplicationModel::Resources::Core::IResourceContext(ActivateInstance<ResourceContext>())
{}

inline Windows::ApplicationModel::Resources::Core::ResourceContext ResourceContext::GetForCurrentView()
{
	return GetActivationFactory<ResourceContext, IResourceContextStatics2>().GetForCurrentView();
}

inline void ResourceContext::SetGlobalQualifierValue(String const & key, String const & value)
{
	GetActivationFactory<ResourceContext, IResourceContextStatics2>().SetGlobalQualifierValue(key, value);
}

template <unsigned S0, unsigned S1> void ResourceContext::SetGlobalQualifierValue(wchar_t const (&key)[S0], wchar_t const (&value)[S1])
{
	GetActivationFactory<ResourceContext, IResourceContextStatics2>().SetGlobalQualifierValue(key, value);
}

inline void ResourceContext::ResetGlobalQualifierValues()
{
	GetActivationFactory<ResourceContext, IResourceContextStatics2>().ResetGlobalQualifierValues();
}

inline void ResourceContext::ResetGlobalQualifierValues(Windows::Foundation::Collections::IIterable<String> const & qualifierNames)
{
	GetActivationFactory<ResourceContext, IResourceContextStatics2>().ResetGlobalQualifierValues(qualifierNames);
}

inline Windows::ApplicationModel::Resources::Core::ResourceContext ResourceContext::GetForViewIndependentUse()
{
	return GetActivationFactory<ResourceContext, IResourceContextStatics2>().GetForViewIndependentUse();
}

inline Windows::ApplicationModel::Resources::Core::ResourceManager ResourceManager::Current()
{
	return GetActivationFactory<ResourceManager, IResourceManagerStatics>().Current();
}

inline bool ResourceManager::IsResourceReference(String const & resourceReference)
{
	return GetActivationFactory<ResourceManager, IResourceManagerStatics>().IsResourceReference(resourceReference);
}

template <unsigned S0> bool ResourceManager::IsResourceReference(wchar_t const (&resourceReference)[S0])
{
	return GetActivationFactory<ResourceManager, IResourceManagerStatics>().IsResourceReference(resourceReference);
}

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

inline ResourceIndexer::ResourceIndexer() :
	Windows::ApplicationModel::Resources::Management::IResourceIndexer(ActivateInstance<ResourceIndexer>())
{}

inline ResourceIndexer::ResourceIndexer(Windows::Foundation::Uri const & projectRoot) :
	Windows::ApplicationModel::Resources::Management::IResourceIndexer(GetActivationFactory<ResourceIndexer, IResourceIndexerFactory>().CreateResourceIndexer(projectRoot))
{}

inline ResourceIndexer::ResourceIndexer(Windows::Foundation::Uri const & projectRoot, Windows::Foundation::Uri const & extensionDllPath) :
	Windows::ApplicationModel::Resources::Management::IResourceIndexer(GetActivationFactory<ResourceIndexer, IResourceIndexerFactory2>().CreateResourceIndexerWithExtension(projectRoot, extensionDllPath))
{}

}}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Search {

inline LocalContentSuggestionSettings::LocalContentSuggestionSettings() :
	Windows::ApplicationModel::Search::ILocalContentSuggestionSettings(ActivateInstance<LocalContentSuggestionSettings>())
{}

inline void SearchPane::HideThisApplication()
{
	GetActivationFactory<SearchPane, ISearchPaneStaticsWithHideThisApplication>().HideThisApplication();
}

inline Windows::ApplicationModel::Search::SearchPane SearchPane::GetForCurrentView()
{
	return GetActivationFactory<SearchPane, ISearchPaneStatics>().GetForCurrentView();
}

inline SearchQueryLinguisticDetails::SearchQueryLinguisticDetails(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned const queryTextCompositionStart, unsigned const queryTextCompositionLength) :
	Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails(GetActivationFactory<SearchQueryLinguisticDetails, ISearchQueryLinguisticDetailsFactory>().CreateInstance(queryTextAlternatives, queryTextCompositionStart, queryTextCompositionLength))
{}

}}}}

namespace Modern { namespace Windows { namespace ApplicationModel { namespace Store {

inline ProductPurchaseDisplayProperties::ProductPurchaseDisplayProperties() :
	Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties(ActivateInstance<ProductPurchaseDisplayProperties>())
{}

inline ProductPurchaseDisplayProperties::ProductPurchaseDisplayProperties(String const & name) :
	Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties(GetActivationFactory<ProductPurchaseDisplayProperties, IProductPurchaseDisplayPropertiesFactory>().CreateProductPurchaseDisplayProperties(name))
{}

template <unsigned S0> ProductPurchaseDisplayProperties::ProductPurchaseDisplayProperties(wchar_t const (&name)[S0]) :
	Windows::ApplicationModel::Store::IProductPurchaseDisplayProperties(GetActivationFactory<ProductPurchaseDisplayProperties, IProductPurchaseDisplayPropertiesFactory>().CreateProductPurchaseDisplayProperties(name))
{}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> CurrentApp::ReportConsumableFulfillmentAsync(String const & productId, GUID const transactionId)
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().ReportConsumableFulfillmentAsync(productId, transactionId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> CurrentApp::ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID const transactionId)
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().ReportConsumableFulfillmentAsync(productId, transactionId);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentApp::RequestProductPurchaseAsync(String const & productId)
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().RequestProductPurchaseAsync(productId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentApp::RequestProductPurchaseAsync(wchar_t const (&productId)[S0])
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().RequestProductPurchaseAsync(productId);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentApp::RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties)
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().RequestProductPurchaseAsync(productId, offerId, displayProperties);
}

template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentApp::RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties)
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().RequestProductPurchaseAsync(productId, offerId, displayProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> CurrentApp::GetUnfulfilledConsumablesAsync()
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().GetUnfulfilledConsumablesAsync();
}

inline Windows::ApplicationModel::Store::LicenseInformation CurrentApp::LicenseInformation()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().LicenseInformation();
}

inline Windows::Foundation::Uri CurrentApp::LinkUri()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().LinkUri();
}

inline GUID CurrentApp::AppId()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().AppId();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::RequestAppPurchaseAsync(bool const includeReceipt)
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().RequestAppPurchaseAsync(includeReceipt);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> CurrentApp::LoadListingInformationAsync()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().LoadListingInformationAsync();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::GetAppReceiptAsync()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().GetAppReceiptAsync();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::GetProductReceiptAsync(String const & productId)
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().GetProductReceiptAsync(productId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<String> CurrentApp::GetProductReceiptAsync(wchar_t const (&productId)[S0])
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().GetProductReceiptAsync(productId);
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> CurrentAppSimulator::ReportConsumableFulfillmentAsync(String const & productId, GUID const transactionId)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().ReportConsumableFulfillmentAsync(productId, transactionId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::ApplicationModel::Store::FulfillmentResult> CurrentAppSimulator::ReportConsumableFulfillmentAsync(wchar_t const (&productId)[S0], GUID const transactionId)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().ReportConsumableFulfillmentAsync(productId, transactionId);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentAppSimulator::RequestProductPurchaseAsync(String const & productId)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().RequestProductPurchaseAsync(productId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentAppSimulator::RequestProductPurchaseAsync(wchar_t const (&productId)[S0])
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().RequestProductPurchaseAsync(productId);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentAppSimulator::RequestProductPurchaseAsync(String const & productId, String const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().RequestProductPurchaseAsync(productId, offerId, displayProperties);
}

template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentAppSimulator::RequestProductPurchaseAsync(wchar_t const (&productId)[S0], wchar_t const (&offerId)[S1], Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().RequestProductPurchaseAsync(productId, offerId, displayProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> CurrentAppSimulator::GetUnfulfilledConsumablesAsync()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().GetUnfulfilledConsumablesAsync();
}

inline Windows::ApplicationModel::Store::LicenseInformation CurrentAppSimulator::LicenseInformation()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().LicenseInformation();
}

inline Windows::Foundation::Uri CurrentAppSimulator::LinkUri()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().LinkUri();
}

inline GUID CurrentAppSimulator::AppId()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().AppId();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentAppSimulator::RequestAppPurchaseAsync(bool const includeReceipt)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().RequestAppPurchaseAsync(includeReceipt);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> CurrentAppSimulator::LoadListingInformationAsync()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().LoadListingInformationAsync();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentAppSimulator::GetAppReceiptAsync()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().GetAppReceiptAsync();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentAppSimulator::GetProductReceiptAsync(String const & productId)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().GetProductReceiptAsync(productId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<String> CurrentAppSimulator::GetProductReceiptAsync(wchar_t const (&productId)[S0])
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().GetProductReceiptAsync(productId);
}

inline Windows::Foundation::IAsyncAction CurrentAppSimulator::ReloadSimulatorAsync(Windows::Storage::StorageFile const & simulatorSettingsFile)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().ReloadSimulatorAsync(simulatorSettingsFile);
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Html {

inline String HtmlUtilities::ConvertToText(String const & html)
{
	return GetActivationFactory<HtmlUtilities, IHtmlUtilities>().ConvertToText(html);
}

template <unsigned S0> String HtmlUtilities::ConvertToText(wchar_t const (&html)[S0])
{
	return GetActivationFactory<HtmlUtilities, IHtmlUtilities>().ConvertToText(html);
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Json {

inline JsonArray::JsonArray() :
	Windows::Data::Json::IJsonArray(ActivateInstance<JsonArray>())
{}

inline Windows::Data::Json::JsonArray JsonArray::Parse(String const & input)
{
	return GetActivationFactory<JsonArray, IJsonArrayStatics>().Parse(input);
}

template <unsigned S0> Windows::Data::Json::JsonArray JsonArray::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<JsonArray, IJsonArrayStatics>().Parse(input);
}

inline bool JsonArray::TryParse(String const & input, Windows::Data::Json::JsonArray & result)
{
	return GetActivationFactory<JsonArray, IJsonArrayStatics>().TryParse(input, result);
}

template <unsigned S0> bool JsonArray::TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonArray & result)
{
	return GetActivationFactory<JsonArray, IJsonArrayStatics>().TryParse(input, result);
}

inline JsonObject::JsonObject() :
	Windows::Data::Json::IJsonObject(ActivateInstance<JsonObject>())
{}

inline Windows::Data::Json::JsonObject JsonObject::Parse(String const & input)
{
	return GetActivationFactory<JsonObject, IJsonObjectStatics>().Parse(input);
}

template <unsigned S0> Windows::Data::Json::JsonObject JsonObject::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<JsonObject, IJsonObjectStatics>().Parse(input);
}

inline bool JsonObject::TryParse(String const & input, Windows::Data::Json::JsonObject & result)
{
	return GetActivationFactory<JsonObject, IJsonObjectStatics>().TryParse(input, result);
}

template <unsigned S0> bool JsonObject::TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonObject & result)
{
	return GetActivationFactory<JsonObject, IJsonObjectStatics>().TryParse(input, result);
}

inline Windows::Data::Json::JsonValue JsonValue::Parse(String const & input)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Data::Json::JsonValue JsonValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().Parse(input);
}

inline bool JsonValue::TryParse(String const & input, Windows::Data::Json::JsonValue & result)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().TryParse(input, result);
}

template <unsigned S0> bool JsonValue::TryParse(wchar_t const (&input)[S0], Windows::Data::Json::JsonValue & result)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().TryParse(input, result);
}

inline Windows::Data::Json::JsonValue JsonValue::CreateBooleanValue(bool const input)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().CreateBooleanValue(input);
}

inline Windows::Data::Json::JsonValue JsonValue::CreateNumberValue(double const input)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().CreateNumberValue(input);
}

inline Windows::Data::Json::JsonValue JsonValue::CreateStringValue(String const & input)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().CreateStringValue(input);
}

template <unsigned S0> Windows::Data::Json::JsonValue JsonValue::CreateStringValue(wchar_t const (&input)[S0])
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().CreateStringValue(input);
}

inline Windows::Data::Json::JsonErrorStatus JsonError::GetJsonStatus(int const hresult)
{
	return GetActivationFactory<JsonError, IJsonErrorStatics2>().GetJsonStatus(hresult);
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Pdf {

inline PdfPageRenderOptions::PdfPageRenderOptions() :
	Windows::Data::Pdf::IPdfPageRenderOptions(ActivateInstance<PdfPageRenderOptions>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, String const & password)
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromFileAsync(file, password);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&password)[S0])
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromFileAsync(file, password);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream)
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromStreamAsync(inputStream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, String const & password)
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromStreamAsync(inputStream, password);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, wchar_t const (&password)[S0])
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromStreamAsync(inputStream, password);
}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Text {

inline SemanticTextQuery::SemanticTextQuery(String const & aqsFilter) :
	Windows::Data::Text::ISemanticTextQuery(GetActivationFactory<SemanticTextQuery, ISemanticTextQueryFactory>().Create(aqsFilter))
{}

template <unsigned S0> SemanticTextQuery::SemanticTextQuery(wchar_t const (&aqsFilter)[S0]) :
	Windows::Data::Text::ISemanticTextQuery(GetActivationFactory<SemanticTextQuery, ISemanticTextQueryFactory>().Create(aqsFilter))
{}

inline SemanticTextQuery::SemanticTextQuery(String const & aqsFilter, String const & filterLanguage) :
	Windows::Data::Text::ISemanticTextQuery(GetActivationFactory<SemanticTextQuery, ISemanticTextQueryFactory>().CreateWithLanguage(aqsFilter, filterLanguage))
{}

template <unsigned S0, unsigned S1> SemanticTextQuery::SemanticTextQuery(wchar_t const (&aqsFilter)[S0], wchar_t const (&filterLanguage)[S1]) :
	Windows::Data::Text::ISemanticTextQuery(GetActivationFactory<SemanticTextQuery, ISemanticTextQueryFactory>().CreateWithLanguage(aqsFilter, filterLanguage))
{}

inline unsigned UnicodeCharacters::GetCodepointFromSurrogatePair(unsigned const highSurrogate, unsigned const lowSurrogate)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetCodepointFromSurrogatePair(highSurrogate, lowSurrogate);
}

inline void UnicodeCharacters::GetSurrogatePairFromCodepoint(unsigned const codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate)
{
	GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetSurrogatePairFromCodepoint(codepoint, highSurrogate, lowSurrogate);
}

inline bool UnicodeCharacters::IsHighSurrogate(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsHighSurrogate(codepoint);
}

inline bool UnicodeCharacters::IsLowSurrogate(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsLowSurrogate(codepoint);
}

inline bool UnicodeCharacters::IsSupplementary(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsSupplementary(codepoint);
}

inline bool UnicodeCharacters::IsNoncharacter(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsNoncharacter(codepoint);
}

inline bool UnicodeCharacters::IsWhitespace(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsWhitespace(codepoint);
}

inline bool UnicodeCharacters::IsAlphabetic(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsAlphabetic(codepoint);
}

inline bool UnicodeCharacters::IsCased(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsCased(codepoint);
}

inline bool UnicodeCharacters::IsUppercase(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsUppercase(codepoint);
}

inline bool UnicodeCharacters::IsLowercase(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsLowercase(codepoint);
}

inline bool UnicodeCharacters::IsIdStart(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsIdStart(codepoint);
}

inline bool UnicodeCharacters::IsIdContinue(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsIdContinue(codepoint);
}

inline bool UnicodeCharacters::IsGraphemeBase(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsGraphemeBase(codepoint);
}

inline bool UnicodeCharacters::IsGraphemeExtend(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsGraphemeExtend(codepoint);
}

inline Windows::Data::Text::UnicodeNumericType UnicodeCharacters::GetNumericType(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetNumericType(codepoint);
}

inline Windows::Data::Text::UnicodeGeneralCategory UnicodeCharacters::GetGeneralCategory(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetGeneralCategory(codepoint);
}

inline WordsSegmenter::WordsSegmenter(String const & language) :
	Windows::Data::Text::IWordsSegmenter(GetActivationFactory<WordsSegmenter, IWordsSegmenterFactory>().CreateWithLanguage(language))
{}

template <unsigned S0> WordsSegmenter::WordsSegmenter(wchar_t const (&language)[S0]) :
	Windows::Data::Text::IWordsSegmenter(GetActivationFactory<WordsSegmenter, IWordsSegmenterFactory>().CreateWithLanguage(language))
{}

inline SelectableWordsSegmenter::SelectableWordsSegmenter(String const & language) :
	Windows::Data::Text::ISelectableWordsSegmenter(GetActivationFactory<SelectableWordsSegmenter, ISelectableWordsSegmenterFactory>().CreateWithLanguage(language))
{}

template <unsigned S0> SelectableWordsSegmenter::SelectableWordsSegmenter(wchar_t const (&language)[S0]) :
	Windows::Data::Text::ISelectableWordsSegmenter(GetActivationFactory<SelectableWordsSegmenter, ISelectableWordsSegmenterFactory>().CreateWithLanguage(language))
{}

}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Dom {

inline XmlDocument::XmlDocument() :
	Windows::Data::Xml::Dom::IXmlDocument(ActivateInstance<XmlDocument>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> XmlDocument::LoadFromUriAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<XmlDocument, IXmlDocumentStatics>().LoadFromUriAsync(uri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> XmlDocument::LoadFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings)
{
	return GetActivationFactory<XmlDocument, IXmlDocumentStatics>().LoadFromUriAsync(uri, loadSettings);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> XmlDocument::LoadFromFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<XmlDocument, IXmlDocumentStatics>().LoadFromFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> XmlDocument::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings)
{
	return GetActivationFactory<XmlDocument, IXmlDocumentStatics>().LoadFromFileAsync(file, loadSettings);
}

inline XmlLoadSettings::XmlLoadSettings() :
	Windows::Data::Xml::Dom::IXmlLoadSettings(ActivateInstance<XmlLoadSettings>())
{}

}}}}}

namespace Modern { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

inline XsltProcessor::XsltProcessor(Windows::Data::Xml::Dom::XmlDocument const & document) :
	Windows::Data::Xml::Xsl::IXsltProcessor(GetActivationFactory<XsltProcessor, IXsltProcessorFactory>().CreateInstance(document))
{}

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Background {

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Custom {

inline unsigned short KnownDeviceTypes::Unknown()
{
	return GetActivationFactory<KnownDeviceTypes, IKnownDeviceTypesStatics>().Unknown();
}

inline IOControlCode::IOControlCode(unsigned short const deviceType, unsigned short const function, Windows::Devices::Custom::IOControlAccessMode const accessMode, Windows::Devices::Custom::IOControlBufferingMethod const bufferingMethod) :
	Windows::Devices::Custom::IIOControlCode(GetActivationFactory<IOControlCode, IIOControlCodeFactory>().CreateIOControlCode(deviceType, function, accessMode, bufferingMethod))
{}

inline String CustomDevice::GetDeviceSelector(GUID const classGuid)
{
	return GetActivationFactory<CustomDevice, ICustomDeviceStatics>().GetDeviceSelector(classGuid);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> CustomDevice::FromIdAsync(String const & deviceId, Windows::Devices::Custom::DeviceAccessMode const desiredAccess, Windows::Devices::Custom::DeviceSharingMode const sharingMode)
{
	return GetActivationFactory<CustomDevice, ICustomDeviceStatics>().FromIdAsync(deviceId, desiredAccess, sharingMode);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> CustomDevice::FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Devices::Custom::DeviceAccessMode const desiredAccess, Windows::Devices::Custom::DeviceSharingMode const sharingMode)
{
	return GetActivationFactory<CustomDevice, ICustomDeviceStatics>().FromIdAsync(deviceId, desiredAccess, sharingMode);
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(String const & deviceId)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateFromIdAsync(deviceId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateFromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(String const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateFromIdAsync(deviceId, additionalProperties);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(wchar_t const (&deviceId)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateFromIdAsync(deviceId, additionalProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync()
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(deviceClass);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(String const & aqsFilter)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(aqsFilter);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(wchar_t const (&aqsFilter)[S0])
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(aqsFilter);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(aqsFilter, additionalProperties);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(aqsFilter, additionalProperties);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher()
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher();
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(deviceClass);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(String const & aqsFilter)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(aqsFilter);
}

template <unsigned S0> Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(wchar_t const (&aqsFilter)[S0])
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(aqsFilter);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(String const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(aqsFilter, additionalProperties);
}

template <unsigned S0> Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(wchar_t const (&aqsFilter)[S0], Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(aqsFilter, additionalProperties);
}

inline Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromId(String const & deviceId)
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromId(deviceId);
}

template <unsigned S0> Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromId(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromId(deviceId);
}

inline Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromDeviceClassId(GUID const deviceClassId)
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromDeviceClassId(deviceClassId);
}

inline Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromDeviceClass(deviceClass);
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> PnpObject::CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, String const & id, Windows::Foundation::Collections::IIterable<String> const & requestedProperties)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().CreateFromIdAsync(type, id, requestedProperties);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> PnpObject::CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, wchar_t const (&id)[S0], Windows::Foundation::Collections::IIterable<String> const & requestedProperties)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().CreateFromIdAsync(type, id, requestedProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> PnpObject::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().FindAllAsync(type, requestedProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> PnpObject::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().FindAllAsync(type, requestedProperties, aqsFilter);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> PnpObject::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0])
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().FindAllAsync(type, requestedProperties, aqsFilter);
}

inline Windows::Devices::Enumeration::Pnp::PnpObjectWatcher PnpObject::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().CreateWatcher(type, requestedProperties);
}

inline Windows::Devices::Enumeration::Pnp::PnpObjectWatcher PnpObject::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, String const & aqsFilter)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().CreateWatcher(type, requestedProperties, aqsFilter);
}

template <unsigned S0> Windows::Devices::Enumeration::Pnp::PnpObjectWatcher PnpObject::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, wchar_t const (&aqsFilter)[S0])
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().CreateWatcher(type, requestedProperties, aqsFilter);
}

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation {

inline Geopoint::Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position) :
	Windows::Devices::Geolocation::IGeopoint(GetActivationFactory<Geopoint, IGeopointFactory>().Create(position))
{}

inline Geopoint::Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	Windows::Devices::Geolocation::IGeopoint(GetActivationFactory<Geopoint, IGeopointFactory>().CreateWithAltitudeReferenceSystem(position, altitudeReferenceSystem))
{}

inline Geopoint::Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	Windows::Devices::Geolocation::IGeopoint(GetActivationFactory<Geopoint, IGeopointFactory>().CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, altitudeReferenceSystem, spatialReferenceId))
{}

inline Geolocator::Geolocator() :
	Windows::Devices::Geolocation::IGeolocator(ActivateInstance<Geolocator>())
{}

inline Geocircle::Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius) :
	Windows::Devices::Geolocation::IGeocircle(GetActivationFactory<Geocircle, IGeocircleFactory>().Create(position, radius))
{}

inline Geocircle::Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	Windows::Devices::Geolocation::IGeocircle(GetActivationFactory<Geocircle, IGeocircleFactory>().CreateWithAltitudeReferenceSystem(position, radius, altitudeReferenceSystem))
{}

inline Geocircle::Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	Windows::Devices::Geolocation::IGeocircle(GetActivationFactory<Geocircle, IGeocircleFactory>().CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, radius, altitudeReferenceSystem, spatialReferenceId))
{}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

inline Geofence::Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape) :
	Windows::Devices::Geolocation::Geofencing::IGeofence(GetActivationFactory<Geofence, IGeofenceFactory>().Create(id, geoshape))
{}

template <unsigned S0> Geofence::Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape) :
	Windows::Devices::Geolocation::Geofencing::IGeofence(GetActivationFactory<Geofence, IGeofenceFactory>().Create(id, geoshape))
{}

inline Geofence::Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse) :
	Windows::Devices::Geolocation::Geofencing::IGeofence(GetActivationFactory<Geofence, IGeofenceFactory>().CreateWithMonitorStates(id, geoshape, monitoredStates, singleUse))
{}

template <unsigned S0> Geofence::Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse) :
	Windows::Devices::Geolocation::Geofencing::IGeofence(GetActivationFactory<Geofence, IGeofenceFactory>().CreateWithMonitorStates(id, geoshape, monitoredStates, singleUse))
{}

inline Geofence::Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime) :
	Windows::Devices::Geolocation::Geofencing::IGeofence(GetActivationFactory<Geofence, IGeofenceFactory>().CreateWithMonitorStatesAndDwellTime(id, geoshape, monitoredStates, singleUse, dwellTime))
{}

template <unsigned S0> Geofence::Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime) :
	Windows::Devices::Geolocation::Geofencing::IGeofence(GetActivationFactory<Geofence, IGeofenceFactory>().CreateWithMonitorStatesAndDwellTime(id, geoshape, monitoredStates, singleUse, dwellTime))
{}

inline Geofence::Geofence(String const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) :
	Windows::Devices::Geolocation::Geofencing::IGeofence(GetActivationFactory<Geofence, IGeofenceFactory>().CreateWithMonitorStatesDwellTimeStartTimeAndDuration(id, geoshape, monitoredStates, singleUse, dwellTime, startTime, duration))
{}

template <unsigned S0> Geofence::Geofence(wchar_t const (&id)[S0], Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) :
	Windows::Devices::Geolocation::Geofencing::IGeofence(GetActivationFactory<Geofence, IGeofenceFactory>().CreateWithMonitorStatesDwellTimeStartTimeAndDuration(id, geoshape, monitoredStates, singleUse, dwellTime, startTime, duration))
{}

inline Windows::Devices::Geolocation::Geofencing::GeofenceMonitor GeofenceMonitor::Current()
{
	return GetActivationFactory<GeofenceMonitor, IGeofenceMonitorStatics>().Current();
}

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

inline String HidDevice::GetDeviceSelector(unsigned short const usagePage, unsigned short const usageId)
{
	return GetActivationFactory<HidDevice, IHidDeviceStatics>().GetDeviceSelector(usagePage, usageId);
}

inline String HidDevice::GetDeviceSelector(unsigned short const usagePage, unsigned short const usageId, unsigned short const vendorId, unsigned short const productId)
{
	return GetActivationFactory<HidDevice, IHidDeviceStatics>().GetDeviceSelector(usagePage, usageId, vendorId, productId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> HidDevice::FromIdAsync(String const & deviceId, Windows::Storage::FileAccessMode const accessMode)
{
	return GetActivationFactory<HidDevice, IHidDeviceStatics>().FromIdAsync(deviceId, accessMode);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> HidDevice::FromIdAsync(wchar_t const (&deviceId)[S0], Windows::Storage::FileAccessMode const accessMode)
{
	return GetActivationFactory<HidDevice, IHidDeviceStatics>().FromIdAsync(deviceId, accessMode);
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Input {

inline Windows::Devices::Input::PointerDevice PointerDevice::GetPointerDevice(unsigned const pointerId)
{
	return GetActivationFactory<PointerDevice, IPointerDeviceStatics>().GetPointerDevice(pointerId);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> PointerDevice::GetPointerDevices()
{
	return GetActivationFactory<PointerDevice, IPointerDeviceStatics>().GetPointerDevices();
}

inline Windows::Devices::Input::MouseDevice MouseDevice::GetForCurrentView()
{
	return GetActivationFactory<MouseDevice, IMouseDeviceStatics>().GetForCurrentView();
}

inline MouseCapabilities::MouseCapabilities() :
	Windows::Devices::Input::IMouseCapabilities(ActivateInstance<MouseCapabilities>())
{}

inline KeyboardCapabilities::KeyboardCapabilities() :
	Windows::Devices::Input::IKeyboardCapabilities(ActivateInstance<KeyboardCapabilities>())
{}

inline TouchCapabilities::TouchCapabilities() :
	Windows::Devices::Input::ITouchCapabilities(ActivateInstance<TouchCapabilities>())
{}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace PointOfService {

inline unsigned BarcodeSymbologies::Unknown()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Unknown();
}

inline unsigned BarcodeSymbologies::Ean8()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean8();
}

inline unsigned BarcodeSymbologies::Ean8Add2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean8Add2();
}

inline unsigned BarcodeSymbologies::Ean8Add5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean8Add5();
}

inline unsigned BarcodeSymbologies::Eanv()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Eanv();
}

inline unsigned BarcodeSymbologies::EanvAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().EanvAdd2();
}

inline unsigned BarcodeSymbologies::EanvAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().EanvAdd5();
}

inline unsigned BarcodeSymbologies::Ean13()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean13();
}

inline unsigned BarcodeSymbologies::Ean13Add2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean13Add2();
}

inline unsigned BarcodeSymbologies::Ean13Add5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean13Add5();
}

inline unsigned BarcodeSymbologies::Isbn()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Isbn();
}

inline unsigned BarcodeSymbologies::IsbnAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IsbnAdd5();
}

inline unsigned BarcodeSymbologies::Ismn()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ismn();
}

inline unsigned BarcodeSymbologies::IsmnAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IsmnAdd2();
}

inline unsigned BarcodeSymbologies::IsmnAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IsmnAdd5();
}

inline unsigned BarcodeSymbologies::Issn()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Issn();
}

inline unsigned BarcodeSymbologies::IssnAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IssnAdd2();
}

inline unsigned BarcodeSymbologies::IssnAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IssnAdd5();
}

inline unsigned BarcodeSymbologies::Ean99()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean99();
}

inline unsigned BarcodeSymbologies::Ean99Add2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean99Add2();
}

inline unsigned BarcodeSymbologies::Ean99Add5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean99Add5();
}

inline unsigned BarcodeSymbologies::Upca()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Upca();
}

inline unsigned BarcodeSymbologies::UpcaAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpcaAdd2();
}

inline unsigned BarcodeSymbologies::UpcaAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpcaAdd5();
}

inline unsigned BarcodeSymbologies::Upce()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Upce();
}

inline unsigned BarcodeSymbologies::UpceAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpceAdd2();
}

inline unsigned BarcodeSymbologies::UpceAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpceAdd5();
}

inline unsigned BarcodeSymbologies::UpcCoupon()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpcCoupon();
}

inline unsigned BarcodeSymbologies::TfStd()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfStd();
}

inline unsigned BarcodeSymbologies::TfDis()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfDis();
}

inline unsigned BarcodeSymbologies::TfInt()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfInt();
}

inline unsigned BarcodeSymbologies::TfInd()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfInd();
}

inline unsigned BarcodeSymbologies::TfMat()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfMat();
}

inline unsigned BarcodeSymbologies::TfIata()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfIata();
}

inline unsigned BarcodeSymbologies::Gs1DatabarType1()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1DatabarType1();
}

inline unsigned BarcodeSymbologies::Gs1DatabarType2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1DatabarType2();
}

inline unsigned BarcodeSymbologies::Gs1DatabarType3()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1DatabarType3();
}

inline unsigned BarcodeSymbologies::Code39()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code39();
}

inline unsigned BarcodeSymbologies::Code39Ex()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code39Ex();
}

inline unsigned BarcodeSymbologies::Trioptic39()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Trioptic39();
}

inline unsigned BarcodeSymbologies::Code32()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code32();
}

inline unsigned BarcodeSymbologies::Pzn()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Pzn();
}

inline unsigned BarcodeSymbologies::Code93()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code93();
}

inline unsigned BarcodeSymbologies::Code93Ex()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code93Ex();
}

inline unsigned BarcodeSymbologies::Code128()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code128();
}

inline unsigned BarcodeSymbologies::Gs1128()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1128();
}

inline unsigned BarcodeSymbologies::Gs1128Coupon()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1128Coupon();
}

inline unsigned BarcodeSymbologies::UccEan128()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UccEan128();
}

inline unsigned BarcodeSymbologies::Sisac()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Sisac();
}

inline unsigned BarcodeSymbologies::Isbt()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Isbt();
}

inline unsigned BarcodeSymbologies::Codabar()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Codabar();
}

inline unsigned BarcodeSymbologies::Code11()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code11();
}

inline unsigned BarcodeSymbologies::Msi()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Msi();
}

inline unsigned BarcodeSymbologies::Plessey()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Plessey();
}

inline unsigned BarcodeSymbologies::Telepen()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Telepen();
}

inline unsigned BarcodeSymbologies::Code16k()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code16k();
}

inline unsigned BarcodeSymbologies::CodablockA()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().CodablockA();
}

inline unsigned BarcodeSymbologies::CodablockF()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().CodablockF();
}

inline unsigned BarcodeSymbologies::Codablock128()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Codablock128();
}

inline unsigned BarcodeSymbologies::Code49()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code49();
}

inline unsigned BarcodeSymbologies::Aztec()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Aztec();
}

inline unsigned BarcodeSymbologies::DataCode()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().DataCode();
}

inline unsigned BarcodeSymbologies::DataMatrix()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().DataMatrix();
}

inline unsigned BarcodeSymbologies::HanXin()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().HanXin();
}

inline unsigned BarcodeSymbologies::Maxicode()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Maxicode();
}

inline unsigned BarcodeSymbologies::MicroPdf417()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().MicroPdf417();
}

inline unsigned BarcodeSymbologies::MicroQr()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().MicroQr();
}

inline unsigned BarcodeSymbologies::Pdf417()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Pdf417();
}

inline unsigned BarcodeSymbologies::Qr()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Qr();
}

inline unsigned BarcodeSymbologies::MsTag()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().MsTag();
}

inline unsigned BarcodeSymbologies::Ccab()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ccab();
}

inline unsigned BarcodeSymbologies::Ccc()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ccc();
}

inline unsigned BarcodeSymbologies::Tlc39()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Tlc39();
}

inline unsigned BarcodeSymbologies::AusPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().AusPost();
}

inline unsigned BarcodeSymbologies::CanPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().CanPost();
}

inline unsigned BarcodeSymbologies::ChinaPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().ChinaPost();
}

inline unsigned BarcodeSymbologies::DutchKix()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().DutchKix();
}

inline unsigned BarcodeSymbologies::InfoMail()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().InfoMail();
}

inline unsigned BarcodeSymbologies::ItalianPost25()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().ItalianPost25();
}

inline unsigned BarcodeSymbologies::ItalianPost39()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().ItalianPost39();
}

inline unsigned BarcodeSymbologies::JapanPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().JapanPost();
}

inline unsigned BarcodeSymbologies::KoreanPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().KoreanPost();
}

inline unsigned BarcodeSymbologies::SwedenPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().SwedenPost();
}

inline unsigned BarcodeSymbologies::UkPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UkPost();
}

inline unsigned BarcodeSymbologies::UsIntelligent()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UsIntelligent();
}

inline unsigned BarcodeSymbologies::UsIntelligentPkg()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UsIntelligentPkg();
}

inline unsigned BarcodeSymbologies::UsPlanet()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UsPlanet();
}

inline unsigned BarcodeSymbologies::UsPostNet()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UsPostNet();
}

inline unsigned BarcodeSymbologies::Us4StateFics()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Us4StateFics();
}

inline unsigned BarcodeSymbologies::OcrA()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().OcrA();
}

inline unsigned BarcodeSymbologies::OcrB()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().OcrB();
}

inline unsigned BarcodeSymbologies::Micr()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Micr();
}

inline unsigned BarcodeSymbologies::ExtendedBase()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().ExtendedBase();
}

inline String BarcodeSymbologies::GetName(unsigned const scanDataType)
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().GetName(scanDataType);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> BarcodeScanner::GetDefaultAsync()
{
	return GetActivationFactory<BarcodeScanner, IBarcodeScannerStatics>().GetDefaultAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> BarcodeScanner::FromIdAsync(String const & deviceId)
{
	return GetActivationFactory<BarcodeScanner, IBarcodeScannerStatics>().FromIdAsync(deviceId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> BarcodeScanner::FromIdAsync(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<BarcodeScanner, IBarcodeScannerStatics>().FromIdAsync(deviceId);
}

inline String BarcodeScanner::GetDeviceSelector()
{
	return GetActivationFactory<BarcodeScanner, IBarcodeScannerStatics>().GetDeviceSelector();
}

inline unsigned MagneticStripeReaderEncryptionAlgorithms::None()
{
	return GetActivationFactory<MagneticStripeReaderEncryptionAlgorithms, IMagneticStripeReaderEncryptionAlgorithmsStatics>().None();
}

inline unsigned MagneticStripeReaderEncryptionAlgorithms::TripleDesDukpt()
{
	return GetActivationFactory<MagneticStripeReaderEncryptionAlgorithms, IMagneticStripeReaderEncryptionAlgorithmsStatics>().TripleDesDukpt();
}

inline unsigned MagneticStripeReaderEncryptionAlgorithms::ExtendedBase()
{
	return GetActivationFactory<MagneticStripeReaderEncryptionAlgorithms, IMagneticStripeReaderEncryptionAlgorithmsStatics>().ExtendedBase();
}

inline unsigned MagneticStripeReaderCardTypes::Unknown()
{
	return GetActivationFactory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>().Unknown();
}

inline unsigned MagneticStripeReaderCardTypes::Bank()
{
	return GetActivationFactory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>().Bank();
}

inline unsigned MagneticStripeReaderCardTypes::Aamva()
{
	return GetActivationFactory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>().Aamva();
}

inline unsigned MagneticStripeReaderCardTypes::ExtendedBase()
{
	return GetActivationFactory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>().ExtendedBase();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> MagneticStripeReader::GetDefaultAsync()
{
	return GetActivationFactory<MagneticStripeReader, IMagneticStripeReaderStatics>().GetDefaultAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> MagneticStripeReader::FromIdAsync(String const & deviceId)
{
	return GetActivationFactory<MagneticStripeReader, IMagneticStripeReaderStatics>().FromIdAsync(deviceId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> MagneticStripeReader::FromIdAsync(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<MagneticStripeReader, IMagneticStripeReaderStatics>().FromIdAsync(deviceId);
}

inline String MagneticStripeReader::GetDeviceSelector()
{
	return GetActivationFactory<MagneticStripeReader, IMagneticStripeReaderStatics>().GetDeviceSelector();
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Portable {

inline Windows::Storage::StorageFolder StorageDevice::FromId(String const & deviceId)
{
	return GetActivationFactory<StorageDevice, IStorageDeviceStatics>().FromId(deviceId);
}

template <unsigned S0> Windows::Storage::StorageFolder StorageDevice::FromId(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<StorageDevice, IStorageDeviceStatics>().FromId(deviceId);
}

inline String StorageDevice::GetDeviceSelector()
{
	return GetActivationFactory<StorageDevice, IStorageDeviceStatics>().GetDeviceSelector();
}

inline String ServiceDevice::GetDeviceSelector(Windows::Devices::Portable::ServiceDeviceType const serviceType)
{
	return GetActivationFactory<ServiceDevice, IServiceDeviceStatics>().GetDeviceSelector(serviceType);
}

inline String ServiceDevice::GetDeviceSelectorFromServiceId(GUID const serviceId)
{
	return GetActivationFactory<ServiceDevice, IServiceDeviceStatics>().GetDeviceSelectorFromServiceId(serviceId);
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

inline IInspectable PrintExtensionContext::FromDeviceId(String const & deviceId)
{
	return GetActivationFactory<PrintExtensionContext, IPrintExtensionContextStatic>().FromDeviceId(deviceId);
}

template <unsigned S0> IInspectable PrintExtensionContext::FromDeviceId(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<PrintExtensionContext, IPrintExtensionContextStatic>().FromDeviceId(deviceId);
}

}}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sensors {

inline Windows::Devices::Sensors::Accelerometer Accelerometer::GetDefault()
{
	return GetActivationFactory<Accelerometer, IAccelerometerStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Inclinometer Inclinometer::GetDefault()
{
	return GetActivationFactory<Inclinometer, IInclinometerStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Gyrometer Gyrometer::GetDefault()
{
	return GetActivationFactory<Gyrometer, IGyrometerStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Compass Compass::GetDefault()
{
	return GetActivationFactory<Compass, ICompassStatics>().GetDefault();
}

inline Windows::Devices::Sensors::LightSensor LightSensor::GetDefault()
{
	return GetActivationFactory<LightSensor, ILightSensorStatics>().GetDefault();
}

inline Windows::Devices::Sensors::OrientationSensor OrientationSensor::GetDefault()
{
	return GetActivationFactory<OrientationSensor, IOrientationSensorStatics>().GetDefault();
}

inline Windows::Devices::Sensors::SimpleOrientationSensor SimpleOrientationSensor::GetDefault()
{
	return GetActivationFactory<SimpleOrientationSensor, ISimpleOrientationSensorStatics>().GetDefault();
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace SmartCards {

inline String SmartCardReader::GetDeviceSelector()
{
	return GetActivationFactory<SmartCardReader, ISmartCardReaderStatics>().GetDeviceSelector();
}

inline String SmartCardReader::GetDeviceSelector(Windows::Devices::SmartCards::SmartCardReaderKind const kind)
{
	return GetActivationFactory<SmartCardReader, ISmartCardReaderStatics>().GetDeviceSelector(kind);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> SmartCardReader::FromIdAsync(String const & deviceId)
{
	return GetActivationFactory<SmartCardReader, ISmartCardReaderStatics>().FromIdAsync(deviceId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> SmartCardReader::FromIdAsync(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<SmartCardReader, ISmartCardReaderStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::FromSmartCardAsync(Windows::Devices::SmartCards::SmartCard const & card)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().FromSmartCardAsync(card);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().RequestVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().RequestVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(String const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID const cardId)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().RequestVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy, cardId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(wchar_t const (&friendlyName)[S0], Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID const cardId)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().RequestVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy, cardId);
}

inline Windows::Foundation::IAsyncOperation<bool> SmartCardProvisioning::RequestVirtualSmartCardDeletionAsync(Windows::Devices::SmartCards::SmartCard const & card)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().RequestVirtualSmartCardDeletionAsync(card);
}

inline SmartCardPinPolicy::SmartCardPinPolicy() :
	Windows::Devices::SmartCards::ISmartCardPinPolicy(ActivateInstance<SmartCardPinPolicy>())
{}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Sms {

inline SmsBinaryMessage::SmsBinaryMessage() :
	Windows::Devices::Sms::ISmsBinaryMessage(ActivateInstance<SmsBinaryMessage>())
{}

inline SmsTextMessage::SmsTextMessage() :
	Windows::Devices::Sms::ISmsTextMessage(ActivateInstance<SmsTextMessage>())
{}

inline Windows::Devices::Sms::SmsTextMessage SmsTextMessage::FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage)
{
	return GetActivationFactory<SmsTextMessage, ISmsTextMessageStatics>().FromBinaryMessage(binaryMessage);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::FromNetworkAccountIdAsync(String const & networkAccountId)
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics2>().FromNetworkAccountIdAsync(networkAccountId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::FromNetworkAccountIdAsync(wchar_t const (&networkAccountId)[S0])
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics2>().FromNetworkAccountIdAsync(networkAccountId);
}

inline String SmsDevice::GetDeviceSelector()
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::FromIdAsync(String const & deviceId)
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().FromIdAsync(deviceId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::FromIdAsync(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::GetDefaultAsync()
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().GetDefaultAsync();
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace Usb {

inline UsbControlRequestType::UsbControlRequestType() :
	Windows::Devices::Usb::IUsbControlRequestType(ActivateInstance<UsbControlRequestType>())
{}

inline UsbSetupPacket::UsbSetupPacket() :
	Windows::Devices::Usb::IUsbSetupPacket(ActivateInstance<UsbSetupPacket>())
{}

inline UsbSetupPacket::UsbSetupPacket(Windows::Storage::Streams::IBuffer const & eightByteBuffer) :
	Windows::Devices::Usb::IUsbSetupPacket(GetActivationFactory<UsbSetupPacket, IUsbSetupPacketFactory>().CreateWithEightByteBuffer(eightByteBuffer))
{}

inline UsbDeviceClass::UsbDeviceClass() :
	Windows::Devices::Usb::IUsbDeviceClass(ActivateInstance<UsbDeviceClass>())
{}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::CdcControl()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().CdcControl();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::Physical()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().Physical();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::PersonalHealthcare()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().PersonalHealthcare();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::ActiveSync()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().ActiveSync();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::PalmSync()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().PalmSync();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::DeviceFirmwareUpdate()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().DeviceFirmwareUpdate();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::Irda()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().Irda();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::Measurement()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().Measurement();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::VendorSpecific()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().VendorSpecific();
}

inline String UsbDevice::GetDeviceSelector(unsigned const vendorId, unsigned const productId, GUID const winUsbInterfaceClass)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().GetDeviceSelector(vendorId, productId, winUsbInterfaceClass);
}

inline String UsbDevice::GetDeviceSelector(GUID const winUsbInterfaceClass)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().GetDeviceSelector(winUsbInterfaceClass);
}

inline String UsbDevice::GetDeviceSelector(unsigned const vendorId, unsigned const productId)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().GetDeviceSelector(vendorId, productId);
}

inline String UsbDevice::GetDeviceClassSelector(Windows::Devices::Usb::UsbDeviceClass const & usbClass)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().GetDeviceClassSelector(usbClass);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> UsbDevice::FromIdAsync(String const & deviceId)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().FromIdAsync(deviceId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> UsbDevice::FromIdAsync(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().FromIdAsync(deviceId);
}

inline bool UsbConfigurationDescriptor::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbConfigurationDescriptor & parsed)
{
	return GetActivationFactory<UsbConfigurationDescriptor, IUsbConfigurationDescriptorStatics>().TryParse(descriptor, parsed);
}

inline Windows::Devices::Usb::UsbConfigurationDescriptor UsbConfigurationDescriptor::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor)
{
	return GetActivationFactory<UsbConfigurationDescriptor, IUsbConfigurationDescriptorStatics>().Parse(descriptor);
}

inline bool UsbInterfaceDescriptor::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbInterfaceDescriptor & parsed)
{
	return GetActivationFactory<UsbInterfaceDescriptor, IUsbInterfaceDescriptorStatics>().TryParse(descriptor, parsed);
}

inline Windows::Devices::Usb::UsbInterfaceDescriptor UsbInterfaceDescriptor::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor)
{
	return GetActivationFactory<UsbInterfaceDescriptor, IUsbInterfaceDescriptorStatics>().Parse(descriptor);
}

inline bool UsbEndpointDescriptor::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbEndpointDescriptor & parsed)
{
	return GetActivationFactory<UsbEndpointDescriptor, IUsbEndpointDescriptorStatics>().TryParse(descriptor, parsed);
}

inline Windows::Devices::Usb::UsbEndpointDescriptor UsbEndpointDescriptor::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor)
{
	return GetActivationFactory<UsbEndpointDescriptor, IUsbEndpointDescriptorStatics>().Parse(descriptor);
}

}}}}

namespace Modern { namespace Windows { namespace Devices { namespace WiFiDirect {

inline String WiFiDirectDevice::GetDeviceSelector()
{
	return GetActivationFactory<WiFiDirectDevice, IWiFiDirectDeviceStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> WiFiDirectDevice::FromIdAsync(String const & deviceId)
{
	return GetActivationFactory<WiFiDirectDevice, IWiFiDirectDeviceStatics>().FromIdAsync(deviceId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> WiFiDirectDevice::FromIdAsync(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<WiFiDirectDevice, IWiFiDirectDeviceStatics>().FromIdAsync(deviceId);
}

}}}}

namespace Modern { namespace Windows { namespace Foundation {

inline WwwFormUrlDecoder::WwwFormUrlDecoder(String const & query) :
	Windows::Foundation::IWwwFormUrlDecoderRuntimeClass(GetActivationFactory<WwwFormUrlDecoder, IWwwFormUrlDecoderRuntimeClassFactory>().CreateWwwFormUrlDecoder(query))
{}

template <unsigned S0> WwwFormUrlDecoder::WwwFormUrlDecoder(wchar_t const (&query)[S0]) :
	Windows::Foundation::IWwwFormUrlDecoderRuntimeClass(GetActivationFactory<WwwFormUrlDecoder, IWwwFormUrlDecoderRuntimeClassFactory>().CreateWwwFormUrlDecoder(query))
{}

inline Uri::Uri(String const & uri) :
	Windows::Foundation::IUriRuntimeClass(GetActivationFactory<Uri, IUriRuntimeClassFactory>().CreateUri(uri))
{}

template <unsigned S0> Uri::Uri(wchar_t const (&uri)[S0]) :
	Windows::Foundation::IUriRuntimeClass(GetActivationFactory<Uri, IUriRuntimeClassFactory>().CreateUri(uri))
{}

inline Uri::Uri(String const & baseUri, String const & relativeUri) :
	Windows::Foundation::IUriRuntimeClass(GetActivationFactory<Uri, IUriRuntimeClassFactory>().CreateUri(baseUri, relativeUri))
{}

template <unsigned S0, unsigned S1> Uri::Uri(wchar_t const (&baseUri)[S0], wchar_t const (&relativeUri)[S1]) :
	Windows::Foundation::IUriRuntimeClass(GetActivationFactory<Uri, IUriRuntimeClassFactory>().CreateUri(baseUri, relativeUri))
{}

inline String Uri::UnescapeComponent(String const & toUnescape)
{
	return GetActivationFactory<Uri, IUriEscapeStatics>().UnescapeComponent(toUnescape);
}

template <unsigned S0> String Uri::UnescapeComponent(wchar_t const (&toUnescape)[S0])
{
	return GetActivationFactory<Uri, IUriEscapeStatics>().UnescapeComponent(toUnescape);
}

inline String Uri::EscapeComponent(String const & toEscape)
{
	return GetActivationFactory<Uri, IUriEscapeStatics>().EscapeComponent(toEscape);
}

template <unsigned S0> String Uri::EscapeComponent(wchar_t const (&toEscape)[S0])
{
	return GetActivationFactory<Uri, IUriEscapeStatics>().EscapeComponent(toEscape);
}

inline IInspectable PropertyValue::CreateEmpty()
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateEmpty();
}

inline IInspectable PropertyValue::CreateUInt8(byte const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt8(value);
}

inline IInspectable PropertyValue::CreateInt16(short const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInt16(value);
}

inline IInspectable PropertyValue::CreateUInt16(unsigned short const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt16(value);
}

inline IInspectable PropertyValue::CreateInt32(int const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInt32(value);
}

inline IInspectable PropertyValue::CreateUInt32(unsigned const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt32(value);
}

inline IInspectable PropertyValue::CreateInt64(long long const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInt64(value);
}

inline IInspectable PropertyValue::CreateUInt64(unsigned long long const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt64(value);
}

inline IInspectable PropertyValue::CreateSingle(float const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateSingle(value);
}

inline IInspectable PropertyValue::CreateDouble(double const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateDouble(value);
}

inline IInspectable PropertyValue::CreateChar16(wchar_t const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateChar16(value);
}

inline IInspectable PropertyValue::CreateBoolean(bool const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateBoolean(value);
}

inline IInspectable PropertyValue::CreateString(String const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateString(value);
}

template <unsigned S0> IInspectable PropertyValue::CreateString(wchar_t const (&value)[S0])
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateString(value);
}

inline IInspectable PropertyValue::CreateInspectable(IInspectable const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInspectable(value);
}

inline IInspectable PropertyValue::CreateGuid(GUID const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateGuid(value);
}

inline IInspectable PropertyValue::CreateDateTime(Windows::Foundation::DateTime const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateDateTime(value);
}

inline IInspectable PropertyValue::CreateTimeSpan(Windows::Foundation::TimeSpan const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateTimeSpan(value);
}

inline IInspectable PropertyValue::CreatePoint(Windows::Foundation::Point const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreatePoint(value);
}

inline IInspectable PropertyValue::CreateSize(Windows::Foundation::Size const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateSize(value);
}

inline IInspectable PropertyValue::CreateRect(Windows::Foundation::Rect const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateRect(value);
}

}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Collections {

inline PropertySet::PropertySet() :
	Windows::Foundation::Collections::IPropertySet(ActivateInstance<PropertySet>())
{}

}}}}

namespace Modern { namespace Windows { namespace Foundation { namespace Diagnostics {

inline void AsyncCausalityTracer::TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, String const & operationName, unsigned long long const relatedContext)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationCreation(traceLevel, source, platformId, operationId, operationName, relatedContext);
}

template <unsigned S0> void AsyncCausalityTracer::TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, wchar_t const (&operationName)[S0], unsigned long long const relatedContext)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationCreation(traceLevel, source, platformId, operationId, operationName, relatedContext);
}

inline void AsyncCausalityTracer::TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, AsyncStatus const status)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationCompletion(traceLevel, source, platformId, operationId, status);
}

inline void AsyncCausalityTracer::TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalityRelation const relation)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationRelation(traceLevel, source, platformId, operationId, relation);
}

inline void AsyncCausalityTracer::TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceSynchronousWorkStart(traceLevel, source, platformId, operationId, work);
}

inline void AsyncCausalityTracer::TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceSynchronousWorkCompletion(traceLevel, source, work);
}

inline EventRegistrationToken AsyncCausalityTracer::TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler)
{
	return GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TracingStatusChanged(handler);
}

template <typename F> EventRegistrationToken AsyncCausalityTracer::TracingStatusChanged(F handler)
{
	return GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TracingStatusChanged(Windows::Foundation::EventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs>(handler));
}

inline void AsyncCausalityTracer::TracingStatusChanged(EventRegistrationToken const cookie)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TracingStatusChanged(cookie);
}

inline RuntimeBrokerErrorSettings::RuntimeBrokerErrorSettings() :
	Windows::Foundation::Diagnostics::IErrorReportingSettings(ActivateInstance<RuntimeBrokerErrorSettings>())
{}

inline LoggingChannel::LoggingChannel(String const & name) :
	Windows::Foundation::Diagnostics::ILoggingChannel(GetActivationFactory<LoggingChannel, ILoggingChannelFactory>().Create(name))
{}

template <unsigned S0> LoggingChannel::LoggingChannel(wchar_t const (&name)[S0]) :
	Windows::Foundation::Diagnostics::ILoggingChannel(GetActivationFactory<LoggingChannel, ILoggingChannelFactory>().Create(name))
{}

inline LoggingActivity::LoggingActivity(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) :
	Windows::Foundation::Diagnostics::ILoggingActivity(GetActivationFactory<LoggingActivity, ILoggingActivityFactory>().CreateLoggingActivity(activityName, loggingChannel))
{}

template <unsigned S0> LoggingActivity::LoggingActivity(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) :
	Windows::Foundation::Diagnostics::ILoggingActivity(GetActivationFactory<LoggingActivity, ILoggingActivityFactory>().CreateLoggingActivity(activityName, loggingChannel))
{}

inline LoggingActivity::LoggingActivity(String const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const level) :
	Windows::Foundation::Diagnostics::ILoggingActivity(GetActivationFactory<LoggingActivity, ILoggingActivityFactory>().CreateLoggingActivityWithLevel(activityName, loggingChannel, level))
{}

template <unsigned S0> LoggingActivity::LoggingActivity(wchar_t const (&activityName)[S0], Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const level) :
	Windows::Foundation::Diagnostics::ILoggingActivity(GetActivationFactory<LoggingActivity, ILoggingActivityFactory>().CreateLoggingActivityWithLevel(activityName, loggingChannel, level))
{}

inline LoggingSession::LoggingSession(String const & name) :
	Windows::Foundation::Diagnostics::ILoggingSession(GetActivationFactory<LoggingSession, ILoggingSessionFactory>().Create(name))
{}

template <unsigned S0> LoggingSession::LoggingSession(wchar_t const (&name)[S0]) :
	Windows::Foundation::Diagnostics::ILoggingSession(GetActivationFactory<LoggingSession, ILoggingSessionFactory>().Create(name))
{}

inline FileLoggingSession::FileLoggingSession(String const & name) :
	Windows::Foundation::Diagnostics::IFileLoggingSession(GetActivationFactory<FileLoggingSession, IFileLoggingSessionFactory>().Create(name))
{}

template <unsigned S0> FileLoggingSession::FileLoggingSession(wchar_t const (&name)[S0]) :
	Windows::Foundation::Diagnostics::IFileLoggingSession(GetActivationFactory<FileLoggingSession, IFileLoggingSessionFactory>().Create(name))
{}

}}}}

namespace Modern { namespace Windows { namespace Globalization {

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> JapanesePhoneticAnalyzer::GetWords(String const & input)
{
	return GetActivationFactory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>().GetWords(input);
}

template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> JapanesePhoneticAnalyzer::GetWords(wchar_t const (&input)[S0])
{
	return GetActivationFactory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>().GetWords(input);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> JapanesePhoneticAnalyzer::GetWords(String const & input, bool const monoRuby)
{
	return GetActivationFactory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>().GetWords(input, monoRuby);
}

template <unsigned S0> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> JapanesePhoneticAnalyzer::GetWords(wchar_t const (&input)[S0], bool const monoRuby)
{
	return GetActivationFactory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>().GetWords(input, monoRuby);
}

inline String CalendarIdentifiers::Gregorian()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Gregorian();
}

inline String CalendarIdentifiers::Hebrew()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Hebrew();
}

inline String CalendarIdentifiers::Hijri()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Hijri();
}

inline String CalendarIdentifiers::Japanese()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Japanese();
}

inline String CalendarIdentifiers::Julian()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Julian();
}

inline String CalendarIdentifiers::Korean()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Korean();
}

inline String CalendarIdentifiers::Taiwan()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Taiwan();
}

inline String CalendarIdentifiers::Thai()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Thai();
}

inline String CalendarIdentifiers::UmAlQura()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().UmAlQura();
}

inline String ClockIdentifiers::TwelveHour()
{
	return GetActivationFactory<ClockIdentifiers, IClockIdentifiersStatics>().TwelveHour();
}

inline String ClockIdentifiers::TwentyFourHour()
{
	return GetActivationFactory<ClockIdentifiers, IClockIdentifiersStatics>().TwentyFourHour();
}

inline String NumeralSystemIdentifiers::Arab()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Arab();
}

inline String NumeralSystemIdentifiers::ArabExt()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().ArabExt();
}

inline String NumeralSystemIdentifiers::Bali()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Bali();
}

inline String NumeralSystemIdentifiers::Beng()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Beng();
}

inline String NumeralSystemIdentifiers::Cham()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Cham();
}

inline String NumeralSystemIdentifiers::Deva()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Deva();
}

inline String NumeralSystemIdentifiers::FullWide()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().FullWide();
}

inline String NumeralSystemIdentifiers::Gujr()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Gujr();
}

inline String NumeralSystemIdentifiers::Guru()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Guru();
}

inline String NumeralSystemIdentifiers::HaniDec()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().HaniDec();
}

inline String NumeralSystemIdentifiers::Java()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Java();
}

inline String NumeralSystemIdentifiers::Kali()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Kali();
}

inline String NumeralSystemIdentifiers::Khmr()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Khmr();
}

inline String NumeralSystemIdentifiers::Knda()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Knda();
}

inline String NumeralSystemIdentifiers::Lana()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Lana();
}

inline String NumeralSystemIdentifiers::LanaTham()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().LanaTham();
}

inline String NumeralSystemIdentifiers::Laoo()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Laoo();
}

inline String NumeralSystemIdentifiers::Latn()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Latn();
}

inline String NumeralSystemIdentifiers::Lepc()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Lepc();
}

inline String NumeralSystemIdentifiers::Limb()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Limb();
}

inline String NumeralSystemIdentifiers::Mlym()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mlym();
}

inline String NumeralSystemIdentifiers::Mong()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mong();
}

inline String NumeralSystemIdentifiers::Mtei()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mtei();
}

inline String NumeralSystemIdentifiers::Mymr()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mymr();
}

inline String NumeralSystemIdentifiers::MymrShan()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().MymrShan();
}

inline String NumeralSystemIdentifiers::Nkoo()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Nkoo();
}

inline String NumeralSystemIdentifiers::Olck()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Olck();
}

inline String NumeralSystemIdentifiers::Orya()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Orya();
}

inline String NumeralSystemIdentifiers::Saur()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Saur();
}

inline String NumeralSystemIdentifiers::Sund()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Sund();
}

inline String NumeralSystemIdentifiers::Talu()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Talu();
}

inline String NumeralSystemIdentifiers::TamlDec()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().TamlDec();
}

inline String NumeralSystemIdentifiers::Telu()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Telu();
}

inline String NumeralSystemIdentifiers::Thai()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Thai();
}

inline String NumeralSystemIdentifiers::Tibt()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Tibt();
}

inline String NumeralSystemIdentifiers::Vaii()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Vaii();
}

inline String CurrencyIdentifiers::AED()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AED();
}

inline String CurrencyIdentifiers::AFN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AFN();
}

inline String CurrencyIdentifiers::ALL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ALL();
}

inline String CurrencyIdentifiers::AMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AMD();
}

inline String CurrencyIdentifiers::ANG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ANG();
}

inline String CurrencyIdentifiers::AOA()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AOA();
}

inline String CurrencyIdentifiers::ARS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ARS();
}

inline String CurrencyIdentifiers::AUD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AUD();
}

inline String CurrencyIdentifiers::AWG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AWG();
}

inline String CurrencyIdentifiers::AZN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AZN();
}

inline String CurrencyIdentifiers::BAM()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BAM();
}

inline String CurrencyIdentifiers::BBD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BBD();
}

inline String CurrencyIdentifiers::BDT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BDT();
}

inline String CurrencyIdentifiers::BGN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BGN();
}

inline String CurrencyIdentifiers::BHD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BHD();
}

inline String CurrencyIdentifiers::BIF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BIF();
}

inline String CurrencyIdentifiers::BMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BMD();
}

inline String CurrencyIdentifiers::BND()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BND();
}

inline String CurrencyIdentifiers::BOB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BOB();
}

inline String CurrencyIdentifiers::BRL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BRL();
}

inline String CurrencyIdentifiers::BSD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BSD();
}

inline String CurrencyIdentifiers::BTN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BTN();
}

inline String CurrencyIdentifiers::BWP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BWP();
}

inline String CurrencyIdentifiers::BYR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BYR();
}

inline String CurrencyIdentifiers::BZD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BZD();
}

inline String CurrencyIdentifiers::CAD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CAD();
}

inline String CurrencyIdentifiers::CDF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CDF();
}

inline String CurrencyIdentifiers::CHF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CHF();
}

inline String CurrencyIdentifiers::CLP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CLP();
}

inline String CurrencyIdentifiers::CNY()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CNY();
}

inline String CurrencyIdentifiers::COP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().COP();
}

inline String CurrencyIdentifiers::CRC()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CRC();
}

inline String CurrencyIdentifiers::CUP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CUP();
}

inline String CurrencyIdentifiers::CVE()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CVE();
}

inline String CurrencyIdentifiers::CZK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CZK();
}

inline String CurrencyIdentifiers::DJF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DJF();
}

inline String CurrencyIdentifiers::DKK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DKK();
}

inline String CurrencyIdentifiers::DOP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DOP();
}

inline String CurrencyIdentifiers::DZD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DZD();
}

inline String CurrencyIdentifiers::EGP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().EGP();
}

inline String CurrencyIdentifiers::ERN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ERN();
}

inline String CurrencyIdentifiers::ETB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ETB();
}

inline String CurrencyIdentifiers::EUR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().EUR();
}

inline String CurrencyIdentifiers::FJD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().FJD();
}

inline String CurrencyIdentifiers::FKP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().FKP();
}

inline String CurrencyIdentifiers::GBP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GBP();
}

inline String CurrencyIdentifiers::GEL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GEL();
}

inline String CurrencyIdentifiers::GHS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GHS();
}

inline String CurrencyIdentifiers::GIP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GIP();
}

inline String CurrencyIdentifiers::GMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GMD();
}

inline String CurrencyIdentifiers::GNF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GNF();
}

inline String CurrencyIdentifiers::GTQ()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GTQ();
}

inline String CurrencyIdentifiers::GYD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GYD();
}

inline String CurrencyIdentifiers::HKD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HKD();
}

inline String CurrencyIdentifiers::HNL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HNL();
}

inline String CurrencyIdentifiers::HRK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HRK();
}

inline String CurrencyIdentifiers::HTG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HTG();
}

inline String CurrencyIdentifiers::HUF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HUF();
}

inline String CurrencyIdentifiers::IDR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().IDR();
}

inline String CurrencyIdentifiers::ILS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ILS();
}

inline String CurrencyIdentifiers::INR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().INR();
}

inline String CurrencyIdentifiers::IQD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().IQD();
}

inline String CurrencyIdentifiers::IRR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().IRR();
}

inline String CurrencyIdentifiers::ISK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ISK();
}

inline String CurrencyIdentifiers::JMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().JMD();
}

inline String CurrencyIdentifiers::JOD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().JOD();
}

inline String CurrencyIdentifiers::JPY()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().JPY();
}

inline String CurrencyIdentifiers::KES()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KES();
}

inline String CurrencyIdentifiers::KGS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KGS();
}

inline String CurrencyIdentifiers::KHR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KHR();
}

inline String CurrencyIdentifiers::KMF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KMF();
}

inline String CurrencyIdentifiers::KPW()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KPW();
}

inline String CurrencyIdentifiers::KRW()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KRW();
}

inline String CurrencyIdentifiers::KWD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KWD();
}

inline String CurrencyIdentifiers::KYD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KYD();
}

inline String CurrencyIdentifiers::KZT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KZT();
}

inline String CurrencyIdentifiers::LAK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LAK();
}

inline String CurrencyIdentifiers::LBP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LBP();
}

inline String CurrencyIdentifiers::LKR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LKR();
}

inline String CurrencyIdentifiers::LRD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LRD();
}

inline String CurrencyIdentifiers::LSL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LSL();
}

inline String CurrencyIdentifiers::LTL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LTL();
}

inline String CurrencyIdentifiers::LVL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LVL();
}

inline String CurrencyIdentifiers::LYD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LYD();
}

inline String CurrencyIdentifiers::MAD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MAD();
}

inline String CurrencyIdentifiers::MDL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MDL();
}

inline String CurrencyIdentifiers::MGA()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MGA();
}

inline String CurrencyIdentifiers::MKD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MKD();
}

inline String CurrencyIdentifiers::MMK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MMK();
}

inline String CurrencyIdentifiers::MNT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MNT();
}

inline String CurrencyIdentifiers::MOP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MOP();
}

inline String CurrencyIdentifiers::MRO()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MRO();
}

inline String CurrencyIdentifiers::MUR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MUR();
}

inline String CurrencyIdentifiers::MVR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MVR();
}

inline String CurrencyIdentifiers::MWK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MWK();
}

inline String CurrencyIdentifiers::MXN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MXN();
}

inline String CurrencyIdentifiers::MYR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MYR();
}

inline String CurrencyIdentifiers::MZN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MZN();
}

inline String CurrencyIdentifiers::NAD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NAD();
}

inline String CurrencyIdentifiers::NGN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NGN();
}

inline String CurrencyIdentifiers::NIO()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NIO();
}

inline String CurrencyIdentifiers::NOK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NOK();
}

inline String CurrencyIdentifiers::NPR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NPR();
}

inline String CurrencyIdentifiers::NZD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NZD();
}

inline String CurrencyIdentifiers::OMR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().OMR();
}

inline String CurrencyIdentifiers::PAB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PAB();
}

inline String CurrencyIdentifiers::PEN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PEN();
}

inline String CurrencyIdentifiers::PGK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PGK();
}

inline String CurrencyIdentifiers::PHP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PHP();
}

inline String CurrencyIdentifiers::PKR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PKR();
}

inline String CurrencyIdentifiers::PLN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PLN();
}

inline String CurrencyIdentifiers::PYG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PYG();
}

inline String CurrencyIdentifiers::QAR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().QAR();
}

inline String CurrencyIdentifiers::RON()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RON();
}

inline String CurrencyIdentifiers::RSD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RSD();
}

inline String CurrencyIdentifiers::RUB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RUB();
}

inline String CurrencyIdentifiers::RWF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RWF();
}

inline String CurrencyIdentifiers::SAR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SAR();
}

inline String CurrencyIdentifiers::SBD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SBD();
}

inline String CurrencyIdentifiers::SCR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SCR();
}

inline String CurrencyIdentifiers::SDG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SDG();
}

inline String CurrencyIdentifiers::SEK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SEK();
}

inline String CurrencyIdentifiers::SGD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SGD();
}

inline String CurrencyIdentifiers::SHP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SHP();
}

inline String CurrencyIdentifiers::SLL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SLL();
}

inline String CurrencyIdentifiers::SOS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SOS();
}

inline String CurrencyIdentifiers::SRD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SRD();
}

inline String CurrencyIdentifiers::STD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().STD();
}

inline String CurrencyIdentifiers::SYP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SYP();
}

inline String CurrencyIdentifiers::SZL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SZL();
}

inline String CurrencyIdentifiers::THB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().THB();
}

inline String CurrencyIdentifiers::TJS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TJS();
}

inline String CurrencyIdentifiers::TMT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TMT();
}

inline String CurrencyIdentifiers::TND()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TND();
}

inline String CurrencyIdentifiers::TOP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TOP();
}

inline String CurrencyIdentifiers::TRY()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TRY();
}

inline String CurrencyIdentifiers::TTD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TTD();
}

inline String CurrencyIdentifiers::TWD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TWD();
}

inline String CurrencyIdentifiers::TZS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TZS();
}

inline String CurrencyIdentifiers::UAH()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UAH();
}

inline String CurrencyIdentifiers::UGX()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UGX();
}

inline String CurrencyIdentifiers::USD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().USD();
}

inline String CurrencyIdentifiers::UYU()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UYU();
}

inline String CurrencyIdentifiers::UZS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UZS();
}

inline String CurrencyIdentifiers::VEF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().VEF();
}

inline String CurrencyIdentifiers::VND()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().VND();
}

inline String CurrencyIdentifiers::VUV()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().VUV();
}

inline String CurrencyIdentifiers::WST()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().WST();
}

inline String CurrencyIdentifiers::XAF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XAF();
}

inline String CurrencyIdentifiers::XCD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XCD();
}

inline String CurrencyIdentifiers::XOF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XOF();
}

inline String CurrencyIdentifiers::XPF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XPF();
}

inline String CurrencyIdentifiers::XXX()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XXX();
}

inline String CurrencyIdentifiers::YER()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().YER();
}

inline String CurrencyIdentifiers::ZAR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ZAR();
}

inline String CurrencyIdentifiers::ZMW()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ZMW();
}

inline String CurrencyIdentifiers::ZWL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ZWL();
}

inline GeographicRegion::GeographicRegion() :
	Windows::Globalization::IGeographicRegion(ActivateInstance<GeographicRegion>())
{}

inline GeographicRegion::GeographicRegion(String const & geographicRegionCode) :
	Windows::Globalization::IGeographicRegion(GetActivationFactory<GeographicRegion, IGeographicRegionFactory>().CreateGeographicRegion(geographicRegionCode))
{}

template <unsigned S0> GeographicRegion::GeographicRegion(wchar_t const (&geographicRegionCode)[S0]) :
	Windows::Globalization::IGeographicRegion(GetActivationFactory<GeographicRegion, IGeographicRegionFactory>().CreateGeographicRegion(geographicRegionCode))
{}

inline bool GeographicRegion::IsSupported(String const & geographicRegionCode)
{
	return GetActivationFactory<GeographicRegion, IGeographicRegionStatics>().IsSupported(geographicRegionCode);
}

template <unsigned S0> bool GeographicRegion::IsSupported(wchar_t const (&geographicRegionCode)[S0])
{
	return GetActivationFactory<GeographicRegion, IGeographicRegionStatics>().IsSupported(geographicRegionCode);
}

inline Language::Language(String const & languageTag) :
	Windows::Globalization::ILanguage(GetActivationFactory<Language, ILanguageFactory>().CreateLanguage(languageTag))
{}

template <unsigned S0> Language::Language(wchar_t const (&languageTag)[S0]) :
	Windows::Globalization::ILanguage(GetActivationFactory<Language, ILanguageFactory>().CreateLanguage(languageTag))
{}

inline bool Language::IsWellFormed(String const & languageTag)
{
	return GetActivationFactory<Language, ILanguageStatics>().IsWellFormed(languageTag);
}

template <unsigned S0> bool Language::IsWellFormed(wchar_t const (&languageTag)[S0])
{
	return GetActivationFactory<Language, ILanguageStatics>().IsWellFormed(languageTag);
}

inline String Language::CurrentInputMethodLanguageTag()
{
	return GetActivationFactory<Language, ILanguageStatics>().CurrentInputMethodLanguageTag();
}

inline Calendar::Calendar() :
	Windows::Globalization::ICalendar(ActivateInstance<Calendar>())
{}

inline Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages) :
	Windows::Globalization::ICalendar(GetActivationFactory<Calendar, ICalendarFactory>().CreateCalendarDefaultCalendarAndClock(languages))
{}

inline Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock) :
	Windows::Globalization::ICalendar(GetActivationFactory<Calendar, ICalendarFactory>().CreateCalendar(languages, calendar, clock))
{}

template <unsigned S0, unsigned S1> Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1]) :
	Windows::Globalization::ICalendar(GetActivationFactory<Calendar, ICalendarFactory>().CreateCalendar(languages, calendar, clock))
{}

inline Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, String const & calendar, String const & clock, String const & timeZoneId) :
	Windows::Globalization::ICalendar(GetActivationFactory<Calendar, ICalendarFactory2>().CreateCalendarWithTimeZone(languages, calendar, clock, timeZoneId))
{}

template <unsigned S0, unsigned S1, unsigned S2> Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&calendar)[S0], wchar_t const (&clock)[S1], wchar_t const (&timeZoneId)[S2]) :
	Windows::Globalization::ICalendar(GetActivationFactory<Calendar, ICalendarFactory2>().CreateCalendarWithTimeZone(languages, calendar, clock, timeZoneId))
{}

inline String ApplicationLanguages::PrimaryLanguageOverride()
{
	return GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().PrimaryLanguageOverride();
}

inline void ApplicationLanguages::PrimaryLanguageOverride(String const & value)
{
	GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().PrimaryLanguageOverride(value);
}

template <unsigned S0> void ApplicationLanguages::PrimaryLanguageOverride(wchar_t const (&value)[S0])
{
	GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().PrimaryLanguageOverride(value);
}

inline Windows::Foundation::Collections::IVectorView<String> ApplicationLanguages::Languages()
{
	return GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().Languages();
}

inline Windows::Foundation::Collections::IVectorView<String> ApplicationLanguages::ManifestLanguages()
{
	return GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().ManifestLanguages();
}

}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Collation {

inline CharacterGroupings::CharacterGroupings() :
	Windows::Globalization::Collation::ICharacterGroupings(ActivateInstance<CharacterGroupings>())
{}

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

inline DateTimeFormatter::DateTimeFormatter(String const & formatTemplate) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatter(formatTemplate))
{}

template <unsigned S0> DateTimeFormatter::DateTimeFormatter(wchar_t const (&formatTemplate)[S0]) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatter(formatTemplate))
{}

inline DateTimeFormatter::DateTimeFormatter(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterLanguages(formatTemplate, languages))
{}

template <unsigned S0> DateTimeFormatter::DateTimeFormatter(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterLanguages(formatTemplate, languages))
{}

inline DateTimeFormatter::DateTimeFormatter(String const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterContext(formatTemplate, languages, geographicRegion, calendar, clock))
{}

template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> DateTimeFormatter::DateTimeFormatter(wchar_t const (&formatTemplate)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1], wchar_t const (&calendar)[S2], wchar_t const (&clock)[S3]) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterContext(formatTemplate, languages, geographicRegion, calendar, clock))
{}

inline DateTimeFormatter::DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterDate(yearFormat, monthFormat, dayFormat, dayOfWeekFormat))
{}

inline DateTimeFormatter::DateTimeFormatter(Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterTime(hourFormat, minuteFormat, secondFormat))
{}

inline DateTimeFormatter::DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterDateTimeLanguages(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, languages))
{}

inline DateTimeFormatter::DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion, String const & calendar, String const & clock) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterDateTimeContext(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, languages, geographicRegion, calendar, clock))
{}

template <unsigned S0, unsigned S1, unsigned S2> DateTimeFormatter::DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0], wchar_t const (&calendar)[S1], wchar_t const (&clock)[S2]) :
	Windows::Globalization::DateTimeFormatting::IDateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterDateTimeContext(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, languages, geographicRegion, calendar, clock))
{}

inline Windows::Globalization::DateTimeFormatting::DateTimeFormatter DateTimeFormatter::LongDate()
{
	return GetActivationFactory<DateTimeFormatter, IDateTimeFormatterStatics>().LongDate();
}

inline Windows::Globalization::DateTimeFormatting::DateTimeFormatter DateTimeFormatter::LongTime()
{
	return GetActivationFactory<DateTimeFormatter, IDateTimeFormatterStatics>().LongTime();
}

inline Windows::Globalization::DateTimeFormatting::DateTimeFormatter DateTimeFormatter::ShortDate()
{
	return GetActivationFactory<DateTimeFormatter, IDateTimeFormatterStatics>().ShortDate();
}

inline Windows::Globalization::DateTimeFormatting::DateTimeFormatter DateTimeFormatter::ShortTime()
{
	return GetActivationFactory<DateTimeFormatter, IDateTimeFormatterStatics>().ShortTime();
}

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace Fonts {

inline LanguageFontGroup::LanguageFontGroup(String const & languageTag) :
	Windows::Globalization::Fonts::ILanguageFontGroup(GetActivationFactory<LanguageFontGroup, ILanguageFontGroupFactory>().CreateLanguageFontGroup(languageTag))
{}

template <unsigned S0> LanguageFontGroup::LanguageFontGroup(wchar_t const (&languageTag)[S0]) :
	Windows::Globalization::Fonts::ILanguageFontGroup(GetActivationFactory<LanguageFontGroup, ILanguageFontGroupFactory>().CreateLanguageFontGroup(languageTag))
{}

}}}}

namespace Modern { namespace Windows { namespace Globalization { namespace NumberFormatting {

inline SignificantDigitsNumberRounder::SignificantDigitsNumberRounder() :
	Windows::Globalization::NumberFormatting::INumberRounder(ActivateInstance<SignificantDigitsNumberRounder>())
{}

inline IncrementNumberRounder::IncrementNumberRounder() :
	Windows::Globalization::NumberFormatting::INumberRounder(ActivateInstance<IncrementNumberRounder>())
{}

inline DecimalFormatter::DecimalFormatter() :
	Windows::Globalization::NumberFormatting::INumberFormatter(ActivateInstance<DecimalFormatter>())
{}

inline DecimalFormatter::DecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) :
	Windows::Globalization::NumberFormatting::INumberFormatter(GetActivationFactory<DecimalFormatter, IDecimalFormatterFactory>().CreateDecimalFormatter(languages, geographicRegion))
{}

template <unsigned S0> DecimalFormatter::DecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) :
	Windows::Globalization::NumberFormatting::INumberFormatter(GetActivationFactory<DecimalFormatter, IDecimalFormatterFactory>().CreateDecimalFormatter(languages, geographicRegion))
{}

inline PercentFormatter::PercentFormatter() :
	Windows::Globalization::NumberFormatting::INumberFormatter(ActivateInstance<PercentFormatter>())
{}

inline PercentFormatter::PercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) :
	Windows::Globalization::NumberFormatting::INumberFormatter(GetActivationFactory<PercentFormatter, IPercentFormatterFactory>().CreatePercentFormatter(languages, geographicRegion))
{}

template <unsigned S0> PercentFormatter::PercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) :
	Windows::Globalization::NumberFormatting::INumberFormatter(GetActivationFactory<PercentFormatter, IPercentFormatterFactory>().CreatePercentFormatter(languages, geographicRegion))
{}

inline PermilleFormatter::PermilleFormatter() :
	Windows::Globalization::NumberFormatting::INumberFormatter(ActivateInstance<PermilleFormatter>())
{}

inline PermilleFormatter::PermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) :
	Windows::Globalization::NumberFormatting::INumberFormatter(GetActivationFactory<PermilleFormatter, IPermilleFormatterFactory>().CreatePermilleFormatter(languages, geographicRegion))
{}

template <unsigned S0> PermilleFormatter::PermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S0]) :
	Windows::Globalization::NumberFormatting::INumberFormatter(GetActivationFactory<PermilleFormatter, IPermilleFormatterFactory>().CreatePermilleFormatter(languages, geographicRegion))
{}

inline CurrencyFormatter::CurrencyFormatter(String const & currencyCode) :
	Windows::Globalization::NumberFormatting::ICurrencyFormatter(GetActivationFactory<CurrencyFormatter, ICurrencyFormatterFactory>().CreateCurrencyFormatterCode(currencyCode))
{}

template <unsigned S0> CurrencyFormatter::CurrencyFormatter(wchar_t const (&currencyCode)[S0]) :
	Windows::Globalization::NumberFormatting::ICurrencyFormatter(GetActivationFactory<CurrencyFormatter, ICurrencyFormatterFactory>().CreateCurrencyFormatterCode(currencyCode))
{}

inline CurrencyFormatter::CurrencyFormatter(String const & currencyCode, Windows::Foundation::Collections::IIterable<String> const & languages, String const & geographicRegion) :
	Windows::Globalization::NumberFormatting::ICurrencyFormatter(GetActivationFactory<CurrencyFormatter, ICurrencyFormatterFactory>().CreateCurrencyFormatterCodeContext(currencyCode, languages, geographicRegion))
{}

template <unsigned S0, unsigned S1> CurrencyFormatter::CurrencyFormatter(wchar_t const (&currencyCode)[S0], Windows::Foundation::Collections::IIterable<String> const & languages, wchar_t const (&geographicRegion)[S1]) :
	Windows::Globalization::NumberFormatting::ICurrencyFormatter(GetActivationFactory<CurrencyFormatter, ICurrencyFormatterFactory>().CreateCurrencyFormatterCodeContext(currencyCode, languages, geographicRegion))
{}

inline NumeralSystemTranslator::NumeralSystemTranslator() :
	Windows::Globalization::NumberFormatting::INumeralSystemTranslator(ActivateInstance<NumeralSystemTranslator>())
{}

inline NumeralSystemTranslator::NumeralSystemTranslator(Windows::Foundation::Collections::IIterable<String> const & languages) :
	Windows::Globalization::NumberFormatting::INumeralSystemTranslator(GetActivationFactory<NumeralSystemTranslator, INumeralSystemTranslatorFactory>().Create(languages))
{}

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Display {

inline Windows::Graphics::Display::DisplayInformation DisplayInformation::GetForCurrentView()
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().GetForCurrentView();
}

inline Windows::Graphics::Display::DisplayOrientations DisplayInformation::AutoRotationPreferences()
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().AutoRotationPreferences();
}

inline void DisplayInformation::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value)
{
	GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().AutoRotationPreferences(value);
}

inline EventRegistrationToken DisplayInformation::DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler)
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().DisplayContentsInvalidated(handler);
}

template <typename F> EventRegistrationToken DisplayInformation::DisplayContentsInvalidated(F handler)
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().DisplayContentsInvalidated(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

inline void DisplayInformation::DisplayContentsInvalidated(EventRegistrationToken const token)
{
	GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().DisplayContentsInvalidated(token);
}

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Imaging {

inline BitmapTransform::BitmapTransform() :
	Windows::Graphics::Imaging::IBitmapTransform(ActivateInstance<BitmapTransform>())
{}

inline BitmapTypedValue::BitmapTypedValue(IInspectable const & value, Windows::Foundation::PropertyType const type) :
	Windows::Graphics::Imaging::IBitmapTypedValue(GetActivationFactory<BitmapTypedValue, IBitmapTypedValueFactory>().Create(value, type))
{}

inline BitmapPropertySet::BitmapPropertySet() :
	Windows::Foundation::Collections::IMap<String, Windows::Graphics::Imaging::BitmapTypedValue>(ActivateInstance<BitmapPropertySet>())
{}

inline GUID BitmapDecoder::BmpDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().BmpDecoderId();
}

inline GUID BitmapDecoder::JpegDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().JpegDecoderId();
}

inline GUID BitmapDecoder::PngDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().PngDecoderId();
}

inline GUID BitmapDecoder::TiffDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().TiffDecoderId();
}

inline GUID BitmapDecoder::GifDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().GifDecoderId();
}

inline GUID BitmapDecoder::JpegXRDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().JpegXRDecoderId();
}

inline GUID BitmapDecoder::IcoDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().IcoDecoderId();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> BitmapDecoder::GetDecoderInformationEnumerator()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().GetDecoderInformationEnumerator();
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> BitmapDecoder::CreateAsync(Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().CreateAsync(stream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> BitmapDecoder::CreateAsync(GUID const decoderId, Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().CreateAsync(decoderId, stream);
}

inline GUID BitmapEncoder::BmpEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().BmpEncoderId();
}

inline GUID BitmapEncoder::JpegEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().JpegEncoderId();
}

inline GUID BitmapEncoder::PngEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().PngEncoderId();
}

inline GUID BitmapEncoder::TiffEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().TiffEncoderId();
}

inline GUID BitmapEncoder::GifEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().GifEncoderId();
}

inline GUID BitmapEncoder::JpegXREncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().JpegXREncoderId();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> BitmapEncoder::GetEncoderInformationEnumerator()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().GetEncoderInformationEnumerator();
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> BitmapEncoder::CreateAsync(GUID const encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().CreateAsync(encoderId, stream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> BitmapEncoder::CreateAsync(GUID const encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions)
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().CreateAsync(encoderId, stream, encodingOptions);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> BitmapEncoder::CreateForTranscodingAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder)
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().CreateForTranscodingAsync(stream, bitmapDecoder);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> BitmapEncoder::CreateForInPlacePropertyEncodingAsync(Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder)
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().CreateForInPlacePropertyEncodingAsync(bitmapDecoder);
}

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing {

inline String StandardPrintTaskOptions::MediaSize()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().MediaSize();
}

inline String StandardPrintTaskOptions::MediaType()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().MediaType();
}

inline String StandardPrintTaskOptions::Orientation()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Orientation();
}

inline String StandardPrintTaskOptions::PrintQuality()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().PrintQuality();
}

inline String StandardPrintTaskOptions::ColorMode()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().ColorMode();
}

inline String StandardPrintTaskOptions::Duplex()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Duplex();
}

inline String StandardPrintTaskOptions::Collation()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Collation();
}

inline String StandardPrintTaskOptions::Staple()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Staple();
}

inline String StandardPrintTaskOptions::HolePunch()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().HolePunch();
}

inline String StandardPrintTaskOptions::Binding()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Binding();
}

inline String StandardPrintTaskOptions::Copies()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Copies();
}

inline String StandardPrintTaskOptions::NUp()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().NUp();
}

inline String StandardPrintTaskOptions::InputBin()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().InputBin();
}

inline Windows::Graphics::Printing::PrintManager PrintManager::GetForCurrentView()
{
	return GetActivationFactory<PrintManager, IPrintManagerStatic>().GetForCurrentView();
}

inline Windows::Foundation::IAsyncOperation<bool> PrintManager::ShowPrintUIAsync()
{
	return GetActivationFactory<PrintManager, IPrintManagerStatic>().ShowPrintUIAsync();
}

}}}}

namespace Modern { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

inline Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails PrintTaskOptionDetails::GetFromPrintTaskOptions(Windows::Graphics::Printing::PrintTaskOptions const & printTaskOptions)
{
	return GetActivationFactory<PrintTaskOptionDetails, IPrintTaskOptionDetailsStatic>().GetFromPrintTaskOptions(printTaskOptions);
}

}}}}}

namespace Modern { namespace Windows { namespace Management { namespace Core {

inline Windows::Storage::ApplicationData ApplicationDataManager::CreateForPackageFamily(String const & packageFamilyName)
{
	return GetActivationFactory<ApplicationDataManager, IApplicationDataManagerStatics>().CreateForPackageFamily(packageFamilyName);
}

template <unsigned S0> Windows::Storage::ApplicationData ApplicationDataManager::CreateForPackageFamily(wchar_t const (&packageFamilyName)[S0])
{
	return GetActivationFactory<ApplicationDataManager, IApplicationDataManagerStatics>().CreateForPackageFamily(packageFamilyName);
}

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Deployment {

inline PackageManager::PackageManager() :
	Windows::Management::Deployment::IPackageManager(ActivateInstance<PackageManager>())
{}

}}}}

namespace Modern { namespace Windows { namespace Management { namespace Workplace {

inline bool WorkplaceSettings::IsMicrosoftAccountOptional()
{
	return GetActivationFactory<WorkplaceSettings, IWorkplaceSettingsStatics>().IsMicrosoftAccountOptional();
}

}}}}

namespace Modern { namespace Windows { namespace Media {

inline String MediaMarkerTypes::Bookmark()
{
	return GetActivationFactory<MediaMarkerTypes, IMediaMarkerTypesStatics>().Bookmark();
}

inline Windows::Media::SystemMediaTransportControls SystemMediaTransportControls::GetForCurrentView()
{
	return GetActivationFactory<SystemMediaTransportControls, ISystemMediaTransportControlsStatics>().GetForCurrentView();
}

inline MediaExtensionManager::MediaExtensionManager() :
	Windows::Media::IMediaExtensionManager(ActivateInstance<MediaExtensionManager>())
{}

inline String VideoEffects::VideoStabilization()
{
	return GetActivationFactory<VideoEffects, IVideoEffectsStatics>().VideoStabilization();
}

}}}

namespace Modern { namespace Windows { namespace Media { namespace Capture {

inline CameraCaptureUI::CameraCaptureUI() :
	Windows::Media::Capture::ICameraCaptureUI(ActivateInstance<CameraCaptureUI>())
{}

inline void CameraOptionsUI::Show(Windows::Media::Capture::MediaCapture const & mediaCapture)
{
	GetActivationFactory<CameraOptionsUI, ICameraOptionsUIStatics>().Show(mediaCapture);
}

inline MediaCapture::MediaCapture() :
	Windows::Media::Capture::IMediaCapture(ActivateInstance<MediaCapture>())
{}

inline MediaCaptureInitializationSettings::MediaCaptureInitializationSettings() :
	Windows::Media::Capture::IMediaCaptureInitializationSettings(ActivateInstance<MediaCaptureInitializationSettings>())
{}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace ContentRestrictions {

inline RatedContentDescription::RatedContentDescription(String const & id, String const & title, Windows::Media::ContentRestrictions::RatedContentCategory const category) :
	Windows::Media::ContentRestrictions::IRatedContentDescription(GetActivationFactory<RatedContentDescription, IRatedContentDescriptionFactory>().Create(id, title, category))
{}

template <unsigned S0, unsigned S1> RatedContentDescription::RatedContentDescription(wchar_t const (&id)[S0], wchar_t const (&title)[S1], Windows::Media::ContentRestrictions::RatedContentCategory const category) :
	Windows::Media::ContentRestrictions::IRatedContentDescription(GetActivationFactory<RatedContentDescription, IRatedContentDescriptionFactory>().Create(id, title, category))
{}

inline RatedContentRestrictions::RatedContentRestrictions() :
	Windows::Media::ContentRestrictions::IRatedContentRestrictions(ActivateInstance<RatedContentRestrictions>())
{}

inline RatedContentRestrictions::RatedContentRestrictions(unsigned const maxAgeRating) :
	Windows::Media::ContentRestrictions::IRatedContentRestrictions(GetActivationFactory<RatedContentRestrictions, IRatedContentRestrictionsFactory>().CreateWithMaxAgeRating(maxAgeRating))
{}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Core {

inline AudioStreamDescriptor::AudioStreamDescriptor(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) :
	Windows::Media::Core::IAudioStreamDescriptor(GetActivationFactory<AudioStreamDescriptor, IAudioStreamDescriptorFactory>().Create(encodingProperties))
{}

inline VideoStreamDescriptor::VideoStreamDescriptor(Windows::Media::MediaProperties::VideoEncodingProperties const & encodingProperties) :
	Windows::Media::Core::IVideoStreamDescriptor(GetActivationFactory<VideoStreamDescriptor, IVideoStreamDescriptorFactory>().Create(encodingProperties))
{}

inline MediaStreamSource::MediaStreamSource(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) :
	Windows::Media::Core::IMediaStreamSource(GetActivationFactory<MediaStreamSource, IMediaStreamSourceFactory>().CreateFromDescriptor(descriptor))
{}

inline MediaStreamSource::MediaStreamSource(Windows::Media::Core::IMediaStreamDescriptor const & descriptor, Windows::Media::Core::IMediaStreamDescriptor const & descriptor2) :
	Windows::Media::Core::IMediaStreamSource(GetActivationFactory<MediaStreamSource, IMediaStreamSourceFactory>().CreateFromDescriptors(descriptor, descriptor2))
{}

inline Windows::Media::Core::MediaStreamSample MediaStreamSample::CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer, Windows::Foundation::TimeSpan const & timestamp)
{
	return GetActivationFactory<MediaStreamSample, IMediaStreamSampleStatics>().CreateFromBuffer(buffer, timestamp);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> MediaStreamSample::CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, unsigned const count, Windows::Foundation::TimeSpan const & timestamp)
{
	return GetActivationFactory<MediaStreamSample, IMediaStreamSampleStatics>().CreateFromStreamAsync(stream, count, timestamp);
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Devices {

inline Windows::Media::Devices::CallControl CallControl::GetDefault()
{
	return GetActivationFactory<CallControl, ICallControlStatics>().GetDefault();
}

inline Windows::Media::Devices::CallControl CallControl::FromId(String const & deviceId)
{
	return GetActivationFactory<CallControl, ICallControlStatics>().FromId(deviceId);
}

template <unsigned S0> Windows::Media::Devices::CallControl CallControl::FromId(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<CallControl, ICallControlStatics>().FromId(deviceId);
}

inline String MediaDevice::GetAudioCaptureSelector()
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetAudioCaptureSelector();
}

inline String MediaDevice::GetAudioRenderSelector()
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetAudioRenderSelector();
}

inline String MediaDevice::GetVideoCaptureSelector()
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetVideoCaptureSelector();
}

inline String MediaDevice::GetDefaultAudioCaptureId(Windows::Media::Devices::AudioDeviceRole const role)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetDefaultAudioCaptureId(role);
}

inline String MediaDevice::GetDefaultAudioRenderId(Windows::Media::Devices::AudioDeviceRole const role)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetDefaultAudioRenderId(role);
}

inline EventRegistrationToken MediaDevice::DefaultAudioCaptureDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs> const & handler)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioCaptureDeviceChanged(handler);
}

template <typename F> EventRegistrationToken MediaDevice::DefaultAudioCaptureDeviceChanged(F handler)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioCaptureDeviceChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs>(handler));
}

inline void MediaDevice::DefaultAudioCaptureDeviceChanged(EventRegistrationToken const cookie)
{
	GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioCaptureDeviceChanged(cookie);
}

inline EventRegistrationToken MediaDevice::DefaultAudioRenderDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs> const & handler)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioRenderDeviceChanged(handler);
}

template <typename F> EventRegistrationToken MediaDevice::DefaultAudioRenderDeviceChanged(F handler)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioRenderDeviceChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs>(handler));
}

inline void MediaDevice::DefaultAudioRenderDeviceChanged(EventRegistrationToken const cookie)
{
	GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioRenderDeviceChanged(cookie);
}

inline RegionOfInterest::RegionOfInterest() :
	Windows::Media::Devices::IRegionOfInterest(ActivateInstance<RegionOfInterest>())
{}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Effects {

inline Windows::Media::Effects::AudioRenderEffectsManager AudioEffectsManager::CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory const category)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioRenderEffectsManager(deviceId, category);
}

template <unsigned S0> Windows::Media::Effects::AudioRenderEffectsManager AudioEffectsManager::CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory const category)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioRenderEffectsManager(deviceId, category);
}

inline Windows::Media::Effects::AudioRenderEffectsManager AudioEffectsManager::CreateAudioRenderEffectsManager(String const & deviceId, Windows::Media::Render::AudioRenderCategory const category, Windows::Media::AudioProcessing const mode)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioRenderEffectsManager(deviceId, category, mode);
}

template <unsigned S0> Windows::Media::Effects::AudioRenderEffectsManager AudioEffectsManager::CreateAudioRenderEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Render::AudioRenderCategory const category, Windows::Media::AudioProcessing const mode)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioRenderEffectsManager(deviceId, category, mode);
}

inline Windows::Media::Effects::AudioCaptureEffectsManager AudioEffectsManager::CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory const category)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioCaptureEffectsManager(deviceId, category);
}

template <unsigned S0> Windows::Media::Effects::AudioCaptureEffectsManager AudioEffectsManager::CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory const category)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioCaptureEffectsManager(deviceId, category);
}

inline Windows::Media::Effects::AudioCaptureEffectsManager AudioEffectsManager::CreateAudioCaptureEffectsManager(String const & deviceId, Windows::Media::Capture::MediaCategory const category, Windows::Media::AudioProcessing const mode)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioCaptureEffectsManager(deviceId, category, mode);
}

template <unsigned S0> Windows::Media::Effects::AudioCaptureEffectsManager AudioEffectsManager::CreateAudioCaptureEffectsManager(wchar_t const (&deviceId)[S0], Windows::Media::Capture::MediaCategory const category, Windows::Media::AudioProcessing const mode)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioCaptureEffectsManager(deviceId, category, mode);
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace MediaProperties {

inline MediaPropertySet::MediaPropertySet() :
	Windows::Foundation::Collections::IMap<GUID, IInspectable>(ActivateInstance<MediaPropertySet>())
{}

inline AudioEncodingProperties::AudioEncodingProperties() :
	Windows::Media::MediaProperties::IAudioEncodingProperties(ActivateInstance<AudioEncodingProperties>())
{}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreateAac(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreateAac(sampleRate, channelCount, bitrate);
}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreateAacAdts(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreateAacAdts(sampleRate, channelCount, bitrate);
}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreateMp3(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreateMp3(sampleRate, channelCount, bitrate);
}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreatePcm(unsigned const sampleRate, unsigned const channelCount, unsigned const bitsPerSample)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreatePcm(sampleRate, channelCount, bitsPerSample);
}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreateWma(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreateWma(sampleRate, channelCount, bitrate);
}

inline String MediaEncodingSubtypes::Aac()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Aac();
}

inline String MediaEncodingSubtypes::AacAdts()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().AacAdts();
}

inline String MediaEncodingSubtypes::Ac3()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Ac3();
}

inline String MediaEncodingSubtypes::AmrNb()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().AmrNb();
}

inline String MediaEncodingSubtypes::AmrWb()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().AmrWb();
}

inline String MediaEncodingSubtypes::Argb32()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Argb32();
}

inline String MediaEncodingSubtypes::Asf()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Asf();
}

inline String MediaEncodingSubtypes::Avi()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Avi();
}

inline String MediaEncodingSubtypes::Bgra8()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Bgra8();
}

inline String MediaEncodingSubtypes::Bmp()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Bmp();
}

inline String MediaEncodingSubtypes::Eac3()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Eac3();
}

inline String MediaEncodingSubtypes::Float()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Float();
}

inline String MediaEncodingSubtypes::Gif()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Gif();
}

inline String MediaEncodingSubtypes::H263()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().H263();
}

inline String MediaEncodingSubtypes::H264()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().H264();
}

inline String MediaEncodingSubtypes::H264Es()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().H264Es();
}

inline String MediaEncodingSubtypes::Hevc()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Hevc();
}

inline String MediaEncodingSubtypes::HevcEs()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().HevcEs();
}

inline String MediaEncodingSubtypes::Iyuv()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Iyuv();
}

inline String MediaEncodingSubtypes::Jpeg()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Jpeg();
}

inline String MediaEncodingSubtypes::JpegXr()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().JpegXr();
}

inline String MediaEncodingSubtypes::Mjpg()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mjpg();
}

inline String MediaEncodingSubtypes::Mpeg()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mpeg();
}

inline String MediaEncodingSubtypes::Mpeg1()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mpeg1();
}

inline String MediaEncodingSubtypes::Mpeg2()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mpeg2();
}

inline String MediaEncodingSubtypes::Mp3()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mp3();
}

inline String MediaEncodingSubtypes::Mpeg4()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mpeg4();
}

inline String MediaEncodingSubtypes::Nv12()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Nv12();
}

inline String MediaEncodingSubtypes::Pcm()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Pcm();
}

inline String MediaEncodingSubtypes::Png()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Png();
}

inline String MediaEncodingSubtypes::Rgb24()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Rgb24();
}

inline String MediaEncodingSubtypes::Rgb32()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Rgb32();
}

inline String MediaEncodingSubtypes::Tiff()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Tiff();
}

inline String MediaEncodingSubtypes::Wave()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wave();
}

inline String MediaEncodingSubtypes::Wma8()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wma8();
}

inline String MediaEncodingSubtypes::Wma9()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wma9();
}

inline String MediaEncodingSubtypes::Wmv3()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wmv3();
}

inline String MediaEncodingSubtypes::Wvc1()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wvc1();
}

inline String MediaEncodingSubtypes::Yuy2()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Yuy2();
}

inline String MediaEncodingSubtypes::Yv12()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Yv12();
}

inline int H264ProfileIds::ConstrainedBaseline()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().ConstrainedBaseline();
}

inline int H264ProfileIds::Baseline()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().Baseline();
}

inline int H264ProfileIds::Extended()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().Extended();
}

inline int H264ProfileIds::Main()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().Main();
}

inline int H264ProfileIds::High()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().High();
}

inline int H264ProfileIds::High10()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().High10();
}

inline int H264ProfileIds::High422()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().High422();
}

inline int H264ProfileIds::High444()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().High444();
}

inline int H264ProfileIds::StereoHigh()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().StereoHigh();
}

inline int H264ProfileIds::MultiviewHigh()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().MultiviewHigh();
}

inline int Mpeg2ProfileIds::Simple()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().Simple();
}

inline int Mpeg2ProfileIds::Main()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().Main();
}

inline int Mpeg2ProfileIds::SignalNoiseRatioScalable()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().SignalNoiseRatioScalable();
}

inline int Mpeg2ProfileIds::SpatiallyScalable()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().SpatiallyScalable();
}

inline int Mpeg2ProfileIds::High()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().High();
}

inline VideoEncodingProperties::VideoEncodingProperties() :
	Windows::Media::MediaProperties::IVideoEncodingProperties(ActivateInstance<VideoEncodingProperties>())
{}

inline Windows::Media::MediaProperties::VideoEncodingProperties VideoEncodingProperties::CreateH264()
{
	return GetActivationFactory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>().CreateH264();
}

inline Windows::Media::MediaProperties::VideoEncodingProperties VideoEncodingProperties::CreateMpeg2()
{
	return GetActivationFactory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>().CreateMpeg2();
}

inline Windows::Media::MediaProperties::VideoEncodingProperties VideoEncodingProperties::CreateUncompressed(String const & subtype, unsigned const width, unsigned const height)
{
	return GetActivationFactory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>().CreateUncompressed(subtype, width, height);
}

template <unsigned S0> Windows::Media::MediaProperties::VideoEncodingProperties VideoEncodingProperties::CreateUncompressed(wchar_t const (&subtype)[S0], unsigned const width, unsigned const height)
{
	return GetActivationFactory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>().CreateUncompressed(subtype, width, height);
}

inline ImageEncodingProperties::ImageEncodingProperties() :
	Windows::Media::MediaProperties::IImageEncodingProperties(ActivateInstance<ImageEncodingProperties>())
{}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreateJpeg()
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics>().CreateJpeg();
}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreatePng()
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics>().CreatePng();
}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreateJpegXR()
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics>().CreateJpegXR();
}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreateUncompressed(Windows::Media::MediaProperties::MediaPixelFormat const format)
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics2>().CreateUncompressed(format);
}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreateBmp()
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics2>().CreateBmp();
}

inline ContainerEncodingProperties::ContainerEncodingProperties() :
	Windows::Media::MediaProperties::IContainerEncodingProperties(ActivateInstance<ContainerEncodingProperties>())
{}

inline MediaEncodingProfile::MediaEncodingProfile() :
	Windows::Media::MediaProperties::IMediaEncodingProfile(ActivateInstance<MediaEncodingProfile>())
{}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateM4a(Windows::Media::MediaProperties::AudioEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateM4a(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateMp3(Windows::Media::MediaProperties::AudioEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateMp3(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateWma(Windows::Media::MediaProperties::AudioEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateWma(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateMp4(Windows::Media::MediaProperties::VideoEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateMp4(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateWmv(Windows::Media::MediaProperties::VideoEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateWmv(quality);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> MediaEncodingProfile::CreateFromFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateFromFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> MediaEncodingProfile::CreateFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateFromStreamAsync(stream);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateWav(Windows::Media::MediaProperties::AudioEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics2>().CreateWav(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateAvi(Windows::Media::MediaProperties::VideoEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics2>().CreateAvi(quality);
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace PlayTo {

inline PlayToReceiver::PlayToReceiver() :
	Windows::Media::PlayTo::IPlayToReceiver(ActivateInstance<PlayToReceiver>())
{}

inline Windows::Media::PlayTo::PlayToManager PlayToManager::GetForCurrentView()
{
	return GetActivationFactory<PlayToManager, IPlayToManagerStatics>().GetForCurrentView();
}

inline void PlayToManager::ShowPlayToUI()
{
	GetActivationFactory<PlayToManager, IPlayToManagerStatics>().ShowPlayToUI();
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Playlists {

inline Playlist::Playlist() :
	Windows::Media::Playlists::IPlaylist(ActivateInstance<Playlist>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> Playlist::LoadAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<Playlist, IPlaylistStatics>().LoadAsync(file);
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Protection {

inline MediaProtectionManager::MediaProtectionManager() :
	Windows::Media::Protection::IMediaProtectionManager(ActivateInstance<MediaProtectionManager>())
{}

inline Windows::Foundation::IAsyncOperationWithProgress<Modern::Windows::Media::Protection::RenewalStatus, unsigned> ComponentRenewal::RenewSystemComponentsAsync(Windows::Media::Protection::RevocationAndRenewalInformation const & information)
{
	return GetActivationFactory<ComponentRenewal, IComponentRenewalStatics>().RenewSystemComponentsAsync(information);
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace SpeechSynthesis {

inline SpeechSynthesizer::SpeechSynthesizer() :
	Windows::Media::SpeechSynthesis::ISpeechSynthesizer(ActivateInstance<SpeechSynthesizer>())
{}

inline Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> SpeechSynthesizer::AllVoices()
{
	return GetActivationFactory<SpeechSynthesizer, IInstalledVoicesStatic>().AllVoices();
}

inline Windows::Media::SpeechSynthesis::VoiceInformation SpeechSynthesizer::DefaultVoice()
{
	return GetActivationFactory<SpeechSynthesizer, IInstalledVoicesStatic>().DefaultVoice();
}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Streaming {

inline BasicDevice::BasicDevice() :
	Windows::Media::Streaming::IBasicDevice(ActivateInstance<BasicDevice>())
{}

inline ActiveBasicDevice::ActiveBasicDevice() :
	Windows::Media::Streaming::IActiveBasicDevice(ActivateInstance<ActiveBasicDevice>())
{}

inline DeviceController::DeviceController() :
	Windows::Media::Streaming::IDeviceController(ActivateInstance<DeviceController>())
{}

inline MediaRenderer::MediaRenderer() :
	Windows::Media::Streaming::IMediaRenderer(ActivateInstance<MediaRenderer>())
{}

}}}}

namespace Modern { namespace Windows { namespace Media { namespace Transcoding {

inline MediaTranscoder::MediaTranscoder() :
	Windows::Media::Transcoding::IMediaTranscoder(ActivateInstance<MediaTranscoder>())
{}

}}}}

namespace Modern { namespace Windows { namespace Networking {

inline EndpointPair::EndpointPair(Windows::Networking::HostName const & localHostName, String const & localServiceName, Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName) :
	Windows::Networking::IEndpointPair(GetActivationFactory<EndpointPair, IEndpointPairFactory>().CreateEndpointPair(localHostName, localServiceName, remoteHostName, remoteServiceName))
{}

template <unsigned S0, unsigned S1> EndpointPair::EndpointPair(Windows::Networking::HostName const & localHostName, wchar_t const (&localServiceName)[S0], Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S1]) :
	Windows::Networking::IEndpointPair(GetActivationFactory<EndpointPair, IEndpointPairFactory>().CreateEndpointPair(localHostName, localServiceName, remoteHostName, remoteServiceName))
{}

inline HostName::HostName(String const & hostName) :
	Windows::Networking::IHostName(GetActivationFactory<HostName, IHostNameFactory>().CreateHostName(hostName))
{}

template <unsigned S0> HostName::HostName(wchar_t const (&hostName)[S0]) :
	Windows::Networking::IHostName(GetActivationFactory<HostName, IHostNameFactory>().CreateHostName(hostName))
{}

inline int HostName::Compare(String const & value1, String const & value2)
{
	return GetActivationFactory<HostName, IHostNameStatics>().Compare(value1, value2);
}

template <unsigned S0, unsigned S1> int HostName::Compare(wchar_t const (&value1)[S0], wchar_t const (&value2)[S1])
{
	return GetActivationFactory<HostName, IHostNameStatics>().Compare(value1, value2);
}

}}}

namespace Modern { namespace Windows { namespace Networking { namespace BackgroundTransfer {

inline Windows::Networking::BackgroundTransfer::BackgroundTransferGroup BackgroundTransferGroup::CreateGroup(String const & name)
{
	return GetActivationFactory<BackgroundTransferGroup, IBackgroundTransferGroupStatics>().CreateGroup(name);
}

template <unsigned S0> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup BackgroundTransferGroup::CreateGroup(wchar_t const (&name)[S0])
{
	return GetActivationFactory<BackgroundTransferGroup, IBackgroundTransferGroupStatics>().CreateGroup(name);
}

inline BackgroundTransferContentPart::BackgroundTransferContentPart() :
	Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart(ActivateInstance<BackgroundTransferContentPart>())
{}

inline BackgroundTransferContentPart::BackgroundTransferContentPart(String const & name) :
	Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart(GetActivationFactory<BackgroundTransferContentPart, IBackgroundTransferContentPartFactory>().CreateWithName(name))
{}

template <unsigned S0> BackgroundTransferContentPart::BackgroundTransferContentPart(wchar_t const (&name)[S0]) :
	Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart(GetActivationFactory<BackgroundTransferContentPart, IBackgroundTransferContentPartFactory>().CreateWithName(name))
{}

inline BackgroundTransferContentPart::BackgroundTransferContentPart(String const & name, String const & fileName) :
	Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart(GetActivationFactory<BackgroundTransferContentPart, IBackgroundTransferContentPartFactory>().CreateWithNameAndFileName(name, fileName))
{}

template <unsigned S0, unsigned S1> BackgroundTransferContentPart::BackgroundTransferContentPart(wchar_t const (&name)[S0], wchar_t const (&fileName)[S1]) :
	Windows::Networking::BackgroundTransfer::IBackgroundTransferContentPart(GetActivationFactory<BackgroundTransferContentPart, IBackgroundTransferContentPartFactory>().CreateWithNameAndFileName(name, fileName))
{}

inline BackgroundDownloader::BackgroundDownloader() :
	Windows::Networking::BackgroundTransfer::IBackgroundDownloader(ActivateInstance<BackgroundDownloader>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> BackgroundDownloader::GetCurrentDownloadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group)
{
	return GetActivationFactory<BackgroundDownloader, IBackgroundDownloaderStaticMethods2>().GetCurrentDownloadsForTransferGroupAsync(group);
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> BackgroundDownloader::RequestUnconstrainedDownloadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::DownloadOperation> const & operations)
{
	return GetActivationFactory<BackgroundDownloader, IBackgroundDownloaderUserConsent>().RequestUnconstrainedDownloadsAsync(operations);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> BackgroundDownloader::GetCurrentDownloadsAsync()
{
	return GetActivationFactory<BackgroundDownloader, IBackgroundDownloaderStaticMethods>().GetCurrentDownloadsAsync();
}

inline BackgroundUploader::BackgroundUploader() :
	Windows::Networking::BackgroundTransfer::IBackgroundUploader(ActivateInstance<BackgroundUploader>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> BackgroundUploader::GetCurrentUploadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group)
{
	return GetActivationFactory<BackgroundUploader, IBackgroundUploaderStaticMethods2>().GetCurrentUploadsForTransferGroupAsync(group);
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> BackgroundUploader::RequestUnconstrainedUploadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::UploadOperation> const & operations)
{
	return GetActivationFactory<BackgroundUploader, IBackgroundUploaderUserConsent>().RequestUnconstrainedUploadsAsync(operations);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> BackgroundUploader::GetCurrentUploadsAsync()
{
	return GetActivationFactory<BackgroundUploader, IBackgroundUploaderStaticMethods>().GetCurrentUploadsAsync();
}

inline Windows::Web::WebErrorStatus BackgroundTransferError::GetStatus(int const hresult)
{
	return GetActivationFactory<BackgroundTransferError, IBackgroundTransferErrorStaticMethods>().GetStatus(hresult);
}

inline Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> ContentPrefetcher::ContentUris()
{
	return GetActivationFactory<ContentPrefetcher, IContentPrefetcher>().ContentUris();
}

inline void ContentPrefetcher::IndirectContentUri(Windows::Foundation::Uri const & value)
{
	GetActivationFactory<ContentPrefetcher, IContentPrefetcher>().IndirectContentUri(value);
}

inline Windows::Foundation::Uri ContentPrefetcher::IndirectContentUri()
{
	return GetActivationFactory<ContentPrefetcher, IContentPrefetcher>().IndirectContentUri();
}

inline Windows::Foundation::IReference<Modern::Windows::Foundation::DateTime> ContentPrefetcher::LastSuccessfulPrefetchTime()
{
	return GetActivationFactory<ContentPrefetcher, IContentPrefetcherTime>().LastSuccessfulPrefetchTime();
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Connectivity {

inline ConnectionProfileFilter::ConnectionProfileFilter() :
	Windows::Networking::Connectivity::IConnectionProfileFilter(ActivateInstance<ConnectionProfileFilter>())
{}

inline RoutePolicy::RoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType const type) :
	Windows::Networking::Connectivity::IRoutePolicy(GetActivationFactory<RoutePolicy, IRoutePolicyFactory>().CreateRoutePolicy(connectionProfile, hostName, type))
{}

inline CellularApnContext::CellularApnContext() :
	Windows::Networking::Connectivity::ICellularApnContext(ActivateInstance<CellularApnContext>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> NetworkInformation::FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics2>().FindConnectionProfilesAsync(pProfileFilter);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> NetworkInformation::GetConnectionProfiles()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetConnectionProfiles();
}

inline Windows::Networking::Connectivity::ConnectionProfile NetworkInformation::GetInternetConnectionProfile()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetInternetConnectionProfile();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> NetworkInformation::GetLanIdentifiers()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetLanIdentifiers();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> NetworkInformation::GetHostNames()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetHostNames();
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> NetworkInformation::GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetProxyConfigurationAsync(uri);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> NetworkInformation::GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions const sortOptions)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetSortedEndpointPairs(destinationList, sortOptions);
}

inline EventRegistrationToken NetworkInformation::NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().NetworkStatusChanged(networkStatusHandler);
}

template <typename F> EventRegistrationToken NetworkInformation::NetworkStatusChanged(F networkStatusHandler)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().NetworkStatusChanged(Windows::Networking::Connectivity::NetworkStatusChangedEventHandler(networkStatusHandler));
}

inline void NetworkInformation::NetworkStatusChanged(EventRegistrationToken const eventCookie)
{
	GetActivationFactory<NetworkInformation, INetworkInformationStatics>().NetworkStatusChanged(eventCookie);
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> ConnectivityManager::AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext)
{
	return GetActivationFactory<ConnectivityManager, IConnectivityManagerStatics>().AcquireConnectionAsync(cellularApnContext);
}

inline void ConnectivityManager::AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy)
{
	GetActivationFactory<ConnectivityManager, IConnectivityManagerStatics>().AddHttpRoutePolicy(routePolicy);
}

inline void ConnectivityManager::RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy)
{
	GetActivationFactory<ConnectivityManager, IConnectivityManagerStatics>().RemoveHttpRoutePolicy(routePolicy);
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace NetworkOperators {

inline Windows::Foundation::Collections::IVectorView<String> MobileBroadbandAccount::AvailableNetworkAccountIds()
{
	return GetActivationFactory<MobileBroadbandAccount, IMobileBroadbandAccountStatics>().AvailableNetworkAccountIds();
}

inline Windows::Networking::NetworkOperators::MobileBroadbandAccount MobileBroadbandAccount::CreateFromNetworkAccountId(String const & networkAccountId)
{
	return GetActivationFactory<MobileBroadbandAccount, IMobileBroadbandAccountStatics>().CreateFromNetworkAccountId(networkAccountId);
}

template <unsigned S0> Windows::Networking::NetworkOperators::MobileBroadbandAccount MobileBroadbandAccount::CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0])
{
	return GetActivationFactory<MobileBroadbandAccount, IMobileBroadbandAccountStatics>().CreateFromNetworkAccountId(networkAccountId);
}

inline NetworkOperatorTetheringAccessPointConfiguration::NetworkOperatorTetheringAccessPointConfiguration() :
	Windows::Networking::NetworkOperators::INetworkOperatorTetheringAccessPointConfiguration(ActivateInstance<NetworkOperatorTetheringAccessPointConfiguration>())
{}

inline Windows::Networking::NetworkOperators::TetheringCapability NetworkOperatorTetheringManager::GetTetheringCapability(String const & networkAccountId)
{
	return GetActivationFactory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics>().GetTetheringCapability(networkAccountId);
}

template <unsigned S0> Windows::Networking::NetworkOperators::TetheringCapability NetworkOperatorTetheringManager::GetTetheringCapability(wchar_t const (&networkAccountId)[S0])
{
	return GetActivationFactory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics>().GetTetheringCapability(networkAccountId);
}

inline Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager NetworkOperatorTetheringManager::CreateFromNetworkAccountId(String const & networkAccountId)
{
	return GetActivationFactory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics>().CreateFromNetworkAccountId(networkAccountId);
}

template <unsigned S0> Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager NetworkOperatorTetheringManager::CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0])
{
	return GetActivationFactory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics>().CreateFromNetworkAccountId(networkAccountId);
}

inline MobileBroadbandAccountWatcher::MobileBroadbandAccountWatcher() :
	Windows::Networking::NetworkOperators::IMobileBroadbandAccountWatcher(ActivateInstance<MobileBroadbandAccountWatcher>())
{}

inline bool HotspotAuthenticationContext::TryGetAuthenticationContext(String const & evenToken, Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context)
{
	return GetActivationFactory<HotspotAuthenticationContext, IHotspotAuthenticationContextStatics>().TryGetAuthenticationContext(evenToken, context);
}

template <unsigned S0> bool HotspotAuthenticationContext::TryGetAuthenticationContext(wchar_t const (&evenToken)[S0], Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context)
{
	return GetActivationFactory<HotspotAuthenticationContext, IHotspotAuthenticationContextStatics>().TryGetAuthenticationContext(evenToken, context);
}

inline ProvisioningAgent::ProvisioningAgent() :
	Windows::Networking::NetworkOperators::IProvisioningAgent(ActivateInstance<ProvisioningAgent>())
{}

inline Windows::Networking::NetworkOperators::ProvisioningAgent ProvisioningAgent::CreateFromNetworkAccountId(String const & networkAccountId)
{
	return GetActivationFactory<ProvisioningAgent, IProvisioningAgentStaticMethods>().CreateFromNetworkAccountId(networkAccountId);
}

template <unsigned S0> Windows::Networking::NetworkOperators::ProvisioningAgent ProvisioningAgent::CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0])
{
	return GetActivationFactory<ProvisioningAgent, IProvisioningAgentStaticMethods>().CreateFromNetworkAccountId(networkAccountId);
}

inline UssdMessage::UssdMessage(String const & messageText) :
	Windows::Networking::NetworkOperators::IUssdMessage(GetActivationFactory<UssdMessage, IUssdMessageFactory>().CreateMessage(messageText))
{}

template <unsigned S0> UssdMessage::UssdMessage(wchar_t const (&messageText)[S0]) :
	Windows::Networking::NetworkOperators::IUssdMessage(GetActivationFactory<UssdMessage, IUssdMessageFactory>().CreateMessage(messageText))
{}

inline Windows::Networking::NetworkOperators::UssdSession UssdSession::CreateFromNetworkAccountId(String const & networkAccountId)
{
	return GetActivationFactory<UssdSession, IUssdSessionStatics>().CreateFromNetworkAccountId(networkAccountId);
}

template <unsigned S0> Windows::Networking::NetworkOperators::UssdSession UssdSession::CreateFromNetworkAccountId(wchar_t const (&networkAccountId)[S0])
{
	return GetActivationFactory<UssdSession, IUssdSessionStatics>().CreateFromNetworkAccountId(networkAccountId);
}

inline Windows::Networking::NetworkOperators::UssdSession UssdSession::CreateFromNetworkInterfaceId(String const & networkInterfaceId)
{
	return GetActivationFactory<UssdSession, IUssdSessionStatics>().CreateFromNetworkInterfaceId(networkInterfaceId);
}

template <unsigned S0> Windows::Networking::NetworkOperators::UssdSession UssdSession::CreateFromNetworkInterfaceId(wchar_t const (&networkInterfaceId)[S0])
{
	return GetActivationFactory<UssdSession, IUssdSessionStatics>().CreateFromNetworkInterfaceId(networkInterfaceId);
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Proximity {

inline String ProximityDevice::GetDeviceSelector()
{
	return GetActivationFactory<ProximityDevice, IProximityDeviceStatics>().GetDeviceSelector();
}

inline Windows::Networking::Proximity::ProximityDevice ProximityDevice::GetDefault()
{
	return GetActivationFactory<ProximityDevice, IProximityDeviceStatics>().GetDefault();
}

inline Windows::Networking::Proximity::ProximityDevice ProximityDevice::FromId(String const & deviceId)
{
	return GetActivationFactory<ProximityDevice, IProximityDeviceStatics>().FromId(deviceId);
}

template <unsigned S0> Windows::Networking::Proximity::ProximityDevice ProximityDevice::FromId(wchar_t const (&deviceId)[S0])
{
	return GetActivationFactory<ProximityDevice, IProximityDeviceStatics>().FromId(deviceId);
}

inline Windows::Networking::Proximity::PeerRole PeerFinder::Role()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics2>().Role();
}

inline void PeerFinder::Role(Windows::Networking::Proximity::PeerRole const value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics2>().Role(value);
}

inline Windows::Storage::Streams::IBuffer PeerFinder::DiscoveryData()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics2>().DiscoveryData();
}

inline void PeerFinder::DiscoveryData(Windows::Storage::Streams::IBuffer const & value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics2>().DiscoveryData(value);
}

inline Windows::Networking::Proximity::PeerWatcher PeerFinder::CreateWatcher()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics2>().CreateWatcher();
}

inline bool PeerFinder::AllowBluetooth()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowBluetooth();
}

inline void PeerFinder::AllowBluetooth(bool const value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowBluetooth(value);
}

inline bool PeerFinder::AllowInfrastructure()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowInfrastructure();
}

inline void PeerFinder::AllowInfrastructure(bool const value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowInfrastructure(value);
}

inline bool PeerFinder::AllowWiFiDirect()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowWiFiDirect();
}

inline void PeerFinder::AllowWiFiDirect(bool const value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowWiFiDirect(value);
}

inline String PeerFinder::DisplayName()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().DisplayName();
}

inline void PeerFinder::DisplayName(String const & value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().DisplayName(value);
}

template <unsigned S0> void PeerFinder::DisplayName(wchar_t const (&value)[S0])
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().DisplayName(value);
}

inline Windows::Networking::Proximity::PeerDiscoveryTypes PeerFinder::SupportedDiscoveryTypes()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().SupportedDiscoveryTypes();
}

inline Windows::Foundation::Collections::IMap<String, String> PeerFinder::AlternateIdentities()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().AlternateIdentities();
}

inline void PeerFinder::Start()
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().Start();
}

inline void PeerFinder::Start(String const & peerMessage)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().Start(peerMessage);
}

template <unsigned S0> void PeerFinder::Start(wchar_t const (&peerMessage)[S0])
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().Start(peerMessage);
}

inline void PeerFinder::Stop()
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().Stop();
}

inline EventRegistrationToken PeerFinder::TriggeredConnectionStateChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs> const & handler)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().TriggeredConnectionStateChanged(handler);
}

template <typename F> EventRegistrationToken PeerFinder::TriggeredConnectionStateChanged(F handler)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().TriggeredConnectionStateChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>(handler));
}

inline void PeerFinder::TriggeredConnectionStateChanged(EventRegistrationToken const cookie)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().TriggeredConnectionStateChanged(cookie);
}

inline EventRegistrationToken PeerFinder::ConnectionRequested(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs> const & handler)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().ConnectionRequested(handler);
}

template <typename F> EventRegistrationToken PeerFinder::ConnectionRequested(F handler)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().ConnectionRequested(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs>(handler));
}

inline void PeerFinder::ConnectionRequested(EventRegistrationToken const cookie)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().ConnectionRequested(cookie);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> PeerFinder::FindAllPeersAsync()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().FindAllPeersAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> PeerFinder::ConnectAsync(Windows::Networking::Proximity::PeerInformation const & peerInformation)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().ConnectAsync(peerInformation);
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace PushNotifications {

inline Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> PushNotificationChannelManager::CreatePushNotificationChannelForApplicationAsync()
{
	return GetActivationFactory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>().CreatePushNotificationChannelForApplicationAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> PushNotificationChannelManager::CreatePushNotificationChannelForApplicationAsync(String const & applicationId)
{
	return GetActivationFactory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>().CreatePushNotificationChannelForApplicationAsync(applicationId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> PushNotificationChannelManager::CreatePushNotificationChannelForApplicationAsync(wchar_t const (&applicationId)[S0])
{
	return GetActivationFactory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>().CreatePushNotificationChannelForApplicationAsync(applicationId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> PushNotificationChannelManager::CreatePushNotificationChannelForSecondaryTileAsync(String const & tileId)
{
	return GetActivationFactory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>().CreatePushNotificationChannelForSecondaryTileAsync(tileId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> PushNotificationChannelManager::CreatePushNotificationChannelForSecondaryTileAsync(wchar_t const (&tileId)[S0])
{
	return GetActivationFactory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>().CreatePushNotificationChannelForSecondaryTileAsync(tileId);
}

}}}}

namespace Modern { namespace Windows { namespace Networking { namespace Sockets {

inline ControlChannelTrigger::ControlChannelTrigger(String const & channelId, unsigned const serverKeepAliveIntervalInMinutes) :
	Windows::Networking::Sockets::IControlChannelTrigger(GetActivationFactory<ControlChannelTrigger, IControlChannelTriggerFactory>().CreateControlChannelTrigger(channelId, serverKeepAliveIntervalInMinutes))
{}

template <unsigned S0> ControlChannelTrigger::ControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned const serverKeepAliveIntervalInMinutes) :
	Windows::Networking::Sockets::IControlChannelTrigger(GetActivationFactory<ControlChannelTrigger, IControlChannelTriggerFactory>().CreateControlChannelTrigger(channelId, serverKeepAliveIntervalInMinutes))
{}

inline ControlChannelTrigger::ControlChannelTrigger(String const & channelId, unsigned const serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType const resourceRequestType) :
	Windows::Networking::Sockets::IControlChannelTrigger(GetActivationFactory<ControlChannelTrigger, IControlChannelTriggerFactory>().CreateControlChannelTrigger(channelId, serverKeepAliveIntervalInMinutes, resourceRequestType))
{}

template <unsigned S0> ControlChannelTrigger::ControlChannelTrigger(wchar_t const (&channelId)[S0], unsigned const serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType const resourceRequestType) :
	Windows::Networking::Sockets::IControlChannelTrigger(GetActivationFactory<ControlChannelTrigger, IControlChannelTriggerFactory>().CreateControlChannelTrigger(channelId, serverKeepAliveIntervalInMinutes, resourceRequestType))
{}

inline DatagramSocket::DatagramSocket() :
	Windows::Networking::Sockets::IDatagramSocket(ActivateInstance<DatagramSocket>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> DatagramSocket::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName)
{
	return GetActivationFactory<DatagramSocket, IDatagramSocketStatics>().GetEndpointPairsAsync(remoteHostName, remoteServiceName);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> DatagramSocket::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0])
{
	return GetActivationFactory<DatagramSocket, IDatagramSocketStatics>().GetEndpointPairsAsync(remoteHostName, remoteServiceName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> DatagramSocket::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, String const & remoteServiceName, Windows::Networking::HostNameSortOptions const sortOptions)
{
	return GetActivationFactory<DatagramSocket, IDatagramSocketStatics>().GetEndpointPairsAsync(remoteHostName, remoteServiceName, sortOptions);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> DatagramSocket::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, wchar_t const (&remoteServiceName)[S0], Windows::Networking::HostNameSortOptions const sortOptions)
{
	return GetActivationFactory<DatagramSocket, IDatagramSocketStatics>().GetEndpointPairsAsync(remoteHostName, remoteServiceName, sortOptions);
}

inline StreamSocket::StreamSocket() :
	Windows::Networking::Sockets::IStreamSocket(ActivateInstance<StreamSocket>())
{}

inline StreamSocketListener::StreamSocketListener() :
	Windows::Networking::Sockets::IStreamSocketListener(ActivateInstance<StreamSocketListener>())
{}

inline MessageWebSocket::MessageWebSocket() :
	Windows::Networking::Sockets::IMessageWebSocket(ActivateInstance<MessageWebSocket>())
{}

inline StreamWebSocket::StreamWebSocket() :
	Windows::Networking::Sockets::IStreamWebSocket(ActivateInstance<StreamWebSocket>())
{}

inline WebSocketKeepAlive::WebSocketKeepAlive() :
	Windows::ApplicationModel::Background::IBackgroundTask(ActivateInstance<WebSocketKeepAlive>())
{}

inline Windows::Networking::Sockets::SocketErrorStatus SocketError::GetStatus(int const hresult)
{
	return GetActivationFactory<SocketError, ISocketErrorStatics>().GetStatus(hresult);
}

inline Windows::Web::WebErrorStatus WebSocketError::GetStatus(int const hresult)
{
	return GetActivationFactory<WebSocketError, IWebSocketErrorStatics>().GetStatus(hresult);
}

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

inline OnlineIdServiceTicketRequest::OnlineIdServiceTicketRequest(String const & service, String const & policy) :
	Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest(GetActivationFactory<OnlineIdServiceTicketRequest, IOnlineIdServiceTicketRequestFactory>().CreateOnlineIdServiceTicketRequest(service, policy))
{}

template <unsigned S0, unsigned S1> OnlineIdServiceTicketRequest::OnlineIdServiceTicketRequest(wchar_t const (&service)[S0], wchar_t const (&policy)[S1]) :
	Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest(GetActivationFactory<OnlineIdServiceTicketRequest, IOnlineIdServiceTicketRequestFactory>().CreateOnlineIdServiceTicketRequest(service, policy))
{}

inline OnlineIdServiceTicketRequest::OnlineIdServiceTicketRequest(String const & service) :
	Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest(GetActivationFactory<OnlineIdServiceTicketRequest, IOnlineIdServiceTicketRequestFactory>().CreateOnlineIdServiceTicketRequest(service))
{}

template <unsigned S0> OnlineIdServiceTicketRequest::OnlineIdServiceTicketRequest(wchar_t const (&service)[S0]) :
	Windows::Security::Authentication::OnlineId::IOnlineIdServiceTicketRequest(GetActivationFactory<OnlineIdServiceTicketRequest, IOnlineIdServiceTicketRequestFactory>().CreateOnlineIdServiceTicketRequest(service))
{}

inline OnlineIdAuthenticator::OnlineIdAuthenticator() :
	Windows::Security::Authentication::OnlineId::IOnlineIdAuthenticator(ActivateInstance<OnlineIdAuthenticator>())
{}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Authentication { namespace Web {

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>().AuthenticateAsync(options, requestUri, callbackUri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>().AuthenticateAsync(options, requestUri);
}

inline Windows::Foundation::Uri WebAuthenticationBroker::GetCurrentApplicationCallbackUri()
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>().GetCurrentApplicationCallbackUri();
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials {

inline PasswordCredential::PasswordCredential() :
	Windows::Security::Credentials::IPasswordCredential(ActivateInstance<PasswordCredential>())
{}

inline PasswordCredential::PasswordCredential(String const & resource, String const & userName, String const & password) :
	Windows::Security::Credentials::IPasswordCredential(GetActivationFactory<PasswordCredential, ICredentialFactory>().CreatePasswordCredential(resource, userName, password))
{}

template <unsigned S0, unsigned S1, unsigned S2> PasswordCredential::PasswordCredential(wchar_t const (&resource)[S0], wchar_t const (&userName)[S1], wchar_t const (&password)[S2]) :
	Windows::Security::Credentials::IPasswordCredential(GetActivationFactory<PasswordCredential, ICredentialFactory>().CreatePasswordCredential(resource, userName, password))
{}

inline PasswordVault::PasswordVault() :
	Windows::Security::Credentials::IPasswordVault(ActivateInstance<PasswordVault>())
{}

inline PasswordCredentialPropertyStore::PasswordCredentialPropertyStore() :
	Windows::Foundation::Collections::IPropertySet(ActivateInstance<PasswordCredentialPropertyStore>())
{}

inline WebAccountProvider::WebAccountProvider(String const & id, String const & displayName, Windows::Foundation::Uri const & iconUri) :
	Windows::Security::Credentials::IWebAccountProvider(GetActivationFactory<WebAccountProvider, IWebAccountProviderFactory>().CreateWebAccountProvider(id, displayName, iconUri))
{}

template <unsigned S0, unsigned S1> WebAccountProvider::WebAccountProvider(wchar_t const (&id)[S0], wchar_t const (&displayName)[S1], Windows::Foundation::Uri const & iconUri) :
	Windows::Security::Credentials::IWebAccountProvider(GetActivationFactory<WebAccountProvider, IWebAccountProviderFactory>().CreateWebAccountProvider(id, displayName, iconUri))
{}

inline WebAccount::WebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, String const & userName, Windows::Security::Credentials::WebAccountState const state) :
	Windows::Security::Credentials::IWebAccount(GetActivationFactory<WebAccount, IWebAccountFactory>().CreateWebAccount(webAccountProvider, userName, state))
{}

template <unsigned S0> WebAccount::WebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, wchar_t const (&userName)[S0], Windows::Security::Credentials::WebAccountState const state) :
	Windows::Security::Credentials::IWebAccount(GetActivationFactory<WebAccount, IWebAccountFactory>().CreateWebAccount(webAccountProvider, userName, state))
{}

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Credentials { namespace UI {

inline Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> UserConsentVerifier::CheckAvailabilityAsync()
{
	return GetActivationFactory<UserConsentVerifier, IUserConsentVerifierStatics>().CheckAvailabilityAsync();
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> UserConsentVerifier::RequestVerificationAsync(String const & message)
{
	return GetActivationFactory<UserConsentVerifier, IUserConsentVerifierStatics>().RequestVerificationAsync(message);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::Credentials::UI::UserConsentVerificationResult> UserConsentVerifier::RequestVerificationAsync(wchar_t const (&message)[S0])
{
	return GetActivationFactory<UserConsentVerifier, IUserConsentVerifierStatics>().RequestVerificationAsync(message);
}

inline CredentialPickerOptions::CredentialPickerOptions() :
	Windows::Security::Credentials::UI::ICredentialPickerOptions(ActivateInstance<CredentialPickerOptions>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> CredentialPicker::PickAsync(Windows::Security::Credentials::UI::CredentialPickerOptions const & options)
{
	return GetActivationFactory<CredentialPicker, ICredentialPickerStatics>().PickAsync(options);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> CredentialPicker::PickAsync(String const & targetName, String const & message)
{
	return GetActivationFactory<CredentialPicker, ICredentialPickerStatics>().PickAsync(targetName, message);
}

template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> CredentialPicker::PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1])
{
	return GetActivationFactory<CredentialPicker, ICredentialPickerStatics>().PickAsync(targetName, message);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> CredentialPicker::PickAsync(String const & targetName, String const & message, String const & caption)
{
	return GetActivationFactory<CredentialPicker, ICredentialPickerStatics>().PickAsync(targetName, message, caption);
}

template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> CredentialPicker::PickAsync(wchar_t const (&targetName)[S0], wchar_t const (&message)[S1], wchar_t const (&caption)[S2])
{
	return GetActivationFactory<CredentialPicker, ICredentialPickerStatics>().PickAsync(targetName, message, caption);
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography {

inline bool CryptographicBuffer::Compare(Windows::Storage::Streams::IBuffer const & object1, Windows::Storage::Streams::IBuffer const & object2)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().Compare(object1, object2);
}

inline Windows::Storage::Streams::IBuffer CryptographicBuffer::GenerateRandom(unsigned const length)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().GenerateRandom(length);
}

inline unsigned CryptographicBuffer::GenerateRandomNumber()
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().GenerateRandomNumber();
}

inline Windows::Storage::Streams::IBuffer CryptographicBuffer::DecodeFromHexString(String const & value)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().DecodeFromHexString(value);
}

template <unsigned S0> Windows::Storage::Streams::IBuffer CryptographicBuffer::DecodeFromHexString(wchar_t const (&value)[S0])
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().DecodeFromHexString(value);
}

inline String CryptographicBuffer::EncodeToHexString(Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().EncodeToHexString(buffer);
}

inline Windows::Storage::Streams::IBuffer CryptographicBuffer::DecodeFromBase64String(String const & value)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().DecodeFromBase64String(value);
}

template <unsigned S0> Windows::Storage::Streams::IBuffer CryptographicBuffer::DecodeFromBase64String(wchar_t const (&value)[S0])
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().DecodeFromBase64String(value);
}

inline String CryptographicBuffer::EncodeToBase64String(Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().EncodeToBase64String(buffer);
}

inline Windows::Storage::Streams::IBuffer CryptographicBuffer::ConvertStringToBinary(String const & value, Windows::Security::Cryptography::BinaryStringEncoding const encoding)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().ConvertStringToBinary(value, encoding);
}

template <unsigned S0> Windows::Storage::Streams::IBuffer CryptographicBuffer::ConvertStringToBinary(wchar_t const (&value)[S0], Windows::Security::Cryptography::BinaryStringEncoding const encoding)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().ConvertStringToBinary(value, encoding);
}

inline String CryptographicBuffer::ConvertBinaryToString(Windows::Security::Cryptography::BinaryStringEncoding const encoding, Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().ConvertBinaryToString(encoding, buffer);
}

}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

inline Certificate::Certificate(Windows::Storage::Streams::IBuffer const & certBlob) :
	Windows::Security::Cryptography::Certificates::ICertificate(GetActivationFactory<Certificate, ICertificateFactory>().CreateCertificate(certBlob))
{}

inline CertificateRequestProperties::CertificateRequestProperties() :
	Windows::Security::Cryptography::Certificates::ICertificateRequestProperties(ActivateInstance<CertificateRequestProperties>())
{}

inline Windows::Foundation::IAsyncOperation<String> CertificateEnrollmentManager::CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().CreateRequestAsync(request);
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::InstallCertificateAsync(String const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions const installOption)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().InstallCertificateAsync(certificate, installOption);
}

template <unsigned S0> Windows::Foundation::IAsyncAction CertificateEnrollmentManager::InstallCertificateAsync(wchar_t const (&certificate)[S0], Windows::Security::Cryptography::Certificates::InstallOptions const installOption)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().InstallCertificateAsync(certificate, installOption);
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, String const & friendlyName)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().ImportPfxDataAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName);
}

template <unsigned S0, unsigned S1, unsigned S2> Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, wchar_t const (&friendlyName)[S2])
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().ImportPfxDataAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName);
}

inline Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager CertificateEnrollmentManager::UserCertificateEnrollmentManager()
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics2>().UserCertificateEnrollmentManager();
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(String const & pfxData, String const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, String const & friendlyName, String const & keyStorageProvider)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics2>().ImportPfxDataAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName, keyStorageProvider);
}

template <unsigned S0, unsigned S1, unsigned S2, unsigned S3> Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(wchar_t const (&pfxData)[S0], wchar_t const (&password)[S1], Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, wchar_t const (&friendlyName)[S2], wchar_t const (&keyStorageProvider)[S3])
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics2>().ImportPfxDataAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName, keyStorageProvider);
}

inline Windows::Foundation::IAsyncOperation<String> KeyAttestationHelper::DecryptTpmAttestationCredentialAsync(String const & credential)
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics>().DecryptTpmAttestationCredentialAsync(credential);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<String> KeyAttestationHelper::DecryptTpmAttestationCredentialAsync(wchar_t const (&credential)[S0])
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics>().DecryptTpmAttestationCredentialAsync(credential);
}

inline String KeyAttestationHelper::GetTpmAttestationCredentialId(String const & credential)
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics>().GetTpmAttestationCredentialId(credential);
}

template <unsigned S0> String KeyAttestationHelper::GetTpmAttestationCredentialId(wchar_t const (&credential)[S0])
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics>().GetTpmAttestationCredentialId(credential);
}

inline CertificateQuery::CertificateQuery() :
	Windows::Security::Cryptography::Certificates::ICertificateQuery(ActivateInstance<CertificateQuery>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> CertificateStores::FindAllAsync()
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> CertificateStores::FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query)
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().FindAllAsync(query);
}

inline Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::TrustedRootCertificationAuthorities()
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().TrustedRootCertificationAuthorities();
}

inline Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::IntermediateCertificationAuthorities()
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().IntermediateCertificationAuthorities();
}

inline Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::GetStoreByName(String const & storeName)
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().GetStoreByName(storeName);
}

template <unsigned S0> Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::GetStoreByName(wchar_t const (&storeName)[S0])
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().GetStoreByName(storeName);
}

inline String KeyAlgorithmNames::Rsa()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Rsa();
}

inline String KeyAlgorithmNames::Dsa()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Dsa();
}

inline String KeyAlgorithmNames::Ecdh256()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdh256();
}

inline String KeyAlgorithmNames::Ecdh384()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdh384();
}

inline String KeyAlgorithmNames::Ecdh521()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdh521();
}

inline String KeyAlgorithmNames::Ecdsa256()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdsa256();
}

inline String KeyAlgorithmNames::Ecdsa384()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdsa384();
}

inline String KeyAlgorithmNames::Ecdsa521()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdsa521();
}

inline String KeyStorageProviderNames::SoftwareKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics>().SoftwareKeyStorageProvider();
}

inline String KeyStorageProviderNames::SmartcardKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics>().SmartcardKeyStorageProvider();
}

inline String KeyStorageProviderNames::PlatformKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics>().PlatformKeyStorageProvider();
}

inline ChainBuildingParameters::ChainBuildingParameters() :
	Windows::Security::Cryptography::Certificates::IChainBuildingParameters(ActivateInstance<ChainBuildingParameters>())
{}

inline ChainValidationParameters::ChainValidationParameters() :
	Windows::Security::Cryptography::Certificates::IChainValidationParameters(ActivateInstance<ChainValidationParameters>())
{}

inline CmsSignerInfo::CmsSignerInfo() :
	Windows::Security::Cryptography::Certificates::ICmsSignerInfo(ActivateInstance<CmsSignerInfo>())
{}

inline CmsAttachedSignature::CmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) :
	Windows::Security::Cryptography::Certificates::ICmsAttachedSignature(GetActivationFactory<CmsAttachedSignature, ICmsAttachedSignatureFactory>().CreateCmsAttachedSignature(inputBlob))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CmsAttachedSignature::GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates)
{
	return GetActivationFactory<CmsAttachedSignature, ICmsAttachedSignatureStatics>().GenerateSignatureAsync(data, signers, certificates);
}

inline CmsDetachedSignature::CmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) :
	Windows::Security::Cryptography::Certificates::ICmsDetachedSignature(GetActivationFactory<CmsDetachedSignature, ICmsDetachedSignatureFactory>().CreateCmsDetachedSignature(inputBlob))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CmsDetachedSignature::GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates)
{
	return GetActivationFactory<CmsDetachedSignature, ICmsDetachedSignatureStatics>().GenerateSignatureAsync(data, signers, certificates);
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned const iterationCount)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics>().BuildForPbkdf2(pbkdf2Salt, iterationCount);
}

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics>().BuildForSP800108(label, context);
}

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics>().BuildForSP80056a(algorithmId, partyUInfo, partyVInfo, suppPubInfo, suppPrivInfo);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> PersistedKeyProvider::OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding)
{
	return GetActivationFactory<PersistedKeyProvider, IPersistedKeyProviderStatics>().OpenKeyPairFromCertificateAsync(certificate, hashAlgorithmName, padding);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> PersistedKeyProvider::OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding const padding)
{
	return GetActivationFactory<PersistedKeyProvider, IPersistedKeyProviderStatics>().OpenKeyPairFromCertificateAsync(certificate, hashAlgorithmName, padding);
}

inline Windows::Security::Cryptography::Core::CryptographicKey PersistedKeyProvider::OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, String const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding)
{
	return GetActivationFactory<PersistedKeyProvider, IPersistedKeyProviderStatics>().OpenPublicKeyFromCertificate(certificate, hashAlgorithmName, padding);
}

template <unsigned S0> Windows::Security::Cryptography::Core::CryptographicKey PersistedKeyProvider::OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, wchar_t const (&hashAlgorithmName)[S0], Windows::Security::Cryptography::Core::CryptographicPadding const padding)
{
	return GetActivationFactory<PersistedKeyProvider, IPersistedKeyProviderStatics>().OpenPublicKeyFromCertificate(certificate, hashAlgorithmName, padding);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().Encrypt(key, data, iv);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().Decrypt(key, data, iv);
}

inline Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData CryptographicEngine::EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().EncryptAndAuthenticate(key, data, nonce, authenticatedData);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().DecryptAndAuthenticate(key, data, nonce, authenticationTag, authenticatedData);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().Sign(key, data);
}

inline bool CryptographicEngine::VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().VerifySignature(key, data, signature);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned const desiredKeySize)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().DeriveKeyMaterial(key, parameters, desiredKeySize);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().SignHashedData(key, data);
}

inline bool CryptographicEngine::VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().VerifySignatureWithHashInput(key, data, signature);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CryptographicEngine::DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().DecryptAsync(key, data, iv);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CryptographicEngine::SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().SignAsync(key, data);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CryptographicEngine::SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().SignHashedDataAsync(key, data);
}

inline Windows::Security::Cryptography::Core::HashAlgorithmProvider HashAlgorithmProvider::OpenAlgorithm(String const & algorithm)
{
	return GetActivationFactory<HashAlgorithmProvider, IHashAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

template <unsigned S0> Windows::Security::Cryptography::Core::HashAlgorithmProvider HashAlgorithmProvider::OpenAlgorithm(wchar_t const (&algorithm)[S0])
{
	return GetActivationFactory<HashAlgorithmProvider, IHashAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::MacAlgorithmProvider MacAlgorithmProvider::OpenAlgorithm(String const & algorithm)
{
	return GetActivationFactory<MacAlgorithmProvider, IMacAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

template <unsigned S0> Windows::Security::Cryptography::Core::MacAlgorithmProvider MacAlgorithmProvider::OpenAlgorithm(wchar_t const (&algorithm)[S0])
{
	return GetActivationFactory<MacAlgorithmProvider, IMacAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider KeyDerivationAlgorithmProvider::OpenAlgorithm(String const & algorithm)
{
	return GetActivationFactory<KeyDerivationAlgorithmProvider, IKeyDerivationAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

template <unsigned S0> Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider KeyDerivationAlgorithmProvider::OpenAlgorithm(wchar_t const (&algorithm)[S0])
{
	return GetActivationFactory<KeyDerivationAlgorithmProvider, IKeyDerivationAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider SymmetricKeyAlgorithmProvider::OpenAlgorithm(String const & algorithm)
{
	return GetActivationFactory<SymmetricKeyAlgorithmProvider, ISymmetricKeyAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

template <unsigned S0> Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider SymmetricKeyAlgorithmProvider::OpenAlgorithm(wchar_t const (&algorithm)[S0])
{
	return GetActivationFactory<SymmetricKeyAlgorithmProvider, ISymmetricKeyAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider AsymmetricKeyAlgorithmProvider::OpenAlgorithm(String const & algorithm)
{
	return GetActivationFactory<AsymmetricKeyAlgorithmProvider, IAsymmetricKeyAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

template <unsigned S0> Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider AsymmetricKeyAlgorithmProvider::OpenAlgorithm(wchar_t const (&algorithm)[S0])
{
	return GetActivationFactory<AsymmetricKeyAlgorithmProvider, IAsymmetricKeyAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline String HashAlgorithmNames::Md5()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Md5();
}

inline String HashAlgorithmNames::Sha1()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha1();
}

inline String HashAlgorithmNames::Sha256()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha256();
}

inline String HashAlgorithmNames::Sha384()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha384();
}

inline String HashAlgorithmNames::Sha512()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha512();
}

inline String MacAlgorithmNames::HmacMd5()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacMd5();
}

inline String MacAlgorithmNames::HmacSha1()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha1();
}

inline String MacAlgorithmNames::HmacSha256()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha256();
}

inline String MacAlgorithmNames::HmacSha384()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha384();
}

inline String MacAlgorithmNames::HmacSha512()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha512();
}

inline String MacAlgorithmNames::AesCmac()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().AesCmac();
}

inline String SymmetricAlgorithmNames::DesCbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesCbc();
}

inline String SymmetricAlgorithmNames::DesEcb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesEcb();
}

inline String SymmetricAlgorithmNames::TripleDesCbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesCbc();
}

inline String SymmetricAlgorithmNames::TripleDesEcb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesEcb();
}

inline String SymmetricAlgorithmNames::Rc2Cbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2Cbc();
}

inline String SymmetricAlgorithmNames::Rc2Ecb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2Ecb();
}

inline String SymmetricAlgorithmNames::AesCbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesCbc();
}

inline String SymmetricAlgorithmNames::AesEcb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesEcb();
}

inline String SymmetricAlgorithmNames::AesGcm()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesGcm();
}

inline String SymmetricAlgorithmNames::AesCcm()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesCcm();
}

inline String SymmetricAlgorithmNames::AesCbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesCbcPkcs7();
}

inline String SymmetricAlgorithmNames::AesEcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesEcbPkcs7();
}

inline String SymmetricAlgorithmNames::DesCbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesCbcPkcs7();
}

inline String SymmetricAlgorithmNames::DesEcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesEcbPkcs7();
}

inline String SymmetricAlgorithmNames::TripleDesCbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesCbcPkcs7();
}

inline String SymmetricAlgorithmNames::TripleDesEcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesEcbPkcs7();
}

inline String SymmetricAlgorithmNames::Rc2CbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2CbcPkcs7();
}

inline String SymmetricAlgorithmNames::Rc2EcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2EcbPkcs7();
}

inline String SymmetricAlgorithmNames::Rc4()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc4();
}

inline String AsymmetricAlgorithmNames::RsaPkcs1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaPkcs1();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha1();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha256();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha384();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha512();
}

inline String AsymmetricAlgorithmNames::EcdsaP256Sha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().EcdsaP256Sha256();
}

inline String AsymmetricAlgorithmNames::EcdsaP384Sha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().EcdsaP384Sha384();
}

inline String AsymmetricAlgorithmNames::EcdsaP521Sha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().EcdsaP521Sha512();
}

inline String AsymmetricAlgorithmNames::DsaSha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().DsaSha1();
}

inline String AsymmetricAlgorithmNames::DsaSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().DsaSha256();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha1();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha256();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha384();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha512();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha1();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha256();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha384();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha512();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Md5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Md5();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha1();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha256();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha384();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha512();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacMd5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacMd5();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha1();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha256();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha384();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha512();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatMd5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatMd5();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha1();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha256();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha384();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha512();
}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

inline DataProtectionProvider::DataProtectionProvider() :
	Windows::Security::Cryptography::DataProtection::IDataProtectionProvider(ActivateInstance<DataProtectionProvider>())
{}

inline DataProtectionProvider::DataProtectionProvider(String const & protectionDescriptor) :
	Windows::Security::Cryptography::DataProtection::IDataProtectionProvider(GetActivationFactory<DataProtectionProvider, IDataProtectionProviderFactory>().CreateOverloadExplicit(protectionDescriptor))
{}

template <unsigned S0> DataProtectionProvider::DataProtectionProvider(wchar_t const (&protectionDescriptor)[S0]) :
	Windows::Security::Cryptography::DataProtection::IDataProtectionProvider(GetActivationFactory<DataProtectionProvider, IDataProtectionProviderFactory>().CreateOverloadExplicit(protectionDescriptor))
{}

}}}}}

namespace Modern { namespace Windows { namespace Security { namespace EnterpriseData {

inline Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> FileRevocationManager::ProtectAsync(Windows::Storage::IStorageItem const & storageItem, String const & enterpriseIdentity)
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().ProtectAsync(storageItem, enterpriseIdentity);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> FileRevocationManager::ProtectAsync(Windows::Storage::IStorageItem const & storageItem, wchar_t const (&enterpriseIdentity)[S0])
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().ProtectAsync(storageItem, enterpriseIdentity);
}

inline Windows::Foundation::IAsyncOperation<bool> FileRevocationManager::CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem)
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().CopyProtectionAsync(sourceStorageItem, targetStorageItem);
}

inline void FileRevocationManager::Revoke(String const & enterpriseIdentity)
{
	GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().Revoke(enterpriseIdentity);
}

template <unsigned S0> void FileRevocationManager::Revoke(wchar_t const (&enterpriseIdentity)[S0])
{
	GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().Revoke(enterpriseIdentity);
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::Security::EnterpriseData::FileProtectionStatus> FileRevocationManager::GetStatusAsync(Windows::Storage::IStorageItem const & storageItem)
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().GetStatusAsync(storageItem);
}

}}}}

namespace Modern { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

inline EasClientSecurityPolicy::EasClientSecurityPolicy() :
	Windows::Security::ExchangeActiveSyncProvisioning::IEasClientSecurityPolicy(ActivateInstance<EasClientSecurityPolicy>())
{}

inline EasClientDeviceInformation::EasClientDeviceInformation() :
	Windows::Security::ExchangeActiveSyncProvisioning::IEasClientDeviceInformation(ActivateInstance<EasClientDeviceInformation>())
{}

}}}}

namespace Modern { namespace Windows { namespace Storage {

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::GetFileFromPathAsync(String const & path)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().GetFileFromPathAsync(path);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::GetFileFromPathAsync(wchar_t const (&path)[S0])
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().GetFileFromPathAsync(path);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().GetFileFromApplicationUriAsync(uri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileAsync(String const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileAsync(displayNameWithExtension, dataRequested, thumbnail);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileAsync(displayNameWithExtension, dataRequested, thumbnail);
}

template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileAsync(String const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileAsync(displayNameWithExtension, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

template <unsigned S0, typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileAsync(wchar_t const (&displayNameWithExtension)[S0], F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileAsync(displayNameWithExtension, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().ReplaceWithStreamedFileAsync(fileToReplace, dataRequested, thumbnail);
}

template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().ReplaceWithStreamedFileAsync(fileToReplace, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileFromUriAsync(String const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileFromUriAsync(displayNameWithExtension, uri, thumbnail);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileFromUriAsync(wchar_t const (&displayNameWithExtension)[S0], Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileFromUriAsync(displayNameWithExtension, uri, thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().ReplaceWithStreamedFileFromUriAsync(fileToReplace, uri, thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> StorageFolder::GetFolderFromPathAsync(String const & path)
{
	return GetActivationFactory<StorageFolder, IStorageFolderStatics>().GetFolderFromPathAsync(path);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> StorageFolder::GetFolderFromPathAsync(wchar_t const (&path)[S0])
{
	return GetActivationFactory<StorageFolder, IStorageFolderStatics>().GetFolderFromPathAsync(path);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> StorageLibrary::GetLibraryAsync(Windows::Storage::KnownLibraryId const libraryId)
{
	return GetActivationFactory<StorageLibrary, IStorageLibraryStatics>().GetLibraryAsync(libraryId);
}

inline Windows::Storage::StorageFolder KnownFolders::SavedPictures()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersSavedPicturesStatics>().SavedPictures();
}

inline Windows::Storage::StorageFolder KnownFolders::Playlists()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersPlaylistsStatics>().Playlists();
}

inline Windows::Storage::StorageFolder KnownFolders::MusicLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().MusicLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::PicturesLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().PicturesLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::VideosLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().VideosLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::DocumentsLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().DocumentsLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::HomeGroup()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().HomeGroup();
}

inline Windows::Storage::StorageFolder KnownFolders::RemovableDevices()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().RemovableDevices();
}

inline Windows::Storage::StorageFolder KnownFolders::MediaServerDevices()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().MediaServerDevices();
}

inline Windows::Storage::StorageFolder KnownFolders::CameraRoll()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersCameraRollStatics>().CameraRoll();
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileAsync(String const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFileAsync(desiredName);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileAsync(wchar_t const (&desiredName)[S0])
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFileAsync(desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderAsync(String const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFolderAsync(desiredName);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderAsync(wchar_t const (&desiredName)[S0])
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFolderAsync(desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileAsync(String const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFileAsync(desiredName, option);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFileAsync(desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderAsync(String const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFolderAsync(desiredName, option);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderAsync(wchar_t const (&desiredName)[S0], Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFolderAsync(desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<String> FileIO::ReadTextAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadTextAsync(file);
}

inline Windows::Foundation::IAsyncOperation<String> FileIO::ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadTextAsync(file, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteTextAsync(file, contents);
}

template <unsigned S0> Windows::Foundation::IAsyncAction FileIO::WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0])
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteTextAsync(file, contents);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteTextAsync(file, contents, encoding);
}

template <unsigned S0> Windows::Foundation::IAsyncAction FileIO::WriteTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteTextAsync(file, contents, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendTextAsync(file, contents);
}

template <unsigned S0> Windows::Foundation::IAsyncAction FileIO::AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0])
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendTextAsync(file, contents);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendTextAsync(Windows::Storage::IStorageFile const & file, String const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendTextAsync(file, contents, encoding);
}

template <unsigned S0> Windows::Foundation::IAsyncAction FileIO::AppendTextAsync(Windows::Storage::IStorageFile const & file, wchar_t const (&contents)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendTextAsync(file, contents, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> FileIO::ReadLinesAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadLinesAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> FileIO::ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadLinesAsync(file, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteLinesAsync(file, lines);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteLinesAsync(file, lines, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendLinesAsync(file, lines);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendLinesAsync(file, lines, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> FileIO::ReadBufferAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadBufferAsync(file);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteBufferAsync(file, buffer);
}

inline Windows::Foundation::IAsyncOperation<String> PathIO::ReadTextAsync(String const & absolutePath)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadTextAsync(absolutePath);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<String> PathIO::ReadTextAsync(wchar_t const (&absolutePath)[S0])
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadTextAsync(absolutePath);
}

inline Windows::Foundation::IAsyncOperation<String> PathIO::ReadTextAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadTextAsync(absolutePath, encoding);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<String> PathIO::ReadTextAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadTextAsync(absolutePath, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteTextAsync(String const & absolutePath, String const & contents)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteTextAsync(absolutePath, contents);
}

template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction PathIO::WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1])
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteTextAsync(absolutePath, contents);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteTextAsync(absolutePath, contents, encoding);
}

template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction PathIO::WriteTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteTextAsync(absolutePath, contents, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendTextAsync(String const & absolutePath, String const & contents)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendTextAsync(absolutePath, contents);
}

template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction PathIO::AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1])
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendTextAsync(absolutePath, contents);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendTextAsync(String const & absolutePath, String const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendTextAsync(absolutePath, contents, encoding);
}

template <unsigned S0, unsigned S1> Windows::Foundation::IAsyncAction PathIO::AppendTextAsync(wchar_t const (&absolutePath)[S0], wchar_t const (&contents)[S1], Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendTextAsync(absolutePath, contents, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> PathIO::ReadLinesAsync(String const & absolutePath)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadLinesAsync(absolutePath);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> PathIO::ReadLinesAsync(wchar_t const (&absolutePath)[S0])
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadLinesAsync(absolutePath);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> PathIO::ReadLinesAsync(String const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadLinesAsync(absolutePath, encoding);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> PathIO::ReadLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadLinesAsync(absolutePath, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteLinesAsync(absolutePath, lines);
}

template <unsigned S0> Windows::Foundation::IAsyncAction PathIO::WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteLinesAsync(absolutePath, lines);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteLinesAsync(absolutePath, lines, encoding);
}

template <unsigned S0> Windows::Foundation::IAsyncAction PathIO::WriteLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteLinesAsync(absolutePath, lines, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendLinesAsync(absolutePath, lines);
}

template <unsigned S0> Windows::Foundation::IAsyncAction PathIO::AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendLinesAsync(absolutePath, lines);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendLinesAsync(String const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendLinesAsync(absolutePath, lines, encoding);
}

template <unsigned S0> Windows::Foundation::IAsyncAction PathIO::AppendLinesAsync(wchar_t const (&absolutePath)[S0], Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendLinesAsync(absolutePath, lines, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> PathIO::ReadBufferAsync(String const & absolutePath)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadBufferAsync(absolutePath);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> PathIO::ReadBufferAsync(wchar_t const (&absolutePath)[S0])
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadBufferAsync(absolutePath);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteBufferAsync(String const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteBufferAsync(absolutePath, buffer);
}

template <unsigned S0> Windows::Foundation::IAsyncAction PathIO::WriteBufferAsync(wchar_t const (&absolutePath)[S0], Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteBufferAsync(absolutePath, buffer);
}

inline void CachedFileManager::DeferUpdates(Windows::Storage::IStorageFile const & file)
{
	GetActivationFactory<CachedFileManager, ICachedFileManagerStatics>().DeferUpdates(file);
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::Storage::Provider::FileUpdateStatus> CachedFileManager::CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<CachedFileManager, ICachedFileManagerStatics>().CompleteUpdatesAsync(file);
}

inline String SystemProperties::Author()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Author();
}

inline String SystemProperties::Comment()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Comment();
}

inline String SystemProperties::ItemNameDisplay()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().ItemNameDisplay();
}

inline String SystemProperties::Keywords()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Keywords();
}

inline String SystemProperties::Rating()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Rating();
}

inline String SystemProperties::Title()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Title();
}

inline Windows::Storage::SystemAudioProperties SystemProperties::Audio()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Audio();
}

inline Windows::Storage::SystemGPSProperties SystemProperties::GPS()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().GPS();
}

inline Windows::Storage::SystemMediaProperties SystemProperties::Media()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Media();
}

inline Windows::Storage::SystemMusicProperties SystemProperties::Music()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Music();
}

inline Windows::Storage::SystemPhotoProperties SystemProperties::Photo()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Photo();
}

inline Windows::Storage::SystemVideoProperties SystemProperties::Video()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Video();
}

inline Windows::Storage::SystemImageProperties SystemProperties::Image()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Image();
}

inline Windows::Storage::ApplicationData ApplicationData::Current()
{
	return GetActivationFactory<ApplicationData, IApplicationDataStatics>().Current();
}

inline ApplicationDataCompositeValue::ApplicationDataCompositeValue() :
	Windows::Foundation::Collections::IPropertySet(ActivateInstance<ApplicationDataCompositeValue>())
{}

}}}

namespace Modern { namespace Windows { namespace Storage { namespace AccessCache {

inline Windows::Storage::AccessCache::StorageItemAccessList StorageApplicationPermissions::FutureAccessList()
{
	return GetActivationFactory<StorageApplicationPermissions, IStorageApplicationPermissionsStatics>().FutureAccessList();
}

inline Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList StorageApplicationPermissions::MostRecentlyUsedList()
{
	return GetActivationFactory<StorageApplicationPermissions, IStorageApplicationPermissionsStatics>().MostRecentlyUsedList();
}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace BulkAccess {

inline FileInformationFactory::FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode) :
	Windows::Storage::BulkAccess::IFileInformationFactory(GetActivationFactory<FileInformationFactory, IFileInformationFactoryFactory>().CreateWithMode(queryResult, mode))
{}

inline FileInformationFactory::FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize) :
	Windows::Storage::BulkAccess::IFileInformationFactory(GetActivationFactory<FileInformationFactory, IFileInformationFactoryFactory>().CreateWithModeAndSize(queryResult, mode, requestedThumbnailSize))
{}

inline FileInformationFactory::FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions const thumbnailOptions) :
	Windows::Storage::BulkAccess::IFileInformationFactory(GetActivationFactory<FileInformationFactory, IFileInformationFactoryFactory>().CreateWithModeAndSizeAndOptions(queryResult, mode, requestedThumbnailSize, thumbnailOptions))
{}

inline FileInformationFactory::FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions const thumbnailOptions, bool const delayLoad) :
	Windows::Storage::BulkAccess::IFileInformationFactory(GetActivationFactory<FileInformationFactory, IFileInformationFactoryFactory>().CreateWithModeAndSizeAndOptionsAndFlags(queryResult, mode, requestedThumbnailSize, thumbnailOptions, delayLoad))
{}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Compression {

inline Compressor::Compressor(Windows::Storage::Streams::IOutputStream const & underlyingStream) :
	Windows::Storage::Compression::ICompressor(GetActivationFactory<Compressor, ICompressorFactory>().CreateCompressor(underlyingStream))
{}

inline Compressor::Compressor(Windows::Storage::Streams::IOutputStream const & underlyingStream, Windows::Storage::Compression::CompressAlgorithm const algorithm, unsigned const blockSize) :
	Windows::Storage::Compression::ICompressor(GetActivationFactory<Compressor, ICompressorFactory>().CreateCompressorEx(underlyingStream, algorithm, blockSize))
{}

inline Decompressor::Decompressor(Windows::Storage::Streams::IInputStream const & underlyingStream) :
	Windows::Storage::Compression::IDecompressor(GetActivationFactory<Decompressor, IDecompressorFactory>().CreateDecompressor(underlyingStream))
{}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace FileProperties {

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers {

inline FileOpenPicker::FileOpenPicker() :
	Windows::Storage::Pickers::IFileOpenPicker(ActivateInstance<FileOpenPicker>())
{}

inline FileSavePicker::FileSavePicker() :
	Windows::Storage::Pickers::IFileSavePicker(ActivateInstance<FileSavePicker>())
{}

inline FolderPicker::FolderPicker() :
	Windows::Storage::Pickers::IFolderPicker(ActivateInstance<FolderPicker>())
{}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

}}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Provider {

inline void CachedFileUpdater::SetUpdateInformation(Windows::Storage::IStorageFile const & file, String const & contentId, Windows::Storage::Provider::ReadActivationMode const readMode, Windows::Storage::Provider::WriteActivationMode const writeMode, Windows::Storage::Provider::CachedFileOptions const options)
{
	GetActivationFactory<CachedFileUpdater, ICachedFileUpdaterStatics>().SetUpdateInformation(file, contentId, readMode, writeMode, options);
}

template <unsigned S0> void CachedFileUpdater::SetUpdateInformation(Windows::Storage::IStorageFile const & file, wchar_t const (&contentId)[S0], Windows::Storage::Provider::ReadActivationMode const readMode, Windows::Storage::Provider::WriteActivationMode const writeMode, Windows::Storage::Provider::CachedFileOptions const options)
{
	GetActivationFactory<CachedFileUpdater, ICachedFileUpdaterStatics>().SetUpdateInformation(file, contentId, readMode, writeMode, options);
}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Search {

inline Windows::Storage::Search::ContentIndexer ContentIndexer::GetIndexer(String const & indexName)
{
	return GetActivationFactory<ContentIndexer, IContentIndexerStatics>().GetIndexer(indexName);
}

template <unsigned S0> Windows::Storage::Search::ContentIndexer ContentIndexer::GetIndexer(wchar_t const (&indexName)[S0])
{
	return GetActivationFactory<ContentIndexer, IContentIndexerStatics>().GetIndexer(indexName);
}

inline Windows::Storage::Search::ContentIndexer ContentIndexer::GetIndexer()
{
	return GetActivationFactory<ContentIndexer, IContentIndexerStatics>().GetIndexer();
}

inline ValueAndLanguage::ValueAndLanguage() :
	Windows::Storage::Search::IValueAndLanguage(ActivateInstance<ValueAndLanguage>())
{}

inline IndexableContent::IndexableContent() :
	Windows::Storage::Search::IIndexableContent(ActivateInstance<IndexableContent>())
{}

inline QueryOptions::QueryOptions() :
	Windows::Storage::Search::IQueryOptions(ActivateInstance<QueryOptions>())
{}

inline QueryOptions::QueryOptions(Windows::Storage::Search::CommonFileQuery const query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter) :
	Windows::Storage::Search::IQueryOptions(GetActivationFactory<QueryOptions, IQueryOptionsFactory>().CreateCommonFileQuery(query, fileTypeFilter))
{}

inline QueryOptions::QueryOptions(Windows::Storage::Search::CommonFolderQuery const query) :
	Windows::Storage::Search::IQueryOptions(GetActivationFactory<QueryOptions, IQueryOptionsFactory>().CreateCommonFolderQuery(query))
{}

}}}}

namespace Modern { namespace Windows { namespace Storage { namespace Streams {

inline DataReader::DataReader(Windows::Storage::Streams::IInputStream const & inputStream) :
	Windows::Storage::Streams::IDataReader(GetActivationFactory<DataReader, IDataReaderFactory>().CreateDataReader(inputStream))
{}

inline Windows::Storage::Streams::DataReader DataReader::FromBuffer(Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<DataReader, IDataReaderStatics>().FromBuffer(buffer);
}

inline DataWriter::DataWriter() :
	Windows::Storage::Streams::IDataWriter(ActivateInstance<DataWriter>())
{}

inline DataWriter::DataWriter(Windows::Storage::Streams::IOutputStream const & outputStream) :
	Windows::Storage::Streams::IDataWriter(GetActivationFactory<DataWriter, IDataWriterFactory>().CreateDataWriter(outputStream))
{}

inline Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> RandomAccessStream::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination)
{
	return GetActivationFactory<RandomAccessStream, IRandomAccessStreamStatics>().CopyAsync(source, destination);
}

inline Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> RandomAccessStream::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long const bytesToCopy)
{
	return GetActivationFactory<RandomAccessStream, IRandomAccessStreamStatics>().CopyAsync(source, destination, bytesToCopy);
}

inline Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> RandomAccessStream::CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination)
{
	return GetActivationFactory<RandomAccessStream, IRandomAccessStreamStatics>().CopyAndCloseAsync(source, destination);
}

inline Buffer::Buffer(unsigned const capacity) :
	Windows::Storage::Streams::IBuffer(GetActivationFactory<Buffer, IBufferFactory>().Create(capacity))
{}

inline Windows::Storage::Streams::RandomAccessStreamReference RandomAccessStreamReference::CreateFromFile(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<RandomAccessStreamReference, IRandomAccessStreamReferenceStatics>().CreateFromFile(file);
}

inline Windows::Storage::Streams::RandomAccessStreamReference RandomAccessStreamReference::CreateFromUri(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<RandomAccessStreamReference, IRandomAccessStreamReferenceStatics>().CreateFromUri(uri);
}

inline Windows::Storage::Streams::RandomAccessStreamReference RandomAccessStreamReference::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<RandomAccessStreamReference, IRandomAccessStreamReferenceStatics>().CreateFromStream(stream);
}

inline InMemoryRandomAccessStream::InMemoryRandomAccessStream() :
	Windows::Storage::Streams::IRandomAccessStream(ActivateInstance<InMemoryRandomAccessStream>())
{}

}}}}

namespace Modern { namespace Windows { namespace System {

inline LauncherOptions::LauncherOptions() :
	Windows::System::ILauncherOptions(ActivateInstance<LauncherOptions>())
{}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchFileAsync(file, options);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchUriAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchUriAsync(uri);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchUriAsync(uri, options);
}

}}}

namespace Modern { namespace Windows { namespace System { namespace Display {

inline DisplayRequest::DisplayRequest() :
	Windows::System::Display::IDisplayRequest(ActivateInstance<DisplayRequest>())
{}

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile {

inline Windows::System::Profile::HardwareToken HardwareIdentification::GetPackageSpecificToken(Windows::Storage::Streams::IBuffer const & nonce)
{
	return GetActivationFactory<HardwareIdentification, IHardwareIdentificationStatics>().GetPackageSpecificToken(nonce);
}

}}}}

namespace Modern { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

inline String SmbiosInformation::SerialNumber()
{
	return GetActivationFactory<SmbiosInformation, ISmbiosInformationStatics>().SerialNumber();
}

}}}}}

namespace Modern { namespace Windows { namespace System { namespace RemoteDesktop {

inline bool InteractiveSession::IsRemote()
{
	return GetActivationFactory<InteractiveSession, IInteractiveSessionStatics>().IsRemote();
}

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading {

inline Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreatePeriodicTimer(handler, period);
}

template <typename F> Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreatePeriodicTimer(Windows::System::Threading::TimerElapsedHandler(handler), period);
}

inline Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreateTimer(handler, delay);
}

template <typename F> Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreateTimer(Windows::System::Threading::TimerElapsedHandler(handler), delay);
}

inline Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period, Windows::System::Threading::ITimerDestroyedHandler const & destroyed)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreatePeriodicTimer(handler, period, destroyed);
}

template <typename F> Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period, F destroyed)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreatePeriodicTimer(Windows::System::Threading::TimerElapsedHandler(handler), period, Windows::System::Threading::TimerDestroyedHandler(destroyed));
}

inline Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay, Windows::System::Threading::ITimerDestroyedHandler const & destroyed)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreateTimer(handler, delay, destroyed);
}

template <typename F> Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay, F destroyed)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreateTimer(Windows::System::Threading::TimerElapsedHandler(handler), delay, Windows::System::Threading::TimerDestroyedHandler(destroyed));
}

inline Windows::Foundation::IAsyncAction ThreadPool::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(handler);
}

template <typename F> Windows::Foundation::IAsyncAction ThreadPool::RunAsync(F handler)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(Windows::System::Threading::WorkItemHandler(handler));
}

inline Windows::Foundation::IAsyncAction ThreadPool::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(handler, priority);
}

template <typename F> Windows::Foundation::IAsyncAction ThreadPool::RunAsync(F handler, Windows::System::Threading::WorkItemPriority const priority)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(Windows::System::Threading::WorkItemHandler(handler), priority);
}

inline Windows::Foundation::IAsyncAction ThreadPool::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(handler, priority, options);
}

template <typename F> Windows::Foundation::IAsyncAction ThreadPool::RunAsync(F handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(Windows::System::Threading::WorkItemHandler(handler), priority, options);
}

}}}}

namespace Modern { namespace Windows { namespace System { namespace Threading { namespace Core {

inline Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, handler);
}

template <unsigned S0> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, handler);
}

template <typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(String const & name, F handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler));
}

template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(wchar_t const (&name)[S0], F handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler));
}

inline Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, handler, timeout);
}

template <unsigned S0> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, handler, timeout);
}

template <typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

inline Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, handler);
}

template <unsigned S0> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, handler);
}

template <typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(String const & name, F handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler));
}

template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(wchar_t const (&name)[S0], F handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler));
}

inline Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(String const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, handler, timeout);
}

template <unsigned S0> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(wchar_t const (&name)[S0], Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, handler, timeout);
}

template <typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(String const & name, F handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

template <unsigned S0, typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(wchar_t const (&name)[S0], F handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

inline PreallocatedWorkItem::PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler) :
	Windows::System::Threading::Core::IPreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItem(handler))
{}

template <typename F> PreallocatedWorkItem::PreallocatedWorkItem(F handler) :
	Windows::System::Threading::Core::IPreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItem(Windows::System::Threading::WorkItemHandler(handler)))
{}

inline PreallocatedWorkItem::PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority) :
	Windows::System::Threading::Core::IPreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItemWithPriority(handler, priority))
{}

template <typename F> PreallocatedWorkItem::PreallocatedWorkItem(F handler, Windows::System::Threading::WorkItemPriority const priority) :
	Windows::System::Threading::Core::IPreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItemWithPriority(Windows::System::Threading::WorkItemHandler(handler), priority))
{}

inline PreallocatedWorkItem::PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) :
	Windows::System::Threading::Core::IPreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItemWithPriorityAndOptions(handler, priority, options))
{}

template <typename F> PreallocatedWorkItem::PreallocatedWorkItem(F handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) :
	Windows::System::Threading::Core::IPreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItemWithPriorityAndOptions(Windows::System::Threading::WorkItemHandler(handler), priority, options))
{}

}}}}}

namespace Modern { namespace Windows { namespace System { namespace UserProfile {

inline String AdvertisingManager::AdvertisingId()
{
	return GetActivationFactory<AdvertisingManager, IAdvertisingManagerStatics>().AdvertisingId();
}

inline bool UserInformation::AccountPictureChangeEnabled()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().AccountPictureChangeEnabled();
}

inline bool UserInformation::NameAccessAllowed()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().NameAccessAllowed();
}

inline Windows::Storage::IStorageFile UserInformation::GetAccountPicture(Windows::System::UserProfile::AccountPictureKind const kind)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetAccountPicture(kind);
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> UserInformation::SetAccountPictureAsync(Windows::Storage::IStorageFile const & image)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().SetAccountPictureAsync(image);
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> UserInformation::SetAccountPicturesAsync(Windows::Storage::IStorageFile const & smallImage, Windows::Storage::IStorageFile const & largeImage, Windows::Storage::IStorageFile const & video)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().SetAccountPicturesAsync(smallImage, largeImage, video);
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> UserInformation::SetAccountPictureFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & image)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().SetAccountPictureFromStreamAsync(image);
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetAccountPictureResult> UserInformation::SetAccountPicturesFromStreamsAsync(Windows::Storage::Streams::IRandomAccessStream const & smallImage, Windows::Storage::Streams::IRandomAccessStream const & largeImage, Windows::Storage::Streams::IRandomAccessStream const & video)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().SetAccountPicturesFromStreamsAsync(smallImage, largeImage, video);
}

inline EventRegistrationToken UserInformation::AccountPictureChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().AccountPictureChanged(changeHandler);
}

template <typename F> EventRegistrationToken UserInformation::AccountPictureChanged(F changeHandler)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().AccountPictureChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

inline void UserInformation::AccountPictureChanged(EventRegistrationToken const token)
{
	GetActivationFactory<UserInformation, IUserInformationStatics>().AccountPictureChanged(token);
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetDisplayNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetDisplayNameAsync();
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetFirstNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetFirstNameAsync();
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetLastNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetLastNameAsync();
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetPrincipalNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetPrincipalNameAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> UserInformation::GetSessionInitiationProtocolUriAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetSessionInitiationProtocolUriAsync();
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetDomainNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetDomainNameAsync();
}

inline Windows::Foundation::Uri LockScreen::OriginalImageFile()
{
	return GetActivationFactory<LockScreen, ILockScreenStatics>().OriginalImageFile();
}

inline Windows::Storage::Streams::IRandomAccessStream LockScreen::GetImageStream()
{
	return GetActivationFactory<LockScreen, ILockScreenStatics>().GetImageStream();
}

inline Windows::Foundation::IAsyncAction LockScreen::SetImageFileAsync(Windows::Storage::IStorageFile const & value)
{
	return GetActivationFactory<LockScreen, ILockScreenStatics>().SetImageFileAsync(value);
}

inline Windows::Foundation::IAsyncAction LockScreen::SetImageStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & value)
{
	return GetActivationFactory<LockScreen, ILockScreenStatics>().SetImageStreamAsync(value);
}

inline Windows::Foundation::IAsyncOperation<Modern::Windows::System::UserProfile::SetImageFeedResult> LockScreen::RequestSetImageFeedAsync(Windows::Foundation::Uri const & syndicationFeedUri)
{
	return GetActivationFactory<LockScreen, ILockScreenImageFeedStatics>().RequestSetImageFeedAsync(syndicationFeedUri);
}

inline bool LockScreen::TryRemoveImageFeed()
{
	return GetActivationFactory<LockScreen, ILockScreenImageFeedStatics>().TryRemoveImageFeed();
}

inline Windows::Foundation::Collections::IVectorView<String> GlobalizationPreferences::Calendars()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().Calendars();
}

inline Windows::Foundation::Collections::IVectorView<String> GlobalizationPreferences::Clocks()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().Clocks();
}

inline Windows::Foundation::Collections::IVectorView<String> GlobalizationPreferences::Currencies()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().Currencies();
}

inline Windows::Foundation::Collections::IVectorView<String> GlobalizationPreferences::Languages()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().Languages();
}

inline String GlobalizationPreferences::HomeGeographicRegion()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().HomeGeographicRegion();
}

inline Windows::Globalization::DayOfWeek GlobalizationPreferences::WeekStartsOn()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().WeekStartsOn();
}

}}}}

namespace Modern { namespace Windows { namespace UI {

inline Windows::UI::Color ColorHelper::FromArgb(byte const a, byte const r, byte const g, byte const b)
{
	return GetActivationFactory<ColorHelper, IColorHelperStatics>().FromArgb(a, r, g, b);
}

inline Windows::UI::Color Colors::AliceBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().AliceBlue();
}

inline Windows::UI::Color Colors::AntiqueWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().AntiqueWhite();
}

inline Windows::UI::Color Colors::Aqua()
{
	return GetActivationFactory<Colors, IColorsStatics>().Aqua();
}

inline Windows::UI::Color Colors::Aquamarine()
{
	return GetActivationFactory<Colors, IColorsStatics>().Aquamarine();
}

inline Windows::UI::Color Colors::Azure()
{
	return GetActivationFactory<Colors, IColorsStatics>().Azure();
}

inline Windows::UI::Color Colors::Beige()
{
	return GetActivationFactory<Colors, IColorsStatics>().Beige();
}

inline Windows::UI::Color Colors::Bisque()
{
	return GetActivationFactory<Colors, IColorsStatics>().Bisque();
}

inline Windows::UI::Color Colors::Black()
{
	return GetActivationFactory<Colors, IColorsStatics>().Black();
}

inline Windows::UI::Color Colors::BlanchedAlmond()
{
	return GetActivationFactory<Colors, IColorsStatics>().BlanchedAlmond();
}

inline Windows::UI::Color Colors::Blue()
{
	return GetActivationFactory<Colors, IColorsStatics>().Blue();
}

inline Windows::UI::Color Colors::BlueViolet()
{
	return GetActivationFactory<Colors, IColorsStatics>().BlueViolet();
}

inline Windows::UI::Color Colors::Brown()
{
	return GetActivationFactory<Colors, IColorsStatics>().Brown();
}

inline Windows::UI::Color Colors::BurlyWood()
{
	return GetActivationFactory<Colors, IColorsStatics>().BurlyWood();
}

inline Windows::UI::Color Colors::CadetBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().CadetBlue();
}

inline Windows::UI::Color Colors::Chartreuse()
{
	return GetActivationFactory<Colors, IColorsStatics>().Chartreuse();
}

inline Windows::UI::Color Colors::Chocolate()
{
	return GetActivationFactory<Colors, IColorsStatics>().Chocolate();
}

inline Windows::UI::Color Colors::Coral()
{
	return GetActivationFactory<Colors, IColorsStatics>().Coral();
}

inline Windows::UI::Color Colors::CornflowerBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().CornflowerBlue();
}

inline Windows::UI::Color Colors::Cornsilk()
{
	return GetActivationFactory<Colors, IColorsStatics>().Cornsilk();
}

inline Windows::UI::Color Colors::Crimson()
{
	return GetActivationFactory<Colors, IColorsStatics>().Crimson();
}

inline Windows::UI::Color Colors::Cyan()
{
	return GetActivationFactory<Colors, IColorsStatics>().Cyan();
}

inline Windows::UI::Color Colors::DarkBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkBlue();
}

inline Windows::UI::Color Colors::DarkCyan()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkCyan();
}

inline Windows::UI::Color Colors::DarkGoldenrod()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkGoldenrod();
}

inline Windows::UI::Color Colors::DarkGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkGray();
}

inline Windows::UI::Color Colors::DarkGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkGreen();
}

inline Windows::UI::Color Colors::DarkKhaki()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkKhaki();
}

inline Windows::UI::Color Colors::DarkMagenta()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkMagenta();
}

inline Windows::UI::Color Colors::DarkOliveGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkOliveGreen();
}

inline Windows::UI::Color Colors::DarkOrange()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkOrange();
}

inline Windows::UI::Color Colors::DarkOrchid()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkOrchid();
}

inline Windows::UI::Color Colors::DarkRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkRed();
}

inline Windows::UI::Color Colors::DarkSalmon()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSalmon();
}

inline Windows::UI::Color Colors::DarkSeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSeaGreen();
}

inline Windows::UI::Color Colors::DarkSlateBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSlateBlue();
}

inline Windows::UI::Color Colors::DarkSlateGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSlateGray();
}

inline Windows::UI::Color Colors::DarkTurquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkTurquoise();
}

inline Windows::UI::Color Colors::DarkViolet()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkViolet();
}

inline Windows::UI::Color Colors::DeepPink()
{
	return GetActivationFactory<Colors, IColorsStatics>().DeepPink();
}

inline Windows::UI::Color Colors::DeepSkyBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DeepSkyBlue();
}

inline Windows::UI::Color Colors::DimGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().DimGray();
}

inline Windows::UI::Color Colors::DodgerBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DodgerBlue();
}

inline Windows::UI::Color Colors::Firebrick()
{
	return GetActivationFactory<Colors, IColorsStatics>().Firebrick();
}

inline Windows::UI::Color Colors::FloralWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().FloralWhite();
}

inline Windows::UI::Color Colors::ForestGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().ForestGreen();
}

inline Windows::UI::Color Colors::Fuchsia()
{
	return GetActivationFactory<Colors, IColorsStatics>().Fuchsia();
}

inline Windows::UI::Color Colors::Gainsboro()
{
	return GetActivationFactory<Colors, IColorsStatics>().Gainsboro();
}

inline Windows::UI::Color Colors::GhostWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().GhostWhite();
}

inline Windows::UI::Color Colors::Gold()
{
	return GetActivationFactory<Colors, IColorsStatics>().Gold();
}

inline Windows::UI::Color Colors::Goldenrod()
{
	return GetActivationFactory<Colors, IColorsStatics>().Goldenrod();
}

inline Windows::UI::Color Colors::Gray()
{
	return GetActivationFactory<Colors, IColorsStatics>().Gray();
}

inline Windows::UI::Color Colors::Green()
{
	return GetActivationFactory<Colors, IColorsStatics>().Green();
}

inline Windows::UI::Color Colors::GreenYellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().GreenYellow();
}

inline Windows::UI::Color Colors::Honeydew()
{
	return GetActivationFactory<Colors, IColorsStatics>().Honeydew();
}

inline Windows::UI::Color Colors::HotPink()
{
	return GetActivationFactory<Colors, IColorsStatics>().HotPink();
}

inline Windows::UI::Color Colors::IndianRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().IndianRed();
}

inline Windows::UI::Color Colors::Indigo()
{
	return GetActivationFactory<Colors, IColorsStatics>().Indigo();
}

inline Windows::UI::Color Colors::Ivory()
{
	return GetActivationFactory<Colors, IColorsStatics>().Ivory();
}

inline Windows::UI::Color Colors::Khaki()
{
	return GetActivationFactory<Colors, IColorsStatics>().Khaki();
}

inline Windows::UI::Color Colors::Lavender()
{
	return GetActivationFactory<Colors, IColorsStatics>().Lavender();
}

inline Windows::UI::Color Colors::LavenderBlush()
{
	return GetActivationFactory<Colors, IColorsStatics>().LavenderBlush();
}

inline Windows::UI::Color Colors::LawnGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LawnGreen();
}

inline Windows::UI::Color Colors::LemonChiffon()
{
	return GetActivationFactory<Colors, IColorsStatics>().LemonChiffon();
}

inline Windows::UI::Color Colors::LightBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightBlue();
}

inline Windows::UI::Color Colors::LightCoral()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightCoral();
}

inline Windows::UI::Color Colors::LightCyan()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightCyan();
}

inline Windows::UI::Color Colors::LightGoldenrodYellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightGoldenrodYellow();
}

inline Windows::UI::Color Colors::LightGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightGreen();
}

inline Windows::UI::Color Colors::LightGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightGray();
}

inline Windows::UI::Color Colors::LightPink()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightPink();
}

inline Windows::UI::Color Colors::LightSalmon()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSalmon();
}

inline Windows::UI::Color Colors::LightSeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSeaGreen();
}

inline Windows::UI::Color Colors::LightSkyBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSkyBlue();
}

inline Windows::UI::Color Colors::LightSlateGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSlateGray();
}

inline Windows::UI::Color Colors::LightSteelBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSteelBlue();
}

inline Windows::UI::Color Colors::LightYellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightYellow();
}

inline Windows::UI::Color Colors::Lime()
{
	return GetActivationFactory<Colors, IColorsStatics>().Lime();
}

inline Windows::UI::Color Colors::LimeGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LimeGreen();
}

inline Windows::UI::Color Colors::Linen()
{
	return GetActivationFactory<Colors, IColorsStatics>().Linen();
}

inline Windows::UI::Color Colors::Magenta()
{
	return GetActivationFactory<Colors, IColorsStatics>().Magenta();
}

inline Windows::UI::Color Colors::Maroon()
{
	return GetActivationFactory<Colors, IColorsStatics>().Maroon();
}

inline Windows::UI::Color Colors::MediumAquamarine()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumAquamarine();
}

inline Windows::UI::Color Colors::MediumBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumBlue();
}

inline Windows::UI::Color Colors::MediumOrchid()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumOrchid();
}

inline Windows::UI::Color Colors::MediumPurple()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumPurple();
}

inline Windows::UI::Color Colors::MediumSeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumSeaGreen();
}

inline Windows::UI::Color Colors::MediumSlateBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumSlateBlue();
}

inline Windows::UI::Color Colors::MediumSpringGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumSpringGreen();
}

inline Windows::UI::Color Colors::MediumTurquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumTurquoise();
}

inline Windows::UI::Color Colors::MediumVioletRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumVioletRed();
}

inline Windows::UI::Color Colors::MidnightBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().MidnightBlue();
}

inline Windows::UI::Color Colors::MintCream()
{
	return GetActivationFactory<Colors, IColorsStatics>().MintCream();
}

inline Windows::UI::Color Colors::MistyRose()
{
	return GetActivationFactory<Colors, IColorsStatics>().MistyRose();
}

inline Windows::UI::Color Colors::Moccasin()
{
	return GetActivationFactory<Colors, IColorsStatics>().Moccasin();
}

inline Windows::UI::Color Colors::NavajoWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().NavajoWhite();
}

inline Windows::UI::Color Colors::Navy()
{
	return GetActivationFactory<Colors, IColorsStatics>().Navy();
}

inline Windows::UI::Color Colors::OldLace()
{
	return GetActivationFactory<Colors, IColorsStatics>().OldLace();
}

inline Windows::UI::Color Colors::Olive()
{
	return GetActivationFactory<Colors, IColorsStatics>().Olive();
}

inline Windows::UI::Color Colors::OliveDrab()
{
	return GetActivationFactory<Colors, IColorsStatics>().OliveDrab();
}

inline Windows::UI::Color Colors::Orange()
{
	return GetActivationFactory<Colors, IColorsStatics>().Orange();
}

inline Windows::UI::Color Colors::OrangeRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().OrangeRed();
}

inline Windows::UI::Color Colors::Orchid()
{
	return GetActivationFactory<Colors, IColorsStatics>().Orchid();
}

inline Windows::UI::Color Colors::PaleGoldenrod()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleGoldenrod();
}

inline Windows::UI::Color Colors::PaleGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleGreen();
}

inline Windows::UI::Color Colors::PaleTurquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleTurquoise();
}

inline Windows::UI::Color Colors::PaleVioletRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleVioletRed();
}

inline Windows::UI::Color Colors::PapayaWhip()
{
	return GetActivationFactory<Colors, IColorsStatics>().PapayaWhip();
}

inline Windows::UI::Color Colors::PeachPuff()
{
	return GetActivationFactory<Colors, IColorsStatics>().PeachPuff();
}

inline Windows::UI::Color Colors::Peru()
{
	return GetActivationFactory<Colors, IColorsStatics>().Peru();
}

inline Windows::UI::Color Colors::Pink()
{
	return GetActivationFactory<Colors, IColorsStatics>().Pink();
}

inline Windows::UI::Color Colors::Plum()
{
	return GetActivationFactory<Colors, IColorsStatics>().Plum();
}

inline Windows::UI::Color Colors::PowderBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().PowderBlue();
}

inline Windows::UI::Color Colors::Purple()
{
	return GetActivationFactory<Colors, IColorsStatics>().Purple();
}

inline Windows::UI::Color Colors::Red()
{
	return GetActivationFactory<Colors, IColorsStatics>().Red();
}

inline Windows::UI::Color Colors::RosyBrown()
{
	return GetActivationFactory<Colors, IColorsStatics>().RosyBrown();
}

inline Windows::UI::Color Colors::RoyalBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().RoyalBlue();
}

inline Windows::UI::Color Colors::SaddleBrown()
{
	return GetActivationFactory<Colors, IColorsStatics>().SaddleBrown();
}

inline Windows::UI::Color Colors::Salmon()
{
	return GetActivationFactory<Colors, IColorsStatics>().Salmon();
}

inline Windows::UI::Color Colors::SandyBrown()
{
	return GetActivationFactory<Colors, IColorsStatics>().SandyBrown();
}

inline Windows::UI::Color Colors::SeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().SeaGreen();
}

inline Windows::UI::Color Colors::SeaShell()
{
	return GetActivationFactory<Colors, IColorsStatics>().SeaShell();
}

inline Windows::UI::Color Colors::Sienna()
{
	return GetActivationFactory<Colors, IColorsStatics>().Sienna();
}

inline Windows::UI::Color Colors::Silver()
{
	return GetActivationFactory<Colors, IColorsStatics>().Silver();
}

inline Windows::UI::Color Colors::SkyBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().SkyBlue();
}

inline Windows::UI::Color Colors::SlateBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().SlateBlue();
}

inline Windows::UI::Color Colors::SlateGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().SlateGray();
}

inline Windows::UI::Color Colors::Snow()
{
	return GetActivationFactory<Colors, IColorsStatics>().Snow();
}

inline Windows::UI::Color Colors::SpringGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().SpringGreen();
}

inline Windows::UI::Color Colors::SteelBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().SteelBlue();
}

inline Windows::UI::Color Colors::Tan()
{
	return GetActivationFactory<Colors, IColorsStatics>().Tan();
}

inline Windows::UI::Color Colors::Teal()
{
	return GetActivationFactory<Colors, IColorsStatics>().Teal();
}

inline Windows::UI::Color Colors::Thistle()
{
	return GetActivationFactory<Colors, IColorsStatics>().Thistle();
}

inline Windows::UI::Color Colors::Tomato()
{
	return GetActivationFactory<Colors, IColorsStatics>().Tomato();
}

inline Windows::UI::Color Colors::Transparent()
{
	return GetActivationFactory<Colors, IColorsStatics>().Transparent();
}

inline Windows::UI::Color Colors::Turquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().Turquoise();
}

inline Windows::UI::Color Colors::Violet()
{
	return GetActivationFactory<Colors, IColorsStatics>().Violet();
}

inline Windows::UI::Color Colors::Wheat()
{
	return GetActivationFactory<Colors, IColorsStatics>().Wheat();
}

inline Windows::UI::Color Colors::White()
{
	return GetActivationFactory<Colors, IColorsStatics>().White();
}

inline Windows::UI::Color Colors::WhiteSmoke()
{
	return GetActivationFactory<Colors, IColorsStatics>().WhiteSmoke();
}

inline Windows::UI::Color Colors::Yellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().Yellow();
}

inline Windows::UI::Color Colors::YellowGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().YellowGreen();
}

}}}

namespace Modern { namespace Windows { namespace UI { namespace ApplicationSettings {

inline SettingsCommand::SettingsCommand(IInspectable const & settingsCommandId, String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & handler) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<SettingsCommand, ISettingsCommandFactory>().Create(settingsCommandId, label, handler))
{}

template <unsigned S0> SettingsCommand::SettingsCommand(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & handler) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<SettingsCommand, ISettingsCommandFactory>().Create(settingsCommandId, label, handler))
{}

template <typename F> SettingsCommand::SettingsCommand(IInspectable const & settingsCommandId, String const & label, F handler) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<SettingsCommand, ISettingsCommandFactory>().Create(settingsCommandId, label, Windows::UI::Popups::UICommandInvokedHandler(handler)))
{}

template <unsigned S0, typename F> SettingsCommand::SettingsCommand(IInspectable const & settingsCommandId, wchar_t const (&label)[S0], F handler) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<SettingsCommand, ISettingsCommandFactory>().Create(settingsCommandId, label, Windows::UI::Popups::UICommandInvokedHandler(handler)))
{}

inline Windows::UI::ApplicationSettings::SettingsCommand SettingsCommand::AccountsCommand()
{
	return GetActivationFactory<SettingsCommand, ISettingsCommandStatics>().AccountsCommand();
}

inline Windows::UI::ApplicationSettings::SettingsPane SettingsPane::GetForCurrentView()
{
	return GetActivationFactory<SettingsPane, ISettingsPaneStatics>().GetForCurrentView();
}

inline void SettingsPane::Show()
{
	GetActivationFactory<SettingsPane, ISettingsPaneStatics>().Show();
}

inline Windows::UI::ApplicationSettings::SettingsEdgeLocation SettingsPane::Edge()
{
	return GetActivationFactory<SettingsPane, ISettingsPaneStatics>().Edge();
}

inline WebAccountProviderCommand::WebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler const & invoked) :
	Windows::UI::ApplicationSettings::IWebAccountProviderCommand(GetActivationFactory<WebAccountProviderCommand, IWebAccountProviderCommandFactory>().CreateWebAccountProviderCommand(webAccountProvider, invoked))
{}

template <typename F> WebAccountProviderCommand::WebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, F invoked) :
	Windows::UI::ApplicationSettings::IWebAccountProviderCommand(GetActivationFactory<WebAccountProviderCommand, IWebAccountProviderCommandFactory>().CreateWebAccountProviderCommand(webAccountProvider, Windows::UI::ApplicationSettings::WebAccountProviderCommandInvokedHandler(invoked)))
{}

inline WebAccountCommand::WebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler const & invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions const actions) :
	Windows::UI::ApplicationSettings::IWebAccountCommand(GetActivationFactory<WebAccountCommand, IWebAccountCommandFactory>().CreateWebAccountCommand(webAccount, invoked, actions))
{}

template <typename F> WebAccountCommand::WebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, F invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions const actions) :
	Windows::UI::ApplicationSettings::IWebAccountCommand(GetActivationFactory<WebAccountCommand, IWebAccountCommandFactory>().CreateWebAccountCommand(webAccount, Windows::UI::ApplicationSettings::WebAccountCommandInvokedHandler(invoked), actions))
{}

inline CredentialCommand::CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential) :
	Windows::UI::ApplicationSettings::ICredentialCommand(GetActivationFactory<CredentialCommand, ICredentialCommandFactory>().CreateCredentialCommand(passwordCredential))
{}

inline CredentialCommand::CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential, Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler const & deleted) :
	Windows::UI::ApplicationSettings::ICredentialCommand(GetActivationFactory<CredentialCommand, ICredentialCommandFactory>().CreateCredentialCommandWithHandler(passwordCredential, deleted))
{}

template <typename F> CredentialCommand::CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential, F deleted) :
	Windows::UI::ApplicationSettings::ICredentialCommand(GetActivationFactory<CredentialCommand, ICredentialCommandFactory>().CreateCredentialCommandWithHandler(passwordCredential, Windows::UI::ApplicationSettings::CredentialCommandCredentialDeletedHandler(deleted)))
{}

inline Windows::UI::ApplicationSettings::AccountsSettingsPane AccountsSettingsPane::GetForCurrentView()
{
	return GetActivationFactory<AccountsSettingsPane, IAccountsSettingsPaneStatics>().GetForCurrentView();
}

inline void AccountsSettingsPane::Show()
{
	GetActivationFactory<AccountsSettingsPane, IAccountsSettingsPaneStatics>().Show();
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core {

inline CoreCursor::CoreCursor(Windows::UI::Core::CoreCursorType const type, unsigned const id) :
	Windows::UI::Core::ICoreCursor(GetActivationFactory<CoreCursor, ICoreCursorFactory>().CreateCursor(type, id))
{}

inline Windows::UI::Core::CoreWindow CoreWindow::GetForCurrentThread()
{
	return GetActivationFactory<CoreWindow, ICoreWindowStatic>().GetForCurrentThread();
}

inline Windows::UI::Core::CoreWindowResizeManager CoreWindowResizeManager::GetForCurrentView()
{
	return GetActivationFactory<CoreWindowResizeManager, ICoreWindowResizeManagerStatics>().GetForCurrentView();
}

inline CoreWindowDialog::CoreWindowDialog() :
	Windows::UI::Core::ICoreWindowDialog(ActivateInstance<CoreWindowDialog>())
{}

inline CoreWindowDialog::CoreWindowDialog(String const & title) :
	Windows::UI::Core::ICoreWindowDialog(GetActivationFactory<CoreWindowDialog, ICoreWindowDialogFactory>().CreateWithTitle(title))
{}

template <unsigned S0> CoreWindowDialog::CoreWindowDialog(wchar_t const (&title)[S0]) :
	Windows::UI::Core::ICoreWindowDialog(GetActivationFactory<CoreWindowDialog, ICoreWindowDialogFactory>().CreateWithTitle(title))
{}

inline CoreWindowFlyout::CoreWindowFlyout(Windows::Foundation::Point const & position) :
	Windows::UI::Core::ICoreWindowFlyout(GetActivationFactory<CoreWindowFlyout, ICoreWindowFlyoutFactory>().Create(position))
{}

inline CoreWindowFlyout::CoreWindowFlyout(Windows::Foundation::Point const & position, String const & title) :
	Windows::UI::Core::ICoreWindowFlyout(GetActivationFactory<CoreWindowFlyout, ICoreWindowFlyoutFactory>().CreateWithTitle(position, title))
{}

template <unsigned S0> CoreWindowFlyout::CoreWindowFlyout(Windows::Foundation::Point const & position, wchar_t const (&title)[S0]) :
	Windows::UI::Core::ICoreWindowFlyout(GetActivationFactory<CoreWindowFlyout, ICoreWindowFlyoutFactory>().CreateWithTitle(position, title))
{}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

inline AnimationDescription::AnimationDescription(Windows::UI::Core::AnimationMetrics::AnimationEffect const effect, Windows::UI::Core::AnimationMetrics::AnimationEffectTarget const target) :
	Windows::UI::Core::AnimationMetrics::IAnimationDescription(GetActivationFactory<AnimationDescription, IAnimationDescriptionFactory>().CreateInstance(effect, target))
{}

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input {

inline Windows::UI::Input::EdgeGesture EdgeGesture::GetForCurrentView()
{
	return GetActivationFactory<EdgeGesture, IEdgeGestureStatics>().GetForCurrentView();
}

inline GestureRecognizer::GestureRecognizer() :
	Windows::UI::Input::IGestureRecognizer(ActivateInstance<GestureRecognizer>())
{}

inline Windows::UI::Input::PointerPoint PointerPoint::GetCurrentPoint(unsigned const pointerId)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetCurrentPoint(pointerId);
}

inline Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> PointerPoint::GetIntermediatePoints(unsigned const pointerId)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetIntermediatePoints(pointerId);
}

inline Windows::UI::Input::PointerPoint PointerPoint::GetCurrentPoint(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetCurrentPoint(pointerId, transform);
}

inline Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> PointerPoint::GetIntermediatePoints(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetIntermediatePoints(pointerId, transform);
}

inline Windows::UI::Input::PointerVisualizationSettings PointerVisualizationSettings::GetForCurrentView()
{
	return GetActivationFactory<PointerVisualizationSettings, IPointerVisualizationSettingsStatics>().GetForCurrentView();
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Input { namespace Inking {

inline InkDrawingAttributes::InkDrawingAttributes() :
	Windows::UI::Input::Inking::IInkDrawingAttributes(ActivateInstance<InkDrawingAttributes>())
{}

inline InkStrokeBuilder::InkStrokeBuilder() :
	Windows::UI::Input::Inking::IInkStrokeBuilder(ActivateInstance<InkStrokeBuilder>())
{}

inline InkStrokeContainer::InkStrokeContainer() :
	Windows::UI::Input::Inking::IInkStrokeContainer(ActivateInstance<InkStrokeContainer>())
{}

inline InkRecognizerContainer::InkRecognizerContainer() :
	Windows::UI::Input::Inking::IInkRecognizerContainer(ActivateInstance<InkRecognizerContainer>())
{}

inline InkManager::InkManager() :
	Windows::UI::Input::Inking::IInkManager(ActivateInstance<InkManager>())
{}

}}}}}

namespace Modern { namespace Windows { namespace UI { namespace Notifications {

inline TileNotification::TileNotification(Windows::Data::Xml::Dom::XmlDocument const & content) :
	Windows::UI::Notifications::ITileNotification(GetActivationFactory<TileNotification, ITileNotificationFactory>().CreateTileNotification(content))
{}

inline ScheduledTileNotification::ScheduledTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) :
	Windows::UI::Notifications::IScheduledTileNotification(GetActivationFactory<ScheduledTileNotification, IScheduledTileNotificationFactory>().CreateScheduledTileNotification(content, deliveryTime))
{}

inline BadgeNotification::BadgeNotification(Windows::Data::Xml::Dom::XmlDocument const & content) :
	Windows::UI::Notifications::IBadgeNotification(GetActivationFactory<BadgeNotification, IBadgeNotificationFactory>().CreateBadgeNotification(content))
{}

inline ToastNotification::ToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content) :
	Windows::UI::Notifications::IToastNotification(GetActivationFactory<ToastNotification, IToastNotificationFactory>().CreateToastNotification(content))
{}

inline ScheduledToastNotification::ScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) :
	Windows::UI::Notifications::IScheduledToastNotification(GetActivationFactory<ScheduledToastNotification, IScheduledToastNotificationFactory>().CreateScheduledToastNotification(content, deliveryTime))
{}

inline ScheduledToastNotification::ScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime, Windows::Foundation::TimeSpan const & snoozeInterval, unsigned const maximumSnoozeCount) :
	Windows::UI::Notifications::IScheduledToastNotification(GetActivationFactory<ScheduledToastNotification, IScheduledToastNotificationFactory>().CreateScheduledToastNotification(content, deliveryTime, snoozeInterval, maximumSnoozeCount))
{}

inline Windows::UI::Notifications::TileUpdater TileUpdateManager::CreateTileUpdaterForApplication()
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().CreateTileUpdaterForApplication();
}

inline Windows::UI::Notifications::TileUpdater TileUpdateManager::CreateTileUpdaterForApplication(String const & applicationId)
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().CreateTileUpdaterForApplication(applicationId);
}

template <unsigned S0> Windows::UI::Notifications::TileUpdater TileUpdateManager::CreateTileUpdaterForApplication(wchar_t const (&applicationId)[S0])
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().CreateTileUpdaterForApplication(applicationId);
}

inline Windows::UI::Notifications::TileUpdater TileUpdateManager::CreateTileUpdaterForSecondaryTile(String const & tileId)
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().CreateTileUpdaterForSecondaryTile(tileId);
}

template <unsigned S0> Windows::UI::Notifications::TileUpdater TileUpdateManager::CreateTileUpdaterForSecondaryTile(wchar_t const (&tileId)[S0])
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().CreateTileUpdaterForSecondaryTile(tileId);
}

inline Windows::Data::Xml::Dom::XmlDocument TileUpdateManager::GetTemplateContent(Windows::UI::Notifications::TileTemplateType const type)
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().GetTemplateContent(type);
}

inline Windows::UI::Notifications::BadgeUpdater BadgeUpdateManager::CreateBadgeUpdaterForApplication()
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().CreateBadgeUpdaterForApplication();
}

inline Windows::UI::Notifications::BadgeUpdater BadgeUpdateManager::CreateBadgeUpdaterForApplication(String const & applicationId)
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().CreateBadgeUpdaterForApplication(applicationId);
}

template <unsigned S0> Windows::UI::Notifications::BadgeUpdater BadgeUpdateManager::CreateBadgeUpdaterForApplication(wchar_t const (&applicationId)[S0])
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().CreateBadgeUpdaterForApplication(applicationId);
}

inline Windows::UI::Notifications::BadgeUpdater BadgeUpdateManager::CreateBadgeUpdaterForSecondaryTile(String const & tileId)
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().CreateBadgeUpdaterForSecondaryTile(tileId);
}

template <unsigned S0> Windows::UI::Notifications::BadgeUpdater BadgeUpdateManager::CreateBadgeUpdaterForSecondaryTile(wchar_t const (&tileId)[S0])
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().CreateBadgeUpdaterForSecondaryTile(tileId);
}

inline Windows::Data::Xml::Dom::XmlDocument BadgeUpdateManager::GetTemplateContent(Windows::UI::Notifications::BadgeTemplateType const type)
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().GetTemplateContent(type);
}

inline Windows::UI::Notifications::ToastNotifier ToastNotificationManager::CreateToastNotifier()
{
	return GetActivationFactory<ToastNotificationManager, IToastNotificationManagerStatics>().CreateToastNotifier();
}

inline Windows::UI::Notifications::ToastNotifier ToastNotificationManager::CreateToastNotifier(String const & applicationId)
{
	return GetActivationFactory<ToastNotificationManager, IToastNotificationManagerStatics>().CreateToastNotifier(applicationId);
}

template <unsigned S0> Windows::UI::Notifications::ToastNotifier ToastNotificationManager::CreateToastNotifier(wchar_t const (&applicationId)[S0])
{
	return GetActivationFactory<ToastNotificationManager, IToastNotificationManagerStatics>().CreateToastNotifier(applicationId);
}

inline Windows::Data::Xml::Dom::XmlDocument ToastNotificationManager::GetTemplateContent(Windows::UI::Notifications::ToastTemplateType const type)
{
	return GetActivationFactory<ToastNotificationManager, IToastNotificationManagerStatics>().GetTemplateContent(type);
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Popups {

inline MessageDialog::MessageDialog(String const & content) :
	Windows::UI::Popups::IMessageDialog(GetActivationFactory<MessageDialog, IMessageDialogFactory>().Create(content))
{}

template <unsigned S0> MessageDialog::MessageDialog(wchar_t const (&content)[S0]) :
	Windows::UI::Popups::IMessageDialog(GetActivationFactory<MessageDialog, IMessageDialogFactory>().Create(content))
{}

inline MessageDialog::MessageDialog(String const & content, String const & title) :
	Windows::UI::Popups::IMessageDialog(GetActivationFactory<MessageDialog, IMessageDialogFactory>().CreateWithTitle(content, title))
{}

template <unsigned S0, unsigned S1> MessageDialog::MessageDialog(wchar_t const (&content)[S0], wchar_t const (&title)[S1]) :
	Windows::UI::Popups::IMessageDialog(GetActivationFactory<MessageDialog, IMessageDialogFactory>().CreateWithTitle(content, title))
{}

inline UICommand::UICommand() :
	Windows::UI::Popups::IUICommand(ActivateInstance<UICommand>())
{}

inline UICommand::UICommand(String const & label) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().Create(label))
{}

template <unsigned S0> UICommand::UICommand(wchar_t const (&label)[S0]) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().Create(label))
{}

inline UICommand::UICommand(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandler(label, action))
{}

template <unsigned S0> UICommand::UICommand(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandler(label, action))
{}

template <typename F> UICommand::UICommand(String const & label, F action) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandler(label, Windows::UI::Popups::UICommandInvokedHandler(action)))
{}

template <unsigned S0, typename F> UICommand::UICommand(wchar_t const (&label)[S0], F action) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandler(label, Windows::UI::Popups::UICommandInvokedHandler(action)))
{}

inline UICommand::UICommand(String const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandlerAndId(label, action, commandId))
{}

template <unsigned S0> UICommand::UICommand(wchar_t const (&label)[S0], Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandlerAndId(label, action, commandId))
{}

template <typename F> UICommand::UICommand(String const & label, F action, IInspectable const & commandId) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandlerAndId(label, Windows::UI::Popups::UICommandInvokedHandler(action), commandId))
{}

template <unsigned S0, typename F> UICommand::UICommand(wchar_t const (&label)[S0], F action, IInspectable const & commandId) :
	Windows::UI::Popups::IUICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandlerAndId(label, Windows::UI::Popups::UICommandInvokedHandler(action), commandId))
{}

inline UICommandSeparator::UICommandSeparator() :
	Windows::UI::Popups::IUICommand(ActivateInstance<UICommandSeparator>())
{}

inline PopupMenu::PopupMenu() :
	Windows::UI::Popups::IPopupMenu(ActivateInstance<PopupMenu>())
{}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace StartScreen {

inline SecondaryTile::SecondaryTile() :
	Windows::UI::StartScreen::ISecondaryTile(ActivateInstance<SecondaryTile>())
{}

inline SecondaryTile::SecondaryTile(String const & tileId) :
	Windows::UI::StartScreen::ISecondaryTile(GetActivationFactory<SecondaryTile, ISecondaryTileFactory>().CreateWithId(tileId))
{}

template <unsigned S0> SecondaryTile::SecondaryTile(wchar_t const (&tileId)[S0]) :
	Windows::UI::StartScreen::ISecondaryTile(GetActivationFactory<SecondaryTile, ISecondaryTileFactory>().CreateWithId(tileId))
{}

inline SecondaryTile::SecondaryTile(String const & tileId, String const & displayName, String const & arguments, Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize const desiredSize) :
	Windows::UI::StartScreen::ISecondaryTile(GetActivationFactory<SecondaryTile, ISecondaryTileFactory2>().CreateMinimalTile(tileId, displayName, arguments, square150x150Logo, desiredSize))
{}

template <unsigned S0, unsigned S1, unsigned S2> SecondaryTile::SecondaryTile(wchar_t const (&tileId)[S0], wchar_t const (&displayName)[S1], wchar_t const (&arguments)[S2], Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize const desiredSize) :
	Windows::UI::StartScreen::ISecondaryTile(GetActivationFactory<SecondaryTile, ISecondaryTileFactory2>().CreateMinimalTile(tileId, displayName, arguments, square150x150Logo, desiredSize))
{}

inline bool SecondaryTile::Exists(String const & tileId)
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().Exists(tileId);
}

template <unsigned S0> bool SecondaryTile::Exists(wchar_t const (&tileId)[S0])
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().Exists(tileId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> SecondaryTile::FindAllAsync()
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> SecondaryTile::FindAllAsync(String const & applicationId)
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().FindAllAsync(applicationId);
}

template <unsigned S0> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> SecondaryTile::FindAllAsync(wchar_t const (&applicationId)[S0])
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().FindAllAsync(applicationId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> SecondaryTile::FindAllForPackageAsync()
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().FindAllForPackageAsync();
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace Text {

inline Windows::UI::Color TextConstants::AutoColor()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().AutoColor();
}

inline int TextConstants::MinUnitCount()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().MinUnitCount();
}

inline int TextConstants::MaxUnitCount()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().MaxUnitCount();
}

inline Windows::UI::Color TextConstants::UndefinedColor()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedColor();
}

inline float TextConstants::UndefinedFloatValue()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedFloatValue();
}

inline int TextConstants::UndefinedInt32Value()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedInt32Value();
}

inline Windows::UI::Text::FontStretch TextConstants::UndefinedFontStretch()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedFontStretch();
}

inline Windows::UI::Text::FontStyle TextConstants::UndefinedFontStyle()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedFontStyle();
}

inline Windows::UI::Text::FontWeight FontWeights::Black()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Black();
}

inline Windows::UI::Text::FontWeight FontWeights::Bold()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Bold();
}

inline Windows::UI::Text::FontWeight FontWeights::ExtraBlack()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().ExtraBlack();
}

inline Windows::UI::Text::FontWeight FontWeights::ExtraBold()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().ExtraBold();
}

inline Windows::UI::Text::FontWeight FontWeights::ExtraLight()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().ExtraLight();
}

inline Windows::UI::Text::FontWeight FontWeights::Light()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Light();
}

inline Windows::UI::Text::FontWeight FontWeights::Medium()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Medium();
}

inline Windows::UI::Text::FontWeight FontWeights::Normal()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Normal();
}

inline Windows::UI::Text::FontWeight FontWeights::SemiBold()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().SemiBold();
}

inline Windows::UI::Text::FontWeight FontWeights::SemiLight()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().SemiLight();
}

inline Windows::UI::Text::FontWeight FontWeights::Thin()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Thin();
}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace ViewManagement {

inline int ApplicationView::GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window)
{
	return GetActivationFactory<ApplicationView, IApplicationViewInteropStatics>().GetApplicationViewIdForWindow(window);
}

inline Windows::UI::ViewManagement::ApplicationView ApplicationView::GetForCurrentView()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics2>().GetForCurrentView();
}

inline bool ApplicationView::TerminateAppOnFinalViewClose()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics2>().TerminateAppOnFinalViewClose();
}

inline void ApplicationView::TerminateAppOnFinalViewClose(bool const value)
{
	GetActivationFactory<ApplicationView, IApplicationViewStatics2>().TerminateAppOnFinalViewClose(value);
}

inline void ApplicationViewSwitcher::DisableShowingMainViewOnActivation()
{
	GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().DisableShowingMainViewOnActivation();
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::TryShowAsStandaloneAsync(int const viewId)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().TryShowAsStandaloneAsync(viewId);
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().TryShowAsStandaloneAsync(viewId, sizePreference);
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference, int const anchorViewId, Windows::UI::ViewManagement::ViewSizePreference const anchorSizePreference)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().TryShowAsStandaloneAsync(viewId, sizePreference, anchorViewId, anchorSizePreference);
}

inline Windows::Foundation::IAsyncAction ApplicationViewSwitcher::SwitchAsync(int const viewId)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().SwitchAsync(viewId);
}

inline Windows::Foundation::IAsyncAction ApplicationViewSwitcher::SwitchAsync(int const toViewId, int const fromViewId)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().SwitchAsync(toViewId, fromViewId);
}

inline Windows::Foundation::IAsyncAction ApplicationViewSwitcher::SwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().SwitchAsync(toViewId, fromViewId, options);
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::PrepareForCustomAnimatedSwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().PrepareForCustomAnimatedSwitchAsync(toViewId, fromViewId, options);
}

inline Windows::Foundation::IAsyncAction ProjectionManager::StartProjectingAsync(int const projectionViewId, int const anchorViewId)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().StartProjectingAsync(projectionViewId, anchorViewId);
}

inline Windows::Foundation::IAsyncAction ProjectionManager::SwapDisplaysForViewsAsync(int const projectionViewId, int const anchorViewId)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().SwapDisplaysForViewsAsync(projectionViewId, anchorViewId);
}

inline Windows::Foundation::IAsyncAction ProjectionManager::StopProjectingAsync(int const projectionViewId, int const anchorViewId)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().StopProjectingAsync(projectionViewId, anchorViewId);
}

inline bool ProjectionManager::ProjectionDisplayAvailable()
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailable();
}

inline EventRegistrationToken ProjectionManager::ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailableChanged(handler);
}

template <typename F> EventRegistrationToken ProjectionManager::ProjectionDisplayAvailableChanged(F handler)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailableChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void ProjectionManager::ProjectionDisplayAvailableChanged(EventRegistrationToken const token)
{
	GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailableChanged(token);
}

inline Windows::UI::ViewManagement::InputPane InputPane::GetForCurrentView()
{
	return GetActivationFactory<InputPane, IInputPaneStatics>().GetForCurrentView();
}

inline AccessibilitySettings::AccessibilitySettings() :
	Windows::UI::ViewManagement::IAccessibilitySettings(ActivateInstance<AccessibilitySettings>())
{}

inline UISettings::UISettings() :
	Windows::UI::ViewManagement::IUISettings(ActivateInstance<UISettings>())
{}

}}}}

namespace Modern { namespace Windows { namespace UI { namespace WebUI {

inline Windows::UI::WebUI::IWebUIBackgroundTaskInstance WebUIBackgroundTaskInstance::Current()
{
	return GetActivationFactory<WebUIBackgroundTaskInstance, IWebUIBackgroundTaskInstanceStatics>().Current();
}

inline EventRegistrationToken WebUIApplication::Activated(Windows::UI::WebUI::IActivatedEventHandler const & handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Activated(handler);
}

template <typename F> EventRegistrationToken WebUIApplication::Activated(F handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Activated(Windows::UI::WebUI::ActivatedEventHandler(handler));
}

inline void WebUIApplication::Activated(EventRegistrationToken const token)
{
	GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Activated(token);
}

inline EventRegistrationToken WebUIApplication::Suspending(Windows::UI::WebUI::ISuspendingEventHandler const & handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Suspending(handler);
}

template <typename F> EventRegistrationToken WebUIApplication::Suspending(F handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Suspending(Windows::UI::WebUI::SuspendingEventHandler(handler));
}

inline void WebUIApplication::Suspending(EventRegistrationToken const token)
{
	GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Suspending(token);
}

inline EventRegistrationToken WebUIApplication::Resuming(Windows::UI::WebUI::IResumingEventHandler const & handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Resuming(handler);
}

template <typename F> EventRegistrationToken WebUIApplication::Resuming(F handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Resuming(Windows::UI::WebUI::ResumingEventHandler(handler));
}

inline void WebUIApplication::Resuming(EventRegistrationToken const token)
{
	GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Resuming(token);
}

inline EventRegistrationToken WebUIApplication::Navigated(Windows::UI::WebUI::INavigatedEventHandler const & handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Navigated(handler);
}

template <typename F> EventRegistrationToken WebUIApplication::Navigated(F handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Navigated(Windows::UI::WebUI::NavigatedEventHandler(handler));
}

inline void WebUIApplication::Navigated(EventRegistrationToken const token)
{
	GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Navigated(token);
}

}}}}

namespace Modern { namespace Windows { namespace Web {

inline Windows::Web::WebErrorStatus WebError::GetStatus(int const hresult)
{
	return GetActivationFactory<WebError, IWebErrorStatics>().GetStatus(hresult);
}

}}}

namespace Modern { namespace Windows { namespace Web { namespace AtomPub {

inline AtomPubClient::AtomPubClient() :
	Windows::Web::AtomPub::IAtomPubClient(ActivateInstance<AtomPubClient>())
{}

inline AtomPubClient::AtomPubClient(Windows::Security::Credentials::PasswordCredential const & serverCredential) :
	Windows::Web::AtomPub::IAtomPubClient(GetActivationFactory<AtomPubClient, IAtomPubClientFactory>().CreateAtomPubClientWithCredentials(serverCredential))
{}

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http {

inline HttpMethod::HttpMethod(String const & method) :
	Windows::Web::Http::IHttpMethod(GetActivationFactory<HttpMethod, IHttpMethodFactory>().Create(method))
{}

template <unsigned S0> HttpMethod::HttpMethod(wchar_t const (&method)[S0]) :
	Windows::Web::Http::IHttpMethod(GetActivationFactory<HttpMethod, IHttpMethodFactory>().Create(method))
{}

inline Windows::Web::Http::HttpMethod HttpMethod::Delete()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Delete();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Get()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Get();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Head()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Head();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Options()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Options();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Patch()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Patch();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Post()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Post();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Put()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Put();
}

inline HttpRequestMessage::HttpRequestMessage() :
	Windows::Web::Http::IHttpRequestMessage(ActivateInstance<HttpRequestMessage>())
{}

inline HttpRequestMessage::HttpRequestMessage(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri) :
	Windows::Web::Http::IHttpRequestMessage(GetActivationFactory<HttpRequestMessage, IHttpRequestMessageFactory>().Create(method, uri))
{}

inline HttpResponseMessage::HttpResponseMessage() :
	Windows::Web::Http::IHttpResponseMessage(ActivateInstance<HttpResponseMessage>())
{}

inline HttpResponseMessage::HttpResponseMessage(Windows::Web::Http::HttpStatusCode const statusCode) :
	Windows::Web::Http::IHttpResponseMessage(GetActivationFactory<HttpResponseMessage, IHttpResponseMessageFactory>().Create(statusCode))
{}

inline HttpClient::HttpClient() :
	Windows::Web::Http::IHttpClient(ActivateInstance<HttpClient>())
{}

inline HttpClient::HttpClient(Windows::Web::Http::Filters::IHttpFilter const & filter) :
	Windows::Web::Http::IHttpClient(GetActivationFactory<HttpClient, IHttpClientFactory>().Create(filter))
{}

inline HttpCookie::HttpCookie(String const & name, String const & domain, String const & path) :
	Windows::Web::Http::IHttpCookie(GetActivationFactory<HttpCookie, IHttpCookieFactory>().Create(name, domain, path))
{}

template <unsigned S0, unsigned S1, unsigned S2> HttpCookie::HttpCookie(wchar_t const (&name)[S0], wchar_t const (&domain)[S1], wchar_t const (&path)[S2]) :
	Windows::Web::Http::IHttpCookie(GetActivationFactory<HttpCookie, IHttpCookieFactory>().Create(name, domain, path))
{}

inline HttpStringContent::HttpStringContent(String const & content) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromString(content))
{}

template <unsigned S0> HttpStringContent::HttpStringContent(wchar_t const (&content)[S0]) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromString(content))
{}

inline HttpStringContent::HttpStringContent(String const & content, Windows::Storage::Streams::UnicodeEncoding const encoding) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromStringWithEncoding(content, encoding))
{}

template <unsigned S0> HttpStringContent::HttpStringContent(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromStringWithEncoding(content, encoding))
{}

inline HttpStringContent::HttpStringContent(String const & content, Windows::Storage::Streams::UnicodeEncoding const encoding, String const & mediaType) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromStringWithEncodingAndMediaType(content, encoding, mediaType))
{}

template <unsigned S0, unsigned S1> HttpStringContent::HttpStringContent(wchar_t const (&content)[S0], Windows::Storage::Streams::UnicodeEncoding const encoding, wchar_t const (&mediaType)[S1]) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromStringWithEncodingAndMediaType(content, encoding, mediaType))
{}

inline HttpBufferContent::HttpBufferContent(Windows::Storage::Streams::IBuffer const & content) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpBufferContent, IHttpBufferContentFactory>().CreateFromBuffer(content))
{}

inline HttpBufferContent::HttpBufferContent(Windows::Storage::Streams::IBuffer const & content, unsigned const offset, unsigned const count) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpBufferContent, IHttpBufferContentFactory>().CreateFromBufferWithOffset(content, offset, count))
{}

inline HttpStreamContent::HttpStreamContent(Windows::Storage::Streams::IInputStream const & content) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpStreamContent, IHttpStreamContentFactory>().CreateFromInputStream(content))
{}

inline HttpFormUrlEncodedContent::HttpFormUrlEncodedContent(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpFormUrlEncodedContent, IHttpFormUrlEncodedContentFactory>().Create(content))
{}

inline HttpMultipartContent::HttpMultipartContent() :
	Windows::Web::Http::IHttpContent(ActivateInstance<HttpMultipartContent>())
{}

inline HttpMultipartContent::HttpMultipartContent(String const & subtype) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpMultipartContent, IHttpMultipartContentFactory>().CreateWithSubtype(subtype))
{}

template <unsigned S0> HttpMultipartContent::HttpMultipartContent(wchar_t const (&subtype)[S0]) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpMultipartContent, IHttpMultipartContentFactory>().CreateWithSubtype(subtype))
{}

inline HttpMultipartContent::HttpMultipartContent(String const & subtype, String const & boundary) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpMultipartContent, IHttpMultipartContentFactory>().CreateWithSubtypeAndBoundary(subtype, boundary))
{}

template <unsigned S0, unsigned S1> HttpMultipartContent::HttpMultipartContent(wchar_t const (&subtype)[S0], wchar_t const (&boundary)[S1]) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpMultipartContent, IHttpMultipartContentFactory>().CreateWithSubtypeAndBoundary(subtype, boundary))
{}

inline HttpMultipartFormDataContent::HttpMultipartFormDataContent() :
	Windows::Web::Http::IHttpContent(ActivateInstance<HttpMultipartFormDataContent>())
{}

inline HttpMultipartFormDataContent::HttpMultipartFormDataContent(String const & boundary) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpMultipartFormDataContent, IHttpMultipartFormDataContentFactory>().CreateWithBoundary(boundary))
{}

template <unsigned S0> HttpMultipartFormDataContent::HttpMultipartFormDataContent(wchar_t const (&boundary)[S0]) :
	Windows::Web::Http::IHttpContent(GetActivationFactory<HttpMultipartFormDataContent, IHttpMultipartFormDataContentFactory>().CreateWithBoundary(boundary))
{}

}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Filters {

inline HttpBaseProtocolFilter::HttpBaseProtocolFilter() :
	Windows::Web::Http::Filters::IHttpBaseProtocolFilter(ActivateInstance<HttpBaseProtocolFilter>())
{}

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Http { namespace Headers {

inline HttpContentHeaderCollection::HttpContentHeaderCollection() :
	Windows::Web::Http::Headers::IHttpContentHeaderCollection(ActivateInstance<HttpContentHeaderCollection>())
{}

inline HttpContentDispositionHeaderValue::HttpContentDispositionHeaderValue(String const & dispositionType) :
	Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue(GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueFactory>().Create(dispositionType))
{}

template <unsigned S0> HttpContentDispositionHeaderValue::HttpContentDispositionHeaderValue(wchar_t const (&dispositionType)[S0]) :
	Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue(GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueFactory>().Create(dispositionType))
{}

inline Windows::Web::Http::Headers::HttpContentDispositionHeaderValue HttpContentDispositionHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue HttpContentDispositionHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueStatics>().Parse(input);
}

inline bool HttpContentDispositionHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue)
{
	return GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueStatics>().TryParse(input, contentDispositionHeaderValue);
}

template <unsigned S0> bool HttpContentDispositionHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue)
{
	return GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueStatics>().TryParse(input, contentDispositionHeaderValue);
}

inline HttpContentRangeHeaderValue::HttpContentRangeHeaderValue(unsigned long long const length) :
	Windows::Web::Http::Headers::IHttpContentRangeHeaderValue(GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueFactory>().CreateFromLength(length))
{}

inline HttpContentRangeHeaderValue::HttpContentRangeHeaderValue(unsigned long long const from, unsigned long long const to) :
	Windows::Web::Http::Headers::IHttpContentRangeHeaderValue(GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueFactory>().CreateFromRange(from, to))
{}

inline HttpContentRangeHeaderValue::HttpContentRangeHeaderValue(unsigned long long const from, unsigned long long const to, unsigned long long const length) :
	Windows::Web::Http::Headers::IHttpContentRangeHeaderValue(GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueFactory>().CreateFromRangeWithLength(from, to, length))
{}

inline Windows::Web::Http::Headers::HttpContentRangeHeaderValue HttpContentRangeHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpContentRangeHeaderValue HttpContentRangeHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueStatics>().Parse(input);
}

inline bool HttpContentRangeHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue)
{
	return GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueStatics>().TryParse(input, contentRangeHeaderValue);
}

template <unsigned S0> bool HttpContentRangeHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue)
{
	return GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueStatics>().TryParse(input, contentRangeHeaderValue);
}

inline HttpMediaTypeHeaderValue::HttpMediaTypeHeaderValue(String const & mediaType) :
	Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue(GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueFactory>().Create(mediaType))
{}

template <unsigned S0> HttpMediaTypeHeaderValue::HttpMediaTypeHeaderValue(wchar_t const (&mediaType)[S0]) :
	Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue(GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueFactory>().Create(mediaType))
{}

inline Windows::Web::Http::Headers::HttpMediaTypeHeaderValue HttpMediaTypeHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue HttpMediaTypeHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueStatics>().Parse(input);
}

inline bool HttpMediaTypeHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue)
{
	return GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueStatics>().TryParse(input, mediaTypeHeaderValue);
}

template <unsigned S0> bool HttpMediaTypeHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue)
{
	return GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueStatics>().TryParse(input, mediaTypeHeaderValue);
}

inline HttpCredentialsHeaderValue::HttpCredentialsHeaderValue(String const & scheme) :
	Windows::Web::Http::Headers::IHttpCredentialsHeaderValue(GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueFactory>().CreateFromScheme(scheme))
{}

template <unsigned S0> HttpCredentialsHeaderValue::HttpCredentialsHeaderValue(wchar_t const (&scheme)[S0]) :
	Windows::Web::Http::Headers::IHttpCredentialsHeaderValue(GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueFactory>().CreateFromScheme(scheme))
{}

inline HttpCredentialsHeaderValue::HttpCredentialsHeaderValue(String const & scheme, String const & token) :
	Windows::Web::Http::Headers::IHttpCredentialsHeaderValue(GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueFactory>().CreateFromSchemeWithToken(scheme, token))
{}

template <unsigned S0, unsigned S1> HttpCredentialsHeaderValue::HttpCredentialsHeaderValue(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]) :
	Windows::Web::Http::Headers::IHttpCredentialsHeaderValue(GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueFactory>().CreateFromSchemeWithToken(scheme, token))
{}

inline Windows::Web::Http::Headers::HttpCredentialsHeaderValue HttpCredentialsHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpCredentialsHeaderValue HttpCredentialsHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueStatics>().Parse(input);
}

inline bool HttpCredentialsHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue)
{
	return GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueStatics>().TryParse(input, credentialsHeaderValue);
}

template <unsigned S0> bool HttpCredentialsHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue)
{
	return GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueStatics>().TryParse(input, credentialsHeaderValue);
}

inline Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue HttpDateOrDeltaHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpDateOrDeltaHeaderValue, IHttpDateOrDeltaHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue HttpDateOrDeltaHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpDateOrDeltaHeaderValue, IHttpDateOrDeltaHeaderValueStatics>().Parse(input);
}

inline bool HttpDateOrDeltaHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue)
{
	return GetActivationFactory<HttpDateOrDeltaHeaderValue, IHttpDateOrDeltaHeaderValueStatics>().TryParse(input, dateOrDeltaHeaderValue);
}

template <unsigned S0> bool HttpDateOrDeltaHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue)
{
	return GetActivationFactory<HttpDateOrDeltaHeaderValue, IHttpDateOrDeltaHeaderValueStatics>().TryParse(input, dateOrDeltaHeaderValue);
}

inline HttpNameValueHeaderValue::HttpNameValueHeaderValue(String const & name) :
	Windows::Web::Http::Headers::IHttpNameValueHeaderValue(GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueFactory>().CreateFromName(name))
{}

template <unsigned S0> HttpNameValueHeaderValue::HttpNameValueHeaderValue(wchar_t const (&name)[S0]) :
	Windows::Web::Http::Headers::IHttpNameValueHeaderValue(GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueFactory>().CreateFromName(name))
{}

inline HttpNameValueHeaderValue::HttpNameValueHeaderValue(String const & name, String const & value) :
	Windows::Web::Http::Headers::IHttpNameValueHeaderValue(GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

template <unsigned S0, unsigned S1> HttpNameValueHeaderValue::HttpNameValueHeaderValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) :
	Windows::Web::Http::Headers::IHttpNameValueHeaderValue(GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

inline Windows::Web::Http::Headers::HttpNameValueHeaderValue HttpNameValueHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpNameValueHeaderValue HttpNameValueHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueStatics>().Parse(input);
}

inline bool HttpNameValueHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue)
{
	return GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueStatics>().TryParse(input, nameValueHeaderValue);
}

template <unsigned S0> bool HttpNameValueHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue)
{
	return GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueStatics>().TryParse(input, nameValueHeaderValue);
}

inline HttpChallengeHeaderValue::HttpChallengeHeaderValue(String const & scheme) :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValue(GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueFactory>().CreateFromScheme(scheme))
{}

template <unsigned S0> HttpChallengeHeaderValue::HttpChallengeHeaderValue(wchar_t const (&scheme)[S0]) :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValue(GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueFactory>().CreateFromScheme(scheme))
{}

inline HttpChallengeHeaderValue::HttpChallengeHeaderValue(String const & scheme, String const & token) :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValue(GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueFactory>().CreateFromSchemeWithToken(scheme, token))
{}

template <unsigned S0, unsigned S1> HttpChallengeHeaderValue::HttpChallengeHeaderValue(wchar_t const (&scheme)[S0], wchar_t const (&token)[S1]) :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValue(GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueFactory>().CreateFromSchemeWithToken(scheme, token))
{}

inline Windows::Web::Http::Headers::HttpChallengeHeaderValue HttpChallengeHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpChallengeHeaderValue HttpChallengeHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueStatics>().Parse(input);
}

inline bool HttpChallengeHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue)
{
	return GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueStatics>().TryParse(input, challengeHeaderValue);
}

template <unsigned S0> bool HttpChallengeHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue)
{
	return GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueStatics>().TryParse(input, challengeHeaderValue);
}

inline HttpConnectionOptionHeaderValue::HttpConnectionOptionHeaderValue(String const & token) :
	Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue(GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueFactory>().Create(token))
{}

template <unsigned S0> HttpConnectionOptionHeaderValue::HttpConnectionOptionHeaderValue(wchar_t const (&token)[S0]) :
	Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue(GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueFactory>().Create(token))
{}

inline Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue HttpConnectionOptionHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue HttpConnectionOptionHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueStatics>().Parse(input);
}

inline bool HttpConnectionOptionHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue)
{
	return GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueStatics>().TryParse(input, connectionOptionHeaderValue);
}

template <unsigned S0> bool HttpConnectionOptionHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue)
{
	return GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueStatics>().TryParse(input, connectionOptionHeaderValue);
}

inline HttpContentCodingHeaderValue::HttpContentCodingHeaderValue(String const & contentCoding) :
	Windows::Web::Http::Headers::IHttpContentCodingHeaderValue(GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueFactory>().Create(contentCoding))
{}

template <unsigned S0> HttpContentCodingHeaderValue::HttpContentCodingHeaderValue(wchar_t const (&contentCoding)[S0]) :
	Windows::Web::Http::Headers::IHttpContentCodingHeaderValue(GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueFactory>().Create(contentCoding))
{}

inline Windows::Web::Http::Headers::HttpContentCodingHeaderValue HttpContentCodingHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingHeaderValue HttpContentCodingHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueStatics>().Parse(input);
}

inline bool HttpContentCodingHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue)
{
	return GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueStatics>().TryParse(input, contentCodingHeaderValue);
}

template <unsigned S0> bool HttpContentCodingHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue)
{
	return GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueStatics>().TryParse(input, contentCodingHeaderValue);
}

inline HttpCookiePairHeaderValue::HttpCookiePairHeaderValue(String const & name) :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValue(GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueFactory>().CreateFromName(name))
{}

template <unsigned S0> HttpCookiePairHeaderValue::HttpCookiePairHeaderValue(wchar_t const (&name)[S0]) :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValue(GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueFactory>().CreateFromName(name))
{}

inline HttpCookiePairHeaderValue::HttpCookiePairHeaderValue(String const & name, String const & value) :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValue(GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

template <unsigned S0, unsigned S1> HttpCookiePairHeaderValue::HttpCookiePairHeaderValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValue(GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

inline Windows::Web::Http::Headers::HttpCookiePairHeaderValue HttpCookiePairHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpCookiePairHeaderValue HttpCookiePairHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueStatics>().Parse(input);
}

inline bool HttpCookiePairHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue)
{
	return GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueStatics>().TryParse(input, cookiePairHeaderValue);
}

template <unsigned S0> bool HttpCookiePairHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue)
{
	return GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueStatics>().TryParse(input, cookiePairHeaderValue);
}

inline HttpExpectationHeaderValue::HttpExpectationHeaderValue(String const & name) :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValue(GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueFactory>().CreateFromName(name))
{}

template <unsigned S0> HttpExpectationHeaderValue::HttpExpectationHeaderValue(wchar_t const (&name)[S0]) :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValue(GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueFactory>().CreateFromName(name))
{}

inline HttpExpectationHeaderValue::HttpExpectationHeaderValue(String const & name, String const & value) :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValue(GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

template <unsigned S0, unsigned S1> HttpExpectationHeaderValue::HttpExpectationHeaderValue(wchar_t const (&name)[S0], wchar_t const (&value)[S1]) :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValue(GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

inline Windows::Web::Http::Headers::HttpExpectationHeaderValue HttpExpectationHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpExpectationHeaderValue HttpExpectationHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueStatics>().Parse(input);
}

inline bool HttpExpectationHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue)
{
	return GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueStatics>().TryParse(input, expectationHeaderValue);
}

template <unsigned S0> bool HttpExpectationHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue)
{
	return GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueStatics>().TryParse(input, expectationHeaderValue);
}

inline HttpLanguageRangeWithQualityHeaderValue::HttpLanguageRangeWithQualityHeaderValue(String const & languageRange) :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue(GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueFactory>().CreateFromLanguageRange(languageRange))
{}

template <unsigned S0> HttpLanguageRangeWithQualityHeaderValue::HttpLanguageRangeWithQualityHeaderValue(wchar_t const (&languageRange)[S0]) :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue(GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueFactory>().CreateFromLanguageRange(languageRange))
{}

inline HttpLanguageRangeWithQualityHeaderValue::HttpLanguageRangeWithQualityHeaderValue(String const & languageRange, double const quality) :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue(GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueFactory>().CreateFromLanguageRangeWithQuality(languageRange, quality))
{}

template <unsigned S0> HttpLanguageRangeWithQualityHeaderValue::HttpLanguageRangeWithQualityHeaderValue(wchar_t const (&languageRange)[S0], double const quality) :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue(GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueFactory>().CreateFromLanguageRangeWithQuality(languageRange, quality))
{}

inline Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue HttpLanguageRangeWithQualityHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue HttpLanguageRangeWithQualityHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueStatics>().Parse(input);
}

inline bool HttpLanguageRangeWithQualityHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue)
{
	return GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueStatics>().TryParse(input, languageRangeWithQualityHeaderValue);
}

template <unsigned S0> bool HttpLanguageRangeWithQualityHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue)
{
	return GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueStatics>().TryParse(input, languageRangeWithQualityHeaderValue);
}

inline HttpMediaTypeWithQualityHeaderValue::HttpMediaTypeWithQualityHeaderValue(String const & mediaType) :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue(GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueFactory>().CreateFromMediaType(mediaType))
{}

template <unsigned S0> HttpMediaTypeWithQualityHeaderValue::HttpMediaTypeWithQualityHeaderValue(wchar_t const (&mediaType)[S0]) :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue(GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueFactory>().CreateFromMediaType(mediaType))
{}

inline HttpMediaTypeWithQualityHeaderValue::HttpMediaTypeWithQualityHeaderValue(String const & mediaType, double const quality) :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue(GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueFactory>().CreateFromMediaTypeWithQuality(mediaType, quality))
{}

template <unsigned S0> HttpMediaTypeWithQualityHeaderValue::HttpMediaTypeWithQualityHeaderValue(wchar_t const (&mediaType)[S0], double const quality) :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue(GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueFactory>().CreateFromMediaTypeWithQuality(mediaType, quality))
{}

inline Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue HttpMediaTypeWithQualityHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue HttpMediaTypeWithQualityHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueStatics>().Parse(input);
}

inline bool HttpMediaTypeWithQualityHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue)
{
	return GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueStatics>().TryParse(input, mediaTypeWithQualityHeaderValue);
}

template <unsigned S0> bool HttpMediaTypeWithQualityHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue)
{
	return GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueStatics>().TryParse(input, mediaTypeWithQualityHeaderValue);
}

inline HttpProductHeaderValue::HttpProductHeaderValue(String const & productName) :
	Windows::Web::Http::Headers::IHttpProductHeaderValue(GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueFactory>().CreateFromName(productName))
{}

template <unsigned S0> HttpProductHeaderValue::HttpProductHeaderValue(wchar_t const (&productName)[S0]) :
	Windows::Web::Http::Headers::IHttpProductHeaderValue(GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueFactory>().CreateFromName(productName))
{}

inline HttpProductHeaderValue::HttpProductHeaderValue(String const & productName, String const & productVersion) :
	Windows::Web::Http::Headers::IHttpProductHeaderValue(GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueFactory>().CreateFromNameWithVersion(productName, productVersion))
{}

template <unsigned S0, unsigned S1> HttpProductHeaderValue::HttpProductHeaderValue(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]) :
	Windows::Web::Http::Headers::IHttpProductHeaderValue(GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueFactory>().CreateFromNameWithVersion(productName, productVersion))
{}

inline Windows::Web::Http::Headers::HttpProductHeaderValue HttpProductHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpProductHeaderValue HttpProductHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueStatics>().Parse(input);
}

inline bool HttpProductHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue)
{
	return GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueStatics>().TryParse(input, productHeaderValue);
}

template <unsigned S0> bool HttpProductHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue)
{
	return GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueStatics>().TryParse(input, productHeaderValue);
}

inline HttpProductInfoHeaderValue::HttpProductInfoHeaderValue(String const & productComment) :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValue(GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueFactory>().CreateFromComment(productComment))
{}

template <unsigned S0> HttpProductInfoHeaderValue::HttpProductInfoHeaderValue(wchar_t const (&productComment)[S0]) :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValue(GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueFactory>().CreateFromComment(productComment))
{}

inline HttpProductInfoHeaderValue::HttpProductInfoHeaderValue(String const & productName, String const & productVersion) :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValue(GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueFactory>().CreateFromNameWithVersion(productName, productVersion))
{}

template <unsigned S0, unsigned S1> HttpProductInfoHeaderValue::HttpProductInfoHeaderValue(wchar_t const (&productName)[S0], wchar_t const (&productVersion)[S1]) :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValue(GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueFactory>().CreateFromNameWithVersion(productName, productVersion))
{}

inline Windows::Web::Http::Headers::HttpProductInfoHeaderValue HttpProductInfoHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpProductInfoHeaderValue HttpProductInfoHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueStatics>().Parse(input);
}

inline bool HttpProductInfoHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue)
{
	return GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueStatics>().TryParse(input, productInfoHeaderValue);
}

template <unsigned S0> bool HttpProductInfoHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue)
{
	return GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueStatics>().TryParse(input, productInfoHeaderValue);
}

inline HttpContentCodingWithQualityHeaderValue::HttpContentCodingWithQualityHeaderValue(String const & contentCoding) :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue(GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueFactory>().CreateFromValue(contentCoding))
{}

template <unsigned S0> HttpContentCodingWithQualityHeaderValue::HttpContentCodingWithQualityHeaderValue(wchar_t const (&contentCoding)[S0]) :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue(GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueFactory>().CreateFromValue(contentCoding))
{}

inline HttpContentCodingWithQualityHeaderValue::HttpContentCodingWithQualityHeaderValue(String const & contentCoding, double const quality) :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue(GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueFactory>().CreateFromValueWithQuality(contentCoding, quality))
{}

template <unsigned S0> HttpContentCodingWithQualityHeaderValue::HttpContentCodingWithQualityHeaderValue(wchar_t const (&contentCoding)[S0], double const quality) :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue(GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueFactory>().CreateFromValueWithQuality(contentCoding, quality))
{}

inline Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue HttpContentCodingWithQualityHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue HttpContentCodingWithQualityHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueStatics>().Parse(input);
}

inline bool HttpContentCodingWithQualityHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue)
{
	return GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueStatics>().TryParse(input, contentCodingWithQualityHeaderValue);
}

template <unsigned S0> bool HttpContentCodingWithQualityHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue)
{
	return GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueStatics>().TryParse(input, contentCodingWithQualityHeaderValue);
}

inline HttpTransferCodingHeaderValue::HttpTransferCodingHeaderValue(String const & input) :
	Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue(GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueFactory>().Create(input))
{}

template <unsigned S0> HttpTransferCodingHeaderValue::HttpTransferCodingHeaderValue(wchar_t const (&input)[S0]) :
	Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue(GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueFactory>().Create(input))
{}

inline Windows::Web::Http::Headers::HttpTransferCodingHeaderValue HttpTransferCodingHeaderValue::Parse(String const & input)
{
	return GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueStatics>().Parse(input);
}

template <unsigned S0> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue HttpTransferCodingHeaderValue::Parse(wchar_t const (&input)[S0])
{
	return GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueStatics>().Parse(input);
}

inline bool HttpTransferCodingHeaderValue::TryParse(String const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue)
{
	return GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueStatics>().TryParse(input, transferCodingHeaderValue);
}

template <unsigned S0> bool HttpTransferCodingHeaderValue::TryParse(wchar_t const (&input)[S0], Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue)
{
	return GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueStatics>().TryParse(input, transferCodingHeaderValue);
}

}}}}}

namespace Modern { namespace Windows { namespace Web { namespace Syndication {

inline SyndicationAttribute::SyndicationAttribute() :
	Windows::Web::Syndication::ISyndicationAttribute(ActivateInstance<SyndicationAttribute>())
{}

inline SyndicationAttribute::SyndicationAttribute(String const & attributeName, String const & attributeNamespace, String const & attributeValue) :
	Windows::Web::Syndication::ISyndicationAttribute(GetActivationFactory<SyndicationAttribute, ISyndicationAttributeFactory>().CreateSyndicationAttribute(attributeName, attributeNamespace, attributeValue))
{}

template <unsigned S0, unsigned S1, unsigned S2> SyndicationAttribute::SyndicationAttribute(wchar_t const (&attributeName)[S0], wchar_t const (&attributeNamespace)[S1], wchar_t const (&attributeValue)[S2]) :
	Windows::Web::Syndication::ISyndicationAttribute(GetActivationFactory<SyndicationAttribute, ISyndicationAttributeFactory>().CreateSyndicationAttribute(attributeName, attributeNamespace, attributeValue))
{}

inline SyndicationNode::SyndicationNode() :
	Windows::Web::Syndication::ISyndicationNode(ActivateInstance<SyndicationNode>())
{}

inline SyndicationNode::SyndicationNode(String const & nodeName, String const & nodeNamespace, String const & nodeValue) :
	Windows::Web::Syndication::ISyndicationNode(GetActivationFactory<SyndicationNode, ISyndicationNodeFactory>().CreateSyndicationNode(nodeName, nodeNamespace, nodeValue))
{}

template <unsigned S0, unsigned S1, unsigned S2> SyndicationNode::SyndicationNode(wchar_t const (&nodeName)[S0], wchar_t const (&nodeNamespace)[S1], wchar_t const (&nodeValue)[S2]) :
	Windows::Web::Syndication::ISyndicationNode(GetActivationFactory<SyndicationNode, ISyndicationNodeFactory>().CreateSyndicationNode(nodeName, nodeNamespace, nodeValue))
{}

inline SyndicationGenerator::SyndicationGenerator() :
	Windows::Web::Syndication::ISyndicationGenerator(ActivateInstance<SyndicationGenerator>())
{}

inline SyndicationGenerator::SyndicationGenerator(String const & text) :
	Windows::Web::Syndication::ISyndicationGenerator(GetActivationFactory<SyndicationGenerator, ISyndicationGeneratorFactory>().CreateSyndicationGenerator(text))
{}

template <unsigned S0> SyndicationGenerator::SyndicationGenerator(wchar_t const (&text)[S0]) :
	Windows::Web::Syndication::ISyndicationGenerator(GetActivationFactory<SyndicationGenerator, ISyndicationGeneratorFactory>().CreateSyndicationGenerator(text))
{}

inline SyndicationText::SyndicationText() :
	Windows::Web::Syndication::ISyndicationText(ActivateInstance<SyndicationText>())
{}

inline SyndicationText::SyndicationText(String const & text) :
	Windows::Web::Syndication::ISyndicationText(GetActivationFactory<SyndicationText, ISyndicationTextFactory>().CreateSyndicationText(text))
{}

template <unsigned S0> SyndicationText::SyndicationText(wchar_t const (&text)[S0]) :
	Windows::Web::Syndication::ISyndicationText(GetActivationFactory<SyndicationText, ISyndicationTextFactory>().CreateSyndicationText(text))
{}

inline SyndicationText::SyndicationText(String const & text, Windows::Web::Syndication::SyndicationTextType const type) :
	Windows::Web::Syndication::ISyndicationText(GetActivationFactory<SyndicationText, ISyndicationTextFactory>().CreateSyndicationText(text, type))
{}

template <unsigned S0> SyndicationText::SyndicationText(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType const type) :
	Windows::Web::Syndication::ISyndicationText(GetActivationFactory<SyndicationText, ISyndicationTextFactory>().CreateSyndicationText(text, type))
{}

inline SyndicationContent::SyndicationContent() :
	Windows::Web::Syndication::ISyndicationContent(ActivateInstance<SyndicationContent>())
{}

inline SyndicationContent::SyndicationContent(String const & text, Windows::Web::Syndication::SyndicationTextType const type) :
	Windows::Web::Syndication::ISyndicationContent(GetActivationFactory<SyndicationContent, ISyndicationContentFactory>().CreateSyndicationContent(text, type))
{}

template <unsigned S0> SyndicationContent::SyndicationContent(wchar_t const (&text)[S0], Windows::Web::Syndication::SyndicationTextType const type) :
	Windows::Web::Syndication::ISyndicationContent(GetActivationFactory<SyndicationContent, ISyndicationContentFactory>().CreateSyndicationContent(text, type))
{}

inline SyndicationContent::SyndicationContent(Windows::Foundation::Uri const & sourceUri) :
	Windows::Web::Syndication::ISyndicationContent(GetActivationFactory<SyndicationContent, ISyndicationContentFactory>().CreateSyndicationContent(sourceUri))
{}

inline SyndicationLink::SyndicationLink() :
	Windows::Web::Syndication::ISyndicationLink(ActivateInstance<SyndicationLink>())
{}

inline SyndicationLink::SyndicationLink(Windows::Foundation::Uri const & uri) :
	Windows::Web::Syndication::ISyndicationLink(GetActivationFactory<SyndicationLink, ISyndicationLinkFactory>().CreateSyndicationLink(uri))
{}

inline SyndicationLink::SyndicationLink(Windows::Foundation::Uri const & uri, String const & relationship, String const & title, String const & mediaType, unsigned const length) :
	Windows::Web::Syndication::ISyndicationLink(GetActivationFactory<SyndicationLink, ISyndicationLinkFactory>().CreateSyndicationLink(uri, relationship, title, mediaType, length))
{}

template <unsigned S0, unsigned S1, unsigned S2> SyndicationLink::SyndicationLink(Windows::Foundation::Uri const & uri, wchar_t const (&relationship)[S0], wchar_t const (&title)[S1], wchar_t const (&mediaType)[S2], unsigned const length) :
	Windows::Web::Syndication::ISyndicationLink(GetActivationFactory<SyndicationLink, ISyndicationLinkFactory>().CreateSyndicationLink(uri, relationship, title, mediaType, length))
{}

inline SyndicationPerson::SyndicationPerson() :
	Windows::Web::Syndication::ISyndicationPerson(ActivateInstance<SyndicationPerson>())
{}

inline SyndicationPerson::SyndicationPerson(String const & name) :
	Windows::Web::Syndication::ISyndicationPerson(GetActivationFactory<SyndicationPerson, ISyndicationPersonFactory>().CreateSyndicationPerson(name))
{}

template <unsigned S0> SyndicationPerson::SyndicationPerson(wchar_t const (&name)[S0]) :
	Windows::Web::Syndication::ISyndicationPerson(GetActivationFactory<SyndicationPerson, ISyndicationPersonFactory>().CreateSyndicationPerson(name))
{}

inline SyndicationPerson::SyndicationPerson(String const & name, String const & email, Windows::Foundation::Uri const & uri) :
	Windows::Web::Syndication::ISyndicationPerson(GetActivationFactory<SyndicationPerson, ISyndicationPersonFactory>().CreateSyndicationPerson(name, email, uri))
{}

template <unsigned S0, unsigned S1> SyndicationPerson::SyndicationPerson(wchar_t const (&name)[S0], wchar_t const (&email)[S1], Windows::Foundation::Uri const & uri) :
	Windows::Web::Syndication::ISyndicationPerson(GetActivationFactory<SyndicationPerson, ISyndicationPersonFactory>().CreateSyndicationPerson(name, email, uri))
{}

inline SyndicationCategory::SyndicationCategory() :
	Windows::Web::Syndication::ISyndicationCategory(ActivateInstance<SyndicationCategory>())
{}

inline SyndicationCategory::SyndicationCategory(String const & term) :
	Windows::Web::Syndication::ISyndicationCategory(GetActivationFactory<SyndicationCategory, ISyndicationCategoryFactory>().CreateSyndicationCategory(term))
{}

template <unsigned S0> SyndicationCategory::SyndicationCategory(wchar_t const (&term)[S0]) :
	Windows::Web::Syndication::ISyndicationCategory(GetActivationFactory<SyndicationCategory, ISyndicationCategoryFactory>().CreateSyndicationCategory(term))
{}

inline SyndicationCategory::SyndicationCategory(String const & term, String const & scheme, String const & label) :
	Windows::Web::Syndication::ISyndicationCategory(GetActivationFactory<SyndicationCategory, ISyndicationCategoryFactory>().CreateSyndicationCategory(term, scheme, label))
{}

template <unsigned S0, unsigned S1, unsigned S2> SyndicationCategory::SyndicationCategory(wchar_t const (&term)[S0], wchar_t const (&scheme)[S1], wchar_t const (&label)[S2]) :
	Windows::Web::Syndication::ISyndicationCategory(GetActivationFactory<SyndicationCategory, ISyndicationCategoryFactory>().CreateSyndicationCategory(term, scheme, label))
{}

inline SyndicationFeed::SyndicationFeed() :
	Windows::Web::Syndication::ISyndicationFeed(ActivateInstance<SyndicationFeed>())
{}

inline SyndicationFeed::SyndicationFeed(String const & title, String const & subtitle, Windows::Foundation::Uri const & uri) :
	Windows::Web::Syndication::ISyndicationFeed(GetActivationFactory<SyndicationFeed, ISyndicationFeedFactory>().CreateSyndicationFeed(title, subtitle, uri))
{}

template <unsigned S0, unsigned S1> SyndicationFeed::SyndicationFeed(wchar_t const (&title)[S0], wchar_t const (&subtitle)[S1], Windows::Foundation::Uri const & uri) :
	Windows::Web::Syndication::ISyndicationFeed(GetActivationFactory<SyndicationFeed, ISyndicationFeedFactory>().CreateSyndicationFeed(title, subtitle, uri))
{}

inline SyndicationItem::SyndicationItem() :
	Windows::Web::Syndication::ISyndicationItem(ActivateInstance<SyndicationItem>())
{}

inline SyndicationItem::SyndicationItem(String const & title, Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) :
	Windows::Web::Syndication::ISyndicationItem(GetActivationFactory<SyndicationItem, ISyndicationItemFactory>().CreateSyndicationItem(title, content, uri))
{}

template <unsigned S0> SyndicationItem::SyndicationItem(wchar_t const (&title)[S0], Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) :
	Windows::Web::Syndication::ISyndicationItem(GetActivationFactory<SyndicationItem, ISyndicationItemFactory>().CreateSyndicationItem(title, content, uri))
{}

inline SyndicationClient::SyndicationClient() :
	Windows::Web::Syndication::ISyndicationClient(ActivateInstance<SyndicationClient>())
{}

inline SyndicationClient::SyndicationClient(Windows::Security::Credentials::PasswordCredential const & serverCredential) :
	Windows::Web::Syndication::ISyndicationClient(GetActivationFactory<SyndicationClient, ISyndicationClientFactory>().CreateSyndicationClient(serverCredential))
{}

inline Windows::Web::Syndication::SyndicationErrorStatus SyndicationError::GetStatus(int const hresult)
{
	return GetActivationFactory<SyndicationError, ISyndicationErrorStatics>().GetStatus(hresult);
}

}}}}
